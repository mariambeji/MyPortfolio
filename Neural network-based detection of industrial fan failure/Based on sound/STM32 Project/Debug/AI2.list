
AI2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013b94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00039518  08013d28  08013d28  00023d28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804d240  0804d240  000757d4  2**0
                  CONTENTS
  4 .ARM          00000008  0804d240  0804d240  0005d240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804d248  0804d248  000757d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804d248  0804d248  0005d248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804d24c  0804d24c  0005d24c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000c8c  20000000  0804d250  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013390  20000c8c  0804dedc  00060c8c  2**2
                  ALLOC
 10 .ram2         000057d4  10000000  10000000  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 ._user_heap_stack 00001004  2001401c  2001401c  0008401c  2**0
                  ALLOC
 12 .ARM.attributes 00000034  00000000  00000000  000757d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ed77  00000000  00000000  00075808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006018  00000000  00000000  000a457f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0001789a  00000000  00000000  000aa597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001718  00000000  00000000  000c1e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001f90  00000000  00000000  000c3550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00005ed4  00000000  00000000  000c54e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002710e  00000000  00000000  000cb3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00102fcf  00000000  00000000  000f24c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000061eb  00000000  00000000  001f5491  2**0
                  CONTENTS, READONLY
 22 .iar.rtmodel  000001e7  00000000  00000000  001fb67c  2**0
                  CONTENTS, READONLY
 23 .iar_vfe_header 00000024  00000000  00000000  001fb864  2**2
                  CONTENTS, READONLY
 24 .debug_frame  0000ab8c  00000000  00000000  001fb888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .stab         00000024  00000000  00000000  00206414  2**2
                  CONTENTS, READONLY, DEBUGGING
 26 .stabstr      0000003c  00000000  00000000  00206438  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000c8c 	.word	0x20000c8c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013d0c 	.word	0x08013d0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000c90 	.word	0x20000c90
 80001cc:	08013d0c 	.word	0x08013d0c

080001d0 <_ai_platform_get_io_buffers_info>:
 80001d0:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001d4:	2500      	movs	r5, #0
 80001d6:	46aa      	mov	sl, r5
 80001d8:	b082      	sub	sp, #8
 80001da:	4607      	mov	r7, r0
 80001dc:	46ab      	mov	fp, r5
 80001de:	46d0      	mov	r8, sl
 80001e0:	46d1      	mov	r9, sl
 80001e2:	e028      	b.n	8000236 <_ai_platform_get_io_buffers_info+0x66>
 80001e4:	2000      	movs	r0, #0
 80001e6:	e01c      	b.n	8000222 <_ai_platform_get_io_buffers_info+0x52>
 80001e8:	f850 400a 	ldr.w	r4, [r0, sl]
 80001ec:	b364      	cbz	r4, 8000248 <_ai_platform_get_io_buffers_info+0x78>
 80001ee:	68b8      	ldr	r0, [r7, #8]
 80001f0:	6841      	ldr	r1, [r0, #4]
 80001f2:	6880      	ldr	r0, [r0, #8]
 80001f4:	4440      	add	r0, r8
 80001f6:	eb01 0609 	add.w	r6, r1, r9
 80001fa:	9000      	str	r0, [sp, #0]
 80001fc:	69a1      	ldr	r1, [r4, #24]
 80001fe:	6808      	ldr	r0, [r1, #0]
 8000200:	f005 fd58 	bl	8005cb4 <ai_array_to_buffer_fmt>
 8000204:	6030      	str	r0, [r6, #0]
 8000206:	2101      	movs	r1, #1
 8000208:	80b1      	strh	r1, [r6, #4]
 800020a:	68e0      	ldr	r0, [r4, #12]
 800020c:	68c1      	ldr	r1, [r0, #12]
 800020e:	80f1      	strh	r1, [r6, #6]
 8000210:	6882      	ldr	r2, [r0, #8]
 8000212:	8132      	strh	r2, [r6, #8]
 8000214:	6840      	ldr	r0, [r0, #4]
 8000216:	60f0      	str	r0, [r6, #12]
 8000218:	69a1      	ldr	r1, [r4, #24]
 800021a:	688a      	ldr	r2, [r1, #8]
 800021c:	6132      	str	r2, [r6, #16]
 800021e:	9800      	ldr	r0, [sp, #0]
 8000220:	b9e0      	cbnz	r0, 800025c <_ai_platform_get_io_buffers_info+0x8c>
 8000222:	6170      	str	r0, [r6, #20]
 8000224:	1c6d      	adds	r5, r5, #1
 8000226:	f10b 0b01 	add.w	fp, fp, #1
 800022a:	f109 0918 	add.w	r9, r9, #24
 800022e:	f108 0808 	add.w	r8, r8, #8
 8000232:	f10a 0a04 	add.w	sl, sl, #4
 8000236:	2f00      	cmp	r7, #0
 8000238:	bf14      	ite	ne
 800023a:	8838      	ldrhne	r0, [r7, #0]
 800023c:	2000      	moveq	r0, #0
 800023e:	4583      	cmp	fp, r0
 8000240:	d202      	bcs.n	8000248 <_ai_platform_get_io_buffers_info+0x78>
 8000242:	6878      	ldr	r0, [r7, #4]
 8000244:	2800      	cmp	r0, #0
 8000246:	d1cf      	bne.n	80001e8 <_ai_platform_get_io_buffers_info+0x18>
 8000248:	b2a8      	uxth	r0, r5
 800024a:	b118      	cbz	r0, 8000254 <_ai_platform_get_io_buffers_info+0x84>
 800024c:	68b9      	ldr	r1, [r7, #8]
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	684a      	ldr	r2, [r1, #4]
 8000252:	6002      	str	r2, [r0, #0]
 8000254:	b2a8      	uxth	r0, r5
 8000256:	b003      	add	sp, #12
 8000258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800025c:	9900      	ldr	r1, [sp, #0]
 800025e:	2000      	movs	r0, #0
 8000260:	6008      	str	r0, [r1, #0]
 8000262:	9a00      	ldr	r2, [sp, #0]
 8000264:	6820      	ldr	r0, [r4, #0]
 8000266:	6050      	str	r0, [r2, #4]
 8000268:	2800      	cmp	r0, #0
 800026a:	bf1c      	itt	ne
 800026c:	8840      	ldrhne	r0, [r0, #2]
 800026e:	2800      	cmpne	r0, #0
 8000270:	d0b8      	beq.n	80001e4 <_ai_platform_get_io_buffers_info+0x14>
 8000272:	9800      	ldr	r0, [sp, #0]
 8000274:	2101      	movs	r1, #1
 8000276:	6001      	str	r1, [r0, #0]
 8000278:	9800      	ldr	r0, [sp, #0]
 800027a:	e7d2      	b.n	8000222 <_ai_platform_get_io_buffers_info+0x52>

0800027c <_platform_network_state_setup>:
 800027c:	b430      	push	{r4, r5}
 800027e:	68d3      	ldr	r3, [r2, #12]
 8000280:	6955      	ldr	r5, [r2, #20]
 8000282:	68dc      	ldr	r4, [r3, #12]
 8000284:	68eb      	ldr	r3, [r5, #12]
 8000286:	435c      	muls	r4, r3
 8000288:	6084      	str	r4, [r0, #8]
 800028a:	888d      	ldrh	r5, [r1, #4]
 800028c:	436c      	muls	r4, r5
 800028e:	60c4      	str	r4, [r0, #12]
 8000290:	6909      	ldr	r1, [r1, #16]
 8000292:	68c3      	ldr	r3, [r0, #12]
 8000294:	6041      	str	r1, [r0, #4]
 8000296:	4419      	add	r1, r3
 8000298:	6001      	str	r1, [r0, #0]
 800029a:	6992      	ldr	r2, [r2, #24]
 800029c:	6814      	ldr	r4, [r2, #0]
 800029e:	00a1      	lsls	r1, r4, #2
 80002a0:	d407      	bmi.n	80002b2 <_platform_network_state_setup+0x36>
 80002a2:	6894      	ldr	r4, [r2, #8]
 80002a4:	68d1      	ldr	r1, [r2, #12]
 80002a6:	6843      	ldr	r3, [r0, #4]
 80002a8:	1a64      	subs	r4, r4, r1
 80002aa:	1919      	adds	r1, r3, r4
 80002ac:	6091      	str	r1, [r2, #8]
 80002ae:	6840      	ldr	r0, [r0, #4]
 80002b0:	60d0      	str	r0, [r2, #12]
 80002b2:	bc30      	pop	{r4, r5}
 80002b4:	4770      	bx	lr

080002b6 <ai_platform_runtime_get_revision>:
 80002b6:	f8df 0814 	ldr.w	r0, [pc, #2068]	; 8000acc <.text_18>
 80002ba:	6801      	ldr	r1, [r0, #0]
 80002bc:	0849      	lsrs	r1, r1, #1
 80002be:	0049      	lsls	r1, r1, #1
 80002c0:	6001      	str	r1, [r0, #0]
 80002c2:	2001      	movs	r0, #1
 80002c4:	f8df 1808 	ldr.w	r1, [pc, #2056]	; 8000ad0 <.text_19>
 80002c8:	6088      	str	r0, [r1, #8]
 80002ca:	6888      	ldr	r0, [r1, #8]
 80002cc:	2800      	cmp	r0, #0
 80002ce:	d1fc      	bne.n	80002ca <ai_platform_runtime_get_revision+0x14>
 80002d0:	f8df 2800 	ldr.w	r2, [pc, #2048]	; 8000ad4 <.text_20>
 80002d4:	600a      	str	r2, [r1, #0]
 80002d6:	6808      	ldr	r0, [r1, #0]
 80002d8:	f8df 17fc 	ldr.w	r1, [pc, #2044]	; 8000ad8 <.text_21>
 80002dc:	4288      	cmp	r0, r1
 80002de:	d000      	beq.n	80002e2 <ai_platform_runtime_get_revision+0x2c>
 80002e0:	e7fe      	b.n	80002e0 <ai_platform_runtime_get_revision+0x2a>
 80002e2:	a0ad      	add	r0, pc, #692	; (adr r0, 8000598 <.text_13>)
 80002e4:	4770      	bx	lr

080002e6 <ai_platform_runtime_get_version>:
 80002e6:	f8df 07e4 	ldr.w	r0, [pc, #2020]	; 8000acc <.text_18>
 80002ea:	6801      	ldr	r1, [r0, #0]
 80002ec:	0849      	lsrs	r1, r1, #1
 80002ee:	0049      	lsls	r1, r1, #1
 80002f0:	6001      	str	r1, [r0, #0]
 80002f2:	2001      	movs	r0, #1
 80002f4:	f8df 17d8 	ldr.w	r1, [pc, #2008]	; 8000ad0 <.text_19>
 80002f8:	6088      	str	r0, [r1, #8]
 80002fa:	6888      	ldr	r0, [r1, #8]
 80002fc:	2800      	cmp	r0, #0
 80002fe:	d1fc      	bne.n	80002fa <ai_platform_runtime_get_version+0x14>
 8000300:	f8df 27d0 	ldr.w	r2, [pc, #2000]	; 8000ad4 <.text_20>
 8000304:	600a      	str	r2, [r1, #0]
 8000306:	6808      	ldr	r0, [r1, #0]
 8000308:	f8df 17cc 	ldr.w	r1, [pc, #1996]	; 8000ad8 <.text_21>
 800030c:	4288      	cmp	r0, r1
 800030e:	d000      	beq.n	8000312 <ai_platform_runtime_get_version+0x2c>
 8000310:	e7fe      	b.n	8000310 <ai_platform_runtime_get_version+0x2a>
 8000312:	f20f 72d0 	addw	r2, pc, #2000	; 0x7d0
 8000316:	6810      	ldr	r0, [r2, #0]
 8000318:	4770      	bx	lr

0800031a <ai_platform_api_get_version>:
 800031a:	f8df 07b0 	ldr.w	r0, [pc, #1968]	; 8000acc <.text_18>
 800031e:	6801      	ldr	r1, [r0, #0]
 8000320:	0849      	lsrs	r1, r1, #1
 8000322:	0049      	lsls	r1, r1, #1
 8000324:	6001      	str	r1, [r0, #0]
 8000326:	2001      	movs	r0, #1
 8000328:	f8df 17a4 	ldr.w	r1, [pc, #1956]	; 8000ad0 <.text_19>
 800032c:	6088      	str	r0, [r1, #8]
 800032e:	6888      	ldr	r0, [r1, #8]
 8000330:	2800      	cmp	r0, #0
 8000332:	d1fc      	bne.n	800032e <ai_platform_api_get_version+0x14>
 8000334:	f8df 279c 	ldr.w	r2, [pc, #1948]	; 8000ad4 <.text_20>
 8000338:	600a      	str	r2, [r1, #0]
 800033a:	6808      	ldr	r0, [r1, #0]
 800033c:	f8df 1798 	ldr.w	r1, [pc, #1944]	; 8000ad8 <.text_21>
 8000340:	4288      	cmp	r0, r1
 8000342:	d000      	beq.n	8000346 <ai_platform_api_get_version+0x2c>
 8000344:	e7fe      	b.n	8000344 <ai_platform_api_get_version+0x2a>
 8000346:	f20f 72a0 	addw	r2, pc, #1952	; 0x7a0
 800034a:	6810      	ldr	r0, [r2, #0]
 800034c:	4770      	bx	lr

0800034e <ai_platform_interface_api_get_version>:
 800034e:	f8df 077c 	ldr.w	r0, [pc, #1916]	; 8000acc <.text_18>
 8000352:	6801      	ldr	r1, [r0, #0]
 8000354:	0849      	lsrs	r1, r1, #1
 8000356:	0049      	lsls	r1, r1, #1
 8000358:	6001      	str	r1, [r0, #0]
 800035a:	2001      	movs	r0, #1
 800035c:	f8df 1770 	ldr.w	r1, [pc, #1904]	; 8000ad0 <.text_19>
 8000360:	6088      	str	r0, [r1, #8]
 8000362:	6888      	ldr	r0, [r1, #8]
 8000364:	2800      	cmp	r0, #0
 8000366:	d1fc      	bne.n	8000362 <ai_platform_interface_api_get_version+0x14>
 8000368:	f8df 2768 	ldr.w	r2, [pc, #1896]	; 8000ad4 <.text_20>
 800036c:	600a      	str	r2, [r1, #0]
 800036e:	6808      	ldr	r0, [r1, #0]
 8000370:	f8df 1764 	ldr.w	r1, [pc, #1892]	; 8000ad8 <.text_21>
 8000374:	4288      	cmp	r0, r1
 8000376:	d000      	beq.n	800037a <ai_platform_interface_api_get_version+0x2c>
 8000378:	e7fe      	b.n	8000378 <ai_platform_interface_api_get_version+0x2a>
 800037a:	f20f 7270 	addw	r2, pc, #1904	; 0x770
 800037e:	6810      	ldr	r0, [r2, #0]
 8000380:	4770      	bx	lr

08000382 <ai_platform_context_acquire>:
 8000382:	b120      	cbz	r0, 800038e <ai_platform_context_acquire+0xc>
 8000384:	6801      	ldr	r1, [r0, #0]
 8000386:	f8df 2754 	ldr.w	r2, [pc, #1876]	; 8000adc <.text_22>
 800038a:	4291      	cmp	r1, r2
 800038c:	d000      	beq.n	8000390 <ai_platform_context_acquire+0xe>
 800038e:	2000      	movs	r0, #0
 8000390:	f8df 1738 	ldr.w	r1, [pc, #1848]	; 8000acc <.text_18>
 8000394:	680a      	ldr	r2, [r1, #0]
 8000396:	0852      	lsrs	r2, r2, #1
 8000398:	0052      	lsls	r2, r2, #1
 800039a:	600a      	str	r2, [r1, #0]
 800039c:	2101      	movs	r1, #1
 800039e:	f8df 2730 	ldr.w	r2, [pc, #1840]	; 8000ad0 <.text_19>
 80003a2:	6091      	str	r1, [r2, #8]
 80003a4:	6891      	ldr	r1, [r2, #8]
 80003a6:	2900      	cmp	r1, #0
 80003a8:	d1fc      	bne.n	80003a4 <ai_platform_context_acquire+0x22>
 80003aa:	f8df 3728 	ldr.w	r3, [pc, #1832]	; 8000ad4 <.text_20>
 80003ae:	6013      	str	r3, [r2, #0]
 80003b0:	6811      	ldr	r1, [r2, #0]
 80003b2:	f8df 2724 	ldr.w	r2, [pc, #1828]	; 8000ad8 <.text_21>
 80003b6:	4291      	cmp	r1, r2
 80003b8:	d000      	beq.n	80003bc <ai_platform_context_acquire+0x3a>
 80003ba:	e7fe      	b.n	80003ba <ai_platform_context_acquire+0x38>
 80003bc:	4770      	bx	lr

080003be <ai_platform_context_release>:
 80003be:	f8df 171c 	ldr.w	r1, [pc, #1820]	; 8000adc <.text_22>
 80003c2:	6001      	str	r1, [r0, #0]
 80003c4:	4770      	bx	lr

080003c6 <ai_platform_network_get_error>:
 80003c6:	b120      	cbz	r0, 80003d2 <ai_platform_network_get_error+0xc>
 80003c8:	6801      	ldr	r1, [r0, #0]
 80003ca:	f8df 2710 	ldr.w	r2, [pc, #1808]	; 8000adc <.text_22>
 80003ce:	4291      	cmp	r1, r2
 80003d0:	d000      	beq.n	80003d4 <ai_platform_network_get_error+0xe>
 80003d2:	2000      	movs	r0, #0
 80003d4:	f8df 16f4 	ldr.w	r1, [pc, #1780]	; 8000acc <.text_18>
 80003d8:	680a      	ldr	r2, [r1, #0]
 80003da:	0852      	lsrs	r2, r2, #1
 80003dc:	0052      	lsls	r2, r2, #1
 80003de:	600a      	str	r2, [r1, #0]
 80003e0:	2101      	movs	r1, #1
 80003e2:	f8df 26ec 	ldr.w	r2, [pc, #1772]	; 8000ad0 <.text_19>
 80003e6:	6091      	str	r1, [r2, #8]
 80003e8:	6891      	ldr	r1, [r2, #8]
 80003ea:	2900      	cmp	r1, #0
 80003ec:	d1fc      	bne.n	80003e8 <ai_platform_network_get_error+0x22>
 80003ee:	f8df 36e4 	ldr.w	r3, [pc, #1764]	; 8000ad4 <.text_20>
 80003f2:	6013      	str	r3, [r2, #0]
 80003f4:	6811      	ldr	r1, [r2, #0]
 80003f6:	f8df 26e0 	ldr.w	r2, [pc, #1760]	; 8000ad8 <.text_21>
 80003fa:	4291      	cmp	r1, r2
 80003fc:	d000      	beq.n	8000400 <ai_platform_network_get_error+0x3a>
 80003fe:	e7fe      	b.n	80003fe <ai_platform_network_get_error+0x38>
 8000400:	2800      	cmp	r0, #0
 8000402:	bf1c      	itt	ne
 8000404:	3010      	addne	r0, #16
 8000406:	f000 bb83 	bne.w	8000b10 <core_get_error>
 800040a:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 800040e:	6800      	ldr	r0, [r0, #0]
 8000410:	4770      	bx	lr

08000412 <ai_platform_network_set_error>:
 8000412:	2800      	cmp	r0, #0
 8000414:	bf1c      	itt	ne
 8000416:	3010      	addne	r0, #16
 8000418:	f000 bb7f 	bne.w	8000b1a <core_set_error>
 800041c:	4770      	bx	lr

0800041e <ai_platform_api_get_network_report>:
 800041e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000422:	ea5f 0900 	movs.w	r9, r0
 8000426:	b081      	sub	sp, #4
 8000428:	460c      	mov	r4, r1
 800042a:	d005      	beq.n	8000438 <ai_platform_api_get_network_report+0x1a>
 800042c:	f8d9 0000 	ldr.w	r0, [r9]
 8000430:	f8df 16a8 	ldr.w	r1, [pc, #1704]	; 8000adc <.text_22>
 8000434:	4288      	cmp	r0, r1
 8000436:	d001      	beq.n	800043c <ai_platform_api_get_network_report+0x1e>
 8000438:	f04f 0900 	mov.w	r9, #0
 800043c:	f8df 568c 	ldr.w	r5, [pc, #1676]	; 8000acc <.text_18>
 8000440:	f8df 668c 	ldr.w	r6, [pc, #1676]	; 8000ad0 <.text_19>
 8000444:	6828      	ldr	r0, [r5, #0]
 8000446:	0840      	lsrs	r0, r0, #1
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	6028      	str	r0, [r5, #0]
 800044c:	2101      	movs	r1, #1
 800044e:	60b1      	str	r1, [r6, #8]
 8000450:	68b0      	ldr	r0, [r6, #8]
 8000452:	2800      	cmp	r0, #0
 8000454:	d1fc      	bne.n	8000450 <ai_platform_api_get_network_report+0x32>
 8000456:	f8df 767c 	ldr.w	r7, [pc, #1660]	; 8000ad4 <.text_20>
 800045a:	f8df 867c 	ldr.w	r8, [pc, #1660]	; 8000ad8 <.text_21>
 800045e:	6037      	str	r7, [r6, #0]
 8000460:	6830      	ldr	r0, [r6, #0]
 8000462:	4540      	cmp	r0, r8
 8000464:	d000      	beq.n	8000468 <ai_platform_api_get_network_report+0x4a>
 8000466:	e7fe      	b.n	8000466 <ai_platform_api_get_network_report+0x48>
 8000468:	f1b9 0f00 	cmp.w	r9, #0
 800046c:	bf18      	it	ne
 800046e:	2c00      	cmpne	r4, #0
 8000470:	d034      	beq.n	80004dc <ai_platform_api_get_network_report+0xbe>
 8000472:	2000      	movs	r0, #0
 8000474:	66e0      	str	r0, [r4, #108]	; 0x6c
 8000476:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
 800047a:	b152      	cbz	r2, 8000492 <ai_platform_api_get_network_report+0x74>
 800047c:	e000      	b.n	8000480 <ai_platform_api_get_network_report+0x62>
 800047e:	4602      	mov	r2, r0
 8000480:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8000482:	1c49      	adds	r1, r1, #1
 8000484:	66e1      	str	r1, [r4, #108]	; 0x6c
 8000486:	68d0      	ldr	r0, [r2, #12]
 8000488:	4282      	cmp	r2, r0
 800048a:	bf18      	it	ne
 800048c:	2800      	cmpne	r0, #0
 800048e:	d1f6      	bne.n	800047e <ai_platform_api_get_network_report+0x60>
 8000490:	b911      	cbnz	r1, 8000498 <ai_platform_api_get_network_report+0x7a>
 8000492:	2218      	movs	r2, #24
 8000494:	2111      	movs	r1, #17
 8000496:	e01d      	b.n	80004d4 <ai_platform_api_get_network_report+0xb6>
 8000498:	f8b9 0048 	ldrh.w	r0, [r9, #72]	; 0x48
 800049c:	b108      	cbz	r0, 80004a2 <ai_platform_api_get_network_report+0x84>
 800049e:	f8d9 004c 	ldr.w	r0, [r9, #76]	; 0x4c
 80004a2:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80004a6:	f7ff fe93 	bl	80001d0 <_ai_platform_get_io_buffers_info>
 80004aa:	8620      	strh	r0, [r4, #48]	; 0x30
 80004ac:	b910      	cbnz	r0, 80004b4 <ai_platform_api_get_network_report+0x96>
 80004ae:	2218      	movs	r2, #24
 80004b0:	2112      	movs	r1, #18
 80004b2:	e00f      	b.n	80004d4 <ai_platform_api_get_network_report+0xb6>
 80004b4:	f8b9 0048 	ldrh.w	r0, [r9, #72]	; 0x48
 80004b8:	2802      	cmp	r0, #2
 80004ba:	bfa6      	itte	ge
 80004bc:	f8d9 004c 	ldrge.w	r0, [r9, #76]	; 0x4c
 80004c0:	300c      	addge	r0, #12
 80004c2:	2000      	movlt	r0, #0
 80004c4:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80004c8:	f7ff fe82 	bl	80001d0 <_ai_platform_get_io_buffers_info>
 80004cc:	8660      	strh	r0, [r4, #50]	; 0x32
 80004ce:	b948      	cbnz	r0, 80004e4 <ai_platform_api_get_network_report+0xc6>
 80004d0:	2218      	movs	r2, #24
 80004d2:	2113      	movs	r1, #19
 80004d4:	f109 0010 	add.w	r0, r9, #16
 80004d8:	f000 fb1f 	bl	8000b1a <core_set_error>
 80004dc:	2000      	movs	r0, #0
 80004de:	b001      	add	sp, #4
 80004e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80004e4:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80004e8:	6720      	str	r0, [r4, #112]	; 0x70
 80004ea:	f109 0230 	add.w	r2, r9, #48	; 0x30
 80004ee:	e892 5c09 	ldmia.w	r2, {r0, r3, sl, fp, ip, lr}
 80004f2:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80004f6:	f109 0918 	add.w	r9, r9, #24
 80004fa:	e881 5c09 	stmia.w	r1, {r0, r3, sl, fp, ip, lr}
 80004fe:	e899 540e 	ldmia.w	r9, {r1, r2, r3, sl, ip, lr}
 8000502:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8000506:	e880 540e 	stmia.w	r0, {r1, r2, r3, sl, ip, lr}
 800050a:	6828      	ldr	r0, [r5, #0]
 800050c:	0840      	lsrs	r0, r0, #1
 800050e:	0040      	lsls	r0, r0, #1
 8000510:	6028      	str	r0, [r5, #0]
 8000512:	2301      	movs	r3, #1
 8000514:	60b3      	str	r3, [r6, #8]
 8000516:	68b0      	ldr	r0, [r6, #8]
 8000518:	2800      	cmp	r0, #0
 800051a:	d1fc      	bne.n	8000516 <ai_platform_api_get_network_report+0xf8>
 800051c:	6037      	str	r7, [r6, #0]
 800051e:	6831      	ldr	r1, [r6, #0]
 8000520:	4541      	cmp	r1, r8
 8000522:	d000      	beq.n	8000526 <ai_platform_api_get_network_report+0x108>
 8000524:	e7fe      	b.n	8000524 <ai_platform_api_get_network_report+0x106>
 8000526:	a01c      	add	r0, pc, #112	; (adr r0, 8000598 <.text_13>)
 8000528:	6120      	str	r0, [r4, #16]
 800052a:	6829      	ldr	r1, [r5, #0]
 800052c:	0849      	lsrs	r1, r1, #1
 800052e:	0049      	lsls	r1, r1, #1
 8000530:	6029      	str	r1, [r5, #0]
 8000532:	60b3      	str	r3, [r6, #8]
 8000534:	68b0      	ldr	r0, [r6, #8]
 8000536:	2800      	cmp	r0, #0
 8000538:	d1fc      	bne.n	8000534 <ai_platform_api_get_network_report+0x116>
 800053a:	6037      	str	r7, [r6, #0]
 800053c:	6831      	ldr	r1, [r6, #0]
 800053e:	4541      	cmp	r1, r8
 8000540:	d000      	beq.n	8000544 <ai_platform_api_get_network_report+0x126>
 8000542:	e7fe      	b.n	8000542 <ai_platform_api_get_network_report+0x124>
 8000544:	f20f 509c 	addw	r0, pc, #1436	; 0x59c
 8000548:	6802      	ldr	r2, [r0, #0]
 800054a:	6162      	str	r2, [r4, #20]
 800054c:	6829      	ldr	r1, [r5, #0]
 800054e:	0849      	lsrs	r1, r1, #1
 8000550:	0049      	lsls	r1, r1, #1
 8000552:	6029      	str	r1, [r5, #0]
 8000554:	60b3      	str	r3, [r6, #8]
 8000556:	68b0      	ldr	r0, [r6, #8]
 8000558:	2800      	cmp	r0, #0
 800055a:	d1fc      	bne.n	8000556 <ai_platform_api_get_network_report+0x138>
 800055c:	6037      	str	r7, [r6, #0]
 800055e:	6831      	ldr	r1, [r6, #0]
 8000560:	4541      	cmp	r1, r8
 8000562:	d000      	beq.n	8000566 <ai_platform_api_get_network_report+0x148>
 8000564:	e7fe      	b.n	8000564 <ai_platform_api_get_network_report+0x146>
 8000566:	f20f 5080 	addw	r0, pc, #1408	; 0x580
 800056a:	6802      	ldr	r2, [r0, #0]
 800056c:	6262      	str	r2, [r4, #36]	; 0x24
 800056e:	6829      	ldr	r1, [r5, #0]
 8000570:	0849      	lsrs	r1, r1, #1
 8000572:	0049      	lsls	r1, r1, #1
 8000574:	6029      	str	r1, [r5, #0]
 8000576:	60b3      	str	r3, [r6, #8]
 8000578:	68b0      	ldr	r0, [r6, #8]
 800057a:	2800      	cmp	r0, #0
 800057c:	d1fc      	bne.n	8000578 <ai_platform_api_get_network_report+0x15a>
 800057e:	6037      	str	r7, [r6, #0]
 8000580:	6831      	ldr	r1, [r6, #0]
 8000582:	4541      	cmp	r1, r8
 8000584:	d000      	beq.n	8000588 <ai_platform_api_get_network_report+0x16a>
 8000586:	e7fe      	b.n	8000586 <ai_platform_api_get_network_report+0x168>
 8000588:	f20f 5060 	addw	r0, pc, #1376	; 0x560
 800058c:	6802      	ldr	r2, [r0, #0]
 800058e:	62a2      	str	r2, [r4, #40]	; 0x28
 8000590:	2001      	movs	r0, #1
 8000592:	b001      	add	sp, #4
 8000594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000598 <.text_13>:
 8000598:	00000000 	.word	0x00000000

0800059c <ai_platform_network_create>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	9d04      	ldr	r5, [sp, #16]
 80005a0:	4604      	mov	r4, r0
 80005a2:	9805      	ldr	r0, [sp, #20]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	042d      	lsls	r5, r5, #16
 80005a8:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 80005ac:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 80005b0:	f20f 5050 	addw	r0, pc, #1360	; 0x550
 80005b4:	6806      	ldr	r6, [r0, #0]
 80005b6:	f8df 0514 	ldr.w	r0, [pc, #1300]	; 8000acc <.text_18>
 80005ba:	6801      	ldr	r1, [r0, #0]
 80005bc:	0849      	lsrs	r1, r1, #1
 80005be:	0049      	lsls	r1, r1, #1
 80005c0:	6001      	str	r1, [r0, #0]
 80005c2:	2001      	movs	r0, #1
 80005c4:	f8df 1508 	ldr.w	r1, [pc, #1288]	; 8000ad0 <.text_19>
 80005c8:	6088      	str	r0, [r1, #8]
 80005ca:	6888      	ldr	r0, [r1, #8]
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d1fc      	bne.n	80005ca <ai_platform_network_create+0x2e>
 80005d0:	f8df 3500 	ldr.w	r3, [pc, #1280]	; 8000ad4 <.text_20>
 80005d4:	600b      	str	r3, [r1, #0]
 80005d6:	6808      	ldr	r0, [r1, #0]
 80005d8:	f8df 14fc 	ldr.w	r1, [pc, #1276]	; 8000ad8 <.text_21>
 80005dc:	4288      	cmp	r0, r1
 80005de:	d000      	beq.n	80005e2 <ai_platform_network_create+0x46>
 80005e0:	e7fe      	b.n	80005e0 <ai_platform_network_create+0x44>
 80005e2:	b91c      	cbnz	r4, 80005ec <ai_platform_network_create+0x50>
 80005e4:	f20f 5020 	addw	r0, pc, #1312	; 0x520
 80005e8:	6800      	ldr	r0, [r0, #0]
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f8df 14ec 	ldr.w	r1, [pc, #1260]	; 8000adc <.text_22>
 80005f0:	6011      	str	r1, [r2, #0]
 80005f2:	6022      	str	r2, [r4, #0]
 80005f4:	f000 fa8a 	bl	8000b0c <core_init>
 80005f8:	b910      	cbnz	r0, 8000600 <ai_platform_network_create+0x64>
 80005fa:	f20f 40f4 	addw	r0, pc, #1268	; 0x4f4
 80005fe:	e00d      	b.n	800061c <ai_platform_network_create+0x80>
 8000600:	f8df 14dc 	ldr.w	r1, [pc, #1244]	; 8000ae0 <.text_23>
 8000604:	428d      	cmp	r5, r1
 8000606:	bf28      	it	cs
 8000608:	f20f 40e8 	addwcs	r0, pc, #1256	; 0x4e8
 800060c:	d206      	bcs.n	800061c <ai_platform_network_create+0x80>
 800060e:	f20f 40e8 	addw	r0, pc, #1256	; 0x4e8
 8000612:	f000 fa97 	bl	8000b44 <ai_check_custom_types>
 8000616:	b920      	cbnz	r0, 8000622 <ai_platform_network_create+0x86>
 8000618:	f20f 40e0 	addw	r0, pc, #1248	; 0x4e0
 800061c:	6806      	ldr	r6, [r0, #0]
 800061e:	2100      	movs	r1, #0
 8000620:	6021      	str	r1, [r4, #0]
 8000622:	4630      	mov	r0, r6
 8000624:	bd70      	pop	{r4, r5, r6, pc}

08000626 <ai_platform_network_destroy>:
 8000626:	b130      	cbz	r0, 8000636 <ai_platform_network_destroy+0x10>
 8000628:	6801      	ldr	r1, [r0, #0]
 800062a:	f8df 24b0 	ldr.w	r2, [pc, #1200]	; 8000adc <.text_22>
 800062e:	4291      	cmp	r1, r2
 8000630:	bf08      	it	eq
 8000632:	4602      	moveq	r2, r0
 8000634:	d000      	beq.n	8000638 <ai_platform_network_destroy+0x12>
 8000636:	2200      	movs	r2, #0
 8000638:	f8df 1490 	ldr.w	r1, [pc, #1168]	; 8000acc <.text_18>
 800063c:	680b      	ldr	r3, [r1, #0]
 800063e:	085b      	lsrs	r3, r3, #1
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	600b      	str	r3, [r1, #0]
 8000644:	2101      	movs	r1, #1
 8000646:	f8df 3488 	ldr.w	r3, [pc, #1160]	; 8000ad0 <.text_19>
 800064a:	6099      	str	r1, [r3, #8]
 800064c:	6899      	ldr	r1, [r3, #8]
 800064e:	2900      	cmp	r1, #0
 8000650:	d1fc      	bne.n	800064c <ai_platform_network_destroy+0x26>
 8000652:	f8df c480 	ldr.w	ip, [pc, #1152]	; 8000ad4 <.text_20>
 8000656:	f8c3 c000 	str.w	ip, [r3]
 800065a:	6819      	ldr	r1, [r3, #0]
 800065c:	f8df 3478 	ldr.w	r3, [pc, #1144]	; 8000ad8 <.text_21>
 8000660:	4299      	cmp	r1, r3
 8000662:	d000      	beq.n	8000666 <ai_platform_network_destroy+0x40>
 8000664:	e7fe      	b.n	8000664 <ai_platform_network_destroy+0x3e>
 8000666:	b102      	cbz	r2, 800066a <ai_platform_network_destroy+0x44>
 8000668:	2000      	movs	r0, #0
 800066a:	4770      	bx	lr

0800066c <ai_platform_network_init>:
 800066c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000670:	b081      	sub	sp, #4
 8000672:	460a      	mov	r2, r1
 8000674:	b120      	cbz	r0, 8000680 <ai_platform_network_init+0x14>
 8000676:	6801      	ldr	r1, [r0, #0]
 8000678:	f8df 3460 	ldr.w	r3, [pc, #1120]	; 8000adc <.text_22>
 800067c:	4299      	cmp	r1, r3
 800067e:	d000      	beq.n	8000682 <ai_platform_network_init+0x16>
 8000680:	2000      	movs	r0, #0
 8000682:	f8df 1448 	ldr.w	r1, [pc, #1096]	; 8000acc <.text_18>
 8000686:	680b      	ldr	r3, [r1, #0]
 8000688:	085b      	lsrs	r3, r3, #1
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	600b      	str	r3, [r1, #0]
 800068e:	2101      	movs	r1, #1
 8000690:	f8df 343c 	ldr.w	r3, [pc, #1084]	; 8000ad0 <.text_19>
 8000694:	6099      	str	r1, [r3, #8]
 8000696:	6899      	ldr	r1, [r3, #8]
 8000698:	2900      	cmp	r1, #0
 800069a:	d1fc      	bne.n	8000696 <ai_platform_network_init+0x2a>
 800069c:	f8df 4434 	ldr.w	r4, [pc, #1076]	; 8000ad4 <.text_20>
 80006a0:	601c      	str	r4, [r3, #0]
 80006a2:	6819      	ldr	r1, [r3, #0]
 80006a4:	f8df 3430 	ldr.w	r3, [pc, #1072]	; 8000ad8 <.text_21>
 80006a8:	4299      	cmp	r1, r3
 80006aa:	d000      	beq.n	80006ae <ai_platform_network_init+0x42>
 80006ac:	e7fe      	b.n	80006ac <ai_platform_network_init+0x40>
 80006ae:	2800      	cmp	r0, #0
 80006b0:	d035      	beq.n	800071e <ai_platform_network_init+0xb2>
 80006b2:	b90a      	cbnz	r2, 80006b8 <ai_platform_network_init+0x4c>
 80006b4:	2211      	movs	r2, #17
 80006b6:	e012      	b.n	80006de <ai_platform_network_init+0x72>
 80006b8:	6913      	ldr	r3, [r2, #16]
 80006ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80006bc:	b939      	cbnz	r1, 80006ce <ai_platform_network_init+0x62>
 80006be:	8c11      	ldrh	r1, [r2, #32]
 80006c0:	8bd5      	ldrh	r5, [r2, #30]
 80006c2:	6a54      	ldr	r4, [r2, #36]	; 0x24
 80006c4:	4369      	muls	r1, r5
 80006c6:	4361      	muls	r1, r4
 80006c8:	bf18      	it	ne
 80006ca:	2213      	movne	r2, #19
 80006cc:	d107      	bne.n	80006de <ai_platform_network_init+0x72>
 80006ce:	b973      	cbnz	r3, 80006ee <ai_platform_network_init+0x82>
 80006d0:	8911      	ldrh	r1, [r2, #8]
 80006d2:	88d4      	ldrh	r4, [r2, #6]
 80006d4:	68d3      	ldr	r3, [r2, #12]
 80006d6:	4361      	muls	r1, r4
 80006d8:	4359      	muls	r1, r3
 80006da:	d008      	beq.n	80006ee <ai_platform_network_init+0x82>
 80006dc:	2212      	movs	r2, #18
 80006de:	2110      	movs	r1, #16
 80006e0:	3010      	adds	r0, #16
 80006e2:	f000 fa1a 	bl	8000b1a <core_set_error>
 80006e6:	2000      	movs	r0, #0
 80006e8:	b001      	add	sp, #4
 80006ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006ee:	e8b2 10f8 	ldmia.w	r2!, {r3, r4, r5, r6, r7, ip}
 80006f2:	f100 0118 	add.w	r1, r0, #24
 80006f6:	f100 0e30 	add.w	lr, r0, #48	; 0x30
 80006fa:	e881 10f8 	stmia.w	r1, {r3, r4, r5, r6, r7, ip}
 80006fe:	e892 0f0a 	ldmia.w	r2, {r1, r3, r8, r9, sl, fp}
 8000702:	e88e 0f0a 	stmia.w	lr, {r1, r3, r8, r9, sl, fp}
 8000706:	2103      	movs	r1, #3
 8000708:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800070a:	60c1      	str	r1, [r0, #12]
 800070c:	b13a      	cbz	r2, 800071e <ai_platform_network_init+0xb2>
 800070e:	e000      	b.n	8000712 <ai_platform_network_init+0xa6>
 8000710:	460a      	mov	r2, r1
 8000712:	68d1      	ldr	r1, [r2, #12]
 8000714:	6090      	str	r0, [r2, #8]
 8000716:	428a      	cmp	r2, r1
 8000718:	bf18      	it	ne
 800071a:	2900      	cmpne	r1, #0
 800071c:	d1f8      	bne.n	8000710 <ai_platform_network_init+0xa4>
 800071e:	b001      	add	sp, #4
 8000720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000724 <ai_platform_network_process>:
 8000724:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	460a      	mov	r2, r1
 800072c:	b120      	cbz	r0, 8000738 <ai_platform_network_process+0x14>
 800072e:	6801      	ldr	r1, [r0, #0]
 8000730:	f8df 33a8 	ldr.w	r3, [pc, #936]	; 8000adc <.text_22>
 8000734:	4299      	cmp	r1, r3
 8000736:	d000      	beq.n	800073a <ai_platform_network_process+0x16>
 8000738:	2000      	movs	r0, #0
 800073a:	f8df 1390 	ldr.w	r1, [pc, #912]	; 8000acc <.text_18>
 800073e:	680b      	ldr	r3, [r1, #0]
 8000740:	085b      	lsrs	r3, r3, #1
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	600b      	str	r3, [r1, #0]
 8000746:	2101      	movs	r1, #1
 8000748:	f8df 3384 	ldr.w	r3, [pc, #900]	; 8000ad0 <.text_19>
 800074c:	6099      	str	r1, [r3, #8]
 800074e:	6899      	ldr	r1, [r3, #8]
 8000750:	2900      	cmp	r1, #0
 8000752:	d1fc      	bne.n	800074e <ai_platform_network_process+0x2a>
 8000754:	f8df 437c 	ldr.w	r4, [pc, #892]	; 8000ad4 <.text_20>
 8000758:	601c      	str	r4, [r3, #0]
 800075a:	6819      	ldr	r1, [r3, #0]
 800075c:	f8df 3378 	ldr.w	r3, [pc, #888]	; 8000ad8 <.text_21>
 8000760:	4299      	cmp	r1, r3
 8000762:	d000      	beq.n	8000766 <ai_platform_network_process+0x42>
 8000764:	e7fe      	b.n	8000764 <ai_platform_network_process+0x40>
 8000766:	2800      	cmp	r0, #0
 8000768:	f000 8113 	beq.w	8000992 <ai_platform_network_process+0x26e>
 800076c:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
 8000770:	b101      	cbz	r1, 8000774 <ai_platform_network_process+0x50>
 8000772:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8000774:	2300      	movs	r3, #0
 8000776:	82c3      	strh	r3, [r0, #22]
 8000778:	2400      	movs	r4, #0
 800077a:	7b03      	ldrb	r3, [r0, #12]
 800077c:	8284      	strh	r4, [r0, #20]
 800077e:	f003 0303 	and.w	r3, r3, #3
 8000782:	2b03      	cmp	r3, #3
 8000784:	d002      	beq.n	800078c <ai_platform_network_process+0x68>
 8000786:	2230      	movs	r2, #48	; 0x30
 8000788:	2111      	movs	r1, #17
 800078a:	e0ff      	b.n	800098c <ai_platform_network_process+0x268>
 800078c:	2a00      	cmp	r2, #0
 800078e:	bf1e      	ittt	ne
 8000790:	2900      	cmpne	r1, #0
 8000792:	880b      	ldrhne	r3, [r1, #0]
 8000794:	2b00      	cmpne	r3, #0
 8000796:	f000 80f7 	beq.w	8000988 <ai_platform_network_process+0x264>
 800079a:	f8b2 b004 	ldrh.w	fp, [r2, #4]
 800079e:	9100      	str	r1, [sp, #0]
 80007a0:	46a0      	mov	r8, r4
 80007a2:	46a1      	mov	r9, r4
 80007a4:	2600      	movs	r6, #0
 80007a6:	1d17      	adds	r7, r2, #4
 80007a8:	4682      	mov	sl, r0
 80007aa:	e014      	b.n	80007d6 <ai_platform_network_process+0xb2>
 80007ac:	68f8      	ldr	r0, [r7, #12]
 80007ae:	2800      	cmp	r0, #0
 80007b0:	f000 80e9 	beq.w	8000986 <ai_platform_network_process+0x262>
 80007b4:	8838      	ldrh	r0, [r7, #0]
 80007b6:	2800      	cmp	r0, #0
 80007b8:	d052      	beq.n	8000860 <ai_platform_network_process+0x13c>
 80007ba:	4558      	cmp	r0, fp
 80007bc:	bf28      	it	cs
 80007be:	4683      	movcs	fp, r0
 80007c0:	4622      	mov	r2, r4
 80007c2:	1f39      	subs	r1, r7, #4
 80007c4:	4628      	mov	r0, r5
 80007c6:	f7ff fd59 	bl	800027c <_platform_network_state_setup>
 80007ca:	f108 0801 	add.w	r8, r8, #1
 80007ce:	3718      	adds	r7, #24
 80007d0:	3610      	adds	r6, #16
 80007d2:	f109 0904 	add.w	r9, r9, #4
 80007d6:	9800      	ldr	r0, [sp, #0]
 80007d8:	8801      	ldrh	r1, [r0, #0]
 80007da:	4588      	cmp	r8, r1
 80007dc:	d24a      	bcs.n	8000874 <ai_platform_network_process+0x150>
 80007de:	6840      	ldr	r0, [r0, #4]
 80007e0:	2800      	cmp	r0, #0
 80007e2:	bf1c      	itt	ne
 80007e4:	f850 4009 	ldrne.w	r4, [r0, r9]
 80007e8:	2c00      	cmpne	r4, #0
 80007ea:	d043      	beq.n	8000874 <ai_platform_network_process+0x150>
 80007ec:	9800      	ldr	r0, [sp, #0]
 80007ee:	6881      	ldr	r1, [r0, #8]
 80007f0:	680a      	ldr	r2, [r1, #0]
 80007f2:	1995      	adds	r5, r2, r6
 80007f4:	f000 80c7 	beq.w	8000986 <ai_platform_network_process+0x262>
 80007f8:	69a0      	ldr	r0, [r4, #24]
 80007fa:	6841      	ldr	r1, [r0, #4]
 80007fc:	887b      	ldrh	r3, [r7, #2]
 80007fe:	88ba      	ldrh	r2, [r7, #4]
 8000800:	68b8      	ldr	r0, [r7, #8]
 8000802:	fb03 fc02 	mul.w	ip, r3, r2
 8000806:	fb00 fc0c 	mul.w	ip, r0, ip
 800080a:	4561      	cmp	r1, ip
 800080c:	d32d      	bcc.n	800086a <ai_platform_network_process+0x146>
 800080e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8000812:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8000816:	459e      	cmp	lr, r3
 8000818:	bf01      	itttt	eq
 800081a:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 800081e:	4293      	cmpeq	r3, r2
 8000820:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 8000824:	4282      	cmpeq	r2, r0
 8000826:	d120      	bne.n	800086a <ai_platform_network_process+0x146>
 8000828:	69a0      	ldr	r0, [r4, #24]
 800082a:	6800      	ldr	r0, [r0, #0]
 800082c:	f005 fb1a 	bl	8005e64 <ai_array_get_byte_size>
 8000830:	68e1      	ldr	r1, [r4, #12]
 8000832:	68ca      	ldr	r2, [r1, #12]
 8000834:	6961      	ldr	r1, [r4, #20]
 8000836:	68cb      	ldr	r3, [r1, #12]
 8000838:	435a      	muls	r2, r3
 800083a:	4290      	cmp	r0, r2
 800083c:	d315      	bcc.n	800086a <ai_platform_network_process+0x146>
 800083e:	69a0      	ldr	r0, [r4, #24]
 8000840:	6800      	ldr	r0, [r0, #0]
 8000842:	f005 fa37 	bl	8005cb4 <ai_array_to_buffer_fmt>
 8000846:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800084a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800084e:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000852:	4288      	cmp	r0, r1
 8000854:	d0aa      	beq.n	80007ac <ai_platform_network_process+0x88>
 8000856:	2219      	movs	r2, #25
 8000858:	2112      	movs	r1, #18
 800085a:	f10a 0010 	add.w	r0, sl, #16
 800085e:	e096      	b.n	800098e <ai_platform_network_process+0x26a>
 8000860:	2221      	movs	r2, #33	; 0x21
 8000862:	2112      	movs	r1, #18
 8000864:	f10a 0010 	add.w	r0, sl, #16
 8000868:	e091      	b.n	800098e <ai_platform_network_process+0x26a>
 800086a:	2218      	movs	r2, #24
 800086c:	2112      	movs	r1, #18
 800086e:	f10a 0010 	add.w	r0, sl, #16
 8000872:	e08c      	b.n	800098e <ai_platform_network_process+0x26a>
 8000874:	9902      	ldr	r1, [sp, #8]
 8000876:	2900      	cmp	r1, #0
 8000878:	4655      	mov	r5, sl
 800087a:	d075      	beq.n	8000968 <ai_platform_network_process+0x244>
 800087c:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 8000880:	2802      	cmp	r0, #2
 8000882:	db7b      	blt.n	800097c <ai_platform_network_process+0x258>
 8000884:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8000886:	300c      	adds	r0, #12
 8000888:	bf1c      	itt	ne
 800088a:	8802      	ldrhne	r2, [r0, #0]
 800088c:	2a00      	cmpne	r2, #0
 800088e:	d075      	beq.n	800097c <ai_platform_network_process+0x258>
 8000890:	f04f 0800 	mov.w	r8, #0
 8000894:	46c1      	mov	r9, r8
 8000896:	2600      	movs	r6, #0
 8000898:	1d0f      	adds	r7, r1, #4
 800089a:	9000      	str	r0, [sp, #0]
 800089c:	e013      	b.n	80008c6 <ai_platform_network_process+0x1a2>
 800089e:	68f8      	ldr	r0, [r7, #12]
 80008a0:	2800      	cmp	r0, #0
 80008a2:	d059      	beq.n	8000958 <ai_platform_network_process+0x234>
 80008a4:	8838      	ldrh	r0, [r7, #0]
 80008a6:	2800      	cmp	r0, #0
 80008a8:	d051      	beq.n	800094e <ai_platform_network_process+0x22a>
 80008aa:	4558      	cmp	r0, fp
 80008ac:	bf28      	it	cs
 80008ae:	4683      	movcs	fp, r0
 80008b0:	4622      	mov	r2, r4
 80008b2:	1f39      	subs	r1, r7, #4
 80008b4:	4628      	mov	r0, r5
 80008b6:	f7ff fce1 	bl	800027c <_platform_network_state_setup>
 80008ba:	f108 0801 	add.w	r8, r8, #1
 80008be:	3718      	adds	r7, #24
 80008c0:	3610      	adds	r6, #16
 80008c2:	f109 0904 	add.w	r9, r9, #4
 80008c6:	9800      	ldr	r0, [sp, #0]
 80008c8:	8801      	ldrh	r1, [r0, #0]
 80008ca:	4588      	cmp	r8, r1
 80008cc:	d249      	bcs.n	8000962 <ai_platform_network_process+0x23e>
 80008ce:	6840      	ldr	r0, [r0, #4]
 80008d0:	2800      	cmp	r0, #0
 80008d2:	bf1c      	itt	ne
 80008d4:	f850 4009 	ldrne.w	r4, [r0, r9]
 80008d8:	2c00      	cmpne	r4, #0
 80008da:	d042      	beq.n	8000962 <ai_platform_network_process+0x23e>
 80008dc:	9800      	ldr	r0, [sp, #0]
 80008de:	6881      	ldr	r1, [r0, #8]
 80008e0:	680a      	ldr	r2, [r1, #0]
 80008e2:	1995      	adds	r5, r2, r6
 80008e4:	d038      	beq.n	8000958 <ai_platform_network_process+0x234>
 80008e6:	69a0      	ldr	r0, [r4, #24]
 80008e8:	6841      	ldr	r1, [r0, #4]
 80008ea:	887b      	ldrh	r3, [r7, #2]
 80008ec:	88ba      	ldrh	r2, [r7, #4]
 80008ee:	68b8      	ldr	r0, [r7, #8]
 80008f0:	fb03 fc02 	mul.w	ip, r3, r2
 80008f4:	fb00 fc0c 	mul.w	ip, r0, ip
 80008f8:	4561      	cmp	r1, ip
 80008fa:	d33e      	bcc.n	800097a <ai_platform_network_process+0x256>
 80008fc:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8000900:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8000904:	459e      	cmp	lr, r3
 8000906:	bf01      	itttt	eq
 8000908:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 800090c:	4293      	cmpeq	r3, r2
 800090e:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 8000912:	4282      	cmpeq	r2, r0
 8000914:	d131      	bne.n	800097a <ai_platform_network_process+0x256>
 8000916:	69a0      	ldr	r0, [r4, #24]
 8000918:	6800      	ldr	r0, [r0, #0]
 800091a:	f005 faa3 	bl	8005e64 <ai_array_get_byte_size>
 800091e:	68e1      	ldr	r1, [r4, #12]
 8000920:	68ca      	ldr	r2, [r1, #12]
 8000922:	6961      	ldr	r1, [r4, #20]
 8000924:	68cb      	ldr	r3, [r1, #12]
 8000926:	435a      	muls	r2, r3
 8000928:	4290      	cmp	r0, r2
 800092a:	d326      	bcc.n	800097a <ai_platform_network_process+0x256>
 800092c:	69a0      	ldr	r0, [r4, #24]
 800092e:	6800      	ldr	r0, [r0, #0]
 8000930:	f005 f9c0 	bl	8005cb4 <ai_array_to_buffer_fmt>
 8000934:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8000938:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800093c:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000940:	4288      	cmp	r0, r1
 8000942:	d0ac      	beq.n	800089e <ai_platform_network_process+0x17a>
 8000944:	2219      	movs	r2, #25
 8000946:	2113      	movs	r1, #19
 8000948:	f10a 0010 	add.w	r0, sl, #16
 800094c:	e01f      	b.n	800098e <ai_platform_network_process+0x26a>
 800094e:	2221      	movs	r2, #33	; 0x21
 8000950:	2113      	movs	r1, #19
 8000952:	f10a 0010 	add.w	r0, sl, #16
 8000956:	e01a      	b.n	800098e <ai_platform_network_process+0x26a>
 8000958:	2217      	movs	r2, #23
 800095a:	2113      	movs	r1, #19
 800095c:	f10a 0010 	add.w	r0, sl, #16
 8000960:	e015      	b.n	800098e <ai_platform_network_process+0x26a>
 8000962:	4655      	mov	r5, sl
 8000964:	f8a5 b014 	strh.w	fp, [r5, #20]
 8000968:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 800096c:	2800      	cmp	r0, #0
 800096e:	bf14      	ite	ne
 8000970:	f8d5 a04c 	ldrne.w	sl, [r5, #76]	; 0x4c
 8000974:	f04f 0a00 	moveq.w	sl, #0
 8000978:	e00f      	b.n	800099a <ai_platform_network_process+0x276>
 800097a:	4655      	mov	r5, sl
 800097c:	2218      	movs	r2, #24
 800097e:	2113      	movs	r1, #19
 8000980:	f105 0010 	add.w	r0, r5, #16
 8000984:	e003      	b.n	800098e <ai_platform_network_process+0x26a>
 8000986:	4650      	mov	r0, sl
 8000988:	2217      	movs	r2, #23
 800098a:	2112      	movs	r1, #18
 800098c:	3010      	adds	r0, #16
 800098e:	f000 f8c4 	bl	8000b1a <core_set_error>
 8000992:	2000      	movs	r0, #0
 8000994:	b003      	add	sp, #12
 8000996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800099a:	2802      	cmp	r0, #2
 800099c:	bfa6      	itte	ge
 800099e:	6ce8      	ldrge	r0, [r5, #76]	; 0x4c
 80009a0:	f100 0b0c 	addge.w	fp, r0, #12
 80009a4:	f04f 0b00 	movlt.w	fp, #0
 80009a8:	8ae8      	ldrh	r0, [r5, #22]
 80009aa:	8aa9      	ldrh	r1, [r5, #20]
 80009ac:	ebb0 0f01 	cmp.w	r0, r1
 80009b0:	f080 8087 	bcs.w	8000ac2 <ai_platform_network_process+0x39e>
 80009b4:	f04f 0800 	mov.w	r8, #0
 80009b8:	4654      	mov	r4, sl
 80009ba:	46c1      	mov	r9, r8
 80009bc:	46c2      	mov	sl, r8
 80009be:	e018      	b.n	80009f2 <ai_platform_network_process+0x2ce>
 80009c0:	6882      	ldr	r2, [r0, #8]
 80009c2:	68c3      	ldr	r3, [r0, #12]
 80009c4:	6871      	ldr	r1, [r6, #4]
 80009c6:	1ad2      	subs	r2, r2, r3
 80009c8:	4411      	add	r1, r2
 80009ca:	6081      	str	r1, [r0, #8]
 80009cc:	6872      	ldr	r2, [r6, #4]
 80009ce:	60c2      	str	r2, [r0, #12]
 80009d0:	6870      	ldr	r0, [r6, #4]
 80009d2:	68b1      	ldr	r1, [r6, #8]
 80009d4:	4408      	add	r0, r1
 80009d6:	6070      	str	r0, [r6, #4]
 80009d8:	6831      	ldr	r1, [r6, #0]
 80009da:	4288      	cmp	r0, r1
 80009dc:	d302      	bcc.n	80009e4 <ai_platform_network_process+0x2c0>
 80009de:	68f0      	ldr	r0, [r6, #12]
 80009e0:	4240      	negs	r0, r0
 80009e2:	4408      	add	r0, r1
 80009e4:	6070      	str	r0, [r6, #4]
 80009e6:	f10a 0a01 	add.w	sl, sl, #1
 80009ea:	f109 0910 	add.w	r9, r9, #16
 80009ee:	f108 0804 	add.w	r8, r8, #4
 80009f2:	2c00      	cmp	r4, #0
 80009f4:	bf14      	ite	ne
 80009f6:	8820      	ldrhne	r0, [r4, #0]
 80009f8:	2000      	moveq	r0, #0
 80009fa:	4582      	cmp	sl, r0
 80009fc:	d212      	bcs.n	8000a24 <ai_platform_network_process+0x300>
 80009fe:	6860      	ldr	r0, [r4, #4]
 8000a00:	b180      	cbz	r0, 8000a24 <ai_platform_network_process+0x300>
 8000a02:	f850 0008 	ldr.w	r0, [r0, r8]
 8000a06:	b168      	cbz	r0, 8000a24 <ai_platform_network_process+0x300>
 8000a08:	68a1      	ldr	r1, [r4, #8]
 8000a0a:	6980      	ldr	r0, [r0, #24]
 8000a0c:	680a      	ldr	r2, [r1, #0]
 8000a0e:	6801      	ldr	r1, [r0, #0]
 8000a10:	eb02 0609 	add.w	r6, r2, r9
 8000a14:	008a      	lsls	r2, r1, #2
 8000a16:	d5d3      	bpl.n	80009c0 <ai_platform_network_process+0x29c>
 8000a18:	68b2      	ldr	r2, [r6, #8]
 8000a1a:	6871      	ldr	r1, [r6, #4]
 8000a1c:	6880      	ldr	r0, [r0, #8]
 8000a1e:	f00c f996 	bl	800cd4e <__aeabi_memcpy>
 8000a22:	e7d5      	b.n	80009d0 <ai_platform_network_process+0x2ac>
 8000a24:	46a2      	mov	sl, r4
 8000a26:	4628      	mov	r0, r5
 8000a28:	f000 f936 	bl	8000c98 <ai_layers_forward_all>
 8000a2c:	f04f 0800 	mov.w	r8, #0
 8000a30:	465c      	mov	r4, fp
 8000a32:	46c1      	mov	r9, r8
 8000a34:	46c3      	mov	fp, r8
 8000a36:	e017      	b.n	8000a68 <ai_platform_network_process+0x344>
 8000a38:	6871      	ldr	r1, [r6, #4]
 8000a3a:	68b2      	ldr	r2, [r6, #8]
 8000a3c:	4411      	add	r1, r2
 8000a3e:	6071      	str	r1, [r6, #4]
 8000a40:	6832      	ldr	r2, [r6, #0]
 8000a42:	4291      	cmp	r1, r2
 8000a44:	d302      	bcc.n	8000a4c <ai_platform_network_process+0x328>
 8000a46:	68f1      	ldr	r1, [r6, #12]
 8000a48:	4249      	negs	r1, r1
 8000a4a:	4411      	add	r1, r2
 8000a4c:	6071      	str	r1, [r6, #4]
 8000a4e:	6882      	ldr	r2, [r0, #8]
 8000a50:	68c3      	ldr	r3, [r0, #12]
 8000a52:	1ad2      	subs	r2, r2, r3
 8000a54:	4411      	add	r1, r2
 8000a56:	6081      	str	r1, [r0, #8]
 8000a58:	6872      	ldr	r2, [r6, #4]
 8000a5a:	60c2      	str	r2, [r0, #12]
 8000a5c:	f10b 0b01 	add.w	fp, fp, #1
 8000a60:	f109 0910 	add.w	r9, r9, #16
 8000a64:	f108 0804 	add.w	r8, r8, #4
 8000a68:	2c00      	cmp	r4, #0
 8000a6a:	bf14      	ite	ne
 8000a6c:	8820      	ldrhne	r0, [r4, #0]
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4583      	cmp	fp, r0
 8000a72:	d21d      	bcs.n	8000ab0 <ai_platform_network_process+0x38c>
 8000a74:	6860      	ldr	r0, [r4, #4]
 8000a76:	b1d8      	cbz	r0, 8000ab0 <ai_platform_network_process+0x38c>
 8000a78:	f850 0008 	ldr.w	r0, [r0, r8]
 8000a7c:	b1c0      	cbz	r0, 8000ab0 <ai_platform_network_process+0x38c>
 8000a7e:	68a1      	ldr	r1, [r4, #8]
 8000a80:	6980      	ldr	r0, [r0, #24]
 8000a82:	680a      	ldr	r2, [r1, #0]
 8000a84:	6801      	ldr	r1, [r0, #0]
 8000a86:	eb02 0609 	add.w	r6, r2, r9
 8000a8a:	008a      	lsls	r2, r1, #2
 8000a8c:	d5d4      	bpl.n	8000a38 <ai_platform_network_process+0x314>
 8000a8e:	6881      	ldr	r1, [r0, #8]
 8000a90:	68b2      	ldr	r2, [r6, #8]
 8000a92:	6870      	ldr	r0, [r6, #4]
 8000a94:	f00c f95b 	bl	800cd4e <__aeabi_memcpy>
 8000a98:	6870      	ldr	r0, [r6, #4]
 8000a9a:	68b1      	ldr	r1, [r6, #8]
 8000a9c:	4408      	add	r0, r1
 8000a9e:	6070      	str	r0, [r6, #4]
 8000aa0:	6831      	ldr	r1, [r6, #0]
 8000aa2:	4288      	cmp	r0, r1
 8000aa4:	d302      	bcc.n	8000aac <ai_platform_network_process+0x388>
 8000aa6:	68f0      	ldr	r0, [r6, #12]
 8000aa8:	4240      	negs	r0, r0
 8000aaa:	4408      	add	r0, r1
 8000aac:	6070      	str	r0, [r6, #4]
 8000aae:	e7d5      	b.n	8000a5c <ai_platform_network_process+0x338>
 8000ab0:	8ae8      	ldrh	r0, [r5, #22]
 8000ab2:	8aa9      	ldrh	r1, [r5, #20]
 8000ab4:	1c40      	adds	r0, r0, #1
 8000ab6:	82e8      	strh	r0, [r5, #22]
 8000ab8:	46a3      	mov	fp, r4
 8000aba:	b280      	uxth	r0, r0
 8000abc:	4288      	cmp	r0, r1
 8000abe:	f4ff af79 	bcc.w	80009b4 <ai_platform_network_process+0x290>
 8000ac2:	8ae8      	ldrh	r0, [r5, #22]
 8000ac4:	b003      	add	sp, #12
 8000ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000acc <.text_18>:
 8000acc:	e0002000 	.word	0xe0002000

08000ad0 <.text_19>:
 8000ad0:	40023000 	.word	0x40023000

08000ad4 <.text_20>:
 8000ad4:	f407a5c2 	.word	0xf407a5c2

08000ad8 <.text_21>:
 8000ad8:	b5e8b5cd 	.word	0xb5e8b5cd

08000adc <.text_22>:
 8000adc:	a1c00100 	.word	0xa1c00100

08000ae0 <.text_23>:
 8000ae0:	01030001 	.word	0x01030001

08000ae4 <.text_24>:
 8000ae4:	00000104 	.word	0x00000104

08000ae8 <.text_25>:
 8000ae8:	00000101 	.word	0x00000101

08000aec <.text_26>:
 8000aec:	00000301 	.word	0x00000301

08000af0 <.text_27>:
 8000af0:	00001030 	.word	0x00001030

08000af4 <.text_28>:
 8000af4:	00001001 	.word	0x00001001

08000af8 <_platform_network_sanity_check{5}::signatures>:
 8000af8:	84048403                                ....

08000afc <.text_30>:
 8000afc:	00001002 	.word	0x00001002

08000b00 <.text_31>:
 8000b00:	00001010 	.word	0x00001010

08000b04 <.text_32>:
 8000b04:	00000000 	.word	0x00000000

08000b08 <.text_33>:
 8000b08:	00001010 	.word	0x00001010

08000b0c <core_init>:
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <core_get_error>:
 8000b10:	4601      	mov	r1, r0
 8000b12:	2200      	movs	r2, #0
 8000b14:	6808      	ldr	r0, [r1, #0]
 8000b16:	600a      	str	r2, [r1, #0]
 8000b18:	4770      	bx	lr

08000b1a <core_set_error>:
 8000b1a:	7803      	ldrb	r3, [r0, #0]
 8000b1c:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 8000b20:	d104      	bne.n	8000b2c <core_set_error+0x12>
 8000b22:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000b26:	6001      	str	r1, [r0, #0]
 8000b28:	2001      	movs	r0, #1
 8000b2a:	4770      	bx	lr
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <ai_layers_forward_layer>:
 8000b30:	b510      	push	{r4, lr}
 8000b32:	4604      	mov	r4, r0
 8000b34:	6921      	ldr	r1, [r4, #16]
 8000b36:	4788      	blx	r1
 8000b38:	68e0      	ldr	r0, [r4, #12]
 8000b3a:	42a0      	cmp	r0, r4
 8000b3c:	bf08      	it	eq
 8000b3e:	2000      	moveq	r0, #0
 8000b40:	bd10      	pop	{r4, pc}
	...

08000b44 <ai_check_custom_types>:
 8000b44:	b500      	push	{lr}
 8000b46:	b081      	sub	sp, #4
 8000b48:	b160      	cbz	r0, 8000b64 <ai_check_custom_types+0x20>
 8000b4a:	7801      	ldrb	r1, [r0, #0]
 8000b4c:	2903      	cmp	r1, #3
 8000b4e:	d109      	bne.n	8000b64 <ai_check_custom_types+0x20>
 8000b50:	f05f 0204 	movs.w	r2, #4
 8000b54:	a18d      	add	r1, pc, #564	; (adr r1, 8000d8c <ai_check_custom_types::ref_signatures>)
 8000b56:	f00c fa20 	bl	800cf9a <memcmp>
 8000b5a:	1e40      	subs	r0, r0, #1
 8000b5c:	4180      	sbcs	r0, r0
 8000b5e:	0fc0      	lsrs	r0, r0, #31
 8000b60:	b001      	add	sp, #4
 8000b62:	bd00      	pop	{pc}
 8000b64:	2000      	movs	r0, #0
 8000b66:	b001      	add	sp, #4
 8000b68:	bd00      	pop	{pc}
	...

08000b6c <ai_layer_type_name>:
 8000b6c:	f242 7211 	movw	r2, #10001	; 0x2711
 8000b70:	1a81      	subs	r1, r0, r2
 8000b72:	2901      	cmp	r1, #1
 8000b74:	bf81      	itttt	hi
 8000b76:	1ec9      	subhi	r1, r1, #3
 8000b78:	290d      	cmphi	r1, #13
 8000b7a:	390f      	subhi	r1, #15
 8000b7c:	2909      	cmphi	r1, #9
 8000b7e:	f200 806b 	bhi.w	8000c58 <ai_layer_type_name+0xec>
 8000b82:	1a80      	subs	r0, r0, r2
 8000b84:	d033      	beq.n	8000bee <ai_layer_type_name+0x82>
 8000b86:	1e40      	subs	r0, r0, #1
 8000b88:	d033      	beq.n	8000bf2 <ai_layer_type_name+0x86>
 8000b8a:	1e80      	subs	r0, r0, #2
 8000b8c:	d033      	beq.n	8000bf6 <ai_layer_type_name+0x8a>
 8000b8e:	1e40      	subs	r0, r0, #1
 8000b90:	d034      	beq.n	8000bfc <ai_layer_type_name+0x90>
 8000b92:	1e40      	subs	r0, r0, #1
 8000b94:	d034      	beq.n	8000c00 <ai_layer_type_name+0x94>
 8000b96:	1e40      	subs	r0, r0, #1
 8000b98:	d034      	beq.n	8000c04 <ai_layer_type_name+0x98>
 8000b9a:	1e40      	subs	r0, r0, #1
 8000b9c:	d034      	beq.n	8000c08 <ai_layer_type_name+0x9c>
 8000b9e:	1e40      	subs	r0, r0, #1
 8000ba0:	d034      	beq.n	8000c0c <ai_layer_type_name+0xa0>
 8000ba2:	1e40      	subs	r0, r0, #1
 8000ba4:	d034      	beq.n	8000c10 <ai_layer_type_name+0xa4>
 8000ba6:	1e40      	subs	r0, r0, #1
 8000ba8:	d034      	beq.n	8000c14 <ai_layer_type_name+0xa8>
 8000baa:	1e40      	subs	r0, r0, #1
 8000bac:	d034      	beq.n	8000c18 <ai_layer_type_name+0xac>
 8000bae:	1e40      	subs	r0, r0, #1
 8000bb0:	d034      	beq.n	8000c1c <ai_layer_type_name+0xb0>
 8000bb2:	1e40      	subs	r0, r0, #1
 8000bb4:	d034      	beq.n	8000c20 <ai_layer_type_name+0xb4>
 8000bb6:	1e40      	subs	r0, r0, #1
 8000bb8:	d034      	beq.n	8000c24 <ai_layer_type_name+0xb8>
 8000bba:	1e40      	subs	r0, r0, #1
 8000bbc:	d034      	beq.n	8000c28 <ai_layer_type_name+0xbc>
 8000bbe:	1e40      	subs	r0, r0, #1
 8000bc0:	d034      	beq.n	8000c2c <ai_layer_type_name+0xc0>
 8000bc2:	1e80      	subs	r0, r0, #2
 8000bc4:	d034      	beq.n	8000c30 <ai_layer_type_name+0xc4>
 8000bc6:	1e40      	subs	r0, r0, #1
 8000bc8:	d034      	beq.n	8000c34 <ai_layer_type_name+0xc8>
 8000bca:	1e40      	subs	r0, r0, #1
 8000bcc:	d034      	beq.n	8000c38 <ai_layer_type_name+0xcc>
 8000bce:	1e40      	subs	r0, r0, #1
 8000bd0:	d034      	beq.n	8000c3c <ai_layer_type_name+0xd0>
 8000bd2:	1e40      	subs	r0, r0, #1
 8000bd4:	d034      	beq.n	8000c40 <ai_layer_type_name+0xd4>
 8000bd6:	1e40      	subs	r0, r0, #1
 8000bd8:	d034      	beq.n	8000c44 <ai_layer_type_name+0xd8>
 8000bda:	1e40      	subs	r0, r0, #1
 8000bdc:	d034      	beq.n	8000c48 <ai_layer_type_name+0xdc>
 8000bde:	1e40      	subs	r0, r0, #1
 8000be0:	d034      	beq.n	8000c4c <ai_layer_type_name+0xe0>
 8000be2:	1e40      	subs	r0, r0, #1
 8000be4:	d034      	beq.n	8000c50 <ai_layer_type_name+0xe4>
 8000be6:	1e40      	subs	r0, r0, #1
 8000be8:	d034      	beq.n	8000c54 <ai_layer_type_name+0xe8>
 8000bea:	a01c      	add	r0, pc, #112	; (adr r0, 8000c5c <.text_5>)
 8000bec:	4770      	bx	lr
 8000bee:	a01c      	add	r0, pc, #112	; (adr r0, 8000c60 <.text_6>)
 8000bf0:	4770      	bx	lr
 8000bf2:	a01c      	add	r0, pc, #112	; (adr r0, 8000c64 <.text_7>)
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	a031      	add	r0, pc, #196	; (adr r0, 8000cc0 <.text_15>)
 8000bfa:	4770      	bx	lr
 8000bfc:	a032      	add	r0, pc, #200	; (adr r0, 8000cc8 <.text_16>)
 8000bfe:	4770      	bx	lr
 8000c00:	a019      	add	r0, pc, #100	; (adr r0, 8000c68 <.text_8>)
 8000c02:	4770      	bx	lr
 8000c04:	a019      	add	r0, pc, #100	; (adr r0, 8000c6c <.text_9>)
 8000c06:	4770      	bx	lr
 8000c08:	a031      	add	r0, pc, #196	; (adr r0, 8000cd0 <.text_17>)
 8000c0a:	4770      	bx	lr
 8000c0c:	a018      	add	r0, pc, #96	; (adr r0, 8000c70 <.text_10>)
 8000c0e:	4770      	bx	lr
 8000c10:	a031      	add	r0, pc, #196	; (adr r0, 8000cd8 <.text_18>)
 8000c12:	4770      	bx	lr
 8000c14:	a032      	add	r0, pc, #200	; (adr r0, 8000ce0 <.text_19>)
 8000c16:	4770      	bx	lr
 8000c18:	a036      	add	r0, pc, #216	; (adr r0, 8000cf4 <.text_20>)
 8000c1a:	4770      	bx	lr
 8000c1c:	a038      	add	r0, pc, #224	; (adr r0, 8000d00 <.text_21>)
 8000c1e:	4770      	bx	lr
 8000c20:	a014      	add	r0, pc, #80	; (adr r0, 8000c74 <.text_11>)
 8000c22:	4770      	bx	lr
 8000c24:	a038      	add	r0, pc, #224	; (adr r0, 8000d08 <.text_22>)
 8000c26:	4770      	bx	lr
 8000c28:	a039      	add	r0, pc, #228	; (adr r0, 8000d10 <.text_23>)
 8000c2a:	4770      	bx	lr
 8000c2c:	a03b      	add	r0, pc, #236	; (adr r0, 8000d1c <.text_24>)
 8000c2e:	4770      	bx	lr
 8000c30:	a03f      	add	r0, pc, #252	; (adr r0, 8000d30 <.text_25>)
 8000c32:	4770      	bx	lr
 8000c34:	a040      	add	r0, pc, #256	; (adr r0, 8000d38 <.text_26>)
 8000c36:	4770      	bx	lr
 8000c38:	a041      	add	r0, pc, #260	; (adr r0, 8000d40 <.text_27>)
 8000c3a:	4770      	bx	lr
 8000c3c:	a043      	add	r0, pc, #268	; (adr r0, 8000d4c <.text_28>)
 8000c3e:	4770      	bx	lr
 8000c40:	a044      	add	r0, pc, #272	; (adr r0, 8000d54 <.text_29>)
 8000c42:	4770      	bx	lr
 8000c44:	a045      	add	r0, pc, #276	; (adr r0, 8000d5c <.text_30>)
 8000c46:	4770      	bx	lr
 8000c48:	a00b      	add	r0, pc, #44	; (adr r0, 8000c78 <.text_12>)
 8000c4a:	4770      	bx	lr
 8000c4c:	a049      	add	r0, pc, #292	; (adr r0, 8000d74 <.text_31>)
 8000c4e:	4770      	bx	lr
 8000c50:	a04a      	add	r0, pc, #296	; (adr r0, 8000d7c <.text_32>)
 8000c52:	4770      	bx	lr
 8000c54:	a04b      	add	r0, pc, #300	; (adr r0, 8000d84 <.text_33>)
 8000c56:	4770      	bx	lr
 8000c58:	a000      	add	r0, pc, #0	; (adr r0, 8000c5c <.text_5>)
 8000c5a:	4770      	bx	lr

08000c5c <.text_5>:
 8000c5c:	00000000 	.word	0x00000000

08000c60 <.text_6>:
 8000c60:	00444441 	.word	0x00444441

08000c64 <.text_7>:
 8000c64:	00004e42 	.word	0x00004e42

08000c68 <.text_8>:
 8000c68:	00555247 	.word	0x00555247

08000c6c <.text_9>:
 8000c6c:	004e524c 	.word	0x004e524c

08000c70 <.text_10>:
 8000c70:	00004c4e 	.word	0x00004c4e

08000c74 <.text_11>:
 8000c74:	00004d53 	.word	0x00004d53

08000c78 <.text_12>:
 8000c78:	00444150 	.word	0x00444150

08000c7c <ai_layer_type_is_valid>:
 8000c7c:	f242 7111 	movw	r1, #10001	; 0x2711
 8000c80:	1a40      	subs	r0, r0, r1
 8000c82:	2801      	cmp	r0, #1
 8000c84:	bf81      	itttt	hi
 8000c86:	1ec0      	subhi	r0, r0, #3
 8000c88:	280d      	cmphi	r0, #13
 8000c8a:	380f      	subhi	r0, #15
 8000c8c:	2809      	cmphi	r0, #9
 8000c8e:	d801      	bhi.n	8000c94 <ai_layer_type_is_valid+0x18>
 8000c90:	2001      	movs	r0, #1
 8000c92:	4770      	bx	lr
 8000c94:	2000      	movs	r0, #0
 8000c96:	4770      	bx	lr

08000c98 <ai_layers_forward_all>:
 8000c98:	b530      	push	{r4, r5, lr}
 8000c9a:	4604      	mov	r4, r0
 8000c9c:	b081      	sub	sp, #4
 8000c9e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8000ca0:	b158      	cbz	r0, 8000cba <ai_layers_forward_all+0x22>
 8000ca2:	6560      	str	r0, [r4, #84]	; 0x54
 8000ca4:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8000ca6:	6929      	ldr	r1, [r5, #16]
 8000ca8:	4628      	mov	r0, r5
 8000caa:	4788      	blx	r1
 8000cac:	68e8      	ldr	r0, [r5, #12]
 8000cae:	42a8      	cmp	r0, r5
 8000cb0:	bf08      	it	eq
 8000cb2:	2000      	moveq	r0, #0
 8000cb4:	2800      	cmp	r0, #0
 8000cb6:	6560      	str	r0, [r4, #84]	; 0x54
 8000cb8:	d1f4      	bne.n	8000ca4 <ai_layers_forward_all+0xc>
 8000cba:	b001      	add	sp, #4
 8000cbc:	bd30      	pop	{r4, r5, pc}
	...

08000cc0 <.text_15>:
 8000cc0:	564e4f43 	.word	0x564e4f43
 8000cc4:	00004432 	.word	0x00004432

08000cc8 <.text_16>:
 8000cc8:	534e4544 	.word	0x534e4544
 8000ccc:	0045      	.short	0x0045
	...

08000cd0 <.text_17>:
 8000cd0:	4d54534c 	.word	0x4d54534c
 8000cd4:	00          	.byte	0x00
 8000cd5:	00          	.byte	0x00
	...

08000cd8 <.text_18>:
 8000cd8:	4d524f4e 	.word	0x4d524f4e
 8000cdc:	00          	.byte	0x00
 8000cdd:	00          	.byte	0x00
	...

08000ce0 <.text_19>:
 8000ce0:	4954504f 	.word	0x4954504f
 8000ce4:	455a494d 	.word	0x455a494d
 8000ce8:	4f435f44 	.word	0x4f435f44
 8000cec:	4432564e 	.word	0x4432564e
 8000cf0:	00          	.byte	0x00
 8000cf1:	00          	.byte	0x00
	...

08000cf4 <.text_20>:
 8000cf4:	4e415254 	.word	0x4e415254
 8000cf8:	534f5053 	.word	0x534f5053
 8000cfc:	0045      	.short	0x0045
	...

08000d00 <.text_21>:
 8000d00:	4c4f4f50 	.word	0x4c4f4f50
 8000d04:	00          	.byte	0x00
 8000d05:	00          	.byte	0x00
	...

08000d08 <.text_22>:
 8000d08:	494c5053 	.word	0x494c5053
 8000d0c:	0054      	.short	0x0054
	...

08000d10 <.text_23>:
 8000d10:	454d4954 	.word	0x454d4954
 8000d14:	4c45445f 	.word	0x4c45445f
 8000d18:	00005941 	.word	0x00005941

08000d1c <.text_24>:
 8000d1c:	454d4954 	.word	0x454d4954
 8000d20:	5349445f 	.word	0x5349445f
 8000d24:	42495254 	.word	0x42495254
 8000d28:	44455455 	.word	0x44455455
 8000d2c:	00          	.byte	0x00
 8000d2d:	00          	.byte	0x00
	...

08000d30 <.text_25>:
 8000d30:	434e4f43 	.word	0x434e4f43
 8000d34:	00005441 	.word	0x00005441

08000d38 <.text_26>:
 8000d38:	4d4d4547 	.word	0x4d4d4547
 8000d3c:	00          	.byte	0x00
 8000d3d:	00          	.byte	0x00
	...

08000d40 <.text_27>:
 8000d40:	41535055 	.word	0x41535055
 8000d44:	454c504d 	.word	0x454c504d
 8000d48:	00          	.byte	0x00
 8000d49:	00          	.byte	0x00
	...

08000d4c <.text_28>:
 8000d4c:	57544c45 	.word	0x57544c45
 8000d50:	00455349 	.word	0x00455349

08000d54 <.text_29>:
 8000d54:	454e4547 	.word	0x454e4547
 8000d58:	00434952 	.word	0x00434952

08000d5c <.text_30>:
 8000d5c:	54534e49 	.word	0x54534e49
 8000d60:	45434e41 	.word	0x45434e41
 8000d64:	4d524f4e 	.word	0x4d524f4e
 8000d68:	5a494c41 	.word	0x5a494c41
 8000d6c:	4f495441 	.word	0x4f495441
 8000d70:	004e      	.short	0x004e
	...

08000d74 <.text_31>:
 8000d74:	43494c53 	.word	0x43494c53
 8000d78:	0045      	.short	0x0045
	...

08000d7c <.text_32>:
 8000d7c:	454c4954 	.word	0x454c4954
 8000d80:	00          	.byte	0x00
 8000d81:	00          	.byte	0x00
	...

08000d84 <.text_33>:
 8000d84:	55444552 	.word	0x55444552
 8000d88:	00004543 	.word	0x00004543

08000d8c <ai_check_custom_types::ref_signatures>:
 8000d8c:	84048403                                ....

08000d90 <ai_conv2d_stripe_f32>:
 8000d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d94:	b098      	sub	sp, #96	; 0x60
 8000d96:	9825      	ldr	r0, [sp, #148]	; 0x94
 8000d98:	2800      	cmp	r0, #0
 8000d9a:	f000 82cb 	beq.w	8001334 <ai_conv2d_stripe_f32+0x5a4>
 8000d9e:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8000da2:	f8dd a0b4 	ldr.w	sl, [sp, #180]	; 0xb4
 8000da6:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8000da8:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8000daa:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 8000dac:	9004      	str	r0, [sp, #16]
 8000dae:	fb07 6a0a 	mla	sl, r7, sl, r6
 8000db2:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8000db4:	f9bd 60c0 	ldrsh.w	r6, [sp, #192]	; 0xc0
 8000db8:	f8cd a014 	str.w	sl, [sp, #20]
 8000dbc:	1904      	adds	r4, r0, r4
 8000dbe:	1e64      	subs	r4, r4, #1
 8000dc0:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000dc2:	9100      	str	r1, [sp, #0]
 8000dc4:	fb94 f6f6 	sdiv	r6, r4, r6
 8000dc8:	f9bd 40bc 	ldrsh.w	r4, [sp, #188]	; 0xbc
 8000dcc:	9217      	str	r2, [sp, #92]	; 0x5c
 8000dce:	4346      	muls	r6, r0
 8000dd0:	9616      	str	r6, [sp, #88]	; 0x58
 8000dd2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000dd6:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8000dd8:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000dda:	9306      	str	r3, [sp, #24]
 8000ddc:	4344      	muls	r4, r0
 8000dde:	9415      	str	r4, [sp, #84]	; 0x54
 8000de0:	437e      	muls	r6, r7
 8000de2:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8000de6:	437c      	muls	r4, r7
 8000de8:	9414      	str	r4, [sp, #80]	; 0x50
 8000dea:	4346      	muls	r6, r0
 8000dec:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8000df0:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8000df2:	960b      	str	r6, [sp, #44]	; 0x2c
 8000df4:	1a24      	subs	r4, r4, r0
 8000df6:	9413      	str	r4, [sp, #76]	; 0x4c
 8000df8:	4604      	mov	r4, r0
 8000dfa:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000dfc:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8000dfe:	4344      	muls	r4, r0
 8000e00:	9412      	str	r4, [sp, #72]	; 0x48
 8000e02:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8000e04:	4344      	muls	r4, r0
 8000e06:	9411      	str	r4, [sp, #68]	; 0x44
 8000e08:	f9bd 00c0 	ldrsh.w	r0, [sp, #192]	; 0xc0
 8000e0c:	f9bd 40bc 	ldrsh.w	r4, [sp, #188]	; 0xbc
 8000e10:	fb14 f000 	smulbb	r0, r4, r0
 8000e14:	900a      	str	r0, [sp, #40]	; 0x28
 8000e16:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8000e18:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000e1a:	fbb4 f0f0 	udiv	r0, r4, r0
 8000e1e:	9010      	str	r0, [sp, #64]	; 0x40
 8000e20:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8000e22:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000e24:	fbb4 f0f0 	udiv	r0, r4, r0
 8000e28:	900f      	str	r0, [sp, #60]	; 0x3c
 8000e2a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8000e2c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000e2e:	fbb4 f0f0 	udiv	r0, r4, r0
 8000e32:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8000e34:	900e      	str	r0, [sp, #56]	; 0x38
 8000e36:	4374      	muls	r4, r6
 8000e38:	940d      	str	r4, [sp, #52]	; 0x34
 8000e3a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8000e3c:	1b2d      	subs	r5, r5, r4
 8000e3e:	950c      	str	r5, [sp, #48]	; 0x30
 8000e40:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 8000e42:	9924      	ldr	r1, [sp, #144]	; 0x90
 8000e44:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8000e46:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8000e48:	427f      	negs	r7, r7
 8000e4a:	bfd8      	it	le
 8000e4c:	2700      	movle	r7, #0
 8000e4e:	1a09      	subs	r1, r1, r0
 8000e50:	4291      	cmp	r1, r2
 8000e52:	bf3d      	ittte	cc
 8000e54:	9824      	ldrcc	r0, [sp, #144]	; 0x90
 8000e56:	9e2c      	ldrcc	r6, [sp, #176]	; 0xb0
 8000e58:	1b86      	subcc	r6, r0, r6
 8000e5a:	4616      	movcs	r6, r2
 8000e5c:	9a05      	ldr	r2, [sp, #20]
 8000e5e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8000e60:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000e62:	18ba      	adds	r2, r7, r2
 8000e64:	434a      	muls	r2, r1
 8000e66:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000e6a:	9821      	ldr	r0, [sp, #132]	; 0x84
 8000e6c:	b900      	cbnz	r0, 8000e70 <ai_conv2d_stripe_f32+0xe0>
 8000e6e:	9800      	ldr	r0, [sp, #0]
 8000e70:	9001      	str	r0, [sp, #4]
 8000e72:	1bf6      	subs	r6, r6, r7
 8000e74:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000e76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000e78:	2801      	cmp	r0, #1
 8000e7a:	bf04      	itt	eq
 8000e7c:	980a      	ldreq	r0, [sp, #40]	; 0x28
 8000e7e:	2801      	cmpeq	r0, #1
 8000e80:	f040 80a9 	bne.w	8000fd6 <ai_conv2d_stripe_f32+0x246>
 8000e84:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8000e86:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000e88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000e8a:	1ba4      	subs	r4, r4, r6
 8000e8c:	434c      	muls	r4, r1
 8000e8e:	1b80      	subs	r0, r0, r6
 8000e90:	4341      	muls	r1, r0
 8000e92:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8000e94:	1b40      	subs	r0, r0, r5
 8000e96:	fb00 fc03 	mul.w	ip, r0, r3
 8000e9a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000e9c:	9b06      	ldr	r3, [sp, #24]
 8000e9e:	4407      	add	r7, r0
 8000ea0:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000ea2:	4347      	muls	r7, r0
 8000ea4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8000ea8:	4370      	muls	r0, r6
 8000eaa:	9e01      	ldr	r6, [sp, #4]
 8000eac:	9b00      	ldr	r3, [sp, #0]
 8000eae:	429e      	cmp	r6, r3
 8000eb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000eb2:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8000eb6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8000eb8:	bf0c      	ite	eq
 8000eba:	eddf 0aaf 	vldreq	s1, [pc, #700]	; 8001178 <ai_conv2d_stripe_f32+0x3e8>
 8000ebe:	eef0 0a40 	vmovne.f32	s1, s0
 8000ec2:	2a00      	cmp	r2, #0
 8000ec4:	f000 8222 	beq.w	800130c <ai_conv2d_stripe_f32+0x57c>
 8000ec8:	46b0      	mov	r8, r6
 8000eca:	462e      	mov	r6, r5
 8000ecc:	4613      	mov	r3, r2
 8000ece:	f8cd c008 	str.w	ip, [sp, #8]
 8000ed2:	461d      	mov	r5, r3
 8000ed4:	f8dd e000 	ldr.w	lr, [sp]
 8000ed8:	9b00      	ldr	r3, [sp, #0]
 8000eda:	463a      	mov	r2, r7
 8000edc:	4682      	mov	sl, r0
 8000ede:	f8cd 9004 	str.w	r9, [sp, #4]
 8000ee2:	46c4      	mov	ip, r8
 8000ee4:	f02a 0703 	bic.w	r7, sl, #3
 8000ee8:	ed9c 1a00 	vldr	s2, [ip]
 8000eec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8000ef0:	2e00      	cmp	r6, #0
 8000ef2:	ee21 1a20 	vmul.f32	s2, s2, s1
 8000ef6:	dd61      	ble.n	8000fbc <ai_conv2d_stripe_f32+0x22c>
 8000ef8:	4630      	mov	r0, r6
 8000efa:	2f00      	cmp	r7, #0
 8000efc:	f04f 0900 	mov.w	r9, #0
 8000f00:	f340 801f 	ble.w	8000f42 <ai_conv2d_stripe_f32+0x1b2>
 8000f04:	edd2 4a00 	vldr	s9, [r2]
 8000f08:	ed98 5a00 	vldr	s10, [r8]
 8000f0c:	edd2 3a01 	vldr	s7, [r2, #4]
 8000f10:	ed98 4a01 	vldr	s8, [r8, #4]
 8000f14:	edd2 2a02 	vldr	s5, [r2, #8]
 8000f18:	ed98 3a02 	vldr	s6, [r8, #8]
 8000f1c:	edd2 1a03 	vldr	s3, [r2, #12]
 8000f20:	ed98 2a03 	vldr	s4, [r8, #12]
 8000f24:	ee04 1a85 	vmla.f32	s2, s9, s10
 8000f28:	ee03 1a84 	vmla.f32	s2, s7, s8
 8000f2c:	3210      	adds	r2, #16
 8000f2e:	f109 0904 	add.w	r9, r9, #4
 8000f32:	ee02 1a83 	vmla.f32	s2, s5, s6
 8000f36:	45b9      	cmp	r9, r7
 8000f38:	ee01 1a82 	vmla.f32	s2, s3, s4
 8000f3c:	f108 0810 	add.w	r8, r8, #16
 8000f40:	dbe0      	blt.n	8000f04 <ai_conv2d_stripe_f32+0x174>
 8000f42:	45d1      	cmp	r9, sl
 8000f44:	f280 8034 	bge.w	8000fb0 <ai_conv2d_stripe_f32+0x220>
 8000f48:	f109 0901 	add.w	r9, r9, #1
 8000f4c:	edd2 2a00 	vldr	s5, [r2]
 8000f50:	edd8 1a00 	vldr	s3, [r8]
 8000f54:	1d12      	adds	r2, r2, #4
 8000f56:	45d1      	cmp	r9, sl
 8000f58:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8000f5c:	f108 0804 	add.w	r8, r8, #4
 8000f60:	da26      	bge.n	8000fb0 <ai_conv2d_stripe_f32+0x220>
 8000f62:	f109 0901 	add.w	r9, r9, #1
 8000f66:	ed92 3a00 	vldr	s6, [r2]
 8000f6a:	ed98 2a00 	vldr	s4, [r8]
 8000f6e:	1d12      	adds	r2, r2, #4
 8000f70:	45d1      	cmp	r9, sl
 8000f72:	ee03 1a02 	vmla.f32	s2, s6, s4
 8000f76:	f108 0804 	add.w	r8, r8, #4
 8000f7a:	da19      	bge.n	8000fb0 <ai_conv2d_stripe_f32+0x220>
 8000f7c:	f109 0901 	add.w	r9, r9, #1
 8000f80:	edd2 2a00 	vldr	s5, [r2]
 8000f84:	edd8 1a00 	vldr	s3, [r8]
 8000f88:	1d12      	adds	r2, r2, #4
 8000f8a:	45d1      	cmp	r9, sl
 8000f8c:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8000f90:	f108 0804 	add.w	r8, r8, #4
 8000f94:	da0c      	bge.n	8000fb0 <ai_conv2d_stripe_f32+0x220>
 8000f96:	f109 0901 	add.w	r9, r9, #1
 8000f9a:	ed92 2a00 	vldr	s4, [r2]
 8000f9e:	ed98 3a00 	vldr	s6, [r8]
 8000fa2:	1d12      	adds	r2, r2, #4
 8000fa4:	45d1      	cmp	r9, sl
 8000fa6:	ee02 1a03 	vmla.f32	s2, s4, s6
 8000faa:	f108 0804 	add.w	r8, r8, #4
 8000fae:	dbcb      	blt.n	8000f48 <ai_conv2d_stripe_f32+0x1b8>
 8000fb0:	1e40      	subs	r0, r0, #1
 8000fb2:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8000fb6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8000fba:	d19e      	bne.n	8000efa <ai_conv2d_stripe_f32+0x16a>
 8000fbc:	9802      	ldr	r0, [sp, #8]
 8000fbe:	ed8e 1a00 	vstr	s2, [lr]
 8000fc2:	1e6d      	subs	r5, r5, #1
 8000fc4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8000fc8:	f10e 0e04 	add.w	lr, lr, #4
 8000fcc:	f10c 0c04 	add.w	ip, ip, #4
 8000fd0:	d18a      	bne.n	8000ee8 <ai_conv2d_stripe_f32+0x158>
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	e19a      	b.n	800130c <ai_conv2d_stripe_f32+0x57c>
 8000fd6:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000fd8:	4288      	cmp	r0, r1
 8000fda:	bf04      	itt	eq
 8000fdc:	980a      	ldreq	r0, [sp, #40]	; 0x28
 8000fde:	2801      	cmpeq	r0, #1
 8000fe0:	f040 80cc 	bne.w	800117c <ai_conv2d_stripe_f32+0x3ec>
 8000fe4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000fe6:	9b06      	ldr	r3, [sp, #24]
 8000fe8:	9c00      	ldr	r4, [sp, #0]
 8000fea:	9002      	str	r0, [sp, #8]
 8000fec:	9824      	ldr	r0, [sp, #144]	; 0x90
 8000fee:	1b81      	subs	r1, r0, r6
 8000ff0:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000ff2:	fb01 fa00 	mul.w	sl, r1, r0
 8000ff6:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000ff8:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000ffa:	eba0 0c06 	sub.w	ip, r0, r6
 8000ffe:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8001000:	1b40      	subs	r0, r0, r5
 8001002:	4341      	muls	r1, r0
 8001004:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001006:	183f      	adds	r7, r7, r0
 8001008:	eb03 0087 	add.w	r0, r3, r7, lsl #2
 800100c:	9b01      	ldr	r3, [sp, #4]
 800100e:	42a3      	cmp	r3, r4
 8001010:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001012:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8001016:	bf0c      	ite	eq
 8001018:	eddf 0a57 	vldreq	s1, [pc, #348]	; 8001178 <ai_conv2d_stripe_f32+0x3e8>
 800101c:	eef0 0a40 	vmovne.f32	s1, s0
 8001020:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001022:	2400      	movs	r4, #0
 8001024:	eb0e 0283 	add.w	r2, lr, r3, lsl #2
 8001028:	4596      	cmp	lr, r2
 800102a:	9203      	str	r2, [sp, #12]
 800102c:	f080 816e 	bcs.w	800130c <ai_conv2d_stripe_f32+0x57c>
 8001030:	9b00      	ldr	r3, [sp, #0]
 8001032:	9a02      	ldr	r2, [sp, #8]
 8001034:	2a00      	cmp	r2, #0
 8001036:	f000 8097 	beq.w	8001168 <ai_conv2d_stripe_f32+0x3d8>
 800103a:	9a01      	ldr	r2, [sp, #4]
 800103c:	9500      	str	r5, [sp, #0]
 800103e:	eb02 0784 	add.w	r7, r2, r4, lsl #2
 8001042:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 8001046:	f8dd b008 	ldr.w	fp, [sp, #8]
 800104a:	9108      	str	r1, [sp, #32]
 800104c:	f8cd e01c 	str.w	lr, [sp, #28]
 8001050:	4615      	mov	r5, r2
 8001052:	9a00      	ldr	r2, [sp, #0]
 8001054:	ed97 1a00 	vldr	s2, [r7]
 8001058:	9907      	ldr	r1, [sp, #28]
 800105a:	2a00      	cmp	r2, #0
 800105c:	ee21 1a20 	vmul.f32	s2, s2, s1
 8001060:	f340 8072 	ble.w	8001148 <ai_conv2d_stripe_f32+0x3b8>
 8001064:	f026 0e03 	bic.w	lr, r6, #3
 8001068:	f1be 0f00 	cmp.w	lr, #0
 800106c:	f04f 0900 	mov.w	r9, #0
 8001070:	f340 8029 	ble.w	80010c6 <ai_conv2d_stripe_f32+0x336>
 8001074:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 8001078:	edd0 1a00 	vldr	s3, [r0]
 800107c:	ed91 2a00 	vldr	s4, [r1]
 8001080:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8001084:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001088:	edd0 1a01 	vldr	s3, [r0, #4]
 800108c:	ed91 2a00 	vldr	s4, [r1]
 8001090:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8001094:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001098:	edd0 1a02 	vldr	s3, [r0, #8]
 800109c:	ed91 2a00 	vldr	s4, [r1]
 80010a0:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80010a4:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010a8:	f109 0904 	add.w	r9, r9, #4
 80010ac:	edd0 1a03 	vldr	s3, [r0, #12]
 80010b0:	ed91 2a00 	vldr	s4, [r1]
 80010b4:	3010      	adds	r0, #16
 80010b6:	45f1      	cmp	r9, lr
 80010b8:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010bc:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80010c0:	dbda      	blt.n	8001078 <ai_conv2d_stripe_f32+0x2e8>
 80010c2:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
 80010c6:	45b1      	cmp	r9, r6
 80010c8:	f280 8038 	bge.w	800113c <ai_conv2d_stripe_f32+0x3ac>
 80010cc:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 80010d0:	f109 0901 	add.w	r9, r9, #1
 80010d4:	edd0 1a00 	vldr	s3, [r0]
 80010d8:	ed91 2a00 	vldr	s4, [r1]
 80010dc:	1d00      	adds	r0, r0, #4
 80010de:	45b1      	cmp	r9, r6
 80010e0:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010e4:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 80010e8:	da26      	bge.n	8001138 <ai_conv2d_stripe_f32+0x3a8>
 80010ea:	f109 0901 	add.w	r9, r9, #1
 80010ee:	ed90 2a00 	vldr	s4, [r0]
 80010f2:	edd1 1a00 	vldr	s3, [r1]
 80010f6:	1d00      	adds	r0, r0, #4
 80010f8:	45b1      	cmp	r9, r6
 80010fa:	ee02 1a21 	vmla.f32	s2, s4, s3
 80010fe:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8001102:	da19      	bge.n	8001138 <ai_conv2d_stripe_f32+0x3a8>
 8001104:	f109 0901 	add.w	r9, r9, #1
 8001108:	edd0 1a00 	vldr	s3, [r0]
 800110c:	ed91 2a00 	vldr	s4, [r1]
 8001110:	1d00      	adds	r0, r0, #4
 8001112:	45b1      	cmp	r9, r6
 8001114:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001118:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 800111c:	da0c      	bge.n	8001138 <ai_conv2d_stripe_f32+0x3a8>
 800111e:	f109 0901 	add.w	r9, r9, #1
 8001122:	ed90 2a00 	vldr	s4, [r0]
 8001126:	edd1 1a00 	vldr	s3, [r1]
 800112a:	1d00      	adds	r0, r0, #4
 800112c:	45b1      	cmp	r9, r6
 800112e:	ee02 1a21 	vmla.f32	s2, s4, s3
 8001132:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8001136:	dbcb      	blt.n	80010d0 <ai_conv2d_stripe_f32+0x340>
 8001138:	f8cd e088 	str.w	lr, [sp, #136]	; 0x88
 800113c:	1e52      	subs	r2, r2, #1
 800113e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8001142:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8001146:	d18d      	bne.n	8001064 <ai_conv2d_stripe_f32+0x2d4>
 8001148:	9908      	ldr	r1, [sp, #32]
 800114a:	ed85 1a00 	vstr	s2, [r5]
 800114e:	1c64      	adds	r4, r4, #1
 8001150:	1d2d      	adds	r5, r5, #4
 8001152:	1d3f      	adds	r7, r7, #4
 8001154:	f1bb 0b01 	subs.w	fp, fp, #1
 8001158:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800115c:	f47f af79 	bne.w	8001052 <ai_conv2d_stripe_f32+0x2c2>
 8001160:	9d00      	ldr	r5, [sp, #0]
 8001162:	9908      	ldr	r1, [sp, #32]
 8001164:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8001168:	9a03      	ldr	r2, [sp, #12]
 800116a:	f10e 0e04 	add.w	lr, lr, #4
 800116e:	4596      	cmp	lr, r2
 8001170:	f4bf af2f 	bcs.w	8000fd2 <ai_conv2d_stripe_f32+0x242>
 8001174:	e75d      	b.n	8001032 <ai_conv2d_stripe_f32+0x2a2>
 8001176:	bf00      	nop
 8001178:	00000000 	.word	0x00000000
 800117c:	f9bd 10bc 	ldrsh.w	r1, [sp, #188]	; 0xbc
 8001180:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 8001184:	4608      	mov	r0, r1
 8001186:	1bcb      	subs	r3, r1, r7
 8001188:	fb97 f4f0 	sdiv	r4, r7, r0
 800118c:	fb00 3004 	mla	r0, r0, r4, r3
 8001190:	fb90 faf1 	sdiv	sl, r0, r1
 8001194:	fb01 0a1a 	mls	sl, r1, sl, r0
 8001198:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 800119c:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800119e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80011a0:	fb90 f0f3 	sdiv	r0, r0, r3
 80011a4:	fb03 4000 	mla	r0, r3, r0, r4
 80011a8:	1876      	adds	r6, r6, r1
 80011aa:	fb90 fbf3 	sdiv	fp, r0, r3
 80011ae:	1e76      	subs	r6, r6, #1
 80011b0:	187f      	adds	r7, r7, r1
 80011b2:	fb03 0b1b 	mls	fp, r3, fp, r0
 80011b6:	eba6 060a 	sub.w	r6, r6, sl
 80011ba:	eba5 050b 	sub.w	r5, r5, fp
 80011be:	1e7f      	subs	r7, r7, #1
 80011c0:	fb96 f0f1 	sdiv	r0, r6, r1
 80011c4:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80011c6:	9c22      	ldr	r4, [sp, #136]	; 0x88
 80011c8:	195d      	adds	r5, r3, r5
 80011ca:	1e6d      	subs	r5, r5, #1
 80011cc:	fb00 9911 	mls	r9, r0, r1, r9
 80011d0:	fb97 f1f1 	sdiv	r1, r7, r1
 80011d4:	fb95 fcf3 	sdiv	ip, r5, r3
 80011d8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80011da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80011dc:	9509      	str	r5, [sp, #36]	; 0x24
 80011de:	eba6 060c 	sub.w	r6, r6, ip
 80011e2:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80011e4:	1a2d      	subs	r5, r5, r0
 80011e6:	fb05 f803 	mul.w	r8, r5, r3
 80011ea:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80011ec:	435d      	muls	r5, r3
 80011ee:	fb06 fe05 	mul.w	lr, r6, r5
 80011f2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80011f4:	9e06      	ldr	r6, [sp, #24]
 80011f6:	194d      	adds	r5, r1, r5
 80011f8:	fb04 f909 	mul.w	r9, r4, r9
 80011fc:	435d      	muls	r5, r3
 80011fe:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8001200:	eb06 0185 	add.w	r1, r6, r5, lsl #2
 8001204:	9d01      	ldr	r5, [sp, #4]
 8001206:	9e00      	ldr	r6, [sp, #0]
 8001208:	1ae4      	subs	r4, r4, r3
 800120a:	42b5      	cmp	r5, r6
 800120c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800120e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8001210:	445d      	add	r5, fp
 8001212:	fb06 aa05 	mla	sl, r6, r5, sl
 8001216:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8001218:	fb0a f505 	mul.w	r5, sl, r5
 800121c:	bf0c      	ite	eq
 800121e:	eddf 0a9e 	vldreq	s1, [pc, #632]	; 8001498 <.text_5>
 8001222:	eef0 0a40 	vmovne.f32	s1, s0
 8001226:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800122a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800122c:	2500      	movs	r5, #0
 800122e:	2a00      	cmp	r2, #0
 8001230:	d06c      	beq.n	800130c <ai_conv2d_stripe_f32+0x57c>
 8001232:	9202      	str	r2, [sp, #8]
 8001234:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001236:	2a00      	cmp	r2, #0
 8001238:	d062      	beq.n	8001300 <ai_conv2d_stripe_f32+0x570>
 800123a:	9a01      	ldr	r2, [sp, #4]
 800123c:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8001240:	9a00      	ldr	r2, [sp, #0]
 8001242:	f8cd c00c 	str.w	ip, [sp, #12]
 8001246:	eb02 0a85 	add.w	sl, r2, r5, lsl #2
 800124a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800124c:	f8cd e020 	str.w	lr, [sp, #32]
 8001250:	f8cd 701c 	str.w	r7, [sp, #28]
 8001254:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8001258:	ed96 1a00 	vldr	s2, [r6]
 800125c:	9f07      	ldr	r7, [sp, #28]
 800125e:	f1be 0f00 	cmp.w	lr, #0
 8001262:	ee21 1a20 	vmul.f32	s2, s2, s1
 8001266:	dd3b      	ble.n	80012e0 <ai_conv2d_stripe_f32+0x550>
 8001268:	2800      	cmp	r0, #0
 800126a:	dd32      	ble.n	80012d2 <ai_conv2d_stripe_f32+0x542>
 800126c:	ea4f 0c00 	mov.w	ip, r0
 8001270:	eb07 0b83 	add.w	fp, r7, r3, lsl #2
 8001274:	455f      	cmp	r7, fp
 8001276:	d227      	bcs.n	80012c8 <ai_conv2d_stripe_f32+0x538>
 8001278:	edd1 2a00 	vldr	s5, [r1]
 800127c:	edd7 1a00 	vldr	s3, [r7]
 8001280:	1d09      	adds	r1, r1, #4
 8001282:	1d3f      	adds	r7, r7, #4
 8001284:	455f      	cmp	r7, fp
 8001286:	ee02 1aa1 	vmla.f32	s2, s5, s3
 800128a:	d21d      	bcs.n	80012c8 <ai_conv2d_stripe_f32+0x538>
 800128c:	ed91 3a00 	vldr	s6, [r1]
 8001290:	ed97 2a00 	vldr	s4, [r7]
 8001294:	1d09      	adds	r1, r1, #4
 8001296:	1d3f      	adds	r7, r7, #4
 8001298:	455f      	cmp	r7, fp
 800129a:	ee03 1a02 	vmla.f32	s2, s6, s4
 800129e:	d213      	bcs.n	80012c8 <ai_conv2d_stripe_f32+0x538>
 80012a0:	edd1 2a00 	vldr	s5, [r1]
 80012a4:	edd7 1a00 	vldr	s3, [r7]
 80012a8:	1d09      	adds	r1, r1, #4
 80012aa:	1d3f      	adds	r7, r7, #4
 80012ac:	455f      	cmp	r7, fp
 80012ae:	ee02 1aa1 	vmla.f32	s2, s5, s3
 80012b2:	d209      	bcs.n	80012c8 <ai_conv2d_stripe_f32+0x538>
 80012b4:	ed91 2a00 	vldr	s4, [r1]
 80012b8:	ed97 3a00 	vldr	s6, [r7]
 80012bc:	1d09      	adds	r1, r1, #4
 80012be:	1d3f      	adds	r7, r7, #4
 80012c0:	455f      	cmp	r7, fp
 80012c2:	ee02 1a03 	vmla.f32	s2, s4, s6
 80012c6:	d3d7      	bcc.n	8001278 <ai_conv2d_stripe_f32+0x4e8>
 80012c8:	f1bc 0c01 	subs.w	ip, ip, #1
 80012cc:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 80012d0:	d1ce      	bne.n	8001270 <ai_conv2d_stripe_f32+0x4e0>
 80012d2:	f1be 0e01 	subs.w	lr, lr, #1
 80012d6:	eb07 0789 	add.w	r7, r7, r9, lsl #2
 80012da:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80012de:	d1c3      	bne.n	8001268 <ai_conv2d_stripe_f32+0x4d8>
 80012e0:	9f08      	ldr	r7, [sp, #32]
 80012e2:	1c6d      	adds	r5, r5, #1
 80012e4:	1d36      	adds	r6, r6, #4
 80012e6:	ed8a 1a00 	vstr	s2, [sl]
 80012ea:	1e52      	subs	r2, r2, #1
 80012ec:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 80012f0:	f10a 0a04 	add.w	sl, sl, #4
 80012f4:	d1ae      	bne.n	8001254 <ai_conv2d_stripe_f32+0x4c4>
 80012f6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80012fa:	f8dd e020 	ldr.w	lr, [sp, #32]
 80012fe:	9f07      	ldr	r7, [sp, #28]
 8001300:	9a02      	ldr	r2, [sp, #8]
 8001302:	1e52      	subs	r2, r2, #1
 8001304:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8001308:	9202      	str	r2, [sp, #8]
 800130a:	d193      	bne.n	8001234 <ai_conv2d_stripe_f32+0x4a4>
 800130c:	9800      	ldr	r0, [sp, #0]
 800130e:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8001310:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8001314:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8001316:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 800131a:	9200      	str	r2, [sp, #0]
 800131c:	1841      	adds	r1, r0, r1
 800131e:	912c      	str	r1, [sp, #176]	; 0xb0
 8001320:	9805      	ldr	r0, [sp, #20]
 8001322:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 8001326:	1841      	adds	r1, r0, r1
 8001328:	9804      	ldr	r0, [sp, #16]
 800132a:	9105      	str	r1, [sp, #20]
 800132c:	1e40      	subs	r0, r0, #1
 800132e:	9004      	str	r0, [sp, #16]
 8001330:	f47f ad86 	bne.w	8000e40 <ai_conv2d_stripe_f32+0xb0>
 8001334:	b018      	add	sp, #96	; 0x60
 8001336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800133a <func_dummy>:
 800133a:	4770      	bx	lr

0800133c <ai_dict8_dot_array_f32>:
 800133c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001340:	b081      	sub	sp, #4
 8001342:	4682      	mov	sl, r0
 8001344:	ed2d 8b02 	vpush	{d8}
 8001348:	4615      	mov	r5, r2
 800134a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800134c:	08e0      	lsrs	r0, r4, #3
 800134e:	460f      	mov	r7, r1
 8001350:	461a      	mov	r2, r3
 8001352:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8001498 <.text_5>
 8001356:	d052      	beq.n	80013fe <ai_dict8_dot_array_f32+0xc2>
 8001358:	4629      	mov	r1, r5
 800135a:	783b      	ldrb	r3, [r7, #0]
 800135c:	787d      	ldrb	r5, [r7, #1]
 800135e:	78be      	ldrb	r6, [r7, #2]
 8001360:	f897 b003 	ldrb.w	fp, [r7, #3]
 8001364:	ed92 8a00 	vldr	s16, [r2]
 8001368:	ed92 7a01 	vldr	s14, [r2, #4]
 800136c:	f817 cf04 	ldrb.w	ip, [r7, #4]!
 8001370:	ed92 6a02 	vldr	s12, [r2, #8]
 8001374:	ed92 5a03 	vldr	s10, [r2, #12]
 8001378:	f897 e001 	ldrb.w	lr, [r7, #1]
 800137c:	f897 8002 	ldrb.w	r8, [r7, #2]
 8001380:	f897 9003 	ldrb.w	r9, [r7, #3]
 8001384:	ed92 4a04 	vldr	s8, [r2, #16]
 8001388:	ed92 3a05 	vldr	s6, [r2, #20]
 800138c:	ed92 2a06 	vldr	s4, [r2, #24]
 8001390:	ed92 1a07 	vldr	s2, [r2, #28]
 8001394:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001398:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 800139c:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80013a0:	edd3 7a00 	vldr	s15, [r3]
 80013a4:	edd5 6a00 	vldr	s13, [r5]
 80013a8:	eb01 0b8b 	add.w	fp, r1, fp, lsl #2
 80013ac:	ee07 0a88 	vmla.f32	s0, s15, s16
 80013b0:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 80013b4:	edd6 5a00 	vldr	s11, [r6]
 80013b8:	eddb 4a00 	vldr	s9, [fp]
 80013bc:	eddc 3a00 	vldr	s7, [ip]
 80013c0:	ee06 0a87 	vmla.f32	s0, s13, s14
 80013c4:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
 80013c8:	ee05 0a86 	vmla.f32	s0, s11, s12
 80013cc:	eb01 0888 	add.w	r8, r1, r8, lsl #2
 80013d0:	ee04 0a85 	vmla.f32	s0, s9, s10
 80013d4:	eb01 0989 	add.w	r9, r1, r9, lsl #2
 80013d8:	edde 2a00 	vldr	s5, [lr]
 80013dc:	edd8 1a00 	vldr	s3, [r8]
 80013e0:	edd9 0a00 	vldr	s1, [r9]
 80013e4:	ee03 0a84 	vmla.f32	s0, s7, s8
 80013e8:	1d3f      	adds	r7, r7, #4
 80013ea:	ee02 0a83 	vmla.f32	s0, s5, s6
 80013ee:	3220      	adds	r2, #32
 80013f0:	ee01 0a82 	vmla.f32	s0, s3, s4
 80013f4:	1e40      	subs	r0, r0, #1
 80013f6:	ee00 0a81 	vmla.f32	s0, s1, s2
 80013fa:	d1ae      	bne.n	800135a <ai_dict8_dot_array_f32+0x1e>
 80013fc:	460d      	mov	r5, r1
 80013fe:	f014 0007 	ands.w	r0, r4, #7
 8001402:	d03e      	beq.n	8001482 <ai_dict8_dot_array_f32+0x146>
 8001404:	f010 0103 	ands.w	r1, r0, #3
 8001408:	f000 800d 	beq.w	8001426 <ai_dict8_dot_array_f32+0xea>
 800140c:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001410:	ed92 1a00 	vldr	s2, [r2]
 8001414:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 8001418:	1d12      	adds	r2, r2, #4
 800141a:	edd6 0a00 	vldr	s1, [r6]
 800141e:	1e49      	subs	r1, r1, #1
 8001420:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001424:	d1f2      	bne.n	800140c <ai_dict8_dot_array_f32+0xd0>
 8001426:	0880      	lsrs	r0, r0, #2
 8001428:	f000 802b 	beq.w	8001482 <ai_dict8_dot_array_f32+0x146>
 800142c:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001430:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001434:	ed92 1a00 	vldr	s2, [r2]
 8001438:	edd2 0a01 	vldr	s1, [r2, #4]
 800143c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001440:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8001444:	ed93 2a00 	vldr	s4, [r3]
 8001448:	edd1 1a00 	vldr	s3, [r1]
 800144c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001450:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001454:	ee02 0a01 	vmla.f32	s0, s4, s2
 8001458:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800145c:	ee01 0aa0 	vmla.f32	s0, s3, s1
 8001460:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001464:	edd2 0a02 	vldr	s1, [r2, #8]
 8001468:	ed91 2a00 	vldr	s4, [r1]
 800146c:	ed92 1a03 	vldr	s2, [r2, #12]
 8001470:	edd3 1a00 	vldr	s3, [r3]
 8001474:	3210      	adds	r2, #16
 8001476:	ee02 0a20 	vmla.f32	s0, s4, s1
 800147a:	1e40      	subs	r0, r0, #1
 800147c:	ee01 0a81 	vmla.f32	s0, s3, s2
 8001480:	d1d4      	bne.n	800142c <ai_dict8_dot_array_f32+0xf0>
 8001482:	edda 0a00 	vldr	s1, [sl]
 8001486:	ee30 0a80 	vadd.f32	s0, s1, s0
 800148a:	ed8a 0a00 	vstr	s0, [sl]
 800148e:	ecbd 8b02 	vpop	{d8}
 8001492:	b001      	add	sp, #4
 8001494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001498 <.text_5>:
 8001498:	00000000 	.word	0x00000000

0800149c <ai_dict4_dot_array_f32>:
 800149c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014a0:	ed2d 8b02 	vpush	{d8}
 80014a4:	4680      	mov	r8, r0
 80014a6:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80014aa:	ea4f 005c 	mov.w	r0, ip, lsr #1
 80014ae:	461e      	mov	r6, r3
 80014b0:	0040      	lsls	r0, r0, #1
 80014b2:	ea5f 03dc 	movs.w	r3, ip, lsr #3
 80014b6:	460c      	mov	r4, r1
 80014b8:	4615      	mov	r5, r2
 80014ba:	eb06 0e80 	add.w	lr, r6, r0, lsl #2
 80014be:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8001600 <.text_7>
 80014c2:	d053      	beq.n	800156c <ai_dict4_dot_array_f32+0xd0>
 80014c4:	ed96 8a00 	vldr	s16, [r6]
 80014c8:	ed96 7a01 	vldr	s14, [r6, #4]
 80014cc:	ed96 6a02 	vldr	s12, [r6, #8]
 80014d0:	ed96 5a03 	vldr	s10, [r6, #12]
 80014d4:	7820      	ldrb	r0, [r4, #0]
 80014d6:	7861      	ldrb	r1, [r4, #1]
 80014d8:	78a2      	ldrb	r2, [r4, #2]
 80014da:	78e7      	ldrb	r7, [r4, #3]
 80014dc:	ed96 4a04 	vldr	s8, [r6, #16]
 80014e0:	ed96 3a05 	vldr	s6, [r6, #20]
 80014e4:	ed96 2a06 	vldr	s4, [r6, #24]
 80014e8:	ed96 1a07 	vldr	s2, [r6, #28]
 80014ec:	f007 090f 	and.w	r9, r7, #15
 80014f0:	093f      	lsrs	r7, r7, #4
 80014f2:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 80014f6:	eb05 0a89 	add.w	sl, r5, r9, lsl #2
 80014fa:	edd7 1a00 	vldr	s3, [r7]
 80014fe:	edda 0a00 	vldr	s1, [sl]
 8001502:	f002 070f 	and.w	r7, r2, #15
 8001506:	0912      	lsrs	r2, r2, #4
 8001508:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800150c:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8001510:	edd2 3a00 	vldr	s7, [r2]
 8001514:	edd7 2a00 	vldr	s5, [r7]
 8001518:	f001 020f 	and.w	r2, r1, #15
 800151c:	0909      	lsrs	r1, r1, #4
 800151e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8001522:	eb05 0782 	add.w	r7, r5, r2, lsl #2
 8001526:	edd1 5a00 	vldr	s11, [r1]
 800152a:	edd7 4a00 	vldr	s9, [r7]
 800152e:	f000 010f 	and.w	r1, r0, #15
 8001532:	0900      	lsrs	r0, r0, #4
 8001534:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8001538:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800153c:	edd0 7a00 	vldr	s15, [r0]
 8001540:	edd2 6a00 	vldr	s13, [r2]
 8001544:	ee07 0a88 	vmla.f32	s0, s15, s16
 8001548:	ee06 0a87 	vmla.f32	s0, s13, s14
 800154c:	ee05 0a86 	vmla.f32	s0, s11, s12
 8001550:	ee04 0a85 	vmla.f32	s0, s9, s10
 8001554:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001558:	1d24      	adds	r4, r4, #4
 800155a:	ee02 0a83 	vmla.f32	s0, s5, s6
 800155e:	3620      	adds	r6, #32
 8001560:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001564:	1e5b      	subs	r3, r3, #1
 8001566:	ee00 0a81 	vmla.f32	s0, s1, s2
 800156a:	d1ab      	bne.n	80014c4 <ai_dict4_dot_array_f32+0x28>
 800156c:	4576      	cmp	r6, lr
 800156e:	d22f      	bcs.n	80015d0 <ai_dict4_dot_array_f32+0x134>
 8001570:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001574:	edd6 1a00 	vldr	s3, [r6]
 8001578:	edd6 0a01 	vldr	s1, [r6, #4]
 800157c:	f000 010f 	and.w	r1, r0, #15
 8001580:	0900      	lsrs	r0, r0, #4
 8001582:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8001586:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800158a:	ed90 2a00 	vldr	s4, [r0]
 800158e:	ed92 1a00 	vldr	s2, [r2]
 8001592:	3608      	adds	r6, #8
 8001594:	ee02 0a21 	vmla.f32	s0, s4, s3
 8001598:	4576      	cmp	r6, lr
 800159a:	ee01 0a20 	vmla.f32	s0, s2, s1
 800159e:	d217      	bcs.n	80015d0 <ai_dict4_dot_array_f32+0x134>
 80015a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80015a4:	ed96 1a00 	vldr	s2, [r6]
 80015a8:	ed96 2a01 	vldr	s4, [r6, #4]
 80015ac:	f000 010f 	and.w	r1, r0, #15
 80015b0:	0900      	lsrs	r0, r0, #4
 80015b2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80015b6:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 80015ba:	edd0 1a00 	vldr	s3, [r0]
 80015be:	edd2 0a00 	vldr	s1, [r2]
 80015c2:	3608      	adds	r6, #8
 80015c4:	ee01 0a81 	vmla.f32	s0, s3, s2
 80015c8:	4576      	cmp	r6, lr
 80015ca:	ee00 0a82 	vmla.f32	s0, s1, s4
 80015ce:	d3cf      	bcc.n	8001570 <ai_dict4_dot_array_f32+0xd4>
 80015d0:	ea5f 70cc 	movs.w	r0, ip, lsl #31
 80015d4:	d509      	bpl.n	80015ea <ai_dict4_dot_array_f32+0x14e>
 80015d6:	7821      	ldrb	r1, [r4, #0]
 80015d8:	ed96 1a00 	vldr	s2, [r6]
 80015dc:	0909      	lsrs	r1, r1, #4
 80015de:	eb05 0081 	add.w	r0, r5, r1, lsl #2
 80015e2:	edd0 0a00 	vldr	s1, [r0]
 80015e6:	ee00 0a81 	vmla.f32	s0, s1, s2
 80015ea:	edd8 1a00 	vldr	s3, [r8]
 80015ee:	ee31 0a80 	vadd.f32	s0, s3, s0
 80015f2:	ed88 0a00 	vstr	s0, [r8]
 80015f6:	ecbd 8b02 	vpop	{d8}
 80015fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08001600 <.text_7>:
 8001600:	00000000 	.word	0x00000000

08001604 <ai_dict_decompress_f32>:
 8001604:	b4f0      	push	{r4, r5, r6, r7}
 8001606:	4604      	mov	r4, r0
 8001608:	9805      	ldr	r0, [sp, #20]
 800160a:	9e04      	ldr	r6, [sp, #16]
 800160c:	2b04      	cmp	r3, #4
 800160e:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8001612:	d003      	beq.n	800161c <ai_dict_decompress_f32+0x18>
 8001614:	2b08      	cmp	r3, #8
 8001616:	d03e      	beq.n	8001696 <ai_dict_decompress_f32+0x92>
 8001618:	bcf0      	pop	{r4, r5, r6, r7}
 800161a:	4770      	bx	lr
 800161c:	42ac      	cmp	r4, r5
 800161e:	d259      	bcs.n	80016d4 <ai_dict_decompress_f32+0xd0>
 8001620:	0870      	lsrs	r0, r6, #1
 8001622:	d02e      	beq.n	8001682 <ai_dict_decompress_f32+0x7e>
 8001624:	07c3      	lsls	r3, r0, #31
 8001626:	d50c      	bpl.n	8001642 <ai_dict_decompress_f32+0x3e>
 8001628:	780f      	ldrb	r7, [r1, #0]
 800162a:	093f      	lsrs	r7, r7, #4
 800162c:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 8001630:	6023      	str	r3, [r4, #0]
 8001632:	f811 7b01 	ldrb.w	r7, [r1], #1
 8001636:	f007 070f 	and.w	r7, r7, #15
 800163a:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 800163e:	6063      	str	r3, [r4, #4]
 8001640:	3408      	adds	r4, #8
 8001642:	0840      	lsrs	r0, r0, #1
 8001644:	d01d      	beq.n	8001682 <ai_dict_decompress_f32+0x7e>
 8001646:	780b      	ldrb	r3, [r1, #0]
 8001648:	091b      	lsrs	r3, r3, #4
 800164a:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 800164e:	6027      	str	r7, [r4, #0]
 8001650:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001654:	f003 030f 	and.w	r3, r3, #15
 8001658:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 800165c:	6067      	str	r7, [r4, #4]
 800165e:	f104 0308 	add.w	r3, r4, #8
 8001662:	780c      	ldrb	r4, [r1, #0]
 8001664:	0924      	lsrs	r4, r4, #4
 8001666:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800166a:	601f      	str	r7, [r3, #0]
 800166c:	1e40      	subs	r0, r0, #1
 800166e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001672:	f004 040f 	and.w	r4, r4, #15
 8001676:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800167a:	605f      	str	r7, [r3, #4]
 800167c:	f103 0408 	add.w	r4, r3, #8
 8001680:	d1e1      	bne.n	8001646 <ai_dict_decompress_f32+0x42>
 8001682:	07f0      	lsls	r0, r6, #31
 8001684:	d5ca      	bpl.n	800161c <ai_dict_decompress_f32+0x18>
 8001686:	f811 3b01 	ldrb.w	r3, [r1], #1
 800168a:	091b      	lsrs	r3, r3, #4
 800168c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001690:	f844 0b04 	str.w	r0, [r4], #4
 8001694:	e7c2      	b.n	800161c <ai_dict_decompress_f32+0x18>
 8001696:	42ac      	cmp	r4, r5
 8001698:	d21c      	bcs.n	80016d4 <ai_dict_decompress_f32+0xd0>
 800169a:	7808      	ldrb	r0, [r1, #0]
 800169c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80016a0:	6020      	str	r0, [r4, #0]
 80016a2:	1d20      	adds	r0, r4, #4
 80016a4:	42a8      	cmp	r0, r5
 80016a6:	bf3f      	itttt	cc
 80016a8:	784c      	ldrbcc	r4, [r1, #1]
 80016aa:	f852 3024 	ldrcc.w	r3, [r2, r4, lsl #2]
 80016ae:	f840 3b04 	strcc.w	r3, [r0], #4
 80016b2:	42a8      	cmpcc	r0, r5
 80016b4:	d20e      	bcs.n	80016d4 <ai_dict_decompress_f32+0xd0>
 80016b6:	788b      	ldrb	r3, [r1, #2]
 80016b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016bc:	f840 3b04 	str.w	r3, [r0], #4
 80016c0:	42a8      	cmp	r0, r5
 80016c2:	d207      	bcs.n	80016d4 <ai_dict_decompress_f32+0xd0>
 80016c4:	78cc      	ldrb	r4, [r1, #3]
 80016c6:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 80016ca:	1d09      	adds	r1, r1, #4
 80016cc:	1d04      	adds	r4, r0, #4
 80016ce:	42ac      	cmp	r4, r5
 80016d0:	6003      	str	r3, [r0, #0]
 80016d2:	d3e2      	bcc.n	800169a <ai_dict_decompress_f32+0x96>
 80016d4:	bcf0      	pop	{r4, r5, r6, r7}
 80016d6:	4770      	bx	lr

080016d8 <forward_conv2d>:
 80016d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016dc:	4605      	mov	r5, r0
 80016de:	b0a9      	sub	sp, #164	; 0xa4
 80016e0:	696b      	ldr	r3, [r5, #20]
 80016e2:	8819      	ldrh	r1, [r3, #0]
 80016e4:	2900      	cmp	r1, #0
 80016e6:	bf1a      	itte	ne
 80016e8:	6858      	ldrne	r0, [r3, #4]
 80016ea:	1d00      	addne	r0, r0, #4
 80016ec:	2004      	moveq	r0, #4
 80016ee:	6800      	ldr	r0, [r0, #0]
 80016f0:	2800      	cmp	r0, #0
 80016f2:	bf14      	ite	ne
 80016f4:	6802      	ldrne	r2, [r0, #0]
 80016f6:	2200      	moveq	r2, #0
 80016f8:	2901      	cmp	r1, #1
 80016fa:	bfc6      	itte	gt
 80016fc:	6858      	ldrgt	r0, [r3, #4]
 80016fe:	3010      	addgt	r0, #16
 8001700:	2004      	movle	r0, #4
 8001702:	6800      	ldr	r0, [r0, #0]
 8001704:	2800      	cmp	r0, #0
 8001706:	bf14      	ite	ne
 8001708:	f8d0 a000 	ldrne.w	sl, [r0]
 800170c:	f04f 0a00 	moveq.w	sl, #0
 8001710:	2902      	cmp	r1, #2
 8001712:	bfc6      	itte	gt
 8001714:	6858      	ldrgt	r0, [r3, #4]
 8001716:	f100 041c 	addgt.w	r4, r0, #28
 800171a:	2404      	movle	r4, #4
 800171c:	6820      	ldr	r0, [r4, #0]
 800171e:	2800      	cmp	r0, #0
 8001720:	bf14      	ite	ne
 8001722:	6806      	ldrne	r6, [r0, #0]
 8001724:	2600      	moveq	r6, #0
 8001726:	2902      	cmp	r1, #2
 8001728:	dd0a      	ble.n	8001740 <forward_conv2d+0x68>
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f113 0118 	adds.w	r1, r3, #24
 8001730:	d006      	beq.n	8001740 <forward_conv2d+0x68>
 8001732:	8b19      	ldrh	r1, [r3, #24]
 8001734:	2901      	cmp	r1, #1
 8001736:	dd03      	ble.n	8001740 <forward_conv2d+0x68>
 8001738:	69d9      	ldr	r1, [r3, #28]
 800173a:	b109      	cbz	r1, 8001740 <forward_conv2d+0x68>
 800173c:	6849      	ldr	r1, [r1, #4]
 800173e:	e000      	b.n	8001742 <forward_conv2d+0x6a>
 8001740:	2100      	movs	r1, #0
 8001742:	b100      	cbz	r0, 8001746 <forward_conv2d+0x6e>
 8001744:	6880      	ldr	r0, [r0, #8]
 8001746:	68d7      	ldr	r7, [r2, #12]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	931b      	str	r3, [sp, #108]	; 0x6c
 800174c:	f8da 300c 	ldr.w	r3, [sl, #12]
 8001750:	685c      	ldr	r4, [r3, #4]
 8001752:	9404      	str	r4, [sp, #16]
 8001754:	68dc      	ldr	r4, [r3, #12]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	9314      	str	r3, [sp, #80]	; 0x50
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	931a      	str	r3, [sp, #104]	; 0x68
 800175e:	68bf      	ldr	r7, [r7, #8]
 8001760:	9720      	str	r7, [sp, #128]	; 0x80
 8001762:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001764:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8001768:	8d2f      	ldrh	r7, [r5, #40]	; 0x28
 800176a:	971f      	str	r7, [sp, #124]	; 0x7c
 800176c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800176e:	681f      	ldr	r7, [r3, #0]
 8001770:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8001774:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001776:	9319      	str	r3, [sp, #100]	; 0x64
 8001778:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800177a:	9318      	str	r3, [sp, #96]	; 0x60
 800177c:	68f3      	ldr	r3, [r6, #12]
 800177e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8001782:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	9312      	str	r3, [sp, #72]	; 0x48
 800178a:	69ab      	ldr	r3, [r5, #24]
 800178c:	931e      	str	r3, [sp, #120]	; 0x78
 800178e:	6992      	ldr	r2, [r2, #24]
 8001790:	6893      	ldr	r3, [r2, #8]
 8001792:	931d      	str	r3, [sp, #116]	; 0x74
 8001794:	69b2      	ldr	r2, [r6, #24]
 8001796:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800179a:	b119      	cbz	r1, 80017a4 <forward_conv2d+0xcc>
 800179c:	698a      	ldr	r2, [r1, #24]
 800179e:	6893      	ldr	r3, [r2, #8]
 80017a0:	9317      	str	r3, [sp, #92]	; 0x5c
 80017a2:	e001      	b.n	80017a8 <forward_conv2d+0xd0>
 80017a4:	2200      	movs	r2, #0
 80017a6:	9217      	str	r2, [sp, #92]	; 0x5c
 80017a8:	f8da 1018 	ldr.w	r1, [sl, #24]
 80017ac:	688a      	ldr	r2, [r1, #8]
 80017ae:	9203      	str	r2, [sp, #12]
 80017b0:	69e9      	ldr	r1, [r5, #28]
 80017b2:	b118      	cbz	r0, 80017bc <forward_conv2d+0xe4>
 80017b4:	6981      	ldr	r1, [r0, #24]
 80017b6:	688a      	ldr	r2, [r1, #8]
 80017b8:	9215      	str	r2, [sp, #84]	; 0x54
 80017ba:	e005      	b.n	80017c8 <forward_conv2d+0xf0>
 80017bc:	b111      	cbz	r1, 80017c4 <forward_conv2d+0xec>
 80017be:	688a      	ldr	r2, [r1, #8]
 80017c0:	9215      	str	r2, [sp, #84]	; 0x54
 80017c2:	e001      	b.n	80017c8 <forward_conv2d+0xf0>
 80017c4:	2300      	movs	r3, #0
 80017c6:	9315      	str	r3, [sp, #84]	; 0x54
 80017c8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80017ca:	9102      	str	r1, [sp, #8]
 80017cc:	b920      	cbnz	r0, 80017d8 <forward_conv2d+0x100>
 80017ce:	2100      	movs	r1, #0
 80017d0:	2201      	movs	r2, #1
 80017d2:	9124      	str	r1, [sp, #144]	; 0x90
 80017d4:	9223      	str	r2, [sp, #140]	; 0x8c
 80017d6:	e008      	b.n	80017ea <forward_conv2d+0x112>
 80017d8:	6941      	ldr	r1, [r0, #20]
 80017da:	688a      	ldr	r2, [r1, #8]
 80017dc:	9224      	str	r2, [sp, #144]	; 0x90
 80017de:	6980      	ldr	r0, [r0, #24]
 80017e0:	6841      	ldr	r1, [r0, #4]
 80017e2:	6800      	ldr	r0, [r0, #0]
 80017e4:	f004 fb3e 	bl	8005e64 <ai_array_get_byte_size>
 80017e8:	9023      	str	r0, [sp, #140]	; 0x8c
 80017ea:	aa18      	add	r2, sp, #96	; 0x60
 80017ec:	6a28      	ldr	r0, [r5, #32]
 80017ee:	2800      	cmp	r0, #0
 80017f0:	bf12      	itee	ne
 80017f2:	9022      	strne	r0, [sp, #136]	; 0x88
 80017f4:	f8df 1d28 	ldreq.w	r1, [pc, #3368]	; 8002520 <.text_15>
 80017f8:	9122      	streq	r1, [sp, #136]	; 0x88
 80017fa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80017fc:	8813      	ldrh	r3, [r2, #0]
 80017fe:	1e48      	subs	r0, r1, #1
 8001800:	1e5b      	subs	r3, r3, #1
 8001802:	aa19      	add	r2, sp, #100	; 0x64
 8001804:	fb03 1100 	mla	r1, r3, r0, r1
 8001808:	9116      	str	r1, [sp, #88]	; 0x58
 800180a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800180c:	8813      	ldrh	r3, [r2, #0]
 800180e:	1e41      	subs	r1, r0, #1
 8001810:	1e5b      	subs	r3, r3, #1
 8001812:	fb03 0001 	mla	r0, r3, r1, r0
 8001816:	901c      	str	r0, [sp, #112]	; 0x70
 8001818:	2200      	movs	r2, #0
 800181a:	69b6      	ldr	r6, [r6, #24]
 800181c:	6831      	ldr	r1, [r6, #0]
 800181e:	11cb      	asrs	r3, r1, #7
 8001820:	ea4f 5c61 	mov.w	ip, r1, asr #21
 8001824:	1449      	asrs	r1, r1, #17
 8001826:	f001 010f 	and.w	r1, r1, #15
 800182a:	2000      	movs	r0, #0
 800182c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001830:	f00c 0c03 	and.w	ip, ip, #3
 8001834:	2904      	cmp	r1, #4
 8001836:	4683      	mov	fp, r0
 8001838:	fa23 f30c 	lsr.w	r3, r3, ip
 800183c:	bf14      	ite	ne
 800183e:	2908      	cmpne	r1, #8
 8001840:	68f2      	ldreq	r2, [r6, #12]
 8001842:	b1da      	cbz	r2, 800187c <forward_conv2d+0x1a4>
 8001844:	6969      	ldr	r1, [r5, #20]
 8001846:	880d      	ldrh	r5, [r1, #0]
 8001848:	2d04      	cmp	r5, #4
 800184a:	bfa6      	itte	ge
 800184c:	6849      	ldrge	r1, [r1, #4]
 800184e:	3128      	addge	r1, #40	; 0x28
 8001850:	2104      	movlt	r1, #4
 8001852:	6809      	ldr	r1, [r1, #0]
 8001854:	2900      	cmp	r1, #0
 8001856:	bf1f      	itttt	ne
 8001858:	6808      	ldrne	r0, [r1, #0]
 800185a:	2800      	cmpne	r0, #0
 800185c:	6981      	ldrne	r1, [r0, #24]
 800185e:	f8d1 b008 	ldrne.w	fp, [r1, #8]
 8001862:	6980      	ldr	r0, [r0, #24]
 8001864:	6841      	ldr	r1, [r0, #4]
 8001866:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001868:	9101      	str	r1, [sp, #4]
 800186a:	9000      	str	r0, [sp, #0]
 800186c:	4658      	mov	r0, fp
 800186e:	68b1      	ldr	r1, [r6, #8]
 8001870:	f7ff fec8 	bl	8001604 <ai_dict_decompress_f32>
 8001874:	f1bb 0f00 	cmp.w	fp, #0
 8001878:	bf18      	it	ne
 800187a:	46d9      	movne	r9, fp
 800187c:	b2bf      	uxth	r7, r7
 800187e:	427f      	negs	r7, r7
 8001880:	2c00      	cmp	r4, #0
 8001882:	d073      	beq.n	800196c <forward_conv2d+0x294>
 8001884:	4622      	mov	r2, r4
 8001886:	f1c8 0800 	rsb	r8, r8, #0
 800188a:	9c04      	ldr	r4, [sp, #16]
 800188c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8001890:	9e02      	ldr	r6, [sp, #8]
 8001892:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
 8001896:	f8cd 909c 	str.w	r9, [sp, #156]	; 0x9c
 800189a:	9711      	str	r7, [sp, #68]	; 0x44
 800189c:	9221      	str	r2, [sp, #132]	; 0x84
 800189e:	9826      	ldr	r0, [sp, #152]	; 0x98
 80018a0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80018a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80018a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80018a6:	9025      	str	r0, [sp, #148]	; 0x94
 80018a8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80018aa:	4240      	negs	r0, r0
 80018ac:	bfd8      	it	le
 80018ae:	2000      	movle	r0, #0
 80018b0:	1a89      	subs	r1, r1, r2
 80018b2:	4299      	cmp	r1, r3
 80018b4:	bf3d      	ittte	cc
 80018b6:	9a1a      	ldrcc	r2, [sp, #104]	; 0x68
 80018b8:	9911      	ldrcc	r1, [sp, #68]	; 0x44
 80018ba:	1a51      	subcc	r1, r2, r1
 80018bc:	4619      	movcs	r1, r3
 80018be:	910a      	str	r1, [sp, #40]	; 0x28
 80018c0:	9009      	str	r0, [sp, #36]	; 0x24
 80018c2:	9402      	str	r4, [sp, #8]
 80018c4:	981e      	ldr	r0, [sp, #120]	; 0x78
 80018c6:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 80018ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80018cc:	9008      	str	r0, [sp, #32]
 80018ce:	9107      	str	r1, [sp, #28]
 80018d0:	b212      	sxth	r2, r2
 80018d2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80018d4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80018d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80018d8:	920f      	str	r2, [sp, #60]	; 0x3c
 80018da:	9006      	str	r0, [sp, #24]
 80018dc:	9105      	str	r1, [sp, #20]
 80018de:	b21b      	sxth	r3, r3
 80018e0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80018e2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80018e4:	9920      	ldr	r1, [sp, #128]	; 0x80
 80018e6:	930e      	str	r3, [sp, #56]	; 0x38
 80018e8:	920d      	str	r2, [sp, #52]	; 0x34
 80018ea:	9004      	str	r0, [sp, #16]
 80018ec:	9103      	str	r1, [sp, #12]
 80018ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80018f0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80018f2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80018f4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80018f6:	930c      	str	r3, [sp, #48]	; 0x30
 80018f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80018fa:	9001      	str	r0, [sp, #4]
 80018fc:	9100      	str	r1, [sp, #0]
 80018fe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8001900:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8001902:	4659      	mov	r1, fp
 8001904:	2000      	movs	r0, #0
 8001906:	f7ff fa43 	bl	8000d90 <ai_conv2d_stripe_f32>
 800190a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800190c:	b310      	cbz	r0, 8001954 <forward_conv2d+0x27c>
 800190e:	f8cd a000 	str.w	sl, [sp]
 8001912:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8001914:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8001916:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 800191a:	f8dd 9088 	ldr.w	r9, [sp, #136]	; 0x88
 800191e:	4682      	mov	sl, r0
 8001920:	9800      	ldr	r0, [sp, #0]
 8001922:	6981      	ldr	r1, [r0, #24]
 8001924:	f8c1 b008 	str.w	fp, [r1, #8]
 8001928:	462b      	mov	r3, r5
 800192a:	4622      	mov	r2, r4
 800192c:	4608      	mov	r0, r1
 800192e:	47c8      	blx	r9
 8001930:	443d      	add	r5, r7
 8001932:	1ba8      	subs	r0, r5, r6
 8001934:	4540      	cmp	r0, r8
 8001936:	bfa8      	it	ge
 8001938:	4635      	movge	r5, r6
 800193a:	f1ba 0a01 	subs.w	sl, sl, #1
 800193e:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 8001942:	d1ed      	bne.n	8001920 <forward_conv2d+0x248>
 8001944:	f8dd a000 	ldr.w	sl, [sp]
 8001948:	9515      	str	r5, [sp, #84]	; 0x54
 800194a:	9724      	str	r7, [sp, #144]	; 0x90
 800194c:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
 8001950:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 8001954:	f8da 0018 	ldr.w	r0, [sl, #24]
 8001958:	68c1      	ldr	r1, [r0, #12]
 800195a:	6081      	str	r1, [r0, #8]
 800195c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800195e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8001960:	1808      	adds	r0, r1, r0
 8001962:	9011      	str	r0, [sp, #68]	; 0x44
 8001964:	9821      	ldr	r0, [sp, #132]	; 0x84
 8001966:	1e40      	subs	r0, r0, #1
 8001968:	9021      	str	r0, [sp, #132]	; 0x84
 800196a:	d198      	bne.n	800189e <forward_conv2d+0x1c6>
 800196c:	b029      	add	sp, #164	; 0xa4
 800196e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001974 <forward_conv2d_nl_pool>:
 8001974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001978:	4604      	mov	r4, r0
 800197a:	b0b9      	sub	sp, #228	; 0xe4
 800197c:	6963      	ldr	r3, [r4, #20]
 800197e:	8819      	ldrh	r1, [r3, #0]
 8001980:	2900      	cmp	r1, #0
 8001982:	bf1a      	itte	ne
 8001984:	6858      	ldrne	r0, [r3, #4]
 8001986:	1d00      	addne	r0, r0, #4
 8001988:	2004      	moveq	r0, #4
 800198a:	6800      	ldr	r0, [r0, #0]
 800198c:	2800      	cmp	r0, #0
 800198e:	bf14      	ite	ne
 8001990:	6802      	ldrne	r2, [r0, #0]
 8001992:	2200      	moveq	r2, #0
 8001994:	2901      	cmp	r1, #1
 8001996:	bfc6      	itte	gt
 8001998:	6858      	ldrgt	r0, [r3, #4]
 800199a:	3010      	addgt	r0, #16
 800199c:	2004      	movle	r0, #4
 800199e:	6800      	ldr	r0, [r0, #0]
 80019a0:	2800      	cmp	r0, #0
 80019a2:	bf14      	ite	ne
 80019a4:	f8d0 9000 	ldrne.w	r9, [r0]
 80019a8:	f04f 0900 	moveq.w	r9, #0
 80019ac:	2902      	cmp	r1, #2
 80019ae:	bfc6      	itte	gt
 80019b0:	6858      	ldrgt	r0, [r3, #4]
 80019b2:	f100 071c 	addgt.w	r7, r0, #28
 80019b6:	2704      	movle	r7, #4
 80019b8:	6838      	ldr	r0, [r7, #0]
 80019ba:	2800      	cmp	r0, #0
 80019bc:	bf14      	ite	ne
 80019be:	6806      	ldrne	r6, [r0, #0]
 80019c0:	2600      	moveq	r6, #0
 80019c2:	2902      	cmp	r1, #2
 80019c4:	dd0a      	ble.n	80019dc <forward_conv2d_nl_pool+0x68>
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f113 0118 	adds.w	r1, r3, #24
 80019cc:	d006      	beq.n	80019dc <forward_conv2d_nl_pool+0x68>
 80019ce:	8b19      	ldrh	r1, [r3, #24]
 80019d0:	2901      	cmp	r1, #1
 80019d2:	dd03      	ble.n	80019dc <forward_conv2d_nl_pool+0x68>
 80019d4:	69d9      	ldr	r1, [r3, #28]
 80019d6:	b109      	cbz	r1, 80019dc <forward_conv2d_nl_pool+0x68>
 80019d8:	6849      	ldr	r1, [r1, #4]
 80019da:	e000      	b.n	80019de <forward_conv2d_nl_pool+0x6a>
 80019dc:	2100      	movs	r1, #0
 80019de:	b100      	cbz	r0, 80019e2 <forward_conv2d_nl_pool+0x6e>
 80019e0:	6880      	ldr	r0, [r0, #8]
 80019e2:	68d7      	ldr	r7, [r2, #12]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	9323      	str	r3, [sp, #140]	; 0x8c
 80019e8:	f8d9 500c 	ldr.w	r5, [r9, #12]
 80019ec:	686b      	ldr	r3, [r5, #4]
 80019ee:	9310      	str	r3, [sp, #64]	; 0x40
 80019f0:	68eb      	ldr	r3, [r5, #12]
 80019f2:	9322      	str	r3, [sp, #136]	; 0x88
 80019f4:	68ab      	ldr	r3, [r5, #8]
 80019f6:	9321      	str	r3, [sp, #132]	; 0x84
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	931b      	str	r3, [sp, #108]	; 0x6c
 80019fc:	68bf      	ldr	r7, [r7, #8]
 80019fe:	972d      	str	r7, [sp, #180]	; 0xb4
 8001a00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a02:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8001a06:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 8001a08:	9720      	str	r7, [sp, #128]	; 0x80
 8001a0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a0c:	881f      	ldrh	r7, [r3, #0]
 8001a0e:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8001a12:	689d      	ldr	r5, [r3, #8]
 8001a14:	69a3      	ldr	r3, [r4, #24]
 8001a16:	932c      	str	r3, [sp, #176]	; 0xb0
 8001a18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a1a:	931f      	str	r3, [sp, #124]	; 0x7c
 8001a1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a1e:	931e      	str	r3, [sp, #120]	; 0x78
 8001a20:	68f3      	ldr	r3, [r6, #12]
 8001a22:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8001a26:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	9319      	str	r3, [sp, #100]	; 0x64
 8001a2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a30:	932b      	str	r3, [sp, #172]	; 0xac
 8001a32:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a34:	932a      	str	r3, [sp, #168]	; 0xa8
 8001a36:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001a38:	9311      	str	r3, [sp, #68]	; 0x44
 8001a3a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001a3c:	f8d3 a000 	ldr.w	sl, [r3]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a44:	6992      	ldr	r2, [r2, #24]
 8001a46:	6893      	ldr	r3, [r2, #8]
 8001a48:	9328      	str	r3, [sp, #160]	; 0xa0
 8001a4a:	69b2      	ldr	r2, [r6, #24]
 8001a4c:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8001a50:	b119      	cbz	r1, 8001a5a <forward_conv2d_nl_pool+0xe6>
 8001a52:	698a      	ldr	r2, [r1, #24]
 8001a54:	6893      	ldr	r3, [r2, #8]
 8001a56:	931d      	str	r3, [sp, #116]	; 0x74
 8001a58:	e001      	b.n	8001a5e <forward_conv2d_nl_pool+0xea>
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	921d      	str	r2, [sp, #116]	; 0x74
 8001a5e:	69e1      	ldr	r1, [r4, #28]
 8001a60:	b118      	cbz	r0, 8001a6a <forward_conv2d_nl_pool+0xf6>
 8001a62:	6981      	ldr	r1, [r0, #24]
 8001a64:	688a      	ldr	r2, [r1, #8]
 8001a66:	921c      	str	r2, [sp, #112]	; 0x70
 8001a68:	e005      	b.n	8001a76 <forward_conv2d_nl_pool+0x102>
 8001a6a:	b111      	cbz	r1, 8001a72 <forward_conv2d_nl_pool+0xfe>
 8001a6c:	688a      	ldr	r2, [r1, #8]
 8001a6e:	921c      	str	r2, [sp, #112]	; 0x70
 8001a70:	e001      	b.n	8001a76 <forward_conv2d_nl_pool+0x102>
 8001a72:	2300      	movs	r3, #0
 8001a74:	931c      	str	r3, [sp, #112]	; 0x70
 8001a76:	991c      	ldr	r1, [sp, #112]	; 0x70
 8001a78:	9102      	str	r1, [sp, #8]
 8001a7a:	b920      	cbnz	r0, 8001a86 <forward_conv2d_nl_pool+0x112>
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	2201      	movs	r2, #1
 8001a80:	9116      	str	r1, [sp, #88]	; 0x58
 8001a82:	9215      	str	r2, [sp, #84]	; 0x54
 8001a84:	e008      	b.n	8001a98 <forward_conv2d_nl_pool+0x124>
 8001a86:	6941      	ldr	r1, [r0, #20]
 8001a88:	688a      	ldr	r2, [r1, #8]
 8001a8a:	9216      	str	r2, [sp, #88]	; 0x58
 8001a8c:	6980      	ldr	r0, [r0, #24]
 8001a8e:	6841      	ldr	r1, [r0, #4]
 8001a90:	6800      	ldr	r0, [r0, #0]
 8001a92:	f004 f9e7 	bl	8005e64 <ai_array_get_byte_size>
 8001a96:	9015      	str	r0, [sp, #84]	; 0x54
 8001a98:	aa1e      	add	r2, sp, #120	; 0x78
 8001a9a:	6a20      	ldr	r0, [r4, #32]
 8001a9c:	2800      	cmp	r0, #0
 8001a9e:	bf12      	itee	ne
 8001aa0:	9030      	strne	r0, [sp, #192]	; 0xc0
 8001aa2:	f8df 1a7c 	ldreq.w	r1, [pc, #2684]	; 8002520 <.text_15>
 8001aa6:	9130      	streq	r1, [sp, #192]	; 0xc0
 8001aa8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001aaa:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001aac:	8813      	ldrh	r3, [r2, #0]
 8001aae:	9127      	str	r1, [sp, #156]	; 0x9c
 8001ab0:	1e5b      	subs	r3, r3, #1
 8001ab2:	1e41      	subs	r1, r0, #1
 8001ab4:	aa1f      	add	r2, sp, #124	; 0x7c
 8001ab6:	fb03 0001 	mla	r0, r3, r1, r0
 8001aba:	9018      	str	r0, [sp, #96]	; 0x60
 8001abc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001abe:	8813      	ldrh	r3, [r2, #0]
 8001ac0:	1e48      	subs	r0, r1, #1
 8001ac2:	1e5b      	subs	r3, r3, #1
 8001ac4:	fb03 1100 	mla	r1, r3, r0, r1
 8001ac8:	9126      	str	r1, [sp, #152]	; 0x98
 8001aca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001acc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001ace:	9818      	ldr	r0, [sp, #96]	; 0x60
 8001ad0:	9112      	str	r1, [sp, #72]	; 0x48
 8001ad2:	1a12      	subs	r2, r2, r0
 8001ad4:	18ba      	adds	r2, r7, r2
 8001ad6:	9920      	ldr	r1, [sp, #128]	; 0x80
 8001ad8:	fa12 f085 	uxtah	r0, r2, r5
 8001adc:	fbb0 f1f1 	udiv	r1, r0, r1
 8001ae0:	1c49      	adds	r1, r1, #1
 8001ae2:	9114      	str	r1, [sp, #80]	; 0x50
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	69b6      	ldr	r6, [r6, #24]
 8001ae8:	6831      	ldr	r1, [r6, #0]
 8001aea:	2500      	movs	r5, #0
 8001aec:	2200      	movs	r2, #0
 8001aee:	11cb      	asrs	r3, r1, #7
 8001af0:	ea4f 5c61 	mov.w	ip, r1, asr #21
 8001af4:	1449      	asrs	r1, r1, #17
 8001af6:	f001 010f 	and.w	r1, r1, #15
 8001afa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001afe:	f00c 0c03 	and.w	ip, ip, #3
 8001b02:	2904      	cmp	r1, #4
 8001b04:	fa23 f30c 	lsr.w	r3, r3, ip
 8001b08:	bf14      	ite	ne
 8001b0a:	2908      	cmpne	r1, #8
 8001b0c:	68f2      	ldreq	r2, [r6, #12]
 8001b0e:	b1da      	cbz	r2, 8001b48 <forward_conv2d_nl_pool+0x1d4>
 8001b10:	6961      	ldr	r1, [r4, #20]
 8001b12:	f8b1 c000 	ldrh.w	ip, [r1]
 8001b16:	f1bc 0f04 	cmp.w	ip, #4
 8001b1a:	bfa6      	itte	ge
 8001b1c:	6849      	ldrge	r1, [r1, #4]
 8001b1e:	3128      	addge	r1, #40	; 0x28
 8001b20:	2104      	movlt	r1, #4
 8001b22:	6809      	ldr	r1, [r1, #0]
 8001b24:	2900      	cmp	r1, #0
 8001b26:	bf1f      	itttt	ne
 8001b28:	6848      	ldrne	r0, [r1, #4]
 8001b2a:	2800      	cmpne	r0, #0
 8001b2c:	6981      	ldrne	r1, [r0, #24]
 8001b2e:	688d      	ldrne	r5, [r1, #8]
 8001b30:	6980      	ldr	r0, [r0, #24]
 8001b32:	6841      	ldr	r1, [r0, #4]
 8001b34:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8001b36:	9101      	str	r1, [sp, #4]
 8001b38:	9000      	str	r0, [sp, #0]
 8001b3a:	4628      	mov	r0, r5
 8001b3c:	68b1      	ldr	r1, [r6, #8]
 8001b3e:	f7ff fd61 	bl	8001604 <ai_dict_decompress_f32>
 8001b42:	b10d      	cbz	r5, 8001b48 <forward_conv2d_nl_pool+0x1d4>
 8001b44:	4628      	mov	r0, r5
 8001b46:	e000      	b.n	8001b4a <forward_conv2d_nl_pool+0x1d6>
 8001b48:	4658      	mov	r0, fp
 8001b4a:	6963      	ldr	r3, [r4, #20]
 8001b4c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8001b50:	881c      	ldrh	r4, [r3, #0]
 8001b52:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8001b56:	2600      	movs	r6, #0
 8001b58:	2c04      	cmp	r4, #4
 8001b5a:	bfa6      	itte	ge
 8001b5c:	685b      	ldrge	r3, [r3, #4]
 8001b5e:	3328      	addge	r3, #40	; 0x28
 8001b60:	2304      	movlt	r3, #4
 8001b62:	f10d 0e44 	add.w	lr, sp, #68	; 0x44
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	bf14      	ite	ne
 8001b6c:	681d      	ldrne	r5, [r3, #0]
 8001b6e:	2500      	moveq	r5, #0
 8001b70:	427f      	negs	r7, r7
 8001b72:	69ac      	ldr	r4, [r5, #24]
 8001b74:	68eb      	ldr	r3, [r5, #12]
 8001b76:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8001b7e:	435c      	muls	r4, r3
 8001b80:	fb0c f404 	mul.w	r4, ip, r4
 8001b84:	9437      	str	r4, [sp, #220]	; 0xdc
 8001b86:	fa0f f28a 	sxth.w	r2, sl
 8001b8a:	f9be 4000 	ldrsh.w	r4, [lr]
 8001b8e:	f8dd c084 	ldr.w	ip, [sp, #132]	; 0x84
 8001b92:	9436      	str	r4, [sp, #216]	; 0xd8
 8001b94:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
 8001b98:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001b9a:	fb0c f404 	mul.w	r4, ip, r4
 8001b9e:	9435      	str	r4, [sp, #212]	; 0xd4
 8001ba0:	f1c8 0800 	rsb	r8, r8, #0
 8001ba4:	f9be 4000 	ldrsh.w	r4, [lr]
 8001ba8:	9434      	str	r4, [sp, #208]	; 0xd0
 8001baa:	4691      	mov	r9, r2
 8001bac:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001bae:	f8cd 80c8 	str.w	r8, [sp, #200]	; 0xc8
 8001bb2:	435c      	muls	r4, r3
 8001bb4:	9433      	str	r4, [sp, #204]	; 0xcc
 8001bb6:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8001bb8:	2c00      	cmp	r4, #0
 8001bba:	f000 812e 	beq.w	8001e1a <forward_conv2d_nl_pool+0x4a6>
 8001bbe:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001bc2:	9038      	str	r0, [sp, #224]	; 0xe0
 8001bc4:	9125      	str	r1, [sp, #148]	; 0x94
 8001bc6:	4614      	mov	r4, r2
 8001bc8:	962f      	str	r6, [sp, #188]	; 0xbc
 8001bca:	962e      	str	r6, [sp, #184]	; 0xb8
 8001bcc:	9324      	str	r3, [sp, #144]	; 0x90
 8001bce:	9717      	str	r7, [sp, #92]	; 0x5c
 8001bd0:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001bd2:	2800      	cmp	r0, #0
 8001bd4:	dd6a      	ble.n	8001cac <forward_conv2d_nl_pool+0x338>
 8001bd6:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8001bd8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8001bda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8001bdc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8001bde:	9031      	str	r0, [sp, #196]	; 0xc4
 8001be0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001be2:	4240      	negs	r0, r0
 8001be4:	bfd8      	it	le
 8001be6:	2000      	movle	r0, #0
 8001be8:	1a89      	subs	r1, r1, r2
 8001bea:	4299      	cmp	r1, r3
 8001bec:	bf3d      	ittte	cc
 8001bee:	9a1b      	ldrcc	r2, [sp, #108]	; 0x6c
 8001bf0:	9917      	ldrcc	r1, [sp, #92]	; 0x5c
 8001bf2:	1a51      	subcc	r1, r2, r1
 8001bf4:	4619      	movcs	r1, r3
 8001bf6:	9009      	str	r0, [sp, #36]	; 0x24
 8001bf8:	910a      	str	r1, [sp, #40]	; 0x28
 8001bfa:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8001bfc:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8001c00:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8001c02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001c04:	9008      	str	r0, [sp, #32]
 8001c06:	9107      	str	r1, [sp, #28]
 8001c08:	b212      	sxth	r2, r2
 8001c0a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001c0c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001c0e:	9006      	str	r0, [sp, #24]
 8001c10:	920f      	str	r2, [sp, #60]	; 0x3c
 8001c12:	9105      	str	r1, [sp, #20]
 8001c14:	b21b      	sxth	r3, r3
 8001c16:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001c18:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8001c1a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8001c1c:	9004      	str	r0, [sp, #16]
 8001c1e:	930e      	str	r3, [sp, #56]	; 0x38
 8001c20:	920d      	str	r2, [sp, #52]	; 0x34
 8001c22:	9103      	str	r1, [sp, #12]
 8001c24:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001c26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001c28:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8001c2a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8001c2c:	9002      	str	r0, [sp, #8]
 8001c2e:	930c      	str	r3, [sp, #48]	; 0x30
 8001c30:	920b      	str	r2, [sp, #44]	; 0x2c
 8001c32:	9101      	str	r1, [sp, #4]
 8001c34:	4659      	mov	r1, fp
 8001c36:	981d      	ldr	r0, [sp, #116]	; 0x74
 8001c38:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8001c3a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8001c3c:	9000      	str	r0, [sp, #0]
 8001c3e:	2000      	movs	r0, #0
 8001c40:	f7ff f8a6 	bl	8000d90 <ai_conv2d_stripe_f32>
 8001c44:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001c46:	b350      	cbz	r0, 8001c9e <forward_conv2d_nl_pool+0x32a>
 8001c48:	f8cd a008 	str.w	sl, [sp, #8]
 8001c4c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8001c4e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8001c50:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
 8001c54:	4682      	mov	sl, r0
 8001c56:	69a9      	ldr	r1, [r5, #24]
 8001c58:	463b      	mov	r3, r7
 8001c5a:	f8c1 b008 	str.w	fp, [r1, #8]
 8001c5e:	4632      	mov	r2, r6
 8001c60:	4608      	mov	r0, r1
 8001c62:	47c0      	blx	r8
 8001c64:	9816      	ldr	r0, [sp, #88]	; 0x58
 8001c66:	9902      	ldr	r1, [sp, #8]
 8001c68:	4407      	add	r7, r0
 8001c6a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001c6c:	1a79      	subs	r1, r7, r1
 8001c6e:	4281      	cmp	r1, r0
 8001c70:	69a8      	ldr	r0, [r5, #24]
 8001c72:	6841      	ldr	r1, [r0, #4]
 8001c74:	68c0      	ldr	r0, [r0, #12]
 8001c76:	bfa8      	it	ge
 8001c78:	9f02      	ldrge	r7, [sp, #8]
 8001c7a:	eb0b 0b86 	add.w	fp, fp, r6, lsl #2
 8001c7e:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8001c82:	4593      	cmp	fp, r2
 8001c84:	d302      	bcc.n	8001c8c <forward_conv2d_nl_pool+0x318>
 8001c86:	0089      	lsls	r1, r1, #2
 8001c88:	4249      	negs	r1, r1
 8001c8a:	448b      	add	fp, r1
 8001c8c:	f1ba 0a01 	subs.w	sl, sl, #1
 8001c90:	d1e1      	bne.n	8001c56 <forward_conv2d_nl_pool+0x2e2>
 8001c92:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001c96:	9610      	str	r6, [sp, #64]	; 0x40
 8001c98:	971c      	str	r7, [sp, #112]	; 0x70
 8001c9a:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
 8001c9e:	69a8      	ldr	r0, [r5, #24]
 8001ca0:	68c1      	ldr	r1, [r0, #12]
 8001ca2:	6081      	str	r1, [r0, #8]
 8001ca4:	f109 0001 	add.w	r0, r9, #1
 8001ca8:	fa0f f980 	sxth.w	r9, r0
 8001cac:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001cae:	1e40      	subs	r0, r0, #1
 8001cb0:	9014      	str	r0, [sp, #80]	; 0x50
 8001cb2:	d56b      	bpl.n	8001d8c <forward_conv2d_nl_pool+0x418>
 8001cb4:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8001cb6:	fb00 f009 	mul.w	r0, r0, r9
 8001cba:	0080      	lsls	r0, r0, #2
 8001cbc:	4240      	negs	r0, r0
 8001cbe:	eb0b 0200 	add.w	r2, fp, r0
 8001cc2:	69a8      	ldr	r0, [r5, #24]
 8001cc4:	68c3      	ldr	r3, [r0, #12]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	bf3c      	itt	cc
 8001cca:	6847      	ldrcc	r7, [r0, #4]
 8001ccc:	eb02 0287 	addcc.w	r2, r2, r7, lsl #2
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	4659      	mov	r1, fp
 8001cd4:	d236      	bcs.n	8001d44 <forward_conv2d_nl_pool+0x3d0>
 8001cd6:	9e34      	ldr	r6, [sp, #208]	; 0xd0
 8001cd8:	45b1      	cmp	r9, r6
 8001cda:	d033      	beq.n	8001d44 <forward_conv2d_nl_pool+0x3d0>
 8001cdc:	6846      	ldr	r6, [r0, #4]
 8001cde:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	f080 802e 	bcs.w	8001d44 <forward_conv2d_nl_pool+0x3d0>
 8001ce8:	ed92 0a00 	vldr	s0, [r2]
 8001cec:	ed8b 0a00 	vstr	s0, [fp]
 8001cf0:	68c3      	ldr	r3, [r0, #12]
 8001cf2:	6846      	ldr	r6, [r0, #4]
 8001cf4:	1d12      	adds	r2, r2, #4
 8001cf6:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001cfa:	42ba      	cmp	r2, r7
 8001cfc:	d222      	bcs.n	8001d44 <forward_conv2d_nl_pool+0x3d0>
 8001cfe:	edd2 0a00 	vldr	s1, [r2]
 8001d02:	edcb 0a01 	vstr	s1, [fp, #4]
 8001d06:	68c3      	ldr	r3, [r0, #12]
 8001d08:	6846      	ldr	r6, [r0, #4]
 8001d0a:	1d12      	adds	r2, r2, #4
 8001d0c:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d10:	42ba      	cmp	r2, r7
 8001d12:	d217      	bcs.n	8001d44 <forward_conv2d_nl_pool+0x3d0>
 8001d14:	ed92 0a00 	vldr	s0, [r2]
 8001d18:	ed8b 0a02 	vstr	s0, [fp, #8]
 8001d1c:	68c3      	ldr	r3, [r0, #12]
 8001d1e:	6846      	ldr	r6, [r0, #4]
 8001d20:	1d12      	adds	r2, r2, #4
 8001d22:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d26:	42ba      	cmp	r2, r7
 8001d28:	d20c      	bcs.n	8001d44 <forward_conv2d_nl_pool+0x3d0>
 8001d2a:	edd2 0a00 	vldr	s1, [r2]
 8001d2e:	edcb 0a03 	vstr	s1, [fp, #12]
 8001d32:	68c3      	ldr	r3, [r0, #12]
 8001d34:	6846      	ldr	r6, [r0, #4]
 8001d36:	1d12      	adds	r2, r2, #4
 8001d38:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d3c:	42ba      	cmp	r2, r7
 8001d3e:	f10b 0b10 	add.w	fp, fp, #16
 8001d42:	d3d1      	bcc.n	8001ce8 <forward_conv2d_nl_pool+0x374>
 8001d44:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8001d46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001d48:	189a      	adds	r2, r3, r2
 8001d4a:	eba2 0209 	sub.w	r2, r2, r9
 8001d4e:	922f      	str	r2, [sp, #188]	; 0xbc
 8001d50:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001d52:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8001d54:	444a      	add	r2, r9
 8001d56:	fa0f f982 	sxth.w	r9, r2
 8001d5a:	eb01 0b83 	add.w	fp, r1, r3, lsl #2
 8001d5e:	68c1      	ldr	r1, [r0, #12]
 8001d60:	6842      	ldr	r2, [r0, #4]
 8001d62:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8001d66:	459b      	cmp	fp, r3
 8001d68:	460b      	mov	r3, r1
 8001d6a:	d30f      	bcc.n	8001d8c <forward_conv2d_nl_pool+0x418>
 8001d6c:	6841      	ldr	r1, [r0, #4]
 8001d6e:	008a      	lsls	r2, r1, #2
 8001d70:	4252      	negs	r2, r2
 8001d72:	4493      	add	fp, r2
 8001d74:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001d78:	458b      	cmp	fp, r1
 8001d7a:	bf24      	itt	cs
 8001d7c:	4493      	addcs	fp, r2
 8001d7e:	458b      	cmpcs	fp, r1
 8001d80:	bf21      	itttt	cs
 8001d82:	4493      	addcs	fp, r2
 8001d84:	458b      	cmpcs	fp, r1
 8001d86:	4493      	addcs	fp, r2
 8001d88:	458b      	cmpcs	fp, r1
 8001d8a:	d2ef      	bcs.n	8001d6c <forward_conv2d_nl_pool+0x3f8>
 8001d8c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001d8e:	4581      	cmp	r9, r0
 8001d90:	d339      	bcc.n	8001e06 <forward_conv2d_nl_pool+0x492>
 8001d92:	9911      	ldr	r1, [sp, #68]	; 0x44
 8001d94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8001d96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001d98:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8001d9a:	eba9 0001 	sub.w	r0, r9, r1
 8001d9e:	fa0f f980 	sxth.w	r9, r0
 8001da2:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8001da4:	1c40      	adds	r0, r0, #1
 8001da6:	902e      	str	r0, [sp, #184]	; 0xb8
 8001da8:	2101      	movs	r1, #1
 8001daa:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001dac:	9008      	str	r0, [sp, #32]
 8001dae:	9107      	str	r1, [sp, #28]
 8001db0:	b292      	uxth	r2, r2
 8001db2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001db4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8001db6:	9206      	str	r2, [sp, #24]
 8001db8:	b280      	uxth	r0, r0
 8001dba:	9005      	str	r0, [sp, #20]
 8001dbc:	b289      	uxth	r1, r1
 8001dbe:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8001dc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001dc2:	9104      	str	r1, [sp, #16]
 8001dc4:	b280      	uxth	r0, r0
 8001dc6:	b2a1      	uxth	r1, r4
 8001dc8:	9002      	str	r0, [sp, #8]
 8001dca:	9103      	str	r1, [sp, #12]
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	982b      	ldr	r0, [sp, #172]	; 0xac
 8001dd0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001dd2:	b280      	uxth	r0, r0
 8001dd4:	b289      	uxth	r1, r1
 8001dd6:	9000      	str	r0, [sp, #0]
 8001dd8:	9101      	str	r1, [sp, #4]
 8001dda:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8001ddc:	9924      	ldr	r1, [sp, #144]	; 0x90
 8001dde:	1a12      	subs	r2, r2, r0
 8001de0:	69a8      	ldr	r0, [r5, #24]
 8001de2:	b292      	uxth	r2, r2
 8001de4:	b289      	uxth	r1, r1
 8001de6:	47b0      	blx	r6
 8001de8:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001dea:	6881      	ldr	r1, [r0, #8]
 8001dec:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8001dee:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8001df2:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001df4:	608a      	str	r2, [r1, #8]
 8001df6:	9836      	ldr	r0, [sp, #216]	; 0xd8
 8001df8:	1a20      	subs	r0, r4, r0
 8001dfa:	2800      	cmp	r0, #0
 8001dfc:	bfc3      	ittte	gt
 8001dfe:	9811      	ldrgt	r0, [sp, #68]	; 0x44
 8001e00:	1a24      	subgt	r4, r4, r0
 8001e02:	b224      	sxthgt	r4, r4
 8001e04:	2400      	movle	r4, #0
 8001e06:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001e08:	9920      	ldr	r1, [sp, #128]	; 0x80
 8001e0a:	1808      	adds	r0, r1, r0
 8001e0c:	9017      	str	r0, [sp, #92]	; 0x5c
 8001e0e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8001e10:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8001e12:	4288      	cmp	r0, r1
 8001e14:	f4ff aedc 	bcc.w	8001bd0 <forward_conv2d_nl_pool+0x25c>
 8001e18:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001e1a:	69a8      	ldr	r0, [r5, #24]
 8001e1c:	68c2      	ldr	r2, [r0, #12]
 8001e1e:	6082      	str	r2, [r0, #8]
 8001e20:	68c8      	ldr	r0, [r1, #12]
 8001e22:	6088      	str	r0, [r1, #8]
 8001e24:	b039      	add	sp, #228	; 0xe4
 8001e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001e2c <forward_dense>:
 8001e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e30:	b081      	sub	sp, #4
 8001e32:	ed2d 8b02 	vpush	{d8}
 8001e36:	b088      	sub	sp, #32
 8001e38:	6944      	ldr	r4, [r0, #20]
 8001e3a:	8820      	ldrh	r0, [r4, #0]
 8001e3c:	2800      	cmp	r0, #0
 8001e3e:	bf1a      	itte	ne
 8001e40:	6861      	ldrne	r1, [r4, #4]
 8001e42:	1d09      	addne	r1, r1, #4
 8001e44:	2104      	moveq	r1, #4
 8001e46:	6809      	ldr	r1, [r1, #0]
 8001e48:	2900      	cmp	r1, #0
 8001e4a:	bf14      	ite	ne
 8001e4c:	680a      	ldrne	r2, [r1, #0]
 8001e4e:	2200      	moveq	r2, #0
 8001e50:	2802      	cmp	r0, #2
 8001e52:	bfa6      	itte	ge
 8001e54:	6861      	ldrge	r1, [r4, #4]
 8001e56:	3110      	addge	r1, #16
 8001e58:	2104      	movlt	r1, #4
 8001e5a:	6809      	ldr	r1, [r1, #0]
 8001e5c:	2900      	cmp	r1, #0
 8001e5e:	bf14      	ite	ne
 8001e60:	680f      	ldrne	r7, [r1, #0]
 8001e62:	2700      	moveq	r7, #0
 8001e64:	2802      	cmp	r0, #2
 8001e66:	bfc6      	itte	gt
 8001e68:	6861      	ldrgt	r1, [r4, #4]
 8001e6a:	311c      	addgt	r1, #28
 8001e6c:	2104      	movle	r1, #4
 8001e6e:	6809      	ldr	r1, [r1, #0]
 8001e70:	2900      	cmp	r1, #0
 8001e72:	bf14      	ite	ne
 8001e74:	680b      	ldrne	r3, [r1, #0]
 8001e76:	2300      	moveq	r3, #0
 8001e78:	2802      	cmp	r0, #2
 8001e7a:	dd0b      	ble.n	8001e94 <forward_dense+0x68>
 8001e7c:	6861      	ldr	r1, [r4, #4]
 8001e7e:	f111 0018 	adds.w	r0, r1, #24
 8001e82:	d007      	beq.n	8001e94 <forward_dense+0x68>
 8001e84:	8b08      	ldrh	r0, [r1, #24]
 8001e86:	2802      	cmp	r0, #2
 8001e88:	db04      	blt.n	8001e94 <forward_dense+0x68>
 8001e8a:	69c8      	ldr	r0, [r1, #28]
 8001e8c:	b110      	cbz	r0, 8001e94 <forward_dense+0x68>
 8001e8e:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8001e92:	e001      	b.n	8001e98 <forward_dense+0x6c>
 8001e94:	f04f 0a00 	mov.w	sl, #0
 8001e98:	68d0      	ldr	r0, [r2, #12]
 8001e9a:	6844      	ldr	r4, [r0, #4]
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	6845      	ldr	r5, [r0, #4]
 8001ea0:	6881      	ldr	r1, [r0, #8]
 8001ea2:	68c0      	ldr	r0, [r0, #12]
 8001ea4:	699e      	ldr	r6, [r3, #24]
 8001ea6:	69bf      	ldr	r7, [r7, #24]
 8001ea8:	f8d6 e000 	ldr.w	lr, [r6]
 8001eac:	6992      	ldr	r2, [r2, #24]
 8001eae:	68bf      	ldr	r7, [r7, #8]
 8001eb0:	4341      	muls	r1, r0
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	ea4f 19ee 	mov.w	r9, lr, asr #7
 8001eb8:	ea4f 586e 	mov.w	r8, lr, asr #21
 8001ebc:	ea4f 4e6e 	mov.w	lr, lr, asr #17
 8001ec0:	f00e 0e0f 	and.w	lr, lr, #15
 8001ec4:	f1be 0f04 	cmp.w	lr, #4
 8001ec8:	bf14      	ite	ne
 8001eca:	f1be 0f08 	cmpne.w	lr, #8
 8001ece:	68f0      	ldreq	r0, [r6, #12]
 8001ed0:	f009 097f 	and.w	r9, r9, #127	; 0x7f
 8001ed4:	f008 0803 	and.w	r8, r8, #3
 8001ed8:	695e      	ldr	r6, [r3, #20]
 8001eda:	6876      	ldr	r6, [r6, #4]
 8001edc:	fa29 f908 	lsr.w	r9, r9, r8
 8001ee0:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001ee4:	2900      	cmp	r1, #0
 8001ee6:	eb07 0285 	add.w	r2, r7, r5, lsl #2
 8001eea:	f000 80ea 	beq.w	80020c2 <forward_dense+0x296>
 8001eee:	9307      	str	r3, [sp, #28]
 8001ef0:	f8cd a014 	str.w	sl, [sp, #20]
 8001ef4:	9506      	str	r5, [sp, #24]
 8001ef6:	9201      	str	r2, [sp, #4]
 8001ef8:	9104      	str	r1, [sp, #16]
 8001efa:	9907      	ldr	r1, [sp, #28]
 8001efc:	698a      	ldr	r2, [r1, #24]
 8001efe:	9905      	ldr	r1, [sp, #20]
 8001f00:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8001f04:	9b01      	ldr	r3, [sp, #4]
 8001f06:	2900      	cmp	r1, #0
 8001f08:	bf1a      	itte	ne
 8001f0a:	698a      	ldrne	r2, [r1, #24]
 8001f0c:	6892      	ldrne	r2, [r2, #8]
 8001f0e:	2200      	moveq	r2, #0
 8001f10:	2800      	cmp	r0, #0
 8001f12:	f040 80ab 	bne.w	800206c <forward_dense+0x240>
 8001f16:	429f      	cmp	r7, r3
 8001f18:	f080 80c7 	bcs.w	80020aa <forward_dense+0x27e>
 8001f1c:	9003      	str	r0, [sp, #12]
 8001f1e:	2a00      	cmp	r2, #0
 8001f20:	bf0e      	itee	eq
 8001f22:	ed9f 0a6b 	vldreq	s0, [pc, #428]	; 80020d0 <.text_12>
 8001f26:	ed92 0a00 	vldrne	s0, [r2]
 8001f2a:	1d12      	addne	r2, r2, #4
 8001f2c:	2c04      	cmp	r4, #4
 8001f2e:	4620      	mov	r0, r4
 8001f30:	46c6      	mov	lr, r8
 8001f32:	46dc      	mov	ip, fp
 8001f34:	eddf 0a66 	vldr	s1, [pc, #408]	; 80020d0 <.text_12>
 8001f38:	d35d      	bcc.n	8001ff6 <forward_dense+0x1ca>
 8001f3a:	08a1      	lsrs	r1, r4, #2
 8001f3c:	07cd      	lsls	r5, r1, #31
 8001f3e:	d51c      	bpl.n	8001f7a <forward_dense+0x14e>
 8001f40:	ed9c 4a00 	vldr	s8, [ip]
 8001f44:	edde 4a00 	vldr	s9, [lr]
 8001f48:	ed9c 3a01 	vldr	s6, [ip, #4]
 8001f4c:	edde 3a01 	vldr	s7, [lr, #4]
 8001f50:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001f54:	edde 2a02 	vldr	s5, [lr, #8]
 8001f58:	ed9c 1a03 	vldr	s2, [ip, #12]
 8001f5c:	edde 1a03 	vldr	s3, [lr, #12]
 8001f60:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001f64:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001f68:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001f6c:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001f70:	f10e 0e10 	add.w	lr, lr, #16
 8001f74:	f10c 0c10 	add.w	ip, ip, #16
 8001f78:	1f00      	subs	r0, r0, #4
 8001f7a:	0849      	lsrs	r1, r1, #1
 8001f7c:	f000 803b 	beq.w	8001ff6 <forward_dense+0x1ca>
 8001f80:	edde 4a00 	vldr	s9, [lr]
 8001f84:	edde 3a01 	vldr	s7, [lr, #4]
 8001f88:	edde 2a02 	vldr	s5, [lr, #8]
 8001f8c:	edde 1a03 	vldr	s3, [lr, #12]
 8001f90:	ed9c 1a03 	vldr	s2, [ip, #12]
 8001f94:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001f98:	ed9c 3a01 	vldr	s6, [ip, #4]
 8001f9c:	ed9c 4a00 	vldr	s8, [ip]
 8001fa0:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001fa4:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001fa8:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001fac:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001fb0:	f10e 0510 	add.w	r5, lr, #16
 8001fb4:	f10c 0c10 	add.w	ip, ip, #16
 8001fb8:	edd5 8a00 	vldr	s17, [r5]
 8001fbc:	ed9c 8a00 	vldr	s16, [ip]
 8001fc0:	ed9c 7a01 	vldr	s14, [ip, #4]
 8001fc4:	edd5 7a01 	vldr	s15, [r5, #4]
 8001fc8:	ed9c 6a02 	vldr	s12, [ip, #8]
 8001fcc:	edd5 6a02 	vldr	s13, [r5, #8]
 8001fd0:	ed9c 5a03 	vldr	s10, [ip, #12]
 8001fd4:	edd5 5a03 	vldr	s11, [r5, #12]
 8001fd8:	ee48 0a28 	vmla.f32	s1, s16, s17
 8001fdc:	ee47 0a27 	vmla.f32	s1, s14, s15
 8001fe0:	3808      	subs	r0, #8
 8001fe2:	ee46 0a26 	vmla.f32	s1, s12, s13
 8001fe6:	1e49      	subs	r1, r1, #1
 8001fe8:	ee45 0a25 	vmla.f32	s1, s10, s11
 8001fec:	f105 0e10 	add.w	lr, r5, #16
 8001ff0:	f10c 0c10 	add.w	ip, ip, #16
 8001ff4:	d1c4      	bne.n	8001f80 <forward_dense+0x154>
 8001ff6:	b378      	cbz	r0, 8002058 <forward_dense+0x22c>
 8001ff8:	f010 0103 	ands.w	r1, r0, #3
 8001ffc:	f000 800c 	beq.w	8002018 <forward_dense+0x1ec>
 8002000:	ed9c 1a00 	vldr	s2, [ip]
 8002004:	edde 1a00 	vldr	s3, [lr]
 8002008:	1e49      	subs	r1, r1, #1
 800200a:	ee41 0a21 	vmla.f32	s1, s2, s3
 800200e:	f10e 0e04 	add.w	lr, lr, #4
 8002012:	f10c 0c04 	add.w	ip, ip, #4
 8002016:	d1f3      	bne.n	8002000 <forward_dense+0x1d4>
 8002018:	0880      	lsrs	r0, r0, #2
 800201a:	d01d      	beq.n	8002058 <forward_dense+0x22c>
 800201c:	ed9c 2a00 	vldr	s4, [ip]
 8002020:	ed9e 1a00 	vldr	s2, [lr]
 8002024:	eddc 1a01 	vldr	s3, [ip, #4]
 8002028:	edde 2a01 	vldr	s5, [lr, #4]
 800202c:	ee42 0a01 	vmla.f32	s1, s4, s2
 8002030:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8002034:	ed9c 2a02 	vldr	s4, [ip, #8]
 8002038:	ed9e 1a02 	vldr	s2, [lr, #8]
 800203c:	eddc 1a03 	vldr	s3, [ip, #12]
 8002040:	edde 2a03 	vldr	s5, [lr, #12]
 8002044:	ee42 0a01 	vmla.f32	s1, s4, s2
 8002048:	1e40      	subs	r0, r0, #1
 800204a:	ee41 0aa2 	vmla.f32	s1, s3, s5
 800204e:	f10e 0e10 	add.w	lr, lr, #16
 8002052:	f10c 0c10 	add.w	ip, ip, #16
 8002056:	d1e1      	bne.n	800201c <forward_dense+0x1f0>
 8002058:	ee30 0a20 	vadd.f32	s0, s0, s1
 800205c:	ed87 0a00 	vstr	s0, [r7]
 8002060:	1d3f      	adds	r7, r7, #4
 8002062:	429f      	cmp	r7, r3
 8002064:	44b3      	add	fp, r6
 8002066:	f4ff af5a 	bcc.w	8001f1e <forward_dense+0xf2>
 800206a:	e01d      	b.n	80020a8 <forward_dense+0x27c>
 800206c:	429f      	cmp	r7, r3
 800206e:	d21c      	bcs.n	80020aa <forward_dense+0x27e>
 8002070:	469a      	mov	sl, r3
 8002072:	9003      	str	r0, [sp, #12]
 8002074:	4615      	mov	r5, r2
 8002076:	2d00      	cmp	r5, #0
 8002078:	bf14      	ite	ne
 800207a:	f855 0b04 	ldrne.w	r0, [r5], #4
 800207e:	2000      	moveq	r0, #0
 8002080:	9002      	str	r0, [sp, #8]
 8002082:	f1b9 0f04 	cmp.w	r9, #4
 8002086:	9a03      	ldr	r2, [sp, #12]
 8002088:	9400      	str	r4, [sp, #0]
 800208a:	4643      	mov	r3, r8
 800208c:	4659      	mov	r1, fp
 800208e:	a802      	add	r0, sp, #8
 8002090:	d102      	bne.n	8002098 <forward_dense+0x26c>
 8002092:	f7ff fa03 	bl	800149c <ai_dict4_dot_array_f32>
 8002096:	e001      	b.n	800209c <forward_dense+0x270>
 8002098:	f7ff f950 	bl	800133c <ai_dict8_dot_array_f32>
 800209c:	9802      	ldr	r0, [sp, #8]
 800209e:	f847 0b04 	str.w	r0, [r7], #4
 80020a2:	4557      	cmp	r7, sl
 80020a4:	44b3      	add	fp, r6
 80020a6:	d3e6      	bcc.n	8002076 <forward_dense+0x24a>
 80020a8:	9803      	ldr	r0, [sp, #12]
 80020aa:	9901      	ldr	r1, [sp, #4]
 80020ac:	9a06      	ldr	r2, [sp, #24]
 80020ae:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80020b2:	9904      	ldr	r1, [sp, #16]
 80020b4:	9301      	str	r3, [sp, #4]
 80020b6:	1e49      	subs	r1, r1, #1
 80020b8:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 80020bc:	9104      	str	r1, [sp, #16]
 80020be:	f47f af1c 	bne.w	8001efa <forward_dense+0xce>
 80020c2:	b008      	add	sp, #32
 80020c4:	ecbd 8b02 	vpop	{d8}
 80020c8:	b001      	add	sp, #4
 80020ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080020d0 <.text_12>:
 80020d0:	00000000 	.word	0x00000000

080020d4 <forward_gemm>:
 80020d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020d8:	4604      	mov	r4, r0
 80020da:	b091      	sub	sp, #68	; 0x44
 80020dc:	6961      	ldr	r1, [r4, #20]
 80020de:	8808      	ldrh	r0, [r1, #0]
 80020e0:	2800      	cmp	r0, #0
 80020e2:	bf1a      	itte	ne
 80020e4:	6848      	ldrne	r0, [r1, #4]
 80020e6:	1d02      	addne	r2, r0, #4
 80020e8:	2204      	moveq	r2, #4
 80020ea:	460b      	mov	r3, r1
 80020ec:	6810      	ldr	r0, [r2, #0]
 80020ee:	8819      	ldrh	r1, [r3, #0]
 80020f0:	2800      	cmp	r0, #0
 80020f2:	bf14      	ite	ne
 80020f4:	6805      	ldrne	r5, [r0, #0]
 80020f6:	2500      	moveq	r5, #0
 80020f8:	2900      	cmp	r1, #0
 80020fa:	bf1d      	ittte	ne
 80020fc:	6858      	ldrne	r0, [r3, #4]
 80020fe:	2800      	cmpne	r0, #0
 8002100:	f8b0 c000 	ldrhne.w	ip, [r0]
 8002104:	f04f 0c00 	moveq.w	ip, #0
 8002108:	2902      	cmp	r1, #2
 800210a:	bfa6      	itte	ge
 800210c:	6858      	ldrge	r0, [r3, #4]
 800210e:	3010      	addge	r0, #16
 8002110:	2004      	movlt	r0, #4
 8002112:	6800      	ldr	r0, [r0, #0]
 8002114:	2800      	cmp	r0, #0
 8002116:	bf14      	ite	ne
 8002118:	6801      	ldrne	r1, [r0, #0]
 800211a:	2100      	moveq	r1, #0
 800211c:	2600      	movs	r6, #0
 800211e:	f1bc 0f03 	cmp.w	ip, #3
 8002122:	46b2      	mov	sl, r6
 8002124:	d107      	bne.n	8002136 <forward_gemm+0x62>
 8002126:	6810      	ldr	r0, [r2, #0]
 8002128:	2800      	cmp	r0, #0
 800212a:	d026      	beq.n	800217a <forward_gemm+0xa6>
 800212c:	6846      	ldr	r6, [r0, #4]
 800212e:	d024      	beq.n	800217a <forward_gemm+0xa6>
 8002130:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8002134:	e021      	b.n	800217a <forward_gemm+0xa6>
 8002136:	f1bc 0f02 	cmp.w	ip, #2
 800213a:	d10d      	bne.n	8002158 <forward_gemm+0x84>
 800213c:	6810      	ldr	r0, [r2, #0]
 800213e:	b100      	cbz	r0, 8002142 <forward_gemm+0x6e>
 8002140:	6846      	ldr	r6, [r0, #4]
 8002142:	881a      	ldrh	r2, [r3, #0]
 8002144:	2a02      	cmp	r2, #2
 8002146:	bfc6      	itte	gt
 8002148:	6858      	ldrgt	r0, [r3, #4]
 800214a:	301c      	addgt	r0, #28
 800214c:	2004      	movle	r0, #4
 800214e:	6800      	ldr	r0, [r0, #0]
 8002150:	b198      	cbz	r0, 800217a <forward_gemm+0xa6>
 8002152:	f8d0 a000 	ldr.w	sl, [r0]
 8002156:	e010      	b.n	800217a <forward_gemm+0xa6>
 8002158:	f1bc 0f01 	cmp.w	ip, #1
 800215c:	d10d      	bne.n	800217a <forward_gemm+0xa6>
 800215e:	881a      	ldrh	r2, [r3, #0]
 8002160:	2a02      	cmp	r2, #2
 8002162:	bfc6      	itte	gt
 8002164:	6858      	ldrgt	r0, [r3, #4]
 8002166:	f100 021c 	addgt.w	r2, r0, #28
 800216a:	2204      	movle	r2, #4
 800216c:	6810      	ldr	r0, [r2, #0]
 800216e:	2800      	cmp	r0, #0
 8002170:	d003      	beq.n	800217a <forward_gemm+0xa6>
 8002172:	6806      	ldr	r6, [r0, #0]
 8002174:	bf18      	it	ne
 8002176:	f8d0 a004 	ldrne.w	sl, [r0, #4]
 800217a:	68c8      	ldr	r0, [r1, #12]
 800217c:	6989      	ldr	r1, [r1, #24]
 800217e:	688b      	ldr	r3, [r1, #8]
 8002180:	6842      	ldr	r2, [r0, #4]
 8002182:	68c1      	ldr	r1, [r0, #12]
 8002184:	b292      	uxth	r2, r2
 8002186:	b289      	uxth	r1, r1
 8002188:	a806      	add	r0, sp, #24
 800218a:	f004 f831 	bl	80061f0 <arm_mat_init_f32>
 800218e:	69a9      	ldr	r1, [r5, #24]
 8002190:	68e8      	ldr	r0, [r5, #12]
 8002192:	688b      	ldr	r3, [r1, #8]
 8002194:	6842      	ldr	r2, [r0, #4]
 8002196:	68c1      	ldr	r1, [r0, #12]
 8002198:	b292      	uxth	r2, r2
 800219a:	b289      	uxth	r1, r1
 800219c:	a804      	add	r0, sp, #16
 800219e:	f004 f827 	bl	80061f0 <arm_mat_init_f32>
 80021a2:	69b1      	ldr	r1, [r6, #24]
 80021a4:	68f0      	ldr	r0, [r6, #12]
 80021a6:	688b      	ldr	r3, [r1, #8]
 80021a8:	6842      	ldr	r2, [r0, #4]
 80021aa:	68c1      	ldr	r1, [r0, #12]
 80021ac:	b292      	uxth	r2, r2
 80021ae:	b289      	uxth	r1, r1
 80021b0:	a802      	add	r0, sp, #8
 80021b2:	f004 f81d 	bl	80061f0 <arm_mat_init_f32>
 80021b6:	f8da 1018 	ldr.w	r1, [sl, #24]
 80021ba:	f8da 000c 	ldr.w	r0, [sl, #12]
 80021be:	688b      	ldr	r3, [r1, #8]
 80021c0:	6842      	ldr	r2, [r0, #4]
 80021c2:	68c1      	ldr	r1, [r0, #12]
 80021c4:	b292      	uxth	r2, r2
 80021c6:	b289      	uxth	r1, r1
 80021c8:	4668      	mov	r0, sp
 80021ca:	f004 f811 	bl	80061f0 <arm_mat_init_f32>
 80021ce:	f994 5021 	ldrsb.w	r5, [r4, #33]	; 0x21
 80021d2:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80021d6:	9905      	ldr	r1, [sp, #20]
 80021d8:	9a03      	ldr	r2, [sp, #12]
 80021da:	ed94 0a07 	vldr	s0, [r4, #28]
 80021de:	edd4 0a06 	vldr	s1, [r4, #24]
 80021e2:	910b      	str	r1, [sp, #44]	; 0x2c
 80021e4:	920e      	str	r2, [sp, #56]	; 0x38
 80021e6:	920d      	str	r2, [sp, #52]	; 0x34
 80021e8:	2300      	movs	r3, #0
 80021ea:	f8bd e010 	ldrh.w	lr, [sp, #16]
 80021ee:	f8bd 8012 	ldrh.w	r8, [sp, #18]
 80021f2:	9901      	ldr	r1, [sp, #4]
 80021f4:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80021f8:	f8bd c000 	ldrh.w	ip, [sp]
 80021fc:	9c07      	ldr	r4, [sp, #28]
 80021fe:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8002202:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 8002206:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 800220a:	9108      	str	r1, [sp, #32]
 800220c:	0002      	movs	r2, r0
 800220e:	bf0c      	ite	eq
 8002210:	4672      	moveq	r2, lr
 8002212:	4642      	movne	r2, r8
 8002214:	2f01      	cmp	r7, #1
 8002216:	bf0c      	ite	eq
 8002218:	4699      	moveq	r9, r3
 800221a:	f04f 0904 	movne.w	r9, #4
 800221e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8002222:	f1bc 0f01 	cmp.w	ip, #1
 8002226:	d104      	bne.n	8002232 <forward_gemm+0x15e>
 8002228:	2f01      	cmp	r7, #1
 800222a:	d004      	beq.n	8002236 <forward_gemm+0x162>
 800222c:	f1cb 0700 	rsb	r7, fp, #0
 8002230:	e002      	b.n	8002238 <forward_gemm+0x164>
 8002232:	2f01      	cmp	r7, #1
 8002234:	d000      	beq.n	8002238 <forward_gemm+0x164>
 8002236:	2700      	movs	r7, #0
 8002238:	2800      	cmp	r0, #0
 800223a:	bf0c      	ite	eq
 800223c:	46f4      	moveq	ip, lr
 800223e:	46c4      	movne	ip, r8
 8002240:	b23f      	sxth	r7, r7
 8002242:	45b4      	cmp	ip, r6
 8002244:	970c      	str	r7, [sp, #48]	; 0x30
 8002246:	f040 808b 	bne.w	8002360 <forward_gemm+0x28c>
 800224a:	2d00      	cmp	r5, #0
 800224c:	bf0c      	ite	eq
 800224e:	9109      	streq	r1, [sp, #36]	; 0x24
 8002250:	f8cd a024 	strne.w	sl, [sp, #36]	; 0x24
 8002254:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002256:	455f      	cmp	r7, fp
 8002258:	f040 8082 	bne.w	8002360 <forward_gemm+0x28c>
 800225c:	2800      	cmp	r0, #0
 800225e:	bf0c      	ite	eq
 8002260:	46c4      	moveq	ip, r8
 8002262:	46f4      	movne	ip, lr
 8002264:	2d00      	cmp	r5, #0
 8002266:	bf0c      	ite	eq
 8002268:	4657      	moveq	r7, sl
 800226a:	460f      	movne	r7, r1
 800226c:	45bc      	cmp	ip, r7
 800226e:	d177      	bne.n	8002360 <forward_gemm+0x28c>
 8002270:	9e08      	ldr	r6, [sp, #32]
 8002272:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8002276:	9410      	str	r4, [sp, #64]	; 0x40
 8002278:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800227c:	f8ad 2020 	strh.w	r2, [sp, #32]
 8002280:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002282:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8002286:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800228a:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800228e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002290:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002292:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8002296:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 800229a:	ea4f 0488 	mov.w	r4, r8, lsl #2
 800229e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 80022a2:	2800      	cmp	r0, #0
 80022a4:	bf0c      	ite	eq
 80022a6:	f8dd 803c 	ldreq.w	r8, [sp, #60]	; 0x3c
 80022aa:	f8bd 8028 	ldrhne.w	r8, [sp, #40]	; 0x28
 80022ae:	fa1f fb88 	uxth.w	fp, r8
 80022b2:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 80022b6:	f1bb 0f00 	cmp.w	fp, #0
 80022ba:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 8002524 <.text_16>
 80022be:	d019      	beq.n	80022f4 <forward_gemm+0x220>
 80022c0:	2800      	cmp	r0, #0
 80022c2:	bf0c      	ite	eq
 80022c4:	f04f 0b04 	moveq.w	fp, #4
 80022c8:	46a3      	movne	fp, r4
 80022ca:	2d00      	cmp	r5, #0
 80022cc:	f1a8 0801 	sub.w	r8, r8, #1
 80022d0:	edde 1a00 	vldr	s3, [lr]
 80022d4:	ed93 2a00 	vldr	s4, [r3]
 80022d8:	44de      	add	lr, fp
 80022da:	bf0c      	ite	eq
 80022dc:	ea4f 0b81 	moveq.w	fp, r1, lsl #2
 80022e0:	f04f 0b04 	movne.w	fp, #4
 80022e4:	445b      	add	r3, fp
 80022e6:	fa1f fb88 	uxth.w	fp, r8
 80022ea:	f1bb 0f00 	cmp.w	fp, #0
 80022ee:	ee01 1a82 	vmla.f32	s2, s3, s4
 80022f2:	d1e5      	bne.n	80022c0 <forward_gemm+0x1ec>
 80022f4:	ee20 1a81 	vmul.f32	s2, s1, s2
 80022f8:	edd6 1a00 	vldr	s3, [r6]
 80022fc:	ee00 1a21 	vmla.f32	s2, s0, s3
 8002300:	ed87 1a00 	vstr	s2, [r7]
 8002304:	1d3f      	adds	r7, r7, #4
 8002306:	1e52      	subs	r2, r2, #1
 8002308:	b292      	uxth	r2, r2
 800230a:	002b      	movs	r3, r5
 800230c:	bf0e      	itee	eq
 800230e:	1a8b      	subeq	r3, r1, r2
 8002310:	ebaa 0302 	subne.w	r3, sl, r2
 8002314:	434b      	mulne	r3, r1
 8002316:	2a00      	cmp	r2, #0
 8002318:	444e      	add	r6, r9
 800231a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800231e:	d1c0      	bne.n	80022a2 <forward_gemm+0x1ce>
 8002320:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
 8002324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002326:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002328:	f8bd e028 	ldrh.w	lr, [sp, #40]	; 0x28
 800232c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8002330:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8002334:	19df      	adds	r7, r3, r7
 8002336:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800233a:	b100      	cbz	r0, 800233e <forward_gemm+0x26a>
 800233c:	2404      	movs	r4, #4
 800233e:	eb02 0c04 	add.w	ip, r2, r4
 8002342:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8002346:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002348:	1e67      	subs	r7, r4, #1
 800234a:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 800234e:	f8ad 7020 	strh.w	r7, [sp, #32]
 8002352:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8002356:	2a00      	cmp	r2, #0
 8002358:	d192      	bne.n	8002280 <forward_gemm+0x1ac>
 800235a:	b011      	add	sp, #68	; 0x44
 800235c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002360:	fb0b f606 	mul.w	r6, fp, r6
 8002364:	2e00      	cmp	r6, #0
 8002366:	ddf8      	ble.n	800235a <forward_gemm+0x286>
 8002368:	f016 0003 	ands.w	r0, r6, #3
 800236c:	d003      	beq.n	8002376 <forward_gemm+0x2a2>
 800236e:	1e40      	subs	r0, r0, #1
 8002370:	f844 3b04 	str.w	r3, [r4], #4
 8002374:	d1fb      	bne.n	800236e <forward_gemm+0x29a>
 8002376:	08b1      	lsrs	r1, r6, #2
 8002378:	d0ef      	beq.n	800235a <forward_gemm+0x286>
 800237a:	6023      	str	r3, [r4, #0]
 800237c:	6063      	str	r3, [r4, #4]
 800237e:	60a3      	str	r3, [r4, #8]
 8002380:	60e3      	str	r3, [r4, #12]
 8002382:	3410      	adds	r4, #16
 8002384:	1e49      	subs	r1, r1, #1
 8002386:	d1f8      	bne.n	800237a <forward_gemm+0x2a6>
 8002388:	b011      	add	sp, #68	; 0x44
 800238a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002390 <forward_matmul>:
 8002390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002394:	b08b      	sub	sp, #44	; 0x2c
 8002396:	6944      	ldr	r4, [r0, #20]
 8002398:	8822      	ldrh	r2, [r4, #0]
 800239a:	2a00      	cmp	r2, #0
 800239c:	bf1a      	itte	ne
 800239e:	6860      	ldrne	r0, [r4, #4]
 80023a0:	1d03      	addne	r3, r0, #4
 80023a2:	2304      	moveq	r3, #4
 80023a4:	6819      	ldr	r1, [r3, #0]
 80023a6:	2900      	cmp	r1, #0
 80023a8:	bf14      	ite	ne
 80023aa:	6808      	ldrne	r0, [r1, #0]
 80023ac:	2000      	moveq	r0, #0
 80023ae:	2900      	cmp	r1, #0
 80023b0:	bf14      	ite	ne
 80023b2:	f8d1 b004 	ldrne.w	fp, [r1, #4]
 80023b6:	f04f 0b00 	moveq.w	fp, #0
 80023ba:	2a02      	cmp	r2, #2
 80023bc:	bfa6      	itte	ge
 80023be:	6861      	ldrge	r1, [r4, #4]
 80023c0:	3110      	addge	r1, #16
 80023c2:	2104      	movlt	r1, #4
 80023c4:	6809      	ldr	r1, [r1, #0]
 80023c6:	2900      	cmp	r1, #0
 80023c8:	bf14      	ite	ne
 80023ca:	680b      	ldrne	r3, [r1, #0]
 80023cc:	2300      	moveq	r3, #0
 80023ce:	f1bb 0f00 	cmp.w	fp, #0
 80023d2:	d108      	bne.n	80023e6 <forward_matmul+0x56>
 80023d4:	2a02      	cmp	r2, #2
 80023d6:	bfc6      	itte	gt
 80023d8:	6861      	ldrgt	r1, [r4, #4]
 80023da:	311c      	addgt	r1, #28
 80023dc:	2104      	movle	r1, #4
 80023de:	6809      	ldr	r1, [r1, #0]
 80023e0:	b109      	cbz	r1, 80023e6 <forward_matmul+0x56>
 80023e2:	f8d1 b000 	ldr.w	fp, [r1]
 80023e6:	68dd      	ldr	r5, [r3, #12]
 80023e8:	68c4      	ldr	r4, [r0, #12]
 80023ea:	f8db 900c 	ldr.w	r9, [fp, #12]
 80023ee:	686e      	ldr	r6, [r5, #4]
 80023f0:	f8d4 e000 	ldr.w	lr, [r4]
 80023f4:	f8d9 2000 	ldr.w	r2, [r9]
 80023f8:	f8d5 a000 	ldr.w	sl, [r5]
 80023fc:	68a1      	ldr	r1, [r4, #8]
 80023fe:	f8d9 8008 	ldr.w	r8, [r9, #8]
 8002402:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8002406:	68ef      	ldr	r7, [r5, #12]
 8002408:	9706      	str	r7, [sp, #24]
 800240a:	fb01 f50e 	mul.w	r5, r1, lr
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	68e7      	ldr	r7, [r4, #12]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	434f      	muls	r7, r1
 8002416:	fb0e f707 	mul.w	r7, lr, r7
 800241a:	970a      	str	r7, [sp, #40]	; 0x28
 800241c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8002420:	fb08 f404 	mul.w	r4, r8, r4
 8002424:	4354      	muls	r4, r2
 8002426:	2e00      	cmp	r6, #0
 8002428:	9409      	str	r4, [sp, #36]	; 0x24
 800242a:	fb08 f802 	mul.w	r8, r8, r2
 800242e:	d074      	beq.n	800251a <forward_matmul+0x18a>
 8002430:	2400      	movs	r4, #0
 8002432:	46a1      	mov	r9, r4
 8002434:	9602      	str	r6, [sp, #8]
 8002436:	9e06      	ldr	r6, [sp, #24]
 8002438:	2e00      	cmp	r6, #0
 800243a:	d064      	beq.n	8002506 <forward_matmul+0x176>
 800243c:	9f06      	ldr	r7, [sp, #24]
 800243e:	9701      	str	r7, [sp, #4]
 8002440:	f8cd c00c 	str.w	ip, [sp, #12]
 8002444:	2600      	movs	r6, #0
 8002446:	9505      	str	r5, [sp, #20]
 8002448:	9d03      	ldr	r5, [sp, #12]
 800244a:	2d00      	cmp	r5, #0
 800244c:	d051      	beq.n	80024f2 <forward_matmul+0x162>
 800244e:	9500      	str	r5, [sp, #0]
 8002450:	f8cd a010 	str.w	sl, [sp, #16]
 8002454:	9207      	str	r2, [sp, #28]
 8002456:	f04f 0a00 	mov.w	sl, #0
 800245a:	9a04      	ldr	r2, [sp, #16]
 800245c:	2a00      	cmp	r2, #0
 800245e:	d03f      	beq.n	80024e0 <forward_matmul+0x150>
 8002460:	f04f 0c00 	mov.w	ip, #0
 8002464:	9008      	str	r0, [sp, #32]
 8002466:	9808      	ldr	r0, [sp, #32]
 8002468:	6985      	ldr	r5, [r0, #24]
 800246a:	68a8      	ldr	r0, [r5, #8]
 800246c:	f8db 7018 	ldr.w	r7, [fp, #24]
 8002470:	4420      	add	r0, r4
 8002472:	4430      	add	r0, r6
 8002474:	eb00 050c 	add.w	r5, r0, ip
 8002478:	68b8      	ldr	r0, [r7, #8]
 800247a:	4448      	add	r0, r9
 800247c:	4450      	add	r0, sl
 800247e:	eb00 070c 	add.w	r7, r0, ip
 8002482:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8002524 <.text_16>
 8002486:	b319      	cbz	r1, 80024d0 <forward_matmul+0x140>
 8002488:	07c8      	lsls	r0, r1, #31
 800248a:	d509      	bpl.n	80024a0 <forward_matmul+0x110>
 800248c:	edd5 0a00 	vldr	s1, [r5]
 8002490:	ed97 1a00 	vldr	s2, [r7]
 8002494:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002498:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 800249c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80024a0:	0848      	lsrs	r0, r1, #1
 80024a2:	d015      	beq.n	80024d0 <forward_matmul+0x140>
 80024a4:	edd5 0a00 	vldr	s1, [r5]
 80024a8:	ed97 1a00 	vldr	s2, [r7]
 80024ac:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 80024b0:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80024b4:	ee00 0a81 	vmla.f32	s0, s1, s2
 80024b8:	edd5 0a00 	vldr	s1, [r5]
 80024bc:	ed97 1a00 	vldr	s2, [r7]
 80024c0:	1e40      	subs	r0, r0, #1
 80024c2:	ee00 0a81 	vmla.f32	s0, s1, s2
 80024c6:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 80024ca:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80024ce:	d1e9      	bne.n	80024a4 <forward_matmul+0x114>
 80024d0:	ed83 0a00 	vstr	s0, [r3]
 80024d4:	1d1b      	adds	r3, r3, #4
 80024d6:	1e52      	subs	r2, r2, #1
 80024d8:	f10c 0c04 	add.w	ip, ip, #4
 80024dc:	d1c3      	bne.n	8002466 <forward_matmul+0xd6>
 80024de:	9808      	ldr	r0, [sp, #32]
 80024e0:	9d00      	ldr	r5, [sp, #0]
 80024e2:	9a07      	ldr	r2, [sp, #28]
 80024e4:	1e6d      	subs	r5, r5, #1
 80024e6:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 80024ea:	9500      	str	r5, [sp, #0]
 80024ec:	d1b5      	bne.n	800245a <forward_matmul+0xca>
 80024ee:	f8dd a010 	ldr.w	sl, [sp, #16]
 80024f2:	9f01      	ldr	r7, [sp, #4]
 80024f4:	9d05      	ldr	r5, [sp, #20]
 80024f6:	1e7f      	subs	r7, r7, #1
 80024f8:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 80024fc:	9701      	str	r7, [sp, #4]
 80024fe:	d1a3      	bne.n	8002448 <forward_matmul+0xb8>
 8002500:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8002504:	9d05      	ldr	r5, [sp, #20]
 8002506:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002508:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800250a:	eb09 0986 	add.w	r9, r9, r6, lsl #2
 800250e:	9e02      	ldr	r6, [sp, #8]
 8002510:	1e76      	subs	r6, r6, #1
 8002512:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8002516:	9602      	str	r6, [sp, #8]
 8002518:	d18d      	bne.n	8002436 <forward_matmul+0xa6>
 800251a:	b00b      	add	sp, #44	; 0x2c
 800251c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002520 <.text_15>:
 8002520:	0800133b 	.word	0x0800133b

08002524 <.text_16>:
 8002524:	00000000 	.word	0x00000000

08002528 <ai_shape_get_size>:
 8002528:	b470      	push	{r4, r5, r6}
 800252a:	4601      	mov	r1, r0
 800252c:	f04f 0201 	mov.w	r2, #1
 8002530:	680b      	ldr	r3, [r1, #0]
 8002532:	0a1b      	lsrs	r3, r3, #8
 8002534:	d01e      	beq.n	8002574 <ai_shape_get_size+0x4c>
 8002536:	684c      	ldr	r4, [r1, #4]
 8002538:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800253c:	4618      	mov	r0, r3
 800253e:	1f0d      	subs	r5, r1, #4
 8002540:	f010 0103 	ands.w	r1, r0, #3
 8002544:	f000 8006 	beq.w	8002554 <ai_shape_get_size+0x2c>
 8002548:	f855 6904 	ldr.w	r6, [r5], #-4
 800254c:	1e5b      	subs	r3, r3, #1
 800254e:	4372      	muls	r2, r6
 8002550:	1e49      	subs	r1, r1, #1
 8002552:	d1f9      	bne.n	8002548 <ai_shape_get_size+0x20>
 8002554:	0880      	lsrs	r0, r0, #2
 8002556:	d00d      	beq.n	8002574 <ai_shape_get_size+0x4c>
 8002558:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800255c:	3910      	subs	r1, #16
 800255e:	68cb      	ldr	r3, [r1, #12]
 8002560:	688c      	ldr	r4, [r1, #8]
 8002562:	684d      	ldr	r5, [r1, #4]
 8002564:	f851 6910 	ldr.w	r6, [r1], #-16
 8002568:	4363      	muls	r3, r4
 800256a:	436b      	muls	r3, r5
 800256c:	4373      	muls	r3, r6
 800256e:	435a      	muls	r2, r3
 8002570:	1e40      	subs	r0, r0, #1
 8002572:	d1f4      	bne.n	800255e <ai_shape_get_size+0x36>
 8002574:	bc70      	pop	{r4, r5, r6}
 8002576:	4610      	mov	r0, r2
 8002578:	4770      	bx	lr
	...

0800257c <nl_func_acos_array_f32>:
 800257c:	b570      	push	{r4, r5, r6, lr}
 800257e:	688c      	ldr	r4, [r1, #8]
 8002580:	6880      	ldr	r0, [r0, #8]
 8002582:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002586:	1f0d      	subs	r5, r1, #4
 8002588:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800258c:	1f0e      	subs	r6, r1, #4
 800258e:	42a5      	cmp	r5, r4
 8002590:	f0c0 800a 	bcc.w	80025a8 <nl_func_acos_array_f32+0x2c>
 8002594:	ed95 0a00 	vldr	s0, [r5]
 8002598:	f00e f9c6 	bl	8010928 <acosf>
 800259c:	ed86 0a00 	vstr	s0, [r6]
 80025a0:	1f2d      	subs	r5, r5, #4
 80025a2:	1f36      	subs	r6, r6, #4
 80025a4:	42a5      	cmp	r5, r4
 80025a6:	d2f5      	bcs.n	8002594 <nl_func_acos_array_f32+0x18>
 80025a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080025ac <forward_acos>:
 80025ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ae:	b081      	sub	sp, #4
 80025b0:	6942      	ldr	r2, [r0, #20]
 80025b2:	8811      	ldrh	r1, [r2, #0]
 80025b4:	2900      	cmp	r1, #0
 80025b6:	bf1a      	itte	ne
 80025b8:	6850      	ldrne	r0, [r2, #4]
 80025ba:	1d00      	addne	r0, r0, #4
 80025bc:	2004      	moveq	r0, #4
 80025be:	f04f 0501 	mov.w	r5, #1
 80025c2:	6800      	ldr	r0, [r0, #0]
 80025c4:	2800      	cmp	r0, #0
 80025c6:	bf14      	ite	ne
 80025c8:	6803      	ldrne	r3, [r0, #0]
 80025ca:	2300      	moveq	r3, #0
 80025cc:	2902      	cmp	r1, #2
 80025ce:	bfa6      	itte	ge
 80025d0:	6850      	ldrge	r0, [r2, #4]
 80025d2:	3010      	addge	r0, #16
 80025d4:	2004      	movlt	r0, #4
 80025d6:	6800      	ldr	r0, [r0, #0]
 80025d8:	2800      	cmp	r0, #0
 80025da:	bf19      	ittee	ne
 80025dc:	6800      	ldrne	r0, [r0, #0]
 80025de:	f100 0418 	addne.w	r4, r0, #24
 80025e2:	2100      	moveq	r1, #0
 80025e4:	f101 0418 	addeq.w	r4, r1, #24
 80025e8:	f103 0108 	add.w	r1, r3, #8
 80025ec:	680a      	ldr	r2, [r1, #0]
 80025ee:	0a12      	lsrs	r2, r2, #8
 80025f0:	d01e      	beq.n	8002630 <forward_acos+0x84>
 80025f2:	684e      	ldr	r6, [r1, #4]
 80025f4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80025f8:	4610      	mov	r0, r2
 80025fa:	1f0f      	subs	r7, r1, #4
 80025fc:	f010 0103 	ands.w	r1, r0, #3
 8002600:	d006      	beq.n	8002610 <forward_acos+0x64>
 8002602:	1e52      	subs	r2, r2, #1
 8002604:	f857 c904 	ldr.w	ip, [r7], #-4
 8002608:	1e49      	subs	r1, r1, #1
 800260a:	fb0c f505 	mul.w	r5, ip, r5
 800260e:	d1f8      	bne.n	8002602 <forward_acos+0x56>
 8002610:	0880      	lsrs	r0, r0, #2
 8002612:	d00d      	beq.n	8002630 <forward_acos+0x84>
 8002614:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002618:	3910      	subs	r1, #16
 800261a:	68ca      	ldr	r2, [r1, #12]
 800261c:	688e      	ldr	r6, [r1, #8]
 800261e:	684f      	ldr	r7, [r1, #4]
 8002620:	4372      	muls	r2, r6
 8002622:	f851 6910 	ldr.w	r6, [r1], #-16
 8002626:	437a      	muls	r2, r7
 8002628:	4372      	muls	r2, r6
 800262a:	4355      	muls	r5, r2
 800262c:	1e40      	subs	r0, r0, #1
 800262e:	d1f4      	bne.n	800261a <forward_acos+0x6e>
 8002630:	6998      	ldr	r0, [r3, #24]
 8002632:	6886      	ldr	r6, [r0, #8]
 8002634:	6821      	ldr	r1, [r4, #0]
 8002636:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800263a:	1f07      	subs	r7, r0, #4
 800263c:	6888      	ldr	r0, [r1, #8]
 800263e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002642:	1f14      	subs	r4, r2, #4
 8002644:	42b7      	cmp	r7, r6
 8002646:	d309      	bcc.n	800265c <forward_acos+0xb0>
 8002648:	ed97 0a00 	vldr	s0, [r7]
 800264c:	f00e f96c 	bl	8010928 <acosf>
 8002650:	ed84 0a00 	vstr	s0, [r4]
 8002654:	1f3f      	subs	r7, r7, #4
 8002656:	1f24      	subs	r4, r4, #4
 8002658:	42b7      	cmp	r7, r6
 800265a:	d2f5      	bcs.n	8002648 <forward_acos+0x9c>
 800265c:	b001      	add	sp, #4
 800265e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002660 <nl_func_acosh_array_f32>:
 8002660:	b570      	push	{r4, r5, r6, lr}
 8002662:	688c      	ldr	r4, [r1, #8]
 8002664:	6880      	ldr	r0, [r0, #8]
 8002666:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800266a:	1f0d      	subs	r5, r1, #4
 800266c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002670:	1f0e      	subs	r6, r1, #4
 8002672:	42a5      	cmp	r5, r4
 8002674:	f0c0 800a 	bcc.w	800268c <nl_func_acosh_array_f32+0x2c>
 8002678:	ed95 0a00 	vldr	s0, [r5]
 800267c:	f00e f980 	bl	8010980 <acoshf>
 8002680:	ed86 0a00 	vstr	s0, [r6]
 8002684:	1f2d      	subs	r5, r5, #4
 8002686:	1f36      	subs	r6, r6, #4
 8002688:	42a5      	cmp	r5, r4
 800268a:	d2f5      	bcs.n	8002678 <nl_func_acosh_array_f32+0x18>
 800268c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002690 <forward_acosh>:
 8002690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002692:	b081      	sub	sp, #4
 8002694:	6942      	ldr	r2, [r0, #20]
 8002696:	8811      	ldrh	r1, [r2, #0]
 8002698:	2900      	cmp	r1, #0
 800269a:	bf1a      	itte	ne
 800269c:	6850      	ldrne	r0, [r2, #4]
 800269e:	1d00      	addne	r0, r0, #4
 80026a0:	2004      	moveq	r0, #4
 80026a2:	f04f 0501 	mov.w	r5, #1
 80026a6:	6800      	ldr	r0, [r0, #0]
 80026a8:	2800      	cmp	r0, #0
 80026aa:	bf14      	ite	ne
 80026ac:	6803      	ldrne	r3, [r0, #0]
 80026ae:	2300      	moveq	r3, #0
 80026b0:	2902      	cmp	r1, #2
 80026b2:	bfa6      	itte	ge
 80026b4:	6850      	ldrge	r0, [r2, #4]
 80026b6:	3010      	addge	r0, #16
 80026b8:	2004      	movlt	r0, #4
 80026ba:	6800      	ldr	r0, [r0, #0]
 80026bc:	2800      	cmp	r0, #0
 80026be:	bf19      	ittee	ne
 80026c0:	6800      	ldrne	r0, [r0, #0]
 80026c2:	f100 0418 	addne.w	r4, r0, #24
 80026c6:	2100      	moveq	r1, #0
 80026c8:	f101 0418 	addeq.w	r4, r1, #24
 80026cc:	f103 0108 	add.w	r1, r3, #8
 80026d0:	680a      	ldr	r2, [r1, #0]
 80026d2:	0a12      	lsrs	r2, r2, #8
 80026d4:	d01e      	beq.n	8002714 <forward_acosh+0x84>
 80026d6:	684e      	ldr	r6, [r1, #4]
 80026d8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80026dc:	4610      	mov	r0, r2
 80026de:	1f0f      	subs	r7, r1, #4
 80026e0:	f010 0103 	ands.w	r1, r0, #3
 80026e4:	d006      	beq.n	80026f4 <forward_acosh+0x64>
 80026e6:	1e52      	subs	r2, r2, #1
 80026e8:	f857 c904 	ldr.w	ip, [r7], #-4
 80026ec:	1e49      	subs	r1, r1, #1
 80026ee:	fb0c f505 	mul.w	r5, ip, r5
 80026f2:	d1f8      	bne.n	80026e6 <forward_acosh+0x56>
 80026f4:	0880      	lsrs	r0, r0, #2
 80026f6:	d00d      	beq.n	8002714 <forward_acosh+0x84>
 80026f8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80026fc:	3910      	subs	r1, #16
 80026fe:	68ca      	ldr	r2, [r1, #12]
 8002700:	688e      	ldr	r6, [r1, #8]
 8002702:	684f      	ldr	r7, [r1, #4]
 8002704:	4372      	muls	r2, r6
 8002706:	f851 6910 	ldr.w	r6, [r1], #-16
 800270a:	437a      	muls	r2, r7
 800270c:	4372      	muls	r2, r6
 800270e:	4355      	muls	r5, r2
 8002710:	1e40      	subs	r0, r0, #1
 8002712:	d1f4      	bne.n	80026fe <forward_acosh+0x6e>
 8002714:	6998      	ldr	r0, [r3, #24]
 8002716:	6886      	ldr	r6, [r0, #8]
 8002718:	6821      	ldr	r1, [r4, #0]
 800271a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800271e:	1f07      	subs	r7, r0, #4
 8002720:	6888      	ldr	r0, [r1, #8]
 8002722:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002726:	1f14      	subs	r4, r2, #4
 8002728:	42b7      	cmp	r7, r6
 800272a:	d309      	bcc.n	8002740 <forward_acosh+0xb0>
 800272c:	ed97 0a00 	vldr	s0, [r7]
 8002730:	f00e f926 	bl	8010980 <acoshf>
 8002734:	ed84 0a00 	vstr	s0, [r4]
 8002738:	1f3f      	subs	r7, r7, #4
 800273a:	1f24      	subs	r4, r4, #4
 800273c:	42b7      	cmp	r7, r6
 800273e:	d2f5      	bcs.n	800272c <forward_acosh+0x9c>
 8002740:	b001      	add	sp, #4
 8002742:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002744 <nl_func_asin_array_f32>:
 8002744:	b570      	push	{r4, r5, r6, lr}
 8002746:	688c      	ldr	r4, [r1, #8]
 8002748:	6880      	ldr	r0, [r0, #8]
 800274a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800274e:	1f0d      	subs	r5, r1, #4
 8002750:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002754:	1f0e      	subs	r6, r1, #4
 8002756:	42a5      	cmp	r5, r4
 8002758:	f0c0 800a 	bcc.w	8002770 <nl_func_asin_array_f32+0x2c>
 800275c:	ed95 0a00 	vldr	s0, [r5]
 8002760:	f00e f92e 	bl	80109c0 <asinf>
 8002764:	ed86 0a00 	vstr	s0, [r6]
 8002768:	1f2d      	subs	r5, r5, #4
 800276a:	1f36      	subs	r6, r6, #4
 800276c:	42a5      	cmp	r5, r4
 800276e:	d2f5      	bcs.n	800275c <nl_func_asin_array_f32+0x18>
 8002770:	bd70      	pop	{r4, r5, r6, pc}
	...

08002774 <forward_asin>:
 8002774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002776:	b081      	sub	sp, #4
 8002778:	6942      	ldr	r2, [r0, #20]
 800277a:	8811      	ldrh	r1, [r2, #0]
 800277c:	2900      	cmp	r1, #0
 800277e:	bf1a      	itte	ne
 8002780:	6850      	ldrne	r0, [r2, #4]
 8002782:	1d00      	addne	r0, r0, #4
 8002784:	2004      	moveq	r0, #4
 8002786:	f04f 0501 	mov.w	r5, #1
 800278a:	6800      	ldr	r0, [r0, #0]
 800278c:	2800      	cmp	r0, #0
 800278e:	bf14      	ite	ne
 8002790:	6803      	ldrne	r3, [r0, #0]
 8002792:	2300      	moveq	r3, #0
 8002794:	2902      	cmp	r1, #2
 8002796:	bfa6      	itte	ge
 8002798:	6850      	ldrge	r0, [r2, #4]
 800279a:	3010      	addge	r0, #16
 800279c:	2004      	movlt	r0, #4
 800279e:	6800      	ldr	r0, [r0, #0]
 80027a0:	2800      	cmp	r0, #0
 80027a2:	bf19      	ittee	ne
 80027a4:	6800      	ldrne	r0, [r0, #0]
 80027a6:	f100 0418 	addne.w	r4, r0, #24
 80027aa:	2100      	moveq	r1, #0
 80027ac:	f101 0418 	addeq.w	r4, r1, #24
 80027b0:	f103 0108 	add.w	r1, r3, #8
 80027b4:	680a      	ldr	r2, [r1, #0]
 80027b6:	0a12      	lsrs	r2, r2, #8
 80027b8:	d01e      	beq.n	80027f8 <forward_asin+0x84>
 80027ba:	684e      	ldr	r6, [r1, #4]
 80027bc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80027c0:	4610      	mov	r0, r2
 80027c2:	1f0f      	subs	r7, r1, #4
 80027c4:	f010 0103 	ands.w	r1, r0, #3
 80027c8:	d006      	beq.n	80027d8 <forward_asin+0x64>
 80027ca:	1e52      	subs	r2, r2, #1
 80027cc:	f857 c904 	ldr.w	ip, [r7], #-4
 80027d0:	1e49      	subs	r1, r1, #1
 80027d2:	fb0c f505 	mul.w	r5, ip, r5
 80027d6:	d1f8      	bne.n	80027ca <forward_asin+0x56>
 80027d8:	0880      	lsrs	r0, r0, #2
 80027da:	d00d      	beq.n	80027f8 <forward_asin+0x84>
 80027dc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80027e0:	3910      	subs	r1, #16
 80027e2:	68ca      	ldr	r2, [r1, #12]
 80027e4:	688e      	ldr	r6, [r1, #8]
 80027e6:	684f      	ldr	r7, [r1, #4]
 80027e8:	4372      	muls	r2, r6
 80027ea:	f851 6910 	ldr.w	r6, [r1], #-16
 80027ee:	437a      	muls	r2, r7
 80027f0:	4372      	muls	r2, r6
 80027f2:	4355      	muls	r5, r2
 80027f4:	1e40      	subs	r0, r0, #1
 80027f6:	d1f4      	bne.n	80027e2 <forward_asin+0x6e>
 80027f8:	6998      	ldr	r0, [r3, #24]
 80027fa:	6886      	ldr	r6, [r0, #8]
 80027fc:	6821      	ldr	r1, [r4, #0]
 80027fe:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002802:	1f07      	subs	r7, r0, #4
 8002804:	6888      	ldr	r0, [r1, #8]
 8002806:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800280a:	1f14      	subs	r4, r2, #4
 800280c:	42b7      	cmp	r7, r6
 800280e:	d309      	bcc.n	8002824 <forward_asin+0xb0>
 8002810:	ed97 0a00 	vldr	s0, [r7]
 8002814:	f00e f8d4 	bl	80109c0 <asinf>
 8002818:	ed84 0a00 	vstr	s0, [r4]
 800281c:	1f3f      	subs	r7, r7, #4
 800281e:	1f24      	subs	r4, r4, #4
 8002820:	42b7      	cmp	r7, r6
 8002822:	d2f5      	bcs.n	8002810 <forward_asin+0x9c>
 8002824:	b001      	add	sp, #4
 8002826:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002828 <nl_func_asinh_array_f32>:
 8002828:	b570      	push	{r4, r5, r6, lr}
 800282a:	688c      	ldr	r4, [r1, #8]
 800282c:	6880      	ldr	r0, [r0, #8]
 800282e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002832:	1f0d      	subs	r5, r1, #4
 8002834:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002838:	1f0e      	subs	r6, r1, #4
 800283a:	42a5      	cmp	r5, r4
 800283c:	f0c0 800a 	bcc.w	8002854 <nl_func_asinh_array_f32+0x2c>
 8002840:	ed95 0a00 	vldr	s0, [r5]
 8002844:	f00d faa4 	bl	800fd90 <asinhf>
 8002848:	ed86 0a00 	vstr	s0, [r6]
 800284c:	1f2d      	subs	r5, r5, #4
 800284e:	1f36      	subs	r6, r6, #4
 8002850:	42a5      	cmp	r5, r4
 8002852:	d2f5      	bcs.n	8002840 <nl_func_asinh_array_f32+0x18>
 8002854:	bd70      	pop	{r4, r5, r6, pc}
	...

08002858 <forward_asinh>:
 8002858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285a:	b081      	sub	sp, #4
 800285c:	6942      	ldr	r2, [r0, #20]
 800285e:	8811      	ldrh	r1, [r2, #0]
 8002860:	2900      	cmp	r1, #0
 8002862:	bf1a      	itte	ne
 8002864:	6850      	ldrne	r0, [r2, #4]
 8002866:	1d00      	addne	r0, r0, #4
 8002868:	2004      	moveq	r0, #4
 800286a:	f04f 0501 	mov.w	r5, #1
 800286e:	6800      	ldr	r0, [r0, #0]
 8002870:	2800      	cmp	r0, #0
 8002872:	bf14      	ite	ne
 8002874:	6803      	ldrne	r3, [r0, #0]
 8002876:	2300      	moveq	r3, #0
 8002878:	2902      	cmp	r1, #2
 800287a:	bfa6      	itte	ge
 800287c:	6850      	ldrge	r0, [r2, #4]
 800287e:	3010      	addge	r0, #16
 8002880:	2004      	movlt	r0, #4
 8002882:	6800      	ldr	r0, [r0, #0]
 8002884:	2800      	cmp	r0, #0
 8002886:	bf19      	ittee	ne
 8002888:	6800      	ldrne	r0, [r0, #0]
 800288a:	f100 0418 	addne.w	r4, r0, #24
 800288e:	2100      	moveq	r1, #0
 8002890:	f101 0418 	addeq.w	r4, r1, #24
 8002894:	f103 0108 	add.w	r1, r3, #8
 8002898:	680a      	ldr	r2, [r1, #0]
 800289a:	0a12      	lsrs	r2, r2, #8
 800289c:	d01e      	beq.n	80028dc <forward_asinh+0x84>
 800289e:	684e      	ldr	r6, [r1, #4]
 80028a0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80028a4:	4610      	mov	r0, r2
 80028a6:	1f0f      	subs	r7, r1, #4
 80028a8:	f010 0103 	ands.w	r1, r0, #3
 80028ac:	d006      	beq.n	80028bc <forward_asinh+0x64>
 80028ae:	1e52      	subs	r2, r2, #1
 80028b0:	f857 c904 	ldr.w	ip, [r7], #-4
 80028b4:	1e49      	subs	r1, r1, #1
 80028b6:	fb0c f505 	mul.w	r5, ip, r5
 80028ba:	d1f8      	bne.n	80028ae <forward_asinh+0x56>
 80028bc:	0880      	lsrs	r0, r0, #2
 80028be:	d00d      	beq.n	80028dc <forward_asinh+0x84>
 80028c0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80028c4:	3910      	subs	r1, #16
 80028c6:	68ca      	ldr	r2, [r1, #12]
 80028c8:	688e      	ldr	r6, [r1, #8]
 80028ca:	684f      	ldr	r7, [r1, #4]
 80028cc:	4372      	muls	r2, r6
 80028ce:	f851 6910 	ldr.w	r6, [r1], #-16
 80028d2:	437a      	muls	r2, r7
 80028d4:	4372      	muls	r2, r6
 80028d6:	4355      	muls	r5, r2
 80028d8:	1e40      	subs	r0, r0, #1
 80028da:	d1f4      	bne.n	80028c6 <forward_asinh+0x6e>
 80028dc:	6998      	ldr	r0, [r3, #24]
 80028de:	6886      	ldr	r6, [r0, #8]
 80028e0:	6821      	ldr	r1, [r4, #0]
 80028e2:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80028e6:	1f07      	subs	r7, r0, #4
 80028e8:	6888      	ldr	r0, [r1, #8]
 80028ea:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80028ee:	1f14      	subs	r4, r2, #4
 80028f0:	42b7      	cmp	r7, r6
 80028f2:	d309      	bcc.n	8002908 <forward_asinh+0xb0>
 80028f4:	ed97 0a00 	vldr	s0, [r7]
 80028f8:	f00d fa4a 	bl	800fd90 <asinhf>
 80028fc:	ed84 0a00 	vstr	s0, [r4]
 8002900:	1f3f      	subs	r7, r7, #4
 8002902:	1f24      	subs	r4, r4, #4
 8002904:	42b7      	cmp	r7, r6
 8002906:	d2f5      	bcs.n	80028f4 <forward_asinh+0x9c>
 8002908:	b001      	add	sp, #4
 800290a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800290c <nl_func_atan_array_f32>:
 800290c:	b570      	push	{r4, r5, r6, lr}
 800290e:	688c      	ldr	r4, [r1, #8]
 8002910:	6880      	ldr	r0, [r0, #8]
 8002912:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002916:	1f0d      	subs	r5, r1, #4
 8002918:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800291c:	1f0e      	subs	r6, r1, #4
 800291e:	42a5      	cmp	r5, r4
 8002920:	f0c0 800a 	bcc.w	8002938 <nl_func_atan_array_f32+0x2c>
 8002924:	ed95 0a00 	vldr	s0, [r5]
 8002928:	f00d fa9a 	bl	800fe60 <atanf>
 800292c:	ed86 0a00 	vstr	s0, [r6]
 8002930:	1f2d      	subs	r5, r5, #4
 8002932:	1f36      	subs	r6, r6, #4
 8002934:	42a5      	cmp	r5, r4
 8002936:	d2f5      	bcs.n	8002924 <nl_func_atan_array_f32+0x18>
 8002938:	bd70      	pop	{r4, r5, r6, pc}
	...

0800293c <forward_atan>:
 800293c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800293e:	b081      	sub	sp, #4
 8002940:	6942      	ldr	r2, [r0, #20]
 8002942:	8811      	ldrh	r1, [r2, #0]
 8002944:	2900      	cmp	r1, #0
 8002946:	bf1a      	itte	ne
 8002948:	6850      	ldrne	r0, [r2, #4]
 800294a:	1d00      	addne	r0, r0, #4
 800294c:	2004      	moveq	r0, #4
 800294e:	f04f 0501 	mov.w	r5, #1
 8002952:	6800      	ldr	r0, [r0, #0]
 8002954:	2800      	cmp	r0, #0
 8002956:	bf14      	ite	ne
 8002958:	6803      	ldrne	r3, [r0, #0]
 800295a:	2300      	moveq	r3, #0
 800295c:	2902      	cmp	r1, #2
 800295e:	bfa6      	itte	ge
 8002960:	6850      	ldrge	r0, [r2, #4]
 8002962:	3010      	addge	r0, #16
 8002964:	2004      	movlt	r0, #4
 8002966:	6800      	ldr	r0, [r0, #0]
 8002968:	2800      	cmp	r0, #0
 800296a:	bf19      	ittee	ne
 800296c:	6800      	ldrne	r0, [r0, #0]
 800296e:	f100 0418 	addne.w	r4, r0, #24
 8002972:	2100      	moveq	r1, #0
 8002974:	f101 0418 	addeq.w	r4, r1, #24
 8002978:	f103 0108 	add.w	r1, r3, #8
 800297c:	680a      	ldr	r2, [r1, #0]
 800297e:	0a12      	lsrs	r2, r2, #8
 8002980:	d01e      	beq.n	80029c0 <forward_atan+0x84>
 8002982:	684e      	ldr	r6, [r1, #4]
 8002984:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002988:	4610      	mov	r0, r2
 800298a:	1f0f      	subs	r7, r1, #4
 800298c:	f010 0103 	ands.w	r1, r0, #3
 8002990:	d006      	beq.n	80029a0 <forward_atan+0x64>
 8002992:	1e52      	subs	r2, r2, #1
 8002994:	f857 c904 	ldr.w	ip, [r7], #-4
 8002998:	1e49      	subs	r1, r1, #1
 800299a:	fb0c f505 	mul.w	r5, ip, r5
 800299e:	d1f8      	bne.n	8002992 <forward_atan+0x56>
 80029a0:	0880      	lsrs	r0, r0, #2
 80029a2:	d00d      	beq.n	80029c0 <forward_atan+0x84>
 80029a4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80029a8:	3910      	subs	r1, #16
 80029aa:	68ca      	ldr	r2, [r1, #12]
 80029ac:	688e      	ldr	r6, [r1, #8]
 80029ae:	684f      	ldr	r7, [r1, #4]
 80029b0:	4372      	muls	r2, r6
 80029b2:	f851 6910 	ldr.w	r6, [r1], #-16
 80029b6:	437a      	muls	r2, r7
 80029b8:	4372      	muls	r2, r6
 80029ba:	4355      	muls	r5, r2
 80029bc:	1e40      	subs	r0, r0, #1
 80029be:	d1f4      	bne.n	80029aa <forward_atan+0x6e>
 80029c0:	6998      	ldr	r0, [r3, #24]
 80029c2:	6886      	ldr	r6, [r0, #8]
 80029c4:	6821      	ldr	r1, [r4, #0]
 80029c6:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80029ca:	1f07      	subs	r7, r0, #4
 80029cc:	6888      	ldr	r0, [r1, #8]
 80029ce:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80029d2:	1f14      	subs	r4, r2, #4
 80029d4:	42b7      	cmp	r7, r6
 80029d6:	d309      	bcc.n	80029ec <forward_atan+0xb0>
 80029d8:	ed97 0a00 	vldr	s0, [r7]
 80029dc:	f00d fa40 	bl	800fe60 <atanf>
 80029e0:	ed84 0a00 	vstr	s0, [r4]
 80029e4:	1f3f      	subs	r7, r7, #4
 80029e6:	1f24      	subs	r4, r4, #4
 80029e8:	42b7      	cmp	r7, r6
 80029ea:	d2f5      	bcs.n	80029d8 <forward_atan+0x9c>
 80029ec:	b001      	add	sp, #4
 80029ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029f0 <nl_func_atanh_array_f32>:
 80029f0:	b570      	push	{r4, r5, r6, lr}
 80029f2:	688c      	ldr	r4, [r1, #8]
 80029f4:	6880      	ldr	r0, [r0, #8]
 80029f6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80029fa:	1f0d      	subs	r5, r1, #4
 80029fc:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002a00:	1f0e      	subs	r6, r1, #4
 8002a02:	42a5      	cmp	r5, r4
 8002a04:	f0c0 800a 	bcc.w	8002a1c <nl_func_atanh_array_f32+0x2c>
 8002a08:	ed95 0a00 	vldr	s0, [r5]
 8002a0c:	f00e f804 	bl	8010a18 <atanhf>
 8002a10:	ed86 0a00 	vstr	s0, [r6]
 8002a14:	1f2d      	subs	r5, r5, #4
 8002a16:	1f36      	subs	r6, r6, #4
 8002a18:	42a5      	cmp	r5, r4
 8002a1a:	d2f5      	bcs.n	8002a08 <nl_func_atanh_array_f32+0x18>
 8002a1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002a20 <forward_atanh>:
 8002a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a22:	b081      	sub	sp, #4
 8002a24:	6942      	ldr	r2, [r0, #20]
 8002a26:	8811      	ldrh	r1, [r2, #0]
 8002a28:	2900      	cmp	r1, #0
 8002a2a:	bf1a      	itte	ne
 8002a2c:	6850      	ldrne	r0, [r2, #4]
 8002a2e:	1d00      	addne	r0, r0, #4
 8002a30:	2004      	moveq	r0, #4
 8002a32:	f04f 0501 	mov.w	r5, #1
 8002a36:	6800      	ldr	r0, [r0, #0]
 8002a38:	2800      	cmp	r0, #0
 8002a3a:	bf14      	ite	ne
 8002a3c:	6803      	ldrne	r3, [r0, #0]
 8002a3e:	2300      	moveq	r3, #0
 8002a40:	2902      	cmp	r1, #2
 8002a42:	bfa6      	itte	ge
 8002a44:	6850      	ldrge	r0, [r2, #4]
 8002a46:	3010      	addge	r0, #16
 8002a48:	2004      	movlt	r0, #4
 8002a4a:	6800      	ldr	r0, [r0, #0]
 8002a4c:	2800      	cmp	r0, #0
 8002a4e:	bf19      	ittee	ne
 8002a50:	6800      	ldrne	r0, [r0, #0]
 8002a52:	f100 0418 	addne.w	r4, r0, #24
 8002a56:	2100      	moveq	r1, #0
 8002a58:	f101 0418 	addeq.w	r4, r1, #24
 8002a5c:	f103 0108 	add.w	r1, r3, #8
 8002a60:	680a      	ldr	r2, [r1, #0]
 8002a62:	0a12      	lsrs	r2, r2, #8
 8002a64:	d01e      	beq.n	8002aa4 <forward_atanh+0x84>
 8002a66:	684e      	ldr	r6, [r1, #4]
 8002a68:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	1f0f      	subs	r7, r1, #4
 8002a70:	f010 0103 	ands.w	r1, r0, #3
 8002a74:	d006      	beq.n	8002a84 <forward_atanh+0x64>
 8002a76:	1e52      	subs	r2, r2, #1
 8002a78:	f857 c904 	ldr.w	ip, [r7], #-4
 8002a7c:	1e49      	subs	r1, r1, #1
 8002a7e:	fb0c f505 	mul.w	r5, ip, r5
 8002a82:	d1f8      	bne.n	8002a76 <forward_atanh+0x56>
 8002a84:	0880      	lsrs	r0, r0, #2
 8002a86:	d00d      	beq.n	8002aa4 <forward_atanh+0x84>
 8002a88:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002a8c:	3910      	subs	r1, #16
 8002a8e:	68ca      	ldr	r2, [r1, #12]
 8002a90:	688e      	ldr	r6, [r1, #8]
 8002a92:	684f      	ldr	r7, [r1, #4]
 8002a94:	4372      	muls	r2, r6
 8002a96:	f851 6910 	ldr.w	r6, [r1], #-16
 8002a9a:	437a      	muls	r2, r7
 8002a9c:	4372      	muls	r2, r6
 8002a9e:	4355      	muls	r5, r2
 8002aa0:	1e40      	subs	r0, r0, #1
 8002aa2:	d1f4      	bne.n	8002a8e <forward_atanh+0x6e>
 8002aa4:	6998      	ldr	r0, [r3, #24]
 8002aa6:	6886      	ldr	r6, [r0, #8]
 8002aa8:	6821      	ldr	r1, [r4, #0]
 8002aaa:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002aae:	1f07      	subs	r7, r0, #4
 8002ab0:	6888      	ldr	r0, [r1, #8]
 8002ab2:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002ab6:	1f14      	subs	r4, r2, #4
 8002ab8:	42b7      	cmp	r7, r6
 8002aba:	d309      	bcc.n	8002ad0 <forward_atanh+0xb0>
 8002abc:	ed97 0a00 	vldr	s0, [r7]
 8002ac0:	f00d ffaa 	bl	8010a18 <atanhf>
 8002ac4:	ed84 0a00 	vstr	s0, [r4]
 8002ac8:	1f3f      	subs	r7, r7, #4
 8002aca:	1f24      	subs	r4, r4, #4
 8002acc:	42b7      	cmp	r7, r6
 8002ace:	d2f5      	bcs.n	8002abc <forward_atanh+0x9c>
 8002ad0:	b001      	add	sp, #4
 8002ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ad4 <nl_func_cos_array_f32>:
 8002ad4:	b570      	push	{r4, r5, r6, lr}
 8002ad6:	688c      	ldr	r4, [r1, #8]
 8002ad8:	6880      	ldr	r0, [r0, #8]
 8002ada:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002ade:	1f0d      	subs	r5, r1, #4
 8002ae0:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002ae4:	1f0e      	subs	r6, r1, #4
 8002ae6:	42a5      	cmp	r5, r4
 8002ae8:	f0c0 800a 	bcc.w	8002b00 <nl_func_cos_array_f32+0x2c>
 8002aec:	ed95 0a00 	vldr	s0, [r5]
 8002af0:	f00d facc 	bl	801008c <cosf>
 8002af4:	ed86 0a00 	vstr	s0, [r6]
 8002af8:	1f2d      	subs	r5, r5, #4
 8002afa:	1f36      	subs	r6, r6, #4
 8002afc:	42a5      	cmp	r5, r4
 8002afe:	d2f5      	bcs.n	8002aec <nl_func_cos_array_f32+0x18>
 8002b00:	bd70      	pop	{r4, r5, r6, pc}
	...

08002b04 <forward_cos>:
 8002b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b06:	b081      	sub	sp, #4
 8002b08:	6942      	ldr	r2, [r0, #20]
 8002b0a:	8811      	ldrh	r1, [r2, #0]
 8002b0c:	2900      	cmp	r1, #0
 8002b0e:	bf1a      	itte	ne
 8002b10:	6850      	ldrne	r0, [r2, #4]
 8002b12:	1d00      	addne	r0, r0, #4
 8002b14:	2004      	moveq	r0, #4
 8002b16:	f04f 0501 	mov.w	r5, #1
 8002b1a:	6800      	ldr	r0, [r0, #0]
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	bf14      	ite	ne
 8002b20:	6803      	ldrne	r3, [r0, #0]
 8002b22:	2300      	moveq	r3, #0
 8002b24:	2902      	cmp	r1, #2
 8002b26:	bfa6      	itte	ge
 8002b28:	6850      	ldrge	r0, [r2, #4]
 8002b2a:	3010      	addge	r0, #16
 8002b2c:	2004      	movlt	r0, #4
 8002b2e:	6800      	ldr	r0, [r0, #0]
 8002b30:	2800      	cmp	r0, #0
 8002b32:	bf19      	ittee	ne
 8002b34:	6800      	ldrne	r0, [r0, #0]
 8002b36:	f100 0418 	addne.w	r4, r0, #24
 8002b3a:	2100      	moveq	r1, #0
 8002b3c:	f101 0418 	addeq.w	r4, r1, #24
 8002b40:	f103 0108 	add.w	r1, r3, #8
 8002b44:	680a      	ldr	r2, [r1, #0]
 8002b46:	0a12      	lsrs	r2, r2, #8
 8002b48:	d01e      	beq.n	8002b88 <forward_cos+0x84>
 8002b4a:	684e      	ldr	r6, [r1, #4]
 8002b4c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002b50:	4610      	mov	r0, r2
 8002b52:	1f0f      	subs	r7, r1, #4
 8002b54:	f010 0103 	ands.w	r1, r0, #3
 8002b58:	d006      	beq.n	8002b68 <forward_cos+0x64>
 8002b5a:	1e52      	subs	r2, r2, #1
 8002b5c:	f857 c904 	ldr.w	ip, [r7], #-4
 8002b60:	1e49      	subs	r1, r1, #1
 8002b62:	fb0c f505 	mul.w	r5, ip, r5
 8002b66:	d1f8      	bne.n	8002b5a <forward_cos+0x56>
 8002b68:	0880      	lsrs	r0, r0, #2
 8002b6a:	d00d      	beq.n	8002b88 <forward_cos+0x84>
 8002b6c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002b70:	3910      	subs	r1, #16
 8002b72:	68ca      	ldr	r2, [r1, #12]
 8002b74:	688e      	ldr	r6, [r1, #8]
 8002b76:	684f      	ldr	r7, [r1, #4]
 8002b78:	4372      	muls	r2, r6
 8002b7a:	f851 6910 	ldr.w	r6, [r1], #-16
 8002b7e:	437a      	muls	r2, r7
 8002b80:	4372      	muls	r2, r6
 8002b82:	4355      	muls	r5, r2
 8002b84:	1e40      	subs	r0, r0, #1
 8002b86:	d1f4      	bne.n	8002b72 <forward_cos+0x6e>
 8002b88:	6998      	ldr	r0, [r3, #24]
 8002b8a:	6886      	ldr	r6, [r0, #8]
 8002b8c:	6821      	ldr	r1, [r4, #0]
 8002b8e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002b92:	1f07      	subs	r7, r0, #4
 8002b94:	6888      	ldr	r0, [r1, #8]
 8002b96:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002b9a:	1f14      	subs	r4, r2, #4
 8002b9c:	42b7      	cmp	r7, r6
 8002b9e:	d309      	bcc.n	8002bb4 <forward_cos+0xb0>
 8002ba0:	ed97 0a00 	vldr	s0, [r7]
 8002ba4:	f00d fa72 	bl	801008c <cosf>
 8002ba8:	ed84 0a00 	vstr	s0, [r4]
 8002bac:	1f3f      	subs	r7, r7, #4
 8002bae:	1f24      	subs	r4, r4, #4
 8002bb0:	42b7      	cmp	r7, r6
 8002bb2:	d2f5      	bcs.n	8002ba0 <forward_cos+0x9c>
 8002bb4:	b001      	add	sp, #4
 8002bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bb8 <nl_func_cosh_array_f32>:
 8002bb8:	b570      	push	{r4, r5, r6, lr}
 8002bba:	688c      	ldr	r4, [r1, #8]
 8002bbc:	6880      	ldr	r0, [r0, #8]
 8002bbe:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002bc2:	1f0d      	subs	r5, r1, #4
 8002bc4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002bc8:	1f0e      	subs	r6, r1, #4
 8002bca:	42a5      	cmp	r5, r4
 8002bcc:	f0c0 800a 	bcc.w	8002be4 <nl_func_cosh_array_f32+0x2c>
 8002bd0:	ed95 0a00 	vldr	s0, [r5]
 8002bd4:	f00d ff50 	bl	8010a78 <coshf>
 8002bd8:	ed86 0a00 	vstr	s0, [r6]
 8002bdc:	1f2d      	subs	r5, r5, #4
 8002bde:	1f36      	subs	r6, r6, #4
 8002be0:	42a5      	cmp	r5, r4
 8002be2:	d2f5      	bcs.n	8002bd0 <nl_func_cosh_array_f32+0x18>
 8002be4:	bd70      	pop	{r4, r5, r6, pc}
	...

08002be8 <forward_cosh>:
 8002be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bea:	b081      	sub	sp, #4
 8002bec:	6942      	ldr	r2, [r0, #20]
 8002bee:	8811      	ldrh	r1, [r2, #0]
 8002bf0:	2900      	cmp	r1, #0
 8002bf2:	bf1a      	itte	ne
 8002bf4:	6850      	ldrne	r0, [r2, #4]
 8002bf6:	1d00      	addne	r0, r0, #4
 8002bf8:	2004      	moveq	r0, #4
 8002bfa:	f04f 0501 	mov.w	r5, #1
 8002bfe:	6800      	ldr	r0, [r0, #0]
 8002c00:	2800      	cmp	r0, #0
 8002c02:	bf14      	ite	ne
 8002c04:	6803      	ldrne	r3, [r0, #0]
 8002c06:	2300      	moveq	r3, #0
 8002c08:	2902      	cmp	r1, #2
 8002c0a:	bfa6      	itte	ge
 8002c0c:	6850      	ldrge	r0, [r2, #4]
 8002c0e:	3010      	addge	r0, #16
 8002c10:	2004      	movlt	r0, #4
 8002c12:	6800      	ldr	r0, [r0, #0]
 8002c14:	2800      	cmp	r0, #0
 8002c16:	bf19      	ittee	ne
 8002c18:	6800      	ldrne	r0, [r0, #0]
 8002c1a:	f100 0418 	addne.w	r4, r0, #24
 8002c1e:	2100      	moveq	r1, #0
 8002c20:	f101 0418 	addeq.w	r4, r1, #24
 8002c24:	f103 0108 	add.w	r1, r3, #8
 8002c28:	680a      	ldr	r2, [r1, #0]
 8002c2a:	0a12      	lsrs	r2, r2, #8
 8002c2c:	d01e      	beq.n	8002c6c <forward_cosh+0x84>
 8002c2e:	684e      	ldr	r6, [r1, #4]
 8002c30:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002c34:	4610      	mov	r0, r2
 8002c36:	1f0f      	subs	r7, r1, #4
 8002c38:	f010 0103 	ands.w	r1, r0, #3
 8002c3c:	d006      	beq.n	8002c4c <forward_cosh+0x64>
 8002c3e:	1e52      	subs	r2, r2, #1
 8002c40:	f857 c904 	ldr.w	ip, [r7], #-4
 8002c44:	1e49      	subs	r1, r1, #1
 8002c46:	fb0c f505 	mul.w	r5, ip, r5
 8002c4a:	d1f8      	bne.n	8002c3e <forward_cosh+0x56>
 8002c4c:	0880      	lsrs	r0, r0, #2
 8002c4e:	d00d      	beq.n	8002c6c <forward_cosh+0x84>
 8002c50:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002c54:	3910      	subs	r1, #16
 8002c56:	68ca      	ldr	r2, [r1, #12]
 8002c58:	688e      	ldr	r6, [r1, #8]
 8002c5a:	684f      	ldr	r7, [r1, #4]
 8002c5c:	4372      	muls	r2, r6
 8002c5e:	f851 6910 	ldr.w	r6, [r1], #-16
 8002c62:	437a      	muls	r2, r7
 8002c64:	4372      	muls	r2, r6
 8002c66:	4355      	muls	r5, r2
 8002c68:	1e40      	subs	r0, r0, #1
 8002c6a:	d1f4      	bne.n	8002c56 <forward_cosh+0x6e>
 8002c6c:	6998      	ldr	r0, [r3, #24]
 8002c6e:	6886      	ldr	r6, [r0, #8]
 8002c70:	6821      	ldr	r1, [r4, #0]
 8002c72:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002c76:	1f07      	subs	r7, r0, #4
 8002c78:	6888      	ldr	r0, [r1, #8]
 8002c7a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002c7e:	1f14      	subs	r4, r2, #4
 8002c80:	42b7      	cmp	r7, r6
 8002c82:	d309      	bcc.n	8002c98 <forward_cosh+0xb0>
 8002c84:	ed97 0a00 	vldr	s0, [r7]
 8002c88:	f00d fef6 	bl	8010a78 <coshf>
 8002c8c:	ed84 0a00 	vstr	s0, [r4]
 8002c90:	1f3f      	subs	r7, r7, #4
 8002c92:	1f24      	subs	r4, r4, #4
 8002c94:	42b7      	cmp	r7, r6
 8002c96:	d2f5      	bcs.n	8002c84 <forward_cosh+0x9c>
 8002c98:	b001      	add	sp, #4
 8002c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c9c <nl_func_erf_array_f32>:
 8002c9c:	b570      	push	{r4, r5, r6, lr}
 8002c9e:	688c      	ldr	r4, [r1, #8]
 8002ca0:	6880      	ldr	r0, [r0, #8]
 8002ca2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002ca6:	1f0d      	subs	r5, r1, #4
 8002ca8:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002cac:	1f0e      	subs	r6, r1, #4
 8002cae:	42a5      	cmp	r5, r4
 8002cb0:	f0c0 800a 	bcc.w	8002cc8 <nl_func_erf_array_f32+0x2c>
 8002cb4:	ed95 0a00 	vldr	s0, [r5]
 8002cb8:	f00d fa2c 	bl	8010114 <erff>
 8002cbc:	ed86 0a00 	vstr	s0, [r6]
 8002cc0:	1f2d      	subs	r5, r5, #4
 8002cc2:	1f36      	subs	r6, r6, #4
 8002cc4:	42a5      	cmp	r5, r4
 8002cc6:	d2f5      	bcs.n	8002cb4 <nl_func_erf_array_f32+0x18>
 8002cc8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ccc <forward_erf>:
 8002ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cce:	b081      	sub	sp, #4
 8002cd0:	6942      	ldr	r2, [r0, #20]
 8002cd2:	8811      	ldrh	r1, [r2, #0]
 8002cd4:	2900      	cmp	r1, #0
 8002cd6:	bf1a      	itte	ne
 8002cd8:	6850      	ldrne	r0, [r2, #4]
 8002cda:	1d00      	addne	r0, r0, #4
 8002cdc:	2004      	moveq	r0, #4
 8002cde:	f04f 0501 	mov.w	r5, #1
 8002ce2:	6800      	ldr	r0, [r0, #0]
 8002ce4:	2800      	cmp	r0, #0
 8002ce6:	bf14      	ite	ne
 8002ce8:	6803      	ldrne	r3, [r0, #0]
 8002cea:	2300      	moveq	r3, #0
 8002cec:	2902      	cmp	r1, #2
 8002cee:	bfa6      	itte	ge
 8002cf0:	6850      	ldrge	r0, [r2, #4]
 8002cf2:	3010      	addge	r0, #16
 8002cf4:	2004      	movlt	r0, #4
 8002cf6:	6800      	ldr	r0, [r0, #0]
 8002cf8:	2800      	cmp	r0, #0
 8002cfa:	bf19      	ittee	ne
 8002cfc:	6800      	ldrne	r0, [r0, #0]
 8002cfe:	f100 0418 	addne.w	r4, r0, #24
 8002d02:	2100      	moveq	r1, #0
 8002d04:	f101 0418 	addeq.w	r4, r1, #24
 8002d08:	f103 0108 	add.w	r1, r3, #8
 8002d0c:	680a      	ldr	r2, [r1, #0]
 8002d0e:	0a12      	lsrs	r2, r2, #8
 8002d10:	d01e      	beq.n	8002d50 <forward_erf+0x84>
 8002d12:	684e      	ldr	r6, [r1, #4]
 8002d14:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002d18:	4610      	mov	r0, r2
 8002d1a:	1f0f      	subs	r7, r1, #4
 8002d1c:	f010 0103 	ands.w	r1, r0, #3
 8002d20:	d006      	beq.n	8002d30 <forward_erf+0x64>
 8002d22:	1e52      	subs	r2, r2, #1
 8002d24:	f857 c904 	ldr.w	ip, [r7], #-4
 8002d28:	1e49      	subs	r1, r1, #1
 8002d2a:	fb0c f505 	mul.w	r5, ip, r5
 8002d2e:	d1f8      	bne.n	8002d22 <forward_erf+0x56>
 8002d30:	0880      	lsrs	r0, r0, #2
 8002d32:	d00d      	beq.n	8002d50 <forward_erf+0x84>
 8002d34:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002d38:	3910      	subs	r1, #16
 8002d3a:	68ca      	ldr	r2, [r1, #12]
 8002d3c:	688e      	ldr	r6, [r1, #8]
 8002d3e:	684f      	ldr	r7, [r1, #4]
 8002d40:	4372      	muls	r2, r6
 8002d42:	f851 6910 	ldr.w	r6, [r1], #-16
 8002d46:	437a      	muls	r2, r7
 8002d48:	4372      	muls	r2, r6
 8002d4a:	4355      	muls	r5, r2
 8002d4c:	1e40      	subs	r0, r0, #1
 8002d4e:	d1f4      	bne.n	8002d3a <forward_erf+0x6e>
 8002d50:	6998      	ldr	r0, [r3, #24]
 8002d52:	6886      	ldr	r6, [r0, #8]
 8002d54:	6821      	ldr	r1, [r4, #0]
 8002d56:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002d5a:	1f07      	subs	r7, r0, #4
 8002d5c:	6888      	ldr	r0, [r1, #8]
 8002d5e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002d62:	1f14      	subs	r4, r2, #4
 8002d64:	42b7      	cmp	r7, r6
 8002d66:	d309      	bcc.n	8002d7c <forward_erf+0xb0>
 8002d68:	ed97 0a00 	vldr	s0, [r7]
 8002d6c:	f00d f9d2 	bl	8010114 <erff>
 8002d70:	ed84 0a00 	vstr	s0, [r4]
 8002d74:	1f3f      	subs	r7, r7, #4
 8002d76:	1f24      	subs	r4, r4, #4
 8002d78:	42b7      	cmp	r7, r6
 8002d7a:	d2f5      	bcs.n	8002d68 <forward_erf+0x9c>
 8002d7c:	b001      	add	sp, #4
 8002d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d80 <nl_func_log_array_f32>:
 8002d80:	b570      	push	{r4, r5, r6, lr}
 8002d82:	688c      	ldr	r4, [r1, #8]
 8002d84:	6880      	ldr	r0, [r0, #8]
 8002d86:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002d8a:	1f0d      	subs	r5, r1, #4
 8002d8c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002d90:	1f0e      	subs	r6, r1, #4
 8002d92:	42a5      	cmp	r5, r4
 8002d94:	f0c0 800a 	bcc.w	8002dac <nl_func_log_array_f32+0x2c>
 8002d98:	ed95 0a00 	vldr	s0, [r5]
 8002d9c:	f00d feea 	bl	8010b74 <logf>
 8002da0:	ed86 0a00 	vstr	s0, [r6]
 8002da4:	1f2d      	subs	r5, r5, #4
 8002da6:	1f36      	subs	r6, r6, #4
 8002da8:	42a5      	cmp	r5, r4
 8002daa:	d2f5      	bcs.n	8002d98 <nl_func_log_array_f32+0x18>
 8002dac:	bd70      	pop	{r4, r5, r6, pc}
	...

08002db0 <forward_log>:
 8002db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002db2:	b081      	sub	sp, #4
 8002db4:	6942      	ldr	r2, [r0, #20]
 8002db6:	8811      	ldrh	r1, [r2, #0]
 8002db8:	2900      	cmp	r1, #0
 8002dba:	bf1a      	itte	ne
 8002dbc:	6850      	ldrne	r0, [r2, #4]
 8002dbe:	1d00      	addne	r0, r0, #4
 8002dc0:	2004      	moveq	r0, #4
 8002dc2:	f04f 0501 	mov.w	r5, #1
 8002dc6:	6800      	ldr	r0, [r0, #0]
 8002dc8:	2800      	cmp	r0, #0
 8002dca:	bf14      	ite	ne
 8002dcc:	6803      	ldrne	r3, [r0, #0]
 8002dce:	2300      	moveq	r3, #0
 8002dd0:	2902      	cmp	r1, #2
 8002dd2:	bfa6      	itte	ge
 8002dd4:	6850      	ldrge	r0, [r2, #4]
 8002dd6:	3010      	addge	r0, #16
 8002dd8:	2004      	movlt	r0, #4
 8002dda:	6800      	ldr	r0, [r0, #0]
 8002ddc:	2800      	cmp	r0, #0
 8002dde:	bf19      	ittee	ne
 8002de0:	6800      	ldrne	r0, [r0, #0]
 8002de2:	f100 0418 	addne.w	r4, r0, #24
 8002de6:	2100      	moveq	r1, #0
 8002de8:	f101 0418 	addeq.w	r4, r1, #24
 8002dec:	f103 0108 	add.w	r1, r3, #8
 8002df0:	680a      	ldr	r2, [r1, #0]
 8002df2:	0a12      	lsrs	r2, r2, #8
 8002df4:	d01e      	beq.n	8002e34 <forward_log+0x84>
 8002df6:	684e      	ldr	r6, [r1, #4]
 8002df8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	1f0f      	subs	r7, r1, #4
 8002e00:	f010 0103 	ands.w	r1, r0, #3
 8002e04:	d006      	beq.n	8002e14 <forward_log+0x64>
 8002e06:	1e52      	subs	r2, r2, #1
 8002e08:	f857 c904 	ldr.w	ip, [r7], #-4
 8002e0c:	1e49      	subs	r1, r1, #1
 8002e0e:	fb0c f505 	mul.w	r5, ip, r5
 8002e12:	d1f8      	bne.n	8002e06 <forward_log+0x56>
 8002e14:	0880      	lsrs	r0, r0, #2
 8002e16:	d00d      	beq.n	8002e34 <forward_log+0x84>
 8002e18:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002e1c:	3910      	subs	r1, #16
 8002e1e:	68ca      	ldr	r2, [r1, #12]
 8002e20:	688e      	ldr	r6, [r1, #8]
 8002e22:	684f      	ldr	r7, [r1, #4]
 8002e24:	4372      	muls	r2, r6
 8002e26:	f851 6910 	ldr.w	r6, [r1], #-16
 8002e2a:	437a      	muls	r2, r7
 8002e2c:	4372      	muls	r2, r6
 8002e2e:	4355      	muls	r5, r2
 8002e30:	1e40      	subs	r0, r0, #1
 8002e32:	d1f4      	bne.n	8002e1e <forward_log+0x6e>
 8002e34:	6998      	ldr	r0, [r3, #24]
 8002e36:	6886      	ldr	r6, [r0, #8]
 8002e38:	6821      	ldr	r1, [r4, #0]
 8002e3a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002e3e:	1f07      	subs	r7, r0, #4
 8002e40:	6888      	ldr	r0, [r1, #8]
 8002e42:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002e46:	1f14      	subs	r4, r2, #4
 8002e48:	42b7      	cmp	r7, r6
 8002e4a:	d309      	bcc.n	8002e60 <forward_log+0xb0>
 8002e4c:	ed97 0a00 	vldr	s0, [r7]
 8002e50:	f00d fe90 	bl	8010b74 <logf>
 8002e54:	ed84 0a00 	vstr	s0, [r4]
 8002e58:	1f3f      	subs	r7, r7, #4
 8002e5a:	1f24      	subs	r4, r4, #4
 8002e5c:	42b7      	cmp	r7, r6
 8002e5e:	d2f5      	bcs.n	8002e4c <forward_log+0x9c>
 8002e60:	b001      	add	sp, #4
 8002e62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e64 <nl_func_rsqrt_array_f32>:
 8002e64:	b570      	push	{r4, r5, r6, lr}
 8002e66:	460c      	mov	r4, r1
 8002e68:	6880      	ldr	r0, [r0, #8]
 8002e6a:	68a1      	ldr	r1, [r4, #8]
 8002e6c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002e70:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002e74:	1f1d      	subs	r5, r3, #4
 8002e76:	1f16      	subs	r6, r2, #4
 8002e78:	428d      	cmp	r5, r1
 8002e7a:	d30e      	bcc.n	8002e9a <nl_func_rsqrt_array_f32+0x36>
 8002e7c:	ed95 0a00 	vldr	s0, [r5]
 8002e80:	f003 f930 	bl	80060e4 <ai_math_sqrt>
 8002e84:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002e88:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8002e8c:	edc6 0a00 	vstr	s1, [r6]
 8002e90:	1f2d      	subs	r5, r5, #4
 8002e92:	68a0      	ldr	r0, [r4, #8]
 8002e94:	1f36      	subs	r6, r6, #4
 8002e96:	4285      	cmp	r5, r0
 8002e98:	d2f0      	bcs.n	8002e7c <nl_func_rsqrt_array_f32+0x18>
 8002e9a:	bd70      	pop	{r4, r5, r6, pc}

08002e9c <forward_rsqrt>:
 8002e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e9e:	b081      	sub	sp, #4
 8002ea0:	6942      	ldr	r2, [r0, #20]
 8002ea2:	8811      	ldrh	r1, [r2, #0]
 8002ea4:	2900      	cmp	r1, #0
 8002ea6:	bf1a      	itte	ne
 8002ea8:	6850      	ldrne	r0, [r2, #4]
 8002eaa:	1d00      	addne	r0, r0, #4
 8002eac:	2004      	moveq	r0, #4
 8002eae:	f04f 0501 	mov.w	r5, #1
 8002eb2:	6800      	ldr	r0, [r0, #0]
 8002eb4:	2800      	cmp	r0, #0
 8002eb6:	bf14      	ite	ne
 8002eb8:	6803      	ldrne	r3, [r0, #0]
 8002eba:	2300      	moveq	r3, #0
 8002ebc:	2902      	cmp	r1, #2
 8002ebe:	bfa6      	itte	ge
 8002ec0:	6850      	ldrge	r0, [r2, #4]
 8002ec2:	3010      	addge	r0, #16
 8002ec4:	2004      	movlt	r0, #4
 8002ec6:	6800      	ldr	r0, [r0, #0]
 8002ec8:	2800      	cmp	r0, #0
 8002eca:	bf19      	ittee	ne
 8002ecc:	6800      	ldrne	r0, [r0, #0]
 8002ece:	f100 0418 	addne.w	r4, r0, #24
 8002ed2:	2100      	moveq	r1, #0
 8002ed4:	f101 0418 	addeq.w	r4, r1, #24
 8002ed8:	f103 0108 	add.w	r1, r3, #8
 8002edc:	680a      	ldr	r2, [r1, #0]
 8002ede:	0a12      	lsrs	r2, r2, #8
 8002ee0:	d01e      	beq.n	8002f20 <forward_rsqrt+0x84>
 8002ee2:	684e      	ldr	r6, [r1, #4]
 8002ee4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002ee8:	4610      	mov	r0, r2
 8002eea:	1f0f      	subs	r7, r1, #4
 8002eec:	f010 0103 	ands.w	r1, r0, #3
 8002ef0:	d006      	beq.n	8002f00 <forward_rsqrt+0x64>
 8002ef2:	1e52      	subs	r2, r2, #1
 8002ef4:	f857 c904 	ldr.w	ip, [r7], #-4
 8002ef8:	1e49      	subs	r1, r1, #1
 8002efa:	fb0c f505 	mul.w	r5, ip, r5
 8002efe:	d1f8      	bne.n	8002ef2 <forward_rsqrt+0x56>
 8002f00:	0880      	lsrs	r0, r0, #2
 8002f02:	d00d      	beq.n	8002f20 <forward_rsqrt+0x84>
 8002f04:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002f08:	3910      	subs	r1, #16
 8002f0a:	68ca      	ldr	r2, [r1, #12]
 8002f0c:	688e      	ldr	r6, [r1, #8]
 8002f0e:	684f      	ldr	r7, [r1, #4]
 8002f10:	4372      	muls	r2, r6
 8002f12:	f851 6910 	ldr.w	r6, [r1], #-16
 8002f16:	437a      	muls	r2, r7
 8002f18:	4372      	muls	r2, r6
 8002f1a:	4355      	muls	r5, r2
 8002f1c:	1e40      	subs	r0, r0, #1
 8002f1e:	d1f4      	bne.n	8002f0a <forward_rsqrt+0x6e>
 8002f20:	699e      	ldr	r6, [r3, #24]
 8002f22:	68b0      	ldr	r0, [r6, #8]
 8002f24:	6822      	ldr	r2, [r4, #0]
 8002f26:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8002f2a:	1f0f      	subs	r7, r1, #4
 8002f2c:	6891      	ldr	r1, [r2, #8]
 8002f2e:	eb01 0385 	add.w	r3, r1, r5, lsl #2
 8002f32:	1f1c      	subs	r4, r3, #4
 8002f34:	4287      	cmp	r7, r0
 8002f36:	d30e      	bcc.n	8002f56 <forward_rsqrt+0xba>
 8002f38:	ed97 0a00 	vldr	s0, [r7]
 8002f3c:	f003 f8d2 	bl	80060e4 <ai_math_sqrt>
 8002f40:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002f44:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8002f48:	edc4 0a00 	vstr	s1, [r4]
 8002f4c:	1f3f      	subs	r7, r7, #4
 8002f4e:	68b0      	ldr	r0, [r6, #8]
 8002f50:	1f24      	subs	r4, r4, #4
 8002f52:	4287      	cmp	r7, r0
 8002f54:	d2f0      	bcs.n	8002f38 <forward_rsqrt+0x9c>
 8002f56:	b001      	add	sp, #4
 8002f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002f5c <nl_func_sin_array_f32>:
 8002f5c:	b570      	push	{r4, r5, r6, lr}
 8002f5e:	688c      	ldr	r4, [r1, #8]
 8002f60:	6880      	ldr	r0, [r0, #8]
 8002f62:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002f66:	1f0d      	subs	r5, r1, #4
 8002f68:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002f6c:	1f0e      	subs	r6, r1, #4
 8002f6e:	42a5      	cmp	r5, r4
 8002f70:	f0c0 800a 	bcc.w	8002f88 <nl_func_sin_array_f32+0x2c>
 8002f74:	ed95 0a00 	vldr	s0, [r5]
 8002f78:	f00d fc12 	bl	80107a0 <sinf>
 8002f7c:	ed86 0a00 	vstr	s0, [r6]
 8002f80:	1f2d      	subs	r5, r5, #4
 8002f82:	1f36      	subs	r6, r6, #4
 8002f84:	42a5      	cmp	r5, r4
 8002f86:	d2f5      	bcs.n	8002f74 <nl_func_sin_array_f32+0x18>
 8002f88:	bd70      	pop	{r4, r5, r6, pc}
	...

08002f8c <forward_sin>:
 8002f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f8e:	b081      	sub	sp, #4
 8002f90:	6942      	ldr	r2, [r0, #20]
 8002f92:	8811      	ldrh	r1, [r2, #0]
 8002f94:	2900      	cmp	r1, #0
 8002f96:	bf1a      	itte	ne
 8002f98:	6850      	ldrne	r0, [r2, #4]
 8002f9a:	1d00      	addne	r0, r0, #4
 8002f9c:	2004      	moveq	r0, #4
 8002f9e:	f04f 0501 	mov.w	r5, #1
 8002fa2:	6800      	ldr	r0, [r0, #0]
 8002fa4:	2800      	cmp	r0, #0
 8002fa6:	bf14      	ite	ne
 8002fa8:	6803      	ldrne	r3, [r0, #0]
 8002faa:	2300      	moveq	r3, #0
 8002fac:	2902      	cmp	r1, #2
 8002fae:	bfa6      	itte	ge
 8002fb0:	6850      	ldrge	r0, [r2, #4]
 8002fb2:	3010      	addge	r0, #16
 8002fb4:	2004      	movlt	r0, #4
 8002fb6:	6800      	ldr	r0, [r0, #0]
 8002fb8:	2800      	cmp	r0, #0
 8002fba:	bf19      	ittee	ne
 8002fbc:	6800      	ldrne	r0, [r0, #0]
 8002fbe:	f100 0418 	addne.w	r4, r0, #24
 8002fc2:	2100      	moveq	r1, #0
 8002fc4:	f101 0418 	addeq.w	r4, r1, #24
 8002fc8:	f103 0108 	add.w	r1, r3, #8
 8002fcc:	680a      	ldr	r2, [r1, #0]
 8002fce:	0a12      	lsrs	r2, r2, #8
 8002fd0:	d01e      	beq.n	8003010 <forward_sin+0x84>
 8002fd2:	684e      	ldr	r6, [r1, #4]
 8002fd4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002fd8:	4610      	mov	r0, r2
 8002fda:	1f0f      	subs	r7, r1, #4
 8002fdc:	f010 0103 	ands.w	r1, r0, #3
 8002fe0:	d006      	beq.n	8002ff0 <forward_sin+0x64>
 8002fe2:	1e52      	subs	r2, r2, #1
 8002fe4:	f857 c904 	ldr.w	ip, [r7], #-4
 8002fe8:	1e49      	subs	r1, r1, #1
 8002fea:	fb0c f505 	mul.w	r5, ip, r5
 8002fee:	d1f8      	bne.n	8002fe2 <forward_sin+0x56>
 8002ff0:	0880      	lsrs	r0, r0, #2
 8002ff2:	d00d      	beq.n	8003010 <forward_sin+0x84>
 8002ff4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002ff8:	3910      	subs	r1, #16
 8002ffa:	68ca      	ldr	r2, [r1, #12]
 8002ffc:	688e      	ldr	r6, [r1, #8]
 8002ffe:	684f      	ldr	r7, [r1, #4]
 8003000:	4372      	muls	r2, r6
 8003002:	f851 6910 	ldr.w	r6, [r1], #-16
 8003006:	437a      	muls	r2, r7
 8003008:	4372      	muls	r2, r6
 800300a:	4355      	muls	r5, r2
 800300c:	1e40      	subs	r0, r0, #1
 800300e:	d1f4      	bne.n	8002ffa <forward_sin+0x6e>
 8003010:	6998      	ldr	r0, [r3, #24]
 8003012:	6886      	ldr	r6, [r0, #8]
 8003014:	6821      	ldr	r1, [r4, #0]
 8003016:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800301a:	1f07      	subs	r7, r0, #4
 800301c:	6888      	ldr	r0, [r1, #8]
 800301e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003022:	1f14      	subs	r4, r2, #4
 8003024:	42b7      	cmp	r7, r6
 8003026:	d309      	bcc.n	800303c <forward_sin+0xb0>
 8003028:	ed97 0a00 	vldr	s0, [r7]
 800302c:	f00d fbb8 	bl	80107a0 <sinf>
 8003030:	ed84 0a00 	vstr	s0, [r4]
 8003034:	1f3f      	subs	r7, r7, #4
 8003036:	1f24      	subs	r4, r4, #4
 8003038:	42b7      	cmp	r7, r6
 800303a:	d2f5      	bcs.n	8003028 <forward_sin+0x9c>
 800303c:	b001      	add	sp, #4
 800303e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003040 <nl_func_sinh_array_f32>:
 8003040:	b570      	push	{r4, r5, r6, lr}
 8003042:	688c      	ldr	r4, [r1, #8]
 8003044:	6880      	ldr	r0, [r0, #8]
 8003046:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800304a:	1f0d      	subs	r5, r1, #4
 800304c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003050:	1f0e      	subs	r6, r1, #4
 8003052:	42a5      	cmp	r5, r4
 8003054:	f0c0 800a 	bcc.w	800306c <nl_func_sinh_array_f32+0x2c>
 8003058:	ed95 0a00 	vldr	s0, [r5]
 800305c:	f00d fe3e 	bl	8010cdc <sinhf>
 8003060:	ed86 0a00 	vstr	s0, [r6]
 8003064:	1f2d      	subs	r5, r5, #4
 8003066:	1f36      	subs	r6, r6, #4
 8003068:	42a5      	cmp	r5, r4
 800306a:	d2f5      	bcs.n	8003058 <nl_func_sinh_array_f32+0x18>
 800306c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003070 <forward_sinh>:
 8003070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003072:	b081      	sub	sp, #4
 8003074:	6942      	ldr	r2, [r0, #20]
 8003076:	8811      	ldrh	r1, [r2, #0]
 8003078:	2900      	cmp	r1, #0
 800307a:	bf1a      	itte	ne
 800307c:	6850      	ldrne	r0, [r2, #4]
 800307e:	1d00      	addne	r0, r0, #4
 8003080:	2004      	moveq	r0, #4
 8003082:	f04f 0501 	mov.w	r5, #1
 8003086:	6800      	ldr	r0, [r0, #0]
 8003088:	2800      	cmp	r0, #0
 800308a:	bf14      	ite	ne
 800308c:	6803      	ldrne	r3, [r0, #0]
 800308e:	2300      	moveq	r3, #0
 8003090:	2902      	cmp	r1, #2
 8003092:	bfa6      	itte	ge
 8003094:	6850      	ldrge	r0, [r2, #4]
 8003096:	3010      	addge	r0, #16
 8003098:	2004      	movlt	r0, #4
 800309a:	6800      	ldr	r0, [r0, #0]
 800309c:	2800      	cmp	r0, #0
 800309e:	bf19      	ittee	ne
 80030a0:	6800      	ldrne	r0, [r0, #0]
 80030a2:	f100 0418 	addne.w	r4, r0, #24
 80030a6:	2100      	moveq	r1, #0
 80030a8:	f101 0418 	addeq.w	r4, r1, #24
 80030ac:	f103 0108 	add.w	r1, r3, #8
 80030b0:	680a      	ldr	r2, [r1, #0]
 80030b2:	0a12      	lsrs	r2, r2, #8
 80030b4:	d01e      	beq.n	80030f4 <forward_sinh+0x84>
 80030b6:	684e      	ldr	r6, [r1, #4]
 80030b8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80030bc:	4610      	mov	r0, r2
 80030be:	1f0f      	subs	r7, r1, #4
 80030c0:	f010 0103 	ands.w	r1, r0, #3
 80030c4:	d006      	beq.n	80030d4 <forward_sinh+0x64>
 80030c6:	1e52      	subs	r2, r2, #1
 80030c8:	f857 c904 	ldr.w	ip, [r7], #-4
 80030cc:	1e49      	subs	r1, r1, #1
 80030ce:	fb0c f505 	mul.w	r5, ip, r5
 80030d2:	d1f8      	bne.n	80030c6 <forward_sinh+0x56>
 80030d4:	0880      	lsrs	r0, r0, #2
 80030d6:	d00d      	beq.n	80030f4 <forward_sinh+0x84>
 80030d8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80030dc:	3910      	subs	r1, #16
 80030de:	68ca      	ldr	r2, [r1, #12]
 80030e0:	688e      	ldr	r6, [r1, #8]
 80030e2:	684f      	ldr	r7, [r1, #4]
 80030e4:	4372      	muls	r2, r6
 80030e6:	f851 6910 	ldr.w	r6, [r1], #-16
 80030ea:	437a      	muls	r2, r7
 80030ec:	4372      	muls	r2, r6
 80030ee:	4355      	muls	r5, r2
 80030f0:	1e40      	subs	r0, r0, #1
 80030f2:	d1f4      	bne.n	80030de <forward_sinh+0x6e>
 80030f4:	6998      	ldr	r0, [r3, #24]
 80030f6:	6886      	ldr	r6, [r0, #8]
 80030f8:	6821      	ldr	r1, [r4, #0]
 80030fa:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80030fe:	1f07      	subs	r7, r0, #4
 8003100:	6888      	ldr	r0, [r1, #8]
 8003102:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003106:	1f14      	subs	r4, r2, #4
 8003108:	42b7      	cmp	r7, r6
 800310a:	d309      	bcc.n	8003120 <forward_sinh+0xb0>
 800310c:	ed97 0a00 	vldr	s0, [r7]
 8003110:	f00d fde4 	bl	8010cdc <sinhf>
 8003114:	ed84 0a00 	vstr	s0, [r4]
 8003118:	1f3f      	subs	r7, r7, #4
 800311a:	1f24      	subs	r4, r4, #4
 800311c:	42b7      	cmp	r7, r6
 800311e:	d2f5      	bcs.n	800310c <forward_sinh+0x9c>
 8003120:	b001      	add	sp, #4
 8003122:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003124 <nl_func_tan_array_f32>:
 8003124:	b570      	push	{r4, r5, r6, lr}
 8003126:	688c      	ldr	r4, [r1, #8]
 8003128:	6880      	ldr	r0, [r0, #8]
 800312a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800312e:	1f0d      	subs	r5, r1, #4
 8003130:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003134:	1f0e      	subs	r6, r1, #4
 8003136:	42a5      	cmp	r5, r4
 8003138:	f0c0 800a 	bcc.w	8003150 <nl_func_tan_array_f32+0x2c>
 800313c:	ed95 0a00 	vldr	s0, [r5]
 8003140:	f00d fb74 	bl	801082c <tanf>
 8003144:	ed86 0a00 	vstr	s0, [r6]
 8003148:	1f2d      	subs	r5, r5, #4
 800314a:	1f36      	subs	r6, r6, #4
 800314c:	42a5      	cmp	r5, r4
 800314e:	d2f5      	bcs.n	800313c <nl_func_tan_array_f32+0x18>
 8003150:	bd70      	pop	{r4, r5, r6, pc}
	...

08003154 <forward_tan>:
 8003154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003156:	b081      	sub	sp, #4
 8003158:	6942      	ldr	r2, [r0, #20]
 800315a:	8811      	ldrh	r1, [r2, #0]
 800315c:	2900      	cmp	r1, #0
 800315e:	bf1a      	itte	ne
 8003160:	6850      	ldrne	r0, [r2, #4]
 8003162:	1d00      	addne	r0, r0, #4
 8003164:	2004      	moveq	r0, #4
 8003166:	f04f 0501 	mov.w	r5, #1
 800316a:	6800      	ldr	r0, [r0, #0]
 800316c:	2800      	cmp	r0, #0
 800316e:	bf14      	ite	ne
 8003170:	6803      	ldrne	r3, [r0, #0]
 8003172:	2300      	moveq	r3, #0
 8003174:	2902      	cmp	r1, #2
 8003176:	bfa6      	itte	ge
 8003178:	6850      	ldrge	r0, [r2, #4]
 800317a:	3010      	addge	r0, #16
 800317c:	2004      	movlt	r0, #4
 800317e:	6800      	ldr	r0, [r0, #0]
 8003180:	2800      	cmp	r0, #0
 8003182:	bf19      	ittee	ne
 8003184:	6800      	ldrne	r0, [r0, #0]
 8003186:	f100 0418 	addne.w	r4, r0, #24
 800318a:	2100      	moveq	r1, #0
 800318c:	f101 0418 	addeq.w	r4, r1, #24
 8003190:	f103 0108 	add.w	r1, r3, #8
 8003194:	680a      	ldr	r2, [r1, #0]
 8003196:	0a12      	lsrs	r2, r2, #8
 8003198:	d01e      	beq.n	80031d8 <forward_tan+0x84>
 800319a:	684e      	ldr	r6, [r1, #4]
 800319c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80031a0:	4610      	mov	r0, r2
 80031a2:	1f0f      	subs	r7, r1, #4
 80031a4:	f010 0103 	ands.w	r1, r0, #3
 80031a8:	d006      	beq.n	80031b8 <forward_tan+0x64>
 80031aa:	1e52      	subs	r2, r2, #1
 80031ac:	f857 c904 	ldr.w	ip, [r7], #-4
 80031b0:	1e49      	subs	r1, r1, #1
 80031b2:	fb0c f505 	mul.w	r5, ip, r5
 80031b6:	d1f8      	bne.n	80031aa <forward_tan+0x56>
 80031b8:	0880      	lsrs	r0, r0, #2
 80031ba:	d00d      	beq.n	80031d8 <forward_tan+0x84>
 80031bc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80031c0:	3910      	subs	r1, #16
 80031c2:	68ca      	ldr	r2, [r1, #12]
 80031c4:	688e      	ldr	r6, [r1, #8]
 80031c6:	684f      	ldr	r7, [r1, #4]
 80031c8:	4372      	muls	r2, r6
 80031ca:	f851 6910 	ldr.w	r6, [r1], #-16
 80031ce:	437a      	muls	r2, r7
 80031d0:	4372      	muls	r2, r6
 80031d2:	4355      	muls	r5, r2
 80031d4:	1e40      	subs	r0, r0, #1
 80031d6:	d1f4      	bne.n	80031c2 <forward_tan+0x6e>
 80031d8:	6998      	ldr	r0, [r3, #24]
 80031da:	6886      	ldr	r6, [r0, #8]
 80031dc:	6821      	ldr	r1, [r4, #0]
 80031de:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80031e2:	1f07      	subs	r7, r0, #4
 80031e4:	6888      	ldr	r0, [r1, #8]
 80031e6:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80031ea:	1f14      	subs	r4, r2, #4
 80031ec:	42b7      	cmp	r7, r6
 80031ee:	d309      	bcc.n	8003204 <forward_tan+0xb0>
 80031f0:	ed97 0a00 	vldr	s0, [r7]
 80031f4:	f00d fb1a 	bl	801082c <tanf>
 80031f8:	ed84 0a00 	vstr	s0, [r4]
 80031fc:	1f3f      	subs	r7, r7, #4
 80031fe:	1f24      	subs	r4, r4, #4
 8003200:	42b7      	cmp	r7, r6
 8003202:	d2f5      	bcs.n	80031f0 <forward_tan+0x9c>
 8003204:	b001      	add	sp, #4
 8003206:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003208 <nl_func_abs_array_f32>:
 8003208:	6889      	ldr	r1, [r1, #8]
 800320a:	6880      	ldr	r0, [r0, #8]
 800320c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003210:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003214:	1f1b      	subs	r3, r3, #4
 8003216:	1f10      	subs	r0, r2, #4
 8003218:	428b      	cmp	r3, r1
 800321a:	d307      	bcc.n	800322c <nl_func_abs_array_f32+0x24>
 800321c:	f853 c904 	ldr.w	ip, [r3], #-4
 8003220:	f02c 4200 	bic.w	r2, ip, #2147483648	; 0x80000000
 8003224:	428b      	cmp	r3, r1
 8003226:	f840 2904 	str.w	r2, [r0], #-4
 800322a:	d2f7      	bcs.n	800321c <nl_func_abs_array_f32+0x14>
 800322c:	4770      	bx	lr
	...

08003230 <forward_abs>:
 8003230:	b4f0      	push	{r4, r5, r6, r7}
 8003232:	6942      	ldr	r2, [r0, #20]
 8003234:	8811      	ldrh	r1, [r2, #0]
 8003236:	2900      	cmp	r1, #0
 8003238:	bf1a      	itte	ne
 800323a:	6850      	ldrne	r0, [r2, #4]
 800323c:	1d00      	addne	r0, r0, #4
 800323e:	2004      	moveq	r0, #4
 8003240:	f04f 0501 	mov.w	r5, #1
 8003244:	6800      	ldr	r0, [r0, #0]
 8003246:	2800      	cmp	r0, #0
 8003248:	bf14      	ite	ne
 800324a:	6803      	ldrne	r3, [r0, #0]
 800324c:	2300      	moveq	r3, #0
 800324e:	2902      	cmp	r1, #2
 8003250:	bfa6      	itte	ge
 8003252:	6850      	ldrge	r0, [r2, #4]
 8003254:	3010      	addge	r0, #16
 8003256:	2004      	movlt	r0, #4
 8003258:	6800      	ldr	r0, [r0, #0]
 800325a:	2800      	cmp	r0, #0
 800325c:	bf19      	ittee	ne
 800325e:	6800      	ldrne	r0, [r0, #0]
 8003260:	f100 0418 	addne.w	r4, r0, #24
 8003264:	2100      	moveq	r1, #0
 8003266:	f101 0418 	addeq.w	r4, r1, #24
 800326a:	f103 0108 	add.w	r1, r3, #8
 800326e:	680a      	ldr	r2, [r1, #0]
 8003270:	0a12      	lsrs	r2, r2, #8
 8003272:	d01e      	beq.n	80032b2 <forward_abs+0x82>
 8003274:	684e      	ldr	r6, [r1, #4]
 8003276:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800327a:	4610      	mov	r0, r2
 800327c:	1f0f      	subs	r7, r1, #4
 800327e:	f010 0103 	ands.w	r1, r0, #3
 8003282:	d006      	beq.n	8003292 <forward_abs+0x62>
 8003284:	1e52      	subs	r2, r2, #1
 8003286:	f857 c904 	ldr.w	ip, [r7], #-4
 800328a:	1e49      	subs	r1, r1, #1
 800328c:	fb0c f505 	mul.w	r5, ip, r5
 8003290:	d1f8      	bne.n	8003284 <forward_abs+0x54>
 8003292:	0880      	lsrs	r0, r0, #2
 8003294:	d00d      	beq.n	80032b2 <forward_abs+0x82>
 8003296:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800329a:	3910      	subs	r1, #16
 800329c:	68ca      	ldr	r2, [r1, #12]
 800329e:	688e      	ldr	r6, [r1, #8]
 80032a0:	684f      	ldr	r7, [r1, #4]
 80032a2:	4372      	muls	r2, r6
 80032a4:	f851 6910 	ldr.w	r6, [r1], #-16
 80032a8:	437a      	muls	r2, r7
 80032aa:	4372      	muls	r2, r6
 80032ac:	4355      	muls	r5, r2
 80032ae:	1e40      	subs	r0, r0, #1
 80032b0:	d1f4      	bne.n	800329c <forward_abs+0x6c>
 80032b2:	6998      	ldr	r0, [r3, #24]
 80032b4:	6822      	ldr	r2, [r4, #0]
 80032b6:	6880      	ldr	r0, [r0, #8]
 80032b8:	6893      	ldr	r3, [r2, #8]
 80032ba:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80032be:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80032c2:	1f09      	subs	r1, r1, #4
 80032c4:	1f22      	subs	r2, r4, #4
 80032c6:	4281      	cmp	r1, r0
 80032c8:	f0c0 8008 	bcc.w	80032dc <forward_abs+0xac>
 80032cc:	f851 3904 	ldr.w	r3, [r1], #-4
 80032d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032d4:	4281      	cmp	r1, r0
 80032d6:	f842 3904 	str.w	r3, [r2], #-4
 80032da:	d2f7      	bcs.n	80032cc <forward_abs+0x9c>
 80032dc:	bcf0      	pop	{r4, r5, r6, r7}
 80032de:	4770      	bx	lr

080032e0 <nl_func_ceil_array_f32>:
 80032e0:	b570      	push	{r4, r5, r6, lr}
 80032e2:	688c      	ldr	r4, [r1, #8]
 80032e4:	6880      	ldr	r0, [r0, #8]
 80032e6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80032ea:	1f0d      	subs	r5, r1, #4
 80032ec:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80032f0:	1f0e      	subs	r6, r1, #4
 80032f2:	42a5      	cmp	r5, r4
 80032f4:	f0c0 800a 	bcc.w	800330c <nl_func_ceil_array_f32+0x2c>
 80032f8:	ed95 0a00 	vldr	s0, [r5]
 80032fc:	f00c fe84 	bl	8010008 <ceilf>
 8003300:	ed86 0a00 	vstr	s0, [r6]
 8003304:	1f2d      	subs	r5, r5, #4
 8003306:	1f36      	subs	r6, r6, #4
 8003308:	42a5      	cmp	r5, r4
 800330a:	d2f5      	bcs.n	80032f8 <nl_func_ceil_array_f32+0x18>
 800330c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003310 <forward_ceil>:
 8003310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003312:	b081      	sub	sp, #4
 8003314:	6942      	ldr	r2, [r0, #20]
 8003316:	8811      	ldrh	r1, [r2, #0]
 8003318:	2900      	cmp	r1, #0
 800331a:	bf1a      	itte	ne
 800331c:	6850      	ldrne	r0, [r2, #4]
 800331e:	1d00      	addne	r0, r0, #4
 8003320:	2004      	moveq	r0, #4
 8003322:	f04f 0501 	mov.w	r5, #1
 8003326:	6800      	ldr	r0, [r0, #0]
 8003328:	2800      	cmp	r0, #0
 800332a:	bf14      	ite	ne
 800332c:	6803      	ldrne	r3, [r0, #0]
 800332e:	2300      	moveq	r3, #0
 8003330:	2902      	cmp	r1, #2
 8003332:	bfa6      	itte	ge
 8003334:	6850      	ldrge	r0, [r2, #4]
 8003336:	3010      	addge	r0, #16
 8003338:	2004      	movlt	r0, #4
 800333a:	6800      	ldr	r0, [r0, #0]
 800333c:	2800      	cmp	r0, #0
 800333e:	bf19      	ittee	ne
 8003340:	6800      	ldrne	r0, [r0, #0]
 8003342:	f100 0418 	addne.w	r4, r0, #24
 8003346:	2100      	moveq	r1, #0
 8003348:	f101 0418 	addeq.w	r4, r1, #24
 800334c:	f103 0108 	add.w	r1, r3, #8
 8003350:	680a      	ldr	r2, [r1, #0]
 8003352:	0a12      	lsrs	r2, r2, #8
 8003354:	d01e      	beq.n	8003394 <forward_ceil+0x84>
 8003356:	684e      	ldr	r6, [r1, #4]
 8003358:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800335c:	4610      	mov	r0, r2
 800335e:	1f0f      	subs	r7, r1, #4
 8003360:	f010 0103 	ands.w	r1, r0, #3
 8003364:	d006      	beq.n	8003374 <forward_ceil+0x64>
 8003366:	1e52      	subs	r2, r2, #1
 8003368:	f857 c904 	ldr.w	ip, [r7], #-4
 800336c:	1e49      	subs	r1, r1, #1
 800336e:	fb0c f505 	mul.w	r5, ip, r5
 8003372:	d1f8      	bne.n	8003366 <forward_ceil+0x56>
 8003374:	0880      	lsrs	r0, r0, #2
 8003376:	d00d      	beq.n	8003394 <forward_ceil+0x84>
 8003378:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800337c:	3910      	subs	r1, #16
 800337e:	68ca      	ldr	r2, [r1, #12]
 8003380:	688e      	ldr	r6, [r1, #8]
 8003382:	684f      	ldr	r7, [r1, #4]
 8003384:	4372      	muls	r2, r6
 8003386:	f851 6910 	ldr.w	r6, [r1], #-16
 800338a:	437a      	muls	r2, r7
 800338c:	4372      	muls	r2, r6
 800338e:	4355      	muls	r5, r2
 8003390:	1e40      	subs	r0, r0, #1
 8003392:	d1f4      	bne.n	800337e <forward_ceil+0x6e>
 8003394:	6998      	ldr	r0, [r3, #24]
 8003396:	6886      	ldr	r6, [r0, #8]
 8003398:	6821      	ldr	r1, [r4, #0]
 800339a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800339e:	1f07      	subs	r7, r0, #4
 80033a0:	6888      	ldr	r0, [r1, #8]
 80033a2:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80033a6:	1f14      	subs	r4, r2, #4
 80033a8:	42b7      	cmp	r7, r6
 80033aa:	d309      	bcc.n	80033c0 <forward_ceil+0xb0>
 80033ac:	ed97 0a00 	vldr	s0, [r7]
 80033b0:	f00c fe2a 	bl	8010008 <ceilf>
 80033b4:	ed84 0a00 	vstr	s0, [r4]
 80033b8:	1f3f      	subs	r7, r7, #4
 80033ba:	1f24      	subs	r4, r4, #4
 80033bc:	42b7      	cmp	r7, r6
 80033be:	d2f5      	bcs.n	80033ac <forward_ceil+0x9c>
 80033c0:	b001      	add	sp, #4
 80033c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033c4 <nl_func_floor_array_f32>:
 80033c4:	b570      	push	{r4, r5, r6, lr}
 80033c6:	688c      	ldr	r4, [r1, #8]
 80033c8:	6880      	ldr	r0, [r0, #8]
 80033ca:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80033ce:	1f0d      	subs	r5, r1, #4
 80033d0:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80033d4:	1f0e      	subs	r6, r1, #4
 80033d6:	42a5      	cmp	r5, r4
 80033d8:	f0c0 800a 	bcc.w	80033f0 <nl_func_floor_array_f32+0x2c>
 80033dc:	ed95 0a00 	vldr	s0, [r5]
 80033e0:	f00d f87a 	bl	80104d8 <floorf>
 80033e4:	ed86 0a00 	vstr	s0, [r6]
 80033e8:	1f2d      	subs	r5, r5, #4
 80033ea:	1f36      	subs	r6, r6, #4
 80033ec:	42a5      	cmp	r5, r4
 80033ee:	d2f5      	bcs.n	80033dc <nl_func_floor_array_f32+0x18>
 80033f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080033f4 <forward_floor>:
 80033f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f6:	b081      	sub	sp, #4
 80033f8:	6942      	ldr	r2, [r0, #20]
 80033fa:	8811      	ldrh	r1, [r2, #0]
 80033fc:	2900      	cmp	r1, #0
 80033fe:	bf1a      	itte	ne
 8003400:	6850      	ldrne	r0, [r2, #4]
 8003402:	1d00      	addne	r0, r0, #4
 8003404:	2004      	moveq	r0, #4
 8003406:	f04f 0501 	mov.w	r5, #1
 800340a:	6800      	ldr	r0, [r0, #0]
 800340c:	2800      	cmp	r0, #0
 800340e:	bf14      	ite	ne
 8003410:	6803      	ldrne	r3, [r0, #0]
 8003412:	2300      	moveq	r3, #0
 8003414:	2902      	cmp	r1, #2
 8003416:	bfa6      	itte	ge
 8003418:	6850      	ldrge	r0, [r2, #4]
 800341a:	3010      	addge	r0, #16
 800341c:	2004      	movlt	r0, #4
 800341e:	6800      	ldr	r0, [r0, #0]
 8003420:	2800      	cmp	r0, #0
 8003422:	bf19      	ittee	ne
 8003424:	6800      	ldrne	r0, [r0, #0]
 8003426:	f100 0418 	addne.w	r4, r0, #24
 800342a:	2100      	moveq	r1, #0
 800342c:	f101 0418 	addeq.w	r4, r1, #24
 8003430:	f103 0108 	add.w	r1, r3, #8
 8003434:	680a      	ldr	r2, [r1, #0]
 8003436:	0a12      	lsrs	r2, r2, #8
 8003438:	d01e      	beq.n	8003478 <forward_floor+0x84>
 800343a:	684e      	ldr	r6, [r1, #4]
 800343c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003440:	4610      	mov	r0, r2
 8003442:	1f0f      	subs	r7, r1, #4
 8003444:	f010 0103 	ands.w	r1, r0, #3
 8003448:	d006      	beq.n	8003458 <forward_floor+0x64>
 800344a:	1e52      	subs	r2, r2, #1
 800344c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003450:	1e49      	subs	r1, r1, #1
 8003452:	fb0c f505 	mul.w	r5, ip, r5
 8003456:	d1f8      	bne.n	800344a <forward_floor+0x56>
 8003458:	0880      	lsrs	r0, r0, #2
 800345a:	d00d      	beq.n	8003478 <forward_floor+0x84>
 800345c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003460:	3910      	subs	r1, #16
 8003462:	68ca      	ldr	r2, [r1, #12]
 8003464:	688e      	ldr	r6, [r1, #8]
 8003466:	684f      	ldr	r7, [r1, #4]
 8003468:	4372      	muls	r2, r6
 800346a:	f851 6910 	ldr.w	r6, [r1], #-16
 800346e:	437a      	muls	r2, r7
 8003470:	4372      	muls	r2, r6
 8003472:	4355      	muls	r5, r2
 8003474:	1e40      	subs	r0, r0, #1
 8003476:	d1f4      	bne.n	8003462 <forward_floor+0x6e>
 8003478:	6998      	ldr	r0, [r3, #24]
 800347a:	6886      	ldr	r6, [r0, #8]
 800347c:	6821      	ldr	r1, [r4, #0]
 800347e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003482:	1f07      	subs	r7, r0, #4
 8003484:	6888      	ldr	r0, [r1, #8]
 8003486:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800348a:	1f14      	subs	r4, r2, #4
 800348c:	42b7      	cmp	r7, r6
 800348e:	d309      	bcc.n	80034a4 <forward_floor+0xb0>
 8003490:	ed97 0a00 	vldr	s0, [r7]
 8003494:	f00d f820 	bl	80104d8 <floorf>
 8003498:	ed84 0a00 	vstr	s0, [r4]
 800349c:	1f3f      	subs	r7, r7, #4
 800349e:	1f24      	subs	r4, r4, #4
 80034a0:	42b7      	cmp	r7, r6
 80034a2:	d2f5      	bcs.n	8003490 <forward_floor+0x9c>
 80034a4:	b001      	add	sp, #4
 80034a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034a8 <nl_func_round_array_f32>:
 80034a8:	b570      	push	{r4, r5, r6, lr}
 80034aa:	688c      	ldr	r4, [r1, #8]
 80034ac:	6880      	ldr	r0, [r0, #8]
 80034ae:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80034b2:	1f0d      	subs	r5, r1, #4
 80034b4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80034b8:	1f0e      	subs	r6, r1, #4
 80034ba:	42a5      	cmp	r5, r4
 80034bc:	f0c0 800a 	bcc.w	80034d4 <nl_func_round_array_f32+0x2c>
 80034c0:	ed95 0a00 	vldr	s0, [r5]
 80034c4:	f00d f948 	bl	8010758 <roundf>
 80034c8:	ed86 0a00 	vstr	s0, [r6]
 80034cc:	1f2d      	subs	r5, r5, #4
 80034ce:	1f36      	subs	r6, r6, #4
 80034d0:	42a5      	cmp	r5, r4
 80034d2:	d2f5      	bcs.n	80034c0 <nl_func_round_array_f32+0x18>
 80034d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080034d8 <forward_round>:
 80034d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034da:	b081      	sub	sp, #4
 80034dc:	6942      	ldr	r2, [r0, #20]
 80034de:	8811      	ldrh	r1, [r2, #0]
 80034e0:	2900      	cmp	r1, #0
 80034e2:	bf1a      	itte	ne
 80034e4:	6850      	ldrne	r0, [r2, #4]
 80034e6:	1d00      	addne	r0, r0, #4
 80034e8:	2004      	moveq	r0, #4
 80034ea:	f04f 0501 	mov.w	r5, #1
 80034ee:	6800      	ldr	r0, [r0, #0]
 80034f0:	2800      	cmp	r0, #0
 80034f2:	bf14      	ite	ne
 80034f4:	6803      	ldrne	r3, [r0, #0]
 80034f6:	2300      	moveq	r3, #0
 80034f8:	2902      	cmp	r1, #2
 80034fa:	bfa6      	itte	ge
 80034fc:	6850      	ldrge	r0, [r2, #4]
 80034fe:	3010      	addge	r0, #16
 8003500:	2004      	movlt	r0, #4
 8003502:	6800      	ldr	r0, [r0, #0]
 8003504:	2800      	cmp	r0, #0
 8003506:	bf19      	ittee	ne
 8003508:	6800      	ldrne	r0, [r0, #0]
 800350a:	f100 0418 	addne.w	r4, r0, #24
 800350e:	2100      	moveq	r1, #0
 8003510:	f101 0418 	addeq.w	r4, r1, #24
 8003514:	f103 0108 	add.w	r1, r3, #8
 8003518:	680a      	ldr	r2, [r1, #0]
 800351a:	0a12      	lsrs	r2, r2, #8
 800351c:	d01e      	beq.n	800355c <forward_round+0x84>
 800351e:	684e      	ldr	r6, [r1, #4]
 8003520:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003524:	4610      	mov	r0, r2
 8003526:	1f0f      	subs	r7, r1, #4
 8003528:	f010 0103 	ands.w	r1, r0, #3
 800352c:	d006      	beq.n	800353c <forward_round+0x64>
 800352e:	1e52      	subs	r2, r2, #1
 8003530:	f857 c904 	ldr.w	ip, [r7], #-4
 8003534:	1e49      	subs	r1, r1, #1
 8003536:	fb0c f505 	mul.w	r5, ip, r5
 800353a:	d1f8      	bne.n	800352e <forward_round+0x56>
 800353c:	0880      	lsrs	r0, r0, #2
 800353e:	d00d      	beq.n	800355c <forward_round+0x84>
 8003540:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003544:	3910      	subs	r1, #16
 8003546:	68ca      	ldr	r2, [r1, #12]
 8003548:	688e      	ldr	r6, [r1, #8]
 800354a:	684f      	ldr	r7, [r1, #4]
 800354c:	4372      	muls	r2, r6
 800354e:	f851 6910 	ldr.w	r6, [r1], #-16
 8003552:	437a      	muls	r2, r7
 8003554:	4372      	muls	r2, r6
 8003556:	4355      	muls	r5, r2
 8003558:	1e40      	subs	r0, r0, #1
 800355a:	d1f4      	bne.n	8003546 <forward_round+0x6e>
 800355c:	6998      	ldr	r0, [r3, #24]
 800355e:	6886      	ldr	r6, [r0, #8]
 8003560:	6821      	ldr	r1, [r4, #0]
 8003562:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003566:	1f07      	subs	r7, r0, #4
 8003568:	6888      	ldr	r0, [r1, #8]
 800356a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800356e:	1f14      	subs	r4, r2, #4
 8003570:	42b7      	cmp	r7, r6
 8003572:	d309      	bcc.n	8003588 <forward_round+0xb0>
 8003574:	ed97 0a00 	vldr	s0, [r7]
 8003578:	f00d f8ee 	bl	8010758 <roundf>
 800357c:	ed84 0a00 	vstr	s0, [r4]
 8003580:	1f3f      	subs	r7, r7, #4
 8003582:	1f24      	subs	r4, r4, #4
 8003584:	42b7      	cmp	r7, r6
 8003586:	d2f5      	bcs.n	8003574 <forward_round+0x9c>
 8003588:	b001      	add	sp, #4
 800358a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800358c <nl_func_neg_array_f32>:
 800358c:	6889      	ldr	r1, [r1, #8]
 800358e:	6880      	ldr	r0, [r0, #8]
 8003590:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003594:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003598:	1f1b      	subs	r3, r3, #4
 800359a:	1f12      	subs	r2, r2, #4
 800359c:	428b      	cmp	r3, r1
 800359e:	d32b      	bcc.n	80035f8 <nl_func_neg_array_f32+0x6c>
 80035a0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80035a4:	edd3 0a00 	vldr	s1, [r3]
 80035a8:	1f18      	subs	r0, r3, #4
 80035aa:	ee60 0a80 	vmul.f32	s1, s1, s0
 80035ae:	4288      	cmp	r0, r1
 80035b0:	edc2 0a00 	vstr	s1, [r2]
 80035b4:	d320      	bcc.n	80035f8 <nl_func_neg_array_f32+0x6c>
 80035b6:	ed90 1a00 	vldr	s2, [r0]
 80035ba:	1f13      	subs	r3, r2, #4
 80035bc:	1f00      	subs	r0, r0, #4
 80035be:	ee21 1a00 	vmul.f32	s2, s2, s0
 80035c2:	4288      	cmp	r0, r1
 80035c4:	ed83 1a00 	vstr	s2, [r3]
 80035c8:	d316      	bcc.n	80035f8 <nl_func_neg_array_f32+0x6c>
 80035ca:	edd0 0a00 	vldr	s1, [r0]
 80035ce:	f1a2 0308 	sub.w	r3, r2, #8
 80035d2:	1f00      	subs	r0, r0, #4
 80035d4:	ee60 0a80 	vmul.f32	s1, s1, s0
 80035d8:	4288      	cmp	r0, r1
 80035da:	edc3 0a00 	vstr	s1, [r3]
 80035de:	d30b      	bcc.n	80035f8 <nl_func_neg_array_f32+0x6c>
 80035e0:	ed90 1a00 	vldr	s2, [r0]
 80035e4:	f1a2 030c 	sub.w	r3, r2, #12
 80035e8:	ee61 0a00 	vmul.f32	s1, s2, s0
 80035ec:	edc3 0a00 	vstr	s1, [r3]
 80035f0:	1f03      	subs	r3, r0, #4
 80035f2:	3a10      	subs	r2, #16
 80035f4:	428b      	cmp	r3, r1
 80035f6:	d2d5      	bcs.n	80035a4 <nl_func_neg_array_f32+0x18>
 80035f8:	4770      	bx	lr
	...

080035fc <forward_neg>:
 80035fc:	b4f0      	push	{r4, r5, r6, r7}
 80035fe:	6942      	ldr	r2, [r0, #20]
 8003600:	8811      	ldrh	r1, [r2, #0]
 8003602:	2900      	cmp	r1, #0
 8003604:	bf1a      	itte	ne
 8003606:	6850      	ldrne	r0, [r2, #4]
 8003608:	1d00      	addne	r0, r0, #4
 800360a:	2004      	moveq	r0, #4
 800360c:	f04f 0501 	mov.w	r5, #1
 8003610:	6800      	ldr	r0, [r0, #0]
 8003612:	2800      	cmp	r0, #0
 8003614:	bf14      	ite	ne
 8003616:	6803      	ldrne	r3, [r0, #0]
 8003618:	2300      	moveq	r3, #0
 800361a:	2902      	cmp	r1, #2
 800361c:	bfa6      	itte	ge
 800361e:	6850      	ldrge	r0, [r2, #4]
 8003620:	3010      	addge	r0, #16
 8003622:	2004      	movlt	r0, #4
 8003624:	6800      	ldr	r0, [r0, #0]
 8003626:	2800      	cmp	r0, #0
 8003628:	bf19      	ittee	ne
 800362a:	6800      	ldrne	r0, [r0, #0]
 800362c:	f100 0418 	addne.w	r4, r0, #24
 8003630:	2100      	moveq	r1, #0
 8003632:	f101 0418 	addeq.w	r4, r1, #24
 8003636:	f103 0108 	add.w	r1, r3, #8
 800363a:	680a      	ldr	r2, [r1, #0]
 800363c:	0a12      	lsrs	r2, r2, #8
 800363e:	d01e      	beq.n	800367e <forward_neg+0x82>
 8003640:	684e      	ldr	r6, [r1, #4]
 8003642:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003646:	4610      	mov	r0, r2
 8003648:	1f0f      	subs	r7, r1, #4
 800364a:	f010 0103 	ands.w	r1, r0, #3
 800364e:	d006      	beq.n	800365e <forward_neg+0x62>
 8003650:	1e52      	subs	r2, r2, #1
 8003652:	f857 c904 	ldr.w	ip, [r7], #-4
 8003656:	1e49      	subs	r1, r1, #1
 8003658:	fb0c f505 	mul.w	r5, ip, r5
 800365c:	d1f8      	bne.n	8003650 <forward_neg+0x54>
 800365e:	0880      	lsrs	r0, r0, #2
 8003660:	d00d      	beq.n	800367e <forward_neg+0x82>
 8003662:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003666:	3910      	subs	r1, #16
 8003668:	68ca      	ldr	r2, [r1, #12]
 800366a:	688e      	ldr	r6, [r1, #8]
 800366c:	684f      	ldr	r7, [r1, #4]
 800366e:	4372      	muls	r2, r6
 8003670:	f851 6910 	ldr.w	r6, [r1], #-16
 8003674:	437a      	muls	r2, r7
 8003676:	4372      	muls	r2, r6
 8003678:	4355      	muls	r5, r2
 800367a:	1e40      	subs	r0, r0, #1
 800367c:	d1f4      	bne.n	8003668 <forward_neg+0x6c>
 800367e:	6998      	ldr	r0, [r3, #24]
 8003680:	6822      	ldr	r2, [r4, #0]
 8003682:	6880      	ldr	r0, [r0, #8]
 8003684:	6893      	ldr	r3, [r2, #8]
 8003686:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800368a:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 800368e:	1f09      	subs	r1, r1, #4
 8003690:	1f22      	subs	r2, r4, #4
 8003692:	4281      	cmp	r1, r0
 8003694:	f0c0 802c 	bcc.w	80036f0 <forward_neg+0xf4>
 8003698:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800369c:	edd1 0a00 	vldr	s1, [r1]
 80036a0:	1f09      	subs	r1, r1, #4
 80036a2:	ee60 0a80 	vmul.f32	s1, s1, s0
 80036a6:	4281      	cmp	r1, r0
 80036a8:	edc2 0a00 	vstr	s1, [r2]
 80036ac:	d320      	bcc.n	80036f0 <forward_neg+0xf4>
 80036ae:	ed91 1a00 	vldr	s2, [r1]
 80036b2:	1f13      	subs	r3, r2, #4
 80036b4:	1f09      	subs	r1, r1, #4
 80036b6:	ee21 1a00 	vmul.f32	s2, s2, s0
 80036ba:	4281      	cmp	r1, r0
 80036bc:	ed83 1a00 	vstr	s2, [r3]
 80036c0:	d316      	bcc.n	80036f0 <forward_neg+0xf4>
 80036c2:	edd1 0a00 	vldr	s1, [r1]
 80036c6:	f1a2 0308 	sub.w	r3, r2, #8
 80036ca:	1f09      	subs	r1, r1, #4
 80036cc:	ee60 0a80 	vmul.f32	s1, s1, s0
 80036d0:	4281      	cmp	r1, r0
 80036d2:	edc3 0a00 	vstr	s1, [r3]
 80036d6:	d30b      	bcc.n	80036f0 <forward_neg+0xf4>
 80036d8:	ed91 1a00 	vldr	s2, [r1]
 80036dc:	f1a2 030c 	sub.w	r3, r2, #12
 80036e0:	1f09      	subs	r1, r1, #4
 80036e2:	3a10      	subs	r2, #16
 80036e4:	ee61 0a00 	vmul.f32	s1, s2, s0
 80036e8:	4281      	cmp	r1, r0
 80036ea:	edc3 0a00 	vstr	s1, [r3]
 80036ee:	d2d5      	bcs.n	800369c <forward_neg+0xa0>
 80036f0:	bcf0      	pop	{r4, r5, r6, r7}
 80036f2:	4770      	bx	lr

080036f4 <nl_func_reciprocal_array_f32>:
 80036f4:	6889      	ldr	r1, [r1, #8]
 80036f6:	6880      	ldr	r0, [r0, #8]
 80036f8:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80036fc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003700:	1f1b      	subs	r3, r3, #4
 8003702:	1f12      	subs	r2, r2, #4
 8003704:	428b      	cmp	r3, r1
 8003706:	d331      	bcc.n	800376c <nl_func_reciprocal_array_f32+0x78>
 8003708:	ed93 0a00 	vldr	s0, [r3]
 800370c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003710:	1f18      	subs	r0, r3, #4
 8003712:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003716:	4288      	cmp	r0, r1
 8003718:	ed82 0a00 	vstr	s0, [r2]
 800371c:	d326      	bcc.n	800376c <nl_func_reciprocal_array_f32+0x78>
 800371e:	edd0 0a00 	vldr	s1, [r0]
 8003722:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003726:	1f13      	subs	r3, r2, #4
 8003728:	1f00      	subs	r0, r0, #4
 800372a:	ee80 0a20 	vdiv.f32	s0, s0, s1
 800372e:	4288      	cmp	r0, r1
 8003730:	ed83 0a00 	vstr	s0, [r3]
 8003734:	d31a      	bcc.n	800376c <nl_func_reciprocal_array_f32+0x78>
 8003736:	ed90 0a00 	vldr	s0, [r0]
 800373a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800373e:	f1a2 0308 	sub.w	r3, r2, #8
 8003742:	1f00      	subs	r0, r0, #4
 8003744:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003748:	4288      	cmp	r0, r1
 800374a:	ed83 0a00 	vstr	s0, [r3]
 800374e:	d30d      	bcc.n	800376c <nl_func_reciprocal_array_f32+0x78>
 8003750:	edd0 0a00 	vldr	s1, [r0]
 8003754:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003758:	f1a2 030c 	sub.w	r3, r2, #12
 800375c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003760:	ed83 0a00 	vstr	s0, [r3]
 8003764:	1f03      	subs	r3, r0, #4
 8003766:	3a10      	subs	r2, #16
 8003768:	428b      	cmp	r3, r1
 800376a:	d2cd      	bcs.n	8003708 <nl_func_reciprocal_array_f32+0x14>
 800376c:	4770      	bx	lr
	...

08003770 <forward_reciprocal>:
 8003770:	b4f0      	push	{r4, r5, r6, r7}
 8003772:	6942      	ldr	r2, [r0, #20]
 8003774:	8811      	ldrh	r1, [r2, #0]
 8003776:	2900      	cmp	r1, #0
 8003778:	bf1a      	itte	ne
 800377a:	6850      	ldrne	r0, [r2, #4]
 800377c:	1d00      	addne	r0, r0, #4
 800377e:	2004      	moveq	r0, #4
 8003780:	f04f 0501 	mov.w	r5, #1
 8003784:	6800      	ldr	r0, [r0, #0]
 8003786:	2800      	cmp	r0, #0
 8003788:	bf14      	ite	ne
 800378a:	6803      	ldrne	r3, [r0, #0]
 800378c:	2300      	moveq	r3, #0
 800378e:	2902      	cmp	r1, #2
 8003790:	bfa6      	itte	ge
 8003792:	6850      	ldrge	r0, [r2, #4]
 8003794:	3010      	addge	r0, #16
 8003796:	2004      	movlt	r0, #4
 8003798:	6800      	ldr	r0, [r0, #0]
 800379a:	2800      	cmp	r0, #0
 800379c:	bf19      	ittee	ne
 800379e:	6800      	ldrne	r0, [r0, #0]
 80037a0:	f100 0418 	addne.w	r4, r0, #24
 80037a4:	2100      	moveq	r1, #0
 80037a6:	f101 0418 	addeq.w	r4, r1, #24
 80037aa:	f103 0108 	add.w	r1, r3, #8
 80037ae:	680a      	ldr	r2, [r1, #0]
 80037b0:	0a12      	lsrs	r2, r2, #8
 80037b2:	d01e      	beq.n	80037f2 <forward_reciprocal+0x82>
 80037b4:	684e      	ldr	r6, [r1, #4]
 80037b6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80037ba:	4610      	mov	r0, r2
 80037bc:	1f0f      	subs	r7, r1, #4
 80037be:	f010 0103 	ands.w	r1, r0, #3
 80037c2:	d006      	beq.n	80037d2 <forward_reciprocal+0x62>
 80037c4:	1e52      	subs	r2, r2, #1
 80037c6:	f857 c904 	ldr.w	ip, [r7], #-4
 80037ca:	1e49      	subs	r1, r1, #1
 80037cc:	fb0c f505 	mul.w	r5, ip, r5
 80037d0:	d1f8      	bne.n	80037c4 <forward_reciprocal+0x54>
 80037d2:	0880      	lsrs	r0, r0, #2
 80037d4:	d00d      	beq.n	80037f2 <forward_reciprocal+0x82>
 80037d6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80037da:	3910      	subs	r1, #16
 80037dc:	68ca      	ldr	r2, [r1, #12]
 80037de:	688e      	ldr	r6, [r1, #8]
 80037e0:	684f      	ldr	r7, [r1, #4]
 80037e2:	4372      	muls	r2, r6
 80037e4:	f851 6910 	ldr.w	r6, [r1], #-16
 80037e8:	437a      	muls	r2, r7
 80037ea:	4372      	muls	r2, r6
 80037ec:	4355      	muls	r5, r2
 80037ee:	1e40      	subs	r0, r0, #1
 80037f0:	d1f4      	bne.n	80037dc <forward_reciprocal+0x6c>
 80037f2:	6998      	ldr	r0, [r3, #24]
 80037f4:	6822      	ldr	r2, [r4, #0]
 80037f6:	6880      	ldr	r0, [r0, #8]
 80037f8:	6893      	ldr	r3, [r2, #8]
 80037fa:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80037fe:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003802:	1f09      	subs	r1, r1, #4
 8003804:	1f22      	subs	r2, r4, #4
 8003806:	4281      	cmp	r1, r0
 8003808:	f0c0 8032 	bcc.w	8003870 <forward_reciprocal+0x100>
 800380c:	ed91 0a00 	vldr	s0, [r1]
 8003810:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003814:	1f09      	subs	r1, r1, #4
 8003816:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800381a:	4281      	cmp	r1, r0
 800381c:	ed82 0a00 	vstr	s0, [r2]
 8003820:	d326      	bcc.n	8003870 <forward_reciprocal+0x100>
 8003822:	edd1 0a00 	vldr	s1, [r1]
 8003826:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800382a:	1f13      	subs	r3, r2, #4
 800382c:	1f09      	subs	r1, r1, #4
 800382e:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003832:	4281      	cmp	r1, r0
 8003834:	ed83 0a00 	vstr	s0, [r3]
 8003838:	d31a      	bcc.n	8003870 <forward_reciprocal+0x100>
 800383a:	ed91 0a00 	vldr	s0, [r1]
 800383e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003842:	f1a2 0308 	sub.w	r3, r2, #8
 8003846:	1f09      	subs	r1, r1, #4
 8003848:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800384c:	4281      	cmp	r1, r0
 800384e:	ed83 0a00 	vstr	s0, [r3]
 8003852:	d30d      	bcc.n	8003870 <forward_reciprocal+0x100>
 8003854:	edd1 0a00 	vldr	s1, [r1]
 8003858:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800385c:	f1a2 030c 	sub.w	r3, r2, #12
 8003860:	1f09      	subs	r1, r1, #4
 8003862:	3a10      	subs	r2, #16
 8003864:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003868:	4281      	cmp	r1, r0
 800386a:	ed83 0a00 	vstr	s0, [r3]
 800386e:	d2cd      	bcs.n	800380c <forward_reciprocal+0x9c>
 8003870:	bcf0      	pop	{r4, r5, r6, r7}
 8003872:	4770      	bx	lr

08003874 <nl_func_exp_array_f32>:
 8003874:	b570      	push	{r4, r5, r6, lr}
 8003876:	688c      	ldr	r4, [r1, #8]
 8003878:	6880      	ldr	r0, [r0, #8]
 800387a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800387e:	1f0d      	subs	r5, r1, #4
 8003880:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003884:	1f0e      	subs	r6, r1, #4
 8003886:	42a5      	cmp	r5, r4
 8003888:	f0c0 800a 	bcc.w	80038a0 <nl_func_exp_array_f32+0x2c>
 800388c:	ed95 0a00 	vldr	s0, [r5]
 8003890:	f00d f91a 	bl	8010ac8 <expf>
 8003894:	ed86 0a00 	vstr	s0, [r6]
 8003898:	1f2d      	subs	r5, r5, #4
 800389a:	1f36      	subs	r6, r6, #4
 800389c:	42a5      	cmp	r5, r4
 800389e:	d2f5      	bcs.n	800388c <nl_func_exp_array_f32+0x18>
 80038a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080038a4 <forward_exp>:
 80038a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038a6:	b081      	sub	sp, #4
 80038a8:	6942      	ldr	r2, [r0, #20]
 80038aa:	8811      	ldrh	r1, [r2, #0]
 80038ac:	2900      	cmp	r1, #0
 80038ae:	bf1a      	itte	ne
 80038b0:	6850      	ldrne	r0, [r2, #4]
 80038b2:	1d00      	addne	r0, r0, #4
 80038b4:	2004      	moveq	r0, #4
 80038b6:	f04f 0501 	mov.w	r5, #1
 80038ba:	6800      	ldr	r0, [r0, #0]
 80038bc:	2800      	cmp	r0, #0
 80038be:	bf14      	ite	ne
 80038c0:	6803      	ldrne	r3, [r0, #0]
 80038c2:	2300      	moveq	r3, #0
 80038c4:	2902      	cmp	r1, #2
 80038c6:	bfa6      	itte	ge
 80038c8:	6850      	ldrge	r0, [r2, #4]
 80038ca:	3010      	addge	r0, #16
 80038cc:	2004      	movlt	r0, #4
 80038ce:	6800      	ldr	r0, [r0, #0]
 80038d0:	2800      	cmp	r0, #0
 80038d2:	bf19      	ittee	ne
 80038d4:	6800      	ldrne	r0, [r0, #0]
 80038d6:	f100 0418 	addne.w	r4, r0, #24
 80038da:	2100      	moveq	r1, #0
 80038dc:	f101 0418 	addeq.w	r4, r1, #24
 80038e0:	f103 0108 	add.w	r1, r3, #8
 80038e4:	680a      	ldr	r2, [r1, #0]
 80038e6:	0a12      	lsrs	r2, r2, #8
 80038e8:	d01e      	beq.n	8003928 <forward_exp+0x84>
 80038ea:	684e      	ldr	r6, [r1, #4]
 80038ec:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80038f0:	4610      	mov	r0, r2
 80038f2:	1f0f      	subs	r7, r1, #4
 80038f4:	f010 0103 	ands.w	r1, r0, #3
 80038f8:	d006      	beq.n	8003908 <forward_exp+0x64>
 80038fa:	1e52      	subs	r2, r2, #1
 80038fc:	f857 c904 	ldr.w	ip, [r7], #-4
 8003900:	1e49      	subs	r1, r1, #1
 8003902:	fb0c f505 	mul.w	r5, ip, r5
 8003906:	d1f8      	bne.n	80038fa <forward_exp+0x56>
 8003908:	0880      	lsrs	r0, r0, #2
 800390a:	d00d      	beq.n	8003928 <forward_exp+0x84>
 800390c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003910:	3910      	subs	r1, #16
 8003912:	68ca      	ldr	r2, [r1, #12]
 8003914:	688e      	ldr	r6, [r1, #8]
 8003916:	684f      	ldr	r7, [r1, #4]
 8003918:	4372      	muls	r2, r6
 800391a:	f851 6910 	ldr.w	r6, [r1], #-16
 800391e:	437a      	muls	r2, r7
 8003920:	4372      	muls	r2, r6
 8003922:	4355      	muls	r5, r2
 8003924:	1e40      	subs	r0, r0, #1
 8003926:	d1f4      	bne.n	8003912 <forward_exp+0x6e>
 8003928:	6998      	ldr	r0, [r3, #24]
 800392a:	6886      	ldr	r6, [r0, #8]
 800392c:	6821      	ldr	r1, [r4, #0]
 800392e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003932:	1f07      	subs	r7, r0, #4
 8003934:	6888      	ldr	r0, [r1, #8]
 8003936:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800393a:	1f14      	subs	r4, r2, #4
 800393c:	42b7      	cmp	r7, r6
 800393e:	d309      	bcc.n	8003954 <forward_exp+0xb0>
 8003940:	ed97 0a00 	vldr	s0, [r7]
 8003944:	f00d f8c0 	bl	8010ac8 <expf>
 8003948:	ed84 0a00 	vstr	s0, [r4]
 800394c:	1f3f      	subs	r7, r7, #4
 800394e:	1f24      	subs	r4, r4, #4
 8003950:	42b7      	cmp	r7, r6
 8003952:	d2f5      	bcs.n	8003940 <forward_exp+0x9c>
 8003954:	b001      	add	sp, #4
 8003956:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003958 <nl_func_sigmoid_array_f32>:
 8003958:	b570      	push	{r4, r5, r6, lr}
 800395a:	688c      	ldr	r4, [r1, #8]
 800395c:	6880      	ldr	r0, [r0, #8]
 800395e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003962:	1f0d      	subs	r5, r1, #4
 8003964:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003968:	1f0e      	subs	r6, r1, #4
 800396a:	42a5      	cmp	r5, r4
 800396c:	f0c0 8014 	bcc.w	8003998 <nl_func_sigmoid_array_f32+0x40>
 8003970:	ed95 0a00 	vldr	s0, [r5]
 8003974:	eeb1 0a40 	vneg.f32	s0, s0
 8003978:	f00d f8a6 	bl	8010ac8 <expf>
 800397c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003980:	ee70 0a20 	vadd.f32	s1, s0, s1
 8003984:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003988:	ee80 0a20 	vdiv.f32	s0, s0, s1
 800398c:	ed86 0a00 	vstr	s0, [r6]
 8003990:	1f2d      	subs	r5, r5, #4
 8003992:	1f36      	subs	r6, r6, #4
 8003994:	42a5      	cmp	r5, r4
 8003996:	d2eb      	bcs.n	8003970 <nl_func_sigmoid_array_f32+0x18>
 8003998:	bd70      	pop	{r4, r5, r6, pc}
	...

0800399c <forward_sigmoid>:
 800399c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800399e:	b081      	sub	sp, #4
 80039a0:	6942      	ldr	r2, [r0, #20]
 80039a2:	8811      	ldrh	r1, [r2, #0]
 80039a4:	2900      	cmp	r1, #0
 80039a6:	bf1a      	itte	ne
 80039a8:	6850      	ldrne	r0, [r2, #4]
 80039aa:	1d00      	addne	r0, r0, #4
 80039ac:	2004      	moveq	r0, #4
 80039ae:	f04f 0501 	mov.w	r5, #1
 80039b2:	6800      	ldr	r0, [r0, #0]
 80039b4:	2800      	cmp	r0, #0
 80039b6:	bf14      	ite	ne
 80039b8:	6803      	ldrne	r3, [r0, #0]
 80039ba:	2300      	moveq	r3, #0
 80039bc:	2902      	cmp	r1, #2
 80039be:	bfa6      	itte	ge
 80039c0:	6850      	ldrge	r0, [r2, #4]
 80039c2:	3010      	addge	r0, #16
 80039c4:	2004      	movlt	r0, #4
 80039c6:	6800      	ldr	r0, [r0, #0]
 80039c8:	2800      	cmp	r0, #0
 80039ca:	bf19      	ittee	ne
 80039cc:	6800      	ldrne	r0, [r0, #0]
 80039ce:	f100 0418 	addne.w	r4, r0, #24
 80039d2:	2100      	moveq	r1, #0
 80039d4:	f101 0418 	addeq.w	r4, r1, #24
 80039d8:	f103 0108 	add.w	r1, r3, #8
 80039dc:	680a      	ldr	r2, [r1, #0]
 80039de:	0a12      	lsrs	r2, r2, #8
 80039e0:	d01e      	beq.n	8003a20 <forward_sigmoid+0x84>
 80039e2:	684e      	ldr	r6, [r1, #4]
 80039e4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80039e8:	4610      	mov	r0, r2
 80039ea:	1f0f      	subs	r7, r1, #4
 80039ec:	f010 0103 	ands.w	r1, r0, #3
 80039f0:	d006      	beq.n	8003a00 <forward_sigmoid+0x64>
 80039f2:	1e52      	subs	r2, r2, #1
 80039f4:	f857 c904 	ldr.w	ip, [r7], #-4
 80039f8:	1e49      	subs	r1, r1, #1
 80039fa:	fb0c f505 	mul.w	r5, ip, r5
 80039fe:	d1f8      	bne.n	80039f2 <forward_sigmoid+0x56>
 8003a00:	0880      	lsrs	r0, r0, #2
 8003a02:	d00d      	beq.n	8003a20 <forward_sigmoid+0x84>
 8003a04:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003a08:	3910      	subs	r1, #16
 8003a0a:	68ca      	ldr	r2, [r1, #12]
 8003a0c:	688e      	ldr	r6, [r1, #8]
 8003a0e:	684f      	ldr	r7, [r1, #4]
 8003a10:	4372      	muls	r2, r6
 8003a12:	f851 6910 	ldr.w	r6, [r1], #-16
 8003a16:	437a      	muls	r2, r7
 8003a18:	4372      	muls	r2, r6
 8003a1a:	4355      	muls	r5, r2
 8003a1c:	1e40      	subs	r0, r0, #1
 8003a1e:	d1f4      	bne.n	8003a0a <forward_sigmoid+0x6e>
 8003a20:	6998      	ldr	r0, [r3, #24]
 8003a22:	6886      	ldr	r6, [r0, #8]
 8003a24:	6821      	ldr	r1, [r4, #0]
 8003a26:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003a2a:	1f07      	subs	r7, r0, #4
 8003a2c:	6888      	ldr	r0, [r1, #8]
 8003a2e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003a32:	1f14      	subs	r4, r2, #4
 8003a34:	42b7      	cmp	r7, r6
 8003a36:	d313      	bcc.n	8003a60 <forward_sigmoid+0xc4>
 8003a38:	ed97 0a00 	vldr	s0, [r7]
 8003a3c:	eeb1 0a40 	vneg.f32	s0, s0
 8003a40:	f00d f842 	bl	8010ac8 <expf>
 8003a44:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003a48:	ee70 0a20 	vadd.f32	s1, s0, s1
 8003a4c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003a50:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003a54:	ed84 0a00 	vstr	s0, [r4]
 8003a58:	1f3f      	subs	r7, r7, #4
 8003a5a:	1f24      	subs	r4, r4, #4
 8003a5c:	42b7      	cmp	r7, r6
 8003a5e:	d2eb      	bcs.n	8003a38 <forward_sigmoid+0x9c>
 8003a60:	b001      	add	sp, #4
 8003a62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a64 <nl_func_sign_array_f32>:
 8003a64:	6889      	ldr	r1, [r1, #8]
 8003a66:	6880      	ldr	r0, [r0, #8]
 8003a68:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003a6c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003a70:	1f1b      	subs	r3, r3, #4
 8003a72:	1f10      	subs	r0, r2, #4
 8003a74:	428b      	cmp	r3, r1
 8003a76:	d314      	bcc.n	8003aa2 <nl_func_sign_array_f32+0x3e>
 8003a78:	f04f 32ff 	mov.w	r2, #4294967295
 8003a7c:	ed93 0a00 	vldr	s0, [r3]
 8003a80:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a88:	bfcc      	ite	gt
 8003a8a:	ed9f 0a39 	vldrgt	s0, [pc, #228]	; 8003b70 <.text_49>
 8003a8e:	ee00 2a10 	vmovle	s0, r2
 8003a92:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003a96:	ed80 0a00 	vstr	s0, [r0]
 8003a9a:	1f1b      	subs	r3, r3, #4
 8003a9c:	1f00      	subs	r0, r0, #4
 8003a9e:	428b      	cmp	r3, r1
 8003aa0:	d2ec      	bcs.n	8003a7c <nl_func_sign_array_f32+0x18>
 8003aa2:	4770      	bx	lr

08003aa4 <forward_sign>:
 8003aa4:	b4f0      	push	{r4, r5, r6, r7}
 8003aa6:	6942      	ldr	r2, [r0, #20]
 8003aa8:	8811      	ldrh	r1, [r2, #0]
 8003aaa:	2900      	cmp	r1, #0
 8003aac:	bf1a      	itte	ne
 8003aae:	6850      	ldrne	r0, [r2, #4]
 8003ab0:	1d00      	addne	r0, r0, #4
 8003ab2:	2004      	moveq	r0, #4
 8003ab4:	f04f 0501 	mov.w	r5, #1
 8003ab8:	6800      	ldr	r0, [r0, #0]
 8003aba:	2800      	cmp	r0, #0
 8003abc:	bf14      	ite	ne
 8003abe:	6803      	ldrne	r3, [r0, #0]
 8003ac0:	2300      	moveq	r3, #0
 8003ac2:	2901      	cmp	r1, #1
 8003ac4:	bfc6      	itte	gt
 8003ac6:	6850      	ldrgt	r0, [r2, #4]
 8003ac8:	3010      	addgt	r0, #16
 8003aca:	2004      	movle	r0, #4
 8003acc:	6800      	ldr	r0, [r0, #0]
 8003ace:	2800      	cmp	r0, #0
 8003ad0:	bf19      	ittee	ne
 8003ad2:	6800      	ldrne	r0, [r0, #0]
 8003ad4:	f100 0418 	addne.w	r4, r0, #24
 8003ad8:	2100      	moveq	r1, #0
 8003ada:	f101 0418 	addeq.w	r4, r1, #24
 8003ade:	f103 0108 	add.w	r1, r3, #8
 8003ae2:	680a      	ldr	r2, [r1, #0]
 8003ae4:	0a12      	lsrs	r2, r2, #8
 8003ae6:	d01e      	beq.n	8003b26 <forward_sign+0x82>
 8003ae8:	684e      	ldr	r6, [r1, #4]
 8003aea:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003aee:	4610      	mov	r0, r2
 8003af0:	1f0f      	subs	r7, r1, #4
 8003af2:	f010 0103 	ands.w	r1, r0, #3
 8003af6:	d006      	beq.n	8003b06 <forward_sign+0x62>
 8003af8:	1e52      	subs	r2, r2, #1
 8003afa:	f857 c904 	ldr.w	ip, [r7], #-4
 8003afe:	1e49      	subs	r1, r1, #1
 8003b00:	fb0c f505 	mul.w	r5, ip, r5
 8003b04:	d1f8      	bne.n	8003af8 <forward_sign+0x54>
 8003b06:	0880      	lsrs	r0, r0, #2
 8003b08:	d00d      	beq.n	8003b26 <forward_sign+0x82>
 8003b0a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003b0e:	3910      	subs	r1, #16
 8003b10:	68ca      	ldr	r2, [r1, #12]
 8003b12:	688e      	ldr	r6, [r1, #8]
 8003b14:	684f      	ldr	r7, [r1, #4]
 8003b16:	4372      	muls	r2, r6
 8003b18:	f851 6910 	ldr.w	r6, [r1], #-16
 8003b1c:	437a      	muls	r2, r7
 8003b1e:	4372      	muls	r2, r6
 8003b20:	4355      	muls	r5, r2
 8003b22:	1e40      	subs	r0, r0, #1
 8003b24:	d1f4      	bne.n	8003b10 <forward_sign+0x6c>
 8003b26:	6998      	ldr	r0, [r3, #24]
 8003b28:	6822      	ldr	r2, [r4, #0]
 8003b2a:	6880      	ldr	r0, [r0, #8]
 8003b2c:	6893      	ldr	r3, [r2, #8]
 8003b2e:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003b32:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003b36:	1f09      	subs	r1, r1, #4
 8003b38:	1f22      	subs	r2, r4, #4
 8003b3a:	4281      	cmp	r1, r0
 8003b3c:	f0c0 8015 	bcc.w	8003b6a <forward_sign+0xc6>
 8003b40:	f04f 33ff 	mov.w	r3, #4294967295
 8003b44:	ed91 0a00 	vldr	s0, [r1]
 8003b48:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b50:	bfcc      	ite	gt
 8003b52:	ed9f 0a07 	vldrgt	s0, [pc, #28]	; 8003b70 <.text_49>
 8003b56:	ee00 3a10 	vmovle	s0, r3
 8003b5a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003b5e:	ed82 0a00 	vstr	s0, [r2]
 8003b62:	1f09      	subs	r1, r1, #4
 8003b64:	1f12      	subs	r2, r2, #4
 8003b66:	4281      	cmp	r1, r0
 8003b68:	d2ec      	bcs.n	8003b44 <forward_sign+0xa0>
 8003b6a:	bcf0      	pop	{r4, r5, r6, r7}
 8003b6c:	4770      	bx	lr
	...

08003b70 <.text_49>:
 8003b70:	00000001 	.word	0x00000001

08003b74 <nl_func_sqrt_array_f32>:
 8003b74:	b570      	push	{r4, r5, r6, lr}
 8003b76:	460c      	mov	r4, r1
 8003b78:	6880      	ldr	r0, [r0, #8]
 8003b7a:	68a1      	ldr	r1, [r4, #8]
 8003b7c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003b80:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003b84:	1f1d      	subs	r5, r3, #4
 8003b86:	1f16      	subs	r6, r2, #4
 8003b88:	428d      	cmp	r5, r1
 8003b8a:	d30a      	bcc.n	8003ba2 <nl_func_sqrt_array_f32+0x2e>
 8003b8c:	ed95 0a00 	vldr	s0, [r5]
 8003b90:	f002 faa8 	bl	80060e4 <ai_math_sqrt>
 8003b94:	ed86 0a00 	vstr	s0, [r6]
 8003b98:	1f2d      	subs	r5, r5, #4
 8003b9a:	68a0      	ldr	r0, [r4, #8]
 8003b9c:	1f36      	subs	r6, r6, #4
 8003b9e:	4285      	cmp	r5, r0
 8003ba0:	d2f4      	bcs.n	8003b8c <nl_func_sqrt_array_f32+0x18>
 8003ba2:	bd70      	pop	{r4, r5, r6, pc}

08003ba4 <forward_sqrt>:
 8003ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ba6:	b081      	sub	sp, #4
 8003ba8:	6942      	ldr	r2, [r0, #20]
 8003baa:	8811      	ldrh	r1, [r2, #0]
 8003bac:	2900      	cmp	r1, #0
 8003bae:	bf1a      	itte	ne
 8003bb0:	6850      	ldrne	r0, [r2, #4]
 8003bb2:	1d00      	addne	r0, r0, #4
 8003bb4:	2004      	moveq	r0, #4
 8003bb6:	f04f 0501 	mov.w	r5, #1
 8003bba:	6800      	ldr	r0, [r0, #0]
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	bf14      	ite	ne
 8003bc0:	6803      	ldrne	r3, [r0, #0]
 8003bc2:	2300      	moveq	r3, #0
 8003bc4:	2902      	cmp	r1, #2
 8003bc6:	bfa6      	itte	ge
 8003bc8:	6850      	ldrge	r0, [r2, #4]
 8003bca:	3010      	addge	r0, #16
 8003bcc:	2004      	movlt	r0, #4
 8003bce:	6800      	ldr	r0, [r0, #0]
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	bf19      	ittee	ne
 8003bd4:	6800      	ldrne	r0, [r0, #0]
 8003bd6:	f100 0418 	addne.w	r4, r0, #24
 8003bda:	2100      	moveq	r1, #0
 8003bdc:	f101 0418 	addeq.w	r4, r1, #24
 8003be0:	f103 0108 	add.w	r1, r3, #8
 8003be4:	680a      	ldr	r2, [r1, #0]
 8003be6:	0a12      	lsrs	r2, r2, #8
 8003be8:	d01e      	beq.n	8003c28 <forward_sqrt+0x84>
 8003bea:	684e      	ldr	r6, [r1, #4]
 8003bec:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	1f0f      	subs	r7, r1, #4
 8003bf4:	f010 0103 	ands.w	r1, r0, #3
 8003bf8:	d006      	beq.n	8003c08 <forward_sqrt+0x64>
 8003bfa:	1e52      	subs	r2, r2, #1
 8003bfc:	f857 c904 	ldr.w	ip, [r7], #-4
 8003c00:	1e49      	subs	r1, r1, #1
 8003c02:	fb0c f505 	mul.w	r5, ip, r5
 8003c06:	d1f8      	bne.n	8003bfa <forward_sqrt+0x56>
 8003c08:	0880      	lsrs	r0, r0, #2
 8003c0a:	d00d      	beq.n	8003c28 <forward_sqrt+0x84>
 8003c0c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003c10:	3910      	subs	r1, #16
 8003c12:	68ca      	ldr	r2, [r1, #12]
 8003c14:	688e      	ldr	r6, [r1, #8]
 8003c16:	684f      	ldr	r7, [r1, #4]
 8003c18:	4372      	muls	r2, r6
 8003c1a:	f851 6910 	ldr.w	r6, [r1], #-16
 8003c1e:	437a      	muls	r2, r7
 8003c20:	4372      	muls	r2, r6
 8003c22:	4355      	muls	r5, r2
 8003c24:	1e40      	subs	r0, r0, #1
 8003c26:	d1f4      	bne.n	8003c12 <forward_sqrt+0x6e>
 8003c28:	699e      	ldr	r6, [r3, #24]
 8003c2a:	68b0      	ldr	r0, [r6, #8]
 8003c2c:	6822      	ldr	r2, [r4, #0]
 8003c2e:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003c32:	1f0f      	subs	r7, r1, #4
 8003c34:	6891      	ldr	r1, [r2, #8]
 8003c36:	eb01 0385 	add.w	r3, r1, r5, lsl #2
 8003c3a:	1f1c      	subs	r4, r3, #4
 8003c3c:	4287      	cmp	r7, r0
 8003c3e:	d30a      	bcc.n	8003c56 <forward_sqrt+0xb2>
 8003c40:	ed97 0a00 	vldr	s0, [r7]
 8003c44:	f002 fa4e 	bl	80060e4 <ai_math_sqrt>
 8003c48:	ed84 0a00 	vstr	s0, [r4]
 8003c4c:	1f3f      	subs	r7, r7, #4
 8003c4e:	68b0      	ldr	r0, [r6, #8]
 8003c50:	1f24      	subs	r4, r4, #4
 8003c52:	4287      	cmp	r7, r0
 8003c54:	d2f4      	bcs.n	8003c40 <forward_sqrt+0x9c>
 8003c56:	b001      	add	sp, #4
 8003c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003c5c <nl_func_soft_plus_array_f32>:
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	688c      	ldr	r4, [r1, #8]
 8003c60:	6880      	ldr	r0, [r0, #8]
 8003c62:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003c66:	1f0d      	subs	r5, r1, #4
 8003c68:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003c6c:	1f0e      	subs	r6, r1, #4
 8003c6e:	42a5      	cmp	r5, r4
 8003c70:	f0c0 8010 	bcc.w	8003c94 <nl_func_soft_plus_array_f32+0x38>
 8003c74:	ed95 0a00 	vldr	s0, [r5]
 8003c78:	f00c ff26 	bl	8010ac8 <expf>
 8003c7c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003c80:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003c84:	f00c ff76 	bl	8010b74 <logf>
 8003c88:	ed86 0a00 	vstr	s0, [r6]
 8003c8c:	1f2d      	subs	r5, r5, #4
 8003c8e:	1f36      	subs	r6, r6, #4
 8003c90:	42a5      	cmp	r5, r4
 8003c92:	d2ef      	bcs.n	8003c74 <nl_func_soft_plus_array_f32+0x18>
 8003c94:	bd70      	pop	{r4, r5, r6, pc}
	...

08003c98 <forward_soft_plus>:
 8003c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c9a:	b081      	sub	sp, #4
 8003c9c:	6942      	ldr	r2, [r0, #20]
 8003c9e:	8811      	ldrh	r1, [r2, #0]
 8003ca0:	2900      	cmp	r1, #0
 8003ca2:	bf1a      	itte	ne
 8003ca4:	6850      	ldrne	r0, [r2, #4]
 8003ca6:	1d00      	addne	r0, r0, #4
 8003ca8:	2004      	moveq	r0, #4
 8003caa:	f04f 0501 	mov.w	r5, #1
 8003cae:	6800      	ldr	r0, [r0, #0]
 8003cb0:	2800      	cmp	r0, #0
 8003cb2:	bf14      	ite	ne
 8003cb4:	6803      	ldrne	r3, [r0, #0]
 8003cb6:	2300      	moveq	r3, #0
 8003cb8:	2902      	cmp	r1, #2
 8003cba:	bfa6      	itte	ge
 8003cbc:	6850      	ldrge	r0, [r2, #4]
 8003cbe:	3010      	addge	r0, #16
 8003cc0:	2004      	movlt	r0, #4
 8003cc2:	6800      	ldr	r0, [r0, #0]
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	bf19      	ittee	ne
 8003cc8:	6800      	ldrne	r0, [r0, #0]
 8003cca:	f100 0418 	addne.w	r4, r0, #24
 8003cce:	2100      	moveq	r1, #0
 8003cd0:	f101 0418 	addeq.w	r4, r1, #24
 8003cd4:	f103 0108 	add.w	r1, r3, #8
 8003cd8:	680a      	ldr	r2, [r1, #0]
 8003cda:	0a12      	lsrs	r2, r2, #8
 8003cdc:	d01e      	beq.n	8003d1c <forward_soft_plus+0x84>
 8003cde:	684e      	ldr	r6, [r1, #4]
 8003ce0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	1f0f      	subs	r7, r1, #4
 8003ce8:	f010 0103 	ands.w	r1, r0, #3
 8003cec:	d006      	beq.n	8003cfc <forward_soft_plus+0x64>
 8003cee:	1e52      	subs	r2, r2, #1
 8003cf0:	f857 c904 	ldr.w	ip, [r7], #-4
 8003cf4:	1e49      	subs	r1, r1, #1
 8003cf6:	fb0c f505 	mul.w	r5, ip, r5
 8003cfa:	d1f8      	bne.n	8003cee <forward_soft_plus+0x56>
 8003cfc:	0880      	lsrs	r0, r0, #2
 8003cfe:	d00d      	beq.n	8003d1c <forward_soft_plus+0x84>
 8003d00:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003d04:	3910      	subs	r1, #16
 8003d06:	68ca      	ldr	r2, [r1, #12]
 8003d08:	688e      	ldr	r6, [r1, #8]
 8003d0a:	684f      	ldr	r7, [r1, #4]
 8003d0c:	4372      	muls	r2, r6
 8003d0e:	f851 6910 	ldr.w	r6, [r1], #-16
 8003d12:	437a      	muls	r2, r7
 8003d14:	4372      	muls	r2, r6
 8003d16:	4355      	muls	r5, r2
 8003d18:	1e40      	subs	r0, r0, #1
 8003d1a:	d1f4      	bne.n	8003d06 <forward_soft_plus+0x6e>
 8003d1c:	6998      	ldr	r0, [r3, #24]
 8003d1e:	6886      	ldr	r6, [r0, #8]
 8003d20:	6821      	ldr	r1, [r4, #0]
 8003d22:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003d26:	1f07      	subs	r7, r0, #4
 8003d28:	6888      	ldr	r0, [r1, #8]
 8003d2a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003d2e:	1f14      	subs	r4, r2, #4
 8003d30:	42b7      	cmp	r7, r6
 8003d32:	d30f      	bcc.n	8003d54 <forward_soft_plus+0xbc>
 8003d34:	ed97 0a00 	vldr	s0, [r7]
 8003d38:	f00c fec6 	bl	8010ac8 <expf>
 8003d3c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003d40:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003d44:	f00c ff16 	bl	8010b74 <logf>
 8003d48:	ed84 0a00 	vstr	s0, [r4]
 8003d4c:	1f3f      	subs	r7, r7, #4
 8003d4e:	1f24      	subs	r4, r4, #4
 8003d50:	42b7      	cmp	r7, r6
 8003d52:	d2ef      	bcs.n	8003d34 <forward_soft_plus+0x9c>
 8003d54:	b001      	add	sp, #4
 8003d56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d58 <nl_func_soft_sign_array_f32>:
 8003d58:	6889      	ldr	r1, [r1, #8]
 8003d5a:	6880      	ldr	r0, [r0, #8]
 8003d5c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003d60:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003d64:	1f1b      	subs	r3, r3, #4
 8003d66:	1f10      	subs	r0, r2, #4
 8003d68:	428b      	cmp	r3, r1
 8003d6a:	d30f      	bcc.n	8003d8c <nl_func_soft_sign_array_f32+0x34>
 8003d6c:	ed93 0a00 	vldr	s0, [r3]
 8003d70:	eef0 0ac0 	vabs.f32	s1, s0
 8003d74:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003d78:	ee70 0a81 	vadd.f32	s1, s1, s2
 8003d7c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003d80:	ed80 0a00 	vstr	s0, [r0]
 8003d84:	1f1b      	subs	r3, r3, #4
 8003d86:	1f00      	subs	r0, r0, #4
 8003d88:	428b      	cmp	r3, r1
 8003d8a:	d2ef      	bcs.n	8003d6c <nl_func_soft_sign_array_f32+0x14>
 8003d8c:	4770      	bx	lr
	...

08003d90 <forward_soft_sign>:
 8003d90:	b4f0      	push	{r4, r5, r6, r7}
 8003d92:	6942      	ldr	r2, [r0, #20]
 8003d94:	8811      	ldrh	r1, [r2, #0]
 8003d96:	2900      	cmp	r1, #0
 8003d98:	bf1a      	itte	ne
 8003d9a:	6850      	ldrne	r0, [r2, #4]
 8003d9c:	1d00      	addne	r0, r0, #4
 8003d9e:	2004      	moveq	r0, #4
 8003da0:	f04f 0501 	mov.w	r5, #1
 8003da4:	6800      	ldr	r0, [r0, #0]
 8003da6:	2800      	cmp	r0, #0
 8003da8:	bf14      	ite	ne
 8003daa:	6803      	ldrne	r3, [r0, #0]
 8003dac:	2300      	moveq	r3, #0
 8003dae:	2902      	cmp	r1, #2
 8003db0:	bfa6      	itte	ge
 8003db2:	6850      	ldrge	r0, [r2, #4]
 8003db4:	3010      	addge	r0, #16
 8003db6:	2004      	movlt	r0, #4
 8003db8:	6800      	ldr	r0, [r0, #0]
 8003dba:	2800      	cmp	r0, #0
 8003dbc:	bf19      	ittee	ne
 8003dbe:	6800      	ldrne	r0, [r0, #0]
 8003dc0:	f100 0418 	addne.w	r4, r0, #24
 8003dc4:	2100      	moveq	r1, #0
 8003dc6:	f101 0418 	addeq.w	r4, r1, #24
 8003dca:	f103 0108 	add.w	r1, r3, #8
 8003dce:	680a      	ldr	r2, [r1, #0]
 8003dd0:	0a12      	lsrs	r2, r2, #8
 8003dd2:	d01e      	beq.n	8003e12 <forward_soft_sign+0x82>
 8003dd4:	684e      	ldr	r6, [r1, #4]
 8003dd6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003dda:	4610      	mov	r0, r2
 8003ddc:	1f0f      	subs	r7, r1, #4
 8003dde:	f010 0103 	ands.w	r1, r0, #3
 8003de2:	d006      	beq.n	8003df2 <forward_soft_sign+0x62>
 8003de4:	1e52      	subs	r2, r2, #1
 8003de6:	f857 c904 	ldr.w	ip, [r7], #-4
 8003dea:	1e49      	subs	r1, r1, #1
 8003dec:	fb0c f505 	mul.w	r5, ip, r5
 8003df0:	d1f8      	bne.n	8003de4 <forward_soft_sign+0x54>
 8003df2:	0880      	lsrs	r0, r0, #2
 8003df4:	d00d      	beq.n	8003e12 <forward_soft_sign+0x82>
 8003df6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003dfa:	3910      	subs	r1, #16
 8003dfc:	68ca      	ldr	r2, [r1, #12]
 8003dfe:	688e      	ldr	r6, [r1, #8]
 8003e00:	684f      	ldr	r7, [r1, #4]
 8003e02:	4372      	muls	r2, r6
 8003e04:	f851 6910 	ldr.w	r6, [r1], #-16
 8003e08:	437a      	muls	r2, r7
 8003e0a:	4372      	muls	r2, r6
 8003e0c:	4355      	muls	r5, r2
 8003e0e:	1e40      	subs	r0, r0, #1
 8003e10:	d1f4      	bne.n	8003dfc <forward_soft_sign+0x6c>
 8003e12:	6998      	ldr	r0, [r3, #24]
 8003e14:	6822      	ldr	r2, [r4, #0]
 8003e16:	6880      	ldr	r0, [r0, #8]
 8003e18:	6893      	ldr	r3, [r2, #8]
 8003e1a:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003e1e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003e22:	1f09      	subs	r1, r1, #4
 8003e24:	1f22      	subs	r2, r4, #4
 8003e26:	4281      	cmp	r1, r0
 8003e28:	f0c0 8010 	bcc.w	8003e4c <forward_soft_sign+0xbc>
 8003e2c:	ed91 0a00 	vldr	s0, [r1]
 8003e30:	eef0 0ac0 	vabs.f32	s1, s0
 8003e34:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003e38:	ee70 0a81 	vadd.f32	s1, s1, s2
 8003e3c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003e40:	ed82 0a00 	vstr	s0, [r2]
 8003e44:	1f09      	subs	r1, r1, #4
 8003e46:	1f12      	subs	r2, r2, #4
 8003e48:	4281      	cmp	r1, r0
 8003e4a:	d2ef      	bcs.n	8003e2c <forward_soft_sign+0x9c>
 8003e4c:	bcf0      	pop	{r4, r5, r6, r7}
 8003e4e:	4770      	bx	lr

08003e50 <nl_func_tanh_array_f32>:
 8003e50:	b570      	push	{r4, r5, r6, lr}
 8003e52:	688c      	ldr	r4, [r1, #8]
 8003e54:	6880      	ldr	r0, [r0, #8]
 8003e56:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003e5a:	1f0d      	subs	r5, r1, #4
 8003e5c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003e60:	1f0e      	subs	r6, r1, #4
 8003e62:	42a5      	cmp	r5, r4
 8003e64:	f0c0 800a 	bcc.w	8003e7c <nl_func_tanh_array_f32+0x2c>
 8003e68:	ed95 0a00 	vldr	s0, [r5]
 8003e6c:	f00c fd0a 	bl	8010884 <tanhf>
 8003e70:	ed86 0a00 	vstr	s0, [r6]
 8003e74:	1f2d      	subs	r5, r5, #4
 8003e76:	1f36      	subs	r6, r6, #4
 8003e78:	42a5      	cmp	r5, r4
 8003e7a:	d2f5      	bcs.n	8003e68 <nl_func_tanh_array_f32+0x18>
 8003e7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003e80 <forward_tanh>:
 8003e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e82:	b081      	sub	sp, #4
 8003e84:	6942      	ldr	r2, [r0, #20]
 8003e86:	8811      	ldrh	r1, [r2, #0]
 8003e88:	2900      	cmp	r1, #0
 8003e8a:	bf1a      	itte	ne
 8003e8c:	6850      	ldrne	r0, [r2, #4]
 8003e8e:	1d00      	addne	r0, r0, #4
 8003e90:	2004      	moveq	r0, #4
 8003e92:	f04f 0501 	mov.w	r5, #1
 8003e96:	6800      	ldr	r0, [r0, #0]
 8003e98:	2800      	cmp	r0, #0
 8003e9a:	bf14      	ite	ne
 8003e9c:	6803      	ldrne	r3, [r0, #0]
 8003e9e:	2300      	moveq	r3, #0
 8003ea0:	2902      	cmp	r1, #2
 8003ea2:	bfa6      	itte	ge
 8003ea4:	6850      	ldrge	r0, [r2, #4]
 8003ea6:	3010      	addge	r0, #16
 8003ea8:	2004      	movlt	r0, #4
 8003eaa:	6800      	ldr	r0, [r0, #0]
 8003eac:	2800      	cmp	r0, #0
 8003eae:	bf19      	ittee	ne
 8003eb0:	6800      	ldrne	r0, [r0, #0]
 8003eb2:	f100 0418 	addne.w	r4, r0, #24
 8003eb6:	2100      	moveq	r1, #0
 8003eb8:	f101 0418 	addeq.w	r4, r1, #24
 8003ebc:	f103 0108 	add.w	r1, r3, #8
 8003ec0:	680a      	ldr	r2, [r1, #0]
 8003ec2:	0a12      	lsrs	r2, r2, #8
 8003ec4:	d01e      	beq.n	8003f04 <forward_tanh+0x84>
 8003ec6:	684e      	ldr	r6, [r1, #4]
 8003ec8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003ecc:	4610      	mov	r0, r2
 8003ece:	1f0f      	subs	r7, r1, #4
 8003ed0:	f010 0103 	ands.w	r1, r0, #3
 8003ed4:	d006      	beq.n	8003ee4 <forward_tanh+0x64>
 8003ed6:	1e52      	subs	r2, r2, #1
 8003ed8:	f857 c904 	ldr.w	ip, [r7], #-4
 8003edc:	1e49      	subs	r1, r1, #1
 8003ede:	fb0c f505 	mul.w	r5, ip, r5
 8003ee2:	d1f8      	bne.n	8003ed6 <forward_tanh+0x56>
 8003ee4:	0880      	lsrs	r0, r0, #2
 8003ee6:	d00d      	beq.n	8003f04 <forward_tanh+0x84>
 8003ee8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003eec:	3910      	subs	r1, #16
 8003eee:	68ca      	ldr	r2, [r1, #12]
 8003ef0:	688e      	ldr	r6, [r1, #8]
 8003ef2:	684f      	ldr	r7, [r1, #4]
 8003ef4:	4372      	muls	r2, r6
 8003ef6:	f851 6910 	ldr.w	r6, [r1], #-16
 8003efa:	437a      	muls	r2, r7
 8003efc:	4372      	muls	r2, r6
 8003efe:	4355      	muls	r5, r2
 8003f00:	1e40      	subs	r0, r0, #1
 8003f02:	d1f4      	bne.n	8003eee <forward_tanh+0x6e>
 8003f04:	6998      	ldr	r0, [r3, #24]
 8003f06:	6886      	ldr	r6, [r0, #8]
 8003f08:	6821      	ldr	r1, [r4, #0]
 8003f0a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003f0e:	1f07      	subs	r7, r0, #4
 8003f10:	6888      	ldr	r0, [r1, #8]
 8003f12:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003f16:	1f14      	subs	r4, r2, #4
 8003f18:	42b7      	cmp	r7, r6
 8003f1a:	d309      	bcc.n	8003f30 <forward_tanh+0xb0>
 8003f1c:	ed97 0a00 	vldr	s0, [r7]
 8003f20:	f00c fcb0 	bl	8010884 <tanhf>
 8003f24:	ed84 0a00 	vstr	s0, [r4]
 8003f28:	1f3f      	subs	r7, r7, #4
 8003f2a:	1f24      	subs	r4, r4, #4
 8003f2c:	42b7      	cmp	r7, r6
 8003f2e:	d2f5      	bcs.n	8003f1c <forward_tanh+0x9c>
 8003f30:	b001      	add	sp, #4
 8003f32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f34 <nl_func_relu_array_f32>:
 8003f34:	6889      	ldr	r1, [r1, #8]
 8003f36:	6880      	ldr	r0, [r0, #8]
 8003f38:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003f3c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003f40:	1f1b      	subs	r3, r3, #4
 8003f42:	1f10      	subs	r0, r2, #4
 8003f44:	428b      	cmp	r3, r1
 8003f46:	d30e      	bcc.n	8003f66 <nl_func_relu_array_f32+0x32>
 8003f48:	ed93 0a00 	vldr	s0, [r3]
 8003f4c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f54:	bf48      	it	mi
 8003f56:	ed9f 0a7b 	vldrmi	s0, [pc, #492]	; 8004144 <.text_62>
 8003f5a:	ed80 0a00 	vstr	s0, [r0]
 8003f5e:	1f1b      	subs	r3, r3, #4
 8003f60:	1f00      	subs	r0, r0, #4
 8003f62:	428b      	cmp	r3, r1
 8003f64:	d2f0      	bcs.n	8003f48 <nl_func_relu_array_f32+0x14>
 8003f66:	4770      	bx	lr

08003f68 <nl_func_sm_channel_f32>:
 8003f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f6c:	ed2d 8b02 	vpush	{d8}
 8003f70:	688f      	ldr	r7, [r1, #8]
 8003f72:	6886      	ldr	r6, [r0, #8]
 8003f74:	ed97 8a00 	vldr	s16, [r7]
 8003f78:	4614      	mov	r4, r2
 8003f7a:	2c02      	cmp	r4, #2
 8003f7c:	eddf 8a71 	vldr	s17, [pc, #452]	; 8004144 <.text_62>
 8003f80:	d33d      	bcc.n	8003ffe <nl_func_sm_channel_f32+0x96>
 8003f82:	1e61      	subs	r1, r4, #1
 8003f84:	1d3a      	adds	r2, r7, #4
 8003f86:	f011 0003 	ands.w	r0, r1, #3
 8003f8a:	d00c      	beq.n	8003fa6 <nl_func_sm_channel_f32+0x3e>
 8003f8c:	ed92 0a00 	vldr	s0, [r2]
 8003f90:	eeb4 0a48 	vcmp.f32	s0, s16
 8003f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f98:	bf58      	it	pl
 8003f9a:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003f9e:	1e40      	subs	r0, r0, #1
 8003fa0:	f102 0204 	add.w	r2, r2, #4
 8003fa4:	d1f2      	bne.n	8003f8c <nl_func_sm_channel_f32+0x24>
 8003fa6:	0889      	lsrs	r1, r1, #2
 8003fa8:	f000 802b 	beq.w	8004002 <nl_func_sm_channel_f32+0x9a>
 8003fac:	ed92 0a00 	vldr	s0, [r2]
 8003fb0:	eeb4 0a48 	vcmp.f32	s0, s16
 8003fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb8:	bf58      	it	pl
 8003fba:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003fbe:	ed92 0a01 	vldr	s0, [r2, #4]
 8003fc2:	eeb4 0a48 	vcmp.f32	s0, s16
 8003fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fca:	bf58      	it	pl
 8003fcc:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003fd0:	ed92 0a02 	vldr	s0, [r2, #8]
 8003fd4:	eeb4 0a48 	vcmp.f32	s0, s16
 8003fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fdc:	bf58      	it	pl
 8003fde:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003fe2:	ed92 0a03 	vldr	s0, [r2, #12]
 8003fe6:	eeb4 0a48 	vcmp.f32	s0, s16
 8003fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fee:	bf58      	it	pl
 8003ff0:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003ff4:	1e49      	subs	r1, r1, #1
 8003ff6:	f102 0210 	add.w	r2, r2, #16
 8003ffa:	d1d7      	bne.n	8003fac <nl_func_sm_channel_f32+0x44>
 8003ffc:	e001      	b.n	8004002 <nl_func_sm_channel_f32+0x9a>
 8003ffe:	2c00      	cmp	r4, #0
 8004000:	d040      	beq.n	8004084 <nl_func_sm_channel_f32+0x11c>
 8004002:	46b0      	mov	r8, r6
 8004004:	ea4f 0504 	mov.w	r5, r4
 8004008:	ed97 0a00 	vldr	s0, [r7]
 800400c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004010:	f00c fd5a 	bl	8010ac8 <expf>
 8004014:	1d3f      	adds	r7, r7, #4
 8004016:	ed88 0a00 	vstr	s0, [r8]
 800401a:	1e6d      	subs	r5, r5, #1
 800401c:	ee78 8a80 	vadd.f32	s17, s17, s0
 8004020:	f108 0804 	add.w	r8, r8, #4
 8004024:	d1f0      	bne.n	8004008 <nl_func_sm_channel_f32+0xa0>
 8004026:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800402a:	f014 0003 	ands.w	r0, r4, #3
 800402e:	ee80 0a28 	vdiv.f32	s0, s0, s17
 8004032:	d009      	beq.n	8004048 <nl_func_sm_channel_f32+0xe0>
 8004034:	edd6 0a00 	vldr	s1, [r6]
 8004038:	ee60 0a80 	vmul.f32	s1, s1, s0
 800403c:	edc6 0a00 	vstr	s1, [r6]
 8004040:	1e40      	subs	r0, r0, #1
 8004042:	f106 0604 	add.w	r6, r6, #4
 8004046:	d1f5      	bne.n	8004034 <nl_func_sm_channel_f32+0xcc>
 8004048:	08a4      	lsrs	r4, r4, #2
 800404a:	d01b      	beq.n	8004084 <nl_func_sm_channel_f32+0x11c>
 800404c:	edd6 0a00 	vldr	s1, [r6]
 8004050:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004054:	edc6 0a00 	vstr	s1, [r6]
 8004058:	1e64      	subs	r4, r4, #1
 800405a:	ed96 1a01 	vldr	s2, [r6, #4]
 800405e:	edd6 0a02 	vldr	s1, [r6, #8]
 8004062:	ee21 1a00 	vmul.f32	s2, s2, s0
 8004066:	ed86 1a01 	vstr	s2, [r6, #4]
 800406a:	ee60 0a80 	vmul.f32	s1, s1, s0
 800406e:	ed96 1a03 	vldr	s2, [r6, #12]
 8004072:	edc6 0a02 	vstr	s1, [r6, #8]
 8004076:	ee21 1a00 	vmul.f32	s2, s2, s0
 800407a:	ed86 1a03 	vstr	s2, [r6, #12]
 800407e:	f106 0610 	add.w	r6, r6, #16
 8004082:	d1e3      	bne.n	800404c <nl_func_sm_channel_f32+0xe4>
 8004084:	ecbd 8b02 	vpop	{d8}
 8004088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800408c <nl_func_sm_array_f32>:
 800408c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004090:	460d      	mov	r5, r1
 8004092:	4604      	mov	r4, r0
 8004094:	9f08      	ldr	r7, [sp, #32]
 8004096:	68a8      	ldr	r0, [r5, #8]
 8004098:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800409a:	00bf      	lsls	r7, r7, #2
 800409c:	427f      	negs	r7, r7
 800409e:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80040a2:	68a0      	ldr	r0, [r4, #8]
 80040a4:	eb01 0a07 	add.w	sl, r1, r7
 80040a8:	00b6      	lsls	r6, r6, #2
 80040aa:	4276      	negs	r6, r6
 80040ac:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80040b0:	68ea      	ldr	r2, [r5, #12]
 80040b2:	4592      	cmp	sl, r2
 80040b4:	eb01 0906 	add.w	r9, r1, r6
 80040b8:	d30f      	bcc.n	80040da <nl_func_sm_array_f32+0x4e>
 80040ba:	4698      	mov	r8, r3
 80040bc:	f8c5 a008 	str.w	sl, [r5, #8]
 80040c0:	f8c4 9008 	str.w	r9, [r4, #8]
 80040c4:	2300      	movs	r3, #0
 80040c6:	4642      	mov	r2, r8
 80040c8:	4629      	mov	r1, r5
 80040ca:	4620      	mov	r0, r4
 80040cc:	f7ff ff4c 	bl	8003f68 <nl_func_sm_channel_f32>
 80040d0:	68e8      	ldr	r0, [r5, #12]
 80040d2:	44ba      	add	sl, r7
 80040d4:	4582      	cmp	sl, r0
 80040d6:	44b1      	add	r9, r6
 80040d8:	d2f0      	bcs.n	80040bc <nl_func_sm_array_f32+0x30>
 80040da:	68e9      	ldr	r1, [r5, #12]
 80040dc:	60a9      	str	r1, [r5, #8]
 80040de:	68e0      	ldr	r0, [r4, #12]
 80040e0:	60a0      	str	r0, [r4, #8]
 80040e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080040e8 <nl_func_hard_sigmoid_array_f32>:
 80040e8:	6889      	ldr	r1, [r1, #8]
 80040ea:	6880      	ldr	r0, [r0, #8]
 80040ec:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80040f0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80040f4:	1f1b      	subs	r3, r3, #4
 80040f6:	1f10      	subs	r0, r2, #4
 80040f8:	428b      	cmp	r3, r1
 80040fa:	d321      	bcc.n	8004140 <nl_func_hard_sigmoid_array_f32+0x58>
 80040fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004100:	eddf 0ab8 	vldr	s1, [pc, #736]	; 80043e4 <.text_68>
 8004104:	edd3 1a00 	vldr	s3, [r3]
 8004108:	ed9f 2ab7 	vldr	s4, [pc, #732]	; 80043e8 <.text_69>
 800410c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8004110:	ee01 1a82 	vmla.f32	s2, s3, s4
 8004114:	eeb4 1a60 	vcmp.f32	s2, s1
 8004118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411c:	da08      	bge.n	8004130 <nl_func_hard_sigmoid_array_f32+0x48>
 800411e:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8004122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004126:	d505      	bpl.n	8004134 <nl_func_hard_sigmoid_array_f32+0x4c>
 8004128:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8004144 <.text_62>
 800412c:	e002      	b.n	8004134 <nl_func_hard_sigmoid_array_f32+0x4c>
 800412e:	bf00      	nop
 8004130:	eeb0 1a40 	vmov.f32	s2, s0
 8004134:	ed80 1a00 	vstr	s2, [r0]
 8004138:	1f1b      	subs	r3, r3, #4
 800413a:	1f00      	subs	r0, r0, #4
 800413c:	428b      	cmp	r3, r1
 800413e:	d2e1      	bcs.n	8004104 <nl_func_hard_sigmoid_array_f32+0x1c>
 8004140:	4770      	bx	lr
	...

08004144 <.text_62>:
 8004144:	00000000 	.word	0x00000000

08004148 <nl_func_clip_array_f32>:
 8004148:	6889      	ldr	r1, [r1, #8]
 800414a:	6880      	ldr	r0, [r0, #8]
 800414c:	ed93 0a00 	vldr	s0, [r3]
 8004150:	edd3 0a01 	vldr	s1, [r3, #4]
 8004154:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004158:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800415c:	1f1b      	subs	r3, r3, #4
 800415e:	1f10      	subs	r0, r2, #4
 8004160:	428b      	cmp	r3, r1
 8004162:	d315      	bcc.n	8004190 <nl_func_clip_array_f32+0x48>
 8004164:	ed93 1a00 	vldr	s2, [r3]
 8004168:	eeb4 0a41 	vcmp.f32	s0, s2
 800416c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004170:	bf58      	it	pl
 8004172:	eeb0 1a40 	vmovpl.f32	s2, s0
 8004176:	eeb4 1a60 	vcmp.f32	s2, s1
 800417a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800417e:	bf58      	it	pl
 8004180:	eeb0 1a60 	vmovpl.f32	s2, s1
 8004184:	ed80 1a00 	vstr	s2, [r0]
 8004188:	1f1b      	subs	r3, r3, #4
 800418a:	1f00      	subs	r0, r0, #4
 800418c:	428b      	cmp	r3, r1
 800418e:	d2e9      	bcs.n	8004164 <nl_func_clip_array_f32+0x1c>
 8004190:	4770      	bx	lr
	...

08004194 <nl_func_hardmax_array_f32>:
 8004194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004198:	6852      	ldr	r2, [r2, #4]
 800419a:	6855      	ldr	r5, [r2, #4]
 800419c:	68d4      	ldr	r4, [r2, #12]
 800419e:	688e      	ldr	r6, [r1, #8]
 80041a0:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80041a4:	436c      	muls	r4, r5
 80041a6:	00a1      	lsls	r1, r4, #2
 80041a8:	4640      	mov	r0, r8
 80041aa:	f008 fdcd 	bl	800cd48 <__aeabi_memclr>
 80041ae:	2200      	movs	r2, #0
 80041b0:	2c00      	cmp	r4, #0
 80041b2:	4633      	mov	r3, r6
 80041b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80041b8:	f000 805b 	beq.w	8004272 <nl_func_hardmax_array_f32+0xde>
 80041bc:	f102 0c01 	add.w	ip, r2, #1
 80041c0:	eb05 0e02 	add.w	lr, r5, r2
 80041c4:	45f4      	cmp	ip, lr
 80041c6:	edd3 0a00 	vldr	s1, [r3]
 80041ca:	d249      	bcs.n	8004260 <nl_func_hardmax_array_f32+0xcc>
 80041cc:	1e69      	subs	r1, r5, #1
 80041ce:	f011 0003 	ands.w	r0, r1, #3
 80041d2:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 80041d6:	d00f      	beq.n	80041f8 <nl_func_hardmax_array_f32+0x64>
 80041d8:	ed97 1a00 	vldr	s2, [r7]
 80041dc:	eef4 0a41 	vcmp.f32	s1, s2
 80041e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e4:	bf44      	itt	mi
 80041e6:	eef0 0a41 	vmovmi.f32	s1, s2
 80041ea:	4662      	movmi	r2, ip
 80041ec:	1e40      	subs	r0, r0, #1
 80041ee:	f10c 0c01 	add.w	ip, ip, #1
 80041f2:	f107 0704 	add.w	r7, r7, #4
 80041f6:	d1ef      	bne.n	80041d8 <nl_func_hardmax_array_f32+0x44>
 80041f8:	0889      	lsrs	r1, r1, #2
 80041fa:	d031      	beq.n	8004260 <nl_func_hardmax_array_f32+0xcc>
 80041fc:	ed97 1a00 	vldr	s2, [r7]
 8004200:	eef4 0a41 	vcmp.f32	s1, s2
 8004204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004208:	bf44      	itt	mi
 800420a:	eef0 0a41 	vmovmi.f32	s1, s2
 800420e:	4662      	movmi	r2, ip
 8004210:	ed97 1a01 	vldr	s2, [r7, #4]
 8004214:	eef4 0a41 	vcmp.f32	s1, s2
 8004218:	f10c 0001 	add.w	r0, ip, #1
 800421c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004220:	bf44      	itt	mi
 8004222:	eef0 0a41 	vmovmi.f32	s1, s2
 8004226:	4602      	movmi	r2, r0
 8004228:	ed97 1a02 	vldr	s2, [r7, #8]
 800422c:	1c40      	adds	r0, r0, #1
 800422e:	eef4 0a41 	vcmp.f32	s1, s2
 8004232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004236:	bf44      	itt	mi
 8004238:	eef0 0a41 	vmovmi.f32	s1, s2
 800423c:	4602      	movmi	r2, r0
 800423e:	ed97 1a03 	vldr	s2, [r7, #12]
 8004242:	1c40      	adds	r0, r0, #1
 8004244:	eef4 0a41 	vcmp.f32	s1, s2
 8004248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800424c:	bf44      	itt	mi
 800424e:	eef0 0a41 	vmovmi.f32	s1, s2
 8004252:	4602      	movmi	r2, r0
 8004254:	1e49      	subs	r1, r1, #1
 8004256:	f100 0c01 	add.w	ip, r0, #1
 800425a:	f107 0710 	add.w	r7, r7, #16
 800425e:	d1cd      	bne.n	80041fc <nl_func_hardmax_array_f32+0x68>
 8004260:	eb08 0082 	add.w	r0, r8, r2, lsl #2
 8004264:	4672      	mov	r2, lr
 8004266:	42a2      	cmp	r2, r4
 8004268:	ed80 0a00 	vstr	s0, [r0]
 800426c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8004270:	d3a4      	bcc.n	80041bc <nl_func_hardmax_array_f32+0x28>
 8004272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004278 <nl_func_relu_generic_array_f32>:
 8004278:	6880      	ldr	r0, [r0, #8]
 800427a:	ed93 0a00 	vldr	s0, [r3]
 800427e:	edd3 0a01 	vldr	s1, [r3, #4]
 8004282:	ed93 1a02 	vldr	s2, [r3, #8]
 8004286:	6889      	ldr	r1, [r1, #8]
 8004288:	1f03      	subs	r3, r0, #4
 800428a:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800428e:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8004292:	1f0b      	subs	r3, r1, #4
 8004294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004298:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800429c:	d52a      	bpl.n	80042f4 <nl_func_relu_generic_array_f32+0x7c>
 800429e:	eef5 0a40 	vcmp.f32	s1, #0.0
 80042a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a6:	d013      	beq.n	80042d0 <nl_func_relu_generic_array_f32+0x58>
 80042a8:	428a      	cmp	r2, r1
 80042aa:	d310      	bcc.n	80042ce <nl_func_relu_generic_array_f32+0x56>
 80042ac:	ed92 1a00 	vldr	s2, [r2]
 80042b0:	eeb4 1a40 	vcmp.f32	s2, s0
 80042b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b8:	bf44      	itt	mi
 80042ba:	ee31 1a40 	vsubmi.f32	s2, s2, s0
 80042be:	ee21 1a20 	vmulmi.f32	s2, s2, s1
 80042c2:	ed80 1a00 	vstr	s2, [r0]
 80042c6:	1f12      	subs	r2, r2, #4
 80042c8:	1f00      	subs	r0, r0, #4
 80042ca:	428a      	cmp	r2, r1
 80042cc:	d2ee      	bcs.n	80042ac <nl_func_relu_generic_array_f32+0x34>
 80042ce:	4770      	bx	lr
 80042d0:	428a      	cmp	r2, r1
 80042d2:	d3fc      	bcc.n	80042ce <nl_func_relu_generic_array_f32+0x56>
 80042d4:	edd2 0a00 	vldr	s1, [r2]
 80042d8:	eef4 0a40 	vcmp.f32	s1, s0
 80042dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e0:	bf48      	it	mi
 80042e2:	eddf 0aa7 	vldrmi	s1, [pc, #668]	; 8004580 <.text_73>
 80042e6:	edc0 0a00 	vstr	s1, [r0]
 80042ea:	1f12      	subs	r2, r2, #4
 80042ec:	1f00      	subs	r0, r0, #4
 80042ee:	428a      	cmp	r2, r1
 80042f0:	d2f0      	bcs.n	80042d4 <nl_func_relu_generic_array_f32+0x5c>
 80042f2:	4770      	bx	lr
 80042f4:	428a      	cmp	r2, r1
 80042f6:	d3ea      	bcc.n	80042ce <nl_func_relu_generic_array_f32+0x56>
 80042f8:	edd2 1a00 	vldr	s3, [r2]
 80042fc:	eef4 1a41 	vcmp.f32	s3, s2
 8004300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004304:	d50a      	bpl.n	800431c <nl_func_relu_generic_array_f32+0xa4>
 8004306:	eef4 1a40 	vcmp.f32	s3, s0
 800430a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800430e:	d507      	bpl.n	8004320 <nl_func_relu_generic_array_f32+0xa8>
 8004310:	ee71 1ac0 	vsub.f32	s3, s3, s0
 8004314:	ee61 1aa0 	vmul.f32	s3, s3, s1
 8004318:	e002      	b.n	8004320 <nl_func_relu_generic_array_f32+0xa8>
 800431a:	bf00      	nop
 800431c:	eef0 1a41 	vmov.f32	s3, s2
 8004320:	edc0 1a00 	vstr	s3, [r0]
 8004324:	1f12      	subs	r2, r2, #4
 8004326:	1f00      	subs	r0, r0, #4
 8004328:	428a      	cmp	r2, r1
 800432a:	d2e5      	bcs.n	80042f8 <nl_func_relu_generic_array_f32+0x80>
 800432c:	4770      	bx	lr
	...

08004330 <nl_func_relu_thresholded_array_f32>:
 8004330:	6889      	ldr	r1, [r1, #8]
 8004332:	6880      	ldr	r0, [r0, #8]
 8004334:	ed93 0a00 	vldr	s0, [r3]
 8004338:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800433c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004340:	1f1b      	subs	r3, r3, #4
 8004342:	1f10      	subs	r0, r2, #4
 8004344:	428b      	cmp	r3, r1
 8004346:	d30e      	bcc.n	8004366 <nl_func_relu_thresholded_array_f32+0x36>
 8004348:	edd3 0a00 	vldr	s1, [r3]
 800434c:	eef4 0a40 	vcmp.f32	s1, s0
 8004350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004354:	bf48      	it	mi
 8004356:	eddf 0a8a 	vldrmi	s1, [pc, #552]	; 8004580 <.text_73>
 800435a:	edc0 0a00 	vstr	s1, [r0]
 800435e:	1f1b      	subs	r3, r3, #4
 8004360:	1f00      	subs	r0, r0, #4
 8004362:	428b      	cmp	r3, r1
 8004364:	d2f0      	bcs.n	8004348 <nl_func_relu_thresholded_array_f32+0x18>
 8004366:	4770      	bx	lr

08004368 <nl_func_elu_array_f32>:
 8004368:	b570      	push	{r4, r5, r6, lr}
 800436a:	ed2d 8b04 	vpush	{d8-d9}
 800436e:	688c      	ldr	r4, [r1, #8]
 8004370:	6880      	ldr	r0, [r0, #8]
 8004372:	ed93 8a00 	vldr	s16, [r3]
 8004376:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800437a:	1f0d      	subs	r5, r1, #4
 800437c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8004380:	1f0e      	subs	r6, r1, #4
 8004382:	42a5      	cmp	r5, r4
 8004384:	f0c0 802a 	bcc.w	80043dc <nl_func_elu_array_f32+0x74>
 8004388:	edd5 8a00 	vldr	s17, [r5]
 800438c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8004390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004394:	bf4c      	ite	mi
 8004396:	ed9f 9a7a 	vldrmi	s18, [pc, #488]	; 8004580 <.text_73>
 800439a:	eeb0 9a68 	vmovpl.f32	s18, s17
 800439e:	eeb0 0a68 	vmov.f32	s0, s17
 80043a2:	f00c fb91 	bl	8010ac8 <expf>
 80043a6:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80043aa:	ee30 0a20 	vadd.f32	s0, s0, s1
 80043ae:	ee20 0a08 	vmul.f32	s0, s0, s16
 80043b2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80043b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ba:	dc09      	bgt.n	80043d0 <nl_func_elu_array_f32+0x68>
 80043bc:	eeb0 0a68 	vmov.f32	s0, s17
 80043c0:	f00c fb82 	bl	8010ac8 <expf>
 80043c4:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80043c8:	ee30 0a20 	vadd.f32	s0, s0, s1
 80043cc:	ee00 9a08 	vmla.f32	s18, s0, s16
 80043d0:	ed86 9a00 	vstr	s18, [r6]
 80043d4:	1f2d      	subs	r5, r5, #4
 80043d6:	1f36      	subs	r6, r6, #4
 80043d8:	42a5      	cmp	r5, r4
 80043da:	d2d5      	bcs.n	8004388 <nl_func_elu_array_f32+0x20>
 80043dc:	ecbd 8b04 	vpop	{d8-d9}
 80043e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080043e4 <.text_68>:
 80043e4:	3f800001 	.word	0x3f800001

080043e8 <.text_69>:
 80043e8:	3e4ccccd 	.word	0x3e4ccccd

080043ec <nl_func_selu_array_f32>:
 80043ec:	b570      	push	{r4, r5, r6, lr}
 80043ee:	ed2d 8b04 	vpush	{d8-d9}
 80043f2:	688c      	ldr	r4, [r1, #8]
 80043f4:	6880      	ldr	r0, [r0, #8]
 80043f6:	ed93 8a00 	vldr	s16, [r3]
 80043fa:	edd3 8a01 	vldr	s17, [r3, #4]
 80043fe:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004402:	1f0d      	subs	r5, r1, #4
 8004404:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8004408:	1f0e      	subs	r6, r1, #4
 800440a:	42a5      	cmp	r5, r4
 800440c:	f0c0 802c 	bcc.w	8004468 <nl_func_selu_array_f32+0x7c>
 8004410:	ed95 9a00 	vldr	s18, [r5]
 8004414:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8004418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800441c:	bf4c      	ite	mi
 800441e:	eddf 9a58 	vldrmi	s19, [pc, #352]	; 8004580 <.text_73>
 8004422:	eef0 9a49 	vmovpl.f32	s19, s18
 8004426:	eeb0 0a49 	vmov.f32	s0, s18
 800442a:	f00c fb4d 	bl	8010ac8 <expf>
 800442e:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8004432:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004436:	ee20 0a08 	vmul.f32	s0, s0, s16
 800443a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800443e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004442:	dc09      	bgt.n	8004458 <nl_func_selu_array_f32+0x6c>
 8004444:	eeb0 0a49 	vmov.f32	s0, s18
 8004448:	f00c fb3e 	bl	8010ac8 <expf>
 800444c:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8004450:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004454:	ee40 9a08 	vmla.f32	s19, s0, s16
 8004458:	ee28 0aa9 	vmul.f32	s0, s17, s19
 800445c:	ed86 0a00 	vstr	s0, [r6]
 8004460:	1f2d      	subs	r5, r5, #4
 8004462:	1f36      	subs	r6, r6, #4
 8004464:	42a5      	cmp	r5, r4
 8004466:	d2d3      	bcs.n	8004410 <nl_func_selu_array_f32+0x24>
 8004468:	ecbd 8b04 	vpop	{d8-d9}
 800446c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004470 <nl_func_prelu_array_f32>:
 8004470:	6889      	ldr	r1, [r1, #8]
 8004472:	6880      	ldr	r0, [r0, #8]
 8004474:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004478:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800447c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004480:	1f1b      	subs	r3, r3, #4
 8004482:	f1ac 0c04 	sub.w	ip, ip, #4
 8004486:	1f10      	subs	r0, r2, #4
 8004488:	458c      	cmp	ip, r1
 800448a:	d320      	bcc.n	80044ce <nl_func_prelu_array_f32+0x5e>
 800448c:	ed9c 0a00 	vldr	s0, [ip]
 8004490:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004498:	bf4c      	ite	mi
 800449a:	eddf 0a39 	vldrmi	s1, [pc, #228]	; 8004580 <.text_73>
 800449e:	eef0 0a40 	vmovpl.f32	s1, s0
 80044a2:	461a      	mov	r2, r3
 80044a4:	eeb1 0a40 	vneg.f32	s0, s0
 80044a8:	1f13      	subs	r3, r2, #4
 80044aa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80044ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b2:	bf48      	it	mi
 80044b4:	ed9f 0a32 	vldrmi	s0, [pc, #200]	; 8004580 <.text_73>
 80044b8:	ed92 1a00 	vldr	s2, [r2]
 80044bc:	ee41 0a40 	vmls.f32	s1, s2, s0
 80044c0:	edc0 0a00 	vstr	s1, [r0]
 80044c4:	f1ac 0c04 	sub.w	ip, ip, #4
 80044c8:	1f00      	subs	r0, r0, #4
 80044ca:	458c      	cmp	ip, r1
 80044cc:	d2de      	bcs.n	800448c <nl_func_prelu_array_f32+0x1c>
 80044ce:	4770      	bx	lr

080044d0 <forward_relu>:
 80044d0:	b570      	push	{r4, r5, r6, lr}
 80044d2:	4604      	mov	r4, r0
 80044d4:	6962      	ldr	r2, [r4, #20]
 80044d6:	8811      	ldrh	r1, [r2, #0]
 80044d8:	2900      	cmp	r1, #0
 80044da:	bf1a      	itte	ne
 80044dc:	6850      	ldrne	r0, [r2, #4]
 80044de:	1d00      	addne	r0, r0, #4
 80044e0:	2004      	moveq	r0, #4
 80044e2:	6800      	ldr	r0, [r0, #0]
 80044e4:	2800      	cmp	r0, #0
 80044e6:	bf14      	ite	ne
 80044e8:	6805      	ldrne	r5, [r0, #0]
 80044ea:	2500      	moveq	r5, #0
 80044ec:	2902      	cmp	r1, #2
 80044ee:	bfa6      	itte	ge
 80044f0:	6850      	ldrge	r0, [r2, #4]
 80044f2:	3010      	addge	r0, #16
 80044f4:	2004      	movlt	r0, #4
 80044f6:	6800      	ldr	r0, [r0, #0]
 80044f8:	2800      	cmp	r0, #0
 80044fa:	bf19      	ittee	ne
 80044fc:	6800      	ldrne	r0, [r0, #0]
 80044fe:	f100 0618 	addne.w	r6, r0, #24
 8004502:	2100      	moveq	r1, #0
 8004504:	f101 0618 	addeq.w	r6, r1, #24
 8004508:	69a0      	ldr	r0, [r4, #24]
 800450a:	b9f8      	cbnz	r0, 800454c <forward_relu+0x7c>
 800450c:	f105 0008 	add.w	r0, r5, #8
 8004510:	f7fe f80a 	bl	8002528 <ai_shape_get_size>
 8004514:	69a9      	ldr	r1, [r5, #24]
 8004516:	6833      	ldr	r3, [r6, #0]
 8004518:	6889      	ldr	r1, [r1, #8]
 800451a:	689c      	ldr	r4, [r3, #8]
 800451c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8004520:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004524:	1f12      	subs	r2, r2, #4
 8004526:	1f00      	subs	r0, r0, #4
 8004528:	428a      	cmp	r2, r1
 800452a:	d328      	bcc.n	800457e <forward_relu+0xae>
 800452c:	ed92 0a00 	vldr	s0, [r2]
 8004530:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004538:	bf48      	it	mi
 800453a:	ed9f 0a11 	vldrmi	s0, [pc, #68]	; 8004580 <.text_73>
 800453e:	ed80 0a00 	vstr	s0, [r0]
 8004542:	1f12      	subs	r2, r2, #4
 8004544:	1f00      	subs	r0, r0, #4
 8004546:	428a      	cmp	r2, r1
 8004548:	d2f0      	bcs.n	800452c <forward_relu+0x5c>
 800454a:	bd70      	pop	{r4, r5, r6, pc}
 800454c:	6840      	ldr	r0, [r0, #4]
 800454e:	2801      	cmp	r0, #1
 8004550:	f105 0008 	add.w	r0, r5, #8
 8004554:	d109      	bne.n	800456a <forward_relu+0x9a>
 8004556:	f7fd ffe7 	bl	8002528 <ai_shape_get_size>
 800455a:	4602      	mov	r2, r0
 800455c:	69a0      	ldr	r0, [r4, #24]
 800455e:	6883      	ldr	r3, [r0, #8]
 8004560:	69a9      	ldr	r1, [r5, #24]
 8004562:	6830      	ldr	r0, [r6, #0]
 8004564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004568:	e6e2      	b.n	8004330 <nl_func_relu_thresholded_array_f32>
 800456a:	f7fd ffdd 	bl	8002528 <ai_shape_get_size>
 800456e:	69a1      	ldr	r1, [r4, #24]
 8004570:	688b      	ldr	r3, [r1, #8]
 8004572:	69a9      	ldr	r1, [r5, #24]
 8004574:	4602      	mov	r2, r0
 8004576:	6830      	ldr	r0, [r6, #0]
 8004578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800457c:	e67c      	b.n	8004278 <nl_func_relu_generic_array_f32>
 800457e:	bd70      	pop	{r4, r5, r6, pc}

08004580 <.text_73>:
 8004580:	00000000 	.word	0x00000000

08004584 <forward_relu_thresholded>:
 8004584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004586:	4602      	mov	r2, r0
 8004588:	f04f 0601 	mov.w	r6, #1
 800458c:	6953      	ldr	r3, [r2, #20]
 800458e:	8819      	ldrh	r1, [r3, #0]
 8004590:	2900      	cmp	r1, #0
 8004592:	bf1a      	itte	ne
 8004594:	6858      	ldrne	r0, [r3, #4]
 8004596:	1d00      	addne	r0, r0, #4
 8004598:	2004      	moveq	r0, #4
 800459a:	6800      	ldr	r0, [r0, #0]
 800459c:	2800      	cmp	r0, #0
 800459e:	bf14      	ite	ne
 80045a0:	6804      	ldrne	r4, [r0, #0]
 80045a2:	2400      	moveq	r4, #0
 80045a4:	2902      	cmp	r1, #2
 80045a6:	bfa6      	itte	ge
 80045a8:	6858      	ldrge	r0, [r3, #4]
 80045aa:	3010      	addge	r0, #16
 80045ac:	2004      	movlt	r0, #4
 80045ae:	6800      	ldr	r0, [r0, #0]
 80045b0:	2800      	cmp	r0, #0
 80045b2:	bf19      	ittee	ne
 80045b4:	6800      	ldrne	r0, [r0, #0]
 80045b6:	f100 0518 	addne.w	r5, r0, #24
 80045ba:	2100      	moveq	r1, #0
 80045bc:	f101 0518 	addeq.w	r5, r1, #24
 80045c0:	f104 0108 	add.w	r1, r4, #8
 80045c4:	680b      	ldr	r3, [r1, #0]
 80045c6:	0a1b      	lsrs	r3, r3, #8
 80045c8:	d01f      	beq.n	800460a <forward_relu_thresholded+0x86>
 80045ca:	684f      	ldr	r7, [r1, #4]
 80045cc:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 80045d0:	4618      	mov	r0, r3
 80045d2:	f1a1 0c04 	sub.w	ip, r1, #4
 80045d6:	f010 0103 	ands.w	r1, r0, #3
 80045da:	d006      	beq.n	80045ea <forward_relu_thresholded+0x66>
 80045dc:	1e5b      	subs	r3, r3, #1
 80045de:	f85c e904 	ldr.w	lr, [ip], #-4
 80045e2:	1e49      	subs	r1, r1, #1
 80045e4:	fb0e f606 	mul.w	r6, lr, r6
 80045e8:	d1f8      	bne.n	80045dc <forward_relu_thresholded+0x58>
 80045ea:	0880      	lsrs	r0, r0, #2
 80045ec:	d00d      	beq.n	800460a <forward_relu_thresholded+0x86>
 80045ee:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 80045f2:	3910      	subs	r1, #16
 80045f4:	68cb      	ldr	r3, [r1, #12]
 80045f6:	688f      	ldr	r7, [r1, #8]
 80045f8:	437b      	muls	r3, r7
 80045fa:	684f      	ldr	r7, [r1, #4]
 80045fc:	437b      	muls	r3, r7
 80045fe:	f851 7910 	ldr.w	r7, [r1], #-16
 8004602:	437b      	muls	r3, r7
 8004604:	435e      	muls	r6, r3
 8004606:	1e40      	subs	r0, r0, #1
 8004608:	d1f4      	bne.n	80045f4 <forward_relu_thresholded+0x70>
 800460a:	6990      	ldr	r0, [r2, #24]
 800460c:	6881      	ldr	r1, [r0, #8]
 800460e:	69a0      	ldr	r0, [r4, #24]
 8004610:	682a      	ldr	r2, [r5, #0]
 8004612:	6880      	ldr	r0, [r0, #8]
 8004614:	6893      	ldr	r3, [r2, #8]
 8004616:	ed91 0a00 	vldr	s0, [r1]
 800461a:	eb00 0186 	add.w	r1, r0, r6, lsl #2
 800461e:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8004622:	1f09      	subs	r1, r1, #4
 8004624:	1f22      	subs	r2, r4, #4
 8004626:	4281      	cmp	r1, r0
 8004628:	f0c0 800f 	bcc.w	800464a <forward_relu_thresholded+0xc6>
 800462c:	edd1 0a00 	vldr	s1, [r1]
 8004630:	eef4 0a40 	vcmp.f32	s1, s0
 8004634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004638:	bf48      	it	mi
 800463a:	eddf 0ac2 	vldrmi	s1, [pc, #776]	; 8004944 <.text_80>
 800463e:	edc2 0a00 	vstr	s1, [r2]
 8004642:	1f09      	subs	r1, r1, #4
 8004644:	1f12      	subs	r2, r2, #4
 8004646:	4281      	cmp	r1, r0
 8004648:	d2f0      	bcs.n	800462c <forward_relu_thresholded+0xa8>
 800464a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800464c <forward_elu>:
 800464c:	b570      	push	{r4, r5, r6, lr}
 800464e:	4604      	mov	r4, r0
 8004650:	6962      	ldr	r2, [r4, #20]
 8004652:	8811      	ldrh	r1, [r2, #0]
 8004654:	2900      	cmp	r1, #0
 8004656:	bf1a      	itte	ne
 8004658:	6850      	ldrne	r0, [r2, #4]
 800465a:	1d00      	addne	r0, r0, #4
 800465c:	2004      	moveq	r0, #4
 800465e:	6800      	ldr	r0, [r0, #0]
 8004660:	2800      	cmp	r0, #0
 8004662:	bf14      	ite	ne
 8004664:	6805      	ldrne	r5, [r0, #0]
 8004666:	2500      	moveq	r5, #0
 8004668:	2902      	cmp	r1, #2
 800466a:	bfa6      	itte	ge
 800466c:	6850      	ldrge	r0, [r2, #4]
 800466e:	3010      	addge	r0, #16
 8004670:	2004      	movlt	r0, #4
 8004672:	6800      	ldr	r0, [r0, #0]
 8004674:	2800      	cmp	r0, #0
 8004676:	bf19      	ittee	ne
 8004678:	6800      	ldrne	r0, [r0, #0]
 800467a:	f100 0618 	addne.w	r6, r0, #24
 800467e:	2100      	moveq	r1, #0
 8004680:	f101 0618 	addeq.w	r6, r1, #24
 8004684:	f105 0008 	add.w	r0, r5, #8
 8004688:	f7fd ff4e 	bl	8002528 <ai_shape_get_size>
 800468c:	4602      	mov	r2, r0
 800468e:	69a0      	ldr	r0, [r4, #24]
 8004690:	6883      	ldr	r3, [r0, #8]
 8004692:	69a9      	ldr	r1, [r5, #24]
 8004694:	6830      	ldr	r0, [r6, #0]
 8004696:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800469a:	e665      	b.n	8004368 <nl_func_elu_array_f32>

0800469c <forward_selu>:
 800469c:	b570      	push	{r4, r5, r6, lr}
 800469e:	4604      	mov	r4, r0
 80046a0:	6962      	ldr	r2, [r4, #20]
 80046a2:	8811      	ldrh	r1, [r2, #0]
 80046a4:	2900      	cmp	r1, #0
 80046a6:	bf1a      	itte	ne
 80046a8:	6850      	ldrne	r0, [r2, #4]
 80046aa:	1d00      	addne	r0, r0, #4
 80046ac:	2004      	moveq	r0, #4
 80046ae:	6800      	ldr	r0, [r0, #0]
 80046b0:	2800      	cmp	r0, #0
 80046b2:	bf14      	ite	ne
 80046b4:	6805      	ldrne	r5, [r0, #0]
 80046b6:	2500      	moveq	r5, #0
 80046b8:	2902      	cmp	r1, #2
 80046ba:	bfa6      	itte	ge
 80046bc:	6850      	ldrge	r0, [r2, #4]
 80046be:	3010      	addge	r0, #16
 80046c0:	2004      	movlt	r0, #4
 80046c2:	6800      	ldr	r0, [r0, #0]
 80046c4:	2800      	cmp	r0, #0
 80046c6:	bf19      	ittee	ne
 80046c8:	6800      	ldrne	r0, [r0, #0]
 80046ca:	f100 0618 	addne.w	r6, r0, #24
 80046ce:	2100      	moveq	r1, #0
 80046d0:	f101 0618 	addeq.w	r6, r1, #24
 80046d4:	f105 0008 	add.w	r0, r5, #8
 80046d8:	f7fd ff26 	bl	8002528 <ai_shape_get_size>
 80046dc:	4602      	mov	r2, r0
 80046de:	69a0      	ldr	r0, [r4, #24]
 80046e0:	6883      	ldr	r3, [r0, #8]
 80046e2:	69a9      	ldr	r1, [r5, #24]
 80046e4:	6830      	ldr	r0, [r6, #0]
 80046e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80046ea:	e67f      	b.n	80043ec <nl_func_selu_array_f32>

080046ec <forward_prelu>:
 80046ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046f0:	b083      	sub	sp, #12
 80046f2:	6942      	ldr	r2, [r0, #20]
 80046f4:	8810      	ldrh	r0, [r2, #0]
 80046f6:	2800      	cmp	r0, #0
 80046f8:	bf1a      	itte	ne
 80046fa:	6851      	ldrne	r1, [r2, #4]
 80046fc:	1d09      	addne	r1, r1, #4
 80046fe:	2104      	moveq	r1, #4
 8004700:	6809      	ldr	r1, [r1, #0]
 8004702:	2900      	cmp	r1, #0
 8004704:	bf19      	ittee	ne
 8004706:	6809      	ldrne	r1, [r1, #0]
 8004708:	f101 0518 	addne.w	r5, r1, #24
 800470c:	2300      	moveq	r3, #0
 800470e:	f103 0518 	addeq.w	r5, r3, #24
 8004712:	2801      	cmp	r0, #1
 8004714:	bfc6      	itte	gt
 8004716:	6851      	ldrgt	r1, [r2, #4]
 8004718:	3110      	addgt	r1, #16
 800471a:	2104      	movle	r1, #4
 800471c:	6809      	ldr	r1, [r1, #0]
 800471e:	2900      	cmp	r1, #0
 8004720:	bf19      	ittee	ne
 8004722:	6809      	ldrne	r1, [r1, #0]
 8004724:	f101 0618 	addne.w	r6, r1, #24
 8004728:	2300      	moveq	r3, #0
 800472a:	f103 0618 	addeq.w	r6, r3, #24
 800472e:	2802      	cmp	r0, #2
 8004730:	bfc6      	itte	gt
 8004732:	6850      	ldrgt	r0, [r2, #4]
 8004734:	301c      	addgt	r0, #28
 8004736:	2004      	movle	r0, #4
 8004738:	6800      	ldr	r0, [r0, #0]
 800473a:	2800      	cmp	r0, #0
 800473c:	bf14      	ite	ne
 800473e:	6804      	ldrne	r4, [r0, #0]
 8004740:	2400      	moveq	r4, #0
 8004742:	69a0      	ldr	r0, [r4, #24]
 8004744:	6887      	ldr	r7, [r0, #8]
 8004746:	b12c      	cbz	r4, 8004754 <forward_prelu+0x68>
 8004748:	6841      	ldr	r1, [r0, #4]
 800474a:	6800      	ldr	r0, [r0, #0]
 800474c:	f001 fb8a 	bl	8005e64 <ai_array_get_byte_size>
 8004750:	4680      	mov	r8, r0
 8004752:	e001      	b.n	8004758 <forward_prelu+0x6c>
 8004754:	f04f 0801 	mov.w	r8, #1
 8004758:	6828      	ldr	r0, [r5, #0]
 800475a:	6841      	ldr	r1, [r0, #4]
 800475c:	6800      	ldr	r0, [r0, #0]
 800475e:	f001 fb81 	bl	8005e64 <ai_array_get_byte_size>
 8004762:	4601      	mov	r1, r0
 8004764:	6828      	ldr	r0, [r5, #0]
 8004766:	6832      	ldr	r2, [r6, #0]
 8004768:	6880      	ldr	r0, [r0, #8]
 800476a:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800476e:	4401      	add	r1, r0
 8004770:	f104 0308 	add.w	r3, r4, #8
 8004774:	4288      	cmp	r0, r1
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	d241      	bcs.n	80047fe <forward_prelu+0x112>
 800477a:	9702      	str	r7, [sp, #8]
 800477c:	9101      	str	r1, [sp, #4]
 800477e:	4607      	mov	r7, r0
 8004780:	6829      	ldr	r1, [r5, #0]
 8004782:	608f      	str	r7, [r1, #8]
 8004784:	f04f 0201 	mov.w	r2, #1
 8004788:	6834      	ldr	r4, [r6, #0]
 800478a:	f8c4 9008 	str.w	r9, [r4, #8]
 800478e:	9b00      	ldr	r3, [sp, #0]
 8004790:	6818      	ldr	r0, [r3, #0]
 8004792:	0a00      	lsrs	r0, r0, #8
 8004794:	d02a      	beq.n	80047ec <forward_prelu+0x100>
 8004796:	f8d3 e004 	ldr.w	lr, [r3, #4]
 800479a:	eb0e 0380 	add.w	r3, lr, r0, lsl #2
 800479e:	4684      	mov	ip, r0
 80047a0:	f1a3 0a04 	sub.w	sl, r3, #4
 80047a4:	f01c 0303 	ands.w	r3, ip, #3
 80047a8:	d006      	beq.n	80047b8 <forward_prelu+0xcc>
 80047aa:	1e40      	subs	r0, r0, #1
 80047ac:	f85a b904 	ldr.w	fp, [sl], #-4
 80047b0:	1e5b      	subs	r3, r3, #1
 80047b2:	fb0b f202 	mul.w	r2, fp, r2
 80047b6:	d1f8      	bne.n	80047aa <forward_prelu+0xbe>
 80047b8:	ea5f 0c9c 	movs.w	ip, ip, lsr #2
 80047bc:	4663      	mov	r3, ip
 80047be:	d015      	beq.n	80047ec <forward_prelu+0x100>
 80047c0:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 80047c4:	f1b0 0010 	subs.w	r0, r0, #16
 80047c8:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80047cc:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80047d0:	f8d0 a004 	ldr.w	sl, [r0, #4]
 80047d4:	f850 b910 	ldr.w	fp, [r0], #-16
 80047d8:	fb0e fc0c 	mul.w	ip, lr, ip
 80047dc:	fb0a fc0c 	mul.w	ip, sl, ip
 80047e0:	fb0b fc0c 	mul.w	ip, fp, ip
 80047e4:	1e5b      	subs	r3, r3, #1
 80047e6:	fb0c f202 	mul.w	r2, ip, r2
 80047ea:	d1ed      	bne.n	80047c8 <forward_prelu+0xdc>
 80047ec:	9b02      	ldr	r3, [sp, #8]
 80047ee:	4620      	mov	r0, r4
 80047f0:	f7ff fe3e 	bl	8004470 <nl_func_prelu_array_f32>
 80047f4:	9801      	ldr	r0, [sp, #4]
 80047f6:	4447      	add	r7, r8
 80047f8:	4287      	cmp	r7, r0
 80047fa:	44c1      	add	r9, r8
 80047fc:	d3c0      	bcc.n	8004780 <forward_prelu+0x94>
 80047fe:	6828      	ldr	r0, [r5, #0]
 8004800:	68c1      	ldr	r1, [r0, #12]
 8004802:	6081      	str	r1, [r0, #8]
 8004804:	6830      	ldr	r0, [r6, #0]
 8004806:	68c1      	ldr	r1, [r0, #12]
 8004808:	6081      	str	r1, [r0, #8]
 800480a:	b003      	add	sp, #12
 800480c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004810 <forward_clip>:
 8004810:	b570      	push	{r4, r5, r6, lr}
 8004812:	4604      	mov	r4, r0
 8004814:	6962      	ldr	r2, [r4, #20]
 8004816:	8811      	ldrh	r1, [r2, #0]
 8004818:	2900      	cmp	r1, #0
 800481a:	bf1a      	itte	ne
 800481c:	6850      	ldrne	r0, [r2, #4]
 800481e:	1d00      	addne	r0, r0, #4
 8004820:	2004      	moveq	r0, #4
 8004822:	6800      	ldr	r0, [r0, #0]
 8004824:	2800      	cmp	r0, #0
 8004826:	bf14      	ite	ne
 8004828:	6805      	ldrne	r5, [r0, #0]
 800482a:	2500      	moveq	r5, #0
 800482c:	2902      	cmp	r1, #2
 800482e:	bfa6      	itte	ge
 8004830:	6850      	ldrge	r0, [r2, #4]
 8004832:	3010      	addge	r0, #16
 8004834:	2004      	movlt	r0, #4
 8004836:	6800      	ldr	r0, [r0, #0]
 8004838:	2800      	cmp	r0, #0
 800483a:	bf19      	ittee	ne
 800483c:	6800      	ldrne	r0, [r0, #0]
 800483e:	f100 0618 	addne.w	r6, r0, #24
 8004842:	2100      	moveq	r1, #0
 8004844:	f101 0618 	addeq.w	r6, r1, #24
 8004848:	f105 0008 	add.w	r0, r5, #8
 800484c:	f7fd fe6c 	bl	8002528 <ai_shape_get_size>
 8004850:	4602      	mov	r2, r0
 8004852:	69a0      	ldr	r0, [r4, #24]
 8004854:	6883      	ldr	r3, [r0, #8]
 8004856:	69a9      	ldr	r1, [r5, #24]
 8004858:	6830      	ldr	r0, [r6, #0]
 800485a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800485e:	e473      	b.n	8004148 <nl_func_clip_array_f32>

08004860 <forward_hard_sigmoid>:
 8004860:	b4f0      	push	{r4, r5, r6, r7}
 8004862:	6942      	ldr	r2, [r0, #20]
 8004864:	8811      	ldrh	r1, [r2, #0]
 8004866:	2900      	cmp	r1, #0
 8004868:	bf1a      	itte	ne
 800486a:	6850      	ldrne	r0, [r2, #4]
 800486c:	1d00      	addne	r0, r0, #4
 800486e:	2004      	moveq	r0, #4
 8004870:	f04f 0501 	mov.w	r5, #1
 8004874:	6800      	ldr	r0, [r0, #0]
 8004876:	2800      	cmp	r0, #0
 8004878:	bf14      	ite	ne
 800487a:	6803      	ldrne	r3, [r0, #0]
 800487c:	2300      	moveq	r3, #0
 800487e:	2902      	cmp	r1, #2
 8004880:	bfa6      	itte	ge
 8004882:	6850      	ldrge	r0, [r2, #4]
 8004884:	3010      	addge	r0, #16
 8004886:	2004      	movlt	r0, #4
 8004888:	6800      	ldr	r0, [r0, #0]
 800488a:	2800      	cmp	r0, #0
 800488c:	bf19      	ittee	ne
 800488e:	6800      	ldrne	r0, [r0, #0]
 8004890:	f100 0418 	addne.w	r4, r0, #24
 8004894:	2100      	moveq	r1, #0
 8004896:	f101 0418 	addeq.w	r4, r1, #24
 800489a:	f103 0108 	add.w	r1, r3, #8
 800489e:	680a      	ldr	r2, [r1, #0]
 80048a0:	0a12      	lsrs	r2, r2, #8
 80048a2:	d01e      	beq.n	80048e2 <forward_hard_sigmoid+0x82>
 80048a4:	684e      	ldr	r6, [r1, #4]
 80048a6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80048aa:	4610      	mov	r0, r2
 80048ac:	1f0f      	subs	r7, r1, #4
 80048ae:	f010 0103 	ands.w	r1, r0, #3
 80048b2:	d006      	beq.n	80048c2 <forward_hard_sigmoid+0x62>
 80048b4:	1e52      	subs	r2, r2, #1
 80048b6:	f857 c904 	ldr.w	ip, [r7], #-4
 80048ba:	1e49      	subs	r1, r1, #1
 80048bc:	fb0c f505 	mul.w	r5, ip, r5
 80048c0:	d1f8      	bne.n	80048b4 <forward_hard_sigmoid+0x54>
 80048c2:	0880      	lsrs	r0, r0, #2
 80048c4:	d00d      	beq.n	80048e2 <forward_hard_sigmoid+0x82>
 80048c6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80048ca:	3910      	subs	r1, #16
 80048cc:	68ca      	ldr	r2, [r1, #12]
 80048ce:	688e      	ldr	r6, [r1, #8]
 80048d0:	684f      	ldr	r7, [r1, #4]
 80048d2:	4372      	muls	r2, r6
 80048d4:	f851 6910 	ldr.w	r6, [r1], #-16
 80048d8:	437a      	muls	r2, r7
 80048da:	4372      	muls	r2, r6
 80048dc:	4355      	muls	r5, r2
 80048de:	1e40      	subs	r0, r0, #1
 80048e0:	d1f4      	bne.n	80048cc <forward_hard_sigmoid+0x6c>
 80048e2:	6998      	ldr	r0, [r3, #24]
 80048e4:	6822      	ldr	r2, [r4, #0]
 80048e6:	6880      	ldr	r0, [r0, #8]
 80048e8:	6893      	ldr	r3, [r2, #8]
 80048ea:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80048ee:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80048f2:	1f09      	subs	r1, r1, #4
 80048f4:	1f22      	subs	r2, r4, #4
 80048f6:	4281      	cmp	r1, r0
 80048f8:	f0c0 8022 	bcc.w	8004940 <forward_hard_sigmoid+0xe0>
 80048fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004900:	eddf 0a11 	vldr	s1, [pc, #68]	; 8004948 <.text_81>
 8004904:	edd1 1a00 	vldr	s3, [r1]
 8004908:	ed9f 2a10 	vldr	s4, [pc, #64]	; 800494c <.text_82>
 800490c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8004910:	ee01 1a82 	vmla.f32	s2, s3, s4
 8004914:	eeb4 1a60 	vcmp.f32	s2, s1
 8004918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800491c:	da08      	bge.n	8004930 <forward_hard_sigmoid+0xd0>
 800491e:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8004922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004926:	d505      	bpl.n	8004934 <forward_hard_sigmoid+0xd4>
 8004928:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8004944 <.text_80>
 800492c:	e002      	b.n	8004934 <forward_hard_sigmoid+0xd4>
 800492e:	bf00      	nop
 8004930:	eeb0 1a40 	vmov.f32	s2, s0
 8004934:	ed82 1a00 	vstr	s2, [r2]
 8004938:	1f09      	subs	r1, r1, #4
 800493a:	1f12      	subs	r2, r2, #4
 800493c:	4281      	cmp	r1, r0
 800493e:	d2e1      	bcs.n	8004904 <forward_hard_sigmoid+0xa4>
 8004940:	bcf0      	pop	{r4, r5, r6, r7}
 8004942:	4770      	bx	lr

08004944 <.text_80>:
 8004944:	00000000 	.word	0x00000000

08004948 <.text_81>:
 8004948:	3f800001 	.word	0x3f800001

0800494c <.text_82>:
 800494c:	3e4ccccd 	.word	0x3e4ccccd

08004950 <forward_sm>:
 8004950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004952:	b083      	sub	sp, #12
 8004954:	6942      	ldr	r2, [r0, #20]
 8004956:	8811      	ldrh	r1, [r2, #0]
 8004958:	2900      	cmp	r1, #0
 800495a:	bf1a      	itte	ne
 800495c:	6850      	ldrne	r0, [r2, #4]
 800495e:	1d00      	addne	r0, r0, #4
 8004960:	2004      	moveq	r0, #4
 8004962:	6800      	ldr	r0, [r0, #0]
 8004964:	2800      	cmp	r0, #0
 8004966:	bf14      	ite	ne
 8004968:	6804      	ldrne	r4, [r0, #0]
 800496a:	2400      	moveq	r4, #0
 800496c:	2902      	cmp	r1, #2
 800496e:	bfa6      	itte	ge
 8004970:	6850      	ldrge	r0, [r2, #4]
 8004972:	3010      	addge	r0, #16
 8004974:	2004      	movlt	r0, #4
 8004976:	6800      	ldr	r0, [r0, #0]
 8004978:	2800      	cmp	r0, #0
 800497a:	bf14      	ite	ne
 800497c:	6805      	ldrne	r5, [r0, #0]
 800497e:	2500      	moveq	r5, #0
 8004980:	68e0      	ldr	r0, [r4, #12]
 8004982:	68e9      	ldr	r1, [r5, #12]
 8004984:	6846      	ldr	r6, [r0, #4]
 8004986:	684f      	ldr	r7, [r1, #4]
 8004988:	f104 0008 	add.w	r0, r4, #8
 800498c:	f7fd fdcc 	bl	8002528 <ai_shape_get_size>
 8004990:	4602      	mov	r2, r0
 8004992:	9701      	str	r7, [sp, #4]
 8004994:	9600      	str	r6, [sp, #0]
 8004996:	69a1      	ldr	r1, [r4, #24]
 8004998:	69a8      	ldr	r0, [r5, #24]
 800499a:	4633      	mov	r3, r6
 800499c:	f7ff fb76 	bl	800408c <nl_func_sm_array_f32>
 80049a0:	b003      	add	sp, #12
 80049a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049a4 <forward_hardmax>:
 80049a4:	b430      	push	{r4, r5}
 80049a6:	6943      	ldr	r3, [r0, #20]
 80049a8:	881a      	ldrh	r2, [r3, #0]
 80049aa:	6980      	ldr	r0, [r0, #24]
 80049ac:	2a00      	cmp	r2, #0
 80049ae:	bf1a      	itte	ne
 80049b0:	6859      	ldrne	r1, [r3, #4]
 80049b2:	1d09      	addne	r1, r1, #4
 80049b4:	2104      	moveq	r1, #4
 80049b6:	6809      	ldr	r1, [r1, #0]
 80049b8:	2900      	cmp	r1, #0
 80049ba:	bf14      	ite	ne
 80049bc:	680c      	ldrne	r4, [r1, #0]
 80049be:	2400      	moveq	r4, #0
 80049c0:	2a02      	cmp	r2, #2
 80049c2:	bfa6      	itte	ge
 80049c4:	6859      	ldrge	r1, [r3, #4]
 80049c6:	3110      	addge	r1, #16
 80049c8:	2104      	movlt	r1, #4
 80049ca:	6809      	ldr	r1, [r1, #0]
 80049cc:	6883      	ldr	r3, [r0, #8]
 80049ce:	2900      	cmp	r1, #0
 80049d0:	bf19      	ittee	ne
 80049d2:	6809      	ldrne	r1, [r1, #0]
 80049d4:	f101 0518 	addne.w	r5, r1, #24
 80049d8:	2200      	moveq	r2, #0
 80049da:	f102 0518 	addeq.w	r5, r2, #24
 80049de:	69a1      	ldr	r1, [r4, #24]
 80049e0:	6828      	ldr	r0, [r5, #0]
 80049e2:	f104 0208 	add.w	r2, r4, #8
 80049e6:	bc30      	pop	{r4, r5}
 80049e8:	f7ff bbd4 	b.w	8004194 <nl_func_hardmax_array_f32>

080049ec <pool_func_mp_array_f32>:
 80049ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f0:	4688      	mov	r8, r1
 80049f2:	b08b      	sub	sp, #44	; 0x2c
 80049f4:	f8d0 b008 	ldr.w	fp, [r0, #8]
 80049f8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80049fa:	f9bd e064 	ldrsh.w	lr, [sp, #100]	; 0x64
 80049fe:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8004a00:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8004a02:	1e48      	subs	r0, r1, #1
 8004a04:	fb10 fe0e 	smulbb	lr, r0, lr
 8004a08:	4615      	mov	r5, r2
 8004a0a:	ebae 0e07 	sub.w	lr, lr, r7
 8004a0e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004a10:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
 8004a14:	6892      	ldr	r2, [r2, #8]
 8004a16:	44a6      	add	lr, r4
 8004a18:	f1ae 0601 	sub.w	r6, lr, #1
 8004a1c:	469c      	mov	ip, r3
 8004a1e:	1b76      	subs	r6, r6, r5
 8004a20:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004a22:	4338      	orrs	r0, r7
 8004a24:	f040 80dd 	bne.w	8004be2 <pool_func_mp_array_f32+0x1f6>
 8004a28:	f9bd 0068 	ldrsh.w	r0, [sp, #104]	; 0x68
 8004a2c:	f1a0 0901 	sub.w	r9, r0, #1
 8004a30:	f9bd 0058 	ldrsh.w	r0, [sp, #88]	; 0x58
 8004a34:	fb19 f903 	smulbb	r9, r9, r3
 8004a38:	eba9 0900 	sub.w	r9, r9, r0
 8004a3c:	f9bd 0050 	ldrsh.w	r0, [sp, #80]	; 0x50
 8004a40:	4448      	add	r0, r9
 8004a42:	1e40      	subs	r0, r0, #1
 8004a44:	eba0 0008 	sub.w	r0, r0, r8
 8004a48:	b200      	sxth	r0, r0
 8004a4a:	2800      	cmp	r0, #0
 8004a4c:	bf44      	itt	mi
 8004a4e:	b236      	sxthmi	r6, r6
 8004a50:	2e00      	cmpmi	r6, #0
 8004a52:	f140 80c6 	bpl.w	8004be2 <pool_func_mp_array_f32+0x1f6>
 8004a56:	2000      	movs	r0, #0
 8004a58:	000d      	movs	r5, r1
 8004a5a:	9008      	str	r0, [sp, #32]
 8004a5c:	f000 8178 	beq.w	8004d50 <pool_func_mp_array_f32+0x364>
 8004a60:	b224      	sxth	r4, r4
 8004a62:	f8ad 4006 	strh.w	r4, [sp, #6]
 8004a66:	9002      	str	r0, [sp, #8]
 8004a68:	9007      	str	r0, [sp, #28]
 8004a6a:	9106      	str	r1, [sp, #24]
 8004a6c:	ea4f 040c 	mov.w	r4, ip
 8004a70:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8004d58 <.text_3>
 8004a74:	f8bd 0068 	ldrh.w	r0, [sp, #104]	; 0x68
 8004a78:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	f000 8096 	beq.w	8004bae <pool_func_mp_array_f32+0x1c2>
 8004a82:	9907      	ldr	r1, [sp, #28]
 8004a84:	9808      	ldr	r0, [sp, #32]
 8004a86:	f9bd 6050 	ldrsh.w	r6, [sp, #80]	; 0x50
 8004a8a:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 8004a8e:	9103      	str	r1, [sp, #12]
 8004a90:	f04f 0a00 	mov.w	sl, #0
 8004a94:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8004a98:	f8ad c002 	strh.w	ip, [sp, #2]
 8004a9c:	4348      	muls	r0, r1
 8004a9e:	b200      	sxth	r0, r0
 8004aa0:	900a      	str	r0, [sp, #40]	; 0x28
 8004aa2:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8004aa6:	9204      	str	r2, [sp, #16]
 8004aa8:	f8ad 6000 	strh.w	r6, [sp]
 8004aac:	f8cd 5014 	str.w	r5, [sp, #20]
 8004ab0:	f8ad 8004 	strh.w	r8, [sp, #4]
 8004ab4:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8004ab8:	f9bd e000 	ldrsh.w	lr, [sp]
 8004abc:	2100      	movs	r1, #0
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	d05d      	beq.n	8004b7e <pool_func_mp_array_f32+0x192>
 8004ac2:	9a03      	ldr	r2, [sp, #12]
 8004ac4:	9804      	ldr	r0, [sp, #16]
 8004ac6:	4362      	muls	r2, r4
 8004ac8:	ab02      	add	r3, sp, #8
 8004aca:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 8004ace:	5e58      	ldrsh	r0, [r3, r1]
 8004ad0:	9009      	str	r0, [sp, #36]	; 0x24
 8004ad2:	fa0f f58a 	sxth.w	r5, sl
 8004ad6:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8004ada:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004adc:	42b8      	cmp	r0, r7
 8004ade:	eef0 0a40 	vmov.f32	s1, s0
 8004ae2:	da45      	bge.n	8004b70 <pool_func_mp_array_f32+0x184>
 8004ae4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ae6:	fb08 f900 	mul.w	r9, r8, r0
 8004aea:	1aba      	subs	r2, r7, r2
 8004aec:	4658      	mov	r0, fp
 8004aee:	4575      	cmp	r5, lr
 8004af0:	462e      	mov	r6, r5
 8004af2:	da39      	bge.n	8004b68 <pool_func_mp_array_f32+0x17c>
 8004af4:	ebae 0305 	sub.w	r3, lr, r5
 8004af8:	ea5f 7bc3 	movs.w	fp, r3, lsl #31
 8004afc:	d50f      	bpl.n	8004b1e <pool_func_mp_array_f32+0x132>
 8004afe:	eb09 0b06 	add.w	fp, r9, r6
 8004b02:	fb0b 1b04 	mla	fp, fp, r4, r1
 8004b06:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8004b0a:	ed9b 1a00 	vldr	s2, [fp]
 8004b0e:	eeb4 1a60 	vcmp.f32	s2, s1
 8004b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b16:	bf58      	it	pl
 8004b18:	eef0 0a41 	vmovpl.f32	s1, s2
 8004b1c:	1c76      	adds	r6, r6, #1
 8004b1e:	085b      	lsrs	r3, r3, #1
 8004b20:	f000 8022 	beq.w	8004b68 <pool_func_mp_array_f32+0x17c>
 8004b24:	eb09 0b06 	add.w	fp, r9, r6
 8004b28:	fb0b 1b04 	mla	fp, fp, r4, r1
 8004b2c:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8004b30:	ed9b 1a00 	vldr	s2, [fp]
 8004b34:	eeb4 1a60 	vcmp.f32	s2, s1
 8004b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b3c:	bf58      	it	pl
 8004b3e:	eef0 0a41 	vmovpl.f32	s1, s2
 8004b42:	1c76      	adds	r6, r6, #1
 8004b44:	eb09 0b06 	add.w	fp, r9, r6
 8004b48:	fb0b 1b04 	mla	fp, fp, r4, r1
 8004b4c:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8004b50:	ed9b 1a00 	vldr	s2, [fp]
 8004b54:	eeb4 1a60 	vcmp.f32	s2, s1
 8004b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b5c:	bf58      	it	pl
 8004b5e:	eef0 0a41 	vmovpl.f32	s1, s2
 8004b62:	1c76      	adds	r6, r6, #1
 8004b64:	1e5b      	subs	r3, r3, #1
 8004b66:	d1dd      	bne.n	8004b24 <pool_func_mp_array_f32+0x138>
 8004b68:	1e52      	subs	r2, r2, #1
 8004b6a:	44c1      	add	r9, r8
 8004b6c:	d1bf      	bne.n	8004aee <pool_func_mp_array_f32+0x102>
 8004b6e:	4683      	mov	fp, r0
 8004b70:	1c49      	adds	r1, r1, #1
 8004b72:	edcc 0a00 	vstr	s1, [ip]
 8004b76:	42a1      	cmp	r1, r4
 8004b78:	f10c 0c04 	add.w	ip, ip, #4
 8004b7c:	dbad      	blt.n	8004ada <pool_func_mp_array_f32+0xee>
 8004b7e:	9803      	ldr	r0, [sp, #12]
 8004b80:	f8bd 1000 	ldrh.w	r1, [sp]
 8004b84:	1c40      	adds	r0, r0, #1
 8004b86:	9003      	str	r0, [sp, #12]
 8004b88:	f8bd 0060 	ldrh.w	r0, [sp, #96]	; 0x60
 8004b8c:	4482      	add	sl, r0
 8004b8e:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
 8004b92:	1841      	adds	r1, r0, r1
 8004b94:	f8ad 1000 	strh.w	r1, [sp]
 8004b98:	9905      	ldr	r1, [sp, #20]
 8004b9a:	1e49      	subs	r1, r1, #1
 8004b9c:	9105      	str	r1, [sp, #20]
 8004b9e:	d189      	bne.n	8004ab4 <pool_func_mp_array_f32+0xc8>
 8004ba0:	f8bd c002 	ldrh.w	ip, [sp, #2]
 8004ba4:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8004ba8:	9a04      	ldr	r2, [sp, #16]
 8004baa:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8004bae:	9908      	ldr	r1, [sp, #32]
 8004bb0:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 8004bb4:	f8bd 7006 	ldrh.w	r7, [sp, #6]
 8004bb8:	1c49      	adds	r1, r1, #1
 8004bba:	9108      	str	r1, [sp, #32]
 8004bbc:	9907      	ldr	r1, [sp, #28]
 8004bbe:	194d      	adds	r5, r1, r5
 8004bc0:	9507      	str	r5, [sp, #28]
 8004bc2:	9902      	ldr	r1, [sp, #8]
 8004bc4:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8004bc8:	194d      	adds	r5, r1, r5
 8004bca:	9502      	str	r5, [sp, #8]
 8004bcc:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8004bd0:	9d06      	ldr	r5, [sp, #24]
 8004bd2:	19cf      	adds	r7, r1, r7
 8004bd4:	1e6d      	subs	r5, r5, #1
 8004bd6:	f8ad 7006 	strh.w	r7, [sp, #6]
 8004bda:	9506      	str	r5, [sp, #24]
 8004bdc:	f000 80b8 	beq.w	8004d50 <pool_func_mp_array_f32+0x364>
 8004be0:	e748      	b.n	8004a74 <pool_func_mp_array_f32+0x88>
 8004be2:	0008      	movs	r0, r1
 8004be4:	f000 80b4 	beq.w	8004d50 <pool_func_mp_array_f32+0x364>
 8004be8:	427f      	negs	r7, r7
 8004bea:	19e4      	adds	r4, r4, r7
 8004bec:	f8ad 7000 	strh.w	r7, [sp]
 8004bf0:	f8ad 400a 	strh.w	r4, [sp, #10]
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	9008      	str	r0, [sp, #32]
 8004bf8:	f8cd 101c 	str.w	r1, [sp, #28]
 8004bfc:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8004d58 <.text_3>
 8004c00:	f8bd 0068 	ldrh.w	r0, [sp, #104]	; 0x68
 8004c04:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 8004c08:	2800      	cmp	r0, #0
 8004c0a:	f000 8089 	beq.w	8004d20 <pool_func_mp_array_f32+0x334>
 8004c0e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8004c12:	f9bd 7050 	ldrsh.w	r7, [sp, #80]	; 0x50
 8004c16:	9908      	ldr	r1, [sp, #32]
 8004c18:	f8bd 4068 	ldrh.w	r4, [sp, #104]	; 0x68
 8004c1c:	9103      	str	r1, [sp, #12]
 8004c1e:	f1ce 0e00 	rsb	lr, lr, #0
 8004c22:	4477      	add	r7, lr
 8004c24:	f8ad c002 	strh.w	ip, [sp, #2]
 8004c28:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8004c2c:	9204      	str	r2, [sp, #16]
 8004c2e:	f8ad e006 	strh.w	lr, [sp, #6]
 8004c32:	f8ad 7008 	strh.w	r7, [sp, #8]
 8004c36:	9406      	str	r4, [sp, #24]
 8004c38:	f8ad 8004 	strh.w	r8, [sp, #4]
 8004c3c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8004c40:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8004c44:	2600      	movs	r6, #0
 8004c46:	2900      	cmp	r1, #0
 8004c48:	d04e      	beq.n	8004ce8 <pool_func_mp_array_f32+0x2fc>
 8004c4a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8004c4e:	9b03      	ldr	r3, [sp, #12]
 8004c50:	9904      	ldr	r1, [sp, #16]
 8004c52:	f9bd 4006 	ldrsh.w	r4, [sp, #6]
 8004c56:	435a      	muls	r2, r3
 8004c58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004c5c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8004c60:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004c64:	f8cd 1014 	str.w	r1, [sp, #20]
 8004c68:	f9bd 1000 	ldrsh.w	r1, [sp]
 8004c6c:	4551      	cmp	r1, sl
 8004c6e:	eef0 0a40 	vmov.f32	s1, s0
 8004c72:	da2a      	bge.n	8004cca <pool_func_mp_array_f32+0x2de>
 8004c74:	fb03 f901 	mul.w	r9, r3, r1
 8004c78:	f8ad 5002 	strh.w	r5, [sp, #2]
 8004c7c:	4284      	cmp	r4, r0
 8004c7e:	4625      	mov	r5, r4
 8004c80:	da1d      	bge.n	8004cbe <pool_func_mp_array_f32+0x2d2>
 8004c82:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8004c86:	46de      	mov	lr, fp
 8004c88:	2900      	cmp	r1, #0
 8004c8a:	bf58      	it	pl
 8004c8c:	2d00      	cmppl	r5, #0
 8004c8e:	d412      	bmi.n	8004cb6 <pool_func_mp_array_f32+0x2ca>
 8004c90:	42b9      	cmp	r1, r7
 8004c92:	bfb8      	it	lt
 8004c94:	429d      	cmplt	r5, r3
 8004c96:	da0e      	bge.n	8004cb6 <pool_func_mp_array_f32+0x2ca>
 8004c98:	eb09 0b05 	add.w	fp, r9, r5
 8004c9c:	fb0b 6b02 	mla	fp, fp, r2, r6
 8004ca0:	eb0e 0b8b 	add.w	fp, lr, fp, lsl #2
 8004ca4:	ed9b 1a00 	vldr	s2, [fp]
 8004ca8:	eeb4 1a60 	vcmp.f32	s2, s1
 8004cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb0:	bf58      	it	pl
 8004cb2:	eef0 0a41 	vmovpl.f32	s1, s2
 8004cb6:	1c6d      	adds	r5, r5, #1
 8004cb8:	4285      	cmp	r5, r0
 8004cba:	dbe5      	blt.n	8004c88 <pool_func_mp_array_f32+0x29c>
 8004cbc:	46f3      	mov	fp, lr
 8004cbe:	1c49      	adds	r1, r1, #1
 8004cc0:	4551      	cmp	r1, sl
 8004cc2:	4499      	add	r9, r3
 8004cc4:	dbda      	blt.n	8004c7c <pool_func_mp_array_f32+0x290>
 8004cc6:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 8004cca:	1c76      	adds	r6, r6, #1
 8004ccc:	9905      	ldr	r1, [sp, #20]
 8004cce:	edc1 0a00 	vstr	s1, [r1]
 8004cd2:	9905      	ldr	r1, [sp, #20]
 8004cd4:	1d0f      	adds	r7, r1, #4
 8004cd6:	4296      	cmp	r6, r2
 8004cd8:	9705      	str	r7, [sp, #20]
 8004cda:	dbc5      	blt.n	8004c68 <pool_func_mp_array_f32+0x27c>
 8004cdc:	f8ad 2002 	strh.w	r2, [sp, #2]
 8004ce0:	f8ad 4006 	strh.w	r4, [sp, #6]
 8004ce4:	f8ad 3004 	strh.w	r3, [sp, #4]
 8004ce8:	9803      	ldr	r0, [sp, #12]
 8004cea:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 8004cee:	1c40      	adds	r0, r0, #1
 8004cf0:	9003      	str	r0, [sp, #12]
 8004cf2:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8004cf6:	1808      	adds	r0, r1, r0
 8004cf8:	f8ad 0008 	strh.w	r0, [sp, #8]
 8004cfc:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 8004d00:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8004d04:	1808      	adds	r0, r1, r0
 8004d06:	f8ad 0006 	strh.w	r0, [sp, #6]
 8004d0a:	9806      	ldr	r0, [sp, #24]
 8004d0c:	1e40      	subs	r0, r0, #1
 8004d0e:	9006      	str	r0, [sp, #24]
 8004d10:	d194      	bne.n	8004c3c <pool_func_mp_array_f32+0x250>
 8004d12:	f8bd c002 	ldrh.w	ip, [sp, #2]
 8004d16:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8004d1a:	9a04      	ldr	r2, [sp, #16]
 8004d1c:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8004d20:	9908      	ldr	r1, [sp, #32]
 8004d22:	f8bd 4068 	ldrh.w	r4, [sp, #104]	; 0x68
 8004d26:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8004d2a:	190c      	adds	r4, r1, r4
 8004d2c:	9408      	str	r4, [sp, #32]
 8004d2e:	f8bd 4000 	ldrh.w	r4, [sp]
 8004d32:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8004d36:	19cf      	adds	r7, r1, r7
 8004d38:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8004d3c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8004d40:	190c      	adds	r4, r1, r4
 8004d42:	f8ad 4000 	strh.w	r4, [sp]
 8004d46:	9c07      	ldr	r4, [sp, #28]
 8004d48:	1e64      	subs	r4, r4, #1
 8004d4a:	9407      	str	r4, [sp, #28]
 8004d4c:	f47f af58 	bne.w	8004c00 <pool_func_mp_array_f32+0x214>
 8004d50:	b00b      	add	sp, #44	; 0x2c
 8004d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004d58 <.text_3>:
 8004d58:	cf000000 	.word	0xcf000000

08004d5c <pool_func_ap_array_f32>:
 8004d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d60:	468b      	mov	fp, r1
 8004d62:	b08c      	sub	sp, #48	; 0x30
 8004d64:	4699      	mov	r9, r3
 8004d66:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004d68:	f9bd c068 	ldrsh.w	ip, [sp, #104]	; 0x68
 8004d6c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004d6e:	4692      	mov	sl, r2
 8004d70:	1e4f      	subs	r7, r1, #1
 8004d72:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004d74:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004d76:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 8004d7a:	6880      	ldr	r0, [r0, #8]
 8004d7c:	68ad      	ldr	r5, [r5, #8]
 8004d7e:	fb17 fc0c 	smulbb	ip, r7, ip
 8004d82:	ebac 0c03 	sub.w	ip, ip, r3
 8004d86:	f8bd 705c 	ldrh.w	r7, [sp, #92]	; 0x5c
 8004d8a:	4494      	add	ip, r2
 8004d8c:	f1ac 0401 	sub.w	r4, ip, #1
 8004d90:	431f      	orrs	r7, r3
 8004d92:	eba4 060a 	sub.w	r6, r4, sl
 8004d96:	f040 80dc 	bne.w	8004f52 <pool_func_ap_array_f32+0x1f6>
 8004d9a:	f9bd 706c 	ldrsh.w	r7, [sp, #108]	; 0x6c
 8004d9e:	1e7c      	subs	r4, r7, #1
 8004da0:	f9bd 705c 	ldrsh.w	r7, [sp, #92]	; 0x5c
 8004da4:	fb14 f408 	smulbb	r4, r4, r8
 8004da8:	1be4      	subs	r4, r4, r7
 8004daa:	f9bd 7054 	ldrsh.w	r7, [sp, #84]	; 0x54
 8004dae:	193c      	adds	r4, r7, r4
 8004db0:	1e64      	subs	r4, r4, #1
 8004db2:	eba4 040b 	sub.w	r4, r4, fp
 8004db6:	b224      	sxth	r4, r4
 8004db8:	2c00      	cmp	r4, #0
 8004dba:	bf44      	itt	mi
 8004dbc:	b234      	sxthmi	r4, r6
 8004dbe:	2c00      	cmpmi	r4, #0
 8004dc0:	f140 80c7 	bpl.w	8004f52 <pool_func_ap_array_f32+0x1f6>
 8004dc4:	2400      	movs	r4, #0
 8004dc6:	000b      	movs	r3, r1
 8004dc8:	9409      	str	r4, [sp, #36]	; 0x24
 8004dca:	f000 81af 	beq.w	800512c <pool_func_ap_array_f32+0x3d0>
 8004dce:	b212      	sxth	r2, r2
 8004dd0:	f8ad 2004 	strh.w	r2, [sp, #4]
 8004dd4:	9408      	str	r4, [sp, #32]
 8004dd6:	9407      	str	r4, [sp, #28]
 8004dd8:	f8cd 1018 	str.w	r1, [sp, #24]
 8004ddc:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 8004de0:	f9bd e004 	ldrsh.w	lr, [sp, #4]
 8004de4:	2900      	cmp	r1, #0
 8004de6:	f000 809a 	beq.w	8004f1e <pool_func_ap_array_f32+0x1c2>
 8004dea:	9907      	ldr	r1, [sp, #28]
 8004dec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dee:	f9bd 4054 	ldrsh.w	r4, [sp, #84]	; 0x54
 8004df2:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8004df6:	9102      	str	r1, [sp, #8]
 8004df8:	2700      	movs	r7, #0
 8004dfa:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 8004dfe:	434a      	muls	r2, r1
 8004e00:	b212      	sxth	r2, r2
 8004e02:	ae08      	add	r6, sp, #32
 8004e04:	920b      	str	r2, [sp, #44]	; 0x2c
 8004e06:	46ca      	mov	sl, r9
 8004e08:	5ff1      	ldrsh	r1, [r6, r7]
 8004e0a:	910a      	str	r1, [sp, #40]	; 0x28
 8004e0c:	f8ad 9002 	strh.w	r9, [sp, #2]
 8004e10:	f8ad 8064 	strh.w	r8, [sp, #100]	; 0x64
 8004e14:	9505      	str	r5, [sp, #20]
 8004e16:	f8ad 4000 	strh.w	r4, [sp]
 8004e1a:	9303      	str	r3, [sp, #12]
 8004e1c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8004e20:	f9bd c000 	ldrsh.w	ip, [sp]
 8004e24:	2200      	movs	r2, #0
 8004e26:	2900      	cmp	r1, #0
 8004e28:	d063      	beq.n	8004ef2 <pool_func_ap_array_f32+0x196>
 8004e2a:	9d02      	ldr	r5, [sp, #8]
 8004e2c:	9905      	ldr	r1, [sp, #20]
 8004e2e:	f8cd e010 	str.w	lr, [sp, #16]
 8004e32:	fb05 f50a 	mul.w	r5, r5, sl
 8004e36:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8004e3a:	f8ad b006 	strh.w	fp, [sp, #6]
 8004e3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004e40:	9b04      	ldr	r3, [sp, #16]
 8004e42:	4299      	cmp	r1, r3
 8004e44:	ed9f 0abb 	vldr	s0, [pc, #748]	; 8005134 <.text_5>
 8004e48:	eddf 0aba 	vldr	s1, [pc, #744]	; 8005134 <.text_5>
 8004e4c:	da43      	bge.n	8004ed6 <pool_func_ap_array_f32+0x17a>
 8004e4e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004e50:	f8bd b006 	ldrh.w	fp, [sp, #6]
 8004e54:	eba3 0804 	sub.w	r8, r3, r4
 8004e58:	fb01 f10b 	mul.w	r1, r1, fp
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	ee10 ea90 	vmov	lr, s1
 8004e62:	b23c      	sxth	r4, r7
 8004e64:	4564      	cmp	r4, ip
 8004e66:	46b9      	mov	r9, r7
 8004e68:	da2e      	bge.n	8004ec8 <pool_func_ap_array_f32+0x16c>
 8004e6a:	ebac 0004 	sub.w	r0, ip, r4
 8004e6e:	44e6      	add	lr, ip
 8004e70:	07c6      	lsls	r6, r0, #31
 8004e72:	ebae 0e04 	sub.w	lr, lr, r4
 8004e76:	d50a      	bpl.n	8004e8e <pool_func_ap_array_f32+0x132>
 8004e78:	190c      	adds	r4, r1, r4
 8004e7a:	fb04 240a 	mla	r4, r4, sl, r2
 8004e7e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004e82:	f109 0901 	add.w	r9, r9, #1
 8004e86:	edd4 0a00 	vldr	s1, [r4]
 8004e8a:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004e8e:	0840      	lsrs	r0, r0, #1
 8004e90:	f000 801a 	beq.w	8004ec8 <pool_func_ap_array_f32+0x16c>
 8004e94:	fa01 f489 	sxtah	r4, r1, r9
 8004e98:	f109 0901 	add.w	r9, r9, #1
 8004e9c:	fb04 240a 	mla	r4, r4, sl, r2
 8004ea0:	fa01 f689 	sxtah	r6, r1, r9
 8004ea4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004ea8:	fb06 260a 	mla	r6, r6, sl, r2
 8004eac:	edd4 0a00 	vldr	s1, [r4]
 8004eb0:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8004eb4:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004eb8:	ed94 1a00 	vldr	s2, [r4]
 8004ebc:	1e40      	subs	r0, r0, #1
 8004ebe:	ee30 0a01 	vadd.f32	s0, s0, s2
 8004ec2:	f109 0901 	add.w	r9, r9, #1
 8004ec6:	d1e5      	bne.n	8004e94 <pool_func_ap_array_f32+0x138>
 8004ec8:	f1b8 0801 	subs.w	r8, r8, #1
 8004ecc:	4459      	add	r1, fp
 8004ece:	d1c8      	bne.n	8004e62 <pool_func_ap_array_f32+0x106>
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	ee00 ea90 	vmov	s1, lr
 8004ed6:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8004eda:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8004ede:	ed85 0a00 	vstr	s0, [r5]
 8004ee2:	1c52      	adds	r2, r2, #1
 8004ee4:	1d2d      	adds	r5, r5, #4
 8004ee6:	4552      	cmp	r2, sl
 8004ee8:	dba9      	blt.n	8004e3e <pool_func_ap_array_f32+0xe2>
 8004eea:	f8dd e010 	ldr.w	lr, [sp, #16]
 8004eee:	f8bd b006 	ldrh.w	fp, [sp, #6]
 8004ef2:	9902      	ldr	r1, [sp, #8]
 8004ef4:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8004ef8:	1c49      	adds	r1, r1, #1
 8004efa:	9102      	str	r1, [sp, #8]
 8004efc:	f8bd 1000 	ldrh.w	r1, [sp]
 8004f00:	1851      	adds	r1, r2, r1
 8004f02:	f8ad 1000 	strh.w	r1, [sp]
 8004f06:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8004f0a:	9a03      	ldr	r2, [sp, #12]
 8004f0c:	19cf      	adds	r7, r1, r7
 8004f0e:	1e52      	subs	r2, r2, #1
 8004f10:	9203      	str	r2, [sp, #12]
 8004f12:	d183      	bne.n	8004e1c <pool_func_ap_array_f32+0xc0>
 8004f14:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 8004f18:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 8004f1c:	9d05      	ldr	r5, [sp, #20]
 8004f1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f20:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8004f24:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004f28:	1c49      	adds	r1, r1, #1
 8004f2a:	9109      	str	r1, [sp, #36]	; 0x24
 8004f2c:	9907      	ldr	r1, [sp, #28]
 8004f2e:	188a      	adds	r2, r1, r2
 8004f30:	9207      	str	r2, [sp, #28]
 8004f32:	9908      	ldr	r1, [sp, #32]
 8004f34:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 8004f38:	188a      	adds	r2, r1, r2
 8004f3a:	9208      	str	r2, [sp, #32]
 8004f3c:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
 8004f40:	9a06      	ldr	r2, [sp, #24]
 8004f42:	18cb      	adds	r3, r1, r3
 8004f44:	1e52      	subs	r2, r2, #1
 8004f46:	f8ad 3004 	strh.w	r3, [sp, #4]
 8004f4a:	9206      	str	r2, [sp, #24]
 8004f4c:	f000 80ee 	beq.w	800512c <pool_func_ap_array_f32+0x3d0>
 8004f50:	e744      	b.n	8004ddc <pool_func_ap_array_f32+0x80>
 8004f52:	000f      	movs	r7, r1
 8004f54:	f000 80ea 	beq.w	800512c <pool_func_ap_array_f32+0x3d0>
 8004f58:	425b      	negs	r3, r3
 8004f5a:	18d2      	adds	r2, r2, r3
 8004f5c:	2700      	movs	r7, #0
 8004f5e:	f8ad 3000 	strh.w	r3, [sp]
 8004f62:	f8ad 200a 	strh.w	r2, [sp, #10]
 8004f66:	9709      	str	r7, [sp, #36]	; 0x24
 8004f68:	f8cd 1020 	str.w	r1, [sp, #32]
 8004f6c:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 8004f70:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8004f74:	2900      	cmp	r1, #0
 8004f76:	f000 80c1 	beq.w	80050fc <pool_func_ap_array_f32+0x3a0>
 8004f7a:	f9bd 605c 	ldrsh.w	r6, [sp, #92]	; 0x5c
 8004f7e:	f9bd 4054 	ldrsh.w	r4, [sp, #84]	; 0x54
 8004f82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f84:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 8004f88:	9204      	str	r2, [sp, #16]
 8004f8a:	4276      	negs	r6, r6
 8004f8c:	19a4      	adds	r4, r4, r6
 8004f8e:	f8ad 9002 	strh.w	r9, [sp, #2]
 8004f92:	f8ad 8064 	strh.w	r8, [sp, #100]	; 0x64
 8004f96:	9505      	str	r5, [sp, #20]
 8004f98:	f8ad 6004 	strh.w	r6, [sp, #4]
 8004f9c:	f8ad 4008 	strh.w	r4, [sp, #8]
 8004fa0:	f8cd 101c 	str.w	r1, [sp, #28]
 8004fa4:	f8ad b006 	strh.w	fp, [sp, #6]
 8004fa8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8004fac:	f9bd 8008 	ldrsh.w	r8, [sp, #8]
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	2a00      	cmp	r2, #0
 8004fb4:	f000 8085 	beq.w	80050c2 <pool_func_ap_array_f32+0x366>
 8004fb8:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 8004fbc:	9c04      	ldr	r4, [sp, #16]
 8004fbe:	9a05      	ldr	r2, [sp, #20]
 8004fc0:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8004fc4:	f8ad a00c 	strh.w	sl, [sp, #12]
 8004fc8:	4365      	muls	r5, r4
 8004fca:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8004fce:	9506      	str	r5, [sp, #24]
 8004fd0:	f9bd 5000 	ldrsh.w	r5, [sp]
 8004fd4:	f8bd a002 	ldrh.w	sl, [sp, #2]
 8004fd8:	429d      	cmp	r5, r3
 8004fda:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8005134 <.text_5>
 8004fde:	eddf 0a55 	vldr	s1, [pc, #340]	; 8005134 <.text_5>
 8004fe2:	da5d      	bge.n	80050a0 <pool_func_ap_array_f32+0x344>
 8004fe4:	930a      	str	r3, [sp, #40]	; 0x28
 8004fe6:	fb09 fe05 	mul.w	lr, r9, r5
 8004fea:	462b      	mov	r3, r5
 8004fec:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 8004ff0:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8004ff4:	ee10 2a90 	vmov	r2, s1
 8004ff8:	4545      	cmp	r5, r8
 8004ffa:	462f      	mov	r7, r5
 8004ffc:	da44      	bge.n	8005088 <pool_func_ap_array_f32+0x32c>
 8004ffe:	eba8 0405 	sub.w	r4, r8, r5
 8005002:	07e6      	lsls	r6, r4, #31
 8005004:	d513      	bpl.n	800502e <pool_func_ap_array_f32+0x2d2>
 8005006:	2b00      	cmp	r3, #0
 8005008:	bf58      	it	pl
 800500a:	2f00      	cmppl	r7, #0
 800500c:	d40e      	bmi.n	800502c <pool_func_ap_array_f32+0x2d0>
 800500e:	455b      	cmp	r3, fp
 8005010:	bfb8      	it	lt
 8005012:	454f      	cmplt	r7, r9
 8005014:	da0a      	bge.n	800502c <pool_func_ap_array_f32+0x2d0>
 8005016:	eb0e 0607 	add.w	r6, lr, r7
 800501a:	fb06 160a 	mla	r6, r6, sl, r1
 800501e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8005022:	1c52      	adds	r2, r2, #1
 8005024:	edd6 0a00 	vldr	s1, [r6]
 8005028:	ee30 0a20 	vadd.f32	s0, s0, s1
 800502c:	1c7f      	adds	r7, r7, #1
 800502e:	0864      	lsrs	r4, r4, #1
 8005030:	d02a      	beq.n	8005088 <pool_func_ap_array_f32+0x32c>
 8005032:	2b00      	cmp	r3, #0
 8005034:	d405      	bmi.n	8005042 <pool_func_ap_array_f32+0x2e6>
 8005036:	2f00      	cmp	r7, #0
 8005038:	bf48      	it	mi
 800503a:	1c7e      	addmi	r6, r7, #1
 800503c:	d410      	bmi.n	8005060 <pool_func_ap_array_f32+0x304>
 800503e:	455b      	cmp	r3, fp
 8005040:	db01      	blt.n	8005046 <pool_func_ap_array_f32+0x2ea>
 8005042:	1c7e      	adds	r6, r7, #1
 8005044:	e01d      	b.n	8005082 <pool_func_ap_array_f32+0x326>
 8005046:	1c7e      	adds	r6, r7, #1
 8005048:	454f      	cmp	r7, r9
 800504a:	da09      	bge.n	8005060 <pool_func_ap_array_f32+0x304>
 800504c:	4477      	add	r7, lr
 800504e:	fb07 170a 	mla	r7, r7, sl, r1
 8005052:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8005056:	1c52      	adds	r2, r2, #1
 8005058:	edd7 0a00 	vldr	s1, [r7]
 800505c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005060:	2e00      	cmp	r6, #0
 8005062:	d40e      	bmi.n	8005082 <pool_func_ap_array_f32+0x326>
 8005064:	455b      	cmp	r3, fp
 8005066:	bfb8      	it	lt
 8005068:	454e      	cmplt	r6, r9
 800506a:	da0a      	bge.n	8005082 <pool_func_ap_array_f32+0x326>
 800506c:	eb0e 0706 	add.w	r7, lr, r6
 8005070:	fb07 170a 	mla	r7, r7, sl, r1
 8005074:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8005078:	1c52      	adds	r2, r2, #1
 800507a:	edd7 0a00 	vldr	s1, [r7]
 800507e:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005082:	1c77      	adds	r7, r6, #1
 8005084:	1e64      	subs	r4, r4, #1
 8005086:	d1d4      	bne.n	8005032 <pool_func_ap_array_f32+0x2d6>
 8005088:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800508a:	1c5b      	adds	r3, r3, #1
 800508c:	42bb      	cmp	r3, r7
 800508e:	44ce      	add	lr, r9
 8005090:	dbb2      	blt.n	8004ff8 <pool_func_ap_array_f32+0x29c>
 8005092:	463b      	mov	r3, r7
 8005094:	ee00 2a90 	vmov	s1, r2
 8005098:	f8ad 5004 	strh.w	r5, [sp, #4]
 800509c:	f8ad b00c 	strh.w	fp, [sp, #12]
 80050a0:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80050a4:	9d06      	ldr	r5, [sp, #24]
 80050a6:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80050aa:	ed85 0a00 	vstr	s0, [r5]
 80050ae:	1c49      	adds	r1, r1, #1
 80050b0:	9a06      	ldr	r2, [sp, #24]
 80050b2:	1d15      	adds	r5, r2, #4
 80050b4:	4551      	cmp	r1, sl
 80050b6:	9506      	str	r5, [sp, #24]
 80050b8:	db8a      	blt.n	8004fd0 <pool_func_ap_array_f32+0x274>
 80050ba:	f8ad 9006 	strh.w	r9, [sp, #6]
 80050be:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 80050c2:	9904      	ldr	r1, [sp, #16]
 80050c4:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80050c8:	1c49      	adds	r1, r1, #1
 80050ca:	9104      	str	r1, [sp, #16]
 80050cc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80050d0:	1851      	adds	r1, r2, r1
 80050d2:	f8ad 1008 	strh.w	r1, [sp, #8]
 80050d6:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80050da:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80050de:	1851      	adds	r1, r2, r1
 80050e0:	f8ad 1004 	strh.w	r1, [sp, #4]
 80050e4:	9907      	ldr	r1, [sp, #28]
 80050e6:	1e49      	subs	r1, r1, #1
 80050e8:	9107      	str	r1, [sp, #28]
 80050ea:	f47f af5d 	bne.w	8004fa8 <pool_func_ap_array_f32+0x24c>
 80050ee:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 80050f2:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 80050f6:	9d05      	ldr	r5, [sp, #20]
 80050f8:	f8bd b006 	ldrh.w	fp, [sp, #6]
 80050fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050fe:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8005102:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8005106:	188a      	adds	r2, r1, r2
 8005108:	9209      	str	r2, [sp, #36]	; 0x24
 800510a:	f8bd 2000 	ldrh.w	r2, [sp]
 800510e:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
 8005112:	18cb      	adds	r3, r1, r3
 8005114:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
 8005118:	f8ad 300a 	strh.w	r3, [sp, #10]
 800511c:	188a      	adds	r2, r1, r2
 800511e:	f8ad 2000 	strh.w	r2, [sp]
 8005122:	9a08      	ldr	r2, [sp, #32]
 8005124:	1e52      	subs	r2, r2, #1
 8005126:	9208      	str	r2, [sp, #32]
 8005128:	f47f af20 	bne.w	8004f6c <pool_func_ap_array_f32+0x210>
 800512c:	b00c      	add	sp, #48	; 0x30
 800512e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005134 <.text_5>:
 8005134:	00000000 	.word	0x00000000

08005138 <pool_func_mp_kernel_array_f32>:
 8005138:	b470      	push	{r4, r5, r6}
 800513a:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 800513e:	42a1      	cmp	r1, r4
 8005140:	d257      	bcs.n	80051f2 <pool_func_mp_kernel_array_f32+0xba>
 8005142:	2b00      	cmp	r3, #0
 8005144:	d051      	beq.n	80051ea <pool_func_mp_kernel_array_f32+0xb2>
 8005146:	f013 0203 	ands.w	r2, r3, #3
 800514a:	460d      	mov	r5, r1
 800514c:	4606      	mov	r6, r0
 800514e:	d011      	beq.n	8005174 <pool_func_mp_kernel_array_f32+0x3c>
 8005150:	ed96 0a00 	vldr	s0, [r6]
 8005154:	edd5 0a00 	vldr	s1, [r5]
 8005158:	eef4 0a40 	vcmp.f32	s1, s0
 800515c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005160:	bf58      	it	pl
 8005162:	eeb0 0a60 	vmovpl.f32	s0, s1
 8005166:	ed86 0a00 	vstr	s0, [r6]
 800516a:	1e52      	subs	r2, r2, #1
 800516c:	1d36      	adds	r6, r6, #4
 800516e:	1d2d      	adds	r5, r5, #4
 8005170:	2a00      	cmp	r2, #0
 8005172:	d1ed      	bne.n	8005150 <pool_func_mp_kernel_array_f32+0x18>
 8005174:	089a      	lsrs	r2, r3, #2
 8005176:	d038      	beq.n	80051ea <pool_func_mp_kernel_array_f32+0xb2>
 8005178:	edd5 0a00 	vldr	s1, [r5]
 800517c:	edd6 1a00 	vldr	s3, [r6]
 8005180:	eef4 0a61 	vcmp.f32	s1, s3
 8005184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005188:	bf48      	it	mi
 800518a:	eef0 0a61 	vmovmi.f32	s1, s3
 800518e:	edc6 0a00 	vstr	s1, [r6]
 8005192:	edd5 0a01 	vldr	s1, [r5, #4]
 8005196:	edd6 1a01 	vldr	s3, [r6, #4]
 800519a:	ed96 0a02 	vldr	s0, [r6, #8]
 800519e:	eef4 0a61 	vcmp.f32	s1, s3
 80051a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a6:	bf48      	it	mi
 80051a8:	eef0 0a61 	vmovmi.f32	s1, s3
 80051ac:	edc6 0a01 	vstr	s1, [r6, #4]
 80051b0:	ed95 1a02 	vldr	s2, [r5, #8]
 80051b4:	edd6 1a03 	vldr	s3, [r6, #12]
 80051b8:	eeb4 1a40 	vcmp.f32	s2, s0
 80051bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c0:	bf48      	it	mi
 80051c2:	eeb0 1a40 	vmovmi.f32	s2, s0
 80051c6:	ed86 1a02 	vstr	s2, [r6, #8]
 80051ca:	edd5 0a03 	vldr	s1, [r5, #12]
 80051ce:	eef4 0a61 	vcmp.f32	s1, s3
 80051d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d6:	bf58      	it	pl
 80051d8:	eef0 1a60 	vmovpl.f32	s3, s1
 80051dc:	edc6 1a03 	vstr	s3, [r6, #12]
 80051e0:	1e52      	subs	r2, r2, #1
 80051e2:	3610      	adds	r6, #16
 80051e4:	3510      	adds	r5, #16
 80051e6:	2a00      	cmp	r2, #0
 80051e8:	d1c6      	bne.n	8005178 <pool_func_mp_kernel_array_f32+0x40>
 80051ea:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80051ee:	42a1      	cmp	r1, r4
 80051f0:	d3a7      	bcc.n	8005142 <pool_func_mp_kernel_array_f32+0xa>
 80051f2:	bc70      	pop	{r4, r5, r6}
 80051f4:	4770      	bx	lr
	...

080051f8 <pool_func_ap_kernel_array_f32>:
 80051f8:	b4f0      	push	{r4, r5, r6, r7}
 80051fa:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 80051fe:	9c05      	ldr	r4, [sp, #20]
 8005200:	42a9      	cmp	r1, r5
 8005202:	d251      	bcs.n	80052a8 <pool_func_ap_kernel_array_f32+0xb0>
 8005204:	2b00      	cmp	r3, #0
 8005206:	d04a      	beq.n	800529e <pool_func_ap_kernel_array_f32+0xa6>
 8005208:	f013 0203 	ands.w	r2, r3, #3
 800520c:	460e      	mov	r6, r1
 800520e:	4607      	mov	r7, r0
 8005210:	f000 800f 	beq.w	8005232 <pool_func_ap_kernel_array_f32+0x3a>
 8005214:	ed96 0a00 	vldr	s0, [r6]
 8005218:	2c01      	cmp	r4, #1
 800521a:	bf1c      	itt	ne
 800521c:	edd7 0a00 	vldrne	s1, [r7]
 8005220:	ee30 0a80 	vaddne.f32	s0, s1, s0
 8005224:	ed87 0a00 	vstr	s0, [r7]
 8005228:	1e52      	subs	r2, r2, #1
 800522a:	1d3f      	adds	r7, r7, #4
 800522c:	1d36      	adds	r6, r6, #4
 800522e:	2a00      	cmp	r2, #0
 8005230:	d1f0      	bne.n	8005214 <pool_func_ap_kernel_array_f32+0x1c>
 8005232:	089a      	lsrs	r2, r3, #2
 8005234:	d033      	beq.n	800529e <pool_func_ap_kernel_array_f32+0xa6>
 8005236:	2c01      	cmp	r4, #1
 8005238:	edd6 1a00 	vldr	s3, [r6]
 800523c:	d10c      	bne.n	8005258 <pool_func_ap_kernel_array_f32+0x60>
 800523e:	edc7 1a00 	vstr	s3, [r7]
 8005242:	ed96 0a01 	vldr	s0, [r6, #4]
 8005246:	ed87 0a01 	vstr	s0, [r7, #4]
 800524a:	edd6 1a02 	vldr	s3, [r6, #8]
 800524e:	edc7 1a02 	vstr	s3, [r7, #8]
 8005252:	edd6 1a03 	vldr	s3, [r6, #12]
 8005256:	e01b      	b.n	8005290 <pool_func_ap_kernel_array_f32+0x98>
 8005258:	edd7 0a00 	vldr	s1, [r7]
 800525c:	ee30 0aa1 	vadd.f32	s0, s1, s3
 8005260:	ed87 0a00 	vstr	s0, [r7]
 8005264:	ed97 1a01 	vldr	s2, [r7, #4]
 8005268:	ed96 0a01 	vldr	s0, [r6, #4]
 800526c:	edd7 1a02 	vldr	s3, [r7, #8]
 8005270:	ee31 0a00 	vadd.f32	s0, s2, s0
 8005274:	ed87 0a01 	vstr	s0, [r7, #4]
 8005278:	edd6 0a02 	vldr	s1, [r6, #8]
 800527c:	ee31 0aa0 	vadd.f32	s0, s3, s1
 8005280:	ed87 0a02 	vstr	s0, [r7, #8]
 8005284:	ed97 0a03 	vldr	s0, [r7, #12]
 8005288:	ed96 1a03 	vldr	s2, [r6, #12]
 800528c:	ee70 1a01 	vadd.f32	s3, s0, s2
 8005290:	edc7 1a03 	vstr	s3, [r7, #12]
 8005294:	1e52      	subs	r2, r2, #1
 8005296:	3710      	adds	r7, #16
 8005298:	3610      	adds	r6, #16
 800529a:	2a00      	cmp	r2, #0
 800529c:	d1cb      	bne.n	8005236 <pool_func_ap_kernel_array_f32+0x3e>
 800529e:	2400      	movs	r4, #0
 80052a0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80052a4:	42a9      	cmp	r1, r5
 80052a6:	d3ad      	bcc.n	8005204 <pool_func_ap_kernel_array_f32+0xc>
 80052a8:	9904      	ldr	r1, [sp, #16]
 80052aa:	b399      	cbz	r1, 8005314 <pool_func_ap_kernel_array_f32+0x11c>
 80052ac:	ee00 1a10 	vmov	s0, r1
 80052b0:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80052b4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80052b8:	ee80 0a80 	vdiv.f32	s0, s1, s0
 80052bc:	b353      	cbz	r3, 8005314 <pool_func_ap_kernel_array_f32+0x11c>
 80052be:	f013 0103 	ands.w	r1, r3, #3
 80052c2:	d009      	beq.n	80052d8 <pool_func_ap_kernel_array_f32+0xe0>
 80052c4:	edd0 0a00 	vldr	s1, [r0]
 80052c8:	ee60 0a80 	vmul.f32	s1, s1, s0
 80052cc:	edc0 0a00 	vstr	s1, [r0]
 80052d0:	1e49      	subs	r1, r1, #1
 80052d2:	f100 0004 	add.w	r0, r0, #4
 80052d6:	d1f5      	bne.n	80052c4 <pool_func_ap_kernel_array_f32+0xcc>
 80052d8:	089b      	lsrs	r3, r3, #2
 80052da:	d01b      	beq.n	8005314 <pool_func_ap_kernel_array_f32+0x11c>
 80052dc:	edd0 0a00 	vldr	s1, [r0]
 80052e0:	ee60 0a80 	vmul.f32	s1, s1, s0
 80052e4:	edc0 0a00 	vstr	s1, [r0]
 80052e8:	1e5b      	subs	r3, r3, #1
 80052ea:	ed90 1a01 	vldr	s2, [r0, #4]
 80052ee:	edd0 0a02 	vldr	s1, [r0, #8]
 80052f2:	ee21 1a00 	vmul.f32	s2, s2, s0
 80052f6:	ed80 1a01 	vstr	s2, [r0, #4]
 80052fa:	ee60 0a80 	vmul.f32	s1, s1, s0
 80052fe:	ed90 1a03 	vldr	s2, [r0, #12]
 8005302:	edc0 0a02 	vstr	s1, [r0, #8]
 8005306:	ee21 1a00 	vmul.f32	s2, s2, s0
 800530a:	ed80 1a03 	vstr	s2, [r0, #12]
 800530e:	f100 0010 	add.w	r0, r0, #16
 8005312:	d1e3      	bne.n	80052dc <pool_func_ap_kernel_array_f32+0xe4>
 8005314:	bcf0      	pop	{r4, r5, r6, r7}
 8005316:	4770      	bx	lr

08005318 <forward_mp>:
 8005318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800531c:	4604      	mov	r4, r0
 800531e:	b08e      	sub	sp, #56	; 0x38
 8005320:	6962      	ldr	r2, [r4, #20]
 8005322:	8811      	ldrh	r1, [r2, #0]
 8005324:	2900      	cmp	r1, #0
 8005326:	bf1a      	itte	ne
 8005328:	6850      	ldrne	r0, [r2, #4]
 800532a:	1d00      	addne	r0, r0, #4
 800532c:	2004      	moveq	r0, #4
 800532e:	6800      	ldr	r0, [r0, #0]
 8005330:	2800      	cmp	r0, #0
 8005332:	bf14      	ite	ne
 8005334:	6805      	ldrne	r5, [r0, #0]
 8005336:	2500      	moveq	r5, #0
 8005338:	2901      	cmp	r1, #1
 800533a:	bfc6      	itte	gt
 800533c:	6850      	ldrgt	r0, [r2, #4]
 800533e:	3010      	addgt	r0, #16
 8005340:	2004      	movle	r0, #4
 8005342:	6800      	ldr	r0, [r0, #0]
 8005344:	68ea      	ldr	r2, [r5, #12]
 8005346:	2800      	cmp	r0, #0
 8005348:	bf14      	ite	ne
 800534a:	6807      	ldrne	r7, [r0, #0]
 800534c:	2700      	moveq	r7, #0
 800534e:	68f9      	ldr	r1, [r7, #12]
 8005350:	68d0      	ldr	r0, [r2, #12]
 8005352:	68cb      	ldr	r3, [r1, #12]
 8005354:	9009      	str	r0, [sp, #36]	; 0x24
 8005356:	6889      	ldr	r1, [r1, #8]
 8005358:	9108      	str	r1, [sp, #32]
 800535a:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800535e:	6851      	ldr	r1, [r2, #4]
 8005360:	69a2      	ldr	r2, [r4, #24]
 8005362:	69e0      	ldr	r0, [r4, #28]
 8005364:	9007      	str	r0, [sp, #28]
 8005366:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005368:	6a20      	ldr	r0, [r4, #32]
 800536a:	960d      	str	r6, [sp, #52]	; 0x34
 800536c:	f8d4 c02c 	ldr.w	ip, [r4, #44]	; 0x2c
 8005370:	69ac      	ldr	r4, [r5, #24]
 8005372:	69bd      	ldr	r5, [r7, #24]
 8005374:	f8dc 7000 	ldr.w	r7, [ip]
 8005378:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800537c:	68a4      	ldr	r4, [r4, #8]
 800537e:	f8d5 e008 	ldr.w	lr, [r5, #8]
 8005382:	427f      	negs	r7, r7
 8005384:	2b00      	cmp	r3, #0
 8005386:	9700      	str	r7, [sp, #0]
 8005388:	f000 80d9 	beq.w	800553e <forward_mp+0x226>
 800538c:	9301      	str	r3, [sp, #4]
 800538e:	4276      	negs	r6, r6
 8005390:	960c      	str	r6, [sp, #48]	; 0x30
 8005392:	fb01 f508 	mul.w	r5, r1, r8
 8005396:	950b      	str	r5, [sp, #44]	; 0x2c
 8005398:	9d00      	ldr	r5, [sp, #0]
 800539a:	9b00      	ldr	r3, [sp, #0]
 800539c:	9f00      	ldr	r7, [sp, #0]
 800539e:	426d      	negs	r5, r5
 80053a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80053a2:	bfcc      	ite	gt
 80053a4:	2600      	movgt	r6, #0
 80053a6:	9e00      	ldrle	r6, [sp, #0]
 80053a8:	1aeb      	subs	r3, r5, r3
 80053aa:	9d07      	ldr	r5, [sp, #28]
 80053ac:	42ab      	cmp	r3, r5
 80053ae:	bf88      	it	hi
 80053b0:	462b      	movhi	r3, r5
 80053b2:	19df      	adds	r7, r3, r7
 80053b4:	9b08      	ldr	r3, [sp, #32]
 80053b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 80b7 	beq.w	800552c <forward_mp+0x214>
 80053be:	fb08 fa06 	mul.w	sl, r8, r6
 80053c2:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80053c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80053ca:	9202      	str	r2, [sp, #8]
 80053cc:	9006      	str	r0, [sp, #24]
 80053ce:	9605      	str	r6, [sp, #20]
 80053d0:	9704      	str	r7, [sp, #16]
 80053d2:	4268      	negs	r0, r5
 80053d4:	9f03      	ldr	r7, [sp, #12]
 80053d6:	9a02      	ldr	r2, [sp, #8]
 80053d8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80053dc:	bfcc      	ite	gt
 80053de:	2000      	movgt	r0, #0
 80053e0:	4628      	movle	r0, r5
 80053e2:	1b7f      	subs	r7, r7, r5
 80053e4:	4297      	cmp	r7, r2
 80053e6:	bf88      	it	hi
 80053e8:	4617      	movhi	r7, r2
 80053ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053ec:	197f      	adds	r7, r7, r5
 80053ee:	1a3f      	subs	r7, r7, r0
 80053f0:	1880      	adds	r0, r0, r2
 80053f2:	4348      	muls	r0, r1
 80053f4:	434f      	muls	r7, r1
 80053f6:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 80053fa:	b311      	cbz	r1, 8005442 <forward_mp+0x12a>
 80053fc:	f011 0003 	ands.w	r0, r1, #3
 8005400:	4672      	mov	r2, lr
 8005402:	4666      	mov	r6, ip
 8005404:	f000 8006 	beq.w	8005414 <forward_mp+0xfc>
 8005408:	f856 9b04 	ldr.w	r9, [r6], #4
 800540c:	f842 9b04 	str.w	r9, [r2], #4
 8005410:	1e40      	subs	r0, r0, #1
 8005412:	d1f9      	bne.n	8005408 <forward_mp+0xf0>
 8005414:	0888      	lsrs	r0, r1, #2
 8005416:	d014      	beq.n	8005442 <forward_mp+0x12a>
 8005418:	ed96 0a00 	vldr	s0, [r6]
 800541c:	ed82 0a00 	vstr	s0, [r2]
 8005420:	1e40      	subs	r0, r0, #1
 8005422:	edd6 0a01 	vldr	s1, [r6, #4]
 8005426:	edc2 0a01 	vstr	s1, [r2, #4]
 800542a:	ed96 0a02 	vldr	s0, [r6, #8]
 800542e:	ed82 0a02 	vstr	s0, [r2, #8]
 8005432:	edd6 0a03 	vldr	s1, [r6, #12]
 8005436:	edc2 0a03 	vstr	s1, [r2, #12]
 800543a:	3210      	adds	r2, #16
 800543c:	3610      	adds	r6, #16
 800543e:	2800      	cmp	r0, #0
 8005440:	d1ea      	bne.n	8005418 <forward_mp+0x100>
 8005442:	9805      	ldr	r0, [sp, #20]
 8005444:	9a04      	ldr	r2, [sp, #16]
 8005446:	4290      	cmp	r0, r2
 8005448:	da66      	bge.n	8005518 <forward_mp+0x200>
 800544a:	4610      	mov	r0, r2
 800544c:	9a05      	ldr	r2, [sp, #20]
 800544e:	1a82      	subs	r2, r0, r2
 8005450:	46e2      	mov	sl, ip
 8005452:	eb0a 0b87 	add.w	fp, sl, r7, lsl #2
 8005456:	45da      	cmp	sl, fp
 8005458:	d25a      	bcs.n	8005510 <forward_mp+0x1f8>
 800545a:	2900      	cmp	r1, #0
 800545c:	d054      	beq.n	8005508 <forward_mp+0x1f0>
 800545e:	f011 0003 	ands.w	r0, r1, #3
 8005462:	4656      	mov	r6, sl
 8005464:	46f1      	mov	r9, lr
 8005466:	d012      	beq.n	800548e <forward_mp+0x176>
 8005468:	ed99 0a00 	vldr	s0, [r9]
 800546c:	edd6 0a00 	vldr	s1, [r6]
 8005470:	eef4 0a40 	vcmp.f32	s1, s0
 8005474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005478:	bf58      	it	pl
 800547a:	eeb0 0a60 	vmovpl.f32	s0, s1
 800547e:	1e40      	subs	r0, r0, #1
 8005480:	1d36      	adds	r6, r6, #4
 8005482:	ed89 0a00 	vstr	s0, [r9]
 8005486:	2800      	cmp	r0, #0
 8005488:	f109 0904 	add.w	r9, r9, #4
 800548c:	d1ec      	bne.n	8005468 <forward_mp+0x150>
 800548e:	0888      	lsrs	r0, r1, #2
 8005490:	f000 803a 	beq.w	8005508 <forward_mp+0x1f0>
 8005494:	edd6 0a00 	vldr	s1, [r6]
 8005498:	edd9 1a00 	vldr	s3, [r9]
 800549c:	eef4 0a61 	vcmp.f32	s1, s3
 80054a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a4:	bf48      	it	mi
 80054a6:	eef0 0a61 	vmovmi.f32	s1, s3
 80054aa:	edc9 0a00 	vstr	s1, [r9]
 80054ae:	edd6 0a01 	vldr	s1, [r6, #4]
 80054b2:	edd9 1a01 	vldr	s3, [r9, #4]
 80054b6:	ed99 0a02 	vldr	s0, [r9, #8]
 80054ba:	eef4 0a61 	vcmp.f32	s1, s3
 80054be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c2:	bf48      	it	mi
 80054c4:	eef0 0a61 	vmovmi.f32	s1, s3
 80054c8:	edc9 0a01 	vstr	s1, [r9, #4]
 80054cc:	ed96 1a02 	vldr	s2, [r6, #8]
 80054d0:	edd9 1a03 	vldr	s3, [r9, #12]
 80054d4:	eeb4 1a40 	vcmp.f32	s2, s0
 80054d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054dc:	bf48      	it	mi
 80054de:	eeb0 1a40 	vmovmi.f32	s2, s0
 80054e2:	ed89 1a02 	vstr	s2, [r9, #8]
 80054e6:	edd6 0a03 	vldr	s1, [r6, #12]
 80054ea:	eef4 0a61 	vcmp.f32	s1, s3
 80054ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f2:	bf58      	it	pl
 80054f4:	eef0 1a60 	vmovpl.f32	s3, s1
 80054f8:	1e40      	subs	r0, r0, #1
 80054fa:	3610      	adds	r6, #16
 80054fc:	edc9 1a03 	vstr	s3, [r9, #12]
 8005500:	2800      	cmp	r0, #0
 8005502:	f109 0910 	add.w	r9, r9, #16
 8005506:	d1c5      	bne.n	8005494 <forward_mp+0x17c>
 8005508:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 800550c:	45da      	cmp	sl, fp
 800550e:	d3a4      	bcc.n	800545a <forward_mp+0x142>
 8005510:	1e52      	subs	r2, r2, #1
 8005512:	eb0c 0c88 	add.w	ip, ip, r8, lsl #2
 8005516:	d19b      	bne.n	8005450 <forward_mp+0x138>
 8005518:	9806      	ldr	r0, [sp, #24]
 800551a:	1945      	adds	r5, r0, r5
 800551c:	1e5b      	subs	r3, r3, #1
 800551e:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 8005522:	f47f af56 	bne.w	80053d2 <forward_mp+0xba>
 8005526:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800552a:	9a02      	ldr	r2, [sp, #8]
 800552c:	9d00      	ldr	r5, [sp, #0]
 800552e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005530:	195d      	adds	r5, r3, r5
 8005532:	9500      	str	r5, [sp, #0]
 8005534:	9d01      	ldr	r5, [sp, #4]
 8005536:	1e6d      	subs	r5, r5, #1
 8005538:	9501      	str	r5, [sp, #4]
 800553a:	f47f af2d 	bne.w	8005398 <forward_mp+0x80>
 800553e:	b00e      	add	sp, #56	; 0x38
 8005540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005544 <forward_ap>:
 8005544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005548:	4607      	mov	r7, r0
 800554a:	b097      	sub	sp, #92	; 0x5c
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	8811      	ldrh	r1, [r2, #0]
 8005550:	2900      	cmp	r1, #0
 8005552:	bf1a      	itte	ne
 8005554:	6850      	ldrne	r0, [r2, #4]
 8005556:	1d00      	addne	r0, r0, #4
 8005558:	2004      	moveq	r0, #4
 800555a:	6800      	ldr	r0, [r0, #0]
 800555c:	2800      	cmp	r0, #0
 800555e:	bf14      	ite	ne
 8005560:	6804      	ldrne	r4, [r0, #0]
 8005562:	2400      	moveq	r4, #0
 8005564:	2901      	cmp	r1, #1
 8005566:	bfc6      	itte	gt
 8005568:	6850      	ldrgt	r0, [r2, #4]
 800556a:	3010      	addgt	r0, #16
 800556c:	2004      	movle	r0, #4
 800556e:	6800      	ldr	r0, [r0, #0]
 8005570:	68e3      	ldr	r3, [r4, #12]
 8005572:	68dd      	ldr	r5, [r3, #12]
 8005574:	2800      	cmp	r0, #0
 8005576:	bf14      	ite	ne
 8005578:	6806      	ldrne	r6, [r0, #0]
 800557a:	2600      	moveq	r6, #0
 800557c:	68f2      	ldr	r2, [r6, #12]
 800557e:	68d0      	ldr	r0, [r2, #12]
 8005580:	950d      	str	r5, [sp, #52]	; 0x34
 8005582:	6892      	ldr	r2, [r2, #8]
 8005584:	920c      	str	r2, [sp, #48]	; 0x30
 8005586:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800558a:	6859      	ldr	r1, [r3, #4]
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	69fd      	ldr	r5, [r7, #28]
 8005590:	9505      	str	r5, [sp, #20]
 8005592:	f8d7 8020 	ldr.w	r8, [r7, #32]
 8005596:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8005598:	9516      	str	r5, [sp, #88]	; 0x58
 800559a:	69a4      	ldr	r4, [r4, #24]
 800559c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800559e:	68a5      	ldr	r5, [r4, #8]
 80055a0:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80055a4:	69b4      	ldr	r4, [r6, #24]
 80055a6:	6812      	ldr	r2, [r2, #0]
 80055a8:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80055ac:	4252      	negs	r2, r2
 80055ae:	2800      	cmp	r0, #0
 80055b0:	9201      	str	r2, [sp, #4]
 80055b2:	f000 811c 	beq.w	80057ee <forward_ap+0x2aa>
 80055b6:	9c05      	ldr	r4, [sp, #20]
 80055b8:	f1c9 0900 	rsb	r9, r9, #0
 80055bc:	435c      	muls	r4, r3
 80055be:	fb01 f20c 	mul.w	r2, r1, ip
 80055c2:	9004      	str	r0, [sp, #16]
 80055c4:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
 80055c8:	9414      	str	r4, [sp, #80]	; 0x50
 80055ca:	9213      	str	r2, [sp, #76]	; 0x4c
 80055cc:	9a01      	ldr	r2, [sp, #4]
 80055ce:	9801      	ldr	r0, [sp, #4]
 80055d0:	9c01      	ldr	r4, [sp, #4]
 80055d2:	4252      	negs	r2, r2
 80055d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80055d6:	bfcc      	ite	gt
 80055d8:	2600      	movgt	r6, #0
 80055da:	9e01      	ldrle	r6, [sp, #4]
 80055dc:	1a10      	subs	r0, r2, r0
 80055de:	9a05      	ldr	r2, [sp, #20]
 80055e0:	4290      	cmp	r0, r2
 80055e2:	bf88      	it	hi
 80055e4:	4610      	movhi	r0, r2
 80055e6:	1904      	adds	r4, r0, r4
 80055e8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80055ea:	9000      	str	r0, [sp, #0]
 80055ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80055ee:	2800      	cmp	r0, #0
 80055f0:	f000 80f4 	beq.w	80057dc <forward_ap+0x298>
 80055f4:	fb0c f006 	mul.w	r0, ip, r6
 80055f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055fa:	9012      	str	r0, [sp, #72]	; 0x48
 80055fc:	9202      	str	r2, [sp, #8]
 80055fe:	1b30      	subs	r0, r6, r4
 8005600:	9011      	str	r0, [sp, #68]	; 0x44
 8005602:	970e      	str	r7, [sp, #56]	; 0x38
 8005604:	f8cd c01c 	str.w	ip, [sp, #28]
 8005608:	9306      	str	r3, [sp, #24]
 800560a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800560e:	950a      	str	r5, [sp, #40]	; 0x28
 8005610:	9609      	str	r6, [sp, #36]	; 0x24
 8005612:	9408      	str	r4, [sp, #32]
 8005614:	9800      	ldr	r0, [sp, #0]
 8005616:	9a07      	ldr	r2, [sp, #28]
 8005618:	f8dd a000 	ldr.w	sl, [sp]
 800561c:	4240      	negs	r0, r0
 800561e:	9800      	ldr	r0, [sp, #0]
 8005620:	bfcc      	ite	gt
 8005622:	f04f 0900 	movgt.w	r9, #0
 8005626:	f8dd 9000 	ldrle.w	r9, [sp]
 800562a:	1a10      	subs	r0, r2, r0
 800562c:	9a06      	ldr	r2, [sp, #24]
 800562e:	4290      	cmp	r0, r2
 8005630:	bf88      	it	hi
 8005632:	4610      	movhi	r0, r2
 8005634:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005636:	9203      	str	r2, [sp, #12]
 8005638:	4482      	add	sl, r0
 800563a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800563c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800563e:	eba9 030a 	sub.w	r3, r9, sl
 8005642:	4343      	muls	r3, r0
 8005644:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005646:	444a      	add	r2, r9
 8005648:	434a      	muls	r2, r1
 800564a:	eb00 0582 	add.w	r5, r0, r2, lsl #2
 800564e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005650:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 8005654:	9a08      	ldr	r2, [sp, #32]
 8005656:	ebaa 0409 	sub.w	r4, sl, r9
 800565a:	434c      	muls	r4, r1
 800565c:	2800      	cmp	r0, #0
 800565e:	bf14      	ite	ne
 8005660:	9e14      	ldrne	r6, [sp, #80]	; 0x50
 8005662:	461e      	moveq	r6, r3
 8005664:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005666:	2701      	movs	r7, #1
 8005668:	4290      	cmp	r0, r2
 800566a:	f04f 0800 	mov.w	r8, #0
 800566e:	f280 80a4 	bge.w	80057ba <forward_ap+0x276>
 8005672:	1a12      	subs	r2, r2, r0
 8005674:	ebaa 0009 	sub.w	r0, sl, r9
 8005678:	900f      	str	r0, [sp, #60]	; 0x3c
 800567a:	9310      	str	r3, [sp, #64]	; 0x40
 800567c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800567e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005680:	4480      	add	r8, r0
 8005682:	4543      	cmp	r3, r8
 8005684:	46a9      	mov	r9, r5
 8005686:	bf0c      	ite	eq
 8005688:	4633      	moveq	r3, r6
 800568a:	2300      	movne	r3, #0
 800568c:	eb09 0c84 	add.w	ip, r9, r4, lsl #2
 8005690:	45e1      	cmp	r9, ip
 8005692:	d254      	bcs.n	800573e <forward_ap+0x1fa>
 8005694:	2900      	cmp	r1, #0
 8005696:	d04d      	beq.n	8005734 <forward_ap+0x1f0>
 8005698:	f011 0003 	ands.w	r0, r1, #3
 800569c:	46ca      	mov	sl, r9
 800569e:	46f3      	mov	fp, lr
 80056a0:	f000 8010 	beq.w	80056c4 <forward_ap+0x180>
 80056a4:	ed9a 0a00 	vldr	s0, [sl]
 80056a8:	2f01      	cmp	r7, #1
 80056aa:	bf1c      	itt	ne
 80056ac:	eddb 0a00 	vldrne	s1, [fp]
 80056b0:	ee30 0a80 	vaddne.f32	s0, s1, s0
 80056b4:	ed8b 0a00 	vstr	s0, [fp]
 80056b8:	1e40      	subs	r0, r0, #1
 80056ba:	f10b 0b04 	add.w	fp, fp, #4
 80056be:	f10a 0a04 	add.w	sl, sl, #4
 80056c2:	d1ef      	bne.n	80056a4 <forward_ap+0x160>
 80056c4:	0888      	lsrs	r0, r1, #2
 80056c6:	d035      	beq.n	8005734 <forward_ap+0x1f0>
 80056c8:	2f01      	cmp	r7, #1
 80056ca:	edda 1a00 	vldr	s3, [sl]
 80056ce:	d10d      	bne.n	80056ec <forward_ap+0x1a8>
 80056d0:	edcb 1a00 	vstr	s3, [fp]
 80056d4:	ed9a 0a01 	vldr	s0, [sl, #4]
 80056d8:	ed8b 0a01 	vstr	s0, [fp, #4]
 80056dc:	edda 1a02 	vldr	s3, [sl, #8]
 80056e0:	edcb 1a02 	vstr	s3, [fp, #8]
 80056e4:	edda 1a03 	vldr	s3, [sl, #12]
 80056e8:	e01c      	b.n	8005724 <forward_ap+0x1e0>
 80056ea:	bf00      	nop
 80056ec:	eddb 0a00 	vldr	s1, [fp]
 80056f0:	ee30 0aa1 	vadd.f32	s0, s1, s3
 80056f4:	ed8b 0a00 	vstr	s0, [fp]
 80056f8:	ed9b 1a01 	vldr	s2, [fp, #4]
 80056fc:	ed9a 0a01 	vldr	s0, [sl, #4]
 8005700:	eddb 1a02 	vldr	s3, [fp, #8]
 8005704:	ee31 0a00 	vadd.f32	s0, s2, s0
 8005708:	ed8b 0a01 	vstr	s0, [fp, #4]
 800570c:	edda 0a02 	vldr	s1, [sl, #8]
 8005710:	ee31 0aa0 	vadd.f32	s0, s3, s1
 8005714:	ed8b 0a02 	vstr	s0, [fp, #8]
 8005718:	ed9b 0a03 	vldr	s0, [fp, #12]
 800571c:	ed9a 1a03 	vldr	s2, [sl, #12]
 8005720:	ee70 1a01 	vadd.f32	s3, s0, s2
 8005724:	edcb 1a03 	vstr	s3, [fp, #12]
 8005728:	1e40      	subs	r0, r0, #1
 800572a:	f10b 0b10 	add.w	fp, fp, #16
 800572e:	f10a 0a10 	add.w	sl, sl, #16
 8005732:	d1c9      	bne.n	80056c8 <forward_ap+0x184>
 8005734:	2700      	movs	r7, #0
 8005736:	eb09 0981 	add.w	r9, r9, r1, lsl #2
 800573a:	45e1      	cmp	r9, ip
 800573c:	d3aa      	bcc.n	8005694 <forward_ap+0x150>
 800573e:	b3ab      	cbz	r3, 80057ac <forward_ap+0x268>
 8005740:	ee00 3a10 	vmov	s0, r3
 8005744:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8005748:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800574c:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8005750:	b361      	cbz	r1, 80057ac <forward_ap+0x268>
 8005752:	f011 0003 	ands.w	r0, r1, #3
 8005756:	4673      	mov	r3, lr
 8005758:	f000 800a 	beq.w	8005770 <forward_ap+0x22c>
 800575c:	edd3 0a00 	vldr	s1, [r3]
 8005760:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005764:	edc3 0a00 	vstr	s1, [r3]
 8005768:	1e40      	subs	r0, r0, #1
 800576a:	f103 0304 	add.w	r3, r3, #4
 800576e:	d1f5      	bne.n	800575c <forward_ap+0x218>
 8005770:	0888      	lsrs	r0, r1, #2
 8005772:	d01b      	beq.n	80057ac <forward_ap+0x268>
 8005774:	edd3 0a00 	vldr	s1, [r3]
 8005778:	ee60 0a80 	vmul.f32	s1, s1, s0
 800577c:	edc3 0a00 	vstr	s1, [r3]
 8005780:	1e40      	subs	r0, r0, #1
 8005782:	ed93 1a01 	vldr	s2, [r3, #4]
 8005786:	edd3 0a02 	vldr	s1, [r3, #8]
 800578a:	ee21 1a00 	vmul.f32	s2, s2, s0
 800578e:	ed83 1a01 	vstr	s2, [r3, #4]
 8005792:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005796:	ed93 1a03 	vldr	s2, [r3, #12]
 800579a:	edc3 0a02 	vstr	s1, [r3, #8]
 800579e:	ee21 1a00 	vmul.f32	s2, s2, s0
 80057a2:	ed83 1a03 	vstr	s2, [r3, #12]
 80057a6:	f103 0310 	add.w	r3, r3, #16
 80057aa:	d1e3      	bne.n	8005774 <forward_ap+0x230>
 80057ac:	9803      	ldr	r0, [sp, #12]
 80057ae:	2700      	movs	r7, #0
 80057b0:	1e52      	subs	r2, r2, #1
 80057b2:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 80057b6:	f47f af61 	bne.w	800567c <forward_ap+0x138>
 80057ba:	9800      	ldr	r0, [sp, #0]
 80057bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80057be:	1810      	adds	r0, r2, r0
 80057c0:	9000      	str	r0, [sp, #0]
 80057c2:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 80057c6:	9802      	ldr	r0, [sp, #8]
 80057c8:	1e40      	subs	r0, r0, #1
 80057ca:	9002      	str	r0, [sp, #8]
 80057cc:	f47f af22 	bne.w	8005614 <forward_ap+0xd0>
 80057d0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80057d2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80057d6:	9b06      	ldr	r3, [sp, #24]
 80057d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80057da:	4690      	mov	r8, r2
 80057dc:	9c01      	ldr	r4, [sp, #4]
 80057de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80057e0:	1914      	adds	r4, r2, r4
 80057e2:	9401      	str	r4, [sp, #4]
 80057e4:	9c04      	ldr	r4, [sp, #16]
 80057e6:	1e64      	subs	r4, r4, #1
 80057e8:	9404      	str	r4, [sp, #16]
 80057ea:	f47f aeef 	bne.w	80055cc <forward_ap+0x88>
 80057ee:	b017      	add	sp, #92	; 0x5c
 80057f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080057f4 <ai_array_fmt_name>:
 80057f4:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80057f8:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 80057fc:	d062      	beq.n	80058c4 <ai_array_fmt_name+0xd0>
 80057fe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005802:	1a89      	subs	r1, r1, r2
 8005804:	f000 8094 	beq.w	8005930 <ai_array_fmt_name+0x13c>
 8005808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800580c:	1a89      	subs	r1, r1, r2
 800580e:	d071      	beq.n	80058f4 <ai_array_fmt_name+0x100>
 8005810:	1a89      	subs	r1, r1, r2
 8005812:	d063      	beq.n	80058dc <ai_array_fmt_name+0xe8>
 8005814:	1fc9      	subs	r1, r1, #7
 8005816:	f000 808e 	beq.w	8005936 <ai_array_fmt_name+0x142>
 800581a:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800581e:	1a89      	subs	r1, r1, r2
 8005820:	d05f      	beq.n	80058e2 <ai_array_fmt_name+0xee>
 8005822:	390f      	subs	r1, #15
 8005824:	f000 808a 	beq.w	800593c <ai_array_fmt_name+0x148>
 8005828:	f240 72f1 	movw	r2, #2033	; 0x7f1
 800582c:	1a89      	subs	r1, r1, r2
 800582e:	d05b      	beq.n	80058e8 <ai_array_fmt_name+0xf4>
 8005830:	391f      	subs	r1, #31
 8005832:	f000 8086 	beq.w	8005942 <ai_array_fmt_name+0x14e>
 8005836:	f640 72e1 	movw	r2, #4065	; 0xfe1
 800583a:	1a89      	subs	r1, r1, r2
 800583c:	d057      	beq.n	80058ee <ai_array_fmt_name+0xfa>
 800583e:	f8df 25d4 	ldr.w	r2, [pc, #1492]	; 8005e14 <.text_15>
 8005842:	1a89      	subs	r1, r1, r2
 8005844:	f000 808f 	beq.w	8005966 <ai_array_fmt_name+0x172>
 8005848:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800584c:	1a89      	subs	r1, r1, r2
 800584e:	f000 8087 	beq.w	8005960 <ai_array_fmt_name+0x16c>
 8005852:	f8df 25c4 	ldr.w	r2, [pc, #1476]	; 8005e18 <.text_16>
 8005856:	1a89      	subs	r1, r1, r2
 8005858:	d05e      	beq.n	8005918 <ai_array_fmt_name+0x124>
 800585a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800585e:	1a89      	subs	r1, r1, r2
 8005860:	d057      	beq.n	8005912 <ai_array_fmt_name+0x11e>
 8005862:	1a89      	subs	r1, r1, r2
 8005864:	d049      	beq.n	80058fa <ai_array_fmt_name+0x106>
 8005866:	1fc9      	subs	r1, r1, #7
 8005868:	d059      	beq.n	800591e <ai_array_fmt_name+0x12a>
 800586a:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800586e:	1a89      	subs	r1, r1, r2
 8005870:	d046      	beq.n	8005900 <ai_array_fmt_name+0x10c>
 8005872:	390f      	subs	r1, #15
 8005874:	d056      	beq.n	8005924 <ai_array_fmt_name+0x130>
 8005876:	f240 72f1 	movw	r2, #2033	; 0x7f1
 800587a:	1a89      	subs	r1, r1, r2
 800587c:	d043      	beq.n	8005906 <ai_array_fmt_name+0x112>
 800587e:	391f      	subs	r1, #31
 8005880:	d053      	beq.n	800592a <ai_array_fmt_name+0x136>
 8005882:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8005886:	1a89      	subs	r1, r1, r2
 8005888:	d040      	beq.n	800590c <ai_array_fmt_name+0x118>
 800588a:	f8df 2588 	ldr.w	r2, [pc, #1416]	; 8005e14 <.text_15>
 800588e:	1a89      	subs	r1, r1, r2
 8005890:	d063      	beq.n	800595a <ai_array_fmt_name+0x166>
 8005892:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005896:	1a89      	subs	r1, r1, r2
 8005898:	d05c      	beq.n	8005954 <ai_array_fmt_name+0x160>
 800589a:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 8005e1c <.text_17>
 800589e:	1a89      	subs	r1, r1, r2
 80058a0:	d019      	beq.n	80058d6 <ai_array_fmt_name+0xe2>
 80058a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058a6:	1a89      	subs	r1, r1, r2
 80058a8:	d00f      	beq.n	80058ca <ai_array_fmt_name+0xd6>
 80058aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80058ae:	1a89      	subs	r1, r1, r2
 80058b0:	d00e      	beq.n	80058d0 <ai_array_fmt_name+0xdc>
 80058b2:	f8df 256c 	ldr.w	r2, [pc, #1388]	; 8005e20 <.text_18>
 80058b6:	1a89      	subs	r1, r1, r2
 80058b8:	d049      	beq.n	800594e <ai_array_fmt_name+0x15a>
 80058ba:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80058be:	1a89      	subs	r1, r1, r2
 80058c0:	d042      	beq.n	8005948 <ai_array_fmt_name+0x154>
 80058c2:	e053      	b.n	800596c <ai_array_fmt_name+0x178>
 80058c4:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 80058c8:	4770      	bx	lr
 80058ca:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 80058ce:	4770      	bx	lr
 80058d0:	f20f 6080 	addw	r0, pc, #1664	; 0x680
 80058d4:	4770      	bx	lr
 80058d6:	f20f 6088 	addw	r0, pc, #1672	; 0x688
 80058da:	4770      	bx	lr
 80058dc:	f20f 608c 	addw	r0, pc, #1676	; 0x68c
 80058e0:	4770      	bx	lr
 80058e2:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 80058e6:	4770      	bx	lr
 80058e8:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 80058ec:	4770      	bx	lr
 80058ee:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 80058f2:	4770      	bx	lr
 80058f4:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 80058f8:	4770      	bx	lr
 80058fa:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 80058fe:	4770      	bx	lr
 8005900:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 8005904:	4770      	bx	lr
 8005906:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 800590a:	4770      	bx	lr
 800590c:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 8005910:	4770      	bx	lr
 8005912:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 8005916:	4770      	bx	lr
 8005918:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 800591c:	4770      	bx	lr
 800591e:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 8005922:	4770      	bx	lr
 8005924:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 8005928:	4770      	bx	lr
 800592a:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 800592e:	4770      	bx	lr
 8005930:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 8005934:	4770      	bx	lr
 8005936:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 800593a:	4770      	bx	lr
 800593c:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 8005940:	4770      	bx	lr
 8005942:	f20f 60b4 	addw	r0, pc, #1716	; 0x6b4
 8005946:	4770      	bx	lr
 8005948:	f20f 60b8 	addw	r0, pc, #1720	; 0x6b8
 800594c:	4770      	bx	lr
 800594e:	f20f 60c4 	addw	r0, pc, #1732	; 0x6c4
 8005952:	4770      	bx	lr
 8005954:	f20f 60cc 	addw	r0, pc, #1740	; 0x6cc
 8005958:	4770      	bx	lr
 800595a:	f20f 60d8 	addw	r0, pc, #1752	; 0x6d8
 800595e:	4770      	bx	lr
 8005960:	f20f 60e0 	addw	r0, pc, #1760	; 0x6e0
 8005964:	4770      	bx	lr
 8005966:	f20f 60ec 	addw	r0, pc, #1772	; 0x6ec
 800596a:	4770      	bx	lr
 800596c:	f36f 000d 	bfc	r0, #0, #14
 8005970:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8005974:	2840      	cmp	r0, #64	; 0x40
 8005976:	d009      	beq.n	800598c <ai_array_fmt_name+0x198>
 8005978:	f8df 14a8 	ldr.w	r1, [pc, #1192]	; 8005e24 <.text_19>
 800597c:	4288      	cmp	r0, r1
 800597e:	d00b      	beq.n	8005998 <ai_array_fmt_name+0x1a4>
 8005980:	f8df 14a4 	ldr.w	r1, [pc, #1188]	; 8005e28 <.text_20>
 8005984:	4288      	cmp	r0, r1
 8005986:	d004      	beq.n	8005992 <ai_array_fmt_name+0x19e>
 8005988:	a07a      	add	r0, pc, #488	; (adr r0, 8005b74 <.text_8>)
 800598a:	4770      	bx	lr
 800598c:	f20f 60d4 	addw	r0, pc, #1748	; 0x6d4
 8005990:	4770      	bx	lr
 8005992:	f20f 60e8 	addw	r0, pc, #1768	; 0x6e8
 8005996:	4770      	bx	lr
 8005998:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 800599c:	4770      	bx	lr

0800599e <ai_array_fmt_exported>:
 800599e:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80059a2:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 80059a6:	d068      	beq.n	8005a7a <ai_array_fmt_exported+0xdc>
 80059a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80059ac:	1a89      	subs	r1, r1, r2
 80059ae:	d064      	beq.n	8005a7a <ai_array_fmt_exported+0xdc>
 80059b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059b4:	1a89      	subs	r1, r1, r2
 80059b6:	d062      	beq.n	8005a7e <ai_array_fmt_exported+0xe0>
 80059b8:	1a89      	subs	r1, r1, r2
 80059ba:	d05e      	beq.n	8005a7a <ai_array_fmt_exported+0xdc>
 80059bc:	1fc9      	subs	r1, r1, #7
 80059be:	d05c      	beq.n	8005a7a <ai_array_fmt_exported+0xdc>
 80059c0:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80059c4:	1a89      	subs	r1, r1, r2
 80059c6:	d058      	beq.n	8005a7a <ai_array_fmt_exported+0xdc>
 80059c8:	390f      	subs	r1, #15
 80059ca:	d056      	beq.n	8005a7a <ai_array_fmt_exported+0xdc>
 80059cc:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80059d0:	1a89      	subs	r1, r1, r2
 80059d2:	d054      	beq.n	8005a7e <ai_array_fmt_exported+0xe0>
 80059d4:	391f      	subs	r1, #31
 80059d6:	d052      	beq.n	8005a7e <ai_array_fmt_exported+0xe0>
 80059d8:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80059dc:	1a89      	subs	r1, r1, r2
 80059de:	d04e      	beq.n	8005a7e <ai_array_fmt_exported+0xe0>
 80059e0:	f8df 2430 	ldr.w	r2, [pc, #1072]	; 8005e14 <.text_15>
 80059e4:	1a89      	subs	r1, r1, r2
 80059e6:	d04a      	beq.n	8005a7e <ai_array_fmt_exported+0xe0>
 80059e8:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80059ec:	1a89      	subs	r1, r1, r2
 80059ee:	d046      	beq.n	8005a7e <ai_array_fmt_exported+0xe0>
 80059f0:	f8df 2424 	ldr.w	r2, [pc, #1060]	; 8005e18 <.text_16>
 80059f4:	1a89      	subs	r1, r1, r2
 80059f6:	d040      	beq.n	8005a7a <ai_array_fmt_exported+0xdc>
 80059f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059fc:	1a89      	subs	r1, r1, r2
 80059fe:	d03e      	beq.n	8005a7e <ai_array_fmt_exported+0xe0>
 8005a00:	1a89      	subs	r1, r1, r2
 8005a02:	d03a      	beq.n	8005a7a <ai_array_fmt_exported+0xdc>
 8005a04:	1fc9      	subs	r1, r1, #7
 8005a06:	d038      	beq.n	8005a7a <ai_array_fmt_exported+0xdc>
 8005a08:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005a0c:	1a89      	subs	r1, r1, r2
 8005a0e:	d034      	beq.n	8005a7a <ai_array_fmt_exported+0xdc>
 8005a10:	390f      	subs	r1, #15
 8005a12:	d032      	beq.n	8005a7a <ai_array_fmt_exported+0xdc>
 8005a14:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8005a18:	1a89      	subs	r1, r1, r2
 8005a1a:	d030      	beq.n	8005a7e <ai_array_fmt_exported+0xe0>
 8005a1c:	391f      	subs	r1, #31
 8005a1e:	d02e      	beq.n	8005a7e <ai_array_fmt_exported+0xe0>
 8005a20:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8005a24:	1a89      	subs	r1, r1, r2
 8005a26:	d02a      	beq.n	8005a7e <ai_array_fmt_exported+0xe0>
 8005a28:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 8005e14 <.text_15>
 8005a2c:	1a89      	subs	r1, r1, r2
 8005a2e:	d026      	beq.n	8005a7e <ai_array_fmt_exported+0xe0>
 8005a30:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005a34:	1a89      	subs	r1, r1, r2
 8005a36:	d022      	beq.n	8005a7e <ai_array_fmt_exported+0xe0>
 8005a38:	f8df 23e0 	ldr.w	r2, [pc, #992]	; 8005e1c <.text_17>
 8005a3c:	1a89      	subs	r1, r1, r2
 8005a3e:	d01e      	beq.n	8005a7e <ai_array_fmt_exported+0xe0>
 8005a40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a44:	1a89      	subs	r1, r1, r2
 8005a46:	d018      	beq.n	8005a7a <ai_array_fmt_exported+0xdc>
 8005a48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a4c:	1a89      	subs	r1, r1, r2
 8005a4e:	d016      	beq.n	8005a7e <ai_array_fmt_exported+0xe0>
 8005a50:	f8df 23cc 	ldr.w	r2, [pc, #972]	; 8005e20 <.text_18>
 8005a54:	1a89      	subs	r1, r1, r2
 8005a56:	d012      	beq.n	8005a7e <ai_array_fmt_exported+0xe0>
 8005a58:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005a5c:	1a89      	subs	r1, r1, r2
 8005a5e:	d00e      	beq.n	8005a7e <ai_array_fmt_exported+0xe0>
 8005a60:	f36f 000d 	bfc	r0, #0, #14
 8005a64:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8005a68:	2840      	cmp	r0, #64	; 0x40
 8005a6a:	bf1f      	itttt	ne
 8005a6c:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8005e24 <.text_19>
 8005a70:	4298      	cmpne	r0, r3
 8005a72:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8005e28 <.text_20>
 8005a76:	4298      	cmpne	r0, r3
 8005a78:	d101      	bne.n	8005a7e <ai_array_fmt_exported+0xe0>
 8005a7a:	2001      	movs	r0, #1
 8005a7c:	4770      	bx	lr
 8005a7e:	2000      	movs	r0, #0
 8005a80:	4770      	bx	lr

08005a82 <ai_array_fmt_valid>:
 8005a82:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8005a86:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8005a8a:	d069      	beq.n	8005b60 <ai_array_fmt_valid+0xde>
 8005a8c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005a90:	1a89      	subs	r1, r1, r2
 8005a92:	d065      	beq.n	8005b60 <ai_array_fmt_valid+0xde>
 8005a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a98:	1a89      	subs	r1, r1, r2
 8005a9a:	d061      	beq.n	8005b60 <ai_array_fmt_valid+0xde>
 8005a9c:	1a89      	subs	r1, r1, r2
 8005a9e:	d05f      	beq.n	8005b60 <ai_array_fmt_valid+0xde>
 8005aa0:	1fc9      	subs	r1, r1, #7
 8005aa2:	d05d      	beq.n	8005b60 <ai_array_fmt_valid+0xde>
 8005aa4:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005aa8:	1a89      	subs	r1, r1, r2
 8005aaa:	d059      	beq.n	8005b60 <ai_array_fmt_valid+0xde>
 8005aac:	390f      	subs	r1, #15
 8005aae:	d057      	beq.n	8005b60 <ai_array_fmt_valid+0xde>
 8005ab0:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8005ab4:	1a89      	subs	r1, r1, r2
 8005ab6:	d053      	beq.n	8005b60 <ai_array_fmt_valid+0xde>
 8005ab8:	391f      	subs	r1, #31
 8005aba:	d051      	beq.n	8005b60 <ai_array_fmt_valid+0xde>
 8005abc:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8005ac0:	1a89      	subs	r1, r1, r2
 8005ac2:	d04d      	beq.n	8005b60 <ai_array_fmt_valid+0xde>
 8005ac4:	f8df 234c 	ldr.w	r2, [pc, #844]	; 8005e14 <.text_15>
 8005ac8:	1a89      	subs	r1, r1, r2
 8005aca:	d049      	beq.n	8005b60 <ai_array_fmt_valid+0xde>
 8005acc:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005ad0:	1a89      	subs	r1, r1, r2
 8005ad2:	d045      	beq.n	8005b60 <ai_array_fmt_valid+0xde>
 8005ad4:	f8df 2340 	ldr.w	r2, [pc, #832]	; 8005e18 <.text_16>
 8005ad8:	1a89      	subs	r1, r1, r2
 8005ada:	d041      	beq.n	8005b60 <ai_array_fmt_valid+0xde>
 8005adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ae0:	1a89      	subs	r1, r1, r2
 8005ae2:	d03d      	beq.n	8005b60 <ai_array_fmt_valid+0xde>
 8005ae4:	1a89      	subs	r1, r1, r2
 8005ae6:	d03b      	beq.n	8005b60 <ai_array_fmt_valid+0xde>
 8005ae8:	1fc9      	subs	r1, r1, #7
 8005aea:	d039      	beq.n	8005b60 <ai_array_fmt_valid+0xde>
 8005aec:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005af0:	1a89      	subs	r1, r1, r2
 8005af2:	d035      	beq.n	8005b60 <ai_array_fmt_valid+0xde>
 8005af4:	390f      	subs	r1, #15
 8005af6:	d033      	beq.n	8005b60 <ai_array_fmt_valid+0xde>
 8005af8:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8005afc:	1a89      	subs	r1, r1, r2
 8005afe:	d02f      	beq.n	8005b60 <ai_array_fmt_valid+0xde>
 8005b00:	391f      	subs	r1, #31
 8005b02:	d02d      	beq.n	8005b60 <ai_array_fmt_valid+0xde>
 8005b04:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8005b08:	1a89      	subs	r1, r1, r2
 8005b0a:	d029      	beq.n	8005b60 <ai_array_fmt_valid+0xde>
 8005b0c:	f8df 2304 	ldr.w	r2, [pc, #772]	; 8005e14 <.text_15>
 8005b10:	1a89      	subs	r1, r1, r2
 8005b12:	d025      	beq.n	8005b60 <ai_array_fmt_valid+0xde>
 8005b14:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005b18:	1a89      	subs	r1, r1, r2
 8005b1a:	d021      	beq.n	8005b60 <ai_array_fmt_valid+0xde>
 8005b1c:	f8df 22fc 	ldr.w	r2, [pc, #764]	; 8005e1c <.text_17>
 8005b20:	1a89      	subs	r1, r1, r2
 8005b22:	d01d      	beq.n	8005b60 <ai_array_fmt_valid+0xde>
 8005b24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b28:	1a89      	subs	r1, r1, r2
 8005b2a:	d019      	beq.n	8005b60 <ai_array_fmt_valid+0xde>
 8005b2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b30:	1a89      	subs	r1, r1, r2
 8005b32:	d015      	beq.n	8005b60 <ai_array_fmt_valid+0xde>
 8005b34:	f8df 22e8 	ldr.w	r2, [pc, #744]	; 8005e20 <.text_18>
 8005b38:	1a89      	subs	r1, r1, r2
 8005b3a:	d011      	beq.n	8005b60 <ai_array_fmt_valid+0xde>
 8005b3c:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005b40:	1a89      	subs	r1, r1, r2
 8005b42:	bf1e      	ittt	ne
 8005b44:	f36f 000d 	bfcne	r0, #0, #14
 8005b48:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8005b4c:	2840      	cmpne	r0, #64	; 0x40
 8005b4e:	d007      	beq.n	8005b60 <ai_array_fmt_valid+0xde>
 8005b50:	f8df 32d0 	ldr.w	r3, [pc, #720]	; 8005e24 <.text_19>
 8005b54:	4298      	cmp	r0, r3
 8005b56:	bf1c      	itt	ne
 8005b58:	f8df 32cc 	ldrne.w	r3, [pc, #716]	; 8005e28 <.text_20>
 8005b5c:	4298      	cmpne	r0, r3
 8005b5e:	d101      	bne.n	8005b64 <ai_array_fmt_valid+0xe2>
 8005b60:	2001      	movs	r0, #1
 8005b62:	4770      	bx	lr
 8005b64:	2000      	movs	r0, #0
 8005b66:	4770      	bx	lr

08005b68 <ai_array_fmt_get_formats>:
 8005b68:	f8df 12c0 	ldr.w	r1, [pc, #704]	; 8005e2c <.text_21>
 8005b6c:	6001      	str	r1, [r0, #0]
 8005b6e:	201c      	movs	r0, #28
 8005b70:	4770      	bx	lr
	...

08005b74 <.text_8>:
 8005b74:	00000000 	.word	0x00000000

08005b78 <ai_buffer_fmt_name>:
 8005b78:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8005b7c:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8005b80:	d022      	beq.n	8005bc8 <ai_buffer_fmt_name+0x50>
 8005b82:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005b86:	1a89      	subs	r1, r1, r2
 8005b88:	d039      	beq.n	8005bfe <ai_buffer_fmt_name+0x86>
 8005b8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b8e:	1a89      	subs	r1, r1, r2
 8005b90:	d020      	beq.n	8005bd4 <ai_buffer_fmt_name+0x5c>
 8005b92:	1fc9      	subs	r1, r1, #7
 8005b94:	d036      	beq.n	8005c04 <ai_buffer_fmt_name+0x8c>
 8005b96:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005b9a:	1a89      	subs	r1, r1, r2
 8005b9c:	d01d      	beq.n	8005bda <ai_buffer_fmt_name+0x62>
 8005b9e:	390f      	subs	r1, #15
 8005ba0:	d033      	beq.n	8005c0a <ai_buffer_fmt_name+0x92>
 8005ba2:	4aa3      	ldr	r2, [pc, #652]	; (8005e30 <.text_22>)
 8005ba4:	1a89      	subs	r1, r1, r2
 8005ba6:	d021      	beq.n	8005bec <ai_buffer_fmt_name+0x74>
 8005ba8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005bac:	1a89      	subs	r1, r1, r2
 8005bae:	d017      	beq.n	8005be0 <ai_buffer_fmt_name+0x68>
 8005bb0:	1fc9      	subs	r1, r1, #7
 8005bb2:	d01e      	beq.n	8005bf2 <ai_buffer_fmt_name+0x7a>
 8005bb4:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005bb8:	1a89      	subs	r1, r1, r2
 8005bba:	d014      	beq.n	8005be6 <ai_buffer_fmt_name+0x6e>
 8005bbc:	390f      	subs	r1, #15
 8005bbe:	d01b      	beq.n	8005bf8 <ai_buffer_fmt_name+0x80>
 8005bc0:	4a9c      	ldr	r2, [pc, #624]	; (8005e34 <.text_23>)
 8005bc2:	1a89      	subs	r1, r1, r2
 8005bc4:	d003      	beq.n	8005bce <ai_buffer_fmt_name+0x56>
 8005bc6:	e023      	b.n	8005c10 <ai_buffer_fmt_name+0x98>
 8005bc8:	f20f 3070 	addw	r0, pc, #880	; 0x370
 8005bcc:	4770      	bx	lr
 8005bce:	f20f 3078 	addw	r0, pc, #888	; 0x378
 8005bd2:	4770      	bx	lr
 8005bd4:	f20f 3094 	addw	r0, pc, #916	; 0x394
 8005bd8:	4770      	bx	lr
 8005bda:	f20f 3098 	addw	r0, pc, #920	; 0x398
 8005bde:	4770      	bx	lr
 8005be0:	f20f 30b0 	addw	r0, pc, #944	; 0x3b0
 8005be4:	4770      	bx	lr
 8005be6:	f20f 30b4 	addw	r0, pc, #948	; 0x3b4
 8005bea:	4770      	bx	lr
 8005bec:	f20f 30cc 	addw	r0, pc, #972	; 0x3cc
 8005bf0:	4770      	bx	lr
 8005bf2:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8005bf6:	4770      	bx	lr
 8005bf8:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8005bfc:	4770      	bx	lr
 8005bfe:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 8005c02:	4770      	bx	lr
 8005c04:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 8005c08:	4770      	bx	lr
 8005c0a:	f20f 30e0 	addw	r0, pc, #992	; 0x3e0
 8005c0e:	4770      	bx	lr
 8005c10:	0b80      	lsrs	r0, r0, #14
 8005c12:	0380      	lsls	r0, r0, #14
 8005c14:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8005c18:	2840      	cmp	r0, #64	; 0x40
 8005c1a:	d007      	beq.n	8005c2c <ai_buffer_fmt_name+0xb4>
 8005c1c:	4981      	ldr	r1, [pc, #516]	; (8005e24 <.text_19>)
 8005c1e:	4288      	cmp	r0, r1
 8005c20:	d00a      	beq.n	8005c38 <ai_buffer_fmt_name+0xc0>
 8005c22:	4981      	ldr	r1, [pc, #516]	; (8005e28 <.text_20>)
 8005c24:	4288      	cmp	r0, r1
 8005c26:	d004      	beq.n	8005c32 <ai_buffer_fmt_name+0xba>
 8005c28:	a079      	add	r0, pc, #484	; (adr r0, 8005e10 <.text_14>)
 8005c2a:	4770      	bx	lr
 8005c2c:	f20f 4074 	addw	r0, pc, #1140	; 0x474
 8005c30:	4770      	bx	lr
 8005c32:	f20f 4088 	addw	r0, pc, #1160	; 0x488
 8005c36:	4770      	bx	lr
 8005c38:	f20f 4094 	addw	r0, pc, #1172	; 0x494
 8005c3c:	4770      	bx	lr

08005c3e <ai_buffer_fmt_valid>:
 8005c3e:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8005c42:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8005c46:	d02d      	beq.n	8005ca4 <ai_buffer_fmt_valid+0x66>
 8005c48:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005c4c:	1a89      	subs	r1, r1, r2
 8005c4e:	d029      	beq.n	8005ca4 <ai_buffer_fmt_valid+0x66>
 8005c50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c54:	1a89      	subs	r1, r1, r2
 8005c56:	d025      	beq.n	8005ca4 <ai_buffer_fmt_valid+0x66>
 8005c58:	1fc9      	subs	r1, r1, #7
 8005c5a:	d023      	beq.n	8005ca4 <ai_buffer_fmt_valid+0x66>
 8005c5c:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005c60:	1a89      	subs	r1, r1, r2
 8005c62:	d01f      	beq.n	8005ca4 <ai_buffer_fmt_valid+0x66>
 8005c64:	390f      	subs	r1, #15
 8005c66:	d01d      	beq.n	8005ca4 <ai_buffer_fmt_valid+0x66>
 8005c68:	4a71      	ldr	r2, [pc, #452]	; (8005e30 <.text_22>)
 8005c6a:	1a89      	subs	r1, r1, r2
 8005c6c:	d01a      	beq.n	8005ca4 <ai_buffer_fmt_valid+0x66>
 8005c6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c72:	1a89      	subs	r1, r1, r2
 8005c74:	d016      	beq.n	8005ca4 <ai_buffer_fmt_valid+0x66>
 8005c76:	1fc9      	subs	r1, r1, #7
 8005c78:	d014      	beq.n	8005ca4 <ai_buffer_fmt_valid+0x66>
 8005c7a:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005c7e:	1a89      	subs	r1, r1, r2
 8005c80:	d010      	beq.n	8005ca4 <ai_buffer_fmt_valid+0x66>
 8005c82:	390f      	subs	r1, #15
 8005c84:	d00e      	beq.n	8005ca4 <ai_buffer_fmt_valid+0x66>
 8005c86:	4a6b      	ldr	r2, [pc, #428]	; (8005e34 <.text_23>)
 8005c88:	1a89      	subs	r1, r1, r2
 8005c8a:	bf1f      	itttt	ne
 8005c8c:	0b80      	lsrne	r0, r0, #14
 8005c8e:	0380      	lslne	r0, r0, #14
 8005c90:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8005c94:	2840      	cmpne	r0, #64	; 0x40
 8005c96:	d005      	beq.n	8005ca4 <ai_buffer_fmt_valid+0x66>
 8005c98:	4b62      	ldr	r3, [pc, #392]	; (8005e24 <.text_19>)
 8005c9a:	4298      	cmp	r0, r3
 8005c9c:	bf1c      	itt	ne
 8005c9e:	4b62      	ldrne	r3, [pc, #392]	; (8005e28 <.text_20>)
 8005ca0:	4298      	cmpne	r0, r3
 8005ca2:	d101      	bne.n	8005ca8 <ai_buffer_fmt_valid+0x6a>
 8005ca4:	2001      	movs	r0, #1
 8005ca6:	4770      	bx	lr
 8005ca8:	2000      	movs	r0, #0
 8005caa:	4770      	bx	lr

08005cac <ai_buffer_fmt_get_formats>:
 8005cac:	4962      	ldr	r1, [pc, #392]	; (8005e38 <.text_24>)
 8005cae:	6001      	str	r1, [r0, #0]
 8005cb0:	200c      	movs	r0, #12
 8005cb2:	4770      	bx	lr

08005cb4 <ai_array_to_buffer_fmt>:
 8005cb4:	4601      	mov	r1, r0
 8005cb6:	2040      	movs	r0, #64	; 0x40
 8005cb8:	f3c1 4243 	ubfx	r2, r1, #17, #4
 8005cbc:	2a02      	cmp	r2, #2
 8005cbe:	d104      	bne.n	8005cca <ai_array_to_buffer_fmt+0x16>
 8005cc0:	485e      	ldr	r0, [pc, #376]	; (8005e3c <.text_25>)
 8005cc2:	4008      	ands	r0, r1
 8005cc4:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8005cc8:	e037      	b.n	8005d3a <ai_array_to_buffer_fmt+0x86>
 8005cca:	f021 427e 	bic.w	r2, r1, #4261412864	; 0xfe000000
 8005cce:	4b55      	ldr	r3, [pc, #340]	; (8005e24 <.text_19>)
 8005cd0:	1ad2      	subs	r2, r2, r3
 8005cd2:	d02d      	beq.n	8005d30 <ai_array_to_buffer_fmt+0x7c>
 8005cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cd8:	1ad2      	subs	r2, r2, r3
 8005cda:	d01b      	beq.n	8005d14 <ai_array_to_buffer_fmt+0x60>
 8005cdc:	1fd2      	subs	r2, r2, #7
 8005cde:	d029      	beq.n	8005d34 <ai_array_to_buffer_fmt+0x80>
 8005ce0:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8005ce4:	1ad2      	subs	r2, r2, r3
 8005ce6:	d017      	beq.n	8005d18 <ai_array_to_buffer_fmt+0x64>
 8005ce8:	3a0f      	subs	r2, #15
 8005cea:	d025      	beq.n	8005d38 <ai_array_to_buffer_fmt+0x84>
 8005cec:	4b50      	ldr	r3, [pc, #320]	; (8005e30 <.text_22>)
 8005cee:	1ad2      	subs	r2, r2, r3
 8005cf0:	d018      	beq.n	8005d24 <ai_array_to_buffer_fmt+0x70>
 8005cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cf6:	1ad2      	subs	r2, r2, r3
 8005cf8:	d010      	beq.n	8005d1c <ai_array_to_buffer_fmt+0x68>
 8005cfa:	1fd2      	subs	r2, r2, #7
 8005cfc:	d014      	beq.n	8005d28 <ai_array_to_buffer_fmt+0x74>
 8005cfe:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8005d02:	1ad2      	subs	r2, r2, r3
 8005d04:	d00c      	beq.n	8005d20 <ai_array_to_buffer_fmt+0x6c>
 8005d06:	3a0f      	subs	r2, #15
 8005d08:	d010      	beq.n	8005d2c <ai_array_to_buffer_fmt+0x78>
 8005d0a:	4b4a      	ldr	r3, [pc, #296]	; (8005e34 <.text_23>)
 8005d0c:	1ad2      	subs	r2, r2, r3
 8005d0e:	d114      	bne.n	8005d3a <ai_array_to_buffer_fmt+0x86>
 8005d10:	484b      	ldr	r0, [pc, #300]	; (8005e40 <.text_26>)
 8005d12:	e012      	b.n	8005d3a <ai_array_to_buffer_fmt+0x86>
 8005d14:	484b      	ldr	r0, [pc, #300]	; (8005e44 <.text_27>)
 8005d16:	e010      	b.n	8005d3a <ai_array_to_buffer_fmt+0x86>
 8005d18:	484b      	ldr	r0, [pc, #300]	; (8005e48 <.text_28>)
 8005d1a:	e00e      	b.n	8005d3a <ai_array_to_buffer_fmt+0x86>
 8005d1c:	484b      	ldr	r0, [pc, #300]	; (8005e4c <.text_29>)
 8005d1e:	e00c      	b.n	8005d3a <ai_array_to_buffer_fmt+0x86>
 8005d20:	484b      	ldr	r0, [pc, #300]	; (8005e50 <.text_30>)
 8005d22:	e00a      	b.n	8005d3a <ai_array_to_buffer_fmt+0x86>
 8005d24:	4840      	ldr	r0, [pc, #256]	; (8005e28 <.text_20>)
 8005d26:	e008      	b.n	8005d3a <ai_array_to_buffer_fmt+0x86>
 8005d28:	484a      	ldr	r0, [pc, #296]	; (8005e54 <.text_31>)
 8005d2a:	e006      	b.n	8005d3a <ai_array_to_buffer_fmt+0x86>
 8005d2c:	484a      	ldr	r0, [pc, #296]	; (8005e58 <.text_32>)
 8005d2e:	e004      	b.n	8005d3a <ai_array_to_buffer_fmt+0x86>
 8005d30:	4618      	mov	r0, r3
 8005d32:	e002      	b.n	8005d3a <ai_array_to_buffer_fmt+0x86>
 8005d34:	4849      	ldr	r0, [pc, #292]	; (8005e5c <.text_33>)
 8005d36:	e000      	b.n	8005d3a <ai_array_to_buffer_fmt+0x86>
 8005d38:	4849      	ldr	r0, [pc, #292]	; (8005e60 <.text_34>)
 8005d3a:	004a      	lsls	r2, r1, #1
 8005d3c:	bf4c      	ite	mi
 8005d3e:	f04f 4280 	movmi.w	r2, #1073741824	; 0x40000000
 8005d42:	2200      	movpl	r2, #0
 8005d44:	4310      	orrs	r0, r2
 8005d46:	008a      	lsls	r2, r1, #2
 8005d48:	bf4c      	ite	mi
 8005d4a:	f04f 5200 	movmi.w	r2, #536870912	; 0x20000000
 8005d4e:	2200      	movpl	r2, #0
 8005d50:	4310      	orrs	r0, r2
 8005d52:	0109      	lsls	r1, r1, #4
 8005d54:	bf4c      	ite	mi
 8005d56:	f04f 6100 	movmi.w	r1, #134217728	; 0x8000000
 8005d5a:	2100      	movpl	r1, #0
 8005d5c:	4308      	orrs	r0, r1
 8005d5e:	4770      	bx	lr

08005d60 <ai_buffer_to_array_fmt>:
 8005d60:	4602      	mov	r2, r0
 8005d62:	f022 407e 	bic.w	r0, r2, #4261412864	; 0xfe000000
 8005d66:	3840      	subs	r0, #64	; 0x40
 8005d68:	d022      	beq.n	8005db0 <ai_buffer_to_array_fmt+0x50>
 8005d6a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8005d6e:	1a40      	subs	r0, r0, r1
 8005d70:	d030      	beq.n	8005dd4 <ai_buffer_to_array_fmt+0x74>
 8005d72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d76:	1a40      	subs	r0, r0, r1
 8005d78:	d01e      	beq.n	8005db8 <ai_buffer_to_array_fmt+0x58>
 8005d7a:	1fc0      	subs	r0, r0, #7
 8005d7c:	d02c      	beq.n	8005dd8 <ai_buffer_to_array_fmt+0x78>
 8005d7e:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8005d82:	1a40      	subs	r0, r0, r1
 8005d84:	d01a      	beq.n	8005dbc <ai_buffer_to_array_fmt+0x5c>
 8005d86:	380f      	subs	r0, #15
 8005d88:	d028      	beq.n	8005ddc <ai_buffer_to_array_fmt+0x7c>
 8005d8a:	4929      	ldr	r1, [pc, #164]	; (8005e30 <.text_22>)
 8005d8c:	1a40      	subs	r0, r0, r1
 8005d8e:	d01b      	beq.n	8005dc8 <ai_buffer_to_array_fmt+0x68>
 8005d90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d94:	1a40      	subs	r0, r0, r1
 8005d96:	d013      	beq.n	8005dc0 <ai_buffer_to_array_fmt+0x60>
 8005d98:	1fc0      	subs	r0, r0, #7
 8005d9a:	d017      	beq.n	8005dcc <ai_buffer_to_array_fmt+0x6c>
 8005d9c:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8005da0:	1a40      	subs	r0, r0, r1
 8005da2:	d00f      	beq.n	8005dc4 <ai_buffer_to_array_fmt+0x64>
 8005da4:	380f      	subs	r0, #15
 8005da6:	d013      	beq.n	8005dd0 <ai_buffer_to_array_fmt+0x70>
 8005da8:	4922      	ldr	r1, [pc, #136]	; (8005e34 <.text_23>)
 8005daa:	1a40      	subs	r0, r0, r1
 8005dac:	d002      	beq.n	8005db4 <ai_buffer_to_array_fmt+0x54>
 8005dae:	e017      	b.n	8005de0 <ai_buffer_to_array_fmt+0x80>
 8005db0:	2040      	movs	r0, #64	; 0x40
 8005db2:	e01f      	b.n	8005df4 <ai_buffer_to_array_fmt+0x94>
 8005db4:	4822      	ldr	r0, [pc, #136]	; (8005e40 <.text_26>)
 8005db6:	e01d      	b.n	8005df4 <ai_buffer_to_array_fmt+0x94>
 8005db8:	4822      	ldr	r0, [pc, #136]	; (8005e44 <.text_27>)
 8005dba:	e01b      	b.n	8005df4 <ai_buffer_to_array_fmt+0x94>
 8005dbc:	4822      	ldr	r0, [pc, #136]	; (8005e48 <.text_28>)
 8005dbe:	e019      	b.n	8005df4 <ai_buffer_to_array_fmt+0x94>
 8005dc0:	4822      	ldr	r0, [pc, #136]	; (8005e4c <.text_29>)
 8005dc2:	e017      	b.n	8005df4 <ai_buffer_to_array_fmt+0x94>
 8005dc4:	4822      	ldr	r0, [pc, #136]	; (8005e50 <.text_30>)
 8005dc6:	e015      	b.n	8005df4 <ai_buffer_to_array_fmt+0x94>
 8005dc8:	4817      	ldr	r0, [pc, #92]	; (8005e28 <.text_20>)
 8005dca:	e013      	b.n	8005df4 <ai_buffer_to_array_fmt+0x94>
 8005dcc:	4821      	ldr	r0, [pc, #132]	; (8005e54 <.text_31>)
 8005dce:	e011      	b.n	8005df4 <ai_buffer_to_array_fmt+0x94>
 8005dd0:	4821      	ldr	r0, [pc, #132]	; (8005e58 <.text_32>)
 8005dd2:	e00f      	b.n	8005df4 <ai_buffer_to_array_fmt+0x94>
 8005dd4:	4813      	ldr	r0, [pc, #76]	; (8005e24 <.text_19>)
 8005dd6:	e00d      	b.n	8005df4 <ai_buffer_to_array_fmt+0x94>
 8005dd8:	4820      	ldr	r0, [pc, #128]	; (8005e5c <.text_33>)
 8005dda:	e00b      	b.n	8005df4 <ai_buffer_to_array_fmt+0x94>
 8005ddc:	4820      	ldr	r0, [pc, #128]	; (8005e60 <.text_34>)
 8005dde:	e009      	b.n	8005df4 <ai_buffer_to_array_fmt+0x94>
 8005de0:	f3c2 51c0 	ubfx	r1, r2, #23, #1
 8005de4:	f3c2 000d 	ubfx	r0, r2, #0, #14
 8005de8:	2900      	cmp	r1, #0
 8005dea:	bf14      	ite	ne
 8005dec:	f440 0004 	orrne.w	r0, r0, #8650752	; 0x840000
 8005df0:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
 8005df4:	0051      	lsls	r1, r2, #1
 8005df6:	bf48      	it	mi
 8005df8:	f040 4080 	orrmi.w	r0, r0, #1073741824	; 0x40000000
 8005dfc:	0091      	lsls	r1, r2, #2
 8005dfe:	bf48      	it	mi
 8005e00:	f040 5000 	orrmi.w	r0, r0, #536870912	; 0x20000000
 8005e04:	0111      	lsls	r1, r2, #4
 8005e06:	bf48      	it	mi
 8005e08:	f040 6000 	orrmi.w	r0, r0, #134217728	; 0x8000000
 8005e0c:	4770      	bx	lr
	...

08005e10 <.text_14>:
 8005e10:	00000000 	.word	0x00000000

08005e14 <.text_15>:
 8005e14:	002be80f 	.word	0x002be80f

08005e18 <.text_16>:
 8005e18:	003bf7f1 	.word	0x003bf7f1

08005e1c <.text_17>:
 8005e1c:	00b9fff1 	.word	0x00b9fff1

08005e20 <.text_18>:
 8005e20:	004df000 	.word	0x004df000

08005e24 <.text_19>:
 8005e24:	00040040 	.word	0x00040040

08005e28 <.text_20>:
 8005e28:	00840040 	.word	0x00840040

08005e2c <.text_21>:
 8005e2c:	08013d58 	.word	0x08013d58

08005e30 <.text_22>:
 8005e30:	007ff7f1 	.word	0x007ff7f1

08005e34 <.text_23>:
 8005e34:	00fe07f1 	.word	0x00fe07f1

08005e38 <.text_24>:
 8005e38:	08013dc8 	.word	0x08013dc8

08005e3c <.text_25>:
 8005e3c:	00803fff 	.word	0x00803fff

08005e40 <.text_26>:
 8005e40:	01821040 	.word	0x01821040

08005e44 <.text_27>:
 8005e44:	00040440 	.word	0x00040440

08005e48 <.text_28>:
 8005e48:	00040840 	.word	0x00040840

08005e4c <.text_29>:
 8005e4c:	00840440 	.word	0x00840440

08005e50 <.text_30>:
 8005e50:	00840840 	.word	0x00840840

08005e54 <.text_31>:
 8005e54:	00840447 	.word	0x00840447

08005e58 <.text_32>:
 8005e58:	0084084f 	.word	0x0084084f

08005e5c <.text_33>:
 8005e5c:	00040447 	.word	0x00040447

08005e60 <.text_34>:
 8005e60:	0004084f 	.word	0x0004084f

08005e64 <ai_array_get_byte_size>:
 8005e64:	b909      	cbnz	r1, 8005e6a <ai_array_get_byte_size+0x6>
 8005e66:	2000      	movs	r0, #0
 8005e68:	4770      	bx	lr
 8005e6a:	11c2      	asrs	r2, r0, #7
 8005e6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e70:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8005e74:	189b      	adds	r3, r3, r2
 8005e76:	4359      	muls	r1, r3
 8005e78:	1dc9      	adds	r1, r1, #7
 8005e7a:	08c9      	lsrs	r1, r1, #3
 8005e7c:	1543      	asrs	r3, r0, #21
 8005e7e:	00c9      	lsls	r1, r1, #3
 8005e80:	f003 0303 	and.w	r3, r3, #3
 8005e84:	ea4f 4c60 	mov.w	ip, r0, asr #17
 8005e88:	40d9      	lsrs	r1, r3
 8005e8a:	f00c 0c0f 	and.w	ip, ip, #15
 8005e8e:	f1bc 0f04 	cmp.w	ip, #4
 8005e92:	d00a      	beq.n	8005eaa <ai_array_get_byte_size+0x46>
 8005e94:	f1bc 0f08 	cmp.w	ip, #8
 8005e98:	bf02      	ittt	eq
 8005e9a:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 8005e9e:	1882      	addeq	r2, r0, r2
 8005ea0:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 8005ea4:	1dc9      	adds	r1, r1, #7
 8005ea6:	08c8      	lsrs	r0, r1, #3
 8005ea8:	4770      	bx	lr
 8005eaa:	f3c0 3082 	ubfx	r0, r0, #14, #3
 8005eae:	1882      	adds	r2, r0, r2
 8005eb0:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8005eb4:	1dc9      	adds	r1, r1, #7
 8005eb6:	08c8      	lsrs	r0, r1, #3
 8005eb8:	4770      	bx	lr

08005eba <ai_array_get_data_byte_size>:
 8005eba:	b909      	cbnz	r1, 8005ec0 <ai_array_get_data_byte_size+0x6>
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	4770      	bx	lr
 8005ec0:	11c2      	asrs	r2, r0, #7
 8005ec2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ec6:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8005eca:	189a      	adds	r2, r3, r2
 8005ecc:	4351      	muls	r1, r2
 8005ece:	1dc9      	adds	r1, r1, #7
 8005ed0:	08c9      	lsrs	r1, r1, #3
 8005ed2:	1540      	asrs	r0, r0, #21
 8005ed4:	00c9      	lsls	r1, r1, #3
 8005ed6:	f000 0003 	and.w	r0, r0, #3
 8005eda:	40c1      	lsrs	r1, r0
 8005edc:	1dc9      	adds	r1, r1, #7
 8005ede:	08c8      	lsrs	r0, r1, #3
 8005ee0:	4770      	bx	lr

08005ee2 <ai_array_get_elems_from_size>:
 8005ee2:	b909      	cbnz	r1, 8005ee8 <ai_array_get_elems_from_size+0x6>
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	4770      	bx	lr
 8005ee8:	1442      	asrs	r2, r0, #17
 8005eea:	00c9      	lsls	r1, r1, #3
 8005eec:	f002 020f 	and.w	r2, r2, #15
 8005ef0:	2a04      	cmp	r2, #4
 8005ef2:	d002      	beq.n	8005efa <ai_array_get_elems_from_size+0x18>
 8005ef4:	2a08      	cmp	r2, #8
 8005ef6:	d009      	beq.n	8005f0c <ai_array_get_elems_from_size+0x2a>
 8005ef8:	e010      	b.n	8005f1c <ai_array_get_elems_from_size+0x3a>
 8005efa:	11c3      	asrs	r3, r0, #7
 8005efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f00:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8005f04:	18d2      	adds	r2, r2, r3
 8005f06:	eba1 1102 	sub.w	r1, r1, r2, lsl #4
 8005f0a:	e007      	b.n	8005f1c <ai_array_get_elems_from_size+0x3a>
 8005f0c:	11c2      	asrs	r2, r0, #7
 8005f0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f12:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8005f16:	189a      	adds	r2, r3, r2
 8005f18:	eba1 2102 	sub.w	r1, r1, r2, lsl #8
 8005f1c:	1542      	asrs	r2, r0, #21
 8005f1e:	f002 0203 	and.w	r2, r2, #3
 8005f22:	4091      	lsls	r1, r2
 8005f24:	1dc9      	adds	r1, r1, #7
 8005f26:	11c2      	asrs	r2, r0, #7
 8005f28:	08c9      	lsrs	r1, r1, #3
 8005f2a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f2e:	f3c0 3082 	ubfx	r0, r0, #14, #3
 8005f32:	00c9      	lsls	r1, r1, #3
 8005f34:	1880      	adds	r0, r0, r2
 8005f36:	fbb1 f0f0 	udiv	r0, r1, r0
 8005f3a:	4770      	bx	lr

08005f3c <.text_38>:
 8005f3c:	5f544d46 	.word	0x5f544d46
 8005f40:	454e4f4e 	.word	0x454e4f4e
 8005f44:	00          	.byte	0x00
 8005f45:	00          	.byte	0x00
	...

08005f48 <.text_39>:
 8005f48:	5f544d46 	.word	0x5f544d46
 8005f4c:	414f4c46 	.word	0x414f4c46
 8005f50:	0054      	.short	0x0054
	...

08005f54 <.text_40>:
 8005f54:	5f544d46 	.word	0x5f544d46
 8005f58:	414f4c46 	.word	0x414f4c46
 8005f5c:	00343654 	.word	0x00343654

08005f60 <.text_41>:
 8005f60:	5f544d46 	.word	0x5f544d46
 8005f64:	414f4c46 	.word	0x414f4c46
 8005f68:	00363154 	.word	0x00363154

08005f6c <.text_42>:
 8005f6c:	5f544d46 	.word	0x5f544d46
 8005f70:	00003855 	.word	0x00003855

08005f74 <.text_43>:
 8005f74:	5f544d46 	.word	0x5f544d46
 8005f78:	00363155 	.word	0x00363155

08005f7c <.text_44>:
 8005f7c:	5f544d46 	.word	0x5f544d46
 8005f80:	00323355 	.word	0x00323355

08005f84 <.text_45>:
 8005f84:	5f544d46 	.word	0x5f544d46
 8005f88:	00343655 	.word	0x00343655

08005f8c <.text_46>:
 8005f8c:	5f544d46 	.word	0x5f544d46
 8005f90:	00003455 	.word	0x00003455

08005f94 <.text_47>:
 8005f94:	5f544d46 	.word	0x5f544d46
 8005f98:	00003853 	.word	0x00003853

08005f9c <.text_48>:
 8005f9c:	5f544d46 	.word	0x5f544d46
 8005fa0:	00363153 	.word	0x00363153

08005fa4 <.text_49>:
 8005fa4:	5f544d46 	.word	0x5f544d46
 8005fa8:	00323353 	.word	0x00323353

08005fac <.text_50>:
 8005fac:	5f544d46 	.word	0x5f544d46
 8005fb0:	00343653 	.word	0x00343653

08005fb4 <.text_51>:
 8005fb4:	5f544d46 	.word	0x5f544d46
 8005fb8:	00003453 	.word	0x00003453

08005fbc <.text_52>:
 8005fbc:	5f544d46 	.word	0x5f544d46
 8005fc0:	0051      	.short	0x0051
	...

08005fc4 <.text_53>:
 8005fc4:	5f544d46 	.word	0x5f544d46
 8005fc8:	00003751 	.word	0x00003751

08005fcc <.text_54>:
 8005fcc:	5f544d46 	.word	0x5f544d46
 8005fd0:	00353151 	.word	0x00353151

08005fd4 <.text_55>:
 8005fd4:	5f544d46 	.word	0x5f544d46
 8005fd8:	00313351 	.word	0x00313351

08005fdc <.text_56>:
 8005fdc:	5f544d46 	.word	0x5f544d46
 8005fe0:	00005155 	.word	0x00005155

08005fe4 <.text_57>:
 8005fe4:	5f544d46 	.word	0x5f544d46
 8005fe8:	00375155 	.word	0x00375155

08005fec <.text_58>:
 8005fec:	5f544d46 	.word	0x5f544d46
 8005ff0:	35315155 	.word	0x35315155
 8005ff4:	00          	.byte	0x00
 8005ff5:	00          	.byte	0x00
	...

08005ff8 <.text_59>:
 8005ff8:	5f544d46 	.word	0x5f544d46
 8005ffc:	31335155 	.word	0x31335155
 8006000:	00          	.byte	0x00
 8006001:	00          	.byte	0x00
	...

08006004 <.text_60>:
 8006004:	5f544d46 	.word	0x5f544d46
 8006008:	3454554c 	.word	0x3454554c
 800600c:	4f4c465f 	.word	0x4f4c465f
 8006010:	00005441 	.word	0x00005441

08006014 <.text_61>:
 8006014:	5f544d46 	.word	0x5f544d46
 8006018:	3854554c 	.word	0x3854554c
 800601c:	4f4c465f 	.word	0x4f4c465f
 8006020:	00005441 	.word	0x00005441

08006024 <.text_62>:
 8006024:	5f544d46 	.word	0x5f544d46
 8006028:	3454554c 	.word	0x3454554c
 800602c:	3531515f 	.word	0x3531515f
 8006030:	00          	.byte	0x00
 8006031:	00          	.byte	0x00
	...

08006034 <.text_63>:
 8006034:	5f544d46 	.word	0x5f544d46
 8006038:	3854554c 	.word	0x3854554c
 800603c:	3531515f 	.word	0x3531515f
 8006040:	00          	.byte	0x00
 8006041:	00          	.byte	0x00
	...

08006044 <.text_64>:
 8006044:	5f544d46 	.word	0x5f544d46
 8006048:	3454554c 	.word	0x3454554c
 800604c:	3151555f 	.word	0x3151555f
 8006050:	0035      	.short	0x0035
	...

08006054 <.text_65>:
 8006054:	5f544d46 	.word	0x5f544d46
 8006058:	3854554c 	.word	0x3854554c
 800605c:	3151555f 	.word	0x3151555f
 8006060:	0035      	.short	0x0035
	...

08006064 <.text_66>:
 8006064:	415f4941 	.word	0x415f4941
 8006068:	59415252 	.word	0x59415252
 800606c:	524f465f 	.word	0x524f465f
 8006070:	5f54414d 	.word	0x5f54414d
 8006074:	454e4f4e 	.word	0x454e4f4e
 8006078:	00          	.byte	0x00
 8006079:	00          	.byte	0x00
	...

0800607c <.text_67>:
 800607c:	415f4941 	.word	0x415f4941
 8006080:	59415252 	.word	0x59415252
 8006084:	524f465f 	.word	0x524f465f
 8006088:	5f54414d 	.word	0x5f54414d
 800608c:	0051      	.short	0x0051
	...

08006090 <.text_68>:
 8006090:	415f4941 	.word	0x415f4941
 8006094:	59415252 	.word	0x59415252
 8006098:	524f465f 	.word	0x524f465f
 800609c:	5f54414d 	.word	0x5f54414d
 80060a0:	00005155 	.word	0x00005155

080060a4 <.text_69>:
 80060a4:	425f4941 	.word	0x425f4941
 80060a8:	45464655 	.word	0x45464655
 80060ac:	4f465f52 	.word	0x4f465f52
 80060b0:	54414d52 	.word	0x54414d52
 80060b4:	4e4f4e5f 	.word	0x4e4f4e5f
 80060b8:	0045      	.short	0x0045
	...

080060bc <.text_70>:
 80060bc:	425f4941 	.word	0x425f4941
 80060c0:	45464655 	.word	0x45464655
 80060c4:	4f465f52 	.word	0x4f465f52
 80060c8:	54414d52 	.word	0x54414d52
 80060cc:	0000515f 	.word	0x0000515f

080060d0 <.text_71>:
 80060d0:	425f4941 	.word	0x425f4941
 80060d4:	45464655 	.word	0x45464655
 80060d8:	4f465f52 	.word	0x4f465f52
 80060dc:	54414d52 	.word	0x54414d52
 80060e0:	0051555f 	.word	0x0051555f

080060e4 <ai_math_sqrt>:
 80060e4:	eef0 0a40 	vmov.f32	s1, s0
 80060e8:	eef5 0a40 	vcmp.f32	s1, #0.0
 80060ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060f0:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8006198 <.text_12>
 80060f4:	db01      	blt.n	80060fa <ai_math_sqrt+0x16>
 80060f6:	eeb1 0ae0 	vsqrt.f32	s0, s1
 80060fa:	4770      	bx	lr

080060fc <ai_math_exp>:
 80060fc:	f00a bce4 	b.w	8010ac8 <expf>

08006100 <ai_math_pow>:
 8006100:	f00a bd94 	b.w	8010c2c <powf>

08006104 <ai_math_tanh>:
 8006104:	f00a bbbe 	b.w	8010884 <tanhf>

08006108 <ai_math_cosh>:
 8006108:	f00a bcb6 	b.w	8010a78 <coshf>

0800610c <ai_math_relu>:
 800610c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006114:	bf48      	it	mi
 8006116:	ed9f 0a20 	vldrmi	s0, [pc, #128]	; 8006198 <.text_12>
 800611a:	4770      	bx	lr

0800611c <ai_math_prelu>:
 800611c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006124:	bf48      	it	mi
 8006126:	ee20 0a20 	vmulmi.f32	s0, s0, s1
 800612a:	4770      	bx	lr

0800612c <ai_math_sigmoid>:
 800612c:	b500      	push	{lr}
 800612e:	b081      	sub	sp, #4
 8006130:	eeb1 0a40 	vneg.f32	s0, s0
 8006134:	f00a fcc8 	bl	8010ac8 <expf>
 8006138:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800613c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8006140:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8006144:	ee81 0a00 	vdiv.f32	s0, s2, s0
 8006148:	b001      	add	sp, #4
 800614a:	bd00      	pop	{pc}

0800614c <ai_math_hard_sigmoid>:
 800614c:	eef0 0a40 	vmov.f32	s1, s0
 8006150:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800619c <.text_13>
 8006154:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8006158:	ee00 0a81 	vmla.f32	s0, s1, s2
 800615c:	eddf 0a10 	vldr	s1, [pc, #64]	; 80061a0 <.text_14>
 8006160:	eeb4 0a60 	vcmp.f32	s0, s1
 8006164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006168:	da07      	bge.n	800617a <ai_math_hard_sigmoid+0x2e>
 800616a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800616e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006172:	d504      	bpl.n	800617e <ai_math_hard_sigmoid+0x32>
 8006174:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8006198 <.text_12>
 8006178:	4770      	bx	lr
 800617a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800617e:	4770      	bx	lr

08006180 <ai_math_sign>:
 8006180:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006188:	bfcc      	ite	gt
 800618a:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 80061a4 <.text_15>
 800618e:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 80061a8 <.text_16>
 8006192:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8006196:	4770      	bx	lr

08006198 <.text_12>:
 8006198:	00000000 	.word	0x00000000

0800619c <.text_13>:
 800619c:	3e4ccccd 	.word	0x3e4ccccd

080061a0 <.text_14>:
 80061a0:	3f800001 	.word	0x3f800001

080061a4 <.text_15>:
 80061a4:	00000001 	.word	0x00000001

080061a8 <.text_16>:
 80061a8:	ffffffff 	.word	0xffffffff

080061ac <ai_div>:
 80061ac:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80061b0:	4770      	bx	lr

080061b2 <ai_floor_div>:
 80061b2:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80061b6:	f00a b98f 	b.w	80104d8 <floorf>

080061ba <ai_floor_mod>:
 80061ba:	f00a bcbb 	b.w	8010b34 <fmodf>

080061be <ai_max>:
 80061be:	eef4 0a40 	vcmp.f32	s1, s0
 80061c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061c6:	bf58      	it	pl
 80061c8:	eeb0 0a60 	vmovpl.f32	s0, s1
 80061cc:	4770      	bx	lr

080061ce <ai_min>:
 80061ce:	eeb4 0a60 	vcmp.f32	s0, s1
 80061d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d6:	bf58      	it	pl
 80061d8:	eeb0 0a60 	vmovpl.f32	s0, s1
 80061dc:	4770      	bx	lr

080061de <ai_mul>:
 80061de:	ee20 0a20 	vmul.f32	s0, s0, s1
 80061e2:	4770      	bx	lr

080061e4 <ai_sub>:
 80061e4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80061e8:	4770      	bx	lr

080061ea <ai_sum>:
 80061ea:	ee30 0a20 	vadd.f32	s0, s0, s1
 80061ee:	4770      	bx	lr

080061f0 <arm_mat_init_f32>:
 80061f0:	8001      	strh	r1, [r0, #0]
 80061f2:	8042      	strh	r2, [r0, #2]
 80061f4:	6043      	str	r3, [r0, #4]
 80061f6:	4770      	bx	lr

080061f8 <__aeabi_memset>:
 80061f8:	b470      	push	{r4, r5, r6}
 80061fa:	0784      	lsls	r4, r0, #30
 80061fc:	d046      	beq.n	800628c <__aeabi_memset+0x94>
 80061fe:	1e4c      	subs	r4, r1, #1
 8006200:	2900      	cmp	r1, #0
 8006202:	d041      	beq.n	8006288 <__aeabi_memset+0x90>
 8006204:	b2d5      	uxtb	r5, r2
 8006206:	4603      	mov	r3, r0
 8006208:	e002      	b.n	8006210 <__aeabi_memset+0x18>
 800620a:	1e61      	subs	r1, r4, #1
 800620c:	b3e4      	cbz	r4, 8006288 <__aeabi_memset+0x90>
 800620e:	460c      	mov	r4, r1
 8006210:	f803 5b01 	strb.w	r5, [r3], #1
 8006214:	0799      	lsls	r1, r3, #30
 8006216:	d1f8      	bne.n	800620a <__aeabi_memset+0x12>
 8006218:	2c03      	cmp	r4, #3
 800621a:	d92e      	bls.n	800627a <__aeabi_memset+0x82>
 800621c:	b2d5      	uxtb	r5, r2
 800621e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8006222:	2c0f      	cmp	r4, #15
 8006224:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8006228:	d919      	bls.n	800625e <__aeabi_memset+0x66>
 800622a:	4626      	mov	r6, r4
 800622c:	f103 0110 	add.w	r1, r3, #16
 8006230:	3e10      	subs	r6, #16
 8006232:	2e0f      	cmp	r6, #15
 8006234:	f841 5c10 	str.w	r5, [r1, #-16]
 8006238:	f841 5c0c 	str.w	r5, [r1, #-12]
 800623c:	f841 5c08 	str.w	r5, [r1, #-8]
 8006240:	f841 5c04 	str.w	r5, [r1, #-4]
 8006244:	f101 0110 	add.w	r1, r1, #16
 8006248:	d8f2      	bhi.n	8006230 <__aeabi_memset+0x38>
 800624a:	f1a4 0110 	sub.w	r1, r4, #16
 800624e:	f021 010f 	bic.w	r1, r1, #15
 8006252:	f004 040f 	and.w	r4, r4, #15
 8006256:	3110      	adds	r1, #16
 8006258:	2c03      	cmp	r4, #3
 800625a:	440b      	add	r3, r1
 800625c:	d90d      	bls.n	800627a <__aeabi_memset+0x82>
 800625e:	461e      	mov	r6, r3
 8006260:	4621      	mov	r1, r4
 8006262:	3904      	subs	r1, #4
 8006264:	2903      	cmp	r1, #3
 8006266:	f846 5b04 	str.w	r5, [r6], #4
 800626a:	d8fa      	bhi.n	8006262 <__aeabi_memset+0x6a>
 800626c:	1f21      	subs	r1, r4, #4
 800626e:	f021 0103 	bic.w	r1, r1, #3
 8006272:	3104      	adds	r1, #4
 8006274:	440b      	add	r3, r1
 8006276:	f004 0403 	and.w	r4, r4, #3
 800627a:	b12c      	cbz	r4, 8006288 <__aeabi_memset+0x90>
 800627c:	b2d2      	uxtb	r2, r2
 800627e:	441c      	add	r4, r3
 8006280:	f803 2b01 	strb.w	r2, [r3], #1
 8006284:	42a3      	cmp	r3, r4
 8006286:	d1fb      	bne.n	8006280 <__aeabi_memset+0x88>
 8006288:	bc70      	pop	{r4, r5, r6}
 800628a:	4770      	bx	lr
 800628c:	460c      	mov	r4, r1
 800628e:	4603      	mov	r3, r0
 8006290:	e7c2      	b.n	8006218 <__aeabi_memset+0x20>

08006292 <strlen>:
 8006292:	4603      	mov	r3, r0
 8006294:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006298:	2a00      	cmp	r2, #0
 800629a:	d1fb      	bne.n	8006294 <strlen+0x2>
 800629c:	1a18      	subs	r0, r3, r0
 800629e:	3801      	subs	r0, #1
 80062a0:	4770      	bx	lr
	...

080062b0 <memchr>:
 80062b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80062b4:	2a10      	cmp	r2, #16
 80062b6:	db2b      	blt.n	8006310 <memchr+0x60>
 80062b8:	f010 0f07 	tst.w	r0, #7
 80062bc:	d008      	beq.n	80062d0 <memchr+0x20>
 80062be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80062c2:	3a01      	subs	r2, #1
 80062c4:	428b      	cmp	r3, r1
 80062c6:	d02d      	beq.n	8006324 <memchr+0x74>
 80062c8:	f010 0f07 	tst.w	r0, #7
 80062cc:	b342      	cbz	r2, 8006320 <memchr+0x70>
 80062ce:	d1f6      	bne.n	80062be <memchr+0xe>
 80062d0:	b4f0      	push	{r4, r5, r6, r7}
 80062d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80062d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80062da:	f022 0407 	bic.w	r4, r2, #7
 80062de:	f07f 0700 	mvns.w	r7, #0
 80062e2:	2300      	movs	r3, #0
 80062e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80062e8:	3c08      	subs	r4, #8
 80062ea:	ea85 0501 	eor.w	r5, r5, r1
 80062ee:	ea86 0601 	eor.w	r6, r6, r1
 80062f2:	fa85 f547 	uadd8	r5, r5, r7
 80062f6:	faa3 f587 	sel	r5, r3, r7
 80062fa:	fa86 f647 	uadd8	r6, r6, r7
 80062fe:	faa5 f687 	sel	r6, r5, r7
 8006302:	b98e      	cbnz	r6, 8006328 <memchr+0x78>
 8006304:	d1ee      	bne.n	80062e4 <memchr+0x34>
 8006306:	bcf0      	pop	{r4, r5, r6, r7}
 8006308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800630c:	f002 0207 	and.w	r2, r2, #7
 8006310:	b132      	cbz	r2, 8006320 <memchr+0x70>
 8006312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006316:	3a01      	subs	r2, #1
 8006318:	ea83 0301 	eor.w	r3, r3, r1
 800631c:	b113      	cbz	r3, 8006324 <memchr+0x74>
 800631e:	d1f8      	bne.n	8006312 <memchr+0x62>
 8006320:	2000      	movs	r0, #0
 8006322:	4770      	bx	lr
 8006324:	3801      	subs	r0, #1
 8006326:	4770      	bx	lr
 8006328:	2d00      	cmp	r5, #0
 800632a:	bf06      	itte	eq
 800632c:	4635      	moveq	r5, r6
 800632e:	3803      	subeq	r0, #3
 8006330:	3807      	subne	r0, #7
 8006332:	f015 0f01 	tst.w	r5, #1
 8006336:	d107      	bne.n	8006348 <memchr+0x98>
 8006338:	3001      	adds	r0, #1
 800633a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800633e:	bf02      	ittt	eq
 8006340:	3001      	addeq	r0, #1
 8006342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8006346:	3001      	addeq	r0, #1
 8006348:	bcf0      	pop	{r4, r5, r6, r7}
 800634a:	3801      	subs	r0, #1
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop

08006350 <__aeabi_drsub>:
 8006350:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006354:	e002      	b.n	800635c <__adddf3>
 8006356:	bf00      	nop

08006358 <__aeabi_dsub>:
 8006358:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800635c <__adddf3>:
 800635c:	b530      	push	{r4, r5, lr}
 800635e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006362:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006366:	ea94 0f05 	teq	r4, r5
 800636a:	bf08      	it	eq
 800636c:	ea90 0f02 	teqeq	r0, r2
 8006370:	bf1f      	itttt	ne
 8006372:	ea54 0c00 	orrsne.w	ip, r4, r0
 8006376:	ea55 0c02 	orrsne.w	ip, r5, r2
 800637a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800637e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006382:	f000 80e2 	beq.w	800654a <__adddf3+0x1ee>
 8006386:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800638a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800638e:	bfb8      	it	lt
 8006390:	426d      	neglt	r5, r5
 8006392:	dd0c      	ble.n	80063ae <__adddf3+0x52>
 8006394:	442c      	add	r4, r5
 8006396:	ea80 0202 	eor.w	r2, r0, r2
 800639a:	ea81 0303 	eor.w	r3, r1, r3
 800639e:	ea82 0000 	eor.w	r0, r2, r0
 80063a2:	ea83 0101 	eor.w	r1, r3, r1
 80063a6:	ea80 0202 	eor.w	r2, r0, r2
 80063aa:	ea81 0303 	eor.w	r3, r1, r3
 80063ae:	2d36      	cmp	r5, #54	; 0x36
 80063b0:	bf88      	it	hi
 80063b2:	bd30      	pophi	{r4, r5, pc}
 80063b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80063b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80063bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80063c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80063c4:	d002      	beq.n	80063cc <__adddf3+0x70>
 80063c6:	4240      	negs	r0, r0
 80063c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80063cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80063d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80063d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80063d8:	d002      	beq.n	80063e0 <__adddf3+0x84>
 80063da:	4252      	negs	r2, r2
 80063dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80063e0:	ea94 0f05 	teq	r4, r5
 80063e4:	f000 80a7 	beq.w	8006536 <__adddf3+0x1da>
 80063e8:	f1a4 0401 	sub.w	r4, r4, #1
 80063ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80063f0:	db0d      	blt.n	800640e <__adddf3+0xb2>
 80063f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80063f6:	fa22 f205 	lsr.w	r2, r2, r5
 80063fa:	1880      	adds	r0, r0, r2
 80063fc:	f141 0100 	adc.w	r1, r1, #0
 8006400:	fa03 f20e 	lsl.w	r2, r3, lr
 8006404:	1880      	adds	r0, r0, r2
 8006406:	fa43 f305 	asr.w	r3, r3, r5
 800640a:	4159      	adcs	r1, r3
 800640c:	e00e      	b.n	800642c <__adddf3+0xd0>
 800640e:	f1a5 0520 	sub.w	r5, r5, #32
 8006412:	f10e 0e20 	add.w	lr, lr, #32
 8006416:	2a01      	cmp	r2, #1
 8006418:	fa03 fc0e 	lsl.w	ip, r3, lr
 800641c:	bf28      	it	cs
 800641e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006422:	fa43 f305 	asr.w	r3, r3, r5
 8006426:	18c0      	adds	r0, r0, r3
 8006428:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800642c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006430:	d507      	bpl.n	8006442 <__adddf3+0xe6>
 8006432:	f04f 0e00 	mov.w	lr, #0
 8006436:	f1dc 0c00 	rsbs	ip, ip, #0
 800643a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800643e:	eb6e 0101 	sbc.w	r1, lr, r1
 8006442:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006446:	d31b      	bcc.n	8006480 <__adddf3+0x124>
 8006448:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800644c:	d30c      	bcc.n	8006468 <__adddf3+0x10c>
 800644e:	0849      	lsrs	r1, r1, #1
 8006450:	ea5f 0030 	movs.w	r0, r0, rrx
 8006454:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006458:	f104 0401 	add.w	r4, r4, #1
 800645c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006460:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006464:	f080 809a 	bcs.w	800659c <__adddf3+0x240>
 8006468:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800646c:	bf08      	it	eq
 800646e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006472:	f150 0000 	adcs.w	r0, r0, #0
 8006476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800647a:	ea41 0105 	orr.w	r1, r1, r5
 800647e:	bd30      	pop	{r4, r5, pc}
 8006480:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006484:	4140      	adcs	r0, r0
 8006486:	eb41 0101 	adc.w	r1, r1, r1
 800648a:	3c01      	subs	r4, #1
 800648c:	bf28      	it	cs
 800648e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8006492:	d2e9      	bcs.n	8006468 <__adddf3+0x10c>
 8006494:	f091 0f00 	teq	r1, #0
 8006498:	bf04      	itt	eq
 800649a:	4601      	moveq	r1, r0
 800649c:	2000      	moveq	r0, #0
 800649e:	fab1 f381 	clz	r3, r1
 80064a2:	bf08      	it	eq
 80064a4:	3320      	addeq	r3, #32
 80064a6:	f1a3 030b 	sub.w	r3, r3, #11
 80064aa:	f1b3 0220 	subs.w	r2, r3, #32
 80064ae:	da0c      	bge.n	80064ca <__adddf3+0x16e>
 80064b0:	320c      	adds	r2, #12
 80064b2:	dd08      	ble.n	80064c6 <__adddf3+0x16a>
 80064b4:	f102 0c14 	add.w	ip, r2, #20
 80064b8:	f1c2 020c 	rsb	r2, r2, #12
 80064bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80064c0:	fa21 f102 	lsr.w	r1, r1, r2
 80064c4:	e00c      	b.n	80064e0 <__adddf3+0x184>
 80064c6:	f102 0214 	add.w	r2, r2, #20
 80064ca:	bfd8      	it	le
 80064cc:	f1c2 0c20 	rsble	ip, r2, #32
 80064d0:	fa01 f102 	lsl.w	r1, r1, r2
 80064d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80064d8:	bfdc      	itt	le
 80064da:	ea41 010c 	orrle.w	r1, r1, ip
 80064de:	4090      	lslle	r0, r2
 80064e0:	1ae4      	subs	r4, r4, r3
 80064e2:	bfa2      	ittt	ge
 80064e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80064e8:	4329      	orrge	r1, r5
 80064ea:	bd30      	popge	{r4, r5, pc}
 80064ec:	ea6f 0404 	mvn.w	r4, r4
 80064f0:	3c1f      	subs	r4, #31
 80064f2:	da1c      	bge.n	800652e <__adddf3+0x1d2>
 80064f4:	340c      	adds	r4, #12
 80064f6:	dc0e      	bgt.n	8006516 <__adddf3+0x1ba>
 80064f8:	f104 0414 	add.w	r4, r4, #20
 80064fc:	f1c4 0220 	rsb	r2, r4, #32
 8006500:	fa20 f004 	lsr.w	r0, r0, r4
 8006504:	fa01 f302 	lsl.w	r3, r1, r2
 8006508:	ea40 0003 	orr.w	r0, r0, r3
 800650c:	fa21 f304 	lsr.w	r3, r1, r4
 8006510:	ea45 0103 	orr.w	r1, r5, r3
 8006514:	bd30      	pop	{r4, r5, pc}
 8006516:	f1c4 040c 	rsb	r4, r4, #12
 800651a:	f1c4 0220 	rsb	r2, r4, #32
 800651e:	fa20 f002 	lsr.w	r0, r0, r2
 8006522:	fa01 f304 	lsl.w	r3, r1, r4
 8006526:	ea40 0003 	orr.w	r0, r0, r3
 800652a:	4629      	mov	r1, r5
 800652c:	bd30      	pop	{r4, r5, pc}
 800652e:	fa21 f004 	lsr.w	r0, r1, r4
 8006532:	4629      	mov	r1, r5
 8006534:	bd30      	pop	{r4, r5, pc}
 8006536:	f094 0f00 	teq	r4, #0
 800653a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800653e:	bf06      	itte	eq
 8006540:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006544:	3401      	addeq	r4, #1
 8006546:	3d01      	subne	r5, #1
 8006548:	e74e      	b.n	80063e8 <__adddf3+0x8c>
 800654a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800654e:	bf18      	it	ne
 8006550:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006554:	d029      	beq.n	80065aa <__adddf3+0x24e>
 8006556:	ea94 0f05 	teq	r4, r5
 800655a:	bf08      	it	eq
 800655c:	ea90 0f02 	teqeq	r0, r2
 8006560:	d005      	beq.n	800656e <__adddf3+0x212>
 8006562:	ea54 0c00 	orrs.w	ip, r4, r0
 8006566:	bf04      	itt	eq
 8006568:	4619      	moveq	r1, r3
 800656a:	4610      	moveq	r0, r2
 800656c:	bd30      	pop	{r4, r5, pc}
 800656e:	ea91 0f03 	teq	r1, r3
 8006572:	bf1e      	ittt	ne
 8006574:	2100      	movne	r1, #0
 8006576:	2000      	movne	r0, #0
 8006578:	bd30      	popne	{r4, r5, pc}
 800657a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800657e:	d105      	bne.n	800658c <__adddf3+0x230>
 8006580:	0040      	lsls	r0, r0, #1
 8006582:	4149      	adcs	r1, r1
 8006584:	bf28      	it	cs
 8006586:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800658a:	bd30      	pop	{r4, r5, pc}
 800658c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006590:	bf3c      	itt	cc
 8006592:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006596:	bd30      	popcc	{r4, r5, pc}
 8006598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800659c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80065a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80065a4:	f04f 0000 	mov.w	r0, #0
 80065a8:	bd30      	pop	{r4, r5, pc}
 80065aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80065ae:	bf1a      	itte	ne
 80065b0:	4619      	movne	r1, r3
 80065b2:	4610      	movne	r0, r2
 80065b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80065b8:	bf1c      	itt	ne
 80065ba:	460b      	movne	r3, r1
 80065bc:	4602      	movne	r2, r0
 80065be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80065c2:	bf06      	itte	eq
 80065c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80065c8:	ea91 0f03 	teqeq	r1, r3
 80065cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80065d0:	bd30      	pop	{r4, r5, pc}
 80065d2:	bf00      	nop

080065d4 <__aeabi_ui2d>:
 80065d4:	f090 0f00 	teq	r0, #0
 80065d8:	bf04      	itt	eq
 80065da:	2100      	moveq	r1, #0
 80065dc:	4770      	bxeq	lr
 80065de:	b530      	push	{r4, r5, lr}
 80065e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80065e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80065e8:	f04f 0500 	mov.w	r5, #0
 80065ec:	f04f 0100 	mov.w	r1, #0
 80065f0:	e750      	b.n	8006494 <__adddf3+0x138>
 80065f2:	bf00      	nop

080065f4 <__aeabi_i2d>:
 80065f4:	f090 0f00 	teq	r0, #0
 80065f8:	bf04      	itt	eq
 80065fa:	2100      	moveq	r1, #0
 80065fc:	4770      	bxeq	lr
 80065fe:	b530      	push	{r4, r5, lr}
 8006600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006608:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800660c:	bf48      	it	mi
 800660e:	4240      	negmi	r0, r0
 8006610:	f04f 0100 	mov.w	r1, #0
 8006614:	e73e      	b.n	8006494 <__adddf3+0x138>
 8006616:	bf00      	nop

08006618 <__aeabi_f2d>:
 8006618:	0042      	lsls	r2, r0, #1
 800661a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800661e:	ea4f 0131 	mov.w	r1, r1, rrx
 8006622:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006626:	bf1f      	itttt	ne
 8006628:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800662c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006630:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006634:	4770      	bxne	lr
 8006636:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800663a:	bf08      	it	eq
 800663c:	4770      	bxeq	lr
 800663e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8006642:	bf04      	itt	eq
 8006644:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8006648:	4770      	bxeq	lr
 800664a:	b530      	push	{r4, r5, lr}
 800664c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006650:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006654:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006658:	e71c      	b.n	8006494 <__adddf3+0x138>
 800665a:	bf00      	nop

0800665c <__aeabi_ul2d>:
 800665c:	ea50 0201 	orrs.w	r2, r0, r1
 8006660:	bf08      	it	eq
 8006662:	4770      	bxeq	lr
 8006664:	b530      	push	{r4, r5, lr}
 8006666:	f04f 0500 	mov.w	r5, #0
 800666a:	e00a      	b.n	8006682 <__aeabi_l2d+0x16>

0800666c <__aeabi_l2d>:
 800666c:	ea50 0201 	orrs.w	r2, r0, r1
 8006670:	bf08      	it	eq
 8006672:	4770      	bxeq	lr
 8006674:	b530      	push	{r4, r5, lr}
 8006676:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800667a:	d502      	bpl.n	8006682 <__aeabi_l2d+0x16>
 800667c:	4240      	negs	r0, r0
 800667e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006682:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006686:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800668a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800668e:	f43f aed8 	beq.w	8006442 <__adddf3+0xe6>
 8006692:	f04f 0203 	mov.w	r2, #3
 8006696:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800669a:	bf18      	it	ne
 800669c:	3203      	addne	r2, #3
 800669e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80066a2:	bf18      	it	ne
 80066a4:	3203      	addne	r2, #3
 80066a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80066aa:	f1c2 0320 	rsb	r3, r2, #32
 80066ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80066b2:	fa20 f002 	lsr.w	r0, r0, r2
 80066b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80066ba:	ea40 000e 	orr.w	r0, r0, lr
 80066be:	fa21 f102 	lsr.w	r1, r1, r2
 80066c2:	4414      	add	r4, r2
 80066c4:	e6bd      	b.n	8006442 <__adddf3+0xe6>
 80066c6:	bf00      	nop

080066c8 <__aeabi_dmul>:
 80066c8:	b570      	push	{r4, r5, r6, lr}
 80066ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80066ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80066d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80066d6:	bf1d      	ittte	ne
 80066d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80066dc:	ea94 0f0c 	teqne	r4, ip
 80066e0:	ea95 0f0c 	teqne	r5, ip
 80066e4:	f000 f8de 	bleq	80068a4 <__aeabi_dmul+0x1dc>
 80066e8:	442c      	add	r4, r5
 80066ea:	ea81 0603 	eor.w	r6, r1, r3
 80066ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80066f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80066f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80066fa:	bf18      	it	ne
 80066fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8006700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006704:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006708:	d038      	beq.n	800677c <__aeabi_dmul+0xb4>
 800670a:	fba0 ce02 	umull	ip, lr, r0, r2
 800670e:	f04f 0500 	mov.w	r5, #0
 8006712:	fbe1 e502 	umlal	lr, r5, r1, r2
 8006716:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800671a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800671e:	f04f 0600 	mov.w	r6, #0
 8006722:	fbe1 5603 	umlal	r5, r6, r1, r3
 8006726:	f09c 0f00 	teq	ip, #0
 800672a:	bf18      	it	ne
 800672c:	f04e 0e01 	orrne.w	lr, lr, #1
 8006730:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8006734:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006738:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800673c:	d204      	bcs.n	8006748 <__aeabi_dmul+0x80>
 800673e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8006742:	416d      	adcs	r5, r5
 8006744:	eb46 0606 	adc.w	r6, r6, r6
 8006748:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800674c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8006750:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8006754:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006758:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800675c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006760:	bf88      	it	hi
 8006762:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006766:	d81e      	bhi.n	80067a6 <__aeabi_dmul+0xde>
 8006768:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800676c:	bf08      	it	eq
 800676e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8006772:	f150 0000 	adcs.w	r0, r0, #0
 8006776:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800677a:	bd70      	pop	{r4, r5, r6, pc}
 800677c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8006780:	ea46 0101 	orr.w	r1, r6, r1
 8006784:	ea40 0002 	orr.w	r0, r0, r2
 8006788:	ea81 0103 	eor.w	r1, r1, r3
 800678c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8006790:	bfc2      	ittt	gt
 8006792:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006796:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800679a:	bd70      	popgt	{r4, r5, r6, pc}
 800679c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80067a0:	f04f 0e00 	mov.w	lr, #0
 80067a4:	3c01      	subs	r4, #1
 80067a6:	f300 80ab 	bgt.w	8006900 <__aeabi_dmul+0x238>
 80067aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80067ae:	bfde      	ittt	le
 80067b0:	2000      	movle	r0, #0
 80067b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80067b6:	bd70      	pople	{r4, r5, r6, pc}
 80067b8:	f1c4 0400 	rsb	r4, r4, #0
 80067bc:	3c20      	subs	r4, #32
 80067be:	da35      	bge.n	800682c <__aeabi_dmul+0x164>
 80067c0:	340c      	adds	r4, #12
 80067c2:	dc1b      	bgt.n	80067fc <__aeabi_dmul+0x134>
 80067c4:	f104 0414 	add.w	r4, r4, #20
 80067c8:	f1c4 0520 	rsb	r5, r4, #32
 80067cc:	fa00 f305 	lsl.w	r3, r0, r5
 80067d0:	fa20 f004 	lsr.w	r0, r0, r4
 80067d4:	fa01 f205 	lsl.w	r2, r1, r5
 80067d8:	ea40 0002 	orr.w	r0, r0, r2
 80067dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80067e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80067e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80067e8:	fa21 f604 	lsr.w	r6, r1, r4
 80067ec:	eb42 0106 	adc.w	r1, r2, r6
 80067f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80067f4:	bf08      	it	eq
 80067f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80067fa:	bd70      	pop	{r4, r5, r6, pc}
 80067fc:	f1c4 040c 	rsb	r4, r4, #12
 8006800:	f1c4 0520 	rsb	r5, r4, #32
 8006804:	fa00 f304 	lsl.w	r3, r0, r4
 8006808:	fa20 f005 	lsr.w	r0, r0, r5
 800680c:	fa01 f204 	lsl.w	r2, r1, r4
 8006810:	ea40 0002 	orr.w	r0, r0, r2
 8006814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006818:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800681c:	f141 0100 	adc.w	r1, r1, #0
 8006820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006824:	bf08      	it	eq
 8006826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800682a:	bd70      	pop	{r4, r5, r6, pc}
 800682c:	f1c4 0520 	rsb	r5, r4, #32
 8006830:	fa00 f205 	lsl.w	r2, r0, r5
 8006834:	ea4e 0e02 	orr.w	lr, lr, r2
 8006838:	fa20 f304 	lsr.w	r3, r0, r4
 800683c:	fa01 f205 	lsl.w	r2, r1, r5
 8006840:	ea43 0302 	orr.w	r3, r3, r2
 8006844:	fa21 f004 	lsr.w	r0, r1, r4
 8006848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800684c:	fa21 f204 	lsr.w	r2, r1, r4
 8006850:	ea20 0002 	bic.w	r0, r0, r2
 8006854:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006858:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800685c:	bf08      	it	eq
 800685e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006862:	bd70      	pop	{r4, r5, r6, pc}
 8006864:	f094 0f00 	teq	r4, #0
 8006868:	d10f      	bne.n	800688a <__aeabi_dmul+0x1c2>
 800686a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800686e:	0040      	lsls	r0, r0, #1
 8006870:	eb41 0101 	adc.w	r1, r1, r1
 8006874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006878:	bf08      	it	eq
 800687a:	3c01      	subeq	r4, #1
 800687c:	d0f7      	beq.n	800686e <__aeabi_dmul+0x1a6>
 800687e:	ea41 0106 	orr.w	r1, r1, r6
 8006882:	f095 0f00 	teq	r5, #0
 8006886:	bf18      	it	ne
 8006888:	4770      	bxne	lr
 800688a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800688e:	0052      	lsls	r2, r2, #1
 8006890:	eb43 0303 	adc.w	r3, r3, r3
 8006894:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006898:	bf08      	it	eq
 800689a:	3d01      	subeq	r5, #1
 800689c:	d0f7      	beq.n	800688e <__aeabi_dmul+0x1c6>
 800689e:	ea43 0306 	orr.w	r3, r3, r6
 80068a2:	4770      	bx	lr
 80068a4:	ea94 0f0c 	teq	r4, ip
 80068a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80068ac:	bf18      	it	ne
 80068ae:	ea95 0f0c 	teqne	r5, ip
 80068b2:	d00c      	beq.n	80068ce <__aeabi_dmul+0x206>
 80068b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80068b8:	bf18      	it	ne
 80068ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80068be:	d1d1      	bne.n	8006864 <__aeabi_dmul+0x19c>
 80068c0:	ea81 0103 	eor.w	r1, r1, r3
 80068c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80068c8:	f04f 0000 	mov.w	r0, #0
 80068cc:	bd70      	pop	{r4, r5, r6, pc}
 80068ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80068d2:	bf06      	itte	eq
 80068d4:	4610      	moveq	r0, r2
 80068d6:	4619      	moveq	r1, r3
 80068d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80068dc:	d019      	beq.n	8006912 <__aeabi_dmul+0x24a>
 80068de:	ea94 0f0c 	teq	r4, ip
 80068e2:	d102      	bne.n	80068ea <__aeabi_dmul+0x222>
 80068e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80068e8:	d113      	bne.n	8006912 <__aeabi_dmul+0x24a>
 80068ea:	ea95 0f0c 	teq	r5, ip
 80068ee:	d105      	bne.n	80068fc <__aeabi_dmul+0x234>
 80068f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80068f4:	bf1c      	itt	ne
 80068f6:	4610      	movne	r0, r2
 80068f8:	4619      	movne	r1, r3
 80068fa:	d10a      	bne.n	8006912 <__aeabi_dmul+0x24a>
 80068fc:	ea81 0103 	eor.w	r1, r1, r3
 8006900:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006904:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006908:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800690c:	f04f 0000 	mov.w	r0, #0
 8006910:	bd70      	pop	{r4, r5, r6, pc}
 8006912:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006916:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800691a:	bd70      	pop	{r4, r5, r6, pc}

0800691c <__aeabi_ddiv>:
 800691c:	b570      	push	{r4, r5, r6, lr}
 800691e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006922:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006926:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800692a:	bf1d      	ittte	ne
 800692c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006930:	ea94 0f0c 	teqne	r4, ip
 8006934:	ea95 0f0c 	teqne	r5, ip
 8006938:	f000 f8a7 	bleq	8006a8a <__aeabi_ddiv+0x16e>
 800693c:	eba4 0405 	sub.w	r4, r4, r5
 8006940:	ea81 0e03 	eor.w	lr, r1, r3
 8006944:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006948:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800694c:	f000 8088 	beq.w	8006a60 <__aeabi_ddiv+0x144>
 8006950:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006954:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006958:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800695c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8006960:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8006964:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006968:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800696c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8006970:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8006974:	429d      	cmp	r5, r3
 8006976:	bf08      	it	eq
 8006978:	4296      	cmpeq	r6, r2
 800697a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800697e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8006982:	d202      	bcs.n	800698a <__aeabi_ddiv+0x6e>
 8006984:	085b      	lsrs	r3, r3, #1
 8006986:	ea4f 0232 	mov.w	r2, r2, rrx
 800698a:	1ab6      	subs	r6, r6, r2
 800698c:	eb65 0503 	sbc.w	r5, r5, r3
 8006990:	085b      	lsrs	r3, r3, #1
 8006992:	ea4f 0232 	mov.w	r2, r2, rrx
 8006996:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800699a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800699e:	ebb6 0e02 	subs.w	lr, r6, r2
 80069a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80069a6:	bf22      	ittt	cs
 80069a8:	1ab6      	subcs	r6, r6, r2
 80069aa:	4675      	movcs	r5, lr
 80069ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80069b0:	085b      	lsrs	r3, r3, #1
 80069b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80069b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80069ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80069be:	bf22      	ittt	cs
 80069c0:	1ab6      	subcs	r6, r6, r2
 80069c2:	4675      	movcs	r5, lr
 80069c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80069c8:	085b      	lsrs	r3, r3, #1
 80069ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80069ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80069d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80069d6:	bf22      	ittt	cs
 80069d8:	1ab6      	subcs	r6, r6, r2
 80069da:	4675      	movcs	r5, lr
 80069dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80069e0:	085b      	lsrs	r3, r3, #1
 80069e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80069e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80069ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80069ee:	bf22      	ittt	cs
 80069f0:	1ab6      	subcs	r6, r6, r2
 80069f2:	4675      	movcs	r5, lr
 80069f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80069f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80069fc:	d018      	beq.n	8006a30 <__aeabi_ddiv+0x114>
 80069fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006a02:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006a06:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8006a0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006a0e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8006a12:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006a16:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8006a1a:	d1c0      	bne.n	800699e <__aeabi_ddiv+0x82>
 8006a1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006a20:	d10b      	bne.n	8006a3a <__aeabi_ddiv+0x11e>
 8006a22:	ea41 0100 	orr.w	r1, r1, r0
 8006a26:	f04f 0000 	mov.w	r0, #0
 8006a2a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8006a2e:	e7b6      	b.n	800699e <__aeabi_ddiv+0x82>
 8006a30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006a34:	bf04      	itt	eq
 8006a36:	4301      	orreq	r1, r0
 8006a38:	2000      	moveq	r0, #0
 8006a3a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006a3e:	bf88      	it	hi
 8006a40:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006a44:	f63f aeaf 	bhi.w	80067a6 <__aeabi_dmul+0xde>
 8006a48:	ebb5 0c03 	subs.w	ip, r5, r3
 8006a4c:	bf04      	itt	eq
 8006a4e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8006a52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006a56:	f150 0000 	adcs.w	r0, r0, #0
 8006a5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006a5e:	bd70      	pop	{r4, r5, r6, pc}
 8006a60:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8006a64:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8006a68:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8006a6c:	bfc2      	ittt	gt
 8006a6e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006a72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006a76:	bd70      	popgt	{r4, r5, r6, pc}
 8006a78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006a7c:	f04f 0e00 	mov.w	lr, #0
 8006a80:	3c01      	subs	r4, #1
 8006a82:	e690      	b.n	80067a6 <__aeabi_dmul+0xde>
 8006a84:	ea45 0e06 	orr.w	lr, r5, r6
 8006a88:	e68d      	b.n	80067a6 <__aeabi_dmul+0xde>
 8006a8a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006a8e:	ea94 0f0c 	teq	r4, ip
 8006a92:	bf08      	it	eq
 8006a94:	ea95 0f0c 	teqeq	r5, ip
 8006a98:	f43f af3b 	beq.w	8006912 <__aeabi_dmul+0x24a>
 8006a9c:	ea94 0f0c 	teq	r4, ip
 8006aa0:	d10a      	bne.n	8006ab8 <__aeabi_ddiv+0x19c>
 8006aa2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006aa6:	f47f af34 	bne.w	8006912 <__aeabi_dmul+0x24a>
 8006aaa:	ea95 0f0c 	teq	r5, ip
 8006aae:	f47f af25 	bne.w	80068fc <__aeabi_dmul+0x234>
 8006ab2:	4610      	mov	r0, r2
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	e72c      	b.n	8006912 <__aeabi_dmul+0x24a>
 8006ab8:	ea95 0f0c 	teq	r5, ip
 8006abc:	d106      	bne.n	8006acc <__aeabi_ddiv+0x1b0>
 8006abe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006ac2:	f43f aefd 	beq.w	80068c0 <__aeabi_dmul+0x1f8>
 8006ac6:	4610      	mov	r0, r2
 8006ac8:	4619      	mov	r1, r3
 8006aca:	e722      	b.n	8006912 <__aeabi_dmul+0x24a>
 8006acc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006ad0:	bf18      	it	ne
 8006ad2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006ad6:	f47f aec5 	bne.w	8006864 <__aeabi_dmul+0x19c>
 8006ada:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8006ade:	f47f af0d 	bne.w	80068fc <__aeabi_dmul+0x234>
 8006ae2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8006ae6:	f47f aeeb 	bne.w	80068c0 <__aeabi_dmul+0x1f8>
 8006aea:	e712      	b.n	8006912 <__aeabi_dmul+0x24a>

08006aec <__gedf2>:
 8006aec:	f04f 3cff 	mov.w	ip, #4294967295
 8006af0:	e006      	b.n	8006b00 <__cmpdf2+0x4>
 8006af2:	bf00      	nop

08006af4 <__ledf2>:
 8006af4:	f04f 0c01 	mov.w	ip, #1
 8006af8:	e002      	b.n	8006b00 <__cmpdf2+0x4>
 8006afa:	bf00      	nop

08006afc <__cmpdf2>:
 8006afc:	f04f 0c01 	mov.w	ip, #1
 8006b00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006b04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006b10:	bf18      	it	ne
 8006b12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8006b16:	d01b      	beq.n	8006b50 <__cmpdf2+0x54>
 8006b18:	b001      	add	sp, #4
 8006b1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8006b1e:	bf0c      	ite	eq
 8006b20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8006b24:	ea91 0f03 	teqne	r1, r3
 8006b28:	bf02      	ittt	eq
 8006b2a:	ea90 0f02 	teqeq	r0, r2
 8006b2e:	2000      	moveq	r0, #0
 8006b30:	4770      	bxeq	lr
 8006b32:	f110 0f00 	cmn.w	r0, #0
 8006b36:	ea91 0f03 	teq	r1, r3
 8006b3a:	bf58      	it	pl
 8006b3c:	4299      	cmppl	r1, r3
 8006b3e:	bf08      	it	eq
 8006b40:	4290      	cmpeq	r0, r2
 8006b42:	bf2c      	ite	cs
 8006b44:	17d8      	asrcs	r0, r3, #31
 8006b46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8006b4a:	f040 0001 	orr.w	r0, r0, #1
 8006b4e:	4770      	bx	lr
 8006b50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006b58:	d102      	bne.n	8006b60 <__cmpdf2+0x64>
 8006b5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006b5e:	d107      	bne.n	8006b70 <__cmpdf2+0x74>
 8006b60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006b68:	d1d6      	bne.n	8006b18 <__cmpdf2+0x1c>
 8006b6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006b6e:	d0d3      	beq.n	8006b18 <__cmpdf2+0x1c>
 8006b70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop

08006b78 <__aeabi_cdrcmple>:
 8006b78:	4684      	mov	ip, r0
 8006b7a:	4610      	mov	r0, r2
 8006b7c:	4662      	mov	r2, ip
 8006b7e:	468c      	mov	ip, r1
 8006b80:	4619      	mov	r1, r3
 8006b82:	4663      	mov	r3, ip
 8006b84:	e000      	b.n	8006b88 <__aeabi_cdcmpeq>
 8006b86:	bf00      	nop

08006b88 <__aeabi_cdcmpeq>:
 8006b88:	b501      	push	{r0, lr}
 8006b8a:	f7ff ffb7 	bl	8006afc <__cmpdf2>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	bf48      	it	mi
 8006b92:	f110 0f00 	cmnmi.w	r0, #0
 8006b96:	bd01      	pop	{r0, pc}

08006b98 <__aeabi_dcmpeq>:
 8006b98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006b9c:	f7ff fff4 	bl	8006b88 <__aeabi_cdcmpeq>
 8006ba0:	bf0c      	ite	eq
 8006ba2:	2001      	moveq	r0, #1
 8006ba4:	2000      	movne	r0, #0
 8006ba6:	f85d fb08 	ldr.w	pc, [sp], #8
 8006baa:	bf00      	nop

08006bac <__aeabi_dcmplt>:
 8006bac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006bb0:	f7ff ffea 	bl	8006b88 <__aeabi_cdcmpeq>
 8006bb4:	bf34      	ite	cc
 8006bb6:	2001      	movcc	r0, #1
 8006bb8:	2000      	movcs	r0, #0
 8006bba:	f85d fb08 	ldr.w	pc, [sp], #8
 8006bbe:	bf00      	nop

08006bc0 <__aeabi_dcmple>:
 8006bc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006bc4:	f7ff ffe0 	bl	8006b88 <__aeabi_cdcmpeq>
 8006bc8:	bf94      	ite	ls
 8006bca:	2001      	movls	r0, #1
 8006bcc:	2000      	movhi	r0, #0
 8006bce:	f85d fb08 	ldr.w	pc, [sp], #8
 8006bd2:	bf00      	nop

08006bd4 <__aeabi_dcmpge>:
 8006bd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006bd8:	f7ff ffce 	bl	8006b78 <__aeabi_cdrcmple>
 8006bdc:	bf94      	ite	ls
 8006bde:	2001      	movls	r0, #1
 8006be0:	2000      	movhi	r0, #0
 8006be2:	f85d fb08 	ldr.w	pc, [sp], #8
 8006be6:	bf00      	nop

08006be8 <__aeabi_dcmpgt>:
 8006be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006bec:	f7ff ffc4 	bl	8006b78 <__aeabi_cdrcmple>
 8006bf0:	bf34      	ite	cc
 8006bf2:	2001      	movcc	r0, #1
 8006bf4:	2000      	movcs	r0, #0
 8006bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8006bfa:	bf00      	nop

08006bfc <__aeabi_dcmpun>:
 8006bfc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006c04:	d102      	bne.n	8006c0c <__aeabi_dcmpun+0x10>
 8006c06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006c0a:	d10a      	bne.n	8006c22 <__aeabi_dcmpun+0x26>
 8006c0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006c14:	d102      	bne.n	8006c1c <__aeabi_dcmpun+0x20>
 8006c16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006c1a:	d102      	bne.n	8006c22 <__aeabi_dcmpun+0x26>
 8006c1c:	f04f 0000 	mov.w	r0, #0
 8006c20:	4770      	bx	lr
 8006c22:	f04f 0001 	mov.w	r0, #1
 8006c26:	4770      	bx	lr

08006c28 <__aeabi_d2iz>:
 8006c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006c2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006c30:	d215      	bcs.n	8006c5e <__aeabi_d2iz+0x36>
 8006c32:	d511      	bpl.n	8006c58 <__aeabi_d2iz+0x30>
 8006c34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006c38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006c3c:	d912      	bls.n	8006c64 <__aeabi_d2iz+0x3c>
 8006c3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006c42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006c4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006c4e:	fa23 f002 	lsr.w	r0, r3, r2
 8006c52:	bf18      	it	ne
 8006c54:	4240      	negne	r0, r0
 8006c56:	4770      	bx	lr
 8006c58:	f04f 0000 	mov.w	r0, #0
 8006c5c:	4770      	bx	lr
 8006c5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006c62:	d105      	bne.n	8006c70 <__aeabi_d2iz+0x48>
 8006c64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8006c68:	bf08      	it	eq
 8006c6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8006c6e:	4770      	bx	lr
 8006c70:	f04f 0000 	mov.w	r0, #0
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop

08006c78 <__aeabi_d2f>:
 8006c78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006c7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8006c80:	bf24      	itt	cs
 8006c82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8006c86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8006c8a:	d90d      	bls.n	8006ca8 <__aeabi_d2f+0x30>
 8006c8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006c90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8006c94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8006c98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8006c9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8006ca0:	bf08      	it	eq
 8006ca2:	f020 0001 	biceq.w	r0, r0, #1
 8006ca6:	4770      	bx	lr
 8006ca8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8006cac:	d121      	bne.n	8006cf2 <__aeabi_d2f+0x7a>
 8006cae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8006cb2:	bfbc      	itt	lt
 8006cb4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8006cb8:	4770      	bxlt	lr
 8006cba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006cbe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8006cc2:	f1c2 0218 	rsb	r2, r2, #24
 8006cc6:	f1c2 0c20 	rsb	ip, r2, #32
 8006cca:	fa10 f30c 	lsls.w	r3, r0, ip
 8006cce:	fa20 f002 	lsr.w	r0, r0, r2
 8006cd2:	bf18      	it	ne
 8006cd4:	f040 0001 	orrne.w	r0, r0, #1
 8006cd8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006cdc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8006ce0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8006ce4:	ea40 000c 	orr.w	r0, r0, ip
 8006ce8:	fa23 f302 	lsr.w	r3, r3, r2
 8006cec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006cf0:	e7cc      	b.n	8006c8c <__aeabi_d2f+0x14>
 8006cf2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8006cf6:	d107      	bne.n	8006d08 <__aeabi_d2f+0x90>
 8006cf8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8006cfc:	bf1e      	ittt	ne
 8006cfe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8006d02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8006d06:	4770      	bxne	lr
 8006d08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8006d0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop

08006d18 <__aeabi_uldivmod>:
 8006d18:	b953      	cbnz	r3, 8006d30 <__aeabi_uldivmod+0x18>
 8006d1a:	b94a      	cbnz	r2, 8006d30 <__aeabi_uldivmod+0x18>
 8006d1c:	2900      	cmp	r1, #0
 8006d1e:	bf08      	it	eq
 8006d20:	2800      	cmpeq	r0, #0
 8006d22:	bf1c      	itt	ne
 8006d24:	f04f 31ff 	movne.w	r1, #4294967295
 8006d28:	f04f 30ff 	movne.w	r0, #4294967295
 8006d2c:	f000 b974 	b.w	8007018 <__aeabi_idiv0>
 8006d30:	f1ad 0c08 	sub.w	ip, sp, #8
 8006d34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8006d38:	f000 f806 	bl	8006d48 <__udivmoddi4>
 8006d3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006d40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d44:	b004      	add	sp, #16
 8006d46:	4770      	bx	lr

08006d48 <__udivmoddi4>:
 8006d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d4c:	9d08      	ldr	r5, [sp, #32]
 8006d4e:	4604      	mov	r4, r0
 8006d50:	468e      	mov	lr, r1
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d14d      	bne.n	8006df2 <__udivmoddi4+0xaa>
 8006d56:	428a      	cmp	r2, r1
 8006d58:	4694      	mov	ip, r2
 8006d5a:	d969      	bls.n	8006e30 <__udivmoddi4+0xe8>
 8006d5c:	fab2 f282 	clz	r2, r2
 8006d60:	b152      	cbz	r2, 8006d78 <__udivmoddi4+0x30>
 8006d62:	fa01 f302 	lsl.w	r3, r1, r2
 8006d66:	f1c2 0120 	rsb	r1, r2, #32
 8006d6a:	fa20 f101 	lsr.w	r1, r0, r1
 8006d6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8006d72:	ea41 0e03 	orr.w	lr, r1, r3
 8006d76:	4094      	lsls	r4, r2
 8006d78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8006d7c:	0c21      	lsrs	r1, r4, #16
 8006d7e:	fbbe f6f8 	udiv	r6, lr, r8
 8006d82:	fa1f f78c 	uxth.w	r7, ip
 8006d86:	fb08 e316 	mls	r3, r8, r6, lr
 8006d8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006d8e:	fb06 f107 	mul.w	r1, r6, r7
 8006d92:	4299      	cmp	r1, r3
 8006d94:	d90a      	bls.n	8006dac <__udivmoddi4+0x64>
 8006d96:	eb1c 0303 	adds.w	r3, ip, r3
 8006d9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8006d9e:	f080 811f 	bcs.w	8006fe0 <__udivmoddi4+0x298>
 8006da2:	4299      	cmp	r1, r3
 8006da4:	f240 811c 	bls.w	8006fe0 <__udivmoddi4+0x298>
 8006da8:	3e02      	subs	r6, #2
 8006daa:	4463      	add	r3, ip
 8006dac:	1a5b      	subs	r3, r3, r1
 8006dae:	b2a4      	uxth	r4, r4
 8006db0:	fbb3 f0f8 	udiv	r0, r3, r8
 8006db4:	fb08 3310 	mls	r3, r8, r0, r3
 8006db8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006dbc:	fb00 f707 	mul.w	r7, r0, r7
 8006dc0:	42a7      	cmp	r7, r4
 8006dc2:	d90a      	bls.n	8006dda <__udivmoddi4+0x92>
 8006dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8006dc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006dcc:	f080 810a 	bcs.w	8006fe4 <__udivmoddi4+0x29c>
 8006dd0:	42a7      	cmp	r7, r4
 8006dd2:	f240 8107 	bls.w	8006fe4 <__udivmoddi4+0x29c>
 8006dd6:	4464      	add	r4, ip
 8006dd8:	3802      	subs	r0, #2
 8006dda:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8006dde:	1be4      	subs	r4, r4, r7
 8006de0:	2600      	movs	r6, #0
 8006de2:	b11d      	cbz	r5, 8006dec <__udivmoddi4+0xa4>
 8006de4:	40d4      	lsrs	r4, r2
 8006de6:	2300      	movs	r3, #0
 8006de8:	e9c5 4300 	strd	r4, r3, [r5]
 8006dec:	4631      	mov	r1, r6
 8006dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006df2:	428b      	cmp	r3, r1
 8006df4:	d909      	bls.n	8006e0a <__udivmoddi4+0xc2>
 8006df6:	2d00      	cmp	r5, #0
 8006df8:	f000 80ef 	beq.w	8006fda <__udivmoddi4+0x292>
 8006dfc:	2600      	movs	r6, #0
 8006dfe:	e9c5 0100 	strd	r0, r1, [r5]
 8006e02:	4630      	mov	r0, r6
 8006e04:	4631      	mov	r1, r6
 8006e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e0a:	fab3 f683 	clz	r6, r3
 8006e0e:	2e00      	cmp	r6, #0
 8006e10:	d14a      	bne.n	8006ea8 <__udivmoddi4+0x160>
 8006e12:	428b      	cmp	r3, r1
 8006e14:	d302      	bcc.n	8006e1c <__udivmoddi4+0xd4>
 8006e16:	4282      	cmp	r2, r0
 8006e18:	f200 80f9 	bhi.w	800700e <__udivmoddi4+0x2c6>
 8006e1c:	1a84      	subs	r4, r0, r2
 8006e1e:	eb61 0303 	sbc.w	r3, r1, r3
 8006e22:	2001      	movs	r0, #1
 8006e24:	469e      	mov	lr, r3
 8006e26:	2d00      	cmp	r5, #0
 8006e28:	d0e0      	beq.n	8006dec <__udivmoddi4+0xa4>
 8006e2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8006e2e:	e7dd      	b.n	8006dec <__udivmoddi4+0xa4>
 8006e30:	b902      	cbnz	r2, 8006e34 <__udivmoddi4+0xec>
 8006e32:	deff      	udf	#255	; 0xff
 8006e34:	fab2 f282 	clz	r2, r2
 8006e38:	2a00      	cmp	r2, #0
 8006e3a:	f040 8092 	bne.w	8006f62 <__udivmoddi4+0x21a>
 8006e3e:	eba1 010c 	sub.w	r1, r1, ip
 8006e42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8006e46:	fa1f fe8c 	uxth.w	lr, ip
 8006e4a:	2601      	movs	r6, #1
 8006e4c:	0c20      	lsrs	r0, r4, #16
 8006e4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8006e52:	fb07 1113 	mls	r1, r7, r3, r1
 8006e56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8006e5a:	fb0e f003 	mul.w	r0, lr, r3
 8006e5e:	4288      	cmp	r0, r1
 8006e60:	d908      	bls.n	8006e74 <__udivmoddi4+0x12c>
 8006e62:	eb1c 0101 	adds.w	r1, ip, r1
 8006e66:	f103 38ff 	add.w	r8, r3, #4294967295
 8006e6a:	d202      	bcs.n	8006e72 <__udivmoddi4+0x12a>
 8006e6c:	4288      	cmp	r0, r1
 8006e6e:	f200 80cb 	bhi.w	8007008 <__udivmoddi4+0x2c0>
 8006e72:	4643      	mov	r3, r8
 8006e74:	1a09      	subs	r1, r1, r0
 8006e76:	b2a4      	uxth	r4, r4
 8006e78:	fbb1 f0f7 	udiv	r0, r1, r7
 8006e7c:	fb07 1110 	mls	r1, r7, r0, r1
 8006e80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8006e84:	fb0e fe00 	mul.w	lr, lr, r0
 8006e88:	45a6      	cmp	lr, r4
 8006e8a:	d908      	bls.n	8006e9e <__udivmoddi4+0x156>
 8006e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8006e90:	f100 31ff 	add.w	r1, r0, #4294967295
 8006e94:	d202      	bcs.n	8006e9c <__udivmoddi4+0x154>
 8006e96:	45a6      	cmp	lr, r4
 8006e98:	f200 80bb 	bhi.w	8007012 <__udivmoddi4+0x2ca>
 8006e9c:	4608      	mov	r0, r1
 8006e9e:	eba4 040e 	sub.w	r4, r4, lr
 8006ea2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8006ea6:	e79c      	b.n	8006de2 <__udivmoddi4+0x9a>
 8006ea8:	f1c6 0720 	rsb	r7, r6, #32
 8006eac:	40b3      	lsls	r3, r6
 8006eae:	fa22 fc07 	lsr.w	ip, r2, r7
 8006eb2:	ea4c 0c03 	orr.w	ip, ip, r3
 8006eb6:	fa20 f407 	lsr.w	r4, r0, r7
 8006eba:	fa01 f306 	lsl.w	r3, r1, r6
 8006ebe:	431c      	orrs	r4, r3
 8006ec0:	40f9      	lsrs	r1, r7
 8006ec2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8006ec6:	fa00 f306 	lsl.w	r3, r0, r6
 8006eca:	fbb1 f8f9 	udiv	r8, r1, r9
 8006ece:	0c20      	lsrs	r0, r4, #16
 8006ed0:	fa1f fe8c 	uxth.w	lr, ip
 8006ed4:	fb09 1118 	mls	r1, r9, r8, r1
 8006ed8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8006edc:	fb08 f00e 	mul.w	r0, r8, lr
 8006ee0:	4288      	cmp	r0, r1
 8006ee2:	fa02 f206 	lsl.w	r2, r2, r6
 8006ee6:	d90b      	bls.n	8006f00 <__udivmoddi4+0x1b8>
 8006ee8:	eb1c 0101 	adds.w	r1, ip, r1
 8006eec:	f108 3aff 	add.w	sl, r8, #4294967295
 8006ef0:	f080 8088 	bcs.w	8007004 <__udivmoddi4+0x2bc>
 8006ef4:	4288      	cmp	r0, r1
 8006ef6:	f240 8085 	bls.w	8007004 <__udivmoddi4+0x2bc>
 8006efa:	f1a8 0802 	sub.w	r8, r8, #2
 8006efe:	4461      	add	r1, ip
 8006f00:	1a09      	subs	r1, r1, r0
 8006f02:	b2a4      	uxth	r4, r4
 8006f04:	fbb1 f0f9 	udiv	r0, r1, r9
 8006f08:	fb09 1110 	mls	r1, r9, r0, r1
 8006f0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8006f10:	fb00 fe0e 	mul.w	lr, r0, lr
 8006f14:	458e      	cmp	lr, r1
 8006f16:	d908      	bls.n	8006f2a <__udivmoddi4+0x1e2>
 8006f18:	eb1c 0101 	adds.w	r1, ip, r1
 8006f1c:	f100 34ff 	add.w	r4, r0, #4294967295
 8006f20:	d26c      	bcs.n	8006ffc <__udivmoddi4+0x2b4>
 8006f22:	458e      	cmp	lr, r1
 8006f24:	d96a      	bls.n	8006ffc <__udivmoddi4+0x2b4>
 8006f26:	3802      	subs	r0, #2
 8006f28:	4461      	add	r1, ip
 8006f2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8006f2e:	fba0 9402 	umull	r9, r4, r0, r2
 8006f32:	eba1 010e 	sub.w	r1, r1, lr
 8006f36:	42a1      	cmp	r1, r4
 8006f38:	46c8      	mov	r8, r9
 8006f3a:	46a6      	mov	lr, r4
 8006f3c:	d356      	bcc.n	8006fec <__udivmoddi4+0x2a4>
 8006f3e:	d053      	beq.n	8006fe8 <__udivmoddi4+0x2a0>
 8006f40:	b15d      	cbz	r5, 8006f5a <__udivmoddi4+0x212>
 8006f42:	ebb3 0208 	subs.w	r2, r3, r8
 8006f46:	eb61 010e 	sbc.w	r1, r1, lr
 8006f4a:	fa01 f707 	lsl.w	r7, r1, r7
 8006f4e:	fa22 f306 	lsr.w	r3, r2, r6
 8006f52:	40f1      	lsrs	r1, r6
 8006f54:	431f      	orrs	r7, r3
 8006f56:	e9c5 7100 	strd	r7, r1, [r5]
 8006f5a:	2600      	movs	r6, #0
 8006f5c:	4631      	mov	r1, r6
 8006f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f62:	f1c2 0320 	rsb	r3, r2, #32
 8006f66:	40d8      	lsrs	r0, r3
 8006f68:	fa0c fc02 	lsl.w	ip, ip, r2
 8006f6c:	fa21 f303 	lsr.w	r3, r1, r3
 8006f70:	4091      	lsls	r1, r2
 8006f72:	4301      	orrs	r1, r0
 8006f74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8006f78:	fa1f fe8c 	uxth.w	lr, ip
 8006f7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8006f80:	fb07 3610 	mls	r6, r7, r0, r3
 8006f84:	0c0b      	lsrs	r3, r1, #16
 8006f86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8006f8a:	fb00 f60e 	mul.w	r6, r0, lr
 8006f8e:	429e      	cmp	r6, r3
 8006f90:	fa04 f402 	lsl.w	r4, r4, r2
 8006f94:	d908      	bls.n	8006fa8 <__udivmoddi4+0x260>
 8006f96:	eb1c 0303 	adds.w	r3, ip, r3
 8006f9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8006f9e:	d22f      	bcs.n	8007000 <__udivmoddi4+0x2b8>
 8006fa0:	429e      	cmp	r6, r3
 8006fa2:	d92d      	bls.n	8007000 <__udivmoddi4+0x2b8>
 8006fa4:	3802      	subs	r0, #2
 8006fa6:	4463      	add	r3, ip
 8006fa8:	1b9b      	subs	r3, r3, r6
 8006faa:	b289      	uxth	r1, r1
 8006fac:	fbb3 f6f7 	udiv	r6, r3, r7
 8006fb0:	fb07 3316 	mls	r3, r7, r6, r3
 8006fb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006fb8:	fb06 f30e 	mul.w	r3, r6, lr
 8006fbc:	428b      	cmp	r3, r1
 8006fbe:	d908      	bls.n	8006fd2 <__udivmoddi4+0x28a>
 8006fc0:	eb1c 0101 	adds.w	r1, ip, r1
 8006fc4:	f106 38ff 	add.w	r8, r6, #4294967295
 8006fc8:	d216      	bcs.n	8006ff8 <__udivmoddi4+0x2b0>
 8006fca:	428b      	cmp	r3, r1
 8006fcc:	d914      	bls.n	8006ff8 <__udivmoddi4+0x2b0>
 8006fce:	3e02      	subs	r6, #2
 8006fd0:	4461      	add	r1, ip
 8006fd2:	1ac9      	subs	r1, r1, r3
 8006fd4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8006fd8:	e738      	b.n	8006e4c <__udivmoddi4+0x104>
 8006fda:	462e      	mov	r6, r5
 8006fdc:	4628      	mov	r0, r5
 8006fde:	e705      	b.n	8006dec <__udivmoddi4+0xa4>
 8006fe0:	4606      	mov	r6, r0
 8006fe2:	e6e3      	b.n	8006dac <__udivmoddi4+0x64>
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	e6f8      	b.n	8006dda <__udivmoddi4+0x92>
 8006fe8:	454b      	cmp	r3, r9
 8006fea:	d2a9      	bcs.n	8006f40 <__udivmoddi4+0x1f8>
 8006fec:	ebb9 0802 	subs.w	r8, r9, r2
 8006ff0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8006ff4:	3801      	subs	r0, #1
 8006ff6:	e7a3      	b.n	8006f40 <__udivmoddi4+0x1f8>
 8006ff8:	4646      	mov	r6, r8
 8006ffa:	e7ea      	b.n	8006fd2 <__udivmoddi4+0x28a>
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	e794      	b.n	8006f2a <__udivmoddi4+0x1e2>
 8007000:	4640      	mov	r0, r8
 8007002:	e7d1      	b.n	8006fa8 <__udivmoddi4+0x260>
 8007004:	46d0      	mov	r8, sl
 8007006:	e77b      	b.n	8006f00 <__udivmoddi4+0x1b8>
 8007008:	3b02      	subs	r3, #2
 800700a:	4461      	add	r1, ip
 800700c:	e732      	b.n	8006e74 <__udivmoddi4+0x12c>
 800700e:	4630      	mov	r0, r6
 8007010:	e709      	b.n	8006e26 <__udivmoddi4+0xde>
 8007012:	4464      	add	r4, ip
 8007014:	3802      	subs	r0, #2
 8007016:	e742      	b.n	8006e9e <__udivmoddi4+0x156>

08007018 <__aeabi_idiv0>:
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop

0800701c <buf_to_float_normed>:
 */
void buf_to_float_normed(int16_t *pInSignal, float32_t *pOutSignal, uint32_t len)
{
  for (uint32_t i = 0; i < len; i++)
  {
    pOutSignal[i] = (float32_t) pInSignal[i] / (1 << 15);
 800701c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8007044 <buf_to_float_normed+0x28>
 8007020:	3802      	subs	r0, #2
 8007022:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  for (uint32_t i = 0; i < len; i++)
 8007026:	4291      	cmp	r1, r2
 8007028:	d100      	bne.n	800702c <buf_to_float_normed+0x10>
  }
}
 800702a:	4770      	bx	lr
    pOutSignal[i] = (float32_t) pInSignal[i] / (1 << 15);
 800702c:	f930 3f02 	ldrsh.w	r3, [r0, #2]!
 8007030:	ee07 3a90 	vmov	s15, r3
 8007034:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007038:	ee67 7a87 	vmul.f32	s15, s15, s14
 800703c:	ece1 7a01 	vstmia	r1!, {s15}
  for (uint32_t i = 0; i < len; i++)
 8007040:	e7f1      	b.n	8007026 <buf_to_float_normed+0xa>
 8007042:	bf00      	nop
 8007044:	38000000 	.word	0x38000000

08007048 <SpectrogramColumn>:
 * @param      *pInSignal  points to the in-place input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Spectrogram column.
 * @return     None
 */
void SpectrogramColumn(SpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8007048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t frame_len = S->FrameLen;
  uint32_t n_fft = S->FFTLen;
 800704c:	e9d0 9604 	ldrd	r9, r6, [r0, #16]
{
 8007050:	460f      	mov	r7, r1
  float32_t *scratch_buffer = S->pScratch;
 8007052:	f8d0 8018 	ldr.w	r8, [r0, #24]
{
 8007056:	ed2d 8b02 	vpush	{d8}
 800705a:	4605      	mov	r5, r0
 800705c:	4614      	mov	r4, r2
  float32_t first_energy;
  float32_t last_energy;

  /* In-place window application (on signal length, not entire n_fft) */
  /* @note: OK to typecast because hannWin content is not modified */
  arm_mult_f32(pInSignal, S->pWindow, pInSignal, frame_len);
 800705e:	464b      	mov	r3, r9
 8007060:	460a      	mov	r2, r1
 8007062:	6881      	ldr	r1, [r0, #8]
 8007064:	4638      	mov	r0, r7
 8007066:	f005 f8b1 	bl	800c1cc <arm_mult_f32>

  /* Zero pad if signal frame length is shorter than n_fft */
  memset(&pInSignal[frame_len], 0, n_fft - frame_len);
 800706a:	eba6 0209 	sub.w	r2, r6, r9
 800706e:	2100      	movs	r1, #0
 8007070:	eb07 0089 	add.w	r0, r7, r9, lsl #2
 8007074:	f005 ffaf 	bl	800cfd6 <memset>

  /* FFT */
  arm_rfft_fast_f32(S->pRfft, pInSignal, scratch_buffer, 0);
 8007078:	2300      	movs	r3, #0
 800707a:	4639      	mov	r1, r7
 800707c:	6828      	ldr	r0, [r5, #0]
 800707e:	4642      	mov	r2, r8
 8007080:	f004 fc56 	bl	800b930 <arm_rfft_fast_f32>

  /* Power spectrum */
  first_energy = scratch_buffer[0] * scratch_buffer[0];
 8007084:	ed98 7a00 	vldr	s14, [r8]
  last_energy = scratch_buffer[1] * scratch_buffer[1];
 8007088:	edd8 7a01 	vldr	s15, [r8, #4]
  first_energy = scratch_buffer[0] * scratch_buffer[0];
 800708c:	ee27 7a07 	vmul.f32	s14, s14, s14
  pOutCol[0] = first_energy;
 8007090:	4627      	mov	r7, r4
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 8007092:	0876      	lsrs	r6, r6, #1
  pOutCol[0] = first_energy;
 8007094:	eca7 7a01 	vstmia	r7!, {s14}
  last_energy = scratch_buffer[1] * scratch_buffer[1];
 8007098:	ee27 8aa7 	vmul.f32	s16, s15, s15
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 800709c:	1e72      	subs	r2, r6, #1
 800709e:	4639      	mov	r1, r7
 80070a0:	f108 0008 	add.w	r0, r8, #8
 80070a4:	f005 f822 	bl	800c0ec <arm_cmplx_mag_squared_f32>
  pOutCol[n_fft / 2] = last_energy;
 80070a8:	00b1      	lsls	r1, r6, #2
 80070aa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80070ae:	ed86 8a00 	vstr	s16, [r6]

  /* Magnitude spectrum */
  if (S->Type == SPECTRUM_TYPE_MAGNITUDE)
 80070b2:	792b      	ldrb	r3, [r5, #4]
 80070b4:	b973      	cbnz	r3, 80070d4 <SpectrogramColumn+0x8c>
 80070b6:	440f      	add	r7, r1
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80070b8:	2500      	movs	r5, #0
  {
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
    {
      arm_sqrt_f32(pOutCol[i], &pOutCol[i]);
 80070ba:	ecb4 0a01 	vldmia	r4!, {s0}
 80070be:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80070c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070c6:	db09      	blt.n	80070dc <SpectrogramColumn+0x94>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 80070c8:	f009 fe32 	bl	8010d30 <sqrtf>
 80070cc:	ed04 0a01 	vstr	s0, [r4, #-4]
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 80070d0:	42bc      	cmp	r4, r7
 80070d2:	d1f2      	bne.n	80070ba <SpectrogramColumn+0x72>
    }
  }
}
 80070d4:	ecbd 8b02 	vpop	{d8}
 80070d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 80070dc:	f844 5c04 	str.w	r5, [r4, #-4]
      return (ARM_MATH_ARGUMENT_ERROR);
 80070e0:	e7f6      	b.n	80070d0 <SpectrogramColumn+0x88>

080070e2 <LogMelSpectrogramColumn>:
 * @param      *pInSignal  points to input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Log-Mel Spectrogram column.
 * @return     None
 */
void LogMelSpectrogramColumn(LogMelSpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 80070e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t n_mels = S->MelSpectrogramConf->MelFilter->NumMels;
 80070e4:	6803      	ldr	r3, [r0, #0]
{
 80070e6:	ed2d 8b02 	vpush	{d8}
 80070ea:	4607      	mov	r7, r0
  float32_t top_dB = S->TopdB;
 80070ec:	ed90 8a03 	vldr	s16, [r0, #12]
  float32_t ref = S->Ref;
 80070f0:	edd0 8a02 	vldr	s17, [r0, #8]
  float32_t *tmp_buffer = S->MelSpectrogramConf->SpectrogramConf->pScratch;
 80070f4:	6818      	ldr	r0, [r3, #0]
{
 80070f6:	4614      	mov	r4, r2
  float32_t *tmp_buffer = S->MelSpectrogramConf->SpectrogramConf->pScratch;
 80070f8:	6985      	ldr	r5, [r0, #24]
  uint32_t n_mels = S->MelSpectrogramConf->MelFilter->NumMels;
 80070fa:	685a      	ldr	r2, [r3, #4]
 80070fc:	6916      	ldr	r6, [r2, #16]

  SpectrogramColumn(S->MelSpectrogramConf->SpectrogramConf, pInSignal, tmp_buffer);
 80070fe:	462a      	mov	r2, r5
 8007100:	f7ff ffa2 	bl	8007048 <SpectrogramColumn>

  /* Mel Filter Banks Application to power spectrum column */
  MelFilterbank(S->MelSpectrogramConf->MelFilter, tmp_buffer, pOutCol);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	4629      	mov	r1, r5
 8007108:	6858      	ldr	r0, [r3, #4]
 800710a:	4622      	mov	r2, r4
 800710c:	f000 fdb4 	bl	8007c78 <MelFilterbank>

  /* Scaling */
  for (uint32_t i = 0; i < n_mels; i++) {
 8007110:	4625      	mov	r5, r4
 8007112:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007116:	4623      	mov	r3, r4
 8007118:	42b3      	cmp	r3, r6
 800711a:	d10f      	bne.n	800713c <LogMelSpectrogramColumn+0x5a>
 800711c:	4623      	mov	r3, r4
  }

  /* Avoid log of zero or a negative number */
  for (uint32_t i = 0; i < n_mels; i++) {
    if (pOutCol[i] <= 0.0f) {
      pOutCol[i] = FLT_MIN;
 800711e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  for (uint32_t i = 0; i < n_mels; i++) {
 8007122:	42b3      	cmp	r3, r6
 8007124:	d111      	bne.n	800714a <LogMelSpectrogramColumn+0x68>
    }
  }

  if (S->LogFormula == LOGMELSPECTROGRAM_SCALE_DB)
 8007126:	793b      	ldrb	r3, [r7, #4]
 8007128:	b343      	cbz	r3, 800717c <LogMelSpectrogramColumn+0x9a>
    }
  }
  else
  {
    /* Convert power spectrogram to log scale */
    for (uint32_t i = 0; i < n_mels; i++) {
 800712a:	42b5      	cmp	r5, r6
 800712c:	d023      	beq.n	8007176 <LogMelSpectrogramColumn+0x94>
      pOutCol[i] = logf(pOutCol[i]);
 800712e:	ed95 0a00 	vldr	s0, [r5]
 8007132:	f009 fd1f 	bl	8010b74 <logf>
 8007136:	eca5 0a01 	vstmia	r5!, {s0}
    for (uint32_t i = 0; i < n_mels; i++) {
 800713a:	e7f6      	b.n	800712a <LogMelSpectrogramColumn+0x48>
    pOutCol[i] /= ref;
 800713c:	ed93 7a00 	vldr	s14, [r3]
 8007140:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8007144:	ece3 7a01 	vstmia	r3!, {s15}
  for (uint32_t i = 0; i < n_mels; i++) {
 8007148:	e7e6      	b.n	8007118 <LogMelSpectrogramColumn+0x36>
    if (pOutCol[i] <= 0.0f) {
 800714a:	edd3 7a00 	vldr	s15, [r3]
 800714e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      pOutCol[i] = FLT_MIN;
 8007156:	bf98      	it	ls
 8007158:	601a      	strls	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++) {
 800715a:	3304      	adds	r3, #4
 800715c:	e7e1      	b.n	8007122 <LogMelSpectrogramColumn+0x40>
      pOutCol[i] = 10.0f * log10f(pOutCol[i]);
 800715e:	ed94 0a00 	vldr	s0, [r4]
 8007162:	f009 fd35 	bl	8010bd0 <log10f>
 8007166:	ee20 0a28 	vmul.f32	s0, s0, s17
 800716a:	eca4 0a01 	vstmia	r4!, {s0}
    for (uint32_t i = 0; i < n_mels; i++) {
 800716e:	42b4      	cmp	r4, r6
 8007170:	d1f5      	bne.n	800715e <LogMelSpectrogramColumn+0x7c>
    for (uint32_t i = 0; i < n_mels; i++) {
 8007172:	42b5      	cmp	r5, r6
 8007174:	d105      	bne.n	8007182 <LogMelSpectrogramColumn+0xa0>
    }
  }

}
 8007176:	ecbd 8b02 	vpop	{d8}
 800717a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pOutCol[i] = 10.0f * log10f(pOutCol[i]);
 800717c:	eef2 8a04 	vmov.f32	s17, #36	; 0x41200000  10.0
 8007180:	e7f5      	b.n	800716e <LogMelSpectrogramColumn+0x8c>
      pOutCol[i] = (pOutCol[i] < -top_dB) ? (-top_dB) : (pOutCol[i]);
 8007182:	ed95 7a00 	vldr	s14, [r5]
 8007186:	eef1 7a48 	vneg.f32	s15, s16
 800718a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800718e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007192:	bf58      	it	pl
 8007194:	eef0 7a47 	vmovpl.f32	s15, s14
 8007198:	ece5 7a01 	vstmia	r5!, {s15}
    for (uint32_t i = 0; i < n_mels; i++) {
 800719c:	e7e9      	b.n	8007172 <LogMelSpectrogramColumn+0x90>
	...

080071a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80071a0:	b570      	push	{r4, r5, r6, lr}
 80071a2:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80071a4:	2414      	movs	r4, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80071a6:	2244      	movs	r2, #68	; 0x44
 80071a8:	2100      	movs	r1, #0
 80071aa:	a805      	add	r0, sp, #20
 80071ac:	f005 ff13 	bl	800cfd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80071b0:	4622      	mov	r2, r4
 80071b2:	2100      	movs	r1, #0
 80071b4:	4668      	mov	r0, sp
 80071b6:	f005 ff0e 	bl	800cfd6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80071ba:	2288      	movs	r2, #136	; 0x88
 80071bc:	2100      	movs	r1, #0
 80071be:	a816      	add	r0, sp, #88	; 0x58
 80071c0:	f005 ff09 	bl	800cfd6 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80071c4:	f002 fc5e 	bl	8009a84 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80071c8:	4a28      	ldr	r2, [pc, #160]	; (800726c <SystemClock_Config+0xcc>)
 80071ca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80071ce:	f023 0318 	bic.w	r3, r3, #24
 80071d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80071d6:	2100      	movs	r1, #0
 80071d8:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80071da:	2502      	movs	r5, #2
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80071dc:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80071e0:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80071e2:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80071e4:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80071e6:	2607      	movs	r6, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80071e8:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80071ea:	e9cd 540f 	strd	r5, r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80071ee:	e9cd 3612 	strd	r3, r6, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80071f2:	e9cd 5514 	strd	r5, r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80071f6:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80071f8:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80071fa:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80071fc:	f002 fd98 	bl	8009d30 <HAL_RCC_OscConfig>
 8007200:	b108      	cbz	r0, 8007206 <SystemClock_Config+0x66>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007202:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8007204:	e7fe      	b.n	8007204 <SystemClock_Config+0x64>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007206:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800720a:	220f      	movs	r2, #15
 800720c:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800720e:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8007210:	2104      	movs	r1, #4
 8007212:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007214:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8007218:	f003 f810 	bl	800a23c <HAL_RCC_ClockConfig>
 800721c:	b108      	cbz	r0, 8007222 <SystemClock_Config+0x82>
 800721e:	b672      	cpsid	i
	while (1)
 8007220:	e7fe      	b.n	8007220 <SystemClock_Config+0x80>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8007222:	4b13      	ldr	r3, [pc, #76]	; (8007270 <SystemClock_Config+0xd0>)
 8007224:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8007226:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800722a:	9331      	str	r3, [sp, #196]	; 0xc4
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800722c:	2318      	movs	r3, #24
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800722e:	e9cd 3619 	strd	r3, r6, [sp, #100]	; 0x64
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007232:	9024      	str	r0, [sp, #144]	; 0x90
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8007234:	9026      	str	r0, [sp, #152]	; 0x98
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8007236:	902b      	str	r0, [sp, #172]	; 0xac
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8007238:	9036      	str	r0, [sp, #216]	; 0xd8
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800723a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800723e:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8007240:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8007244:	e9cd 551b 	strd	r5, r5, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8007248:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800724a:	f003 f9b5 	bl	800a5b8 <HAL_RCCEx_PeriphCLKConfig>
 800724e:	b108      	cbz	r0, 8007254 <SystemClock_Config+0xb4>
 8007250:	b672      	cpsid	i
	while (1)
 8007252:	e7fe      	b.n	8007252 <SystemClock_Config+0xb2>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8007254:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007258:	f002 fc24 	bl	8009aa4 <HAL_PWREx_ControlVoltageScaling>
 800725c:	b108      	cbz	r0, 8007262 <SystemClock_Config+0xc2>
 800725e:	b672      	cpsid	i
	while (1)
 8007260:	e7fe      	b.n	8007260 <SystemClock_Config+0xc0>
  HAL_RCCEx_EnableMSIPLLMode();
 8007262:	f003 fc35 	bl	800aad0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8007266:	b038      	add	sp, #224	; 0xe0
 8007268:	bd70      	pop	{r4, r5, r6, pc}
 800726a:	bf00      	nop
 800726c:	40021000 	.word	0x40021000
 8007270:	00012085 	.word	0x00012085

08007274 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
	if (Instance == 0 ){
 8007274:	b938      	cbnz	r0, 8007286 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x12>
		DmaRecHalfBuffCplt = 1;
 8007276:	4b04      	ldr	r3, [pc, #16]	; (8007288 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x14>)
 8007278:	2201      	movs	r2, #1
 800727a:	601a      	str	r2, [r3, #0]
		sample=sample + (BUFFER_SIZE/2);
 800727c:	4a03      	ldr	r2, [pc, #12]	; (800728c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x18>)
 800727e:	6813      	ldr	r3, [r2, #0]
 8007280:	f603 13f6 	addw	r3, r3, #2550	; 0x9f6
 8007284:	6013      	str	r3, [r2, #0]
}
 8007286:	4770      	bx	lr
 8007288:	20000cc0 	.word	0x20000cc0
 800728c:	2000ed10 	.word	0x2000ed10

08007290 <HAL_UART_TxHalfCpltCallback>:
	Dma_Uart_HCplt = 1;
 8007290:	4b01      	ldr	r3, [pc, #4]	; (8007298 <HAL_UART_TxHalfCpltCallback+0x8>)
 8007292:	2201      	movs	r2, #1
 8007294:	601a      	str	r2, [r3, #0]
}
 8007296:	4770      	bx	lr
 8007298:	20000cc8 	.word	0x20000cc8

0800729c <HAL_UART_TxCpltCallback>:
	Dma_Uart_Cplt = 1;
 800729c:	4b01      	ldr	r3, [pc, #4]	; (80072a4 <HAL_UART_TxCpltCallback+0x8>)
 800729e:	2201      	movs	r2, #1
 80072a0:	601a      	str	r2, [r3, #0]
}
 80072a2:	4770      	bx	lr
 80072a4:	20000cc4 	.word	0x20000cc4

080072a8 <Preprocessing_Init>:
{
 80072a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (Window_Init(pWindowFuncBuffer, FRAME_LEN, WINDOW_HANN) != 0)
 80072aa:	4c20      	ldr	r4, [pc, #128]	; (800732c <Preprocessing_Init+0x84>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80072b2:	4620      	mov	r0, r4
 80072b4:	f000 ffcc 	bl	8008250 <Window_Init>
 80072b8:	4606      	mov	r6, r0
 80072ba:	b100      	cbz	r0, 80072be <Preprocessing_Init+0x16>
		while(1);
 80072bc:	e7fe      	b.n	80072bc <Preprocessing_Init+0x14>
	arm_rfft_fast_init_f32(&S_Rfft, FFT_LEN);
 80072be:	4f1c      	ldr	r7, [pc, #112]	; (8007330 <Preprocessing_Init+0x88>)
	S_Spectr.pRfft    = &S_Rfft;
 80072c0:	4d1c      	ldr	r5, [pc, #112]	; (8007334 <Preprocessing_Init+0x8c>)
	arm_rfft_fast_init_f32(&S_Rfft, FFT_LEN);
 80072c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80072c6:	4638      	mov	r0, r7
 80072c8:	f004 fa4e 	bl	800b768 <arm_rfft_fast_init_f32>
	S_Spectr.pScratch = pSpectrScratchBuffer;
 80072cc:	481a      	ldr	r0, [pc, #104]	; (8007338 <Preprocessing_Init+0x90>)
	S_Spectr.pWindow  = pWindowFuncBuffer;
 80072ce:	60ac      	str	r4, [r5, #8]
	S_MelFilter.pStartIndices = pMelFilterStartIndices;
 80072d0:	4c1a      	ldr	r4, [pc, #104]	; (800733c <Preprocessing_Init+0x94>)
	S_Spectr.pScratch = pSpectrScratchBuffer;
 80072d2:	61a8      	str	r0, [r5, #24]
	S_MelFilter.pStartIndices = pMelFilterStartIndices;
 80072d4:	481a      	ldr	r0, [pc, #104]	; (8007340 <Preprocessing_Init+0x98>)
 80072d6:	6020      	str	r0, [r4, #0]
	S_MelFilter.pStopIndices  = pMelFilterStopIndices;
 80072d8:	481a      	ldr	r0, [pc, #104]	; (8007344 <Preprocessing_Init+0x9c>)
 80072da:	6060      	str	r0, [r4, #4]
	S_MelFilter.pCoefficients = pMelFilterCoefs;
 80072dc:	481a      	ldr	r0, [pc, #104]	; (8007348 <Preprocessing_Init+0xa0>)
 80072de:	60a0      	str	r0, [r4, #8]
	S_Spectr.FrameLen = FRAME_LEN;
 80072e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072e4:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
	S_MelFilter.NumMels   = NUM_MELS;
 80072e8:	201e      	movs	r0, #30
	S_MelFilter.FFTLen    = FFT_LEN;
 80072ea:	e9c4 0204 	strd	r0, r2, [r4, #16]
	S_Spectr.FrameLen = FRAME_LEN;
 80072ee:	e9c5 1203 	strd	r1, r2, [r5, #12]
	S_Spectr.FFTLen   = FFT_LEN;
 80072f2:	616a      	str	r2, [r5, #20]
	S_MelFilter.FMin      = 0.0;
 80072f4:	2200      	movs	r2, #0
	S_Spectr.Type     = SPECTRUM_TYPE_POWER;
 80072f6:	2301      	movs	r3, #1
	S_MelFilter.FMin      = 0.0;
 80072f8:	61e2      	str	r2, [r4, #28]
	MelFilterbank_Init(&S_MelFilter);
 80072fa:	4620      	mov	r0, r4
	S_MelFilter.FMax      = S_MelFilter.SampRate / 2.0;
 80072fc:	4a13      	ldr	r2, [pc, #76]	; (800734c <Preprocessing_Init+0xa4>)
	S_Spectr.Type     = SPECTRUM_TYPE_POWER;
 80072fe:	712b      	strb	r3, [r5, #4]
	S_MelFilter.Mel2F     = 1;
 8007300:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
	S_MelFilter.FMax      = S_MelFilter.SampRate / 2.0;
 8007304:	6222      	str	r2, [r4, #32]
	S_Spectr.pRfft    = &S_Rfft;
 8007306:	602f      	str	r7, [r5, #0]
	S_MelFilter.SampRate  = SAMPLE_RATE;
 8007308:	61a1      	str	r1, [r4, #24]
	S_MelFilter.Formula   = MEL_HTK;
 800730a:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	MelFilterbank_Init(&S_MelFilter);
 800730e:	f000 fbe9 	bl	8007ae4 <MelFilterbank_Init>
	S_LogMelSpectr.MelSpectrogramConf = &S_MelSpectr;
 8007312:	4b0f      	ldr	r3, [pc, #60]	; (8007350 <Preprocessing_Init+0xa8>)
	S_MelSpectr.SpectrogramConf = &S_Spectr;
 8007314:	4a0f      	ldr	r2, [pc, #60]	; (8007354 <Preprocessing_Init+0xac>)
	S_LogMelSpectr.MelSpectrogramConf = &S_MelSpectr;
 8007316:	601a      	str	r2, [r3, #0]
	S_MelSpectr.MelFilter       = &S_MelFilter;
 8007318:	e9c2 5400 	strd	r5, r4, [r2]
	S_LogMelSpectr.Ref = 1.0;
 800731c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007320:	609a      	str	r2, [r3, #8]
	S_LogMelSpectr.LogFormula = LOGMELSPECTROGRAM_SCALE_DB;
 8007322:	711e      	strb	r6, [r3, #4]
	S_LogMelSpectr.TopdB = 80 ;
 8007324:	4a0c      	ldr	r2, [pc, #48]	; (8007358 <Preprocessing_Init+0xb0>)
 8007326:	60da      	str	r2, [r3, #12]
}
 8007328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800732a:	bf00      	nop
 800732c:	10000ffc 	.word	0x10000ffc
 8007330:	20001c14 	.word	0x20001c14
 8007334:	20001c2c 	.word	0x20001c2c
 8007338:	2000dd0c 	.word	0x2000dd0c
 800733c:	20001bdc 	.word	0x20001bdc
 8007340:	2000dc1c 	.word	0x2000dc1c
 8007344:	2000dc94 	.word	0x2000dc94
 8007348:	10000000 	.word	0x10000000
 800734c:	45fa0000 	.word	0x45fa0000
 8007350:	20001bcc 	.word	0x20001bcc
 8007354:	20001c0c 	.word	0x20001c0c
 8007358:	42a00000 	.word	0x42a00000

0800735c <main>:
{
 800735c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007360:	4dbf      	ldr	r5, [pc, #764]	; (8007660 <main+0x304>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007362:	f8df a324 	ldr.w	sl, [pc, #804]	; 8007688 <main+0x32c>
{
 8007366:	b095      	sub	sp, #84	; 0x54
	initialise_monitor_handles();
 8007368:	f005 fc72 	bl	800cc50 <initialise_monitor_handles>
  HAL_Init();
 800736c:	f001 fd60 	bl	8008e30 <HAL_Init>
  SystemClock_Config();
 8007370:	f7ff ff16 	bl	80071a0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007374:	2214      	movs	r2, #20
 8007376:	2100      	movs	r1, #0
 8007378:	a808      	add	r0, sp, #32
 800737a:	f005 fe2c 	bl	800cfd6 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800737e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8007380:	48b8      	ldr	r0, [pc, #736]	; (8007664 <main+0x308>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007382:	f043 0310 	orr.w	r3, r3, #16
 8007386:	64eb      	str	r3, [r5, #76]	; 0x4c
 8007388:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800738a:	f003 0310 	and.w	r3, r3, #16
 800738e:	9303      	str	r3, [sp, #12]
 8007390:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007392:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8007394:	f043 0304 	orr.w	r3, r3, #4
 8007398:	64eb      	str	r3, [r5, #76]	; 0x4c
 800739a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800739c:	f003 0304 	and.w	r3, r3, #4
 80073a0:	9304      	str	r3, [sp, #16]
 80073a2:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80073a4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80073a6:	f043 0301 	orr.w	r3, r3, #1
 80073aa:	64eb      	str	r3, [r5, #76]	; 0x4c
 80073ac:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	9305      	str	r3, [sp, #20]
 80073b4:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80073b6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80073b8:	f043 0302 	orr.w	r3, r3, #2
 80073bc:	64eb      	str	r3, [r5, #76]	; 0x4c
 80073be:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	9306      	str	r3, [sp, #24]
 80073c6:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80073c8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80073ca:	f043 0308 	orr.w	r3, r3, #8
 80073ce:	64eb      	str	r3, [r5, #76]	; 0x4c
 80073d0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80073d2:	f003 0308 	and.w	r3, r3, #8
 80073d6:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80073d8:	2200      	movs	r2, #0
 80073da:	f44f 718a 	mov.w	r1, #276	; 0x114
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80073de:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80073e0:	f002 fa10 	bl	8009804 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80073e4:	2200      	movs	r2, #0
 80073e6:	f248 1104 	movw	r1, #33028	; 0x8104
 80073ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80073ee:	f002 fa09 	bl	8009804 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80073f2:	489d      	ldr	r0, [pc, #628]	; (8007668 <main+0x30c>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	f24f 0114 	movw	r1, #61460	; 0xf014
 80073fa:	f002 fa03 	bl	8009804 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80073fe:	489b      	ldr	r0, [pc, #620]	; (800766c <main+0x310>)
 8007400:	2200      	movs	r2, #0
 8007402:	f241 0181 	movw	r1, #4225	; 0x1081
 8007406:	f002 f9fd 	bl	8009804 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800740a:	4898      	ldr	r0, [pc, #608]	; (800766c <main+0x310>)
 800740c:	2201      	movs	r2, #1
 800740e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007412:	f002 f9f7 	bl	8009804 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8007416:	4896      	ldr	r0, [pc, #600]	; (8007670 <main+0x314>)
 8007418:	2200      	movs	r2, #0
 800741a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800741e:	f002 f9f1 	bl	8009804 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8007422:	4891      	ldr	r0, [pc, #580]	; (8007668 <main+0x30c>)
 8007424:	2201      	movs	r2, #1
 8007426:	2120      	movs	r1, #32
 8007428:	f002 f9ec 	bl	8009804 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800742c:	2201      	movs	r2, #1
 800742e:	4611      	mov	r1, r2
 8007430:	488c      	ldr	r0, [pc, #560]	; (8007664 <main+0x308>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007432:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8007434:	f002 f9e6 	bl	8009804 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007438:	2601      	movs	r6, #1
 800743a:	f240 1315 	movw	r3, #277	; 0x115
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800743e:	4889      	ldr	r0, [pc, #548]	; (8007664 <main+0x308>)
 8007440:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007442:	e9cd 3608 	strd	r3, r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007446:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800744a:	f002 f8fd 	bl	8009648 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800744e:	236a      	movs	r3, #106	; 0x6a
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007450:	4884      	ldr	r0, [pc, #528]	; (8007664 <main+0x308>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007452:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007454:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007456:	e9cd 3a08 	strd	r3, sl, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800745a:	f002 f8f5 	bl	8009648 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800745e:	4b85      	ldr	r3, [pc, #532]	; (8007674 <main+0x318>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007460:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007462:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007466:	e9cd 0308 	strd	r0, r3, [sp, #32]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800746a:	a908      	add	r1, sp, #32
 800746c:	4880      	ldr	r0, [pc, #512]	; (8007670 <main+0x314>)
 800746e:	f002 f8eb 	bl	8009648 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8007472:	f04f 0b0b 	mov.w	fp, #11
 8007476:	233f      	movs	r3, #63	; 0x3f
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007478:	487d      	ldr	r0, [pc, #500]	; (8007670 <main+0x314>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800747a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800747c:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800747e:	2702      	movs	r7, #2
 8007480:	f04f 0903 	mov.w	r9, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8007484:	e9cd 3b08 	strd	r3, fp, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007488:	f04f 0808 	mov.w	r8, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800748c:	f002 f8dc 	bl	8009648 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007490:	a908      	add	r1, sp, #32
 8007492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007496:	e9cd 9708 	strd	r9, r7, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800749a:	e9cd 490a 	strd	r4, r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800749e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074a2:	f002 f8d1 	bl	8009648 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80074a6:	f248 1304 	movw	r3, #33028	; 0x8104
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074aa:	a908      	add	r1, sp, #32
 80074ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074b0:	e9cd 3608 	strd	r3, r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074b4:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074b8:	f002 f8c6 	bl	8009648 <HAL_GPIO_Init>
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80074bc:	a908      	add	r1, sp, #32
 80074be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074c2:	e9cd 8708 	strd	r8, r7, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074c6:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80074ca:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80074cc:	f04f 0810 	mov.w	r8, #16
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80074d0:	f002 f8ba 	bl	8009648 <HAL_GPIO_Init>
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80074d4:	a908      	add	r1, sp, #32
 80074d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80074da:	e9cd 8b08 	strd	r8, fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074de:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80074e0:	f002 f8b2 	bl	8009648 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80074e4:	23e0      	movs	r3, #224	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074e6:	e9cd 3708 	strd	r3, r7, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074ea:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80074ec:	2305      	movs	r3, #5
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80074f2:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074f4:	e9cd 490a 	strd	r4, r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074f8:	f002 f8a6 	bl	8009648 <HAL_GPIO_Init>
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80074fc:	485a      	ldr	r0, [pc, #360]	; (8007668 <main+0x30c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074fe:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8007500:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007502:	e9cd 6a08 	strd	r6, sl, [sp, #32]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8007506:	f002 f89f 	bl	8009648 <HAL_GPIO_Init>
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800750a:	4857      	ldr	r0, [pc, #348]	; (8007668 <main+0x30c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800750c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800750e:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8007510:	e9cd 7b08 	strd	r7, fp, [sp, #32]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8007514:	f002 f898 	bl	8009648 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8007518:	f24f 0234 	movw	r2, #61492	; 0xf034
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800751c:	4852      	ldr	r0, [pc, #328]	; (8007668 <main+0x30c>)
 800751e:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007520:	e9cd 2608 	strd	r2, r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007524:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007528:	f002 f88e 	bl	8009648 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 800752c:	f64c 4204 	movw	r2, #52228	; 0xcc04
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007530:	484e      	ldr	r0, [pc, #312]	; (800766c <main+0x310>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007532:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007534:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007536:	e9cd 2a08 	strd	r2, sl, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800753a:	f002 f885 	bl	8009648 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800753e:	f243 0281 	movw	r2, #12417	; 0x3081
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007542:	484a      	ldr	r0, [pc, #296]	; (800766c <main+0x310>)
 8007544:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007546:	e9cd 2608 	strd	r2, r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800754a:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800754e:	f002 f87b 	bl	8009648 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8007552:	f44f 7210 	mov.w	r2, #576	; 0x240
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007556:	4846      	ldr	r0, [pc, #280]	; (8007670 <main+0x314>)
 8007558:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800755a:	e9cd 2608 	strd	r2, r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800755e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007562:	f002 f871 	bl	8009648 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8007566:	f44f 72c0 	mov.w	r2, #384	; 0x180
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800756a:	4841      	ldr	r0, [pc, #260]	; (8007670 <main+0x314>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800756c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800756e:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007570:	e9cd 2a08 	strd	r2, sl, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007574:	f002 f868 	bl	8009648 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007578:	2305      	movs	r3, #5
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800757a:	483c      	ldr	r0, [pc, #240]	; (800766c <main+0x310>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800757c:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800757e:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007580:	e9cd 490a 	strd	r4, r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007584:	e9cd 7708 	strd	r7, r7, [sp, #32]
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8007588:	f002 f85e 	bl	8009648 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800758c:	2378      	movs	r3, #120	; 0x78
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800758e:	e9cd 3708 	strd	r3, r7, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007592:	4836      	ldr	r0, [pc, #216]	; (800766c <main+0x310>)
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007594:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007596:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007598:	e9cd 490a 	strd	r4, r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800759c:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800759e:	f002 f853 	bl	8009648 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80075a2:	f44f 7c40 	mov.w	ip, #768	; 0x300
 80075a6:	2312      	movs	r3, #18
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075a8:	e9cd 690a 	strd	r6, r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075ac:	482e      	ldr	r0, [pc, #184]	; (8007668 <main+0x30c>)
 80075ae:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80075b0:	f04f 0904 	mov.w	r9, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80075b4:	e9cd c308 	strd	ip, r3, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80075b8:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075bc:	f002 f844 	bl	8009648 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80075c0:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80075c2:	4333      	orrs	r3, r6
 80075c4:	64ab      	str	r3, [r5, #72]	; 0x48
 80075c6:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80075c8:	4033      	ands	r3, r6
 80075ca:	9301      	str	r3, [sp, #4]
 80075cc:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80075ce:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80075d0:	433b      	orrs	r3, r7
 80075d2:	64ab      	str	r3, [r5, #72]	; 0x48
 80075d4:	6cab      	ldr	r3, [r5, #72]	; 0x48
  hi2c2.Instance = I2C2;
 80075d6:	4d28      	ldr	r5, [pc, #160]	; (8007678 <main+0x31c>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 80075d8:	403b      	ands	r3, r7
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80075da:	4622      	mov	r2, r4
 80075dc:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 80075de:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80075e0:	200e      	movs	r0, #14
  __HAL_RCC_DMA2_CLK_ENABLE();
 80075e2:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80075e4:	f001 fc6c 	bl	8008ec0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80075e8:	200e      	movs	r0, #14
 80075ea:	f001 fc9b 	bl	8008f24 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 80075ee:	4621      	mov	r1, r4
 80075f0:	4622      	mov	r2, r4
 80075f2:	2044      	movs	r0, #68	; 0x44
 80075f4:	f001 fc64 	bl	8008ec0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 80075f8:	2044      	movs	r0, #68	; 0x44
 80075fa:	f001 fc93 	bl	8008f24 <HAL_NVIC_EnableIRQ>
  hi2c2.Init.Timing = 0x10909CEC;
 80075fe:	f8df e08c 	ldr.w	lr, [pc, #140]	; 800768c <main+0x330>
 8007602:	4b1e      	ldr	r3, [pc, #120]	; (800767c <main+0x320>)
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007604:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007606:	4628      	mov	r0, r5
  hi2c2.Init.Timing = 0x10909CEC;
 8007608:	e9c5 e300 	strd	lr, r3, [r5]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800760c:	e9c5 4602 	strd	r4, r6, [r5, #8]
  hi2c2.Init.OwnAddress2 = 0;
 8007610:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007614:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007618:	f002 f8f9 	bl	800980e <HAL_I2C_Init>
 800761c:	4601      	mov	r1, r0
 800761e:	b108      	cbz	r0, 8007624 <main+0x2c8>
 8007620:	b672      	cpsid	i
	while (1)
 8007622:	e7fe      	b.n	8007622 <main+0x2c6>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007624:	4628      	mov	r0, r5
 8007626:	f002 f943 	bl	80098b0 <HAL_I2CEx_ConfigAnalogFilter>
 800762a:	4601      	mov	r1, r0
 800762c:	b108      	cbz	r0, 8007632 <main+0x2d6>
 800762e:	b672      	cpsid	i
	while (1)
 8007630:	e7fe      	b.n	8007630 <main+0x2d4>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007632:	4628      	mov	r0, r5
 8007634:	f002 f962 	bl	80098fc <HAL_I2CEx_ConfigDigitalFilter>
 8007638:	4603      	mov	r3, r0
 800763a:	b108      	cbz	r0, 8007640 <main+0x2e4>
 800763c:	b672      	cpsid	i
	while (1)
 800763e:	e7fe      	b.n	800763e <main+0x2e2>
  hqspi.Instance = QUADSPI;
 8007640:	480f      	ldr	r0, [pc, #60]	; (8007680 <main+0x324>)
 8007642:	4a10      	ldr	r2, [pc, #64]	; (8007684 <main+0x328>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8007644:	6183      	str	r3, [r0, #24]
  hqspi.Init.ClockPrescaler = 2;
 8007646:	e9c0 2700 	strd	r2, r7, [r0]
  hqspi.Init.FlashSize = 23;
 800764a:	2217      	movs	r2, #23
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800764c:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8007650:	e9c0 9802 	strd	r9, r8, [r0, #8]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8007654:	f002 fa8c 	bl	8009b70 <HAL_QSPI_Init>
 8007658:	4603      	mov	r3, r0
 800765a:	b1c8      	cbz	r0, 8007690 <main+0x334>
 800765c:	b672      	cpsid	i
	while (1)
 800765e:	e7fe      	b.n	800765e <main+0x302>
 8007660:	40021000 	.word	0x40021000
 8007664:	48001000 	.word	0x48001000
 8007668:	48000400 	.word	0x48000400
 800766c:	48000c00 	.word	0x48000c00
 8007670:	48000800 	.word	0x48000800
 8007674:	10210000 	.word	0x10210000
 8007678:	2000d60c 	.word	0x2000d60c
 800767c:	10909cec 	.word	0x10909cec
 8007680:	2000da60 	.word	0x2000da60
 8007684:	a0001000 	.word	0xa0001000
 8007688:	10110000 	.word	0x10110000
 800768c:	40005800 	.word	0x40005800
  huart1.Instance = USART1;
 8007690:	484f      	ldr	r0, [pc, #316]	; (80077d0 <main+0x474>)
  huart1.Init.BaudRate = 115200;
 8007692:	4a50      	ldr	r2, [pc, #320]	; (80077d4 <main+0x478>)
  huart1.Init.Parity = UART_PARITY_NONE;
 8007694:	6103      	str	r3, [r0, #16]
  huart1.Init.BaudRate = 115200;
 8007696:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 800769a:	240c      	movs	r4, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800769c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80076a0:	e9c0 4305 	strd	r4, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80076a4:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80076a8:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.Init.BaudRate = 115200;
 80076aa:	e9c0 2500 	strd	r2, r5, [r0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80076ae:	f003 fd5c 	bl	800b16a <HAL_UART_Init>
 80076b2:	4603      	mov	r3, r0
 80076b4:	b108      	cbz	r0, 80076ba <main+0x35e>
 80076b6:	b672      	cpsid	i
	while (1)
 80076b8:	e7fe      	b.n	80076b8 <main+0x35c>
  huart3.Instance = USART3;
 80076ba:	4847      	ldr	r0, [pc, #284]	; (80077d8 <main+0x47c>)
 80076bc:	4a47      	ldr	r2, [pc, #284]	; (80077dc <main+0x480>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 80076be:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80076c2:	e9c0 3404 	strd	r3, r4, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80076c6:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80076ca:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart3.Init.BaudRate = 115200;
 80076ce:	e9c0 2500 	strd	r2, r5, [r0]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80076d2:	f003 fd4a 	bl	800b16a <HAL_UART_Init>
 80076d6:	4603      	mov	r3, r0
 80076d8:	b108      	cbz	r0, 80076de <main+0x382>
 80076da:	b672      	cpsid	i
	while (1)
 80076dc:	e7fe      	b.n	80076dc <main+0x380>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80076de:	4840      	ldr	r0, [pc, #256]	; (80077e0 <main+0x484>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80076e0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80076e4:	2206      	movs	r2, #6
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80076e6:	e9c0 7306 	strd	r7, r3, [r0, #24]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80076ea:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80076ee:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80076f2:	6283      	str	r3, [r0, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80076f4:	e9c0 1200 	strd	r1, r2, [r0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80076f8:	60c7      	str	r7, [r0, #12]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80076fa:	f002 f924 	bl	8009946 <HAL_PCD_Init>
 80076fe:	4603      	mov	r3, r0
 8007700:	b108      	cbz	r0, 8007706 <main+0x3aa>
 8007702:	b672      	cpsid	i
	while (1)
 8007704:	e7fe      	b.n	8007704 <main+0x3a8>
  hcrc.Instance = CRC;
 8007706:	4837      	ldr	r0, [pc, #220]	; (80077e4 <main+0x488>)
 8007708:	4a37      	ldr	r2, [pc, #220]	; (80077e8 <main+0x48c>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800770a:	8083      	strh	r3, [r0, #4]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800770c:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcrc.Instance = CRC;
 8007710:	6002      	str	r2, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8007712:	6206      	str	r6, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8007714:	f001 fc28 	bl	8008f68 <HAL_CRC_Init>
 8007718:	4604      	mov	r4, r0
 800771a:	b108      	cbz	r0, 8007720 <main+0x3c4>
 800771c:	b672      	cpsid	i
	while (1)
 800771e:	e7fe      	b.n	800771e <main+0x3c2>
	Preprocessing_Init();
 8007720:	f7ff fdc2 	bl	80072a8 <Preprocessing_Init>
	Audio_init.Device = AUDIO_IN_DIGITAL_MIC1 ;
 8007724:	4931      	ldr	r1, [pc, #196]	; (80077ec <main+0x490>)
	Audio_init.SampleRate = AUDIO_FREQUENCY_16K ;
 8007726:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
	Audio_init.BitsPerSample = AUDIO_RESOLUTION_16b ;
 800772a:	e9c1 3801 	strd	r3, r8, [r1, #4]
	init_state =   BSP_AUDIO_IN_Init(0, &Audio_init);
 800772e:	4620      	mov	r0, r4
	Audio_init.Volume = 100 ;
 8007730:	2364      	movs	r3, #100	; 0x64
 8007732:	610b      	str	r3, [r1, #16]
	Audio_init.Device = AUDIO_IN_DIGITAL_MIC1 ;
 8007734:	f8c1 8000 	str.w	r8, [r1]
	Audio_init.ChannelsNbr = 1 ;
 8007738:	60ce      	str	r6, [r1, #12]
	init_state =   BSP_AUDIO_IN_Init(0, &Audio_init);
 800773a:	f000 ff91 	bl	8008660 <BSP_AUDIO_IN_Init>
 800773e:	4b2c      	ldr	r3, [pc, #176]	; (80077f0 <main+0x494>)
 8007740:	6018      	str	r0, [r3, #0]
	while(init_state != BSP_ERROR_NONE){}
 8007742:	2800      	cmp	r0, #0
 8007744:	d1fd      	bne.n	8007742 <main+0x3e6>
	while(State != BSP_ERROR_NONE){}
 8007746:	4f2b      	ldr	r7, [pc, #172]	; (80077f4 <main+0x498>)
 8007748:	683c      	ldr	r4, [r7, #0]
 800774a:	2c00      	cmp	r4, #0
 800774c:	d1fd      	bne.n	800774a <main+0x3ee>
	AI_Init(ai_network_data_weights_get(), activations);
 800774e:	f003 ff3f 	bl	800b5d0 <ai_network_data_weights_get>
	err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8007752:	4d29      	ldr	r5, [pc, #164]	; (80077f8 <main+0x49c>)
 8007754:	4621      	mov	r1, r4
	AI_Init(ai_network_data_weights_get(), activations);
 8007756:	4606      	mov	r6, r0
	err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8007758:	4628      	mov	r0, r5
 800775a:	f003 fe63 	bl	800b424 <ai_network_create>
	if (err.type != AI_ERROR_NONE) {
 800775e:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
 8007762:	d005      	beq.n	8007770 <main+0x414>
		printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 8007764:	0a02      	lsrs	r2, r0, #8
 8007766:	4825      	ldr	r0, [pc, #148]	; (80077fc <main+0x4a0>)
 8007768:	f006 f93c 	bl	800d9e4 <iprintf>
 800776c:	b672      	cpsid	i
	while (1)
 800776e:	e7fe      	b.n	800776e <main+0x412>
	const ai_network_params params = AI_NETWORK_PARAMS_INIT(
 8007770:	4b23      	ldr	r3, [pc, #140]	; (8007800 <main+0x4a4>)
 8007772:	4924      	ldr	r1, [pc, #144]	; (8007804 <main+0x4a8>)
	if (!ai_network_init(network, &params)) {
 8007774:	6828      	ldr	r0, [r5, #0]
	const ai_network_params params = AI_NETWORK_PARAMS_INIT(
 8007776:	940d      	str	r4, [sp, #52]	; 0x34
 8007778:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800777c:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007780:	2301      	movs	r3, #1
 8007782:	e9cd 160b 	strd	r1, r6, [sp, #44]	; 0x2c
 8007786:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 800778a:	491f      	ldr	r1, [pc, #124]	; (8007808 <main+0x4ac>)
 800778c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8007790:	f44f 4339 	mov.w	r3, #47360	; 0xb900
 8007794:	9311      	str	r3, [sp, #68]	; 0x44
 8007796:	4b1d      	ldr	r3, [pc, #116]	; (800780c <main+0x4b0>)
 8007798:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
	if (!ai_network_init(network, &params)) {
 800779c:	a908      	add	r1, sp, #32
	const ai_network_params params = AI_NETWORK_PARAMS_INIT(
 800779e:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
	if (!ai_network_init(network, &params)) {
 80077a2:	f003 fe4d 	bl	800b440 <ai_network_init>
 80077a6:	b948      	cbnz	r0, 80077bc <main+0x460>
		err = ai_network_get_error(network);
 80077a8:	6828      	ldr	r0, [r5, #0]
 80077aa:	f003 fe39 	bl	800b420 <ai_network_get_error>
		printf("ai_network_init error - type=%d code=%d\r\n", err.type, err.code);
 80077ae:	0a02      	lsrs	r2, r0, #8
 80077b0:	b2c1      	uxtb	r1, r0
 80077b2:	4817      	ldr	r0, [pc, #92]	; (8007810 <main+0x4b4>)
 80077b4:	f006 f916 	bl	800d9e4 <iprintf>
 80077b8:	b672      	cpsid	i
	while (1)
 80077ba:	e7fe      	b.n	80077ba <main+0x45e>
	State = BSP_AUDIO_IN_Record(0, (uint8_t*)Data, 2* BUFFER_SIZE);
 80077bc:	4915      	ldr	r1, [pc, #84]	; (8007814 <main+0x4b8>)
 80077be:	f242 72d8 	movw	r2, #10200	; 0x27d8
 80077c2:	4620      	mov	r0, r4
 80077c4:	f000 fe72 	bl	80084ac <BSP_AUDIO_IN_Record>
 80077c8:	6038      	str	r0, [r7, #0]
	while(State != BSP_ERROR_NONE){}
 80077ca:	2800      	cmp	r0, #0
 80077cc:	d1fd      	bne.n	80077ca <main+0x46e>
	while (1)
 80077ce:	e7fe      	b.n	80077ce <main+0x472>
 80077d0:	2000db08 	.word	0x2000db08
 80077d4:	40013800 	.word	0x40013800
 80077d8:	2000db8c 	.word	0x2000db8c
 80077dc:	40004800 	.word	0x40004800
 80077e0:	2000d658 	.word	0x2000d658
 80077e4:	2000d558 	.word	0x2000d558
 80077e8:	40023000 	.word	0x40023000
 80077ec:	20000ca8 	.word	0x20000ca8
 80077f0:	2000dc14 	.word	0x2000dc14
 80077f4:	20001c48 	.word	0x20001c48
 80077f8:	2000dc18 	.word	0x2000dc18
 80077fc:	08013df8 	.word	0x08013df8
 8007800:	40040440 	.word	0x40040440
 8007804:	00025908 	.word	0x00025908
 8007808:	00040440 	.word	0x00040440
 800780c:	20001c4c 	.word	0x20001c4c
 8007810:	08013e24 	.word	0x08013e24
 8007814:	10002ffc 	.word	0x10002ffc

08007818 <AudioPreprocessing_Run>:
{
 8007818:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const uint32_t num_frames = 1 + (signal_len - FRAME_LEN) / HOP_LEN;
 800781c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
{
 8007820:	4688      	mov	r8, r1
	const uint32_t num_frames = 1 + (signal_len - FRAME_LEN) / HOP_LEN;
 8007822:	f241 34ec 	movw	r4, #5100	; 0x13ec
 8007826:	261d      	movs	r6, #29
 8007828:	fbb2 f4f4 	udiv	r4, r2, r4
		buf_to_float_normed(&pInSignal[HOP_LEN * frame_index], pInFrame, FRAME_LEN);
 800782c:	4915      	ldr	r1, [pc, #84]	; (8007884 <AudioPreprocessing_Run+0x6c>)
		LogMelSpectrogramColumn(&S_LogMelSpectr,pInFrame,pOutColBuffer);
 800782e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8007888 <AudioPreprocessing_Run+0x70>
 8007832:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8007890 <AudioPreprocessing_Run+0x78>
	const uint32_t num_frames = 1 + (signal_len - FRAME_LEN) / HOP_LEN;
 8007836:	3401      	adds	r4, #1
{
 8007838:	4607      	mov	r7, r0
 800783a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800783e:	4366      	muls	r6, r4
	for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++)
 8007840:	2500      	movs	r5, #0
		buf_to_float_normed(&pInSignal[HOP_LEN * frame_index], pInFrame, FRAME_LEN);
 8007842:	f242 70d8 	movw	r0, #10200	; 0x27d8
 8007846:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800784a:	fb00 7005 	mla	r0, r0, r5, r7
 800784e:	f7ff fbe5 	bl	800701c <buf_to_float_normed>
		LogMelSpectrogramColumn(&S_LogMelSpectr,pInFrame,pOutColBuffer);
 8007852:	490c      	ldr	r1, [pc, #48]	; (8007884 <AudioPreprocessing_Run+0x6c>)
 8007854:	464a      	mov	r2, r9
 8007856:	4650      	mov	r0, sl
 8007858:	f7ff fc43 	bl	80070e2 <LogMelSpectrogramColumn>
		for (uint32_t i = 0; i < NUM_MELS; i++)
 800785c:	480a      	ldr	r0, [pc, #40]	; (8007888 <AudioPreprocessing_Run+0x70>)
		LogMelSpectrogramColumn(&S_LogMelSpectr,pInFrame,pOutColBuffer);
 800785e:	4909      	ldr	r1, [pc, #36]	; (8007884 <AudioPreprocessing_Run+0x6c>)
 8007860:	eb08 0285 	add.w	r2, r8, r5, lsl #2
 8007864:	231e      	movs	r3, #30
			pOut[i * num_frames + frame_index] = pOutColBuffer[i];
 8007866:	f850 cb04 	ldr.w	ip, [r0], #4
 800786a:	f8c2 c000 	str.w	ip, [r2]
		for (uint32_t i = 0; i < NUM_MELS; i++)
 800786e:	3b01      	subs	r3, #1
 8007870:	445a      	add	r2, fp
 8007872:	d1f8      	bne.n	8007866 <AudioPreprocessing_Run+0x4e>
 8007874:	1972      	adds	r2, r6, r5
 8007876:	4b05      	ldr	r3, [pc, #20]	; (800788c <AudioPreprocessing_Run+0x74>)
	for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++)
 8007878:	3501      	adds	r5, #1
 800787a:	42ac      	cmp	r4, r5
 800787c:	601a      	str	r2, [r3, #0]
 800787e:	d8e0      	bhi.n	8007842 <AudioPreprocessing_Run+0x2a>
}
 8007880:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007884:	10001ffc 	.word	0x10001ffc
 8007888:	10000f20 	.word	0x10000f20
 800788c:	2000ed0c 	.word	0x2000ed0c
 8007890:	20001bcc 	.word	0x20001bcc

08007894 <BSP_AUDIO_IN_TransferComplete_CallBack>:
{
 8007894:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (Instance == 0 ){
 8007896:	4606      	mov	r6, r0
{
 8007898:	b091      	sub	sp, #68	; 0x44
	if (Instance == 0 ){
 800789a:	2800      	cmp	r0, #0
 800789c:	d145      	bne.n	800792a <BSP_AUDIO_IN_TransferComplete_CallBack+0x96>
		sample=sample + (BUFFER_SIZE/2);
 800789e:	4a44      	ldr	r2, [pc, #272]	; (80079b0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x11c>)
		DmaRecBuffCplt = 1;
 80078a0:	4b44      	ldr	r3, [pc, #272]	; (80079b4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x120>)
		AudioPreprocessing_Run(Data, Mel_Spec+indice, BUFFER_SIZE);
 80078a2:	4c45      	ldr	r4, [pc, #276]	; (80079b8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x124>)
 80078a4:	4f45      	ldr	r7, [pc, #276]	; (80079bc <BSP_AUDIO_IN_TransferComplete_CallBack+0x128>)
 80078a6:	6821      	ldr	r1, [r4, #0]
 80078a8:	4845      	ldr	r0, [pc, #276]	; (80079c0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x12c>)
		DmaRecBuffCplt = 1;
 80078aa:	2501      	movs	r5, #1
 80078ac:	601d      	str	r5, [r3, #0]
		sample=sample + (BUFFER_SIZE/2);
 80078ae:	6813      	ldr	r3, [r2, #0]
 80078b0:	f603 13f6 	addw	r3, r3, #2550	; 0x9f6
 80078b4:	6013      	str	r3, [r2, #0]
		AudioPreprocessing_Run(Data, Mel_Spec+indice, BUFFER_SIZE);
 80078b6:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 80078ba:	f241 32ec 	movw	r2, #5100	; 0x13ec
 80078be:	f7ff ffab 	bl	8007818 <AudioPreprocessing_Run>
		indice = indice + 30 ;
 80078c2:	6823      	ldr	r3, [r4, #0]
 80078c4:	331e      	adds	r3, #30
		if (indice == 960){
 80078c6:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
		indice = indice + 30 ;
 80078ca:	6023      	str	r3, [r4, #0]
		if (indice == 960){
 80078cc:	4b3d      	ldr	r3, [pc, #244]	; (80079c4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x130>)
 80078ce:	d129      	bne.n	8007924 <BSP_AUDIO_IN_TransferComplete_CallBack+0x90>
			indice = 0;
 80078d0:	6026      	str	r6, [r4, #0]
			cplt = 1 ;
 80078d2:	601d      	str	r5, [r3, #0]
	ai_buffer ai_input[AI_NETWORK_IN_NUM] = AI_NETWORK_IN;
 80078d4:	4c3c      	ldr	r4, [pc, #240]	; (80079c8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x134>)
			printf("Running inference\r\n");
 80078d6:	483d      	ldr	r0, [pc, #244]	; (80079cc <BSP_AUDIO_IN_TransferComplete_CallBack+0x138>)
 80078d8:	f006 f90a 	bl	800daf0 <puts>
	ai_buffer ai_input[AI_NETWORK_IN_NUM] = AI_NETWORK_IN;
 80078dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80078de:	ad04      	add	r5, sp, #16
 80078e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80078e2:	e894 0003 	ldmia.w	r4, {r0, r1}
	ai_buffer ai_output[AI_NETWORK_OUT_NUM] = AI_NETWORK_OUT;
 80078e6:	3408      	adds	r4, #8
	ai_buffer ai_input[AI_NETWORK_IN_NUM] = AI_NETWORK_IN;
 80078e8:	e885 0003 	stmia.w	r5, {r0, r1}
	ai_buffer ai_output[AI_NETWORK_OUT_NUM] = AI_NETWORK_OUT;
 80078ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80078ee:	ad0a      	add	r5, sp, #40	; 0x28
 80078f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80078f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80078f6:	e885 0003 	stmia.w	r5, {r0, r1}
	batch = ai_network_run(network, ai_input, ai_output);
 80078fa:	4d35      	ldr	r5, [pc, #212]	; (80079d0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x13c>)
	ai_output[0].data = AI_HANDLE_PTR(pOut);
 80078fc:	4c35      	ldr	r4, [pc, #212]	; (80079d4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x140>)
	batch = ai_network_run(network, ai_input, ai_output);
 80078fe:	6828      	ldr	r0, [r5, #0]
	ai_input[0].data = AI_HANDLE_PTR(pIn);
 8007900:	9708      	str	r7, [sp, #32]
	batch = ai_network_run(network, ai_input, ai_output);
 8007902:	aa0a      	add	r2, sp, #40	; 0x28
 8007904:	a904      	add	r1, sp, #16
	ai_output[0].data = AI_HANDLE_PTR(pOut);
 8007906:	940e      	str	r4, [sp, #56]	; 0x38
	batch = ai_network_run(network, ai_input, ai_output);
 8007908:	f003 fe60 	bl	800b5cc <ai_network_run>
	if (batch != 1) {
 800790c:	2801      	cmp	r0, #1
 800790e:	d00e      	beq.n	800792e <BSP_AUDIO_IN_TransferComplete_CallBack+0x9a>
		err = ai_network_get_error(network);
 8007910:	6828      	ldr	r0, [r5, #0]
 8007912:	f003 fd85 	bl	800b420 <ai_network_get_error>
		printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 8007916:	0a02      	lsrs	r2, r0, #8
 8007918:	b2c1      	uxtb	r1, r0
 800791a:	482f      	ldr	r0, [pc, #188]	; (80079d8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x144>)
 800791c:	f006 f862 	bl	800d9e4 <iprintf>
 8007920:	b672      	cpsid	i
	while (1)
 8007922:	e7fe      	b.n	8007922 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8e>
		if (cplt == 1){
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d0d4      	beq.n	80078d4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x40>
}
 800792a:	b011      	add	sp, #68	; 0x44
 800792c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				printf("%8.6f ", aiOutData[i]);
 800792e:	6820      	ldr	r0, [r4, #0]
 8007930:	f7fe fe72 	bl	8006618 <__aeabi_f2d>
 8007934:	4602      	mov	r2, r0
 8007936:	460b      	mov	r3, r1
 8007938:	4828      	ldr	r0, [pc, #160]	; (80079dc <BSP_AUDIO_IN_TransferComplete_CallBack+0x148>)
 800793a:	f006 f853 	bl	800d9e4 <iprintf>
 800793e:	6860      	ldr	r0, [r4, #4]
 8007940:	f7fe fe6a 	bl	8006618 <__aeabi_f2d>
 8007944:	460b      	mov	r3, r1
 8007946:	4602      	mov	r2, r0
 8007948:	4824      	ldr	r0, [pc, #144]	; (80079dc <BSP_AUDIO_IN_TransferComplete_CallBack+0x148>)
 800794a:	f006 f84b 	bl	800d9e4 <iprintf>
		if (values[i] > max_value) {
 800794e:	ed94 7a00 	vldr	s14, [r4]
 8007952:	edd4 7a01 	vldr	s15, [r4, #4]
			printf(": %d - %s\r\n", (int) class, activities[class]);
 8007956:	4b22      	ldr	r3, [pc, #136]	; (80079e0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x14c>)
 8007958:	4822      	ldr	r0, [pc, #136]	; (80079e4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x150>)
		if (values[i] > max_value) {
 800795a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800795e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007962:	bf4c      	ite	mi
 8007964:	2101      	movmi	r1, #1
 8007966:	2100      	movpl	r1, #0
			printf(": %d - %s\r\n", (int) class, activities[class]);
 8007968:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800796c:	f006 f83a 	bl	800d9e4 <iprintf>
			snprintf(str,100,"{\"Normal\":%8.6f,\"Abnormal\":%8.6f}\n",aiOutData[0],aiOutData[1] );
 8007970:	6860      	ldr	r0, [r4, #4]
 8007972:	f7fe fe51 	bl	8006618 <__aeabi_f2d>
 8007976:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800797a:	6820      	ldr	r0, [r4, #0]
 800797c:	f7fe fe4c 	bl	8006618 <__aeabi_f2d>
 8007980:	4a19      	ldr	r2, [pc, #100]	; (80079e8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x154>)
 8007982:	e9cd 0100 	strd	r0, r1, [sp]
 8007986:	4819      	ldr	r0, [pc, #100]	; (80079ec <BSP_AUDIO_IN_TransferComplete_CallBack+0x158>)
 8007988:	2164      	movs	r1, #100	; 0x64
 800798a:	f006 f8c9 	bl	800db20 <sniprintf>
			while(str[size]!='\n')
 800798e:	4a18      	ldr	r2, [pc, #96]	; (80079f0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x15c>)
 8007990:	fa52 f386 	uxtab	r3, r2, r6
 8007994:	3601      	adds	r6, #1
 8007996:	f893 3f98 	ldrb.w	r3, [r3, #3992]	; 0xf98
 800799a:	2b0a      	cmp	r3, #10
 800799c:	d1f8      	bne.n	8007990 <BSP_AUDIO_IN_TransferComplete_CallBack+0xfc>
			HAL_UART_Transmit_DMA(&huart1, (uint8_t*)str, 40);
 800799e:	4913      	ldr	r1, [pc, #76]	; (80079ec <BSP_AUDIO_IN_TransferComplete_CallBack+0x158>)
 80079a0:	4814      	ldr	r0, [pc, #80]	; (80079f4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x160>)
 80079a2:	2228      	movs	r2, #40	; 0x28
}
 80079a4:	b011      	add	sp, #68	; 0x44
 80079a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			HAL_UART_Transmit_DMA(&huart1, (uint8_t*)str, 40);
 80079aa:	f003 b941 	b.w	800ac30 <HAL_UART_Transmit_DMA>
 80079ae:	bf00      	nop
 80079b0:	2000ed10 	.word	0x2000ed10
 80079b4:	20000cbc 	.word	0x20000cbc
 80079b8:	2000dc10 	.word	0x2000dc10
 80079bc:	20000ccc 	.word	0x20000ccc
 80079c0:	10002ffc 	.word	0x10002ffc
 80079c4:	2000d554 	.word	0x2000d554
 80079c8:	08013d28 	.word	0x08013d28
 80079cc:	08013e4e 	.word	0x08013e4e
 80079d0:	2000dc18 	.word	0x2000dc18
 80079d4:	2000d54c 	.word	0x2000d54c
 80079d8:	08013e61 	.word	0x08013e61
 80079dc:	08013e8d 	.word	0x08013e8d
 80079e0:	20000000 	.word	0x20000000
 80079e4:	08013e94 	.word	0x08013e94
 80079e8:	08013ea0 	.word	0x08013ea0
 80079ec:	10000f98 	.word	0x10000f98
 80079f0:	10000000 	.word	0x10000000
 80079f4:	2000db08 	.word	0x2000db08

080079f8 <Error_Handler>:
 80079f8:	b672      	cpsid	i
	while (1)
 80079fa:	e7fe      	b.n	80079fa <Error_Handler+0x2>

080079fc <InverseMelScale>:
  }
}

// based on librosa hz_to_mel()
static __INLINE float InverseMelScale(float mel_freq, MelFormulaTypedef type)
{
 80079fc:	b508      	push	{r3, lr}
 80079fe:	eeb0 7a40 	vmov.f32	s14, s0
  if (type != MEL_HTK) {
 8007a02:	b1e0      	cbz	r0, 8007a3e <InverseMelScale+0x42>
    /* And now the nonlinear scale */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region

    if (mel_freq >= min_log_mel)
 8007a04:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8007a58 <InverseMelScale+0x5c>
 8007a08:	eeb4 7ac0 	vcmpe.f32	s14, s0
 8007a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a10:	da08      	bge.n	8007a24 <InverseMelScale+0x28>
    float freq = f_min + f_sp * mel_freq;
 8007a12:	eddf 6a12 	vldr	s13, [pc, #72]	; 8007a5c <InverseMelScale+0x60>
 8007a16:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007a60 <InverseMelScale+0x64>
 8007a1a:	eee7 7a26 	vfma.f32	s15, s14, s13
 8007a1e:	eeb0 0a67 	vmov.f32	s0, s15
    return freq;
  } else {
    /* HTK Formula */
    return 700.0f * (expf(mel_freq / 1127.0f) - 1.0f);
  }
}
 8007a22:	bd08      	pop	{r3, pc}
      freq = min_log_hz * expf(logstep * (mel_freq - min_log_mel));
 8007a24:	ee37 7a40 	vsub.f32	s14, s14, s0
 8007a28:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8007a64 <InverseMelScale+0x68>
 8007a2c:	ee27 0a00 	vmul.f32	s0, s14, s0
 8007a30:	f009 f84a 	bl	8010ac8 <expf>
 8007a34:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8007a68 <InverseMelScale+0x6c>
    return 700.0f * (expf(mel_freq / 1127.0f) - 1.0f);
 8007a38:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007a3c:	e7f1      	b.n	8007a22 <InverseMelScale+0x26>
 8007a3e:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8007a6c <InverseMelScale+0x70>
 8007a42:	ee87 0a00 	vdiv.f32	s0, s14, s0
 8007a46:	f009 f83f 	bl	8010ac8 <expf>
 8007a4a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007a4e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007a52:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007a70 <InverseMelScale+0x74>
 8007a56:	e7ef      	b.n	8007a38 <InverseMelScale+0x3c>
 8007a58:	41700001 	.word	0x41700001
 8007a5c:	42855555 	.word	0x42855555
 8007a60:	00000000 	.word	0x00000000
 8007a64:	3d8ccdbb 	.word	0x3d8ccdbb
 8007a68:	447a0000 	.word	0x447a0000
 8007a6c:	448ce000 	.word	0x448ce000
 8007a70:	442f0000 	.word	0x442f0000

08007a74 <MelScale>:
{
 8007a74:	b508      	push	{r3, lr}
 8007a76:	eef0 7a40 	vmov.f32	s15, s0
  if (type != MEL_HTK) {
 8007a7a:	b1c0      	cbz	r0, 8007aae <MelScale+0x3a>
    if (freq >= min_log_hz)
 8007a7c:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8007acc <MelScale+0x58>
 8007a80:	eef4 7ac0 	vcmpe.f32	s15, s0
 8007a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a88:	da04      	bge.n	8007a94 <MelScale+0x20>
    float mels = (freq - f_min) / f_sp;
 8007a8a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8007ad0 <MelScale+0x5c>
 8007a8e:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
 8007a92:	bd08      	pop	{r3, pc}
      mels = min_log_mel + logf(freq / min_log_hz) / logstep;
 8007a94:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8007a98:	f009 f86c 	bl	8010b74 <logf>
 8007a9c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007ad4 <MelScale+0x60>
 8007aa0:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8007aa4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007ad8 <MelScale+0x64>
 8007aa8:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007aac:	e7f1      	b.n	8007a92 <MelScale+0x1e>
    return 1127.0f * logf(1.0f + freq / 700.0f);
 8007aae:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8007adc <MelScale+0x68>
 8007ab2:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8007ab6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007aba:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007abe:	f009 f859 	bl	8010b74 <logf>
 8007ac2:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007ae0 <MelScale+0x6c>
 8007ac6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007aca:	e7e2      	b.n	8007a92 <MelScale+0x1e>
 8007acc:	447a0000 	.word	0x447a0000
 8007ad0:	42855555 	.word	0x42855555
 8007ad4:	3d8ccdbb 	.word	0x3d8ccdbb
 8007ad8:	41700001 	.word	0x41700001
 8007adc:	442f0000 	.word	0x442f0000
 8007ae0:	448ce000 	.word	0x448ce000

08007ae4 <MelFilterbank_Init>:
{
 8007ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae8:	ed2d 8b0a 	vpush	{d8-d12}
 8007aec:	b085      	sub	sp, #20
  MelFormulaTypedef formula = MelFilterStruct->Formula;
 8007aee:	f890 7024 	ldrb.w	r7, [r0, #36]	; 0x24
  uint32_t normalize = MelFilterStruct->Normalize;
 8007af2:	6a83      	ldr	r3, [r0, #40]	; 0x28
  uint32_t sr = MelFilterStruct->SampRate;
 8007af4:	6985      	ldr	r5, [r0, #24]
  float32_t f_max =  MelFilterStruct->FMax;
 8007af6:	edd0 8a08 	vldr	s17, [r0, #32]
  uint32_t mel_2_f = MelFilterStruct->Mel2F;
 8007afa:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
  uint32_t normalize = MelFilterStruct->Normalize;
 8007afe:	9300      	str	r3, [sp, #0]
{
 8007b00:	4604      	mov	r4, r0
  uint32_t *fft_bin_numbers_start = MelFilterStruct->pStartIndices;
 8007b02:	6803      	ldr	r3, [r0, #0]
  mel_min = MelScale(f_min, formula);
 8007b04:	ed94 0a07 	vldr	s0, [r4, #28]
  uint32_t *fft_bin_numbers_start = MelFilterStruct->pStartIndices;
 8007b08:	9301      	str	r3, [sp, #4]
  uint32_t n_fft = MelFilterStruct->FFTLen;
 8007b0a:	e9d0 8a04 	ldrd	r8, sl, [r0, #16]
  float32_t *weights = MelFilterStruct->pCoefficients;
 8007b0e:	e9d0 b601 	ldrd	fp, r6, [r0, #4]
  mel_min = MelScale(f_min, formula);
 8007b12:	4638      	mov	r0, r7
 8007b14:	f7ff ffae 	bl	8007a74 <MelScale>
  mel_max = MelScale(f_max, formula);
 8007b18:	4638      	mov	r0, r7
  mel_min = MelScale(f_min, formula);
 8007b1a:	eeb0 8a40 	vmov.f32	s16, s0
  mel_max = MelScale(f_max, formula);
 8007b1e:	eeb0 0a68 	vmov.f32	s0, s17
 8007b22:	f7ff ffa7 	bl	8007a74 <MelScale>
  mel_step = (mel_max - mel_min) / (float32_t) (n_mels - 1 + 2);
 8007b26:	f108 0301 	add.w	r3, r8, #1
 8007b2a:	ee07 3a90 	vmov	s15, r3
 8007b2e:	ee30 0a48 	vsub.f32	s0, s0, s16
 8007b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
  fftfreqs_step = ((float32_t) sr / 2.0f) / (float32_t) (n_fft / 2);
 8007b36:	ea4f 035a 	mov.w	r3, sl, lsr #1
  mel_step = (mel_max - mel_min) / (float32_t) (n_mels - 1 + 2);
 8007b3a:	eec0 9a27 	vdiv.f32	s19, s0, s15
  fftfreqs_step = ((float32_t) sr / 2.0f) / (float32_t) (n_fft / 2);
 8007b3e:	ee0a 3a10 	vmov	s20, r3
 8007b42:	ee07 5a90 	vmov	s15, r5
 8007b46:	eeb8 7aca 	vcvt.f32.s32	s14, s20
 8007b4a:	eefb 7aef 	vcvt.f32.u32	s15, s15, #1
  *n_coefficients = 0;
 8007b4e:	2500      	movs	r5, #0
  fftfreqs_step = ((float32_t) sr / 2.0f) / (float32_t) (n_fft / 2);
 8007b50:	ee87 ba87 	vdiv.f32	s22, s15, s14
  *n_coefficients = 0;
 8007b54:	60e5      	str	r5, [r4, #12]
          enorm = 2.0f / (mel_f_upper - mel_f_lower);
 8007b56:	eef0 ba00 	vmov.f32	s23, #0	; 0x40000000  2.0
  for (uint32_t i = 0; i < n_mels; i++)
 8007b5a:	45a8      	cmp	r8, r5
 8007b5c:	d104      	bne.n	8007b68 <MelFilterbank_Init+0x84>
}
 8007b5e:	b005      	add	sp, #20
 8007b60:	ecbd 8b0a 	vpop	{d8-d12}
 8007b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (mel_2_f != 0) {
 8007b68:	1c6b      	adds	r3, r5, #1
      mel_f_lower = InverseMelScale(mel_step * i + mel_min, formula);
 8007b6a:	ee07 5a90 	vmov	s15, r5
 8007b6e:	ee0a 3a90 	vmov	s21, r3
 8007b72:	1cab      	adds	r3, r5, #2
 8007b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b78:	ee0c 3a90 	vmov	s25, r3
 8007b7c:	eef0 8a48 	vmov.f32	s17, s16
 8007b80:	eee9 8aa7 	vfma.f32	s17, s19, s15
 8007b84:	eeb8 ca6a 	vcvt.f32.u32	s24, s21
 8007b88:	eef8 ca6c 	vcvt.f32.u32	s25, s25
    if (mel_2_f != 0) {
 8007b8c:	f1b9 0f00 	cmp.w	r9, #0
 8007b90:	d028      	beq.n	8007be4 <MelFilterbank_Init+0x100>
      mel_f_lower = InverseMelScale(mel_step * i + mel_min, formula);
 8007b92:	4638      	mov	r0, r7
 8007b94:	eeb0 0a68 	vmov.f32	s0, s17
 8007b98:	f7ff ff30 	bl	80079fc <InverseMelScale>
 8007b9c:	eef0 8a40 	vmov.f32	s17, s0
      mel_f_center = InverseMelScale(mel_step * (i + 1) + mel_min, formula);
 8007ba0:	eeb0 0a48 	vmov.f32	s0, s16
 8007ba4:	eeac 0a29 	vfma.f32	s0, s24, s19
 8007ba8:	4638      	mov	r0, r7
 8007baa:	f7ff ff27 	bl	80079fc <InverseMelScale>
 8007bae:	eeb0 9a40 	vmov.f32	s18, s0
      mel_f_upper = InverseMelScale(mel_step * (i + 2) + mel_min, formula);
 8007bb2:	eeb0 0a48 	vmov.f32	s0, s16
 8007bb6:	eeac 0aa9 	vfma.f32	s0, s25, s19
 8007bba:	4638      	mov	r0, r7
 8007bbc:	f7ff ff1e 	bl	80079fc <InverseMelScale>
 8007bc0:	eeb0 ca40 	vmov.f32	s24, s0
    fdiff_lower = mel_f_center - mel_f_lower;
 8007bc4:	ee79 ca68 	vsub.f32	s25, s18, s17
    stop_index = -1;
 8007bc8:	f04f 33ff 	mov.w	r3, #4294967295
    fdiff_upper = mel_f_upper - mel_f_center;
 8007bcc:	ee3c 9a49 	vsub.f32	s18, s24, s18
    for (uint32_t j = 0; j < n_fft / 2; j++)
 8007bd0:	f04f 0a00 	mov.w	sl, #0
    start_index = -1;
 8007bd4:	4619      	mov	r1, r3
    for (uint32_t j = 0; j < n_fft / 2; j++)
 8007bd6:	ee1a 2a10 	vmov	r2, s20
 8007bda:	4552      	cmp	r2, sl
 8007bdc:	d10b      	bne.n	8007bf6 <MelFilterbank_Init+0x112>
 8007bde:	ee1a 5a90 	vmov	r5, s21
 8007be2:	e7ba      	b.n	8007b5a <MelFilterbank_Init+0x76>
      mel_f_center = mel_step * (i + 1) + mel_min;
 8007be4:	eeb0 9a48 	vmov.f32	s18, s16
 8007be8:	eeac 9a29 	vfma.f32	s18, s24, s19
      mel_f_upper = mel_step * (i + 2) + mel_min;
 8007bec:	eeb0 ca48 	vmov.f32	s24, s16
 8007bf0:	eeac caa9 	vfma.f32	s24, s25, s19
 8007bf4:	e7e6      	b.n	8007bc4 <MelFilterbank_Init+0xe0>
        fftfreq = j * fftfreqs_step;
 8007bf6:	ee07 aa90 	vmov	s15, sl
 8007bfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bfe:	ee27 0a8b 	vmul.f32	s0, s15, s22
      if (mel_2_f != 0) {
 8007c02:	f1b9 0f00 	cmp.w	r9, #0
 8007c06:	d106      	bne.n	8007c16 <MelFilterbank_Init+0x132>
        fftfreq = MelScale(j * fftfreqs_step, formula);
 8007c08:	4638      	mov	r0, r7
 8007c0a:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8007c0e:	f7ff ff31 	bl	8007a74 <MelScale>
 8007c12:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
      ramp_lower = mel_f_lower - fftfreq;
 8007c16:	ee78 6ac0 	vsub.f32	s13, s17, s0
      ramp_upper = mel_f_upper - fftfreq;
 8007c1a:	ee7c 7a40 	vsub.f32	s15, s24, s0
      lower = -ramp_lower / fdiff_lower;
 8007c1e:	eef1 6a66 	vneg.f32	s13, s13
 8007c22:	ee86 7aac 	vdiv.f32	s14, s13, s25
      upper =  ramp_upper / fdiff_upper;
 8007c26:	eec7 6a89 	vdiv.f32	s13, s15, s18
      else min = upper;
 8007c2a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8007c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c32:	bf58      	it	pl
 8007c34:	eeb0 7a66 	vmovpl.f32	s14, s13
      if (min > 0)
 8007c38:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8007c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c40:	dd11      	ble.n	8007c66 <MelFilterbank_Init+0x182>
        if (normalize != 0)
 8007c42:	9b00      	ldr	r3, [sp, #0]
 8007c44:	b12b      	cbz	r3, 8007c52 <MelFilterbank_Init+0x16e>
          enorm = 2.0f / (mel_f_upper - mel_f_lower);
 8007c46:	ee7c 6a68 	vsub.f32	s13, s24, s17
 8007c4a:	eecb 7aa6 	vdiv.f32	s15, s23, s13
          weight *= enorm;
 8007c4e:	ee27 7a27 	vmul.f32	s14, s14, s15
        *n_coefficients = *n_coefficients + 1;
 8007c52:	68e3      	ldr	r3, [r4, #12]
        *weights++ = weight;
 8007c54:	eca6 7a01 	vstmia	r6!, {s14}
        *n_coefficients = *n_coefficients + 1;
 8007c58:	3301      	adds	r3, #1
 8007c5a:	60e3      	str	r3, [r4, #12]
          start_index = j;
 8007c5c:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007c60:	bf08      	it	eq
 8007c62:	4651      	moveq	r1, sl
        stop_index = j;
 8007c64:	4653      	mov	r3, sl
      fft_bin_numbers_start[i] = start_index;
 8007c66:	9a01      	ldr	r2, [sp, #4]
    for (uint32_t j = 0; j < n_fft / 2; j++)
 8007c68:	f10a 0a01 	add.w	sl, sl, #1
      fft_bin_numbers_start[i] = start_index;
 8007c6c:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
      fft_bin_numbers_stop[i] = stop_index;
 8007c70:	f84b 3025 	str.w	r3, [fp, r5, lsl #2]
    for (uint32_t j = 0; j < n_fft / 2; j++)
 8007c74:	e7af      	b.n	8007bd6 <MelFilterbank_Init+0xf2>
	...

08007c78 <MelFilterbank>:
{
 8007c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c7a:	6804      	ldr	r4, [r0, #0]
 8007c7c:	6845      	ldr	r5, [r0, #4]
  float32_t *pCoefs = M->pCoefficients;
 8007c7e:	6887      	ldr	r7, [r0, #8]
  for (uint32_t i = 0; i < n_mels; i++)
 8007c80:	6900      	ldr	r0, [r0, #16]
 8007c82:	3c04      	subs	r4, #4
 8007c84:	3d04      	subs	r5, #4
 8007c86:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8007c8a:	4282      	cmp	r2, r0
 8007c8c:	d100      	bne.n	8007c90 <MelFilterbank+0x18>
}
 8007c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stop_idx = pStop_idxs[i];
 8007c90:	f854 3f04 	ldr.w	r3, [r4, #4]!
 8007c94:	f855 6f04 	ldr.w	r6, [r5, #4]!
    sum = 0.0f;
 8007c98:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007cc0 <MelFilterbank+0x48>
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 8007ca2:	b2b6      	uxth	r6, r6
 8007ca4:	42b3      	cmp	r3, r6
 8007ca6:	d902      	bls.n	8007cae <MelFilterbank+0x36>
    pMelCol[i] = sum;
 8007ca8:	ece2 7a01 	vstmia	r2!, {s15}
  for (uint32_t i = 0; i < n_mels; i++)
 8007cac:	e7ed      	b.n	8007c8a <MelFilterbank+0x12>
      sum += pSpectrCol[j] * (*pCoefs++);
 8007cae:	ecfc 6a01 	vldmia	ip!, {s13}
 8007cb2:	ecb7 7a01 	vldmia	r7!, {s14}
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 8007cb6:	3301      	adds	r3, #1
      sum += pSpectrCol[j] * (*pCoefs++);
 8007cb8:	eee6 7a87 	vfma.f32	s15, s13, s14
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 8007cbc:	e7f2      	b.n	8007ca4 <MelFilterbank+0x2c>
 8007cbe:	bf00      	nop
 8007cc0:	00000000 	.word	0x00000000

08007cc4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cc4:	4b0a      	ldr	r3, [pc, #40]	; (8007cf0 <HAL_MspInit+0x2c>)
 8007cc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007cc8:	f042 0201 	orr.w	r2, r2, #1
 8007ccc:	661a      	str	r2, [r3, #96]	; 0x60
 8007cce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8007cd0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cd2:	f002 0201 	and.w	r2, r2, #1
 8007cd6:	9200      	str	r2, [sp, #0]
 8007cd8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007cda:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007cdc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007ce0:	659a      	str	r2, [r3, #88]	; 0x58
 8007ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ce8:	9301      	str	r3, [sp, #4]
 8007cea:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007cec:	b002      	add	sp, #8
 8007cee:	4770      	bx	lr
 8007cf0:	40021000 	.word	0x40021000

08007cf4 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8007cf4:	6802      	ldr	r2, [r0, #0]
 8007cf6:	4b08      	ldr	r3, [pc, #32]	; (8007d18 <HAL_CRC_MspInit+0x24>)
 8007cf8:	429a      	cmp	r2, r3
{
 8007cfa:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8007cfc:	d10a      	bne.n	8007d14 <HAL_CRC_MspInit+0x20>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007cfe:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8007d02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d08:	649a      	str	r2, [r3, #72]	; 0x48
 8007d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d10:	9301      	str	r3, [sp, #4]
 8007d12:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8007d14:	b002      	add	sp, #8
 8007d16:	4770      	bx	lr
 8007d18:	40023000 	.word	0x40023000

08007d1c <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8007d1c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(DFSDM1_Init == 0)
 8007d1e:	4c2a      	ldr	r4, [pc, #168]	; (8007dc8 <HAL_DFSDM_FilterMspInit+0xac>)
{
 8007d20:	b089      	sub	sp, #36	; 0x24
 8007d22:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d24:	2214      	movs	r2, #20
 8007d26:	2100      	movs	r1, #0
 8007d28:	a803      	add	r0, sp, #12
 8007d2a:	f005 f954 	bl	800cfd6 <memset>
  if(DFSDM1_Init == 0)
 8007d2e:	6823      	ldr	r3, [r4, #0]
 8007d30:	bb33      	cbnz	r3, 8007d80 <HAL_DFSDM_FilterMspInit+0x64>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8007d32:	4a26      	ldr	r2, [pc, #152]	; (8007dcc <HAL_DFSDM_FilterMspInit+0xb0>)
 8007d34:	6813      	ldr	r3, [r2, #0]
 8007d36:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8007d38:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8007d3a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8007d3c:	4b24      	ldr	r3, [pc, #144]	; (8007dd0 <HAL_DFSDM_FilterMspInit+0xb4>)
 8007d3e:	d108      	bne.n	8007d52 <HAL_DFSDM_FilterMspInit+0x36>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8007d40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007d42:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007d46:	661a      	str	r2, [r3, #96]	; 0x60
 8007d48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007d4a:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8007d4e:	9201      	str	r2, [sp, #4]
 8007d50:	9a01      	ldr	r2, [sp, #4]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007d52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007d54:	481f      	ldr	r0, [pc, #124]	; (8007dd4 <HAL_DFSDM_FilterMspInit+0xb8>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007d56:	f042 0210 	orr.w	r2, r2, #16
 8007d5a:	64da      	str	r2, [r3, #76]	; 0x4c
 8007d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d5e:	f003 0310 	and.w	r3, r3, #16
 8007d62:	9302      	str	r3, [sp, #8]
 8007d64:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d66:	f44f 7c20 	mov.w	ip, #640	; 0x280
 8007d6a:	2302      	movs	r3, #2
 8007d6c:	e9cd c303 	strd	ip, r3, [sp, #12]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007d70:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8007d72:	2306      	movs	r3, #6
 8007d74:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007d76:	f001 fc67 	bl	8009648 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8007d7a:	6823      	ldr	r3, [r4, #0]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	6023      	str	r3, [r4, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8007d80:	682a      	ldr	r2, [r5, #0]
 8007d82:	4b15      	ldr	r3, [pc, #84]	; (8007dd8 <HAL_DFSDM_FilterMspInit+0xbc>)
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d11c      	bne.n	8007dc2 <HAL_DFSDM_FilterMspInit+0xa6>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8007d88:	4c14      	ldr	r4, [pc, #80]	; (8007ddc <HAL_DFSDM_FilterMspInit+0xc0>)
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8007d8e:	f503 431f 	add.w	r3, r3, #40704	; 0x9f00
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007d92:	2180      	movs	r1, #128	; 0x80
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8007d94:	3344      	adds	r3, #68	; 0x44
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8007d96:	f44f 6000 	mov.w	r0, #2048	; 0x800
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007d9a:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8007d9e:	2220      	movs	r2, #32
 8007da0:	e9c4 0206 	strd	r0, r2, [r4, #24]
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8007da4:	6023      	str	r3, [r4, #0]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8007da6:	4620      	mov	r0, r4
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 8007da8:	2300      	movs	r3, #0
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007daa:	e9c4 3301 	strd	r3, r3, [r4, #4]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8007dae:	60e3      	str	r3, [r4, #12]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8007db0:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8007db2:	f001 fadd 	bl	8009370 <HAL_DMA_Init>
 8007db6:	b108      	cbz	r0, 8007dbc <HAL_DFSDM_FilterMspInit+0xa0>
    {
      Error_Handler();
 8007db8:	f7ff fe1e 	bl	80079f8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8007dbc:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
 8007dc0:	62a5      	str	r5, [r4, #40]	; 0x28
  }

}
 8007dc2:	b009      	add	sp, #36	; 0x24
 8007dc4:	bd30      	pop	{r4, r5, pc}
 8007dc6:	bf00      	nop
 8007dc8:	2000ed14 	.word	0x2000ed14
 8007dcc:	2000ed18 	.word	0x2000ed18
 8007dd0:	40021000 	.word	0x40021000
 8007dd4:	48001000 	.word	0x48001000
 8007dd8:	40016100 	.word	0x40016100
 8007ddc:	2000d57c 	.word	0x2000d57c

08007de0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8007de0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(DFSDM1_Init == 0)
 8007de2:	4c19      	ldr	r4, [pc, #100]	; (8007e48 <HAL_DFSDM_ChannelMspInit+0x68>)
{
 8007de4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007de6:	2214      	movs	r2, #20
 8007de8:	2100      	movs	r1, #0
 8007dea:	a803      	add	r0, sp, #12
 8007dec:	f005 f8f3 	bl	800cfd6 <memset>
  if(DFSDM1_Init == 0)
 8007df0:	6823      	ldr	r3, [r4, #0]
 8007df2:	bb33      	cbnz	r3, 8007e42 <HAL_DFSDM_ChannelMspInit+0x62>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8007df4:	4a15      	ldr	r2, [pc, #84]	; (8007e4c <HAL_DFSDM_ChannelMspInit+0x6c>)
 8007df6:	6813      	ldr	r3, [r2, #0]
 8007df8:	3301      	adds	r3, #1
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8007dfa:	2b01      	cmp	r3, #1
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8007dfc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8007dfe:	4b14      	ldr	r3, [pc, #80]	; (8007e50 <HAL_DFSDM_ChannelMspInit+0x70>)
 8007e00:	d108      	bne.n	8007e14 <HAL_DFSDM_ChannelMspInit+0x34>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8007e02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007e04:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007e08:	661a      	str	r2, [r3, #96]	; 0x60
 8007e0a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007e0c:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8007e10:	9201      	str	r2, [sp, #4]
 8007e12:	9a01      	ldr	r2, [sp, #4]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007e14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007e16:	480f      	ldr	r0, [pc, #60]	; (8007e54 <HAL_DFSDM_ChannelMspInit+0x74>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007e18:	f042 0210 	orr.w	r2, r2, #16
 8007e1c:	64da      	str	r2, [r3, #76]	; 0x4c
 8007e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e20:	f003 0310 	and.w	r3, r3, #16
 8007e24:	9302      	str	r3, [sp, #8]
 8007e26:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e28:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007e32:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8007e34:	2306      	movs	r3, #6
 8007e36:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007e38:	f001 fc06 	bl	8009648 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8007e3c:	6823      	ldr	r3, [r4, #0]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	6023      	str	r3, [r4, #0]
  }

}
 8007e42:	b008      	add	sp, #32
 8007e44:	bd10      	pop	{r4, pc}
 8007e46:	bf00      	nop
 8007e48:	2000ed14 	.word	0x2000ed14
 8007e4c:	2000ed18 	.word	0x2000ed18
 8007e50:	40021000 	.word	0x40021000
 8007e54:	48001000 	.word	0x48001000

08007e58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007e58:	b510      	push	{r4, lr}
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e5e:	2214      	movs	r2, #20
 8007e60:	2100      	movs	r1, #0
 8007e62:	a803      	add	r0, sp, #12
 8007e64:	f005 f8b7 	bl	800cfd6 <memset>
  if(hi2c->Instance==I2C2)
 8007e68:	6822      	ldr	r2, [r4, #0]
 8007e6a:	4b13      	ldr	r3, [pc, #76]	; (8007eb8 <HAL_I2C_MspInit+0x60>)
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d121      	bne.n	8007eb4 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e70:	4c12      	ldr	r4, [pc, #72]	; (8007ebc <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e72:	4813      	ldr	r0, [pc, #76]	; (8007ec0 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e74:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007e76:	f043 0302 	orr.w	r3, r3, #2
 8007e7a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007e7c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007e7e:	f003 0302 	and.w	r3, r3, #2
 8007e82:	9301      	str	r3, [sp, #4]
 8007e84:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007e86:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8007e8a:	2312      	movs	r3, #18
 8007e8c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e90:	2101      	movs	r1, #1
 8007e92:	2303      	movs	r3, #3
 8007e94:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007e98:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e9a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007e9c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e9e:	f001 fbd3 	bl	8009648 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007ea2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ea4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007ea8:	65a3      	str	r3, [r4, #88]	; 0x58
 8007eaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007eac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007eb0:	9302      	str	r3, [sp, #8]
 8007eb2:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8007eb4:	b008      	add	sp, #32
 8007eb6:	bd10      	pop	{r4, pc}
 8007eb8:	40005800 	.word	0x40005800
 8007ebc:	40021000 	.word	0x40021000
 8007ec0:	48000400 	.word	0x48000400

08007ec4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8007ec4:	b510      	push	{r4, lr}
 8007ec6:	4604      	mov	r4, r0
 8007ec8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007eca:	2214      	movs	r2, #20
 8007ecc:	2100      	movs	r1, #0
 8007ece:	a803      	add	r0, sp, #12
 8007ed0:	f005 f881 	bl	800cfd6 <memset>
  if(hqspi->Instance==QUADSPI)
 8007ed4:	6822      	ldr	r2, [r4, #0]
 8007ed6:	4b14      	ldr	r3, [pc, #80]	; (8007f28 <HAL_QSPI_MspInit+0x64>)
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d122      	bne.n	8007f22 <HAL_QSPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8007edc:	f103 4320 	add.w	r3, r3, #2684354560	; 0xa0000000
 8007ee0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8007ee4:	2103      	movs	r1, #3
    __HAL_RCC_QSPI_CLK_ENABLE();
 8007ee6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007ee8:	4810      	ldr	r0, [pc, #64]	; (8007f2c <HAL_QSPI_MspInit+0x68>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8007eea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007eee:	651a      	str	r2, [r3, #80]	; 0x50
 8007ef0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ef2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8007ef6:	9201      	str	r2, [sp, #4]
 8007ef8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007efa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007efc:	f042 0210 	orr.w	r2, r2, #16
 8007f00:	64da      	str	r2, [r3, #76]	; 0x4c
 8007f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f04:	f003 0310 	and.w	r3, r3, #16
 8007f08:	9302      	str	r3, [sp, #8]
 8007f0a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f0c:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
 8007f10:	2302      	movs	r3, #2
 8007f12:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8007f16:	230a      	movs	r3, #10
 8007f18:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007f1c:	a903      	add	r1, sp, #12
 8007f1e:	f001 fb93 	bl	8009648 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8007f22:	b008      	add	sp, #32
 8007f24:	bd10      	pop	{r4, pc}
 8007f26:	bf00      	nop
 8007f28:	a0001000 	.word	0xa0001000
 8007f2c:	48001000 	.word	0x48001000

08007f30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007f30:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f32:	2214      	movs	r2, #20
{
 8007f34:	b08a      	sub	sp, #40	; 0x28
 8007f36:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f38:	2100      	movs	r1, #0
 8007f3a:	eb0d 0002 	add.w	r0, sp, r2
 8007f3e:	f005 f84a 	bl	800cfd6 <memset>
  if(huart->Instance==USART1)
 8007f42:	682b      	ldr	r3, [r5, #0]
 8007f44:	4a30      	ldr	r2, [pc, #192]	; (8008008 <HAL_UART_MspInit+0xd8>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d13a      	bne.n	8007fc0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007f4a:	4b30      	ldr	r3, [pc, #192]	; (800800c <HAL_UART_MspInit+0xdc>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel6;
 8007f4c:	4c30      	ldr	r4, [pc, #192]	; (8008010 <HAL_UART_MspInit+0xe0>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8007f4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007f50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f54:	661a      	str	r2, [r3, #96]	; 0x60
 8007f56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007f58:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007f5c:	9201      	str	r2, [sp, #4]
 8007f5e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f62:	f042 0202 	orr.w	r2, r2, #2
 8007f66:	64da      	str	r2, [r3, #76]	; 0x4c
 8007f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f6a:	f003 0302 	and.w	r3, r3, #2
 8007f6e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f70:	2602      	movs	r6, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f72:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f74:	23c0      	movs	r3, #192	; 0xc0
 8007f76:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007f7a:	2003      	movs	r0, #3
 8007f7c:	2307      	movs	r3, #7
 8007f7e:	e9cd 0308 	strd	r0, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f82:	a905      	add	r1, sp, #20
 8007f84:	4823      	ldr	r0, [pc, #140]	; (8008014 <HAL_UART_MspInit+0xe4>)
 8007f86:	f001 fb5f 	bl	8009648 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel6;
 8007f8a:	4b23      	ldr	r3, [pc, #140]	; (8008018 <HAL_UART_MspInit+0xe8>)
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007f8c:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8007f8e:	e9c4 3600 	strd	r3, r6, [r4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007f92:	2300      	movs	r3, #0
 8007f94:	2610      	movs	r6, #16
 8007f96:	e9c4 6302 	strd	r6, r3, [r4, #8]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007f9a:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007f9e:	61a3      	str	r3, [r4, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8007fa0:	f04f 0c20 	mov.w	ip, #32
 8007fa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007fa8:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8007faa:	e9c4 c307 	strd	ip, r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007fae:	f001 f9df 	bl	8009370 <HAL_DMA_Init>
 8007fb2:	b108      	cbz	r0, 8007fb8 <HAL_UART_MspInit+0x88>
    {
      Error_Handler();
 8007fb4:	f7ff fd20 	bl	80079f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8007fb8:	66ec      	str	r4, [r5, #108]	; 0x6c
 8007fba:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007fbc:	b00a      	add	sp, #40	; 0x28
 8007fbe:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART3)
 8007fc0:	4a16      	ldr	r2, [pc, #88]	; (800801c <HAL_UART_MspInit+0xec>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d1fa      	bne.n	8007fbc <HAL_UART_MspInit+0x8c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007fc6:	4b11      	ldr	r3, [pc, #68]	; (800800c <HAL_UART_MspInit+0xdc>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007fc8:	4815      	ldr	r0, [pc, #84]	; (8008020 <HAL_UART_MspInit+0xf0>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8007fca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007fcc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007fd0:	659a      	str	r2, [r3, #88]	; 0x58
 8007fd2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007fd4:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8007fd8:	9203      	str	r2, [sp, #12]
 8007fda:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007fdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007fde:	f042 0208 	orr.w	r2, r2, #8
 8007fe2:	64da      	str	r2, [r3, #76]	; 0x4c
 8007fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fe6:	f003 0308 	and.w	r3, r3, #8
 8007fea:	9304      	str	r3, [sp, #16]
 8007fec:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fee:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007ff2:	2302      	movs	r3, #2
 8007ff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007ff8:	2103      	movs	r1, #3
 8007ffa:	2307      	movs	r3, #7
 8007ffc:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008000:	a905      	add	r1, sp, #20
 8008002:	f001 fb21 	bl	8009648 <HAL_GPIO_Init>
}
 8008006:	e7d9      	b.n	8007fbc <HAL_UART_MspInit+0x8c>
 8008008:	40013800 	.word	0x40013800
 800800c:	40021000 	.word	0x40021000
 8008010:	2000d5c4 	.word	0x2000d5c4
 8008014:	48000400 	.word	0x48000400
 8008018:	4002046c 	.word	0x4002046c
 800801c:	40004800 	.word	0x40004800
 8008020:	48000c00 	.word	0x48000c00

08008024 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8008024:	b510      	push	{r4, lr}
 8008026:	4604      	mov	r4, r0
 8008028:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800802a:	2214      	movs	r2, #20
 800802c:	2100      	movs	r1, #0
 800802e:	a803      	add	r0, sp, #12
 8008030:	f004 ffd1 	bl	800cfd6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8008034:	6823      	ldr	r3, [r4, #0]
 8008036:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800803a:	d13c      	bne.n	80080b6 <HAL_PCD_MspInit+0x92>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800803c:	4c20      	ldr	r4, [pc, #128]	; (80080c0 <HAL_PCD_MspInit+0x9c>)
 800803e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008040:	f043 0301 	orr.w	r3, r3, #1
 8008044:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008046:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008048:	f003 0301 	and.w	r3, r3, #1
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	9b00      	ldr	r3, [sp, #0]
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008050:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8008052:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800805a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800805c:	f001 faf4 	bl	8009648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008060:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8008064:	2302      	movs	r3, #2
 8008066:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800806a:	2100      	movs	r1, #0
 800806c:	2303      	movs	r3, #3
 800806e:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008076:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008078:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800807a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800807c:	f001 fae4 	bl	8009648 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008080:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008082:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008086:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008088:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800808a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800808e:	9301      	str	r3, [sp, #4]
 8008090:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008092:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008094:	00d8      	lsls	r0, r3, #3
 8008096:	d410      	bmi.n	80080ba <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008098:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800809a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800809e:	65a3      	str	r3, [r4, #88]	; 0x58
 80080a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080a6:	9302      	str	r3, [sp, #8]
 80080a8:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 80080aa:	f001 fd31 	bl	8009b10 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80080ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080b4:	65a3      	str	r3, [r4, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80080b6:	b008      	add	sp, #32
 80080b8:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 80080ba:	f001 fd29 	bl	8009b10 <HAL_PWREx_EnableVddUSB>
}
 80080be:	e7fa      	b.n	80080b6 <HAL_PCD_MspInit+0x92>
 80080c0:	40021000 	.word	0x40021000

080080c4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80080c4:	e7fe      	b.n	80080c4 <NMI_Handler>

080080c6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80080c6:	e7fe      	b.n	80080c6 <HardFault_Handler>

080080c8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80080c8:	e7fe      	b.n	80080c8 <MemManage_Handler>

080080ca <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80080ca:	e7fe      	b.n	80080ca <BusFault_Handler>

080080cc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80080cc:	e7fe      	b.n	80080cc <UsageFault_Handler>

080080ce <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80080ce:	4770      	bx	lr

080080d0 <DebugMon_Handler>:
 80080d0:	4770      	bx	lr

080080d2 <PendSV_Handler>:
 80080d2:	4770      	bx	lr

080080d4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80080d4:	f000 bebc 	b.w	8008e50 <HAL_IncTick>

080080d8 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80080d8:	4801      	ldr	r0, [pc, #4]	; (80080e0 <DMA1_Channel4_IRQHandler+0x8>)
 80080da:	f001 ba6a 	b.w	80095b2 <HAL_DMA_IRQHandler>
 80080de:	bf00      	nop
 80080e0:	2000d57c 	.word	0x2000d57c

080080e4 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80080e4:	4801      	ldr	r0, [pc, #4]	; (80080ec <SPI3_IRQHandler+0x8>)
 80080e6:	f002 bcfd 	b.w	800aae4 <HAL_SPI_IRQHandler>
 80080ea:	bf00      	nop
 80080ec:	2000daa4 	.word	0x2000daa4

080080f0 <DMA2_Channel6_IRQHandler>:
void DMA2_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80080f0:	4801      	ldr	r0, [pc, #4]	; (80080f8 <DMA2_Channel6_IRQHandler+0x8>)
 80080f2:	f001 ba5e 	b.w	80095b2 <HAL_DMA_IRQHandler>
 80080f6:	bf00      	nop
 80080f8:	2000d5c4 	.word	0x2000d5c4

080080fc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80080fc:	4a0b      	ldr	r2, [pc, #44]	; (800812c <_sbrk+0x30>)
 80080fe:	6811      	ldr	r1, [r2, #0]
{
 8008100:	b510      	push	{r4, lr}
 8008102:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8008104:	b909      	cbnz	r1, 800810a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8008106:	490a      	ldr	r1, [pc, #40]	; (8008130 <_sbrk+0x34>)
 8008108:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800810a:	6810      	ldr	r0, [r2, #0]
 800810c:	4909      	ldr	r1, [pc, #36]	; (8008134 <_sbrk+0x38>)
 800810e:	4c0a      	ldr	r4, [pc, #40]	; (8008138 <_sbrk+0x3c>)
 8008110:	4403      	add	r3, r0
 8008112:	1b09      	subs	r1, r1, r4
 8008114:	428b      	cmp	r3, r1
 8008116:	d906      	bls.n	8008126 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8008118:	f004 fe1c 	bl	800cd54 <__errno>
 800811c:	230c      	movs	r3, #12
 800811e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8008120:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8008124:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8008126:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8008128:	e7fc      	b.n	8008124 <_sbrk+0x28>
 800812a:	bf00      	nop
 800812c:	2000ed1c 	.word	0x2000ed1c
 8008130:	20014020 	.word	0x20014020
 8008134:	20018000 	.word	0x20018000
 8008138:	00000800 	.word	0x00000800

0800813c <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800813c:	4a0e      	ldr	r2, [pc, #56]	; (8008178 <SystemInit+0x3c>)
 800813e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008142:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008146:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800814a:	4b0c      	ldr	r3, [pc, #48]	; (800817c <SystemInit+0x40>)
 800814c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800814e:	2100      	movs	r1, #0
  RCC->CR |= RCC_CR_MSION;
 8008150:	f042 0201 	orr.w	r2, r2, #1
 8008154:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8008156:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800815e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8008162:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8008164:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008168:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008170:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8008172:	6199      	str	r1, [r3, #24]
}
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	e000ed00 	.word	0xe000ed00
 800817c:	40021000 	.word	0x40021000

08008180 <cosine_sum_window_create>:

/**
 * @brief Helper function to create cosine-sum windows
 */
void cosine_sum_window_create(float32_t *pDst, uint32_t len, float64_t a0, float64_t a1, float64_t a2)
{
 8008180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008184:	b088      	sub	sp, #32
 8008186:	ed8d 0b02 	vstr	d0, [sp, #8]
 800818a:	ed8d 1b04 	vstr	d1, [sp, #16]
 800818e:	ed8d 2b06 	vstr	d2, [sp, #24]
 8008192:	4682      	mov	sl, r0
 8008194:	460c      	mov	r4, r1

  for (uint32_t i = 0; i < len; i++)
 8008196:	2500      	movs	r5, #0
 8008198:	42a5      	cmp	r5, r4
 800819a:	d102      	bne.n	80081a2 <cosine_sum_window_create+0x22>
  {
    *pDst++ = a0
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
  }
}
 800819c:	b008      	add	sp, #32
 800819e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
 80081a2:	4628      	mov	r0, r5
 80081a4:	f7fe fa16 	bl	80065d4 <__aeabi_ui2d>
 80081a8:	4680      	mov	r8, r0
 80081aa:	4620      	mov	r0, r4
 80081ac:	4689      	mov	r9, r1
 80081ae:	f7fe fa11 	bl	80065d4 <__aeabi_ui2d>
 80081b2:	a323      	add	r3, pc, #140	; (adr r3, 8008240 <cosine_sum_window_create+0xc0>)
 80081b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b8:	4606      	mov	r6, r0
 80081ba:	460f      	mov	r7, r1
 80081bc:	4640      	mov	r0, r8
 80081be:	4649      	mov	r1, r9
 80081c0:	f7fe fa82 	bl	80066c8 <__aeabi_dmul>
 80081c4:	4632      	mov	r2, r6
 80081c6:	463b      	mov	r3, r7
 80081c8:	f7fe fba8 	bl	800691c <__aeabi_ddiv>
 80081cc:	ec41 0b10 	vmov	d0, r0, r1
 80081d0:	f007 fd8a 	bl	800fce8 <cos>
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 80081d4:	a31c      	add	r3, pc, #112	; (adr r3, 8008248 <cosine_sum_window_create+0xc8>)
 80081d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081da:	4640      	mov	r0, r8
 80081dc:	4649      	mov	r1, r9
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
 80081de:	ed8d 0b00 	vstr	d0, [sp]
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 80081e2:	f7fe fa71 	bl	80066c8 <__aeabi_dmul>
 80081e6:	4632      	mov	r2, r6
 80081e8:	463b      	mov	r3, r7
 80081ea:	f7fe fb97 	bl	800691c <__aeabi_ddiv>
 80081ee:	ec41 0b10 	vmov	d0, r0, r1
 80081f2:	f007 fd79 	bl	800fce8 <cos>
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
 80081f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081fa:	e9dd 0100 	ldrd	r0, r1, [sp]
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 80081fe:	ec59 8b10 	vmov	r8, r9, d0
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
 8008202:	f7fe fa61 	bl	80066c8 <__aeabi_dmul>
 8008206:	4602      	mov	r2, r0
 8008208:	460b      	mov	r3, r1
 800820a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800820e:	f7fe f8a3 	bl	8006358 <__aeabi_dsub>
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 8008212:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
 8008216:	4606      	mov	r6, r0
 8008218:	460f      	mov	r7, r1
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 800821a:	4640      	mov	r0, r8
 800821c:	4649      	mov	r1, r9
 800821e:	f7fe fa53 	bl	80066c8 <__aeabi_dmul>
 8008222:	4602      	mov	r2, r0
 8008224:	460b      	mov	r3, r1
 8008226:	4630      	mov	r0, r6
 8008228:	4639      	mov	r1, r7
 800822a:	f7fe f897 	bl	800635c <__adddf3>
 800822e:	f7fe fd23 	bl	8006c78 <__aeabi_d2f>
  for (uint32_t i = 0; i < len; i++)
 8008232:	3501      	adds	r5, #1
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 8008234:	f84a 0b04 	str.w	r0, [sl], #4
  for (uint32_t i = 0; i < len; i++)
 8008238:	e7ae      	b.n	8008198 <cosine_sum_window_create+0x18>
 800823a:	bf00      	nop
 800823c:	f3af 8000 	nop.w
 8008240:	54442d18 	.word	0x54442d18
 8008244:	401921fb 	.word	0x401921fb
 8008248:	54442d18 	.word	0x54442d18
 800824c:	402921fb 	.word	0x402921fb

08008250 <Window_Init>:
  switch (type)
 8008250:	2a01      	cmp	r2, #1
{
 8008252:	b510      	push	{r4, lr}
  switch (type)
 8008254:	d00e      	beq.n	8008274 <Window_Init+0x24>
 8008256:	2a02      	cmp	r2, #2
 8008258:	d013      	beq.n	8008282 <Window_Init+0x32>
 800825a:	b9ca      	cbnz	r2, 8008290 <Window_Init+0x40>
      cosine_sum_window_create(pDst, len, 0.5, 0.5, 0.0);
 800825c:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8008298 <Window_Init+0x48>
 8008260:	ed9f 2b0f 	vldr	d2, [pc, #60]	; 80082a0 <Window_Init+0x50>
 8008264:	eeb0 0a41 	vmov.f32	s0, s2
 8008268:	eef0 0a61 	vmov.f32	s1, s3
      cosine_sum_window_create(pDst, len, 0.42, 0.5, 0.08);
 800826c:	f7ff ff88 	bl	8008180 <cosine_sum_window_create>
  int32_t status = 0;
 8008270:	2000      	movs	r0, #0
}
 8008272:	bd10      	pop	{r4, pc}
      cosine_sum_window_create(pDst, len, 0.54, 0.46, 0.0);
 8008274:	ed9f 2b0a 	vldr	d2, [pc, #40]	; 80082a0 <Window_Init+0x50>
 8008278:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 80082a8 <Window_Init+0x58>
 800827c:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 80082b0 <Window_Init+0x60>
 8008280:	e7f4      	b.n	800826c <Window_Init+0x1c>
      cosine_sum_window_create(pDst, len, 0.42, 0.5, 0.08);
 8008282:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 80082b8 <Window_Init+0x68>
 8008286:	ed9f 1b04 	vldr	d1, [pc, #16]	; 8008298 <Window_Init+0x48>
 800828a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80082c0 <Window_Init+0x70>
 800828e:	e7ed      	b.n	800826c <Window_Init+0x1c>
  switch (type)
 8008290:	f04f 30ff 	mov.w	r0, #4294967295
  return status;
 8008294:	e7ed      	b.n	8008272 <Window_Init+0x22>
 8008296:	bf00      	nop
 8008298:	00000000 	.word	0x00000000
 800829c:	3fe00000 	.word	0x3fe00000
	...
 80082a8:	d70a3d71 	.word	0xd70a3d71
 80082ac:	3fdd70a3 	.word	0x3fdd70a3
 80082b0:	147ae148 	.word	0x147ae148
 80082b4:	3fe147ae 	.word	0x3fe147ae
 80082b8:	47ae147b 	.word	0x47ae147b
 80082bc:	3fb47ae1 	.word	0x3fb47ae1
 80082c0:	ae147ae1 	.word	0xae147ae1
 80082c4:	3fdae147 	.word	0x3fdae147

080082c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80082c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008300 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80082cc:	f7ff ff36 	bl	800813c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80082d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80082d2:	e003      	b.n	80082dc <LoopCopyDataInit>

080082d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80082d4:	4b0b      	ldr	r3, [pc, #44]	; (8008304 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80082d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80082d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80082da:	3104      	adds	r1, #4

080082dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80082dc:	480a      	ldr	r0, [pc, #40]	; (8008308 <LoopForever+0xa>)
	ldr	r3, =_edata
 80082de:	4b0b      	ldr	r3, [pc, #44]	; (800830c <LoopForever+0xe>)
	adds	r2, r0, r1
 80082e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80082e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80082e4:	d3f6      	bcc.n	80082d4 <CopyDataInit>
	ldr	r2, =_sbss
 80082e6:	4a0a      	ldr	r2, [pc, #40]	; (8008310 <LoopForever+0x12>)
	b	LoopFillZerobss
 80082e8:	e002      	b.n	80082f0 <LoopFillZerobss>

080082ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80082ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80082ec:	f842 3b04 	str.w	r3, [r2], #4

080082f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80082f0:	4b08      	ldr	r3, [pc, #32]	; (8008314 <LoopForever+0x16>)
	cmp	r2, r3
 80082f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80082f4:	d3f9      	bcc.n	80082ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80082f6:	f004 fe29 	bl	800cf4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80082fa:	f7ff f82f 	bl	800735c <main>

080082fe <LoopForever>:

LoopForever:
    b LoopForever
 80082fe:	e7fe      	b.n	80082fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008300:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8008304:	0804d250 	.word	0x0804d250
	ldr	r0, =_sdata
 8008308:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800830c:	20000c8c 	.word	0x20000c8c
	ldr	r2, =_sbss
 8008310:	20000c8c 	.word	0x20000c8c
	ldr	r3, = _ebss
 8008314:	2001401c 	.word	0x2001401c

08008318 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008318:	e7fe      	b.n	8008318 <ADC1_2_IRQHandler>
	...

0800831c <DFSDM_FilterMspInit>:
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None.
  */
static void DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
  if(hdfsdm_filter->Instance == DFSDM1_Filter0)
 800831c:	6802      	ldr	r2, [r0, #0]
 800831e:	4b34      	ldr	r3, [pc, #208]	; (80083f0 <DFSDM_FilterMspInit+0xd4>)
 8008320:	429a      	cmp	r2, r3
{
 8008322:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008324:	4c33      	ldr	r4, [pc, #204]	; (80083f4 <DFSDM_FilterMspInit+0xd8>)
  if(hdfsdm_filter->Instance == DFSDM1_Filter0)
 8008326:	d131      	bne.n	800838c <DFSDM_FilterMspInit+0x70>
  {
    /* Enable the DMA clock */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8008328:	f503 432f 	add.w	r3, r3, #44800	; 0xaf00
    /* Configure the hDmaDfsdm[0] handle parameters */
    hDmaDfsdm[0].Init.Request             = DMA_REQUEST_0;
    hDmaDfsdm[0].Init.Direction           = DMA_PERIPH_TO_MEMORY;
    hDmaDfsdm[0].Init.PeriphInc           = DMA_PINC_DISABLE;
    hDmaDfsdm[0].Init.MemInc              = DMA_MINC_ENABLE;
    hDmaDfsdm[0].Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800832c:	f04f 0c80 	mov.w	ip, #128	; 0x80
    __HAL_RCC_DMA1_CLK_ENABLE();
 8008330:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008332:	f042 0201 	orr.w	r2, r2, #1
 8008336:	649a      	str	r2, [r3, #72]	; 0x48
 8008338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hDmaDfsdm[0].Init.Mode                = DMA_CIRCULAR;
    hDmaDfsdm[0].Init.Priority            = DMA_PRIORITY_HIGH;
    hDmaDfsdm[0].Instance                 = DMA1_Channel4;

    /* Associate the DMA handle */
    __HAL_LINKDMA(hdfsdm_filter, hdmaReg, hDmaDfsdm[0]);
 800833a:	6284      	str	r4, [r0, #40]	; 0x28
    __HAL_RCC_DMA1_CLK_ENABLE();
 800833c:	f003 0301 	and.w	r3, r3, #1
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	9b00      	ldr	r3, [sp, #0]
    __HAL_LINKDMA(hdfsdm_filter, hdmaReg, hDmaDfsdm[0]);
 8008344:	62a0      	str	r0, [r4, #40]	; 0x28
    hDmaDfsdm[0].Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008346:	f44f 7300 	mov.w	r3, #512	; 0x200
 800834a:	e9c4 c304 	strd	ip, r3, [r4, #16]
    hDmaDfsdm[0].Init.Mode                = DMA_CIRCULAR;
 800834e:	f44f 6e00 	mov.w	lr, #2048	; 0x800
 8008352:	2320      	movs	r3, #32
 8008354:	e9c4 e306 	strd	lr, r3, [r4, #24]
    hDmaDfsdm[0].Init.Priority            = DMA_PRIORITY_HIGH;
 8008358:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hDmaDfsdm[0].Init.Request             = DMA_REQUEST_0;
 800835c:	2500      	movs	r5, #0
    hDmaDfsdm[0].Init.Priority            = DMA_PRIORITY_HIGH;
 800835e:	6223      	str	r3, [r4, #32]

    /* Deinitialize the DMA channel for new transfer */
    if (HAL_DMA_DeInit(&hDmaDfsdm[0]) != HAL_OK)
 8008360:	4620      	mov	r0, r4
    hDmaDfsdm[0].Instance                 = DMA1_Channel4;
 8008362:	4b25      	ldr	r3, [pc, #148]	; (80083f8 <DFSDM_FilterMspInit+0xdc>)
 8008364:	6023      	str	r3, [r4, #0]
    hDmaDfsdm[0].Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8008366:	e9c4 5501 	strd	r5, r5, [r4, #4]
    hDmaDfsdm[0].Init.PeriphInc           = DMA_PINC_DISABLE;
 800836a:	60e5      	str	r5, [r4, #12]
    if (HAL_DMA_DeInit(&hDmaDfsdm[0]) != HAL_OK)
 800836c:	f001 f86c 	bl	8009448 <HAL_DMA_DeInit>
    {
      /* Nothing to do */
    }

    /* Configure the DMA Channel */
    if (HAL_DMA_Init(&hDmaDfsdm[0]) != HAL_OK)
 8008370:	4620      	mov	r0, r4
 8008372:	f000 fffd 	bl	8009370 <HAL_DMA_Init>
    {
      /* Nothing to do */
    }

    /* DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8008376:	200e      	movs	r0, #14
 8008378:	462a      	mov	r2, r5
 800837a:	210f      	movs	r1, #15
 800837c:	f000 fda0 	bl	8008ec0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8008380:	200e      	movs	r0, #14

    /* DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, BSP_AUDIO_IN_IT_PRIORITY, 0);
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
  }
}
 8008382:	b002      	add	sp, #8
 8008384:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8008388:	f000 bdcc 	b.w	8008f24 <HAL_NVIC_EnableIRQ>
    if (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC2)
 800838c:	4b1b      	ldr	r3, [pc, #108]	; (80083fc <DFSDM_FilterMspInit+0xe0>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2b20      	cmp	r3, #32
 8008392:	d109      	bne.n	80083a8 <DFSDM_FilterMspInit+0x8c>
      __HAL_RCC_DMA1_CLK_ENABLE();
 8008394:	4b1a      	ldr	r3, [pc, #104]	; (8008400 <DFSDM_FilterMspInit+0xe4>)
 8008396:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008398:	f042 0201 	orr.w	r2, r2, #1
 800839c:	649a      	str	r2, [r3, #72]	; 0x48
 800839e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083a0:	f003 0301 	and.w	r3, r3, #1
 80083a4:	9301      	str	r3, [sp, #4]
 80083a6:	9b01      	ldr	r3, [sp, #4]
    __HAL_LINKDMA(hdfsdm_filter, hdmaReg, hDmaDfsdm[1]);
 80083a8:	4e16      	ldr	r6, [pc, #88]	; (8008404 <DFSDM_FilterMspInit+0xe8>)
    hDmaDfsdm[1].Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80083aa:	2280      	movs	r2, #128	; 0x80
 80083ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083b0:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
    hDmaDfsdm[1].Init.Mode                = DMA_CIRCULAR;
 80083b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80083b8:	2320      	movs	r3, #32
 80083ba:	e9c4 1318 	strd	r1, r3, [r4, #96]	; 0x60
    hDmaDfsdm[1].Init.Priority            = DMA_PRIORITY_HIGH;
 80083be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hDmaDfsdm[1].Init.Request             = DMA_REQUEST_0;
 80083c2:	2500      	movs	r5, #0
    hDmaDfsdm[1].Init.Priority            = DMA_PRIORITY_HIGH;
 80083c4:	66a3      	str	r3, [r4, #104]	; 0x68
    hDmaDfsdm[1].Instance                 = DMA1_Channel5;
 80083c6:	4b10      	ldr	r3, [pc, #64]	; (8008408 <DFSDM_FilterMspInit+0xec>)
 80083c8:	64a3      	str	r3, [r4, #72]	; 0x48
    hDmaDfsdm[1].Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80083ca:	e9c4 5513 	strd	r5, r5, [r4, #76]	; 0x4c
    hDmaDfsdm[1].Init.PeriphInc           = DMA_PINC_DISABLE;
 80083ce:	6565      	str	r5, [r4, #84]	; 0x54
    __HAL_LINKDMA(hdfsdm_filter, hdmaReg, hDmaDfsdm[1]);
 80083d0:	6286      	str	r6, [r0, #40]	; 0x28
 80083d2:	6720      	str	r0, [r4, #112]	; 0x70
    if (HAL_DMA_DeInit(&hDmaDfsdm[1]) != HAL_OK)
 80083d4:	4630      	mov	r0, r6
 80083d6:	f001 f837 	bl	8009448 <HAL_DMA_DeInit>
    if (HAL_DMA_Init(&hDmaDfsdm[1]) != HAL_OK)
 80083da:	4630      	mov	r0, r6
 80083dc:	f000 ffc8 	bl	8009370 <HAL_DMA_Init>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, BSP_AUDIO_IN_IT_PRIORITY, 0);
 80083e0:	210f      	movs	r1, #15
 80083e2:	4608      	mov	r0, r1
 80083e4:	462a      	mov	r2, r5
 80083e6:	f000 fd6b 	bl	8008ec0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80083ea:	200f      	movs	r0, #15
 80083ec:	e7c9      	b.n	8008382 <DFSDM_FilterMspInit+0x66>
 80083ee:	bf00      	nop
 80083f0:	40016100 	.word	0x40016100
 80083f4:	20013ce4 	.word	0x20013ce4
 80083f8:	40020044 	.word	0x40020044
 80083fc:	2000000c 	.word	0x2000000c
 8008400:	40021000 	.word	0x40021000
 8008404:	20013d2c 	.word	0x20013d2c
 8008408:	40020058 	.word	0x40020058

0800840c <DFSDM_ChannelMspInit.isra.0>:
static void DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
 800840c:	b530      	push	{r4, r5, lr}
  if (((hdfsdm_channel->Instance == DFSDM1_Channel2) && ((Audio_In_Ctx[0].Device & AUDIO_IN_DIGITAL_MIC1) != 0U)) || \
 800840e:	4b22      	ldr	r3, [pc, #136]	; (8008498 <DFSDM_ChannelMspInit.isra.0+0x8c>)
 8008410:	4298      	cmp	r0, r3
static void DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
 8008412:	b089      	sub	sp, #36	; 0x24
  if (((hdfsdm_channel->Instance == DFSDM1_Channel2) && ((Audio_In_Ctx[0].Device & AUDIO_IN_DIGITAL_MIC1) != 0U)) || \
 8008414:	d105      	bne.n	8008422 <DFSDM_ChannelMspInit.isra.0+0x16>
 8008416:	4b21      	ldr	r3, [pc, #132]	; (800849c <DFSDM_ChannelMspInit.isra.0+0x90>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	06d9      	lsls	r1, r3, #27
 800841c:	d408      	bmi.n	8008430 <DFSDM_ChannelMspInit.isra.0+0x24>
}
 800841e:	b009      	add	sp, #36	; 0x24
 8008420:	bd30      	pop	{r4, r5, pc}
  if (((hdfsdm_channel->Instance == DFSDM1_Channel2) && ((Audio_In_Ctx[0].Device & AUDIO_IN_DIGITAL_MIC1) != 0U)) || \
 8008422:	4b1f      	ldr	r3, [pc, #124]	; (80084a0 <DFSDM_ChannelMspInit.isra.0+0x94>)
 8008424:	4298      	cmp	r0, r3
 8008426:	d1fa      	bne.n	800841e <DFSDM_ChannelMspInit.isra.0+0x12>
      ((hdfsdm_channel->Instance == DFSDM1_Channel1) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC2)))
 8008428:	4b1c      	ldr	r3, [pc, #112]	; (800849c <DFSDM_ChannelMspInit.isra.0+0x90>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2b20      	cmp	r3, #32
 800842e:	d1f6      	bne.n	800841e <DFSDM_ChannelMspInit.isra.0+0x12>
    AUDIO_DFSDM1_CLK_ENABLE();
 8008430:	4c1c      	ldr	r4, [pc, #112]	; (80084a4 <DFSDM_ChannelMspInit.isra.0+0x98>)
    HAL_GPIO_Init(AUDIO_DFSDM1_CKOUT_GPIO_PORT, &GPIO_InitStruct);
 8008432:	481d      	ldr	r0, [pc, #116]	; (80084a8 <DFSDM_ChannelMspInit.isra.0+0x9c>)
    AUDIO_DFSDM1_CLK_ENABLE();
 8008434:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800843a:	6623      	str	r3, [r4, #96]	; 0x60
 800843c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800843e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	9b00      	ldr	r3, [sp, #0]
    AUDIO_DFSDM1_CKOUT_GPIO_CLK_ENABLE();
 8008446:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008448:	f043 0310 	orr.w	r3, r3, #16
 800844c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800844e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008450:	f003 0310 	and.w	r3, r3, #16
 8008454:	9301      	str	r3, [sp, #4]
 8008456:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8008458:	2202      	movs	r2, #2
 800845a:	2300      	movs	r3, #0
 800845c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = AUDIO_DFSDM1_CKOUT_GPIO_AF;
 8008460:	2506      	movs	r5, #6
 8008462:	2303      	movs	r3, #3
 8008464:	e9cd 3506 	strd	r3, r5, [sp, #24]
    HAL_GPIO_Init(AUDIO_DFSDM1_CKOUT_GPIO_PORT, &GPIO_InitStruct);
 8008468:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin       = AUDIO_DFSDM1_CKOUT_GPIO_PIN;
 800846a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800846e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(AUDIO_DFSDM1_CKOUT_GPIO_PORT, &GPIO_InitStruct);
 8008470:	f001 f8ea 	bl	8009648 <HAL_GPIO_Init>
    AUDIO_DFSDM1_DATIN2_GPIO_CLK_ENABLE();
 8008474:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    HAL_GPIO_Init(AUDIO_DFSDM1_DATIN2_GPIO_PORT, &GPIO_InitStruct);
 8008476:	480c      	ldr	r0, [pc, #48]	; (80084a8 <DFSDM_ChannelMspInit.isra.0+0x9c>)
    AUDIO_DFSDM1_DATIN2_GPIO_CLK_ENABLE();
 8008478:	f043 0310 	orr.w	r3, r3, #16
 800847c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800847e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    GPIO_InitStruct.Alternate = AUDIO_DFSDM1_DATIN2_GPIO_AF;
 8008480:	9507      	str	r5, [sp, #28]
    AUDIO_DFSDM1_DATIN2_GPIO_CLK_ENABLE();
 8008482:	f003 0310 	and.w	r3, r3, #16
 8008486:	9302      	str	r3, [sp, #8]
 8008488:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(AUDIO_DFSDM1_DATIN2_GPIO_PORT, &GPIO_InitStruct);
 800848a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin       = AUDIO_DFSDM1_DATIN2_GPIO_PIN;
 800848c:	2380      	movs	r3, #128	; 0x80
 800848e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(AUDIO_DFSDM1_DATIN2_GPIO_PORT, &GPIO_InitStruct);
 8008490:	f001 f8da 	bl	8009648 <HAL_GPIO_Init>
}
 8008494:	e7c3      	b.n	800841e <DFSDM_ChannelMspInit.isra.0+0x12>
 8008496:	bf00      	nop
 8008498:	40016040 	.word	0x40016040
 800849c:	2000000c 	.word	0x2000000c
 80084a0:	40016020 	.word	0x40016020
 80084a4:	40021000 	.word	0x40021000
 80084a8:	48001000 	.word	0x48001000

080084ac <BSP_AUDIO_IN_Record>:
{
 80084ac:	b510      	push	{r4, lr}
  if ((Instance >= AUDIO_IN_INSTANCES_NBR) || (pData == NULL) || (NbrOfBytes > 65535U))
 80084ae:	2800      	cmp	r0, #0
 80084b0:	d139      	bne.n	8008526 <BSP_AUDIO_IN_Record+0x7a>
 80084b2:	2900      	cmp	r1, #0
 80084b4:	d037      	beq.n	8008526 <BSP_AUDIO_IN_Record+0x7a>
  else if ((NbrOfBytes / 2U) > BSP_AUDIO_IN_DEFAULT_BUFFER_SIZE)
 80084b6:	f242 73d9 	movw	r3, #10201	; 0x27d9
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d833      	bhi.n	8008526 <BSP_AUDIO_IN_Record+0x7a>
  else if (Audio_In_Ctx[Instance].State != AUDIO_IN_STATE_STOP)
 80084be:	4c1e      	ldr	r4, [pc, #120]	; (8008538 <BSP_AUDIO_IN_Record+0x8c>)
 80084c0:	69e3      	ldr	r3, [r4, #28]
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d132      	bne.n	800852c <BSP_AUDIO_IN_Record+0x80>
    Audio_DmaDigMic1RecHalfBuffCplt = 0;
 80084c6:	4b1d      	ldr	r3, [pc, #116]	; (800853c <BSP_AUDIO_IN_Record+0x90>)
 80084c8:	6018      	str	r0, [r3, #0]
    Audio_DmaDigMic1RecBuffCplt     = 0;
 80084ca:	4b1d      	ldr	r3, [pc, #116]	; (8008540 <BSP_AUDIO_IN_Record+0x94>)
 80084cc:	6018      	str	r0, [r3, #0]
    Audio_DmaDigMic2RecHalfBuffCplt = 0;
 80084ce:	4b1d      	ldr	r3, [pc, #116]	; (8008544 <BSP_AUDIO_IN_Record+0x98>)
 80084d0:	6018      	str	r0, [r3, #0]
    Audio_DmaDigMic2RecBuffCplt     = 0;
 80084d2:	4b1d      	ldr	r3, [pc, #116]	; (8008548 <BSP_AUDIO_IN_Record+0x9c>)
 80084d4:	6018      	str	r0, [r3, #0]
    if ((Audio_In_Ctx[Instance].Device & AUDIO_IN_DIGITAL_MIC2) == AUDIO_IN_DIGITAL_MIC2)
 80084d6:	6823      	ldr	r3, [r4, #0]
    Audio_In_Ctx[Instance].Size  = NbrOfBytes;
 80084d8:	e9c4 1204 	strd	r1, r2, [r4, #16]
    if ((Audio_In_Ctx[Instance].Device & AUDIO_IN_DIGITAL_MIC2) == AUDIO_IN_DIGITAL_MIC2)
 80084dc:	0699      	lsls	r1, r3, #26
 80084de:	d412      	bmi.n	8008506 <BSP_AUDIO_IN_Record+0x5a>
  int32_t  status = BSP_ERROR_NONE;
 80084e0:	2000      	movs	r0, #0
    if (((Audio_In_Ctx[Instance].Device & AUDIO_IN_DIGITAL_MIC1) == AUDIO_IN_DIGITAL_MIC1) && (status == BSP_ERROR_NONE))
 80084e2:	6823      	ldr	r3, [r4, #0]
 80084e4:	06db      	lsls	r3, r3, #27
 80084e6:	d51b      	bpl.n	8008520 <BSP_AUDIO_IN_Record+0x74>
 80084e8:	b960      	cbnz	r0, 8008504 <BSP_AUDIO_IN_Record+0x58>
                                          (Audio_In_Ctx[Instance].Size / (2U * Audio_In_Ctx[Instance].ChannelsNbr))) != HAL_OK)
 80084ea:	68e2      	ldr	r2, [r4, #12]
      if(HAL_DFSDM_FilterRegularStart_DMA(&haudio_in_dfsdm_filter[0],
 80084ec:	6963      	ldr	r3, [r4, #20]
 80084ee:	4917      	ldr	r1, [pc, #92]	; (800854c <BSP_AUDIO_IN_Record+0xa0>)
 80084f0:	4817      	ldr	r0, [pc, #92]	; (8008550 <BSP_AUDIO_IN_Record+0xa4>)
                                          (Audio_In_Ctx[Instance].Size / (2U * Audio_In_Ctx[Instance].ChannelsNbr))) != HAL_OK)
 80084f2:	0052      	lsls	r2, r2, #1
      if(HAL_DFSDM_FilterRegularStart_DMA(&haudio_in_dfsdm_filter[0],
 80084f4:	fbb3 f2f2 	udiv	r2, r3, r2
 80084f8:	f000 feec 	bl	80092d4 <HAL_DFSDM_FilterRegularStart_DMA>
 80084fc:	b9c8      	cbnz	r0, 8008532 <BSP_AUDIO_IN_Record+0x86>
      Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_RECORDING;
 80084fe:	2301      	movs	r3, #1
 8008500:	61e3      	str	r3, [r4, #28]
 8008502:	2000      	movs	r0, #0
}
 8008504:	bd10      	pop	{r4, pc}
                                          (Audio_In_Ctx[Instance].Size / (2U * Audio_In_Ctx[Instance].ChannelsNbr))) != HAL_OK)
 8008506:	68e3      	ldr	r3, [r4, #12]
      if(HAL_DFSDM_FilterRegularStart_DMA(&haudio_in_dfsdm_filter[1],
 8008508:	4912      	ldr	r1, [pc, #72]	; (8008554 <BSP_AUDIO_IN_Record+0xa8>)
 800850a:	4813      	ldr	r0, [pc, #76]	; (8008558 <BSP_AUDIO_IN_Record+0xac>)
                                          (Audio_In_Ctx[Instance].Size / (2U * Audio_In_Ctx[Instance].ChannelsNbr))) != HAL_OK)
 800850c:	005b      	lsls	r3, r3, #1
      if(HAL_DFSDM_FilterRegularStart_DMA(&haudio_in_dfsdm_filter[1],
 800850e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008512:	f000 fedf 	bl	80092d4 <HAL_DFSDM_FilterRegularStart_DMA>
 8008516:	2800      	cmp	r0, #0
 8008518:	d0e2      	beq.n	80084e0 <BSP_AUDIO_IN_Record+0x34>
        status = BSP_ERROR_PERIPH_FAILURE;
 800851a:	f06f 0003 	mvn.w	r0, #3
 800851e:	e7e0      	b.n	80084e2 <BSP_AUDIO_IN_Record+0x36>
    if (status == BSP_ERROR_NONE)
 8008520:	2800      	cmp	r0, #0
 8008522:	d0ec      	beq.n	80084fe <BSP_AUDIO_IN_Record+0x52>
 8008524:	e7ee      	b.n	8008504 <BSP_AUDIO_IN_Record+0x58>
    status = BSP_ERROR_WRONG_PARAM;
 8008526:	f06f 0001 	mvn.w	r0, #1
 800852a:	e7eb      	b.n	8008504 <BSP_AUDIO_IN_Record+0x58>
    status = BSP_ERROR_BUSY;
 800852c:	f06f 0002 	mvn.w	r0, #2
 8008530:	e7e8      	b.n	8008504 <BSP_AUDIO_IN_Record+0x58>
        status = BSP_ERROR_PERIPH_FAILURE;
 8008532:	f06f 0003 	mvn.w	r0, #3
  return status;
 8008536:	e7e5      	b.n	8008504 <BSP_AUDIO_IN_Record+0x58>
 8008538:	2000000c 	.word	0x2000000c
 800853c:	20013cd8 	.word	0x20013cd8
 8008540:	20013cd4 	.word	0x20013cd4
 8008544:	20013ce0 	.word	0x20013ce0
 8008548:	20013cdc 	.word	0x20013cdc
 800854c:	2000ed20 	.word	0x2000ed20
 8008550:	20013de4 	.word	0x20013de4
 8008554:	20013cd0 	.word	0x20013cd0
 8008558:	20013e38 	.word	0x20013e38

0800855c <BSP_AUDIO_IN_Error_CallBack>:
 800855c:	4770      	bx	lr
	...

08008560 <MX_DFSDM1_ClockConfig>:
{
 8008560:	b510      	push	{r4, lr}
 8008562:	b0a2      	sub	sp, #136	; 0x88
  HAL_RCCEx_GetPeriphCLKConfig(&RCC_ExCLKInitStruct);
 8008564:	4668      	mov	r0, sp
{
 8008566:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&RCC_ExCLKInitStruct);
 8008568:	f002 fa12 	bl	800a990 <HAL_RCCEx_GetPeriphCLKConfig>
  if((SampleRate == AUDIO_FREQUENCY_11K) || (SampleRate == AUDIO_FREQUENCY_22K) || (SampleRate == AUDIO_FREQUENCY_44K) ||
 800856c:	f642 3311 	movw	r3, #11025	; 0x2b11
 8008570:	429c      	cmp	r4, r3
 8008572:	d00d      	beq.n	8008590 <MX_DFSDM1_ClockConfig+0x30>
 8008574:	f245 6322 	movw	r3, #22050	; 0x5622
 8008578:	429c      	cmp	r4, r3
 800857a:	d009      	beq.n	8008590 <MX_DFSDM1_ClockConfig+0x30>
 800857c:	f64a 4344 	movw	r3, #44100	; 0xac44
 8008580:	429c      	cmp	r4, r3
 8008582:	d005      	beq.n	8008590 <MX_DFSDM1_ClockConfig+0x30>
 8008584:	4b11      	ldr	r3, [pc, #68]	; (80085cc <MX_DFSDM1_ClockConfig+0x6c>)
 8008586:	429c      	cmp	r4, r3
 8008588:	d002      	beq.n	8008590 <MX_DFSDM1_ClockConfig+0x30>
     (SampleRate == AUDIO_FREQUENCY_88K) || (SampleRate == AUDIO_FREQUENCY_176K))
 800858a:	4b11      	ldr	r3, [pc, #68]	; (80085d0 <MX_DFSDM1_ClockConfig+0x70>)
 800858c:	429c      	cmp	r4, r3
 800858e:	d113      	bne.n	80085b8 <MX_DFSDM1_ClockConfig+0x58>
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1Source   = RCC_PLLSOURCE_MSI;
 8008590:	2301      	movs	r3, #1
 8008592:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008596:	e9cd 0300 	strd	r0, r3, [sp]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1M        = 1;
 800859a:	9302      	str	r3, [sp, #8]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1N        = 48;
 800859c:	2330      	movs	r3, #48	; 0x30
 800859e:	9303      	str	r3, [sp, #12]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1P        = 17;
 80085a0:	2311      	movs	r3, #17
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1P        = 7;
 80085a2:	9304      	str	r3, [sp, #16]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80085a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80085a8:	9307      	str	r3, [sp, #28]
  status = HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
 80085aa:	4668      	mov	r0, sp
    RCC_ExCLKInitStruct.Sai1ClockSelection      = RCC_SAI1CLKSOURCE_PLLSAI1;
 80085ac:	2300      	movs	r3, #0
 80085ae:	9319      	str	r3, [sp, #100]	; 0x64
  status = HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
 80085b0:	f002 f802 	bl	800a5b8 <HAL_RCCEx_PeriphCLKConfig>
}
 80085b4:	b022      	add	sp, #136	; 0x88
 80085b6:	bd10      	pop	{r4, pc}
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1Source   = RCC_PLLSOURCE_MSI;
 80085b8:	2301      	movs	r3, #1
 80085ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80085be:	e9cd 1300 	strd	r1, r3, [sp]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1M        = 1;
 80085c2:	9302      	str	r3, [sp, #8]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1N        = 86;
 80085c4:	2356      	movs	r3, #86	; 0x56
 80085c6:	9303      	str	r3, [sp, #12]
    RCC_ExCLKInitStruct.PLLSAI1.PLLSAI1P        = 7;
 80085c8:	2307      	movs	r3, #7
 80085ca:	e7ea      	b.n	80085a2 <MX_DFSDM1_ClockConfig+0x42>
 80085cc:	00015888 	.word	0x00015888
 80085d0:	0002b110 	.word	0x0002b110

080085d4 <MX_DFSDM1_Init>:
{
 80085d4:	b570      	push	{r4, r5, r6, lr}
  hDfsdmChannel->Instance                      = MXInit->ChannelInstance;
 80085d6:	6913      	ldr	r3, [r2, #16]
 80085d8:	600b      	str	r3, [r1, #0]
  hDfsdmChannel->Init.OutputClock.Activation   = ENABLE;
 80085da:	2601      	movs	r6, #1
 80085dc:	710e      	strb	r6, [r1, #4]
{
 80085de:	4615      	mov	r5, r2
  hDfsdmChannel->Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80085e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80085e4:	608b      	str	r3, [r1, #8]
  hDfsdmChannel->Init.OutputClock.Divider      = MXInit->ClockDivider;
 80085e6:	6a13      	ldr	r3, [r2, #32]
  hDfsdmChannel->Init.Input.Pins               = MXInit->DigitalMicPins;
 80085e8:	6952      	ldr	r2, [r2, #20]
  hDfsdmChannel->Init.OutputClock.Divider      = MXInit->ClockDivider;
 80085ea:	60cb      	str	r3, [r1, #12]
  hDfsdmChannel->Init.Input.Pins               = MXInit->DigitalMicPins;
 80085ec:	618a      	str	r2, [r1, #24]
  hDfsdmChannel->Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80085ee:	2300      	movs	r3, #0
  hDfsdmChannel->Init.SerialInterface.Type     = MXInit->DigitalMicType;
 80085f0:	69aa      	ldr	r2, [r5, #24]
 80085f2:	61ca      	str	r2, [r1, #28]
  hDfsdmChannel->Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 80085f4:	e9c1 3304 	strd	r3, r3, [r1, #16]
  hDfsdmChannel->Init.Awd.FilterOrder          = DFSDM_CHANNEL_SINC1_ORDER;
 80085f8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
{
 80085fc:	4604      	mov	r4, r0
 80085fe:	4608      	mov	r0, r1
  hDfsdmChannel->Init.Awd.FilterOrder          = DFSDM_CHANNEL_SINC1_ORDER;
 8008600:	2104      	movs	r1, #4
 8008602:	e9c0 1208 	strd	r1, r2, [r0, #32]
  hDfsdmChannel->Init.Awd.Oversampling         = 10;
 8008606:	220a      	movs	r2, #10
  hDfsdmChannel->Init.Offset                   = 0;
 8008608:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  hDfsdmChannel->Init.RightBitShift            = MXInit->RightBitShift;
 800860c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800860e:	6303      	str	r3, [r0, #48]	; 0x30
  if(HAL_OK != HAL_DFSDM_ChannelInit(hDfsdmChannel))
 8008610:	f000 fd5c 	bl	80090cc <HAL_DFSDM_ChannelInit>
 8008614:	b108      	cbz	r0, 800861a <MX_DFSDM1_Init+0x46>
    status = HAL_ERROR;
 8008616:	2001      	movs	r0, #1
}
 8008618:	bd70      	pop	{r4, r5, r6, pc}
    hDfsdmFilter->Instance                          = MXInit->FilterInstance;
 800861a:	682b      	ldr	r3, [r5, #0]
 800861c:	6023      	str	r3, [r4, #0]
    hDfsdmFilter->Init.RegularParam.Trigger         = MXInit->RegularTrigger;
 800861e:	686b      	ldr	r3, [r5, #4]
 8008620:	6063      	str	r3, [r4, #4]
    hDfsdmFilter->Init.RegularParam.FastMode        = ENABLE;
 8008622:	f240 1301 	movw	r3, #257	; 0x101
 8008626:	8123      	strh	r3, [r4, #8]
    hDfsdmFilter->Init.InjectedParam.ScanMode       = DISABLE;
 8008628:	8220      	strh	r0, [r4, #16]
    hDfsdmFilter->Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_BOTH_EDGES;
 800862a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800862e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008632:	e9c4 2305 	strd	r2, r3, [r4, #20]
    hDfsdmFilter->Init.FilterParam.SincOrder        = MXInit->SincOrder;
 8008636:	68ab      	ldr	r3, [r5, #8]
 8008638:	61e3      	str	r3, [r4, #28]
    hDfsdmFilter->Init.FilterParam.Oversampling     = MXInit->Oversampling;
 800863a:	68eb      	ldr	r3, [r5, #12]
    hDfsdmFilter->Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 800863c:	60e0      	str	r0, [r4, #12]
    hDfsdmFilter->Init.FilterParam.IntOversampling  = 1;
 800863e:	e9c4 3608 	strd	r3, r6, [r4, #32]
    if(HAL_DFSDM_FilterInit(hDfsdmFilter) != HAL_OK)
 8008642:	4620      	mov	r0, r4
 8008644:	f000 fdb6 	bl	80091b4 <HAL_DFSDM_FilterInit>
 8008648:	2800      	cmp	r0, #0
 800864a:	d1e4      	bne.n	8008616 <MX_DFSDM1_Init+0x42>
      if(HAL_DFSDM_FilterConfigRegChannel(hDfsdmFilter, MXInit->Channel4Filter, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800864c:	69e9      	ldr	r1, [r5, #28]
 800864e:	4632      	mov	r2, r6
 8008650:	4620      	mov	r0, r4
 8008652:	f000 fe21 	bl	8009298 <HAL_DFSDM_FilterConfigRegChannel>
    status = HAL_ERROR;
 8008656:	3800      	subs	r0, #0
 8008658:	bf18      	it	ne
 800865a:	2001      	movne	r0, #1
 800865c:	e7dc      	b.n	8008618 <MX_DFSDM1_Init+0x44>
	...

08008660 <BSP_AUDIO_IN_Init>:
{
 8008660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008664:	b08b      	sub	sp, #44	; 0x2c
  if (Instance >= AUDIO_IN_INSTANCES_NBR)
 8008666:	2800      	cmp	r0, #0
 8008668:	f040 81e7 	bne.w	8008a3a <BSP_AUDIO_IN_Init+0x3da>
  else if (Audio_In_Ctx[Instance].State != AUDIO_IN_STATE_RESET)
 800866c:	4c0a      	ldr	r4, [pc, #40]	; (8008698 <BSP_AUDIO_IN_Init+0x38>)
 800866e:	69e6      	ldr	r6, [r4, #28]
 8008670:	2e00      	cmp	r6, #0
 8008672:	f040 81e5 	bne.w	8008a40 <BSP_AUDIO_IN_Init+0x3e0>
  else if (AudioInit->BitsPerSample != AUDIO_RESOLUTION_16b)
 8008676:	688d      	ldr	r5, [r1, #8]
 8008678:	2d10      	cmp	r5, #16
 800867a:	d105      	bne.n	8008688 <BSP_AUDIO_IN_Init+0x28>
  else if (((AudioInit->Device == AUDIO_IN_DIGITAL_MIC) && (AudioInit->ChannelsNbr != 2U)) ||
 800867c:	680a      	ldr	r2, [r1, #0]
 800867e:	68cb      	ldr	r3, [r1, #12]
 8008680:	2a30      	cmp	r2, #48	; 0x30
 8008682:	d104      	bne.n	800868e <BSP_AUDIO_IN_Init+0x2e>
 8008684:	2b02      	cmp	r3, #2
           ((AudioInit->Device == AUDIO_IN_DIGITAL_MIC2) && (AudioInit->ChannelsNbr != 1U)))
 8008686:	d00b      	beq.n	80086a0 <BSP_AUDIO_IN_Init+0x40>
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8008688:	f06f 000a 	mvn.w	r0, #10
 800868c:	e17f      	b.n	800898e <BSP_AUDIO_IN_Init+0x32e>
  else if (((AudioInit->Device == AUDIO_IN_DIGITAL_MIC) && (AudioInit->ChannelsNbr != 2U)) ||
 800868e:	2a10      	cmp	r2, #16
 8008690:	d104      	bne.n	800869c <BSP_AUDIO_IN_Init+0x3c>
           ((AudioInit->Device == AUDIO_IN_DIGITAL_MIC2) && (AudioInit->ChannelsNbr != 1U)))
 8008692:	2b01      	cmp	r3, #1
 8008694:	e7f7      	b.n	8008686 <BSP_AUDIO_IN_Init+0x26>
 8008696:	bf00      	nop
 8008698:	2000000c 	.word	0x2000000c
           ((AudioInit->Device == AUDIO_IN_DIGITAL_MIC1) && (AudioInit->ChannelsNbr != 1U)) ||
 800869c:	2a20      	cmp	r2, #32
 800869e:	d0f8      	beq.n	8008692 <BSP_AUDIO_IN_Init+0x32>
    haudio_in_dfsdm_channel[0].Instance = DFSDM1_Channel2;
 80086a0:	f8df a308 	ldr.w	sl, [pc, #776]	; 80089ac <BSP_AUDIO_IN_Init+0x34c>
    Audio_In_Ctx[Instance].Device         = AudioInit->Device;
 80086a4:	6022      	str	r2, [r4, #0]
    Audio_In_Ctx[Instance].BitsPerSample  = AudioInit->BitsPerSample;
 80086a6:	2010      	movs	r0, #16
    Audio_In_Ctx[Instance].SampleRate     = AudioInit->SampleRate;
 80086a8:	684a      	ldr	r2, [r1, #4]
    haudio_in_dfsdm_filter[0].Instance  = DFSDM1_Filter0;
 80086aa:	f8df 8304 	ldr.w	r8, [pc, #772]	; 80089b0 <BSP_AUDIO_IN_Init+0x350>
    haudio_in_dfsdm_channel[0].Instance = DFSDM1_Channel2;
 80086ae:	f8df b31c 	ldr.w	fp, [pc, #796]	; 80089cc <BSP_AUDIO_IN_Init+0x36c>
    haudio_in_dfsdm_filter[0].Instance  = DFSDM1_Filter0;
 80086b2:	f8df 931c 	ldr.w	r9, [pc, #796]	; 80089d0 <BSP_AUDIO_IN_Init+0x370>
    haudio_in_dfsdm_filter[1].Instance  = DFSDM1_Filter1;
 80086b6:	4fb9      	ldr	r7, [pc, #740]	; (800899c <BSP_AUDIO_IN_Init+0x33c>)
    Audio_In_Ctx[Instance].SampleRate     = AudioInit->SampleRate;
 80086b8:	6062      	str	r2, [r4, #4]
    Audio_In_Ctx[Instance].ChannelsNbr    = AudioInit->ChannelsNbr;
 80086ba:	e9c4 0302 	strd	r0, r3, [r4, #8]
    Audio_In_Ctx[Instance].Volume         = AudioInit->Volume;
 80086be:	690b      	ldr	r3, [r1, #16]
 80086c0:	61a3      	str	r3, [r4, #24]
    if (MX_DFSDM1_ClockConfig(&haudio_in_dfsdm_channel[0], AudioInit->SampleRate) != HAL_OK)
 80086c2:	4611      	mov	r1, r2
    haudio_in_dfsdm_channel[1].Instance = DFSDM1_Channel1;
 80086c4:	4bb6      	ldr	r3, [pc, #728]	; (80089a0 <BSP_AUDIO_IN_Init+0x340>)
    haudio_in_dfsdm_channel[0].Instance = DFSDM1_Channel2;
 80086c6:	f8ca b000 	str.w	fp, [sl]
    if (MX_DFSDM1_ClockConfig(&haudio_in_dfsdm_channel[0], AudioInit->SampleRate) != HAL_OK)
 80086ca:	4650      	mov	r0, sl
    haudio_in_dfsdm_channel[1].Instance = DFSDM1_Channel1;
 80086cc:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
    haudio_in_dfsdm_filter[0].Instance  = DFSDM1_Filter0;
 80086d0:	f8c8 9000 	str.w	r9, [r8]
    haudio_in_dfsdm_filter[1].Instance  = DFSDM1_Filter1;
 80086d4:	f8c8 7054 	str.w	r7, [r8, #84]	; 0x54
    if (MX_DFSDM1_ClockConfig(&haudio_in_dfsdm_channel[0], AudioInit->SampleRate) != HAL_OK)
 80086d8:	f7ff ff42 	bl	8008560 <MX_DFSDM1_ClockConfig>
 80086dc:	2800      	cmp	r0, #0
 80086de:	f040 81b2 	bne.w	8008a46 <BSP_AUDIO_IN_Init+0x3e6>
      if ((Audio_In_Ctx[Instance].Device & AUDIO_IN_DIGITAL_MIC1) == AUDIO_IN_DIGITAL_MIC1)
 80086e2:	6822      	ldr	r2, [r4, #0]
 80086e4:	06d0      	lsls	r0, r2, #27
 80086e6:	d506      	bpl.n	80086f6 <BSP_AUDIO_IN_Init+0x96>
        DFSDM_ChannelMspInit(&haudio_in_dfsdm_channel[0]);
 80086e8:	f8da 0000 	ldr.w	r0, [sl]
 80086ec:	f7ff fe8e 	bl	800840c <DFSDM_ChannelMspInit.isra.0>
        DFSDM_FilterMspInit(&haudio_in_dfsdm_filter[0]);
 80086f0:	4640      	mov	r0, r8
 80086f2:	f7ff fe13 	bl	800831c <DFSDM_FilterMspInit>
      if ((Audio_In_Ctx[Instance].Device & AUDIO_IN_DIGITAL_MIC2) == AUDIO_IN_DIGITAL_MIC2)
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	0699      	lsls	r1, r3, #26
 80086fa:	d506      	bpl.n	800870a <BSP_AUDIO_IN_Init+0xaa>
        DFSDM_ChannelMspInit(&haudio_in_dfsdm_channel[1]);
 80086fc:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8008700:	f7ff fe84 	bl	800840c <DFSDM_ChannelMspInit.isra.0>
        DFSDM_FilterMspInit(&haudio_in_dfsdm_filter[1]);
 8008704:	48a7      	ldr	r0, [pc, #668]	; (80089a4 <BSP_AUDIO_IN_Init+0x344>)
 8008706:	f7ff fe09 	bl	800831c <DFSDM_FilterMspInit>
        if ((Audio_In_Ctx[Instance].Device & AUDIO_IN_DIGITAL_MIC1) == AUDIO_IN_DIGITAL_MIC1)
 800870a:	6823      	ldr	r3, [r4, #0]
 800870c:	06da      	lsls	r2, r3, #27
 800870e:	f140 809a 	bpl.w	8008846 <BSP_AUDIO_IN_Init+0x1e6>
          mxDfsdmInit.ClockDivider    = DFSDM_CLOCK_DIVIDER(Audio_In_Ctx[Instance].SampleRate);
 8008712:	6863      	ldr	r3, [r4, #4]
          mxDfsdmInit.ChannelInstance = DFSDM1_Channel2;
 8008714:	f8cd b010 	str.w	fp, [sp, #16]
          mxDfsdmInit.ClockDivider    = DFSDM_CLOCK_DIVIDER(Audio_In_Ctx[Instance].SampleRate);
 8008718:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800871c:	f000 813c 	beq.w	8008998 <BSP_AUDIO_IN_Init+0x338>
 8008720:	f642 3211 	movw	r2, #11025	; 0x2b11
 8008724:	4293      	cmp	r3, r2
 8008726:	f000 8135 	beq.w	8008994 <BSP_AUDIO_IN_Init+0x334>
 800872a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800872e:	f000 8133 	beq.w	8008998 <BSP_AUDIO_IN_Init+0x338>
 8008732:	f245 6222 	movw	r2, #22050	; 0x5622
 8008736:	4293      	cmp	r3, r2
 8008738:	f000 812c 	beq.w	8008994 <BSP_AUDIO_IN_Init+0x334>
 800873c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8008740:	f000 812a 	beq.w	8008998 <BSP_AUDIO_IN_Init+0x338>
 8008744:	f64a 4244 	movw	r2, #44100	; 0xac44
 8008748:	4293      	cmp	r3, r2
 800874a:	bf0c      	ite	eq
 800874c:	2204      	moveq	r2, #4
 800874e:	2220      	movne	r2, #32
 8008750:	9208      	str	r2, [sp, #32]
          mxDfsdmInit.DigitalMicType  = DFSDM_CHANNEL_SPI_FALLING;
 8008752:	2101      	movs	r1, #1
 8008754:	2200      	movs	r2, #0
          mxDfsdmInit.RightBitShift   = DFSDM_MIC_BIT_SHIFT(Audio_In_Ctx[Instance].SampleRate);
 8008756:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
          mxDfsdmInit.DigitalMicType  = DFSDM_CHANNEL_SPI_FALLING;
 800875a:	e9cd 2105 	strd	r2, r1, [sp, #20]
          mxDfsdmInit.RightBitShift   = DFSDM_MIC_BIT_SHIFT(Audio_In_Ctx[Instance].SampleRate);
 800875e:	f000 8139 	beq.w	80089d4 <BSP_AUDIO_IN_Init+0x374>
 8008762:	f642 3111 	movw	r1, #11025	; 0x2b11
 8008766:	428b      	cmp	r3, r1
 8008768:	f000 8138 	beq.w	80089dc <BSP_AUDIO_IN_Init+0x37c>
 800876c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8008770:	f000 8132 	beq.w	80089d8 <BSP_AUDIO_IN_Init+0x378>
 8008774:	f245 6122 	movw	r1, #22050	; 0x5622
 8008778:	428b      	cmp	r3, r1
 800877a:	f000 812d 	beq.w	80089d8 <BSP_AUDIO_IN_Init+0x378>
 800877e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8008782:	f000 812b 	beq.w	80089dc <BSP_AUDIO_IN_Init+0x37c>
 8008786:	f64a 4144 	movw	r1, #44100	; 0xac44
 800878a:	428b      	cmp	r3, r1
 800878c:	d005      	beq.n	800879a <BSP_AUDIO_IN_Init+0x13a>
 800878e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8008792:	4293      	cmp	r3, r2
 8008794:	bf0c      	ite	eq
 8008796:	2202      	moveq	r2, #2
 8008798:	2204      	movne	r2, #4
 800879a:	9209      	str	r2, [sp, #36]	; 0x24
          mxDfsdmInit.Channel4Filter  = DFSDM_CHANNEL_2;
 800879c:	4a82      	ldr	r2, [pc, #520]	; (80089a8 <BSP_AUDIO_IN_Init+0x348>)
 800879e:	9207      	str	r2, [sp, #28]
          mxDfsdmInit.SincOrder       = DFSDM_FILTER_ORDER(Audio_In_Ctx[Instance].SampleRate);
 80087a0:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
          mxDfsdmInit.RegularTrigger  = DFSDM_FILTER_SW_TRIGGER;
 80087a4:	f04f 0200 	mov.w	r2, #0
          mxDfsdmInit.FilterInstance  = DFSDM1_Filter0;
 80087a8:	f8cd 9000 	str.w	r9, [sp]
          mxDfsdmInit.RegularTrigger  = DFSDM_FILTER_SW_TRIGGER;
 80087ac:	9201      	str	r2, [sp, #4]
          mxDfsdmInit.SincOrder       = DFSDM_FILTER_ORDER(Audio_In_Ctx[Instance].SampleRate);
 80087ae:	f000 811a 	beq.w	80089e6 <BSP_AUDIO_IN_Init+0x386>
 80087b2:	f642 3211 	movw	r2, #11025	; 0x2b11
 80087b6:	4293      	cmp	r3, r2
 80087b8:	f000 8115 	beq.w	80089e6 <BSP_AUDIO_IN_Init+0x386>
 80087bc:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80087c0:	f000 8111 	beq.w	80089e6 <BSP_AUDIO_IN_Init+0x386>
 80087c4:	f245 6222 	movw	r2, #22050	; 0x5622
 80087c8:	4293      	cmp	r3, r2
 80087ca:	f000 810c 	beq.w	80089e6 <BSP_AUDIO_IN_Init+0x386>
 80087ce:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80087d2:	f000 8105 	beq.w	80089e0 <BSP_AUDIO_IN_Init+0x380>
 80087d6:	f64a 4244 	movw	r2, #44100	; 0xac44
 80087da:	4293      	cmp	r3, r2
 80087dc:	f000 8103 	beq.w	80089e6 <BSP_AUDIO_IN_Init+0x386>
 80087e0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80087e4:	4293      	cmp	r3, r2
 80087e6:	bf0c      	ite	eq
 80087e8:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 80087ec:	f04f 4220 	movne.w	r2, #2684354560	; 0xa0000000
          mxDfsdmInit.Oversampling    = DFSDM_OVER_SAMPLING(Audio_In_Ctx[Instance].SampleRate);
 80087f0:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
          mxDfsdmInit.SincOrder       = DFSDM_FILTER_ORDER(Audio_In_Ctx[Instance].SampleRate);
 80087f4:	9202      	str	r2, [sp, #8]
          mxDfsdmInit.Oversampling    = DFSDM_OVER_SAMPLING(Audio_In_Ctx[Instance].SampleRate);
 80087f6:	f000 80f9 	beq.w	80089ec <BSP_AUDIO_IN_Init+0x38c>
 80087fa:	f642 3211 	movw	r2, #11025	; 0x2b11
 80087fe:	4293      	cmp	r3, r2
 8008800:	f000 80f4 	beq.w	80089ec <BSP_AUDIO_IN_Init+0x38c>
 8008804:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8008808:	f000 80f3 	beq.w	80089f2 <BSP_AUDIO_IN_Init+0x392>
 800880c:	f245 6222 	movw	r2, #22050	; 0x5622
 8008810:	4293      	cmp	r3, r2
 8008812:	f000 80ee 	beq.w	80089f2 <BSP_AUDIO_IN_Init+0x392>
 8008816:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800881a:	f000 80ec 	beq.w	80089f6 <BSP_AUDIO_IN_Init+0x396>
 800881e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8008822:	4293      	cmp	r3, r2
 8008824:	f000 80e7 	beq.w	80089f6 <BSP_AUDIO_IN_Init+0x396>
 8008828:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800882c:	4293      	cmp	r3, r2
 800882e:	bf0c      	ite	eq
 8008830:	2320      	moveq	r3, #32
 8008832:	2310      	movne	r3, #16
          if (MX_DFSDM1_Init(&haudio_in_dfsdm_filter[0], &haudio_in_dfsdm_channel[0], &mxDfsdmInit) != HAL_OK)
 8008834:	495d      	ldr	r1, [pc, #372]	; (80089ac <BSP_AUDIO_IN_Init+0x34c>)
 8008836:	485e      	ldr	r0, [pc, #376]	; (80089b0 <BSP_AUDIO_IN_Init+0x350>)
          mxDfsdmInit.Oversampling    = DFSDM_OVER_SAMPLING(Audio_In_Ctx[Instance].SampleRate);
 8008838:	9303      	str	r3, [sp, #12]
          if (MX_DFSDM1_Init(&haudio_in_dfsdm_filter[0], &haudio_in_dfsdm_channel[0], &mxDfsdmInit) != HAL_OK)
 800883a:	466a      	mov	r2, sp
 800883c:	f7ff feca 	bl	80085d4 <MX_DFSDM1_Init>
 8008840:	2800      	cmp	r0, #0
 8008842:	f040 80da 	bne.w	80089fa <BSP_AUDIO_IN_Init+0x39a>
  int32_t status = BSP_ERROR_NONE;
 8008846:	2000      	movs	r0, #0
        if (((Audio_In_Ctx[Instance].Device & AUDIO_IN_DIGITAL_MIC2) == AUDIO_IN_DIGITAL_MIC2) && (status == BSP_ERROR_NONE))
 8008848:	6821      	ldr	r1, [r4, #0]
 800884a:	068b      	lsls	r3, r1, #26
 800884c:	f140 80ef 	bpl.w	8008a2e <BSP_AUDIO_IN_Init+0x3ce>
 8008850:	2800      	cmp	r0, #0
 8008852:	f040 809c 	bne.w	800898e <BSP_AUDIO_IN_Init+0x32e>
          mxDfsdmInit.ChannelInstance = DFSDM1_Channel1;
 8008856:	4b52      	ldr	r3, [pc, #328]	; (80089a0 <BSP_AUDIO_IN_Init+0x340>)
 8008858:	9304      	str	r3, [sp, #16]
          mxDfsdmInit.ClockDivider    = DFSDM_CLOCK_DIVIDER(Audio_In_Ctx[Instance].SampleRate);
 800885a:	6863      	ldr	r3, [r4, #4]
 800885c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8008860:	f000 80d0 	beq.w	8008a04 <BSP_AUDIO_IN_Init+0x3a4>
 8008864:	f642 3211 	movw	r2, #11025	; 0x2b11
 8008868:	4293      	cmp	r3, r2
 800886a:	f000 80c9 	beq.w	8008a00 <BSP_AUDIO_IN_Init+0x3a0>
 800886e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8008872:	f000 80c7 	beq.w	8008a04 <BSP_AUDIO_IN_Init+0x3a4>
 8008876:	f245 6222 	movw	r2, #22050	; 0x5622
 800887a:	4293      	cmp	r3, r2
 800887c:	f000 80c0 	beq.w	8008a00 <BSP_AUDIO_IN_Init+0x3a0>
 8008880:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8008884:	f000 80be 	beq.w	8008a04 <BSP_AUDIO_IN_Init+0x3a4>
 8008888:	f64a 4244 	movw	r2, #44100	; 0xac44
 800888c:	4293      	cmp	r3, r2
 800888e:	bf0c      	ite	eq
 8008890:	2204      	moveq	r2, #4
 8008892:	2220      	movne	r2, #32
 8008894:	9208      	str	r2, [sp, #32]
          mxDfsdmInit.DigitalMicType  = DFSDM_CHANNEL_SPI_RISING;
 8008896:	f44f 7080 	mov.w	r0, #256	; 0x100
 800889a:	2200      	movs	r2, #0
          mxDfsdmInit.RightBitShift   = DFSDM_MIC_BIT_SHIFT(Audio_In_Ctx[Instance].SampleRate);
 800889c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
          mxDfsdmInit.DigitalMicType  = DFSDM_CHANNEL_SPI_RISING;
 80088a0:	e9cd 0205 	strd	r0, r2, [sp, #20]
          mxDfsdmInit.RightBitShift   = DFSDM_MIC_BIT_SHIFT(Audio_In_Ctx[Instance].SampleRate);
 80088a4:	f000 80b0 	beq.w	8008a08 <BSP_AUDIO_IN_Init+0x3a8>
 80088a8:	f642 3211 	movw	r2, #11025	; 0x2b11
 80088ac:	4293      	cmp	r3, r2
 80088ae:	f000 80af 	beq.w	8008a10 <BSP_AUDIO_IN_Init+0x3b0>
 80088b2:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80088b6:	f000 80a9 	beq.w	8008a0c <BSP_AUDIO_IN_Init+0x3ac>
 80088ba:	f245 6222 	movw	r2, #22050	; 0x5622
 80088be:	4293      	cmp	r3, r2
 80088c0:	f000 80a4 	beq.w	8008a0c <BSP_AUDIO_IN_Init+0x3ac>
 80088c4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80088c8:	f000 80a2 	beq.w	8008a10 <BSP_AUDIO_IN_Init+0x3b0>
 80088cc:	f64a 4244 	movw	r2, #44100	; 0xac44
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d005      	beq.n	80088e0 <BSP_AUDIO_IN_Init+0x280>
 80088d4:	f64b 3680 	movw	r6, #48000	; 0xbb80
 80088d8:	42b3      	cmp	r3, r6
 80088da:	bf0c      	ite	eq
 80088dc:	2602      	moveq	r6, #2
 80088de:	2604      	movne	r6, #4
          if (Audio_In_Ctx[Instance].Device == AUDIO_IN_DIGITAL_MIC2)
 80088e0:	3920      	subs	r1, #32
 80088e2:	bf18      	it	ne
 80088e4:	2101      	movne	r1, #1
          mxDfsdmInit.Channel4Filter  = DFSDM_CHANNEL_1;
 80088e6:	4a33      	ldr	r2, [pc, #204]	; (80089b4 <BSP_AUDIO_IN_Init+0x354>)
          mxDfsdmInit.RightBitShift   = DFSDM_MIC_BIT_SHIFT(Audio_In_Ctx[Instance].SampleRate);
 80088e8:	9609      	str	r6, [sp, #36]	; 0x24
          mxDfsdmInit.SincOrder       = DFSDM_FILTER_ORDER(Audio_In_Ctx[Instance].SampleRate);
 80088ea:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
          mxDfsdmInit.Channel4Filter  = DFSDM_CHANNEL_1;
 80088ee:	9207      	str	r2, [sp, #28]
          mxDfsdmInit.FilterInstance  = DFSDM1_Filter1;
 80088f0:	9700      	str	r7, [sp, #0]
          if (Audio_In_Ctx[Instance].Device == AUDIO_IN_DIGITAL_MIC2)
 80088f2:	9101      	str	r1, [sp, #4]
          mxDfsdmInit.SincOrder       = DFSDM_FILTER_ORDER(Audio_In_Ctx[Instance].SampleRate);
 80088f4:	f000 8091 	beq.w	8008a1a <BSP_AUDIO_IN_Init+0x3ba>
 80088f8:	f642 3211 	movw	r2, #11025	; 0x2b11
 80088fc:	4293      	cmp	r3, r2
 80088fe:	f000 808c 	beq.w	8008a1a <BSP_AUDIO_IN_Init+0x3ba>
 8008902:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8008906:	f000 8088 	beq.w	8008a1a <BSP_AUDIO_IN_Init+0x3ba>
 800890a:	f245 6222 	movw	r2, #22050	; 0x5622
 800890e:	4293      	cmp	r3, r2
 8008910:	f000 8083 	beq.w	8008a1a <BSP_AUDIO_IN_Init+0x3ba>
 8008914:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8008918:	d07c      	beq.n	8008a14 <BSP_AUDIO_IN_Init+0x3b4>
 800891a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800891e:	4293      	cmp	r3, r2
 8008920:	d07b      	beq.n	8008a1a <BSP_AUDIO_IN_Init+0x3ba>
 8008922:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8008926:	4293      	cmp	r3, r2
 8008928:	bf0c      	ite	eq
 800892a:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800892e:	f04f 4220 	movne.w	r2, #2684354560	; 0xa0000000
          mxDfsdmInit.Oversampling    = DFSDM_OVER_SAMPLING(Audio_In_Ctx[Instance].SampleRate);
 8008932:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
          mxDfsdmInit.SincOrder       = DFSDM_FILTER_ORDER(Audio_In_Ctx[Instance].SampleRate);
 8008936:	9202      	str	r2, [sp, #8]
          mxDfsdmInit.Oversampling    = DFSDM_OVER_SAMPLING(Audio_In_Ctx[Instance].SampleRate);
 8008938:	d072      	beq.n	8008a20 <BSP_AUDIO_IN_Init+0x3c0>
 800893a:	f642 3211 	movw	r2, #11025	; 0x2b11
 800893e:	4293      	cmp	r3, r2
 8008940:	d06e      	beq.n	8008a20 <BSP_AUDIO_IN_Init+0x3c0>
 8008942:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8008946:	d06e      	beq.n	8008a26 <BSP_AUDIO_IN_Init+0x3c6>
 8008948:	f245 6222 	movw	r2, #22050	; 0x5622
 800894c:	4293      	cmp	r3, r2
 800894e:	d06a      	beq.n	8008a26 <BSP_AUDIO_IN_Init+0x3c6>
 8008950:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8008954:	d069      	beq.n	8008a2a <BSP_AUDIO_IN_Init+0x3ca>
 8008956:	f64a 4244 	movw	r2, #44100	; 0xac44
 800895a:	4293      	cmp	r3, r2
 800895c:	d065      	beq.n	8008a2a <BSP_AUDIO_IN_Init+0x3ca>
 800895e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8008962:	4293      	cmp	r3, r2
 8008964:	bf08      	it	eq
 8008966:	2520      	moveq	r5, #32
          if (MX_DFSDM1_Init(&haudio_in_dfsdm_filter[1], &haudio_in_dfsdm_channel[1], &mxDfsdmInit) != HAL_OK)
 8008968:	4913      	ldr	r1, [pc, #76]	; (80089b8 <BSP_AUDIO_IN_Init+0x358>)
 800896a:	480e      	ldr	r0, [pc, #56]	; (80089a4 <BSP_AUDIO_IN_Init+0x344>)
          mxDfsdmInit.Oversampling    = DFSDM_OVER_SAMPLING(Audio_In_Ctx[Instance].SampleRate);
 800896c:	9503      	str	r5, [sp, #12]
          if (MX_DFSDM1_Init(&haudio_in_dfsdm_filter[1], &haudio_in_dfsdm_channel[1], &mxDfsdmInit) != HAL_OK)
 800896e:	466a      	mov	r2, sp
 8008970:	f7ff fe30 	bl	80085d4 <MX_DFSDM1_Init>
 8008974:	2800      	cmp	r0, #0
 8008976:	d15d      	bne.n	8008a34 <BSP_AUDIO_IN_Init+0x3d4>
          Audio_DmaDigMic1RecHalfBuffCplt = 0;
 8008978:	4b10      	ldr	r3, [pc, #64]	; (80089bc <BSP_AUDIO_IN_Init+0x35c>)
 800897a:	2000      	movs	r0, #0
 800897c:	6018      	str	r0, [r3, #0]
          Audio_DmaDigMic1RecBuffCplt     = 0;
 800897e:	4b10      	ldr	r3, [pc, #64]	; (80089c0 <BSP_AUDIO_IN_Init+0x360>)
 8008980:	6018      	str	r0, [r3, #0]
          Audio_DmaDigMic2RecHalfBuffCplt = 0;
 8008982:	4b10      	ldr	r3, [pc, #64]	; (80089c4 <BSP_AUDIO_IN_Init+0x364>)
 8008984:	6018      	str	r0, [r3, #0]
          Audio_DmaDigMic2RecBuffCplt     = 0;
 8008986:	4b10      	ldr	r3, [pc, #64]	; (80089c8 <BSP_AUDIO_IN_Init+0x368>)
 8008988:	6018      	str	r0, [r3, #0]
          Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_STOP;
 800898a:	2302      	movs	r3, #2
 800898c:	61e3      	str	r3, [r4, #28]
}
 800898e:	b00b      	add	sp, #44	; 0x2c
 8008990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          mxDfsdmInit.ClockDivider    = DFSDM_CLOCK_DIVIDER(Audio_In_Ctx[Instance].SampleRate);
 8008994:	2204      	movs	r2, #4
 8008996:	e6db      	b.n	8008750 <BSP_AUDIO_IN_Init+0xf0>
 8008998:	2218      	movs	r2, #24
 800899a:	e6d9      	b.n	8008750 <BSP_AUDIO_IN_Init+0xf0>
 800899c:	40016180 	.word	0x40016180
 80089a0:	40016020 	.word	0x40016020
 80089a4:	20013e38 	.word	0x20013e38
 80089a8:	00020004 	.word	0x00020004
 80089ac:	20013d74 	.word	0x20013d74
 80089b0:	20013de4 	.word	0x20013de4
 80089b4:	00010002 	.word	0x00010002
 80089b8:	20013dac 	.word	0x20013dac
 80089bc:	20013cd8 	.word	0x20013cd8
 80089c0:	20013cd4 	.word	0x20013cd4
 80089c4:	20013ce0 	.word	0x20013ce0
 80089c8:	20013cdc 	.word	0x20013cdc
 80089cc:	40016040 	.word	0x40016040
 80089d0:	40016100 	.word	0x40016100
          mxDfsdmInit.RightBitShift   = DFSDM_MIC_BIT_SHIFT(Audio_In_Ctx[Instance].SampleRate);
 80089d4:	2205      	movs	r2, #5
 80089d6:	e6e0      	b.n	800879a <BSP_AUDIO_IN_Init+0x13a>
 80089d8:	2203      	movs	r2, #3
 80089da:	e6de      	b.n	800879a <BSP_AUDIO_IN_Init+0x13a>
 80089dc:	2206      	movs	r2, #6
 80089de:	e6dc      	b.n	800879a <BSP_AUDIO_IN_Init+0x13a>
          mxDfsdmInit.SincOrder       = DFSDM_FILTER_ORDER(Audio_In_Ctx[Instance].SampleRate);
 80089e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80089e4:	e704      	b.n	80087f0 <BSP_AUDIO_IN_Init+0x190>
 80089e6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80089ea:	e701      	b.n	80087f0 <BSP_AUDIO_IN_Init+0x190>
          mxDfsdmInit.Oversampling    = DFSDM_OVER_SAMPLING(Audio_In_Ctx[Instance].SampleRate);
 80089ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089f0:	e720      	b.n	8008834 <BSP_AUDIO_IN_Init+0x1d4>
 80089f2:	2380      	movs	r3, #128	; 0x80
 80089f4:	e71e      	b.n	8008834 <BSP_AUDIO_IN_Init+0x1d4>
 80089f6:	2340      	movs	r3, #64	; 0x40
 80089f8:	e71c      	b.n	8008834 <BSP_AUDIO_IN_Init+0x1d4>
            status = BSP_ERROR_PERIPH_FAILURE;
 80089fa:	f06f 0003 	mvn.w	r0, #3
 80089fe:	e723      	b.n	8008848 <BSP_AUDIO_IN_Init+0x1e8>
          mxDfsdmInit.ClockDivider    = DFSDM_CLOCK_DIVIDER(Audio_In_Ctx[Instance].SampleRate);
 8008a00:	2204      	movs	r2, #4
 8008a02:	e747      	b.n	8008894 <BSP_AUDIO_IN_Init+0x234>
 8008a04:	2218      	movs	r2, #24
 8008a06:	e745      	b.n	8008894 <BSP_AUDIO_IN_Init+0x234>
          mxDfsdmInit.RightBitShift   = DFSDM_MIC_BIT_SHIFT(Audio_In_Ctx[Instance].SampleRate);
 8008a08:	2605      	movs	r6, #5
 8008a0a:	e769      	b.n	80088e0 <BSP_AUDIO_IN_Init+0x280>
 8008a0c:	2603      	movs	r6, #3
 8008a0e:	e767      	b.n	80088e0 <BSP_AUDIO_IN_Init+0x280>
 8008a10:	2606      	movs	r6, #6
 8008a12:	e765      	b.n	80088e0 <BSP_AUDIO_IN_Init+0x280>
          mxDfsdmInit.SincOrder       = DFSDM_FILTER_ORDER(Audio_In_Ctx[Instance].SampleRate);
 8008a14:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008a18:	e78b      	b.n	8008932 <BSP_AUDIO_IN_Init+0x2d2>
 8008a1a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8008a1e:	e788      	b.n	8008932 <BSP_AUDIO_IN_Init+0x2d2>
          mxDfsdmInit.Oversampling    = DFSDM_OVER_SAMPLING(Audio_In_Ctx[Instance].SampleRate);
 8008a20:	f44f 7580 	mov.w	r5, #256	; 0x100
 8008a24:	e7a0      	b.n	8008968 <BSP_AUDIO_IN_Init+0x308>
 8008a26:	2580      	movs	r5, #128	; 0x80
 8008a28:	e79e      	b.n	8008968 <BSP_AUDIO_IN_Init+0x308>
 8008a2a:	2540      	movs	r5, #64	; 0x40
 8008a2c:	e79c      	b.n	8008968 <BSP_AUDIO_IN_Init+0x308>
        if (status == BSP_ERROR_NONE)
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	d0a2      	beq.n	8008978 <BSP_AUDIO_IN_Init+0x318>
 8008a32:	e7ac      	b.n	800898e <BSP_AUDIO_IN_Init+0x32e>
            status = BSP_ERROR_PERIPH_FAILURE;
 8008a34:	f06f 0003 	mvn.w	r0, #3
 8008a38:	e7a9      	b.n	800898e <BSP_AUDIO_IN_Init+0x32e>
    status = BSP_ERROR_WRONG_PARAM;
 8008a3a:	f06f 0001 	mvn.w	r0, #1
 8008a3e:	e7a6      	b.n	800898e <BSP_AUDIO_IN_Init+0x32e>
    status = BSP_ERROR_BUSY;
 8008a40:	f06f 0002 	mvn.w	r0, #2
 8008a44:	e7a3      	b.n	800898e <BSP_AUDIO_IN_Init+0x32e>
      status = BSP_ERROR_CLOCK_FAILURE;
 8008a46:	f06f 0008 	mvn.w	r0, #8
  return status;
 8008a4a:	e7a0      	b.n	800898e <BSP_AUDIO_IN_Init+0x32e>

08008a4c <HAL_DFSDM_FilterRegConvCpltCallback>:
  * @retval None.
  */
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
  uint32_t     index;
  uint32_t     recbufsize = (Audio_In_Ctx[0].Size / (2U * Audio_In_Ctx[0].ChannelsNbr));
 8008a4c:	4b6c      	ldr	r3, [pc, #432]	; (8008c00 <HAL_DFSDM_FilterRegConvCpltCallback+0x1b4>)
 8008a4e:	68da      	ldr	r2, [r3, #12]
{
 8008a50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t     recbufsize = (Audio_In_Ctx[0].Size / (2U * Audio_In_Ctx[0].ChannelsNbr));
 8008a54:	0052      	lsls	r2, r2, #1
 8008a56:	6959      	ldr	r1, [r3, #20]
 8008a58:	fbb1 f2f2 	udiv	r2, r1, r2
  __IO int32_t tmp;

  if (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC)
 8008a5c:	6819      	ldr	r1, [r3, #0]
 8008a5e:	2930      	cmp	r1, #48	; 0x30
 8008a60:	d169      	bne.n	8008b36 <HAL_DFSDM_FilterRegConvCpltCallback+0xea>
  {
    for (index = (recbufsize / 2U); index < recbufsize; index++)
 8008a62:	0851      	lsrs	r1, r2, #1
 8008a64:	008c      	lsls	r4, r1, #2
    {
      tmp = Audio_DigMic1RecBuff[index] / 256;
 8008a66:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008c14 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c8>
      tmp = SaturaLH(tmp, -32768, 32767);
 8008a6a:	4e66      	ldr	r6, [pc, #408]	; (8008c04 <HAL_DFSDM_FilterRegConvCpltCallback+0x1b8>)
      Audio_In_Ctx[0].pBuff[4U * index]        = (uint8_t) tmp;
      Audio_In_Ctx[0].pBuff[(4U * index) + 1U] = (uint8_t) ((uint32_t) tmp >> 8);
      tmp = Audio_DigMic2RecBuff[index] / 256;
 8008a6c:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8008c18 <HAL_DFSDM_FilterRegConvCpltCallback+0x1cc>
 8008a70:	3402      	adds	r4, #2
    for (index = (recbufsize / 2U); index < recbufsize; index++)
 8008a72:	4291      	cmp	r1, r2
 8008a74:	d319      	bcc.n	8008aaa <HAL_DFSDM_FilterRegConvCpltCallback+0x5e>
      }
    }
  }

  /* Invoke 'TransferCompete' callback function */
  if(hdfsdm_filter == &haudio_in_dfsdm_filter[0])
 8008a76:	4a64      	ldr	r2, [pc, #400]	; (8008c08 <HAL_DFSDM_FilterRegConvCpltCallback+0x1bc>)
 8008a78:	4c64      	ldr	r4, [pc, #400]	; (8008c0c <HAL_DFSDM_FilterRegConvCpltCallback+0x1c0>)
 8008a7a:	4d65      	ldr	r5, [pc, #404]	; (8008c10 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c4>)
 8008a7c:	4290      	cmp	r0, r2
 8008a7e:	f04f 0201 	mov.w	r2, #1
 8008a82:	f040 80ac 	bne.w	8008bde <HAL_DFSDM_FilterRegConvCpltCallback+0x192>
  {
    Audio_DmaDigMic1RecBuffCplt = 1;
 8008a86:	6022      	str	r2, [r4, #0]
  else
  {
    Audio_DmaDigMic2RecBuffCplt = 1;
  }

  if (((Audio_DmaDigMic1RecBuffCplt != 0U) && (Audio_DmaDigMic2RecBuffCplt != 0U) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC)) ||
 8008a88:	6829      	ldr	r1, [r5, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	2900      	cmp	r1, #0
 8008a8e:	f000 80b0 	beq.w	8008bf2 <HAL_DFSDM_FilterRegConvCpltCallback+0x1a6>
 8008a92:	2a30      	cmp	r2, #48	; 0x30
 8008a94:	f040 80af 	bne.w	8008bf6 <HAL_DFSDM_FilterRegConvCpltCallback+0x1aa>
      ((Audio_DmaDigMic1RecBuffCplt != 0U) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC1)) ||
      ((Audio_DmaDigMic2RecBuffCplt != 0U) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC2)))
  {
    BSP_AUDIO_IN_TransferComplete_CallBack(0);
 8008a98:	2000      	movs	r0, #0
 8008a9a:	f7fe fefb 	bl	8007894 <BSP_AUDIO_IN_TransferComplete_CallBack>
    Audio_DmaDigMic1RecBuffCplt = 0;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	6023      	str	r3, [r4, #0]
    Audio_DmaDigMic2RecBuffCplt = 0;
 8008aa2:	602b      	str	r3, [r5, #0]
  }
}
 8008aa4:	b002      	add	sp, #8
 8008aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp = Audio_DigMic1RecBuff[index] / 256;
 8008aaa:	f858 5021 	ldr.w	r5, [r8, r1, lsl #2]
 8008aae:	2d00      	cmp	r5, #0
 8008ab0:	bfb8      	it	lt
 8008ab2:	35ff      	addlt	r5, #255	; 0xff
 8008ab4:	122d      	asrs	r5, r5, #8
 8008ab6:	9501      	str	r5, [sp, #4]
      tmp = SaturaLH(tmp, -32768, 32767);
 8008ab8:	9d01      	ldr	r5, [sp, #4]
 8008aba:	f515 4f00 	cmn.w	r5, #32768	; 0x8000
 8008abe:	db30      	blt.n	8008b22 <HAL_DFSDM_FilterRegConvCpltCallback+0xd6>
 8008ac0:	9d01      	ldr	r5, [sp, #4]
 8008ac2:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8008ac6:	da2e      	bge.n	8008b26 <HAL_DFSDM_FilterRegConvCpltCallback+0xda>
 8008ac8:	9d01      	ldr	r5, [sp, #4]
 8008aca:	9501      	str	r5, [sp, #4]
      Audio_In_Ctx[0].pBuff[4U * index]        = (uint8_t) tmp;
 8008acc:	691f      	ldr	r7, [r3, #16]
 8008ace:	9d01      	ldr	r5, [sp, #4]
 8008ad0:	f807 5021 	strb.w	r5, [r7, r1, lsl #2]
      Audio_In_Ctx[0].pBuff[(4U * index) + 1U] = (uint8_t) ((uint32_t) tmp >> 8);
 8008ad4:	691d      	ldr	r5, [r3, #16]
 8008ad6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008ada:	4425      	add	r5, r4
 8008adc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8008ae0:	f805 ec01 	strb.w	lr, [r5, #-1]
      tmp = Audio_DigMic2RecBuff[index] / 256;
 8008ae4:	f85c 5021 	ldr.w	r5, [ip, r1, lsl #2]
 8008ae8:	2d00      	cmp	r5, #0
 8008aea:	bfb8      	it	lt
 8008aec:	35ff      	addlt	r5, #255	; 0xff
 8008aee:	122d      	asrs	r5, r5, #8
 8008af0:	9501      	str	r5, [sp, #4]
      tmp = SaturaLH(tmp, -32768, 32767);
 8008af2:	9d01      	ldr	r5, [sp, #4]
 8008af4:	f515 4f00 	cmn.w	r5, #32768	; 0x8000
 8008af8:	db18      	blt.n	8008b2c <HAL_DFSDM_FilterRegConvCpltCallback+0xe0>
 8008afa:	9d01      	ldr	r5, [sp, #4]
 8008afc:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8008b00:	da16      	bge.n	8008b30 <HAL_DFSDM_FilterRegConvCpltCallback+0xe4>
 8008b02:	9d01      	ldr	r5, [sp, #4]
      Audio_In_Ctx[0].pBuff[(4U * index) + 2U] = (uint8_t) tmp;
 8008b04:	691f      	ldr	r7, [r3, #16]
      tmp = SaturaLH(tmp, -32768, 32767);
 8008b06:	9501      	str	r5, [sp, #4]
      Audio_In_Ctx[0].pBuff[(4U * index) + 2U] = (uint8_t) tmp;
 8008b08:	9d01      	ldr	r5, [sp, #4]
 8008b0a:	553d      	strb	r5, [r7, r4]
      Audio_In_Ctx[0].pBuff[(4U * index) + 3U] = (uint8_t) ((uint32_t) tmp >> 8);
 8008b0c:	691d      	ldr	r5, [r3, #16]
 8008b0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008b12:	4425      	add	r5, r4
 8008b14:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8008b18:	f885 e001 	strb.w	lr, [r5, #1]
    for (index = (recbufsize / 2U); index < recbufsize; index++)
 8008b1c:	3101      	adds	r1, #1
 8008b1e:	3404      	adds	r4, #4
 8008b20:	e7a7      	b.n	8008a72 <HAL_DFSDM_FilterRegConvCpltCallback+0x26>
      tmp = SaturaLH(tmp, -32768, 32767);
 8008b22:	4635      	mov	r5, r6
 8008b24:	e7d1      	b.n	8008aca <HAL_DFSDM_FilterRegConvCpltCallback+0x7e>
 8008b26:	f647 75ff 	movw	r5, #32767	; 0x7fff
 8008b2a:	e7ce      	b.n	8008aca <HAL_DFSDM_FilterRegConvCpltCallback+0x7e>
      tmp = SaturaLH(tmp, -32768, 32767);
 8008b2c:	4635      	mov	r5, r6
 8008b2e:	e7e9      	b.n	8008b04 <HAL_DFSDM_FilterRegConvCpltCallback+0xb8>
 8008b30:	f647 75ff 	movw	r5, #32767	; 0x7fff
 8008b34:	e7e6      	b.n	8008b04 <HAL_DFSDM_FilterRegConvCpltCallback+0xb8>
  else if (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC1)
 8008b36:	2910      	cmp	r1, #16
 8008b38:	d126      	bne.n	8008b88 <HAL_DFSDM_FilterRegConvCpltCallback+0x13c>
      tmp = Audio_DigMic1RecBuff[index] / 256;
 8008b3a:	4e36      	ldr	r6, [pc, #216]	; (8008c14 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c8>)
      tmp = SaturaLH(tmp, -32768, 32767);
 8008b3c:	4f31      	ldr	r7, [pc, #196]	; (8008c04 <HAL_DFSDM_FilterRegConvCpltCallback+0x1b8>)
    for (index = (recbufsize / 2U); index < recbufsize; index++)
 8008b3e:	0851      	lsrs	r1, r2, #1
 8008b40:	4291      	cmp	r1, r2
 8008b42:	d298      	bcs.n	8008a76 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a>
      tmp = Audio_DigMic1RecBuff[index] / 256;
 8008b44:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
 8008b48:	2c00      	cmp	r4, #0
 8008b4a:	bfb8      	it	lt
 8008b4c:	34ff      	addlt	r4, #255	; 0xff
 8008b4e:	1224      	asrs	r4, r4, #8
 8008b50:	9401      	str	r4, [sp, #4]
      tmp = SaturaLH(tmp, -32768, 32767);
 8008b52:	9c01      	ldr	r4, [sp, #4]
 8008b54:	f514 4f00 	cmn.w	r4, #32768	; 0x8000
 8008b58:	db11      	blt.n	8008b7e <HAL_DFSDM_FilterRegConvCpltCallback+0x132>
 8008b5a:	9c01      	ldr	r4, [sp, #4]
 8008b5c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8008b60:	da0f      	bge.n	8008b82 <HAL_DFSDM_FilterRegConvCpltCallback+0x136>
 8008b62:	9c01      	ldr	r4, [sp, #4]
 8008b64:	9401      	str	r4, [sp, #4]
      Audio_In_Ctx[0].pBuff[2U * index]        = (uint8_t) tmp;
 8008b66:	691c      	ldr	r4, [r3, #16]
 8008b68:	9d01      	ldr	r5, [sp, #4]
 8008b6a:	f804 5011 	strb.w	r5, [r4, r1, lsl #1]
      Audio_In_Ctx[0].pBuff[(2U * index) + 1U] = (uint8_t) ((uint32_t) tmp >> 8);
 8008b6e:	691c      	ldr	r4, [r3, #16]
 8008b70:	9d01      	ldr	r5, [sp, #4]
 8008b72:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8008b76:	0a2d      	lsrs	r5, r5, #8
 8008b78:	7065      	strb	r5, [r4, #1]
    for (index = (recbufsize / 2U); index < recbufsize; index++)
 8008b7a:	3101      	adds	r1, #1
 8008b7c:	e7e0      	b.n	8008b40 <HAL_DFSDM_FilterRegConvCpltCallback+0xf4>
      tmp = SaturaLH(tmp, -32768, 32767);
 8008b7e:	463c      	mov	r4, r7
 8008b80:	e7f0      	b.n	8008b64 <HAL_DFSDM_FilterRegConvCpltCallback+0x118>
 8008b82:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8008b86:	e7ed      	b.n	8008b64 <HAL_DFSDM_FilterRegConvCpltCallback+0x118>
    if (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC2)
 8008b88:	2920      	cmp	r1, #32
 8008b8a:	f47f af74 	bne.w	8008a76 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a>
        tmp = Audio_DigMic2RecBuff[index] / 256;
 8008b8e:	4e22      	ldr	r6, [pc, #136]	; (8008c18 <HAL_DFSDM_FilterRegConvCpltCallback+0x1cc>)
        tmp = SaturaLH(tmp, -32768, 32767);
 8008b90:	4f1c      	ldr	r7, [pc, #112]	; (8008c04 <HAL_DFSDM_FilterRegConvCpltCallback+0x1b8>)
      for (index = (recbufsize / 2U); index < recbufsize; index++)
 8008b92:	0851      	lsrs	r1, r2, #1
 8008b94:	4291      	cmp	r1, r2
 8008b96:	f4bf af6e 	bcs.w	8008a76 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a>
        tmp = Audio_DigMic2RecBuff[index] / 256;
 8008b9a:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
 8008b9e:	2c00      	cmp	r4, #0
 8008ba0:	bfb8      	it	lt
 8008ba2:	34ff      	addlt	r4, #255	; 0xff
 8008ba4:	1224      	asrs	r4, r4, #8
 8008ba6:	9401      	str	r4, [sp, #4]
        tmp = SaturaLH(tmp, -32768, 32767);
 8008ba8:	9c01      	ldr	r4, [sp, #4]
 8008baa:	f514 4f00 	cmn.w	r4, #32768	; 0x8000
 8008bae:	db11      	blt.n	8008bd4 <HAL_DFSDM_FilterRegConvCpltCallback+0x188>
 8008bb0:	9c01      	ldr	r4, [sp, #4]
 8008bb2:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8008bb6:	da0f      	bge.n	8008bd8 <HAL_DFSDM_FilterRegConvCpltCallback+0x18c>
 8008bb8:	9c01      	ldr	r4, [sp, #4]
 8008bba:	9401      	str	r4, [sp, #4]
        Audio_In_Ctx[0].pBuff[2U * index]        = (uint8_t) tmp;
 8008bbc:	691c      	ldr	r4, [r3, #16]
 8008bbe:	9d01      	ldr	r5, [sp, #4]
 8008bc0:	f804 5011 	strb.w	r5, [r4, r1, lsl #1]
        Audio_In_Ctx[0].pBuff[(2U * index) + 1U] = (uint8_t) ((uint32_t) tmp >> 8);
 8008bc4:	691c      	ldr	r4, [r3, #16]
 8008bc6:	9d01      	ldr	r5, [sp, #4]
 8008bc8:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8008bcc:	0a2d      	lsrs	r5, r5, #8
 8008bce:	7065      	strb	r5, [r4, #1]
      for (index = (recbufsize / 2U); index < recbufsize; index++)
 8008bd0:	3101      	adds	r1, #1
 8008bd2:	e7df      	b.n	8008b94 <HAL_DFSDM_FilterRegConvCpltCallback+0x148>
        tmp = SaturaLH(tmp, -32768, 32767);
 8008bd4:	463c      	mov	r4, r7
 8008bd6:	e7f0      	b.n	8008bba <HAL_DFSDM_FilterRegConvCpltCallback+0x16e>
 8008bd8:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8008bdc:	e7ed      	b.n	8008bba <HAL_DFSDM_FilterRegConvCpltCallback+0x16e>
    Audio_DmaDigMic2RecBuffCplt = 1;
 8008bde:	602a      	str	r2, [r5, #0]
  if (((Audio_DmaDigMic1RecBuffCplt != 0U) && (Audio_DmaDigMic2RecBuffCplt != 0U) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC)) ||
 8008be0:	6822      	ldr	r2, [r4, #0]
 8008be2:	2a00      	cmp	r2, #0
 8008be4:	f47f af50 	bne.w	8008a88 <HAL_DFSDM_FilterRegConvCpltCallback+0x3c>
      ((Audio_DmaDigMic2RecBuffCplt != 0U) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC2)))
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2b20      	cmp	r3, #32
      ((Audio_DmaDigMic1RecBuffCplt != 0U) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC1)) ||
 8008bec:	f47f af5a 	bne.w	8008aa4 <HAL_DFSDM_FilterRegConvCpltCallback+0x58>
 8008bf0:	e752      	b.n	8008a98 <HAL_DFSDM_FilterRegConvCpltCallback+0x4c>
 8008bf2:	2a10      	cmp	r2, #16
 8008bf4:	e7fa      	b.n	8008bec <HAL_DFSDM_FilterRegConvCpltCallback+0x1a0>
 8008bf6:	2a10      	cmp	r2, #16
 8008bf8:	f43f af4e 	beq.w	8008a98 <HAL_DFSDM_FilterRegConvCpltCallback+0x4c>
 8008bfc:	e7f4      	b.n	8008be8 <HAL_DFSDM_FilterRegConvCpltCallback+0x19c>
 8008bfe:	bf00      	nop
 8008c00:	2000000c 	.word	0x2000000c
 8008c04:	ffff8000 	.word	0xffff8000
 8008c08:	20013de4 	.word	0x20013de4
 8008c0c:	20013cd4 	.word	0x20013cd4
 8008c10:	20013cdc 	.word	0x20013cdc
 8008c14:	2000ed20 	.word	0x2000ed20
 8008c18:	20013cd0 	.word	0x20013cd0

08008c1c <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @retval None.
  */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
  uint32_t     index;
  uint32_t     recbufsize = (Audio_In_Ctx[0].Size / (2U * Audio_In_Ctx[0].ChannelsNbr));
 8008c1c:	4b67      	ldr	r3, [pc, #412]	; (8008dbc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a0>)
{
 8008c1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t     recbufsize = (Audio_In_Ctx[0].Size / (2U * Audio_In_Ctx[0].ChannelsNbr));
 8008c20:	68da      	ldr	r2, [r3, #12]
 8008c22:	0051      	lsls	r1, r2, #1
 8008c24:	695a      	ldr	r2, [r3, #20]
 8008c26:	fbb2 f2f1 	udiv	r2, r2, r1
  __IO int32_t tmp;

  if (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC)
 8008c2a:	6819      	ldr	r1, [r3, #0]
 8008c2c:	2930      	cmp	r1, #48	; 0x30
 8008c2e:	d160      	bne.n	8008cf2 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xd6>
  {
    for (index = 0; index < (recbufsize / 2U); index++)
 8008c30:	0852      	lsrs	r2, r2, #1
 8008c32:	4d63      	ldr	r5, [pc, #396]	; (8008dc0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a4>)
 8008c34:	4e63      	ldr	r6, [pc, #396]	; (8008dc4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a8>)
    {
      tmp = Audio_DigMic1RecBuff[index] / 256;
      tmp = SaturaLH(tmp, -32768, 32767);
 8008c36:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8008dd4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b8>
 8008c3a:	0092      	lsls	r2, r2, #2
    for (index = 0; index < (recbufsize / 2U); index++)
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	4291      	cmp	r1, r2
 8008c40:	d118      	bne.n	8008c74 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x58>
      }
    }
  }

  /* Invoke the 'HalfTransfer' callback function */
  if(hdfsdm_filter == &haudio_in_dfsdm_filter[0])
 8008c42:	4a61      	ldr	r2, [pc, #388]	; (8008dc8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1ac>)
 8008c44:	4c61      	ldr	r4, [pc, #388]	; (8008dcc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b0>)
 8008c46:	4d62      	ldr	r5, [pc, #392]	; (8008dd0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b4>)
 8008c48:	4290      	cmp	r0, r2
 8008c4a:	f04f 0201 	mov.w	r2, #1
 8008c4e:	f040 80a4 	bne.w	8008d9a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x17e>
  {
    Audio_DmaDigMic1RecHalfBuffCplt = 1;
 8008c52:	6022      	str	r2, [r4, #0]
  else
  {
    Audio_DmaDigMic2RecHalfBuffCplt = 1;
  }

  if (((Audio_DmaDigMic1RecHalfBuffCplt != 0U) && (Audio_DmaDigMic2RecHalfBuffCplt != 0U) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC)) ||
 8008c54:	6829      	ldr	r1, [r5, #0]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	2900      	cmp	r1, #0
 8008c5a:	f000 80a8 	beq.w	8008dae <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x192>
 8008c5e:	2a30      	cmp	r2, #48	; 0x30
 8008c60:	f040 80a7 	bne.w	8008db2 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x196>
      ((Audio_DmaDigMic1RecHalfBuffCplt != 0U) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC1)) ||
      ((Audio_DmaDigMic2RecHalfBuffCplt != 0U) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC2)))
  {
    BSP_AUDIO_IN_HalfTransfer_CallBack(0);
 8008c64:	2000      	movs	r0, #0
 8008c66:	f7fe fb05 	bl	8007274 <BSP_AUDIO_IN_HalfTransfer_CallBack>
    Audio_DmaDigMic1RecHalfBuffCplt = 0;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	6023      	str	r3, [r4, #0]
    Audio_DmaDigMic2RecHalfBuffCplt = 0;
 8008c6e:	602b      	str	r3, [r5, #0]
  }
}
 8008c70:	b003      	add	sp, #12
 8008c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmp = Audio_DigMic1RecBuff[index] / 256;
 8008c74:	f856 4b04 	ldr.w	r4, [r6], #4
 8008c78:	2c00      	cmp	r4, #0
 8008c7a:	bfb8      	it	lt
 8008c7c:	34ff      	addlt	r4, #255	; 0xff
 8008c7e:	1224      	asrs	r4, r4, #8
 8008c80:	9401      	str	r4, [sp, #4]
      tmp = SaturaLH(tmp, -32768, 32767);
 8008c82:	9c01      	ldr	r4, [sp, #4]
 8008c84:	f514 4f00 	cmn.w	r4, #32768	; 0x8000
 8008c88:	db29      	blt.n	8008cde <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xc2>
 8008c8a:	9c01      	ldr	r4, [sp, #4]
 8008c8c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8008c90:	da27      	bge.n	8008ce2 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xc6>
 8008c92:	9c01      	ldr	r4, [sp, #4]
 8008c94:	9401      	str	r4, [sp, #4]
      Audio_In_Ctx[0].pBuff[4U * index]        = (uint8_t) tmp;
 8008c96:	691c      	ldr	r4, [r3, #16]
 8008c98:	9f01      	ldr	r7, [sp, #4]
 8008c9a:	5467      	strb	r7, [r4, r1]
      Audio_In_Ctx[0].pBuff[(4U * index) + 1U] = (uint8_t) ((uint32_t) tmp >> 8);
 8008c9c:	691c      	ldr	r4, [r3, #16]
 8008c9e:	9f01      	ldr	r7, [sp, #4]
 8008ca0:	440c      	add	r4, r1
 8008ca2:	0a3f      	lsrs	r7, r7, #8
 8008ca4:	7067      	strb	r7, [r4, #1]
      tmp = Audio_DigMic2RecBuff[index] / 256;
 8008ca6:	f855 4b04 	ldr.w	r4, [r5], #4
 8008caa:	2c00      	cmp	r4, #0
 8008cac:	bfb8      	it	lt
 8008cae:	34ff      	addlt	r4, #255	; 0xff
 8008cb0:	1224      	asrs	r4, r4, #8
 8008cb2:	9401      	str	r4, [sp, #4]
      tmp = SaturaLH(tmp, -32768, 32767);
 8008cb4:	9c01      	ldr	r4, [sp, #4]
 8008cb6:	f514 4f00 	cmn.w	r4, #32768	; 0x8000
 8008cba:	db15      	blt.n	8008ce8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xcc>
 8008cbc:	9c01      	ldr	r4, [sp, #4]
 8008cbe:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8008cc2:	da13      	bge.n	8008cec <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xd0>
 8008cc4:	9c01      	ldr	r4, [sp, #4]
 8008cc6:	9401      	str	r4, [sp, #4]
      Audio_In_Ctx[0].pBuff[(4U * index) + 2U] = (uint8_t) tmp;
 8008cc8:	691c      	ldr	r4, [r3, #16]
 8008cca:	9f01      	ldr	r7, [sp, #4]
 8008ccc:	440c      	add	r4, r1
 8008cce:	70a7      	strb	r7, [r4, #2]
      Audio_In_Ctx[0].pBuff[(4U * index) + 3U] = (uint8_t) ((uint32_t) tmp >> 8);
 8008cd0:	691c      	ldr	r4, [r3, #16]
 8008cd2:	9f01      	ldr	r7, [sp, #4]
 8008cd4:	440c      	add	r4, r1
 8008cd6:	0a3f      	lsrs	r7, r7, #8
 8008cd8:	70e7      	strb	r7, [r4, #3]
    for (index = 0; index < (recbufsize / 2U); index++)
 8008cda:	3104      	adds	r1, #4
 8008cdc:	e7af      	b.n	8008c3e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x22>
      tmp = SaturaLH(tmp, -32768, 32767);
 8008cde:	4664      	mov	r4, ip
 8008ce0:	e7d8      	b.n	8008c94 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x78>
 8008ce2:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8008ce6:	e7d5      	b.n	8008c94 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x78>
      tmp = SaturaLH(tmp, -32768, 32767);
 8008ce8:	4664      	mov	r4, ip
 8008cea:	e7ec      	b.n	8008cc6 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xaa>
 8008cec:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8008cf0:	e7e9      	b.n	8008cc6 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xaa>
  else if (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC1)
 8008cf2:	2910      	cmp	r1, #16
 8008cf4:	d126      	bne.n	8008d44 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x128>
 8008cf6:	4e33      	ldr	r6, [pc, #204]	; (8008dc4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a8>)
      tmp = SaturaLH(tmp, -32768, 32767);
 8008cf8:	4f36      	ldr	r7, [pc, #216]	; (8008dd4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b8>)
 8008cfa:	f022 0201 	bic.w	r2, r2, #1
    for (index = 0; index < (recbufsize / 2U); index++)
 8008cfe:	2400      	movs	r4, #0
 8008d00:	4294      	cmp	r4, r2
 8008d02:	d09e      	beq.n	8008c42 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26>
      tmp = Audio_DigMic1RecBuff[index] / 256;
 8008d04:	f856 1b04 	ldr.w	r1, [r6], #4
 8008d08:	2900      	cmp	r1, #0
 8008d0a:	bfb8      	it	lt
 8008d0c:	31ff      	addlt	r1, #255	; 0xff
 8008d0e:	1209      	asrs	r1, r1, #8
 8008d10:	9101      	str	r1, [sp, #4]
      tmp = SaturaLH(tmp, -32768, 32767);
 8008d12:	9901      	ldr	r1, [sp, #4]
 8008d14:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8008d18:	db0f      	blt.n	8008d3a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x11e>
 8008d1a:	9901      	ldr	r1, [sp, #4]
 8008d1c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8008d20:	da0d      	bge.n	8008d3e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x122>
 8008d22:	9901      	ldr	r1, [sp, #4]
 8008d24:	9101      	str	r1, [sp, #4]
      Audio_In_Ctx[0].pBuff[2U * index]        = (uint8_t) tmp;
 8008d26:	6919      	ldr	r1, [r3, #16]
 8008d28:	9d01      	ldr	r5, [sp, #4]
 8008d2a:	550d      	strb	r5, [r1, r4]
      Audio_In_Ctx[0].pBuff[(2U * index) + 1U] = (uint8_t) ((uint32_t) tmp >> 8);
 8008d2c:	6919      	ldr	r1, [r3, #16]
 8008d2e:	9d01      	ldr	r5, [sp, #4]
 8008d30:	4421      	add	r1, r4
 8008d32:	0a2d      	lsrs	r5, r5, #8
 8008d34:	704d      	strb	r5, [r1, #1]
    for (index = 0; index < (recbufsize / 2U); index++)
 8008d36:	3402      	adds	r4, #2
 8008d38:	e7e2      	b.n	8008d00 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xe4>
      tmp = SaturaLH(tmp, -32768, 32767);
 8008d3a:	4639      	mov	r1, r7
 8008d3c:	e7f2      	b.n	8008d24 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x108>
 8008d3e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008d42:	e7ef      	b.n	8008d24 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x108>
    if (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC2)
 8008d44:	2920      	cmp	r1, #32
 8008d46:	f47f af7c 	bne.w	8008c42 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26>
 8008d4a:	4e1d      	ldr	r6, [pc, #116]	; (8008dc0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a4>)
        tmp = SaturaLH(tmp, -32768, 32767);
 8008d4c:	4f21      	ldr	r7, [pc, #132]	; (8008dd4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1b8>)
 8008d4e:	f022 0201 	bic.w	r2, r2, #1
      for (index = 0; index < (recbufsize / 2U); index++)
 8008d52:	2400      	movs	r4, #0
 8008d54:	4294      	cmp	r4, r2
 8008d56:	f43f af74 	beq.w	8008c42 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26>
        tmp = Audio_DigMic2RecBuff[index] / 256;
 8008d5a:	f856 1b04 	ldr.w	r1, [r6], #4
 8008d5e:	2900      	cmp	r1, #0
 8008d60:	bfb8      	it	lt
 8008d62:	31ff      	addlt	r1, #255	; 0xff
 8008d64:	1209      	asrs	r1, r1, #8
 8008d66:	9101      	str	r1, [sp, #4]
        tmp = SaturaLH(tmp, -32768, 32767);
 8008d68:	9901      	ldr	r1, [sp, #4]
 8008d6a:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8008d6e:	db0f      	blt.n	8008d90 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x174>
 8008d70:	9901      	ldr	r1, [sp, #4]
 8008d72:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8008d76:	da0d      	bge.n	8008d94 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x178>
 8008d78:	9901      	ldr	r1, [sp, #4]
 8008d7a:	9101      	str	r1, [sp, #4]
        Audio_In_Ctx[0].pBuff[2U * index]        = (uint8_t) tmp;
 8008d7c:	6919      	ldr	r1, [r3, #16]
 8008d7e:	9d01      	ldr	r5, [sp, #4]
 8008d80:	550d      	strb	r5, [r1, r4]
        Audio_In_Ctx[0].pBuff[(2U * index) + 1U] = (uint8_t) ((uint32_t) tmp >> 8);
 8008d82:	6919      	ldr	r1, [r3, #16]
 8008d84:	9d01      	ldr	r5, [sp, #4]
 8008d86:	4421      	add	r1, r4
 8008d88:	0a2d      	lsrs	r5, r5, #8
 8008d8a:	704d      	strb	r5, [r1, #1]
      for (index = 0; index < (recbufsize / 2U); index++)
 8008d8c:	3402      	adds	r4, #2
 8008d8e:	e7e1      	b.n	8008d54 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x138>
        tmp = SaturaLH(tmp, -32768, 32767);
 8008d90:	4639      	mov	r1, r7
 8008d92:	e7f2      	b.n	8008d7a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x15e>
 8008d94:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008d98:	e7ef      	b.n	8008d7a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x15e>
    Audio_DmaDigMic2RecHalfBuffCplt = 1;
 8008d9a:	602a      	str	r2, [r5, #0]
  if (((Audio_DmaDigMic1RecHalfBuffCplt != 0U) && (Audio_DmaDigMic2RecHalfBuffCplt != 0U) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC)) ||
 8008d9c:	6822      	ldr	r2, [r4, #0]
 8008d9e:	2a00      	cmp	r2, #0
 8008da0:	f47f af58 	bne.w	8008c54 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x38>
      ((Audio_DmaDigMic2RecHalfBuffCplt != 0U) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC2)))
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2b20      	cmp	r3, #32
      ((Audio_DmaDigMic1RecHalfBuffCplt != 0U) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC1)) ||
 8008da8:	f47f af62 	bne.w	8008c70 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x54>
 8008dac:	e75a      	b.n	8008c64 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x48>
 8008dae:	2a10      	cmp	r2, #16
 8008db0:	e7fa      	b.n	8008da8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18c>
 8008db2:	2a10      	cmp	r2, #16
 8008db4:	f43f af56 	beq.w	8008c64 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x48>
 8008db8:	e7f4      	b.n	8008da4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x188>
 8008dba:	bf00      	nop
 8008dbc:	2000000c 	.word	0x2000000c
 8008dc0:	20013cd0 	.word	0x20013cd0
 8008dc4:	2000ed20 	.word	0x2000ed20
 8008dc8:	20013de4 	.word	0x20013de4
 8008dcc:	20013cd8 	.word	0x20013cd8
 8008dd0:	20013ce0 	.word	0x20013ce0
 8008dd4:	ffff8000 	.word	0xffff8000

08008dd8 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  DFSDM filter error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None.
  */
void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8008dd8:	b508      	push	{r3, lr}
  UNUSED(hdfsdm_filter);

  BSP_AUDIO_IN_Error_CallBack(0);
 8008dda:	2000      	movs	r0, #0
 8008ddc:	f7ff fbbe 	bl	800855c <BSP_AUDIO_IN_Error_CallBack>
}
 8008de0:	bd08      	pop	{r3, pc}
	...

08008de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008de4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8008de6:	4b0f      	ldr	r3, [pc, #60]	; (8008e24 <HAL_InitTick+0x40>)
{
 8008de8:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8008dea:	7818      	ldrb	r0, [r3, #0]
 8008dec:	b908      	cbnz	r0, 8008df2 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8008dee:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8008df0:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8008df2:	4a0d      	ldr	r2, [pc, #52]	; (8008e28 <HAL_InitTick+0x44>)
 8008df4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008df8:	fbb3 f3f0 	udiv	r3, r3, r0
 8008dfc:	6810      	ldr	r0, [r2, #0]
 8008dfe:	fbb0 f0f3 	udiv	r0, r0, r3
 8008e02:	f000 f89d 	bl	8008f40 <HAL_SYSTICK_Config>
 8008e06:	4604      	mov	r4, r0
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	d1f0      	bne.n	8008dee <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008e0c:	2d0f      	cmp	r5, #15
 8008e0e:	d8ee      	bhi.n	8008dee <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008e10:	4602      	mov	r2, r0
 8008e12:	4629      	mov	r1, r5
 8008e14:	f04f 30ff 	mov.w	r0, #4294967295
 8008e18:	f000 f852 	bl	8008ec0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008e1c:	4b03      	ldr	r3, [pc, #12]	; (8008e2c <HAL_InitTick+0x48>)
 8008e1e:	4620      	mov	r0, r4
 8008e20:	601d      	str	r5, [r3, #0]
  return status;
 8008e22:	e7e5      	b.n	8008df0 <HAL_InitTick+0xc>
 8008e24:	2000002c 	.word	0x2000002c
 8008e28:	20000008 	.word	0x20000008
 8008e2c:	20000030 	.word	0x20000030

08008e30 <HAL_Init>:
{
 8008e30:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008e32:	2003      	movs	r0, #3
 8008e34:	f000 f832 	bl	8008e9c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008e38:	2000      	movs	r0, #0
 8008e3a:	f7ff ffd3 	bl	8008de4 <HAL_InitTick>
 8008e3e:	4604      	mov	r4, r0
 8008e40:	b918      	cbnz	r0, 8008e4a <HAL_Init+0x1a>
    HAL_MspInit();
 8008e42:	f7fe ff3f 	bl	8007cc4 <HAL_MspInit>
}
 8008e46:	4620      	mov	r0, r4
 8008e48:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8008e4a:	2401      	movs	r4, #1
 8008e4c:	e7fb      	b.n	8008e46 <HAL_Init+0x16>
	...

08008e50 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8008e50:	4a03      	ldr	r2, [pc, #12]	; (8008e60 <HAL_IncTick+0x10>)
 8008e52:	4b04      	ldr	r3, [pc, #16]	; (8008e64 <HAL_IncTick+0x14>)
 8008e54:	6811      	ldr	r1, [r2, #0]
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	440b      	add	r3, r1
 8008e5a:	6013      	str	r3, [r2, #0]
}
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	20013e8c 	.word	0x20013e8c
 8008e64:	2000002c 	.word	0x2000002c

08008e68 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008e68:	4b01      	ldr	r3, [pc, #4]	; (8008e70 <HAL_GetTick+0x8>)
 8008e6a:	6818      	ldr	r0, [r3, #0]
}
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	20013e8c 	.word	0x20013e8c

08008e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008e74:	b538      	push	{r3, r4, r5, lr}
 8008e76:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008e78:	f7ff fff6 	bl	8008e68 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008e7c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8008e7e:	bf1c      	itt	ne
 8008e80:	4b05      	ldrne	r3, [pc, #20]	; (8008e98 <HAL_Delay+0x24>)
 8008e82:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8008e84:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 8008e86:	bf18      	it	ne
 8008e88:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008e8a:	f7ff ffed 	bl	8008e68 <HAL_GetTick>
 8008e8e:	1b43      	subs	r3, r0, r5
 8008e90:	42a3      	cmp	r3, r4
 8008e92:	d3fa      	bcc.n	8008e8a <HAL_Delay+0x16>
  {
  }
}
 8008e94:	bd38      	pop	{r3, r4, r5, pc}
 8008e96:	bf00      	nop
 8008e98:	2000002c 	.word	0x2000002c

08008e9c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008e9c:	4907      	ldr	r1, [pc, #28]	; (8008ebc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8008e9e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008ea0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008ea4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008ea6:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008ea8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008eac:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008eb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8008eb8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008eba:	4770      	bx	lr
 8008ebc:	e000ed00 	.word	0xe000ed00

08008ec0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008ec0:	4b16      	ldr	r3, [pc, #88]	; (8008f1c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008ec2:	b530      	push	{r4, r5, lr}
 8008ec4:	68dc      	ldr	r4, [r3, #12]
 8008ec6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008eca:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008ece:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008ed0:	2d04      	cmp	r5, #4
 8008ed2:	bf28      	it	cs
 8008ed4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008ed6:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ed8:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008edc:	bf8c      	ite	hi
 8008ede:	3c03      	subhi	r4, #3
 8008ee0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ee2:	fa03 f505 	lsl.w	r5, r3, r5
 8008ee6:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008eea:	40a3      	lsls	r3, r4
 8008eec:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ef0:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8008ef2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ef4:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ef8:	bfac      	ite	ge
 8008efa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008efe:	4a08      	ldrlt	r2, [pc, #32]	; (8008f20 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f00:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f04:	bfb8      	it	lt
 8008f06:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	bfaa      	itet	ge
 8008f0e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f12:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f14:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008f18:	bd30      	pop	{r4, r5, pc}
 8008f1a:	bf00      	nop
 8008f1c:	e000ed00 	.word	0xe000ed00
 8008f20:	e000ed14 	.word	0xe000ed14

08008f24 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008f24:	2800      	cmp	r0, #0
 8008f26:	db08      	blt.n	8008f3a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008f28:	2301      	movs	r3, #1
 8008f2a:	0942      	lsrs	r2, r0, #5
 8008f2c:	f000 001f 	and.w	r0, r0, #31
 8008f30:	fa03 f000 	lsl.w	r0, r3, r0
 8008f34:	4b01      	ldr	r3, [pc, #4]	; (8008f3c <HAL_NVIC_EnableIRQ+0x18>)
 8008f36:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008f3a:	4770      	bx	lr
 8008f3c:	e000e100 	.word	0xe000e100

08008f40 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008f40:	3801      	subs	r0, #1
 8008f42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8008f46:	d20b      	bcs.n	8008f60 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008f48:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f4c:	4a05      	ldr	r2, [pc, #20]	; (8008f64 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008f4e:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f50:	21f0      	movs	r1, #240	; 0xf0
 8008f52:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008f56:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008f58:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008f5a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008f5c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008f5e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8008f60:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8008f62:	4770      	bx	lr
 8008f64:	e000ed00 	.word	0xe000ed00

08008f68 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008f68:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008f6a:	4604      	mov	r4, r0
 8008f6c:	b908      	cbnz	r0, 8008f72 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8008f6e:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8008f70:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008f72:	7f43      	ldrb	r3, [r0, #29]
 8008f74:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008f78:	b913      	cbnz	r3, 8008f80 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8008f7a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8008f7c:	f7fe feba 	bl	8007cf4 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008f80:	2302      	movs	r3, #2
 8008f82:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008f84:	7923      	ldrb	r3, [r4, #4]
 8008f86:	b9e3      	cbnz	r3, 8008fc2 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8008f88:	6823      	ldr	r3, [r4, #0]
 8008f8a:	4a13      	ldr	r2, [pc, #76]	; (8008fd8 <HAL_CRC_Init+0x70>)
 8008f8c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8008f8e:	689a      	ldr	r2, [r3, #8]
 8008f90:	f022 0218 	bic.w	r2, r2, #24
 8008f94:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008f96:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008f98:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008f9a:	b9d2      	cbnz	r2, 8008fd2 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008f9c:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008fa0:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008fa2:	689a      	ldr	r2, [r3, #8]
 8008fa4:	6961      	ldr	r1, [r4, #20]
 8008fa6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008faa:	430a      	orrs	r2, r1
 8008fac:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008fae:	689a      	ldr	r2, [r3, #8]
 8008fb0:	69a1      	ldr	r1, [r4, #24]
 8008fb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008fb6:	430a      	orrs	r2, r1
 8008fb8:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	e7d6      	b.n	8008f70 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008fc2:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f000 f808 	bl	8008fdc <HAL_CRCEx_Polynomial_Set>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	d0e2      	beq.n	8008f96 <HAL_CRC_Init+0x2e>
 8008fd0:	e7cd      	b.n	8008f6e <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008fd2:	6922      	ldr	r2, [r4, #16]
 8008fd4:	e7e4      	b.n	8008fa0 <HAL_CRC_Init+0x38>
 8008fd6:	bf00      	nop
 8008fd8:	04c11db7 	.word	0x04c11db7

08008fdc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8008fdc:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8008fde:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	d31c      	bcc.n	800901e <HAL_CRCEx_Polynomial_Set+0x42>
 8008fe4:	fa21 f403 	lsr.w	r4, r1, r3
 8008fe8:	07e4      	lsls	r4, r4, #31
 8008fea:	d5f9      	bpl.n	8008fe0 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8008fec:	2a10      	cmp	r2, #16
 8008fee:	d012      	beq.n	8009016 <HAL_CRCEx_Polynomial_Set+0x3a>
 8008ff0:	d804      	bhi.n	8008ffc <HAL_CRCEx_Polynomial_Set+0x20>
 8008ff2:	b13a      	cbz	r2, 8009004 <HAL_CRCEx_Polynomial_Set+0x28>
 8008ff4:	2a08      	cmp	r2, #8
 8008ff6:	d010      	beq.n	800901a <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8008ff8:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8008ffa:	e00b      	b.n	8009014 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8008ffc:	2a18      	cmp	r2, #24
 8008ffe:	d1fb      	bne.n	8008ff8 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8009000:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8009002:	d8f9      	bhi.n	8008ff8 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009004:	6800      	ldr	r0, [r0, #0]
 8009006:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009008:	6883      	ldr	r3, [r0, #8]
 800900a:	f023 0318 	bic.w	r3, r3, #24
 800900e:	431a      	orrs	r2, r3
 8009010:	6082      	str	r2, [r0, #8]
 8009012:	2000      	movs	r0, #0
}
 8009014:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8009016:	2b07      	cmp	r3, #7
 8009018:	e7f3      	b.n	8009002 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 800901a:	2b0f      	cmp	r3, #15
 800901c:	e7f1      	b.n	8009002 <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 800901e:	2a00      	cmp	r2, #0
 8009020:	d1ea      	bne.n	8008ff8 <HAL_CRCEx_Polynomial_Set+0x1c>
 8009022:	e7ef      	b.n	8009004 <HAL_CRCEx_Polynomial_Set+0x28>

08009024 <DFSDM_RegConvStart>:
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8009024:	6b42      	ldr	r2, [r0, #52]	; 0x34
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8009026:	6803      	ldr	r3, [r0, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8009028:	f890 104c 	ldrb.w	r1, [r0, #76]	; 0x4c
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 800902c:	b942      	cbnz	r2, 8009040 <DFSDM_RegConvStart+0x1c>
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009034:	601a      	str	r2, [r3, #0]
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8009036:	2901      	cmp	r1, #1
 8009038:	bf0c      	ite	eq
 800903a:	2302      	moveq	r3, #2
 800903c:	2304      	movne	r3, #4
 800903e:	e01b      	b.n	8009078 <DFSDM_RegConvStart+0x54>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	f022 0201 	bic.w	r2, r2, #1
 8009046:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800904e:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8009050:	681a      	ldr	r2, [r3, #0]
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8009052:	2903      	cmp	r1, #3
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8009054:	f042 0201 	orr.w	r2, r2, #1
 8009058:	601a      	str	r2, [r3, #0]
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800905a:	d1ec      	bne.n	8009036 <DFSDM_RegConvStart+0x12>
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800905c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800905e:	b91a      	cbnz	r2, 8009068 <DFSDM_RegConvStart+0x44>
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	f042 0202 	orr.w	r2, r2, #2
 8009066:	601a      	str	r2, [r3, #0]
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8009068:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800906c:	2b01      	cmp	r3, #1
 800906e:	bf0c      	ite	eq
 8009070:	6c43      	ldreq	r3, [r0, #68]	; 0x44
 8009072:	2301      	movne	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8009074:	6483      	str	r3, [r0, #72]	; 0x48
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8009076:	2304      	movs	r3, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8009078:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
}
 800907c:	4770      	bx	lr
	...

08009080 <DFSDM_GetChannelFromInstance>:
  if (Instance == DFSDM1_Channel0)
 8009080:	4b11      	ldr	r3, [pc, #68]	; (80090c8 <DFSDM_GetChannelFromInstance+0x48>)
 8009082:	4298      	cmp	r0, r3
 8009084:	d014      	beq.n	80090b0 <DFSDM_GetChannelFromInstance+0x30>
  else if (Instance == DFSDM1_Channel1)
 8009086:	3320      	adds	r3, #32
 8009088:	4298      	cmp	r0, r3
 800908a:	d013      	beq.n	80090b4 <DFSDM_GetChannelFromInstance+0x34>
  else if (Instance == DFSDM1_Channel2)
 800908c:	3320      	adds	r3, #32
 800908e:	4298      	cmp	r0, r3
 8009090:	d012      	beq.n	80090b8 <DFSDM_GetChannelFromInstance+0x38>
  else if (Instance == DFSDM1_Channel4)
 8009092:	3340      	adds	r3, #64	; 0x40
 8009094:	4298      	cmp	r0, r3
 8009096:	d011      	beq.n	80090bc <DFSDM_GetChannelFromInstance+0x3c>
  else if (Instance == DFSDM1_Channel5)
 8009098:	3320      	adds	r3, #32
 800909a:	4298      	cmp	r0, r3
 800909c:	d010      	beq.n	80090c0 <DFSDM_GetChannelFromInstance+0x40>
  else if (Instance == DFSDM1_Channel6)
 800909e:	3320      	adds	r3, #32
 80090a0:	4298      	cmp	r0, r3
 80090a2:	d00f      	beq.n	80090c4 <DFSDM_GetChannelFromInstance+0x44>
    channel = 3;
 80090a4:	3320      	adds	r3, #32
 80090a6:	4298      	cmp	r0, r3
 80090a8:	bf0c      	ite	eq
 80090aa:	2007      	moveq	r0, #7
 80090ac:	2003      	movne	r0, #3
 80090ae:	4770      	bx	lr
    channel = 0;
 80090b0:	2000      	movs	r0, #0
 80090b2:	4770      	bx	lr
    channel = 1;
 80090b4:	2001      	movs	r0, #1
 80090b6:	4770      	bx	lr
    channel = 2;
 80090b8:	2002      	movs	r0, #2
 80090ba:	4770      	bx	lr
    channel = 4;
 80090bc:	2004      	movs	r0, #4
 80090be:	4770      	bx	lr
    channel = 5;
 80090c0:	2005      	movs	r0, #5
 80090c2:	4770      	bx	lr
    channel = 6;
 80090c4:	2006      	movs	r0, #6
}
 80090c6:	4770      	bx	lr
 80090c8:	40016000 	.word	0x40016000

080090cc <HAL_DFSDM_ChannelInit>:
{
 80090cc:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_channel == NULL)
 80090ce:	4604      	mov	r4, r0
 80090d0:	2800      	cmp	r0, #0
 80090d2:	d067      	beq.n	80091a4 <HAL_DFSDM_ChannelInit+0xd8>
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80090d4:	6800      	ldr	r0, [r0, #0]
 80090d6:	4d34      	ldr	r5, [pc, #208]	; (80091a8 <HAL_DFSDM_ChannelInit+0xdc>)
 80090d8:	f7ff ffd2 	bl	8009080 <DFSDM_GetChannelFromInstance>
 80090dc:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d15f      	bne.n	80091a4 <HAL_DFSDM_ChannelInit+0xd8>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80090e4:	4620      	mov	r0, r4
 80090e6:	f7fe fe7b 	bl	8007de0 <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 80090ea:	4b30      	ldr	r3, [pc, #192]	; (80091ac <HAL_DFSDM_ChannelInit+0xe0>)
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	3201      	adds	r2, #1
 80090f0:	601a      	str	r2, [r3, #0]
  if (v_dfsdm1ChannelCounter == 1U)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d119      	bne.n	800912c <HAL_DFSDM_ChannelInit+0x60>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80090f8:	4b2d      	ldr	r3, [pc, #180]	; (80091b0 <HAL_DFSDM_ChannelInit+0xe4>)
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8009100:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	68a1      	ldr	r1, [r4, #8]
 8009106:	430a      	orrs	r2, r1
 8009108:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8009110:	601a      	str	r2, [r3, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8009112:	7922      	ldrb	r2, [r4, #4]
 8009114:	2a01      	cmp	r2, #1
 8009116:	d105      	bne.n	8009124 <HAL_DFSDM_ChannelInit+0x58>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8009118:	68e1      	ldr	r1, [r4, #12]
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	3901      	subs	r1, #1
 800911e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009122:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800912a:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800912c:	6820      	ldr	r0, [r4, #0]
 800912e:	6803      	ldr	r3, [r0, #0]
 8009130:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 8009134:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8009136:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 800913a:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking |
 800913c:	69a1      	ldr	r1, [r4, #24]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800913e:	6802      	ldr	r2, [r0, #0]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8009140:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8009142:	4313      	orrs	r3, r2
 8009144:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8009146:	6803      	ldr	r3, [r0, #0]
 8009148:	f023 030f 	bic.w	r3, r3, #15
 800914c:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800914e:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8009152:	6802      	ldr	r2, [r0, #0]
 8009154:	430b      	orrs	r3, r1
 8009156:	4313      	orrs	r3, r2
 8009158:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800915a:	6883      	ldr	r3, [r0, #8]
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800915c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800915e:	6a61      	ldr	r1, [r4, #36]	; 0x24
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8009160:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 8009164:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8009166:	6883      	ldr	r3, [r0, #8]
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8009168:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800916a:	430b      	orrs	r3, r1
 800916c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009170:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8009172:	6843      	ldr	r3, [r0, #4]
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8009174:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8009176:	f003 0307 	and.w	r3, r3, #7
 800917a:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800917c:	6843      	ldr	r3, [r0, #4]
 800917e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009182:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009184:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009188:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800918a:	6803      	ldr	r3, [r0, #0]
 800918c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009190:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8009192:	2301      	movs	r3, #1
 8009194:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8009198:	f7ff ff72 	bl	8009080 <DFSDM_GetChannelFromInstance>
 800919c:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 80091a0:	2000      	movs	r0, #0
}
 80091a2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80091a4:	2001      	movs	r0, #1
 80091a6:	e7fc      	b.n	80091a2 <HAL_DFSDM_ChannelInit+0xd6>
 80091a8:	20013e90 	.word	0x20013e90
 80091ac:	20013eb0 	.word	0x20013eb0
 80091b0:	40016000 	.word	0x40016000

080091b4 <HAL_DFSDM_FilterInit>:
{
 80091b4:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_filter == NULL)
 80091b6:	4604      	mov	r4, r0
 80091b8:	2800      	cmp	r0, #0
 80091ba:	d069      	beq.n	8009290 <HAL_DFSDM_FilterInit+0xdc>
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80091bc:	6802      	ldr	r2, [r0, #0]
 80091be:	4b35      	ldr	r3, [pc, #212]	; (8009294 <HAL_DFSDM_FilterInit+0xe0>)
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d105      	bne.n	80091d0 <HAL_DFSDM_FilterInit+0x1c>
 80091c4:	6840      	ldr	r0, [r0, #4]
 80091c6:	2801      	cmp	r0, #1
 80091c8:	d061      	beq.n	800928e <HAL_DFSDM_FilterInit+0xda>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80091ca:	68e0      	ldr	r0, [r4, #12]
 80091cc:	2801      	cmp	r0, #1
 80091ce:	d05e      	beq.n	800928e <HAL_DFSDM_FilterInit+0xda>
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80091d0:	2300      	movs	r3, #0
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80091d2:	2201      	movs	r2, #1
  hdfsdm_filter->InjConvRemaining    = 1;
 80091d4:	e9c4 2211 	strd	r2, r2, [r4, #68]	; 0x44
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80091d8:	6323      	str	r3, [r4, #48]	; 0x30
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80091da:	6523      	str	r3, [r4, #80]	; 0x50
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80091dc:	4620      	mov	r0, r4
 80091de:	f7fe fd9d 	bl	8007d1c <HAL_DFSDM_FilterMspInit>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80091e2:	6823      	ldr	r3, [r4, #0]
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80091ea:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80091ec:	7a22      	ldrb	r2, [r4, #8]
 80091ee:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	bf0c      	ite	eq
 80091f4:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80091f8:	f022 5200 	bicne.w	r2, r2, #536870912	; 0x20000000
 80091fc:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80091fe:	7a62      	ldrb	r2, [r4, #9]
 8009200:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	bf0c      	ite	eq
 8009206:	f442 1200 	orreq.w	r2, r2, #2097152	; 0x200000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800920a:	f422 1200 	bicne.w	r2, r2, #2097152	; 0x200000
 800920e:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8009210:	681a      	ldr	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8009212:	68e5      	ldr	r5, [r4, #12]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8009214:	f422 42ce 	bic.w	r2, r2, #26368	; 0x6700
 8009218:	f022 0208 	bic.w	r2, r2, #8
 800921c:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800921e:	2d02      	cmp	r5, #2
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8009220:	bf01      	itttt	eq
 8009222:	681a      	ldreq	r2, [r3, #0]
 8009224:	6961      	ldreq	r1, [r4, #20]
 8009226:	430a      	orreq	r2, r1
 8009228:	601a      	streq	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800922a:	7c20      	ldrb	r0, [r4, #16]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 800922c:	681a      	ldr	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800922e:	2801      	cmp	r0, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8009230:	bf0c      	ite	eq
 8009232:	f042 0210 	orreq.w	r2, r2, #16
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8009236:	f022 0210 	bicne.w	r2, r2, #16
 800923a:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800923c:	7c62      	ldrb	r2, [r4, #17]
 800923e:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	bf0c      	ite	eq
 8009244:	f042 0220 	orreq.w	r2, r2, #32
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8009248:	f022 0220 	bicne.w	r2, r2, #32
 800924c:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800924e:	695a      	ldr	r2, [r3, #20]
 8009250:	f022 4263 	bic.w	r2, r2, #3808428032	; 0xe3000000
 8009254:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8009258:	615a      	str	r2, [r3, #20]
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 800925a:	6a62      	ldr	r2, [r4, #36]	; 0x24
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800925c:	6959      	ldr	r1, [r3, #20]
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 800925e:	3a01      	subs	r2, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8009260:	430a      	orrs	r2, r1
 8009262:	69e1      	ldr	r1, [r4, #28]
 8009264:	430a      	orrs	r2, r1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8009266:	6a21      	ldr	r1, [r4, #32]
 8009268:	3901      	subs	r1, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800926a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800926e:	615a      	str	r2, [r3, #20]
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8009270:	6862      	ldr	r2, [r4, #4]
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8009272:	e9c4 250d 	strd	r2, r5, [r4, #52]	; 0x34
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8009276:	69a2      	ldr	r2, [r4, #24]
 8009278:	63e2      	str	r2, [r4, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 800927a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	f042 0201 	orr.w	r2, r2, #1
 8009284:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8009286:	2301      	movs	r3, #1
 8009288:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  return HAL_OK;
 800928c:	2000      	movs	r0, #0
}
 800928e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009290:	2001      	movs	r0, #1
 8009292:	e7fc      	b.n	800928e <HAL_DFSDM_FilterInit+0xda>
 8009294:	40016100 	.word	0x40016100

08009298 <HAL_DFSDM_FilterConfigRegChannel>:
{
 8009298:	b510      	push	{r4, lr}
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800929a:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 800929e:	3b01      	subs	r3, #1
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	2bfd      	cmp	r3, #253	; 0xfd
 80092a4:	d813      	bhi.n	80092ce <HAL_DFSDM_FilterConfigRegChannel+0x36>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80092a6:	6803      	ldr	r3, [r0, #0]
 80092a8:	681c      	ldr	r4, [r3, #0]
 80092aa:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
 80092ae:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80092b2:	601c      	str	r4, [r3, #0]
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80092b4:	681c      	ldr	r4, [r3, #0]
 80092b6:	0209      	lsls	r1, r1, #8
 80092b8:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 80092bc:	4321      	orrs	r1, r4
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80092be:	2a01      	cmp	r2, #1
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80092c0:	bf08      	it	eq
 80092c2:	f441 2180 	orreq.w	r1, r1, #262144	; 0x40000
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80092c6:	6019      	str	r1, [r3, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80092c8:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 80092ca:	2000      	movs	r0, #0
}
 80092cc:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80092ce:	2001      	movs	r0, #1
 80092d0:	e7fc      	b.n	80092cc <HAL_DFSDM_FilterConfigRegChannel+0x34>
	...

080092d4 <HAL_DFSDM_FilterRegularStart_DMA>:
{
 80092d4:	b570      	push	{r4, r5, r6, lr}
 80092d6:	4613      	mov	r3, r2
 80092d8:	4605      	mov	r5, r0
  if ((pData == NULL) || (Length == 0U))
 80092da:	460a      	mov	r2, r1
 80092dc:	b349      	cbz	r1, 8009332 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
 80092de:	b343      	cbz	r3, 8009332 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80092e0:	6801      	ldr	r1, [r0, #0]
 80092e2:	6808      	ldr	r0, [r1, #0]
 80092e4:	0280      	lsls	r0, r0, #10
 80092e6:	d524      	bpl.n	8009332 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80092e8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80092ea:	b948      	cbnz	r0, 8009300 <HAL_DFSDM_FilterRegularStart_DMA+0x2c>
 80092ec:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80092ee:	b938      	cbnz	r0, 8009300 <HAL_DFSDM_FilterRegularStart_DMA+0x2c>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80092f0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80092f2:	69c4      	ldr	r4, [r0, #28]
 80092f4:	b90c      	cbnz	r4, 80092fa <HAL_DFSDM_FilterRegularStart_DMA+0x26>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d11b      	bne.n	8009332 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80092fa:	69c0      	ldr	r0, [r0, #28]
 80092fc:	2820      	cmp	r0, #32
 80092fe:	d018      	beq.n	8009332 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8009300:	f895 604c 	ldrb.w	r6, [r5, #76]	; 0x4c
 8009304:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
 8009308:	2e01      	cmp	r6, #1
 800930a:	d112      	bne.n	8009332 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 800930c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800930e:	4c0c      	ldr	r4, [pc, #48]	; (8009340 <HAL_DFSDM_FilterRegularStart_DMA+0x6c>)
 8009310:	62c4      	str	r4, [r0, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8009312:	4c0c      	ldr	r4, [pc, #48]	; (8009344 <HAL_DFSDM_FilterRegularStart_DMA+0x70>)
 8009314:	6344      	str	r4, [r0, #52]	; 0x34
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8009316:	69c4      	ldr	r4, [r0, #28]
 8009318:	2c20      	cmp	r4, #32
 800931a:	4c0b      	ldr	r4, [pc, #44]	; (8009348 <HAL_DFSDM_FilterRegularStart_DMA+0x74>)
 800931c:	bf18      	it	ne
 800931e:	2400      	movne	r4, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8009320:	6304      	str	r4, [r0, #48]	; 0x30
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8009322:	311c      	adds	r1, #28
 8009324:	f000 f8e0 	bl	80094e8 <HAL_DMA_Start_IT>
 8009328:	4604      	mov	r4, r0
 800932a:	b120      	cbz	r0, 8009336 <HAL_DFSDM_FilterRegularStart_DMA+0x62>
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800932c:	23ff      	movs	r3, #255	; 0xff
 800932e:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
    status = HAL_ERROR;
 8009332:	2401      	movs	r4, #1
 8009334:	e002      	b.n	800933c <HAL_DFSDM_FilterRegularStart_DMA+0x68>
      DFSDM_RegConvStart(hdfsdm_filter);
 8009336:	4628      	mov	r0, r5
 8009338:	f7ff fe74 	bl	8009024 <DFSDM_RegConvStart>
}
 800933c:	4620      	mov	r0, r4
 800933e:	bd70      	pop	{r4, r5, r6, pc}
 8009340:	0800934d 	.word	0x0800934d
 8009344:	08009361 	.word	0x08009361
 8009348:	08009357 	.word	0x08009357

0800934c <DFSDM_DMARegularConvCplt>:
{
 800934c:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800934e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8009350:	f7ff fb7c 	bl	8008a4c <HAL_DFSDM_FilterRegConvCpltCallback>
}
 8009354:	bd08      	pop	{r3, pc}

08009356 <DFSDM_DMARegularHalfConvCplt>:
{
 8009356:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8009358:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800935a:	f7ff fc5f 	bl	8008c1c <HAL_DFSDM_FilterRegConvHalfCpltCallback>
}
 800935e:	bd08      	pop	{r3, pc}

08009360 <DFSDM_DMAError>:
{
 8009360:	b508      	push	{r3, lr}
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009362:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8009364:	2303      	movs	r3, #3
 8009366:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8009368:	f7ff fd36 	bl	8008dd8 <HAL_DFSDM_FilterErrorCallback>
}
 800936c:	bd08      	pop	{r3, pc}
	...

08009370 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009370:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009372:	2800      	cmp	r0, #0
 8009374:	d05b      	beq.n	800942e <HAL_DMA_Init+0xbe>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009376:	6801      	ldr	r1, [r0, #0]
 8009378:	4b2e      	ldr	r3, [pc, #184]	; (8009434 <HAL_DMA_Init+0xc4>)
 800937a:	4299      	cmp	r1, r3
 800937c:	f04f 0414 	mov.w	r4, #20
 8009380:	d842      	bhi.n	8009408 <HAL_DMA_Init+0x98>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009382:	4a2d      	ldr	r2, [pc, #180]	; (8009438 <HAL_DMA_Init+0xc8>)
 8009384:	440a      	add	r2, r1
 8009386:	fbb2 f2f4 	udiv	r2, r2, r4
 800938a:	0092      	lsls	r2, r2, #2
 800938c:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800938e:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 8009392:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009394:	2302      	movs	r3, #2
 8009396:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800939a:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800939e:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 80093a0:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 80093a2:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80093a4:	432b      	orrs	r3, r5
 80093a6:	6945      	ldr	r5, [r0, #20]
 80093a8:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80093aa:	6985      	ldr	r5, [r0, #24]
 80093ac:	432b      	orrs	r3, r5
 80093ae:	69c5      	ldr	r5, [r0, #28]
 80093b0:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80093b2:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80093b4:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80093b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 80093bc:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 80093be:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80093c0:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 80093c4:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80093c6:	d016      	beq.n	80093f6 <HAL_DMA_Init+0x86>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80093c8:	6c44      	ldr	r4, [r0, #68]	; 0x44
    if (DMA1 == hdma->DmaBaseAddress)
 80093ca:	6c01      	ldr	r1, [r0, #64]	; 0x40
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80093cc:	f004 021c 	and.w	r2, r4, #28

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80093d0:	6844      	ldr	r4, [r0, #4]
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80093d2:	230f      	movs	r3, #15
 80093d4:	4093      	lsls	r3, r2
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80093d6:	4094      	lsls	r4, r2
    if (DMA1 == hdma->DmaBaseAddress)
 80093d8:	4a18      	ldr	r2, [pc, #96]	; (800943c <HAL_DMA_Init+0xcc>)
 80093da:	4291      	cmp	r1, r2
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80093dc:	ea6f 0303 	mvn.w	r3, r3
    if (DMA1 == hdma->DmaBaseAddress)
 80093e0:	d11a      	bne.n	8009418 <HAL_DMA_Init+0xa8>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80093e2:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
 80093e6:	4013      	ands	r3, r2
 80093e8:	f8c1 30a8 	str.w	r3, [r1, #168]	; 0xa8
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80093ec:	f8d1 30a8 	ldr.w	r3, [r1, #168]	; 0xa8
 80093f0:	431c      	orrs	r4, r3
 80093f2:	f8c1 40a8 	str.w	r4, [r1, #168]	; 0xa8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80093f6:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80093f8:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80093fa:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80093fc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8009400:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 8009404:	4618      	mov	r0, r3
}
 8009406:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8009408:	4b0d      	ldr	r3, [pc, #52]	; (8009440 <HAL_DMA_Init+0xd0>)
 800940a:	440b      	add	r3, r1
 800940c:	fbb3 f3f4 	udiv	r3, r3, r4
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009414:	4b0b      	ldr	r3, [pc, #44]	; (8009444 <HAL_DMA_Init+0xd4>)
 8009416:	e7bc      	b.n	8009392 <HAL_DMA_Init+0x22>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009418:	f8d2 14a8 	ldr.w	r1, [r2, #1192]	; 0x4a8
 800941c:	400b      	ands	r3, r1
 800941e:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009422:	f8d2 34a8 	ldr.w	r3, [r2, #1192]	; 0x4a8
 8009426:	431c      	orrs	r4, r3
 8009428:	f8c2 44a8 	str.w	r4, [r2, #1192]	; 0x4a8
 800942c:	e7e3      	b.n	80093f6 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 800942e:	2001      	movs	r0, #1
 8009430:	e7e9      	b.n	8009406 <HAL_DMA_Init+0x96>
 8009432:	bf00      	nop
 8009434:	40020407 	.word	0x40020407
 8009438:	bffdfff8 	.word	0xbffdfff8
 800943c:	40020000 	.word	0x40020000
 8009440:	bffdfbf8 	.word	0xbffdfbf8
 8009444:	40020400 	.word	0x40020400

08009448 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8009448:	b510      	push	{r4, lr}

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 800944a:	2800      	cmp	r0, #0
 800944c:	d040      	beq.n	80094d0 <HAL_DMA_DeInit+0x88>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800944e:	6801      	ldr	r1, [r0, #0]
 8009450:	680b      	ldr	r3, [r1, #0]
 8009452:	f023 0301 	bic.w	r3, r3, #1
 8009456:	600b      	str	r3, [r1, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009458:	4b1e      	ldr	r3, [pc, #120]	; (80094d4 <HAL_DMA_DeInit+0x8c>)
 800945a:	4299      	cmp	r1, r3
 800945c:	f04f 0414 	mov.w	r4, #20
 8009460:	d82e      	bhi.n	80094c0 <HAL_DMA_DeInit+0x78>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009462:	4a1d      	ldr	r2, [pc, #116]	; (80094d8 <HAL_DMA_DeInit+0x90>)
 8009464:	440a      	add	r2, r1
 8009466:	fbb2 f2f4 	udiv	r2, r2, r4
 800946a:	0092      	lsls	r2, r2, #2
 800946c:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800946e:	f2a3 4307 	subw	r3, r3, #1031	; 0x407

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009472:	6c42      	ldr	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009474:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 8009476:	2300      	movs	r3, #0
 8009478:	600b      	str	r3, [r1, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800947a:	f002 041c 	and.w	r4, r2, #28
 800947e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8009480:	2201      	movs	r2, #1
 8009482:	40a2      	lsls	r2, r4
 8009484:	604a      	str	r2, [r1, #4]

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009486:	220f      	movs	r2, #15
 8009488:	40a2      	lsls	r2, r4
  if (DMA1 == hdma->DmaBaseAddress)
 800948a:	4c14      	ldr	r4, [pc, #80]	; (80094dc <HAL_DMA_DeInit+0x94>)
 800948c:	42a1      	cmp	r1, r4
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800948e:	bf0c      	ite	eq
 8009490:	f8d1 40a8 	ldreq.w	r4, [r1, #168]	; 0xa8
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009494:	f8d4 14a8 	ldrne.w	r1, [r4, #1192]	; 0x4a8
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009498:	ea6f 0202 	mvn.w	r2, r2
 800949c:	bf0b      	itete	eq
 800949e:	4022      	andeq	r2, r4
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80094a0:	400a      	andne	r2, r1
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80094a2:	f8c1 20a8 	streq.w	r2, [r1, #168]	; 0xa8
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80094a6:	f8c4 24a8 	strne.w	r2, [r4, #1192]	; 0x4a8
  hdma->XferHalfCpltCallback = NULL;
  hdma->XferErrorCallback = NULL;
  hdma->XferAbortCallback = NULL;

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80094aa:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80094ac:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hdma->XferAbortCallback = NULL;
 80094b0:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80094b4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80094b8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

  return HAL_OK;
 80094bc:	2000      	movs	r0, #0
}
 80094be:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80094c0:	4b07      	ldr	r3, [pc, #28]	; (80094e0 <HAL_DMA_DeInit+0x98>)
 80094c2:	440b      	add	r3, r1
 80094c4:	fbb3 f3f4 	udiv	r3, r3, r4
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80094cc:	4b05      	ldr	r3, [pc, #20]	; (80094e4 <HAL_DMA_DeInit+0x9c>)
 80094ce:	e7d0      	b.n	8009472 <HAL_DMA_DeInit+0x2a>
    return HAL_ERROR;
 80094d0:	2001      	movs	r0, #1
 80094d2:	e7f4      	b.n	80094be <HAL_DMA_DeInit+0x76>
 80094d4:	40020407 	.word	0x40020407
 80094d8:	bffdfff8 	.word	0xbffdfff8
 80094dc:	40020000 	.word	0x40020000
 80094e0:	bffdfbf8 	.word	0xbffdfbf8
 80094e4:	40020400 	.word	0x40020400

080094e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80094e8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80094ea:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 80094ee:	2c01      	cmp	r4, #1
 80094f0:	d037      	beq.n	8009562 <HAL_DMA_Start_IT+0x7a>
 80094f2:	2401      	movs	r4, #1
 80094f4:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80094f8:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 80094fc:	2c01      	cmp	r4, #1
 80094fe:	b2e5      	uxtb	r5, r4
 8009500:	f04f 0600 	mov.w	r6, #0
 8009504:	f04f 0402 	mov.w	r4, #2
 8009508:	d129      	bne.n	800955e <HAL_DMA_Start_IT+0x76>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800950a:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800950e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009510:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8009512:	6826      	ldr	r6, [r4, #0]
 8009514:	f026 0601 	bic.w	r6, r6, #1
 8009518:	6026      	str	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800951a:	e9d0 6710 	ldrd	r6, r7, [r0, #64]	; 0x40
 800951e:	f007 071c 	and.w	r7, r7, #28
 8009522:	40bd      	lsls	r5, r7
 8009524:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009526:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009528:	6883      	ldr	r3, [r0, #8]
 800952a:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 800952c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800952e:	bf0b      	itete	eq
 8009530:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8009532:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8009534:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8009536:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8009538:	b14b      	cbz	r3, 800954e <HAL_DMA_Start_IT+0x66>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800953a:	6823      	ldr	r3, [r4, #0]
 800953c:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009540:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8009542:	6823      	ldr	r3, [r4, #0]
 8009544:	f043 0301 	orr.w	r3, r3, #1
 8009548:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800954a:	2000      	movs	r0, #0
}
 800954c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800954e:	6823      	ldr	r3, [r4, #0]
 8009550:	f023 0304 	bic.w	r3, r3, #4
 8009554:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009556:	6823      	ldr	r3, [r4, #0]
 8009558:	f043 030a 	orr.w	r3, r3, #10
 800955c:	e7f0      	b.n	8009540 <HAL_DMA_Start_IT+0x58>
    __HAL_UNLOCK(hdma);
 800955e:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8009562:	2002      	movs	r0, #2
 8009564:	e7f2      	b.n	800954c <HAL_DMA_Start_IT+0x64>

08009566 <HAL_DMA_Abort_IT>:
{
 8009566:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009568:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800956c:	2a02      	cmp	r2, #2
 800956e:	d003      	beq.n	8009578 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009570:	2204      	movs	r2, #4
 8009572:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8009574:	2001      	movs	r0, #1
}
 8009576:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009578:	6802      	ldr	r2, [r0, #0]
    if(hdma->XferAbortCallback != NULL)
 800957a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800957c:	6811      	ldr	r1, [r2, #0]
 800957e:	f021 010e 	bic.w	r1, r1, #14
 8009582:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8009584:	6811      	ldr	r1, [r2, #0]
 8009586:	f021 0101 	bic.w	r1, r1, #1
 800958a:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800958c:	e9d0 4210 	ldrd	r4, r2, [r0, #64]	; 0x40
 8009590:	2101      	movs	r1, #1
 8009592:	f002 021c 	and.w	r2, r2, #28
 8009596:	fa01 f202 	lsl.w	r2, r1, r2
 800959a:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800959c:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800959e:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80095a2:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 80095a6:	b113      	cbz	r3, 80095ae <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 80095a8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80095aa:	4620      	mov	r0, r4
 80095ac:	e7e3      	b.n	8009576 <HAL_DMA_Abort_IT+0x10>
 80095ae:	4618      	mov	r0, r3
 80095b0:	e7e1      	b.n	8009576 <HAL_DMA_Abort_IT+0x10>

080095b2 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80095b2:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80095b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 80095b6:	6803      	ldr	r3, [r0, #0]
{
 80095b8:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80095ba:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80095be:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80095c0:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80095c2:	2404      	movs	r4, #4
 80095c4:	4094      	lsls	r4, r2
 80095c6:	4234      	tst	r4, r6
 80095c8:	d00e      	beq.n	80095e8 <HAL_DMA_IRQHandler+0x36>
 80095ca:	f015 0f04 	tst.w	r5, #4
 80095ce:	d00b      	beq.n	80095e8 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80095d4:	bf5e      	ittt	pl
 80095d6:	681a      	ldrpl	r2, [r3, #0]
 80095d8:	f022 0204 	bicpl.w	r2, r2, #4
 80095dc:	601a      	strpl	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80095de:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80095e0:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 80095e2:	b373      	cbz	r3, 8009642 <HAL_DMA_IRQHandler+0x90>
}
 80095e4:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80095e6:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80095e8:	2402      	movs	r4, #2
 80095ea:	4094      	lsls	r4, r2
 80095ec:	4234      	tst	r4, r6
 80095ee:	d012      	beq.n	8009616 <HAL_DMA_IRQHandler+0x64>
 80095f0:	f015 0f02 	tst.w	r5, #2
 80095f4:	d00f      	beq.n	8009616 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	0695      	lsls	r5, r2, #26
 80095fa:	d406      	bmi.n	800960a <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	f022 020a 	bic.w	r2, r2, #10
 8009602:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8009604:	2301      	movs	r3, #1
 8009606:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800960a:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800960c:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 800960e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8009612:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009614:	e7e5      	b.n	80095e2 <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8009616:	2408      	movs	r4, #8
 8009618:	4094      	lsls	r4, r2
 800961a:	4234      	tst	r4, r6
 800961c:	d011      	beq.n	8009642 <HAL_DMA_IRQHandler+0x90>
 800961e:	072c      	lsls	r4, r5, #28
 8009620:	d50f      	bpl.n	8009642 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009622:	681c      	ldr	r4, [r3, #0]
 8009624:	f024 040e 	bic.w	r4, r4, #14
 8009628:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800962a:	2301      	movs	r3, #1
 800962c:	fa03 f202 	lsl.w	r2, r3, r2
 8009630:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009632:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8009634:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8009638:	2300      	movs	r3, #0
 800963a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 800963e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009640:	e7cf      	b.n	80095e2 <HAL_DMA_IRQHandler+0x30>
}
 8009642:	bc70      	pop	{r4, r5, r6}
 8009644:	4770      	bx	lr
	...

08009648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800964c:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8009800 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009650:	4d69      	ldr	r5, [pc, #420]	; (80097f8 <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 8009652:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009654:	680a      	ldr	r2, [r1, #0]
 8009656:	fa32 f403 	lsrs.w	r4, r2, r3
 800965a:	d102      	bne.n	8009662 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 800965c:	b003      	add	sp, #12
 800965e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009662:	f04f 0a01 	mov.w	sl, #1
 8009666:	fa0a fa03 	lsl.w	sl, sl, r3
    if (iocurrent != 0x00u)
 800966a:	ea1a 0202 	ands.w	r2, sl, r2
 800966e:	f000 80b4 	beq.w	80097da <HAL_GPIO_Init+0x192>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009672:	684c      	ldr	r4, [r1, #4]
 8009674:	f024 0e10 	bic.w	lr, r4, #16
 8009678:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800967c:	2603      	movs	r6, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800967e:	f10e 37ff 	add.w	r7, lr, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009682:	fa06 f608 	lsl.w	r6, r6, r8
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009686:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009688:	ea6f 0606 	mvn.w	r6, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800968c:	d811      	bhi.n	80096b2 <HAL_GPIO_Init+0x6a>
        temp = GPIOx->OSPEEDR;
 800968e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009690:	ea07 0c06 	and.w	ip, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009694:	68cf      	ldr	r7, [r1, #12]
 8009696:	fa07 f708 	lsl.w	r7, r7, r8
 800969a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OSPEEDR = temp;
 800969e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80096a0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80096a2:	ea27 0c0a 	bic.w	ip, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80096a6:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80096aa:	409f      	lsls	r7, r3
 80096ac:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 80096b0:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80096b2:	f004 0c03 	and.w	ip, r4, #3
 80096b6:	f1bc 0f03 	cmp.w	ip, #3
 80096ba:	d108      	bne.n	80096ce <HAL_GPIO_Init+0x86>
        temp = GPIOx->ASCR;
 80096bc:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80096be:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80096c2:	f3c4 07c0 	ubfx	r7, r4, #3, #1
 80096c6:	409f      	lsls	r7, r3
 80096c8:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->ASCR = temp;
 80096cc:	62c7      	str	r7, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 80096ce:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80096d0:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80096d4:	688f      	ldr	r7, [r1, #8]
 80096d6:	fa07 f708 	lsl.w	r7, r7, r8
 80096da:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80096de:	f1be 0f02 	cmp.w	lr, #2
      GPIOx->PUPDR = temp;
 80096e2:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80096e4:	d116      	bne.n	8009714 <HAL_GPIO_Init+0xcc>
        temp = GPIOx->AFR[position >> 3u];
 80096e6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80096ea:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80096ee:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80096f2:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80096f6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80096fa:	f04f 0e0f 	mov.w	lr, #15
 80096fe:	fa0e fe0b 	lsl.w	lr, lr, fp
 8009702:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009706:	690f      	ldr	r7, [r1, #16]
 8009708:	fa07 f70b 	lsl.w	r7, r7, fp
 800970c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 8009710:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8009714:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009716:	fa0c fc08 	lsl.w	ip, ip, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800971a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800971c:	ea4c 0606 	orr.w	r6, ip, r6
      GPIOx->MODER = temp;
 8009720:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009722:	00e6      	lsls	r6, r4, #3
 8009724:	d559      	bpl.n	80097da <HAL_GPIO_Init+0x192>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009726:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 800972a:	f046 0601 	orr.w	r6, r6, #1
 800972e:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8009732:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8009736:	f023 0703 	bic.w	r7, r3, #3
 800973a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800973e:	f006 0601 	and.w	r6, r6, #1
 8009742:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8009746:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009748:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800974c:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800974e:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009750:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8009754:	f04f 0c0f 	mov.w	ip, #15
 8009758:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800975c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009760:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009764:	d03b      	beq.n	80097de <HAL_GPIO_Init+0x196>
 8009766:	4e25      	ldr	r6, [pc, #148]	; (80097fc <HAL_GPIO_Init+0x1b4>)
 8009768:	42b0      	cmp	r0, r6
 800976a:	d03a      	beq.n	80097e2 <HAL_GPIO_Init+0x19a>
 800976c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009770:	42b0      	cmp	r0, r6
 8009772:	d038      	beq.n	80097e6 <HAL_GPIO_Init+0x19e>
 8009774:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009778:	42b0      	cmp	r0, r6
 800977a:	d036      	beq.n	80097ea <HAL_GPIO_Init+0x1a2>
 800977c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009780:	42b0      	cmp	r0, r6
 8009782:	d034      	beq.n	80097ee <HAL_GPIO_Init+0x1a6>
 8009784:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009788:	42b0      	cmp	r0, r6
 800978a:	d032      	beq.n	80097f2 <HAL_GPIO_Init+0x1aa>
 800978c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009790:	42b0      	cmp	r0, r6
 8009792:	bf0c      	ite	eq
 8009794:	2606      	moveq	r6, #6
 8009796:	2607      	movne	r6, #7
 8009798:	fa06 f60e 	lsl.w	r6, r6, lr
 800979c:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 80097a0:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 80097a2:	682e      	ldr	r6, [r5, #0]
        temp &= ~(iocurrent);
 80097a4:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80097a6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 80097aa:	bf0c      	ite	eq
 80097ac:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80097ae:	4316      	orrne	r6, r2
        EXTI->IMR1 = temp;
 80097b0:	602e      	str	r6, [r5, #0]
        temp = EXTI->EMR1;
 80097b2:	686e      	ldr	r6, [r5, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80097b4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 80097b8:	bf0c      	ite	eq
 80097ba:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80097bc:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 80097be:	606e      	str	r6, [r5, #4]
        temp = EXTI->RTSR1;
 80097c0:	68ae      	ldr	r6, [r5, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80097c2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80097c6:	bf0c      	ite	eq
 80097c8:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80097ca:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 80097cc:	60ae      	str	r6, [r5, #8]
        temp = EXTI->FTSR1;
 80097ce:	68ee      	ldr	r6, [r5, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80097d0:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 80097d2:	bf54      	ite	pl
 80097d4:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80097d6:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 80097d8:	60ee      	str	r6, [r5, #12]
    position++;
 80097da:	3301      	adds	r3, #1
 80097dc:	e73a      	b.n	8009654 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80097de:	2600      	movs	r6, #0
 80097e0:	e7da      	b.n	8009798 <HAL_GPIO_Init+0x150>
 80097e2:	2601      	movs	r6, #1
 80097e4:	e7d8      	b.n	8009798 <HAL_GPIO_Init+0x150>
 80097e6:	2602      	movs	r6, #2
 80097e8:	e7d6      	b.n	8009798 <HAL_GPIO_Init+0x150>
 80097ea:	2603      	movs	r6, #3
 80097ec:	e7d4      	b.n	8009798 <HAL_GPIO_Init+0x150>
 80097ee:	2604      	movs	r6, #4
 80097f0:	e7d2      	b.n	8009798 <HAL_GPIO_Init+0x150>
 80097f2:	2605      	movs	r6, #5
 80097f4:	e7d0      	b.n	8009798 <HAL_GPIO_Init+0x150>
 80097f6:	bf00      	nop
 80097f8:	40010400 	.word	0x40010400
 80097fc:	48000400 	.word	0x48000400
 8009800:	40021000 	.word	0x40021000

08009804 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009804:	b10a      	cbz	r2, 800980a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009806:	6181      	str	r1, [r0, #24]
 8009808:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800980a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800980c:	4770      	bx	lr

0800980e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800980e:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009810:	4604      	mov	r4, r0
 8009812:	2800      	cmp	r0, #0
 8009814:	d04a      	beq.n	80098ac <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009816:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800981a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800981e:	b91b      	cbnz	r3, 8009828 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009820:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009824:	f7fe fb18 	bl	8007e58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009828:	2324      	movs	r3, #36	; 0x24
 800982a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800982e:	6823      	ldr	r3, [r4, #0]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	f022 0201 	bic.w	r2, r2, #1
 8009836:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009838:	6862      	ldr	r2, [r4, #4]
 800983a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800983e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009840:	689a      	ldr	r2, [r3, #8]
 8009842:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009846:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009848:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800984c:	2901      	cmp	r1, #1
 800984e:	d124      	bne.n	800989a <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009850:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009854:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009856:	685a      	ldr	r2, [r3, #4]
 8009858:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800985c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009860:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009862:	68da      	ldr	r2, [r3, #12]
 8009864:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009868:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800986a:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800986e:	430a      	orrs	r2, r1
 8009870:	69a1      	ldr	r1, [r4, #24]
 8009872:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009876:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009878:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800987c:	430a      	orrs	r2, r1
 800987e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	f042 0201 	orr.w	r2, r2, #1
 8009886:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009888:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800988a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800988c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800988e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009892:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009894:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 8009898:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800989a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800989e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80098a0:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80098a2:	bf04      	itt	eq
 80098a4:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 80098a8:	605a      	streq	r2, [r3, #4]
 80098aa:	e7d4      	b.n	8009856 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80098ac:	2001      	movs	r0, #1
 80098ae:	e7f3      	b.n	8009898 <HAL_I2C_Init+0x8a>

080098b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80098b0:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098b2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80098b6:	2b20      	cmp	r3, #32
 80098b8:	b2dc      	uxtb	r4, r3
 80098ba:	d11d      	bne.n	80098f8 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098bc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d019      	beq.n	80098f8 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80098c4:	2324      	movs	r3, #36	; 0x24
 80098c6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80098ca:	6803      	ldr	r3, [r0, #0]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	f022 0201 	bic.w	r2, r2, #1
 80098d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80098da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	4311      	orrs	r1, r2
 80098e0:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	f042 0201 	orr.w	r2, r2, #1
 80098e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098ea:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80098ec:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80098f0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80098f4:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80098f6:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80098f8:	2002      	movs	r0, #2
 80098fa:	e7fc      	b.n	80098f6 <HAL_I2CEx_ConfigAnalogFilter+0x46>

080098fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80098fc:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098fe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8009902:	2b20      	cmp	r3, #32
 8009904:	b2dc      	uxtb	r4, r3
 8009906:	d11c      	bne.n	8009942 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009908:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800990c:	2b01      	cmp	r3, #1
 800990e:	d018      	beq.n	8009942 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009910:	2324      	movs	r3, #36	; 0x24
 8009912:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009916:	6803      	ldr	r3, [r0, #0]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	f022 0201 	bic.w	r2, r2, #1
 800991e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009920:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009922:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009926:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800992a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	f042 0201 	orr.w	r2, r2, #1
 8009932:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009934:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8009936:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800993a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800993e:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8009940:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8009942:	2002      	movs	r0, #2
 8009944:	e7fc      	b.n	8009940 <HAL_I2CEx_ConfigDigitalFilter+0x44>

08009946 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009946:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009948:	4604      	mov	r4, r0
{
 800994a:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 800994c:	b360      	cbz	r0, 80099a8 <HAL_PCD_Init+0x62>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800994e:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8009952:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009954:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009958:	b91b      	cbnz	r3, 8009962 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800995a:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800995e:	f7fe fb61 	bl	8008024 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009962:	2303      	movs	r3, #3
 8009964:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009968:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800996a:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800996c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8009970:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8009974:	bf08      	it	eq
 8009976:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8009978:	f001 fc54 	bl	800b224 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800997c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800997e:	466e      	mov	r6, sp
 8009980:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009982:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009984:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009986:	e895 0003 	ldmia.w	r5, {r0, r1}
 800998a:	e886 0003 	stmia.w	r6, {r0, r1}
 800998e:	4625      	mov	r5, r4
 8009990:	1d27      	adds	r7, r4, #4
 8009992:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8009996:	f855 0b10 	ldr.w	r0, [r5], #16
 800999a:	f001 fc15 	bl	800b1c8 <USB_CoreInit>
 800999e:	4606      	mov	r6, r0
 80099a0:	b120      	cbz	r0, 80099ac <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80099a2:	2302      	movs	r3, #2
 80099a4:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 80099a8:	2501      	movs	r5, #1
 80099aa:	e054      	b.n	8009a56 <HAL_PCD_Init+0x110>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80099ac:	4601      	mov	r1, r0
 80099ae:	6820      	ldr	r0, [r4, #0]
 80099b0:	f001 fc3e 	bl	800b230 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80099b4:	4630      	mov	r0, r6
 80099b6:	f8d4 c004 	ldr.w	ip, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80099ba:	261c      	movs	r6, #28
 80099bc:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80099c0:	4601      	mov	r1, r0
 80099c2:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80099c4:	4594      	cmp	ip, r2
 80099c6:	f100 0001 	add.w	r0, r0, #1
 80099ca:	d81c      	bhi.n	8009a06 <HAL_PCD_Init+0xc0>
 80099cc:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80099ce:	261c      	movs	r6, #28
 80099d0:	4619      	mov	r1, r3
 80099d2:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80099d4:	4584      	cmp	ip, r0
 80099d6:	f103 0301 	add.w	r3, r3, #1
 80099da:	d822      	bhi.n	8009a22 <HAL_PCD_Init+0xdc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80099dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099de:	466e      	mov	r6, sp
 80099e0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80099e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099e4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80099e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80099ea:	e886 0003 	stmia.w	r6, {r0, r1}
 80099ee:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80099f2:	6820      	ldr	r0, [r4, #0]
 80099f4:	f001 fc5e 	bl	800b2b4 <USB_DevInit>
 80099f8:	2301      	movs	r3, #1
 80099fa:	4605      	mov	r5, r0
 80099fc:	b1f0      	cbz	r0, 8009a3c <HAL_PCD_Init+0xf6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80099fe:	2202      	movs	r2, #2
 8009a00:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8009a04:	e7d0      	b.n	80099a8 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 8009a06:	fb06 4302 	mla	r3, r6, r2, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009a0a:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].is_in = 1U;
 8009a0e:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8009a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009a16:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009a1a:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 8009a1e:	6519      	str	r1, [r3, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a20:	e7cf      	b.n	80099c2 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8009a22:	fb06 4200 	mla	r2, r6, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009a26:	e9c2 1181 	strd	r1, r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].is_in = 0U;
 8009a2a:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8009a2e:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009a32:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009a36:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a3a:	e7ca      	b.n	80099d2 <HAL_PCD_Init+0x8c>
  }

  hpcd->USB_Address = 0U;
 8009a3c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009a40:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009a44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d102      	bne.n	8009a50 <HAL_PCD_Init+0x10a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f000 f806 	bl	8009a5c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009a50:	6820      	ldr	r0, [r4, #0]
 8009a52:	f001 fcd7 	bl	800b404 <USB_DevDisconnect>

  return HAL_OK;
}
 8009a56:	4628      	mov	r0, r5
 8009a58:	b00b      	add	sp, #44	; 0x2c
 8009a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a5c <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009a5c:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8009a5e:	2100      	movs	r1, #0
 8009a60:	f880 13f4 	strb.w	r1, [r0, #1012]	; 0x3f4
  hpcd->lpm_active = 1U;
 8009a64:	2301      	movs	r3, #1
 8009a66:	f8c0 33fc 	str.w	r3, [r0, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009a6a:	6993      	ldr	r3, [r2, #24]
 8009a6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009a70:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009a72:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a78:	f043 0303 	orr.w	r3, r3, #3
 8009a7c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8009a7e:	4608      	mov	r0, r1
 8009a80:	4770      	bx	lr
	...

08009a84 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009a84:	4a02      	ldr	r2, [pc, #8]	; (8009a90 <HAL_PWR_EnableBkUpAccess+0xc>)
 8009a86:	6813      	ldr	r3, [r2, #0]
 8009a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a8c:	6013      	str	r3, [r2, #0]
}
 8009a8e:	4770      	bx	lr
 8009a90:	40007000 	.word	0x40007000

08009a94 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009a94:	4b02      	ldr	r3, [pc, #8]	; (8009aa0 <HAL_PWREx_GetVoltageRange+0xc>)
 8009a96:	6818      	ldr	r0, [r3, #0]
#endif
}
 8009a98:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8009a9c:	4770      	bx	lr
 8009a9e:	bf00      	nop
 8009aa0:	40007000 	.word	0x40007000

08009aa4 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009aa4:	4a17      	ldr	r2, [pc, #92]	; (8009b04 <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009aa6:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009aa8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009aac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009ab0:	d11d      	bne.n	8009aee <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009ab2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ab6:	d101      	bne.n	8009abc <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009ab8:	2000      	movs	r0, #0
 8009aba:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009abc:	6813      	ldr	r3, [r2, #0]
 8009abe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009ac6:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009ac8:	4b0f      	ldr	r3, [pc, #60]	; (8009b08 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2132      	movs	r1, #50	; 0x32
 8009ace:	434b      	muls	r3, r1
 8009ad0:	490e      	ldr	r1, [pc, #56]	; (8009b0c <HAL_PWREx_ControlVoltageScaling+0x68>)
 8009ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ad6:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009ad8:	6951      	ldr	r1, [r2, #20]
 8009ada:	0549      	lsls	r1, r1, #21
 8009adc:	d500      	bpl.n	8009ae0 <HAL_PWREx_ControlVoltageScaling+0x3c>
 8009ade:	b923      	cbnz	r3, 8009aea <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009ae0:	6953      	ldr	r3, [r2, #20]
 8009ae2:	055b      	lsls	r3, r3, #21
 8009ae4:	d5e8      	bpl.n	8009ab8 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 8009ae6:	2003      	movs	r0, #3
}
 8009ae8:	4770      	bx	lr
        wait_loop_index--;
 8009aea:	3b01      	subs	r3, #1
 8009aec:	e7f4      	b.n	8009ad8 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8009aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009af2:	bf1f      	itttt	ne
 8009af4:	6813      	ldrne	r3, [r2, #0]
 8009af6:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 8009afa:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 8009afe:	6013      	strne	r3, [r2, #0]
 8009b00:	e7da      	b.n	8009ab8 <HAL_PWREx_ControlVoltageScaling+0x14>
 8009b02:	bf00      	nop
 8009b04:	40007000 	.word	0x40007000
 8009b08:	20000008 	.word	0x20000008
 8009b0c:	000f4240 	.word	0x000f4240

08009b10 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8009b10:	4a02      	ldr	r2, [pc, #8]	; (8009b1c <HAL_PWREx_EnableVddUSB+0xc>)
 8009b12:	6853      	ldr	r3, [r2, #4]
 8009b14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009b18:	6053      	str	r3, [r2, #4]
}
 8009b1a:	4770      	bx	lr
 8009b1c:	40007000 	.word	0x40007000

08009b20 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8009b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b24:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009b28:	4604      	mov	r4, r0
 8009b2a:	460e      	mov	r6, r1
 8009b2c:	4615      	mov	r5, r2
 8009b2e:	461f      	mov	r7, r3
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009b30:	6822      	ldr	r2, [r4, #0]
 8009b32:	6893      	ldr	r3, [r2, #8]
 8009b34:	4233      	tst	r3, r6
 8009b36:	bf14      	ite	ne
 8009b38:	2301      	movne	r3, #1
 8009b3a:	2300      	moveq	r3, #0
 8009b3c:	42ab      	cmp	r3, r5
 8009b3e:	d101      	bne.n	8009b44 <QSPI_WaitFlagStateUntilTimeout+0x24>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8009b40:	2000      	movs	r0, #0
 8009b42:	e012      	b.n	8009b6a <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8009b44:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009b48:	d0f3      	beq.n	8009b32 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b4a:	f7ff f98d 	bl	8008e68 <HAL_GetTick>
 8009b4e:	1bc0      	subs	r0, r0, r7
 8009b50:	4540      	cmp	r0, r8
 8009b52:	d802      	bhi.n	8009b5a <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8009b54:	f1b8 0f00 	cmp.w	r8, #0
 8009b58:	d1ea      	bne.n	8009b30 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009b5a:	2304      	movs	r3, #4
 8009b5c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009b60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009b62:	f043 0301 	orr.w	r3, r3, #1
 8009b66:	63e3      	str	r3, [r4, #60]	; 0x3c
 8009b68:	2001      	movs	r0, #1
}
 8009b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009b70 <HAL_QSPI_Init>:
{
 8009b70:	b530      	push	{r4, r5, lr}
 8009b72:	b085      	sub	sp, #20
 8009b74:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009b76:	f7ff f977 	bl	8008e68 <HAL_GetTick>
 8009b7a:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8009b7c:	2c00      	cmp	r4, #0
 8009b7e:	d043      	beq.n	8009c08 <HAL_QSPI_Init+0x98>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8009b80:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8009b84:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8009b88:	b94a      	cbnz	r2, 8009b9e <HAL_QSPI_Init+0x2e>
 8009b8a:	9003      	str	r0, [sp, #12]
    hqspi->Lock = HAL_UNLOCKED;
 8009b8c:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
    HAL_QSPI_MspInit(hqspi);
 8009b90:	4620      	mov	r0, r4
 8009b92:	f7fe f997 	bl	8007ec4 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8009b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b9a:	9b03      	ldr	r3, [sp, #12]
 8009b9c:	6422      	str	r2, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009b9e:	6820      	ldr	r0, [r4, #0]
 8009ba0:	68a1      	ldr	r1, [r4, #8]
 8009ba2:	6802      	ldr	r2, [r0, #0]
 8009ba4:	3901      	subs	r1, #1
 8009ba6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8009baa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009bae:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009bb0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009bb2:	9200      	str	r2, [sp, #0]
 8009bb4:	2120      	movs	r1, #32
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	4620      	mov	r0, r4
 8009bba:	f7ff ffb1 	bl	8009b20 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8009bbe:	b9f0      	cbnz	r0, 8009bfe <HAL_QSPI_Init+0x8e>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8009bc0:	6822      	ldr	r2, [r4, #0]
 8009bc2:	6865      	ldr	r5, [r4, #4]
 8009bc4:	6811      	ldr	r1, [r2, #0]
 8009bc6:	68e3      	ldr	r3, [r4, #12]
 8009bc8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8009bcc:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8009bd0:	f021 0110 	bic.w	r1, r1, #16
 8009bd4:	430b      	orrs	r3, r1
 8009bd6:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8009bd8:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8009bdc:	430b      	orrs	r3, r1
 8009bde:	6921      	ldr	r1, [r4, #16]
 8009be0:	6855      	ldr	r5, [r2, #4]
 8009be2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009be6:	4909      	ldr	r1, [pc, #36]	; (8009c0c <HAL_QSPI_Init+0x9c>)
 8009be8:	4029      	ands	r1, r5
 8009bea:	430b      	orrs	r3, r1
 8009bec:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8009bee:	6813      	ldr	r3, [r2, #0]
 8009bf0:	f043 0301 	orr.w	r3, r3, #1
 8009bf4:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8009bf6:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009bf8:	63e0      	str	r0, [r4, #60]	; 0x3c
    hqspi->State = HAL_QSPI_STATE_READY;
 8009bfa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 8009bfe:	2300      	movs	r3, #0
 8009c00:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8009c04:	b005      	add	sp, #20
 8009c06:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8009c08:	2001      	movs	r0, #1
 8009c0a:	e7fb      	b.n	8009c04 <HAL_QSPI_Init+0x94>
 8009c0c:	ffe0f8fe 	.word	0xffe0f8fe

08009c10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009c10:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009c12:	4d1e      	ldr	r5, [pc, #120]	; (8009c8c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8009c14:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009c16:	00da      	lsls	r2, r3, #3
{
 8009c18:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009c1a:	d518      	bpl.n	8009c4e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009c1c:	f7ff ff3a 	bl	8009a94 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009c20:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009c24:	d123      	bne.n	8009c6e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009c26:	2c80      	cmp	r4, #128	; 0x80
 8009c28:	d929      	bls.n	8009c7e <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009c2a:	2ca0      	cmp	r4, #160	; 0xa0
 8009c2c:	bf8c      	ite	hi
 8009c2e:	2002      	movhi	r0, #2
 8009c30:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009c32:	4a17      	ldr	r2, [pc, #92]	; (8009c90 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8009c34:	6813      	ldr	r3, [r2, #0]
 8009c36:	f023 0307 	bic.w	r3, r3, #7
 8009c3a:	4303      	orrs	r3, r0
 8009c3c:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009c3e:	6813      	ldr	r3, [r2, #0]
 8009c40:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8009c44:	1a18      	subs	r0, r3, r0
 8009c46:	bf18      	it	ne
 8009c48:	2001      	movne	r0, #1
 8009c4a:	b003      	add	sp, #12
 8009c4c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8009c4e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c54:	65ab      	str	r3, [r5, #88]	; 0x58
 8009c56:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c5c:	9301      	str	r3, [sp, #4]
 8009c5e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8009c60:	f7ff ff18 	bl	8009a94 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8009c64:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009c66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c6a:	65ab      	str	r3, [r5, #88]	; 0x58
 8009c6c:	e7d8      	b.n	8009c20 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8009c6e:	2c80      	cmp	r4, #128	; 0x80
 8009c70:	d807      	bhi.n	8009c82 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8009c72:	d008      	beq.n	8009c86 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8009c74:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8009c78:	4258      	negs	r0, r3
 8009c7a:	4158      	adcs	r0, r3
 8009c7c:	e7d9      	b.n	8009c32 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009c7e:	2000      	movs	r0, #0
 8009c80:	e7d7      	b.n	8009c32 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8009c82:	2003      	movs	r0, #3
 8009c84:	e7d5      	b.n	8009c32 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8009c86:	2002      	movs	r0, #2
 8009c88:	e7d3      	b.n	8009c32 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8009c8a:	bf00      	nop
 8009c8c:	40021000 	.word	0x40021000
 8009c90:	40022000 	.word	0x40022000

08009c94 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c94:	4b22      	ldr	r3, [pc, #136]	; (8009d20 <HAL_RCC_GetSysClockFreq+0x8c>)
 8009c96:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009c98:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009c9a:	f012 020c 	ands.w	r2, r2, #12
 8009c9e:	d005      	beq.n	8009cac <HAL_RCC_GetSysClockFreq+0x18>
 8009ca0:	2a0c      	cmp	r2, #12
 8009ca2:	d115      	bne.n	8009cd0 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009ca4:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009ca8:	2901      	cmp	r1, #1
 8009caa:	d118      	bne.n	8009cde <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009cac:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8009cae:	481d      	ldr	r0, [pc, #116]	; (8009d24 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009cb0:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009cb2:	bf55      	itete	pl
 8009cb4:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009cb8:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009cba:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009cbe:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8009cc2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009cc6:	b34a      	cbz	r2, 8009d1c <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009cc8:	2a0c      	cmp	r2, #12
 8009cca:	d009      	beq.n	8009ce0 <HAL_RCC_GetSysClockFreq+0x4c>
 8009ccc:	2000      	movs	r0, #0
  return sysclockfreq;
 8009cce:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009cd0:	2a04      	cmp	r2, #4
 8009cd2:	d022      	beq.n	8009d1a <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009cd4:	2a08      	cmp	r2, #8
 8009cd6:	4814      	ldr	r0, [pc, #80]	; (8009d28 <HAL_RCC_GetSysClockFreq+0x94>)
 8009cd8:	bf18      	it	ne
 8009cda:	2000      	movne	r0, #0
 8009cdc:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009cde:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009ce0:	68da      	ldr	r2, [r3, #12]
 8009ce2:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8009ce6:	2a02      	cmp	r2, #2
 8009ce8:	d015      	beq.n	8009d16 <HAL_RCC_GetSysClockFreq+0x82>
 8009cea:	490f      	ldr	r1, [pc, #60]	; (8009d28 <HAL_RCC_GetSysClockFreq+0x94>)
 8009cec:	2a03      	cmp	r2, #3
 8009cee:	bf08      	it	eq
 8009cf0:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009cf2:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009cf4:	68da      	ldr	r2, [r3, #12]
 8009cf6:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8009cfa:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009cfc:	68d8      	ldr	r0, [r3, #12]
 8009cfe:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009d02:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009d06:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009d08:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009d0a:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009d0c:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8009d10:	fbb2 f0f0 	udiv	r0, r2, r0
 8009d14:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8009d16:	4805      	ldr	r0, [pc, #20]	; (8009d2c <HAL_RCC_GetSysClockFreq+0x98>)
 8009d18:	e7eb      	b.n	8009cf2 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8009d1a:	4804      	ldr	r0, [pc, #16]	; (8009d2c <HAL_RCC_GetSysClockFreq+0x98>)
}
 8009d1c:	4770      	bx	lr
 8009d1e:	bf00      	nop
 8009d20:	40021000 	.word	0x40021000
 8009d24:	08013eec 	.word	0x08013eec
 8009d28:	007a1200 	.word	0x007a1200
 8009d2c:	00f42400 	.word	0x00f42400

08009d30 <HAL_RCC_OscConfig>:
{
 8009d30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8009d34:	4605      	mov	r5, r0
 8009d36:	b918      	cbnz	r0, 8009d40 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8009d38:	2001      	movs	r0, #1
}
 8009d3a:	b003      	add	sp, #12
 8009d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d40:	4c92      	ldr	r4, [pc, #584]	; (8009f8c <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009d42:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d44:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009d46:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009d48:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d4a:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009d4e:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009d52:	d53d      	bpl.n	8009dd0 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009d54:	b11e      	cbz	r6, 8009d5e <HAL_RCC_OscConfig+0x2e>
 8009d56:	2e0c      	cmp	r6, #12
 8009d58:	d166      	bne.n	8009e28 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009d5a:	2f01      	cmp	r7, #1
 8009d5c:	d164      	bne.n	8009e28 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009d5e:	6823      	ldr	r3, [r4, #0]
 8009d60:	0799      	lsls	r1, r3, #30
 8009d62:	d502      	bpl.n	8009d6a <HAL_RCC_OscConfig+0x3a>
 8009d64:	69ab      	ldr	r3, [r5, #24]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d0e6      	beq.n	8009d38 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009d6a:	6823      	ldr	r3, [r4, #0]
 8009d6c:	6a28      	ldr	r0, [r5, #32]
 8009d6e:	071a      	lsls	r2, r3, #28
 8009d70:	bf56      	itet	pl
 8009d72:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8009d76:	6823      	ldrmi	r3, [r4, #0]
 8009d78:	091b      	lsrpl	r3, r3, #4
 8009d7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d7e:	4298      	cmp	r0, r3
 8009d80:	d93b      	bls.n	8009dfa <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009d82:	f7ff ff45 	bl	8009c10 <RCC_SetFlashLatencyFromMSIRange>
 8009d86:	2800      	cmp	r0, #0
 8009d88:	d1d6      	bne.n	8009d38 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	f043 0308 	orr.w	r3, r3, #8
 8009d90:	6023      	str	r3, [r4, #0]
 8009d92:	6823      	ldr	r3, [r4, #0]
 8009d94:	6a2a      	ldr	r2, [r5, #32]
 8009d96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009d9e:	6863      	ldr	r3, [r4, #4]
 8009da0:	69ea      	ldr	r2, [r5, #28]
 8009da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009da6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009daa:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009dac:	f7ff ff72 	bl	8009c94 <HAL_RCC_GetSysClockFreq>
 8009db0:	68a3      	ldr	r3, [r4, #8]
 8009db2:	4a77      	ldr	r2, [pc, #476]	; (8009f90 <HAL_RCC_OscConfig+0x260>)
 8009db4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009db8:	5cd3      	ldrb	r3, [r2, r3]
 8009dba:	f003 031f 	and.w	r3, r3, #31
 8009dbe:	40d8      	lsrs	r0, r3
 8009dc0:	4b74      	ldr	r3, [pc, #464]	; (8009f94 <HAL_RCC_OscConfig+0x264>)
 8009dc2:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8009dc4:	4b74      	ldr	r3, [pc, #464]	; (8009f98 <HAL_RCC_OscConfig+0x268>)
 8009dc6:	6818      	ldr	r0, [r3, #0]
 8009dc8:	f7ff f80c 	bl	8008de4 <HAL_InitTick>
        if(status != HAL_OK)
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	d1b4      	bne.n	8009d3a <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009dd0:	682b      	ldr	r3, [r5, #0]
 8009dd2:	07d9      	lsls	r1, r3, #31
 8009dd4:	d45f      	bmi.n	8009e96 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009dd6:	682b      	ldr	r3, [r5, #0]
 8009dd8:	079a      	lsls	r2, r3, #30
 8009dda:	f100 809e 	bmi.w	8009f1a <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009dde:	682b      	ldr	r3, [r5, #0]
 8009de0:	0719      	lsls	r1, r3, #28
 8009de2:	f100 80db 	bmi.w	8009f9c <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009de6:	682b      	ldr	r3, [r5, #0]
 8009de8:	075a      	lsls	r2, r3, #29
 8009dea:	f100 8101 	bmi.w	8009ff0 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009dee:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f040 816a 	bne.w	800a0ca <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8009df6:	2000      	movs	r0, #0
 8009df8:	e79f      	b.n	8009d3a <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009dfa:	6823      	ldr	r3, [r4, #0]
 8009dfc:	f043 0308 	orr.w	r3, r3, #8
 8009e00:	6023      	str	r3, [r4, #0]
 8009e02:	6823      	ldr	r3, [r4, #0]
 8009e04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e08:	4303      	orrs	r3, r0
 8009e0a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009e0c:	6863      	ldr	r3, [r4, #4]
 8009e0e:	69ea      	ldr	r2, [r5, #28]
 8009e10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009e18:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009e1a:	2e00      	cmp	r6, #0
 8009e1c:	d1c6      	bne.n	8009dac <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009e1e:	f7ff fef7 	bl	8009c10 <RCC_SetFlashLatencyFromMSIRange>
 8009e22:	2800      	cmp	r0, #0
 8009e24:	d0c2      	beq.n	8009dac <HAL_RCC_OscConfig+0x7c>
 8009e26:	e787      	b.n	8009d38 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009e28:	69ab      	ldr	r3, [r5, #24]
 8009e2a:	b31b      	cbz	r3, 8009e74 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8009e2c:	6823      	ldr	r3, [r4, #0]
 8009e2e:	f043 0301 	orr.w	r3, r3, #1
 8009e32:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009e34:	f7ff f818 	bl	8008e68 <HAL_GetTick>
 8009e38:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009e3a:	6823      	ldr	r3, [r4, #0]
 8009e3c:	079b      	lsls	r3, r3, #30
 8009e3e:	d511      	bpl.n	8009e64 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009e40:	6823      	ldr	r3, [r4, #0]
 8009e42:	f043 0308 	orr.w	r3, r3, #8
 8009e46:	6023      	str	r3, [r4, #0]
 8009e48:	6823      	ldr	r3, [r4, #0]
 8009e4a:	6a2a      	ldr	r2, [r5, #32]
 8009e4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e50:	4313      	orrs	r3, r2
 8009e52:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009e54:	6863      	ldr	r3, [r4, #4]
 8009e56:	69ea      	ldr	r2, [r5, #28]
 8009e58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009e60:	6063      	str	r3, [r4, #4]
 8009e62:	e7b5      	b.n	8009dd0 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009e64:	f7ff f800 	bl	8008e68 <HAL_GetTick>
 8009e68:	eba0 0008 	sub.w	r0, r0, r8
 8009e6c:	2802      	cmp	r0, #2
 8009e6e:	d9e4      	bls.n	8009e3a <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8009e70:	2003      	movs	r0, #3
 8009e72:	e762      	b.n	8009d3a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8009e74:	6823      	ldr	r3, [r4, #0]
 8009e76:	f023 0301 	bic.w	r3, r3, #1
 8009e7a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009e7c:	f7fe fff4 	bl	8008e68 <HAL_GetTick>
 8009e80:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009e82:	6823      	ldr	r3, [r4, #0]
 8009e84:	0798      	lsls	r0, r3, #30
 8009e86:	d5a3      	bpl.n	8009dd0 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009e88:	f7fe ffee 	bl	8008e68 <HAL_GetTick>
 8009e8c:	eba0 0008 	sub.w	r0, r0, r8
 8009e90:	2802      	cmp	r0, #2
 8009e92:	d9f6      	bls.n	8009e82 <HAL_RCC_OscConfig+0x152>
 8009e94:	e7ec      	b.n	8009e70 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009e96:	2e08      	cmp	r6, #8
 8009e98:	d003      	beq.n	8009ea2 <HAL_RCC_OscConfig+0x172>
 8009e9a:	2e0c      	cmp	r6, #12
 8009e9c:	d108      	bne.n	8009eb0 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009e9e:	2f03      	cmp	r7, #3
 8009ea0:	d106      	bne.n	8009eb0 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ea2:	6823      	ldr	r3, [r4, #0]
 8009ea4:	039b      	lsls	r3, r3, #14
 8009ea6:	d596      	bpl.n	8009dd6 <HAL_RCC_OscConfig+0xa6>
 8009ea8:	686b      	ldr	r3, [r5, #4]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d193      	bne.n	8009dd6 <HAL_RCC_OscConfig+0xa6>
 8009eae:	e743      	b.n	8009d38 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009eb0:	686b      	ldr	r3, [r5, #4]
 8009eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009eb6:	d110      	bne.n	8009eda <HAL_RCC_OscConfig+0x1aa>
 8009eb8:	6823      	ldr	r3, [r4, #0]
 8009eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ebe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009ec0:	f7fe ffd2 	bl	8008e68 <HAL_GetTick>
 8009ec4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009ec6:	6823      	ldr	r3, [r4, #0]
 8009ec8:	0398      	lsls	r0, r3, #14
 8009eca:	d484      	bmi.n	8009dd6 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ecc:	f7fe ffcc 	bl	8008e68 <HAL_GetTick>
 8009ed0:	eba0 0008 	sub.w	r0, r0, r8
 8009ed4:	2864      	cmp	r0, #100	; 0x64
 8009ed6:	d9f6      	bls.n	8009ec6 <HAL_RCC_OscConfig+0x196>
 8009ed8:	e7ca      	b.n	8009e70 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009eda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ede:	d104      	bne.n	8009eea <HAL_RCC_OscConfig+0x1ba>
 8009ee0:	6823      	ldr	r3, [r4, #0]
 8009ee2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ee6:	6023      	str	r3, [r4, #0]
 8009ee8:	e7e6      	b.n	8009eb8 <HAL_RCC_OscConfig+0x188>
 8009eea:	6822      	ldr	r2, [r4, #0]
 8009eec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009ef0:	6022      	str	r2, [r4, #0]
 8009ef2:	6822      	ldr	r2, [r4, #0]
 8009ef4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009ef8:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d1e0      	bne.n	8009ec0 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8009efe:	f7fe ffb3 	bl	8008e68 <HAL_GetTick>
 8009f02:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009f04:	6823      	ldr	r3, [r4, #0]
 8009f06:	0399      	lsls	r1, r3, #14
 8009f08:	f57f af65 	bpl.w	8009dd6 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009f0c:	f7fe ffac 	bl	8008e68 <HAL_GetTick>
 8009f10:	eba0 0008 	sub.w	r0, r0, r8
 8009f14:	2864      	cmp	r0, #100	; 0x64
 8009f16:	d9f5      	bls.n	8009f04 <HAL_RCC_OscConfig+0x1d4>
 8009f18:	e7aa      	b.n	8009e70 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009f1a:	2e04      	cmp	r6, #4
 8009f1c:	d003      	beq.n	8009f26 <HAL_RCC_OscConfig+0x1f6>
 8009f1e:	2e0c      	cmp	r6, #12
 8009f20:	d110      	bne.n	8009f44 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009f22:	2f02      	cmp	r7, #2
 8009f24:	d10e      	bne.n	8009f44 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f26:	6823      	ldr	r3, [r4, #0]
 8009f28:	055a      	lsls	r2, r3, #21
 8009f2a:	d503      	bpl.n	8009f34 <HAL_RCC_OscConfig+0x204>
 8009f2c:	68eb      	ldr	r3, [r5, #12]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f43f af02 	beq.w	8009d38 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f34:	6863      	ldr	r3, [r4, #4]
 8009f36:	692a      	ldr	r2, [r5, #16]
 8009f38:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8009f3c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009f40:	6063      	str	r3, [r4, #4]
 8009f42:	e74c      	b.n	8009dde <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009f44:	68eb      	ldr	r3, [r5, #12]
 8009f46:	b17b      	cbz	r3, 8009f68 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8009f48:	6823      	ldr	r3, [r4, #0]
 8009f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f4e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009f50:	f7fe ff8a 	bl	8008e68 <HAL_GetTick>
 8009f54:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009f56:	6823      	ldr	r3, [r4, #0]
 8009f58:	055b      	lsls	r3, r3, #21
 8009f5a:	d4eb      	bmi.n	8009f34 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f5c:	f7fe ff84 	bl	8008e68 <HAL_GetTick>
 8009f60:	1bc0      	subs	r0, r0, r7
 8009f62:	2802      	cmp	r0, #2
 8009f64:	d9f7      	bls.n	8009f56 <HAL_RCC_OscConfig+0x226>
 8009f66:	e783      	b.n	8009e70 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8009f68:	6823      	ldr	r3, [r4, #0]
 8009f6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f6e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009f70:	f7fe ff7a 	bl	8008e68 <HAL_GetTick>
 8009f74:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009f76:	6823      	ldr	r3, [r4, #0]
 8009f78:	0558      	lsls	r0, r3, #21
 8009f7a:	f57f af30 	bpl.w	8009dde <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f7e:	f7fe ff73 	bl	8008e68 <HAL_GetTick>
 8009f82:	1bc0      	subs	r0, r0, r7
 8009f84:	2802      	cmp	r0, #2
 8009f86:	d9f6      	bls.n	8009f76 <HAL_RCC_OscConfig+0x246>
 8009f88:	e772      	b.n	8009e70 <HAL_RCC_OscConfig+0x140>
 8009f8a:	bf00      	nop
 8009f8c:	40021000 	.word	0x40021000
 8009f90:	08013ed3 	.word	0x08013ed3
 8009f94:	20000008 	.word	0x20000008
 8009f98:	20000030 	.word	0x20000030
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009f9c:	696b      	ldr	r3, [r5, #20]
 8009f9e:	b19b      	cbz	r3, 8009fc8 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8009fa0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009fa4:	f043 0301 	orr.w	r3, r3, #1
 8009fa8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8009fac:	f7fe ff5c 	bl	8008e68 <HAL_GetTick>
 8009fb0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009fb2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009fb6:	079b      	lsls	r3, r3, #30
 8009fb8:	f53f af15 	bmi.w	8009de6 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009fbc:	f7fe ff54 	bl	8008e68 <HAL_GetTick>
 8009fc0:	1bc0      	subs	r0, r0, r7
 8009fc2:	2802      	cmp	r0, #2
 8009fc4:	d9f5      	bls.n	8009fb2 <HAL_RCC_OscConfig+0x282>
 8009fc6:	e753      	b.n	8009e70 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8009fc8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009fcc:	f023 0301 	bic.w	r3, r3, #1
 8009fd0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8009fd4:	f7fe ff48 	bl	8008e68 <HAL_GetTick>
 8009fd8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009fda:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009fde:	0798      	lsls	r0, r3, #30
 8009fe0:	f57f af01 	bpl.w	8009de6 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009fe4:	f7fe ff40 	bl	8008e68 <HAL_GetTick>
 8009fe8:	1bc0      	subs	r0, r0, r7
 8009fea:	2802      	cmp	r0, #2
 8009fec:	d9f5      	bls.n	8009fda <HAL_RCC_OscConfig+0x2aa>
 8009fee:	e73f      	b.n	8009e70 <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009ff0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ff2:	00d9      	lsls	r1, r3, #3
 8009ff4:	d429      	bmi.n	800a04a <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ff6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ffc:	65a3      	str	r3, [r4, #88]	; 0x58
 8009ffe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a004:	9301      	str	r3, [sp, #4]
 800a006:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800a008:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a00c:	4f89      	ldr	r7, [pc, #548]	; (800a234 <HAL_RCC_OscConfig+0x504>)
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	05da      	lsls	r2, r3, #23
 800a012:	d51d      	bpl.n	800a050 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a014:	68ab      	ldr	r3, [r5, #8]
 800a016:	2b01      	cmp	r3, #1
 800a018:	d12b      	bne.n	800a072 <HAL_RCC_OscConfig+0x342>
 800a01a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a01e:	f043 0301 	orr.w	r3, r3, #1
 800a022:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 800a026:	f7fe ff1f 	bl	8008e68 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a02a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800a02e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a030:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a034:	0798      	lsls	r0, r3, #30
 800a036:	d542      	bpl.n	800a0be <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 800a038:	f1b8 0f00 	cmp.w	r8, #0
 800a03c:	f43f aed7 	beq.w	8009dee <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a040:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a042:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a046:	65a3      	str	r3, [r4, #88]	; 0x58
 800a048:	e6d1      	b.n	8009dee <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 800a04a:	f04f 0800 	mov.w	r8, #0
 800a04e:	e7dd      	b.n	800a00c <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a056:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800a058:	f7fe ff06 	bl	8008e68 <HAL_GetTick>
 800a05c:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	05db      	lsls	r3, r3, #23
 800a062:	d4d7      	bmi.n	800a014 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a064:	f7fe ff00 	bl	8008e68 <HAL_GetTick>
 800a068:	eba0 0009 	sub.w	r0, r0, r9
 800a06c:	2802      	cmp	r0, #2
 800a06e:	d9f6      	bls.n	800a05e <HAL_RCC_OscConfig+0x32e>
 800a070:	e6fe      	b.n	8009e70 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a072:	2b05      	cmp	r3, #5
 800a074:	d106      	bne.n	800a084 <HAL_RCC_OscConfig+0x354>
 800a076:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a07a:	f043 0304 	orr.w	r3, r3, #4
 800a07e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800a082:	e7ca      	b.n	800a01a <HAL_RCC_OscConfig+0x2ea>
 800a084:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800a088:	f022 0201 	bic.w	r2, r2, #1
 800a08c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800a090:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800a094:	f022 0204 	bic.w	r2, r2, #4
 800a098:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d1c2      	bne.n	800a026 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 800a0a0:	f7fe fee2 	bl	8008e68 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0a4:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800a0a8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a0aa:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a0ae:	0799      	lsls	r1, r3, #30
 800a0b0:	d5c2      	bpl.n	800a038 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0b2:	f7fe fed9 	bl	8008e68 <HAL_GetTick>
 800a0b6:	1bc0      	subs	r0, r0, r7
 800a0b8:	4548      	cmp	r0, r9
 800a0ba:	d9f6      	bls.n	800a0aa <HAL_RCC_OscConfig+0x37a>
 800a0bc:	e6d8      	b.n	8009e70 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0be:	f7fe fed3 	bl	8008e68 <HAL_GetTick>
 800a0c2:	1bc0      	subs	r0, r0, r7
 800a0c4:	4548      	cmp	r0, r9
 800a0c6:	d9b3      	bls.n	800a030 <HAL_RCC_OscConfig+0x300>
 800a0c8:	e6d2      	b.n	8009e70 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a0ca:	2b02      	cmp	r3, #2
 800a0cc:	f040 808f 	bne.w	800a1ee <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 800a0d0:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a0d2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800a0d4:	f003 0103 	and.w	r1, r3, #3
 800a0d8:	4291      	cmp	r1, r2
 800a0da:	d124      	bne.n	800a126 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a0dc:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800a0de:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a0e2:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a0e4:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800a0e8:	d11d      	bne.n	800a126 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a0ea:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800a0ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a0f0:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800a0f4:	d117      	bne.n	800a126 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800a0f6:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800a0f8:	3a07      	subs	r2, #7
 800a0fa:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 800a0fe:	bf18      	it	ne
 800a100:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a102:	4291      	cmp	r1, r2
 800a104:	d10f      	bne.n	800a126 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a106:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800a108:	0852      	lsrs	r2, r2, #1
 800a10a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800a10e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800a110:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800a114:	d107      	bne.n	800a126 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a116:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800a118:	0852      	lsrs	r2, r2, #1
 800a11a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800a11e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a120:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800a124:	d04a      	beq.n	800a1bc <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a126:	2e0c      	cmp	r6, #12
 800a128:	f43f ae06 	beq.w	8009d38 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a12c:	6823      	ldr	r3, [r4, #0]
 800a12e:	015a      	lsls	r2, r3, #5
 800a130:	f53f ae02 	bmi.w	8009d38 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800a134:	6823      	ldr	r3, [r4, #0]
 800a136:	00db      	lsls	r3, r3, #3
 800a138:	f53f adfe 	bmi.w	8009d38 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 800a13c:	6823      	ldr	r3, [r4, #0]
 800a13e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a142:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 800a144:	f7fe fe90 	bl	8008e68 <HAL_GetTick>
 800a148:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a14a:	6823      	ldr	r3, [r4, #0]
 800a14c:	019f      	lsls	r7, r3, #6
 800a14e:	d42f      	bmi.n	800a1b0 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a150:	68e2      	ldr	r2, [r4, #12]
 800a152:	4b39      	ldr	r3, [pc, #228]	; (800a238 <HAL_RCC_OscConfig+0x508>)
 800a154:	4013      	ands	r3, r2
 800a156:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800a158:	4313      	orrs	r3, r2
 800a15a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800a15c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a160:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800a162:	3a01      	subs	r2, #1
 800a164:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800a168:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800a16a:	0912      	lsrs	r2, r2, #4
 800a16c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800a170:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800a172:	0852      	lsrs	r2, r2, #1
 800a174:	3a01      	subs	r2, #1
 800a176:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800a17a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800a17c:	0852      	lsrs	r2, r2, #1
 800a17e:	3a01      	subs	r2, #1
 800a180:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800a184:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 800a186:	6823      	ldr	r3, [r4, #0]
 800a188:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a18c:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a18e:	68e3      	ldr	r3, [r4, #12]
 800a190:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a194:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 800a196:	f7fe fe67 	bl	8008e68 <HAL_GetTick>
 800a19a:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a19c:	6823      	ldr	r3, [r4, #0]
 800a19e:	0198      	lsls	r0, r3, #6
 800a1a0:	f53f ae29 	bmi.w	8009df6 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1a4:	f7fe fe60 	bl	8008e68 <HAL_GetTick>
 800a1a8:	1b40      	subs	r0, r0, r5
 800a1aa:	2802      	cmp	r0, #2
 800a1ac:	d9f6      	bls.n	800a19c <HAL_RCC_OscConfig+0x46c>
 800a1ae:	e65f      	b.n	8009e70 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1b0:	f7fe fe5a 	bl	8008e68 <HAL_GetTick>
 800a1b4:	1b80      	subs	r0, r0, r6
 800a1b6:	2802      	cmp	r0, #2
 800a1b8:	d9c7      	bls.n	800a14a <HAL_RCC_OscConfig+0x41a>
 800a1ba:	e659      	b.n	8009e70 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a1bc:	6823      	ldr	r3, [r4, #0]
 800a1be:	0199      	lsls	r1, r3, #6
 800a1c0:	f53f ae19 	bmi.w	8009df6 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 800a1c4:	6823      	ldr	r3, [r4, #0]
 800a1c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a1ca:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a1cc:	68e3      	ldr	r3, [r4, #12]
 800a1ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a1d2:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 800a1d4:	f7fe fe48 	bl	8008e68 <HAL_GetTick>
 800a1d8:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a1da:	6823      	ldr	r3, [r4, #0]
 800a1dc:	019a      	lsls	r2, r3, #6
 800a1de:	f53f ae0a 	bmi.w	8009df6 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1e2:	f7fe fe41 	bl	8008e68 <HAL_GetTick>
 800a1e6:	1b40      	subs	r0, r0, r5
 800a1e8:	2802      	cmp	r0, #2
 800a1ea:	d9f6      	bls.n	800a1da <HAL_RCC_OscConfig+0x4aa>
 800a1ec:	e640      	b.n	8009e70 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a1ee:	2e0c      	cmp	r6, #12
 800a1f0:	f43f ada2 	beq.w	8009d38 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 800a1f4:	6823      	ldr	r3, [r4, #0]
 800a1f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a1fa:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800a1fc:	6823      	ldr	r3, [r4, #0]
 800a1fe:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800a202:	bf02      	ittt	eq
 800a204:	68e3      	ldreq	r3, [r4, #12]
 800a206:	f023 0303 	biceq.w	r3, r3, #3
 800a20a:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800a20c:	68e3      	ldr	r3, [r4, #12]
 800a20e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800a212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a216:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800a218:	f7fe fe26 	bl	8008e68 <HAL_GetTick>
 800a21c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a21e:	6823      	ldr	r3, [r4, #0]
 800a220:	019b      	lsls	r3, r3, #6
 800a222:	f57f ade8 	bpl.w	8009df6 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a226:	f7fe fe1f 	bl	8008e68 <HAL_GetTick>
 800a22a:	1b40      	subs	r0, r0, r5
 800a22c:	2802      	cmp	r0, #2
 800a22e:	d9f6      	bls.n	800a21e <HAL_RCC_OscConfig+0x4ee>
 800a230:	e61e      	b.n	8009e70 <HAL_RCC_OscConfig+0x140>
 800a232:	bf00      	nop
 800a234:	40007000 	.word	0x40007000
 800a238:	f99d808c 	.word	0xf99d808c

0800a23c <HAL_RCC_ClockConfig>:
{
 800a23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a240:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800a242:	4604      	mov	r4, r0
 800a244:	b910      	cbnz	r0, 800a24c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800a246:	2001      	movs	r0, #1
}
 800a248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a24c:	4a40      	ldr	r2, [pc, #256]	; (800a350 <HAL_RCC_ClockConfig+0x114>)
 800a24e:	6813      	ldr	r3, [r2, #0]
 800a250:	f003 0307 	and.w	r3, r3, #7
 800a254:	428b      	cmp	r3, r1
 800a256:	d32a      	bcc.n	800a2ae <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a258:	6823      	ldr	r3, [r4, #0]
 800a25a:	07d9      	lsls	r1, r3, #31
 800a25c:	d432      	bmi.n	800a2c4 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a25e:	6821      	ldr	r1, [r4, #0]
 800a260:	078a      	lsls	r2, r1, #30
 800a262:	d45b      	bmi.n	800a31c <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a264:	4a3a      	ldr	r2, [pc, #232]	; (800a350 <HAL_RCC_ClockConfig+0x114>)
 800a266:	6813      	ldr	r3, [r2, #0]
 800a268:	f003 0307 	and.w	r3, r3, #7
 800a26c:	42ab      	cmp	r3, r5
 800a26e:	d85d      	bhi.n	800a32c <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a270:	f011 0f04 	tst.w	r1, #4
 800a274:	4d37      	ldr	r5, [pc, #220]	; (800a354 <HAL_RCC_ClockConfig+0x118>)
 800a276:	d164      	bne.n	800a342 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a278:	070b      	lsls	r3, r1, #28
 800a27a:	d506      	bpl.n	800a28a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a27c:	68ab      	ldr	r3, [r5, #8]
 800a27e:	6922      	ldr	r2, [r4, #16]
 800a280:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800a284:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a288:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a28a:	f7ff fd03 	bl	8009c94 <HAL_RCC_GetSysClockFreq>
 800a28e:	68ab      	ldr	r3, [r5, #8]
 800a290:	4a31      	ldr	r2, [pc, #196]	; (800a358 <HAL_RCC_ClockConfig+0x11c>)
 800a292:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800a296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a29a:	5cd3      	ldrb	r3, [r2, r3]
 800a29c:	f003 031f 	and.w	r3, r3, #31
 800a2a0:	40d8      	lsrs	r0, r3
 800a2a2:	4b2e      	ldr	r3, [pc, #184]	; (800a35c <HAL_RCC_ClockConfig+0x120>)
 800a2a4:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800a2a6:	4b2e      	ldr	r3, [pc, #184]	; (800a360 <HAL_RCC_ClockConfig+0x124>)
 800a2a8:	6818      	ldr	r0, [r3, #0]
 800a2aa:	f7fe bd9b 	b.w	8008de4 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2ae:	6813      	ldr	r3, [r2, #0]
 800a2b0:	f023 0307 	bic.w	r3, r3, #7
 800a2b4:	430b      	orrs	r3, r1
 800a2b6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2b8:	6813      	ldr	r3, [r2, #0]
 800a2ba:	f003 0307 	and.w	r3, r3, #7
 800a2be:	428b      	cmp	r3, r1
 800a2c0:	d1c1      	bne.n	800a246 <HAL_RCC_ClockConfig+0xa>
 800a2c2:	e7c9      	b.n	800a258 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a2c4:	6862      	ldr	r2, [r4, #4]
 800a2c6:	4e23      	ldr	r6, [pc, #140]	; (800a354 <HAL_RCC_ClockConfig+0x118>)
 800a2c8:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a2ca:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a2cc:	d11a      	bne.n	800a304 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a2ce:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a2d2:	d0b8      	beq.n	800a246 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a2d4:	68b3      	ldr	r3, [r6, #8]
 800a2d6:	f023 0303 	bic.w	r3, r3, #3
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800a2de:	f7fe fdc3 	bl	8008e68 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a2e2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800a2e6:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a2e8:	68b3      	ldr	r3, [r6, #8]
 800a2ea:	6862      	ldr	r2, [r4, #4]
 800a2ec:	f003 030c 	and.w	r3, r3, #12
 800a2f0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800a2f4:	d0b3      	beq.n	800a25e <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a2f6:	f7fe fdb7 	bl	8008e68 <HAL_GetTick>
 800a2fa:	1bc0      	subs	r0, r0, r7
 800a2fc:	4540      	cmp	r0, r8
 800a2fe:	d9f3      	bls.n	800a2e8 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 800a300:	2003      	movs	r0, #3
 800a302:	e7a1      	b.n	800a248 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a304:	2a02      	cmp	r2, #2
 800a306:	d102      	bne.n	800a30e <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a308:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800a30c:	e7e1      	b.n	800a2d2 <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a30e:	b912      	cbnz	r2, 800a316 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a310:	f013 0f02 	tst.w	r3, #2
 800a314:	e7dd      	b.n	800a2d2 <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a316:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a31a:	e7da      	b.n	800a2d2 <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a31c:	4a0d      	ldr	r2, [pc, #52]	; (800a354 <HAL_RCC_ClockConfig+0x118>)
 800a31e:	68a0      	ldr	r0, [r4, #8]
 800a320:	6893      	ldr	r3, [r2, #8]
 800a322:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a326:	4303      	orrs	r3, r0
 800a328:	6093      	str	r3, [r2, #8]
 800a32a:	e79b      	b.n	800a264 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a32c:	6813      	ldr	r3, [r2, #0]
 800a32e:	f023 0307 	bic.w	r3, r3, #7
 800a332:	432b      	orrs	r3, r5
 800a334:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a336:	6813      	ldr	r3, [r2, #0]
 800a338:	f003 0307 	and.w	r3, r3, #7
 800a33c:	42ab      	cmp	r3, r5
 800a33e:	d182      	bne.n	800a246 <HAL_RCC_ClockConfig+0xa>
 800a340:	e796      	b.n	800a270 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a342:	68ab      	ldr	r3, [r5, #8]
 800a344:	68e2      	ldr	r2, [r4, #12]
 800a346:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a34a:	4313      	orrs	r3, r2
 800a34c:	60ab      	str	r3, [r5, #8]
 800a34e:	e793      	b.n	800a278 <HAL_RCC_ClockConfig+0x3c>
 800a350:	40022000 	.word	0x40022000
 800a354:	40021000 	.word	0x40021000
 800a358:	08013ed3 	.word	0x08013ed3
 800a35c:	20000008 	.word	0x20000008
 800a360:	20000030 	.word	0x20000030

0800a364 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a364:	4b05      	ldr	r3, [pc, #20]	; (800a37c <HAL_RCC_GetPCLK1Freq+0x18>)
 800a366:	4a06      	ldr	r2, [pc, #24]	; (800a380 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800a36e:	5cd3      	ldrb	r3, [r2, r3]
 800a370:	4a04      	ldr	r2, [pc, #16]	; (800a384 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a372:	6810      	ldr	r0, [r2, #0]
 800a374:	f003 031f 	and.w	r3, r3, #31
}
 800a378:	40d8      	lsrs	r0, r3
 800a37a:	4770      	bx	lr
 800a37c:	40021000 	.word	0x40021000
 800a380:	08013ee3 	.word	0x08013ee3
 800a384:	20000008 	.word	0x20000008

0800a388 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a388:	4b05      	ldr	r3, [pc, #20]	; (800a3a0 <HAL_RCC_GetPCLK2Freq+0x18>)
 800a38a:	4a06      	ldr	r2, [pc, #24]	; (800a3a4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800a392:	5cd3      	ldrb	r3, [r2, r3]
 800a394:	4a04      	ldr	r2, [pc, #16]	; (800a3a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a396:	6810      	ldr	r0, [r2, #0]
 800a398:	f003 031f 	and.w	r3, r3, #31
}
 800a39c:	40d8      	lsrs	r0, r3
 800a39e:	4770      	bx	lr
 800a3a0:	40021000 	.word	0x40021000
 800a3a4:	08013ee3 	.word	0x08013ee3
 800a3a8:	20000008 	.word	0x20000008

0800a3ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a3ae:	4c43      	ldr	r4, [pc, #268]	; (800a4bc <RCCEx_PLLSAI1_Config+0x110>)
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a3b0:	6803      	ldr	r3, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a3b2:	68e2      	ldr	r2, [r4, #12]
{
 800a3b4:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a3b6:	0790      	lsls	r0, r2, #30
{
 800a3b8:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a3ba:	d029      	beq.n	800a410 <RCCEx_PLLSAI1_Config+0x64>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a3bc:	68e2      	ldr	r2, [r4, #12]
 800a3be:	f002 0203 	and.w	r2, r2, #3
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d178      	bne.n	800a4b8 <RCCEx_PLLSAI1_Config+0x10c>
       ||
 800a3c6:	2a00      	cmp	r2, #0
 800a3c8:	d076      	beq.n	800a4b8 <RCCEx_PLLSAI1_Config+0x10c>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a3ca:	68e3      	ldr	r3, [r4, #12]
       ||
 800a3cc:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a3ce:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a3d2:	3301      	adds	r3, #1
       ||
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d16f      	bne.n	800a4b8 <RCCEx_PLLSAI1_Config+0x10c>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a3d8:	6823      	ldr	r3, [r4, #0]
 800a3da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a3de:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3e0:	f7fe fd42 	bl	8008e68 <HAL_GetTick>
 800a3e4:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a3e6:	6823      	ldr	r3, [r4, #0]
 800a3e8:	011a      	lsls	r2, r3, #4
 800a3ea:	d430      	bmi.n	800a44e <RCCEx_PLLSAI1_Config+0xa2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a3ec:	68ab      	ldr	r3, [r5, #8]
 800a3ee:	021f      	lsls	r7, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 800a3f0:	b3a6      	cbz	r6, 800a45c <RCCEx_PLLSAI1_Config+0xb0>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a3f2:	2e01      	cmp	r6, #1
 800a3f4:	d14d      	bne.n	800a492 <RCCEx_PLLSAI1_Config+0xe6>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a3f6:	692a      	ldr	r2, [r5, #16]
 800a3f8:	6921      	ldr	r1, [r4, #16]
 800a3fa:	0852      	lsrs	r2, r2, #1
 800a3fc:	1e53      	subs	r3, r2, #1
 800a3fe:	f421 02c0 	bic.w	r2, r1, #6291456	; 0x600000
 800a402:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800a406:	433a      	orrs	r2, r7
 800a408:	ea42 5243 	orr.w	r2, r2, r3, lsl #21
 800a40c:	6122      	str	r2, [r4, #16]
 800a40e:	e030      	b.n	800a472 <RCCEx_PLLSAI1_Config+0xc6>
    switch(PllSai1->PLLSAI1Source)
 800a410:	2b02      	cmp	r3, #2
 800a412:	d011      	beq.n	800a438 <RCCEx_PLLSAI1_Config+0x8c>
 800a414:	2b03      	cmp	r3, #3
 800a416:	d013      	beq.n	800a440 <RCCEx_PLLSAI1_Config+0x94>
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d14d      	bne.n	800a4b8 <RCCEx_PLLSAI1_Config+0x10c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a41c:	6822      	ldr	r2, [r4, #0]
 800a41e:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a422:	d049      	beq.n	800a4b8 <RCCEx_PLLSAI1_Config+0x10c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a424:	68e0      	ldr	r0, [r4, #12]
 800a426:	686a      	ldr	r2, [r5, #4]
 800a428:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 800a42c:	3a01      	subs	r2, #1
 800a42e:	4318      	orrs	r0, r3
 800a430:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a434:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 800a436:	e7cf      	b.n	800a3d8 <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a438:	6822      	ldr	r2, [r4, #0]
 800a43a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800a43e:	e7f0      	b.n	800a422 <RCCEx_PLLSAI1_Config+0x76>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a440:	6822      	ldr	r2, [r4, #0]
 800a442:	0391      	lsls	r1, r2, #14
 800a444:	d4ee      	bmi.n	800a424 <RCCEx_PLLSAI1_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a446:	6822      	ldr	r2, [r4, #0]
 800a448:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800a44c:	e7e9      	b.n	800a422 <RCCEx_PLLSAI1_Config+0x76>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a44e:	f7fe fd0b 	bl	8008e68 <HAL_GetTick>
 800a452:	1bc0      	subs	r0, r0, r7
 800a454:	2802      	cmp	r0, #2
 800a456:	d9c6      	bls.n	800a3e6 <RCCEx_PLLSAI1_Config+0x3a>
        status = HAL_TIMEOUT;
 800a458:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 800a45a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a45c:	6921      	ldr	r1, [r4, #16]
 800a45e:	68eb      	ldr	r3, [r5, #12]
 800a460:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 800a464:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800a468:	091b      	lsrs	r3, r3, #4
 800a46a:	4339      	orrs	r1, r7
 800a46c:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 800a470:	6121      	str	r1, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800a472:	6823      	ldr	r3, [r4, #0]
 800a474:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a478:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800a47a:	f7fe fcf5 	bl	8008e68 <HAL_GetTick>
 800a47e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a480:	6823      	ldr	r3, [r4, #0]
 800a482:	011b      	lsls	r3, r3, #4
 800a484:	d512      	bpl.n	800a4ac <RCCEx_PLLSAI1_Config+0x100>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a486:	6923      	ldr	r3, [r4, #16]
 800a488:	69aa      	ldr	r2, [r5, #24]
 800a48a:	4313      	orrs	r3, r2
 800a48c:	6123      	str	r3, [r4, #16]
 800a48e:	2000      	movs	r0, #0
  return status;
 800a490:	e7e3      	b.n	800a45a <RCCEx_PLLSAI1_Config+0xae>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a492:	696b      	ldr	r3, [r5, #20]
 800a494:	6922      	ldr	r2, [r4, #16]
 800a496:	085b      	lsrs	r3, r3, #1
 800a498:	1e59      	subs	r1, r3, #1
 800a49a:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 800a49e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a4a2:	433b      	orrs	r3, r7
 800a4a4:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800a4a8:	6123      	str	r3, [r4, #16]
 800a4aa:	e7e2      	b.n	800a472 <RCCEx_PLLSAI1_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a4ac:	f7fe fcdc 	bl	8008e68 <HAL_GetTick>
 800a4b0:	1b80      	subs	r0, r0, r6
 800a4b2:	2802      	cmp	r0, #2
 800a4b4:	d9e4      	bls.n	800a480 <RCCEx_PLLSAI1_Config+0xd4>
 800a4b6:	e7cf      	b.n	800a458 <RCCEx_PLLSAI1_Config+0xac>
      status = HAL_ERROR;
 800a4b8:	2001      	movs	r0, #1
 800a4ba:	e7ce      	b.n	800a45a <RCCEx_PLLSAI1_Config+0xae>
 800a4bc:	40021000 	.word	0x40021000

0800a4c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a4c2:	4c3c      	ldr	r4, [pc, #240]	; (800a5b4 <RCCEx_PLLSAI2_Config+0xf4>)
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a4c4:	6803      	ldr	r3, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a4c6:	68e2      	ldr	r2, [r4, #12]
{
 800a4c8:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a4ca:	0790      	lsls	r0, r2, #30
{
 800a4cc:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a4ce:	d027      	beq.n	800a520 <RCCEx_PLLSAI2_Config+0x60>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a4d0:	68e2      	ldr	r2, [r4, #12]
 800a4d2:	f002 0203 	and.w	r2, r2, #3
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d169      	bne.n	800a5ae <RCCEx_PLLSAI2_Config+0xee>
       ||
 800a4da:	2a00      	cmp	r2, #0
 800a4dc:	d067      	beq.n	800a5ae <RCCEx_PLLSAI2_Config+0xee>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a4de:	68e3      	ldr	r3, [r4, #12]
       ||
 800a4e0:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a4e2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a4e6:	3301      	adds	r3, #1
       ||
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d160      	bne.n	800a5ae <RCCEx_PLLSAI2_Config+0xee>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a4ec:	6823      	ldr	r3, [r4, #0]
 800a4ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a4f2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4f4:	f7fe fcb8 	bl	8008e68 <HAL_GetTick>
 800a4f8:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a4fa:	6823      	ldr	r3, [r4, #0]
 800a4fc:	009a      	lsls	r2, r3, #2
 800a4fe:	d42e      	bmi.n	800a55e <RCCEx_PLLSAI2_Config+0x9e>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a500:	68ab      	ldr	r3, [r5, #8]
 800a502:	0218      	lsls	r0, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 800a504:	b396      	cbz	r6, 800a56c <RCCEx_PLLSAI2_Config+0xac>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a506:	6963      	ldr	r3, [r4, #20]
 800a508:	6929      	ldr	r1, [r5, #16]
 800a50a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a50e:	0849      	lsrs	r1, r1, #1
 800a510:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a514:	3901      	subs	r1, #1
 800a516:	4303      	orrs	r3, r0
 800a518:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800a51c:	6163      	str	r3, [r4, #20]
 800a51e:	e030      	b.n	800a582 <RCCEx_PLLSAI2_Config+0xc2>
    switch(PllSai2->PLLSAI2Source)
 800a520:	2b02      	cmp	r3, #2
 800a522:	d011      	beq.n	800a548 <RCCEx_PLLSAI2_Config+0x88>
 800a524:	2b03      	cmp	r3, #3
 800a526:	d013      	beq.n	800a550 <RCCEx_PLLSAI2_Config+0x90>
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d140      	bne.n	800a5ae <RCCEx_PLLSAI2_Config+0xee>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a52c:	6822      	ldr	r2, [r4, #0]
 800a52e:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a532:	d03c      	beq.n	800a5ae <RCCEx_PLLSAI2_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a534:	68e0      	ldr	r0, [r4, #12]
 800a536:	686a      	ldr	r2, [r5, #4]
 800a538:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 800a53c:	3a01      	subs	r2, #1
 800a53e:	4318      	orrs	r0, r3
 800a540:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a544:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 800a546:	e7d1      	b.n	800a4ec <RCCEx_PLLSAI2_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a548:	6822      	ldr	r2, [r4, #0]
 800a54a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800a54e:	e7f0      	b.n	800a532 <RCCEx_PLLSAI2_Config+0x72>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a550:	6822      	ldr	r2, [r4, #0]
 800a552:	0391      	lsls	r1, r2, #14
 800a554:	d4ee      	bmi.n	800a534 <RCCEx_PLLSAI2_Config+0x74>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a556:	6822      	ldr	r2, [r4, #0]
 800a558:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800a55c:	e7e9      	b.n	800a532 <RCCEx_PLLSAI2_Config+0x72>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a55e:	f7fe fc83 	bl	8008e68 <HAL_GetTick>
 800a562:	1bc0      	subs	r0, r0, r7
 800a564:	2802      	cmp	r0, #2
 800a566:	d9c8      	bls.n	800a4fa <RCCEx_PLLSAI2_Config+0x3a>
        status = HAL_TIMEOUT;
 800a568:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 800a56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a56c:	6962      	ldr	r2, [r4, #20]
 800a56e:	68eb      	ldr	r3, [r5, #12]
 800a570:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 800a574:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a578:	091b      	lsrs	r3, r3, #4
 800a57a:	4302      	orrs	r2, r0
 800a57c:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 800a580:	6162      	str	r2, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800a582:	6823      	ldr	r3, [r4, #0]
 800a584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a588:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800a58a:	f7fe fc6d 	bl	8008e68 <HAL_GetTick>
 800a58e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a590:	6823      	ldr	r3, [r4, #0]
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	d505      	bpl.n	800a5a2 <RCCEx_PLLSAI2_Config+0xe2>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a596:	6963      	ldr	r3, [r4, #20]
 800a598:	696a      	ldr	r2, [r5, #20]
 800a59a:	4313      	orrs	r3, r2
 800a59c:	6163      	str	r3, [r4, #20]
 800a59e:	2000      	movs	r0, #0
  return status;
 800a5a0:	e7e3      	b.n	800a56a <RCCEx_PLLSAI2_Config+0xaa>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a5a2:	f7fe fc61 	bl	8008e68 <HAL_GetTick>
 800a5a6:	1b80      	subs	r0, r0, r6
 800a5a8:	2802      	cmp	r0, #2
 800a5aa:	d9f1      	bls.n	800a590 <RCCEx_PLLSAI2_Config+0xd0>
 800a5ac:	e7dc      	b.n	800a568 <RCCEx_PLLSAI2_Config+0xa8>
      status = HAL_ERROR;
 800a5ae:	2001      	movs	r0, #1
 800a5b0:	e7db      	b.n	800a56a <RCCEx_PLLSAI2_Config+0xaa>
 800a5b2:	bf00      	nop
 800a5b4:	40021000 	.word	0x40021000

0800a5b8 <HAL_RCCEx_PeriphCLKConfig>:
{
 800a5b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a5bc:	6806      	ldr	r6, [r0, #0]
 800a5be:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 800a5c2:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a5c4:	d009      	beq.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 800a5c6:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800a5c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800a5cc:	d022      	beq.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800a5ce:	d813      	bhi.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800a5d0:	b331      	cbz	r1, 800a620 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800a5d2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800a5d6:	d02a      	beq.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a5d8:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a5da:	6823      	ldr	r3, [r4, #0]
 800a5dc:	04d8      	lsls	r0, r3, #19
 800a5de:	d509      	bpl.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai2ClockSelection)
 800a5e0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800a5e2:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800a5e6:	d02c      	beq.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800a5e8:	d826      	bhi.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x80>
 800a5ea:	b381      	cbz	r1, 800a64e <HAL_RCCEx_PeriphCLKConfig+0x96>
 800a5ec:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800a5f0:	d070      	beq.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800a5f2:	2601      	movs	r6, #1
 800a5f4:	4635      	mov	r5, r6
 800a5f6:	e039      	b.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch(PeriphClkInit->Sai1ClockSelection)
 800a5f8:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800a5fc:	d1ec      	bne.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a5fe:	4a3b      	ldr	r2, [pc, #236]	; (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a600:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a602:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a606:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800a60a:	430b      	orrs	r3, r1
 800a60c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800a610:	2600      	movs	r6, #0
 800a612:	e7e2      	b.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a614:	4a35      	ldr	r2, [pc, #212]	; (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a616:	68d3      	ldr	r3, [r2, #12]
 800a618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a61c:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 800a61e:	e7ee      	b.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a620:	3004      	adds	r0, #4
 800a622:	f7ff fec3 	bl	800a3ac <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a626:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800a628:	2800      	cmp	r0, #0
 800a62a:	d1d6      	bne.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x22>
 800a62c:	e7e7      	b.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a62e:	2100      	movs	r1, #0
 800a630:	3020      	adds	r0, #32
 800a632:	f7ff ff45 	bl	800a4c0 <RCCEx_PLLSAI2_Config>
 800a636:	e7f6      	b.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 800a638:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800a63c:	d1d9      	bne.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 800a63e:	4635      	mov	r5, r6
 800a640:	e009      	b.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a642:	4a2a      	ldr	r2, [pc, #168]	; (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a644:	68d3      	ldr	r3, [r2, #12]
 800a646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a64a:	60d3      	str	r3, [r2, #12]
      break;
 800a64c:	e7f7      	b.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a64e:	1d20      	adds	r0, r4, #4
 800a650:	f7ff feac 	bl	800a3ac <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a654:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a656:	2d00      	cmp	r5, #0
 800a658:	d142      	bne.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x128>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a65a:	4a24      	ldr	r2, [pc, #144]	; (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a65c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800a65e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a662:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800a666:	430b      	orrs	r3, r1
 800a668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a66c:	6823      	ldr	r3, [r4, #0]
 800a66e:	0399      	lsls	r1, r3, #14
 800a670:	f140 815e 	bpl.w	800a930 <HAL_RCCEx_PeriphCLKConfig+0x378>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a674:	4f1d      	ldr	r7, [pc, #116]	; (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a676:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a678:	00da      	lsls	r2, r3, #3
 800a67a:	d433      	bmi.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800a67c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a67e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a682:	65bb      	str	r3, [r7, #88]	; 0x58
 800a684:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a68a:	9301      	str	r3, [sp, #4]
 800a68c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800a68e:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a692:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
 800a696:	f8d9 3000 	ldr.w	r3, [r9]
 800a69a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a69e:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800a6a2:	f7fe fbe1 	bl	8008e68 <HAL_GetTick>
 800a6a6:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a6a8:	f8d9 3000 	ldr.w	r3, [r9]
 800a6ac:	05db      	lsls	r3, r3, #23
 800a6ae:	d521      	bpl.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    if(ret == HAL_OK)
 800a6b0:	bb3d      	cbnz	r5, 800a702 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a6b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a6b6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800a6ba:	f040 810f 	bne.w	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x324>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a6be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a6c2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800a6c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a6d0:	4635      	mov	r5, r6
 800a6d2:	e016      	b.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	f104 0020 	add.w	r0, r4, #32
 800a6da:	f7ff fef1 	bl	800a4c0 <RCCEx_PLLSAI2_Config>
 800a6de:	e7b9      	b.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800a6e0:	462e      	mov	r6, r5
 800a6e2:	e7c3      	b.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 800a6e4:	f04f 0800 	mov.w	r8, #0
 800a6e8:	e7d3      	b.n	800a692 <HAL_RCCEx_PeriphCLKConfig+0xda>
 800a6ea:	bf00      	nop
 800a6ec:	40021000 	.word	0x40021000
 800a6f0:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a6f4:	f7fe fbb8 	bl	8008e68 <HAL_GetTick>
 800a6f8:	eba0 000a 	sub.w	r0, r0, sl
 800a6fc:	2802      	cmp	r0, #2
 800a6fe:	d9d3      	bls.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 800a700:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800a702:	f1b8 0f00 	cmp.w	r8, #0
 800a706:	d003      	beq.n	800a710 <HAL_RCCEx_PeriphCLKConfig+0x158>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a708:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a70a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a70e:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a710:	6823      	ldr	r3, [r4, #0]
 800a712:	07da      	lsls	r2, r3, #31
 800a714:	d508      	bpl.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0x170>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a716:	499d      	ldr	r1, [pc, #628]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800a718:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a71a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a71e:	f022 0203 	bic.w	r2, r2, #3
 800a722:	4302      	orrs	r2, r0
 800a724:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a728:	079f      	lsls	r7, r3, #30
 800a72a:	d508      	bpl.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x186>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a72c:	4997      	ldr	r1, [pc, #604]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800a72e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a730:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a734:	f022 020c 	bic.w	r2, r2, #12
 800a738:	4302      	orrs	r2, r0
 800a73a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a73e:	075e      	lsls	r6, r3, #29
 800a740:	d508      	bpl.n	800a754 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a742:	4992      	ldr	r1, [pc, #584]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800a744:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a746:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a74a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800a74e:	4302      	orrs	r2, r0
 800a750:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a754:	0718      	lsls	r0, r3, #28
 800a756:	d508      	bpl.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a758:	498c      	ldr	r1, [pc, #560]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800a75a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800a75c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a760:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a764:	4302      	orrs	r2, r0
 800a766:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a76a:	06d9      	lsls	r1, r3, #27
 800a76c:	d508      	bpl.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a76e:	4987      	ldr	r1, [pc, #540]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800a770:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a772:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a776:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a77a:	4302      	orrs	r2, r0
 800a77c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a780:	069a      	lsls	r2, r3, #26
 800a782:	d508      	bpl.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a784:	4981      	ldr	r1, [pc, #516]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800a786:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800a788:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a78c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a790:	4302      	orrs	r2, r0
 800a792:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a796:	059f      	lsls	r7, r3, #22
 800a798:	d508      	bpl.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a79a:	497c      	ldr	r1, [pc, #496]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800a79c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800a79e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a7a2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800a7a6:	4302      	orrs	r2, r0
 800a7a8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a7ac:	055e      	lsls	r6, r3, #21
 800a7ae:	d508      	bpl.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a7b0:	4976      	ldr	r1, [pc, #472]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800a7b2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800a7b4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a7b8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800a7bc:	4302      	orrs	r2, r0
 800a7be:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a7c2:	0658      	lsls	r0, r3, #25
 800a7c4:	d508      	bpl.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a7c6:	4971      	ldr	r1, [pc, #452]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800a7c8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a7ca:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a7ce:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800a7d2:	4302      	orrs	r2, r0
 800a7d4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a7d8:	0619      	lsls	r1, r3, #24
 800a7da:	d508      	bpl.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a7dc:	496b      	ldr	r1, [pc, #428]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800a7de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a7e0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a7e4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a7e8:	4302      	orrs	r2, r0
 800a7ea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a7ee:	05da      	lsls	r2, r3, #23
 800a7f0:	d508      	bpl.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a7f2:	4966      	ldr	r1, [pc, #408]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800a7f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7f6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a7fa:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800a7fe:	4302      	orrs	r2, r0
 800a800:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a804:	049b      	lsls	r3, r3, #18
 800a806:	d510      	bpl.n	800a82a <HAL_RCCEx_PeriphCLKConfig+0x272>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a808:	4a60      	ldr	r2, [pc, #384]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800a80a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a80c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a810:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800a814:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a816:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a81a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a81e:	f040 8089 	bne.w	800a934 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a822:	68d3      	ldr	r3, [r2, #12]
 800a824:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a828:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a82a:	6823      	ldr	r3, [r4, #0]
 800a82c:	031f      	lsls	r7, r3, #12
 800a82e:	d510      	bpl.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a830:	4a56      	ldr	r2, [pc, #344]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800a832:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800a834:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a838:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800a83c:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a83e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a842:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a846:	f040 8081 	bne.w	800a94c <HAL_RCCEx_PeriphCLKConfig+0x394>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a84a:	68d3      	ldr	r3, [r2, #12]
 800a84c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a850:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a852:	6823      	ldr	r3, [r4, #0]
 800a854:	035e      	lsls	r6, r3, #13
 800a856:	d50f      	bpl.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a858:	4a4c      	ldr	r2, [pc, #304]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800a85a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800a85c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a860:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800a864:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a866:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a86a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a86e:	d179      	bne.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a870:	68d3      	ldr	r3, [r2, #12]
 800a872:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a876:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a878:	6823      	ldr	r3, [r4, #0]
 800a87a:	0458      	lsls	r0, r3, #17
 800a87c:	d512      	bpl.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a87e:	4943      	ldr	r1, [pc, #268]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800a880:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800a882:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800a886:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800a88a:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a88c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a894:	d171      	bne.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a896:	2102      	movs	r1, #2
 800a898:	1d20      	adds	r0, r4, #4
 800a89a:	f7ff fd87 	bl	800a3ac <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800a89e:	2800      	cmp	r0, #0
 800a8a0:	bf18      	it	ne
 800a8a2:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a8a4:	6822      	ldr	r2, [r4, #0]
 800a8a6:	0411      	lsls	r1, r2, #16
 800a8a8:	d508      	bpl.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0x304>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a8aa:	4938      	ldr	r1, [pc, #224]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800a8ac:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a8ae:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800a8b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a8b6:	4303      	orrs	r3, r0
 800a8b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a8bc:	03d3      	lsls	r3, r2, #15
 800a8be:	d509      	bpl.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a8c0:	4a32      	ldr	r2, [pc, #200]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800a8c2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800a8c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a8ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8ce:	430b      	orrs	r3, r1
 800a8d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800a8d4:	4628      	mov	r0, r5
 800a8d6:	b002      	add	sp, #8
 800a8d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a8dc:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	f43f aeec 	beq.w	800a6be <HAL_RCCEx_PeriphCLKConfig+0x106>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a8e6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800a8ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a8ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a8f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a8fa:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a8fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a902:	07d0      	lsls	r0, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a904:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800a908:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a90c:	f57f aed7 	bpl.w	800a6be <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 800a910:	f7fe faaa 	bl	8008e68 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a914:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800a918:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a91a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a91e:	0799      	lsls	r1, r3, #30
 800a920:	f53f aecd 	bmi.w	800a6be <HAL_RCCEx_PeriphCLKConfig+0x106>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a924:	f7fe faa0 	bl	8008e68 <HAL_GetTick>
 800a928:	1b40      	subs	r0, r0, r5
 800a92a:	4548      	cmp	r0, r9
 800a92c:	d9f5      	bls.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800a92e:	e6e7      	b.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800a930:	4635      	mov	r5, r6
 800a932:	e6ed      	b.n	800a710 <HAL_RCCEx_PeriphCLKConfig+0x158>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a934:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800a938:	f47f af77 	bne.w	800a82a <HAL_RCCEx_PeriphCLKConfig+0x272>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a93c:	2101      	movs	r1, #1
 800a93e:	1d20      	adds	r0, r4, #4
 800a940:	f7ff fd34 	bl	800a3ac <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800a944:	2800      	cmp	r0, #0
 800a946:	bf18      	it	ne
 800a948:	4605      	movne	r5, r0
 800a94a:	e76e      	b.n	800a82a <HAL_RCCEx_PeriphCLKConfig+0x272>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a94c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800a950:	f47f af7f 	bne.w	800a852 <HAL_RCCEx_PeriphCLKConfig+0x29a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a954:	2101      	movs	r1, #1
 800a956:	1d20      	adds	r0, r4, #4
 800a958:	f7ff fd28 	bl	800a3ac <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800a95c:	2800      	cmp	r0, #0
 800a95e:	bf18      	it	ne
 800a960:	4605      	movne	r5, r0
 800a962:	e776      	b.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a964:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800a968:	d186      	bne.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a96a:	2101      	movs	r1, #1
 800a96c:	1d20      	adds	r0, r4, #4
 800a96e:	f7ff fd1d 	bl	800a3ac <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800a972:	2800      	cmp	r0, #0
 800a974:	bf18      	it	ne
 800a976:	4605      	movne	r5, r0
 800a978:	e77e      	b.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800a97a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800a97e:	d191      	bne.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800a980:	2102      	movs	r1, #2
 800a982:	f104 0020 	add.w	r0, r4, #32
 800a986:	f7ff fd9b 	bl	800a4c0 <RCCEx_PLLSAI2_Config>
 800a98a:	e788      	b.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 800a98c:	40021000 	.word	0x40021000

0800a990 <HAL_RCCEx_GetPeriphCLKConfig>:
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1  | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART4  | RCC_PERIPHCLK_UART5  | \
 800a990:	4b4d      	ldr	r3, [pc, #308]	; (800aac8 <HAL_RCCEx_GetPeriphCLKConfig+0x138>)
 800a992:	6003      	str	r3, [r0, #0]
  PeriphClkInit->PLLSAI1.PLLSAI1Source = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC) >> RCC_PLLCFGR_PLLSRC_Pos;
 800a994:	4b4d      	ldr	r3, [pc, #308]	; (800aacc <HAL_RCCEx_GetPeriphCLKConfig+0x13c>)
{
 800a996:	b510      	push	{r4, lr}
  PeriphClkInit->PLLSAI1.PLLSAI1Source = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC) >> RCC_PLLCFGR_PLLSRC_Pos;
 800a998:	68dc      	ldr	r4, [r3, #12]
 800a99a:	f004 0403 	and.w	r4, r4, #3
 800a99e:	6044      	str	r4, [r0, #4]
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 800a9a0:	68d9      	ldr	r1, [r3, #12]
 800a9a2:	f3c1 1102 	ubfx	r1, r1, #4, #3
 800a9a6:	3101      	adds	r1, #1
 800a9a8:	6081      	str	r1, [r0, #8]
  PeriphClkInit->PLLSAI1.PLLSAI1N = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a9aa:	691a      	ldr	r2, [r3, #16]
 800a9ac:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800a9b0:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLSAI1.PLLSAI1P = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) >> RCC_PLLSAI1CFGR_PLLSAI1P_Pos) << 4U) + 7U;
 800a9b2:	691a      	ldr	r2, [r3, #16]
 800a9b4:	0b52      	lsrs	r2, r2, #13
 800a9b6:	f002 0210 	and.w	r2, r2, #16
 800a9ba:	3207      	adds	r2, #7
 800a9bc:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLSAI1.PLLSAI1Q = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) * 2U;
 800a9be:	691a      	ldr	r2, [r3, #16]
 800a9c0:	f3c2 5241 	ubfx	r2, r2, #21, #2
 800a9c4:	3201      	adds	r2, #1
 800a9c6:	0052      	lsls	r2, r2, #1
 800a9c8:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI1.PLLSAI1R = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) * 2U;
 800a9ca:	691a      	ldr	r2, [r3, #16]
 800a9cc:	f3c2 6241 	ubfx	r2, r2, #25, #2
  PeriphClkInit->PLLSAI2.PLLSAI2M = PeriphClkInit->PLLSAI1.PLLSAI1M;
 800a9d0:	e9c0 4108 	strd	r4, r1, [r0, #32]
  PeriphClkInit->PLLSAI1.PLLSAI1R = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) * 2U;
 800a9d4:	3201      	adds	r2, #1
 800a9d6:	0052      	lsls	r2, r2, #1
 800a9d8:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI2.PLLSAI2N = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800a9da:	695a      	ldr	r2, [r3, #20]
 800a9dc:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800a9e0:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAI2.PLLSAI2P = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) >> RCC_PLLSAI2CFGR_PLLSAI2P_Pos) << 4U) + 7U;
 800a9e2:	695a      	ldr	r2, [r3, #20]
 800a9e4:	0b52      	lsrs	r2, r2, #13
 800a9e6:	f002 0210 	and.w	r2, r2, #16
 800a9ea:	3207      	adds	r2, #7
 800a9ec:	62c2      	str	r2, [r0, #44]	; 0x2c
  PeriphClkInit->PLLSAI2.PLLSAI2R = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R)>> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) * 2U;
 800a9ee:	695a      	ldr	r2, [r3, #20]
 800a9f0:	f3c2 6241 	ubfx	r2, r2, #25, #2
 800a9f4:	3201      	adds	r2, #1
 800a9f6:	0052      	lsls	r2, r2, #1
 800a9f8:	6302      	str	r2, [r0, #48]	; 0x30
  PeriphClkInit->Usart1ClockSelection  = __HAL_RCC_GET_USART1_SOURCE();
 800a9fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a9fe:	f002 0203 	and.w	r2, r2, #3
 800aa02:	6382      	str	r2, [r0, #56]	; 0x38
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 800aa04:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aa08:	f002 020c 	and.w	r2, r2, #12
 800aa0c:	63c2      	str	r2, [r0, #60]	; 0x3c
  PeriphClkInit->Usart3ClockSelection  = __HAL_RCC_GET_USART3_SOURCE();
 800aa0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aa12:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800aa16:	6402      	str	r2, [r0, #64]	; 0x40
  PeriphClkInit->Uart4ClockSelection   = __HAL_RCC_GET_UART4_SOURCE();
 800aa18:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aa1c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800aa20:	6442      	str	r2, [r0, #68]	; 0x44
  PeriphClkInit->Uart5ClockSelection   = __HAL_RCC_GET_UART5_SOURCE();
 800aa22:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aa26:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800aa2a:	6482      	str	r2, [r0, #72]	; 0x48
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 800aa2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aa30:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800aa34:	64c2      	str	r2, [r0, #76]	; 0x4c
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 800aa36:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aa3a:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800aa3e:	6502      	str	r2, [r0, #80]	; 0x50
  PeriphClkInit->I2c2ClockSelection    = __HAL_RCC_GET_I2C2_SOURCE();
 800aa40:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aa44:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 800aa48:	6542      	str	r2, [r0, #84]	; 0x54
  PeriphClkInit->I2c3ClockSelection    = __HAL_RCC_GET_I2C3_SOURCE();
 800aa4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aa4e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800aa52:	6582      	str	r2, [r0, #88]	; 0x58
  PeriphClkInit->Lptim1ClockSelection  = __HAL_RCC_GET_LPTIM1_SOURCE();
 800aa54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aa58:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 800aa5c:	65c2      	str	r2, [r0, #92]	; 0x5c
  PeriphClkInit->Lptim2ClockSelection  = __HAL_RCC_GET_LPTIM2_SOURCE();
 800aa5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aa62:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 800aa66:	6602      	str	r2, [r0, #96]	; 0x60
  PeriphClkInit->Sai1ClockSelection    = __HAL_RCC_GET_SAI1_SOURCE();
 800aa68:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aa6c:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 800aa70:	6642      	str	r2, [r0, #100]	; 0x64
  PeriphClkInit->Sai2ClockSelection    = __HAL_RCC_GET_SAI2_SOURCE();
 800aa72:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aa76:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
 800aa7a:	6682      	str	r2, [r0, #104]	; 0x68
  PeriphClkInit->RTCClockSelection     = __HAL_RCC_GET_RTC_SOURCE();
 800aa7c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800aa80:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800aa84:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  PeriphClkInit->UsbClockSelection   = __HAL_RCC_GET_USB_SOURCE();
 800aa88:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aa8c:	f002 6240 	and.w	r2, r2, #201326592	; 0xc000000
 800aa90:	66c2      	str	r2, [r0, #108]	; 0x6c
  PeriphClkInit->Sdmmc1ClockSelection   = __HAL_RCC_GET_SDMMC1_SOURCE();
 800aa92:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aa96:	f002 6240 	and.w	r2, r2, #201326592	; 0xc000000
 800aa9a:	6702      	str	r2, [r0, #112]	; 0x70
  PeriphClkInit->RngClockSelection   = __HAL_RCC_GET_RNG_SOURCE();
 800aa9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aaa0:	f002 6240 	and.w	r2, r2, #201326592	; 0xc000000
 800aaa4:	6742      	str	r2, [r0, #116]	; 0x74
  PeriphClkInit->AdcClockSelection     = __HAL_RCC_GET_ADC_SOURCE();
 800aaa6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aaaa:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
 800aaae:	6782      	str	r2, [r0, #120]	; 0x78
  PeriphClkInit->Swpmi1ClockSelection  = __HAL_RCC_GET_SWPMI1_SOURCE();
 800aab0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aab4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800aab8:	67c2      	str	r2, [r0, #124]	; 0x7c
  PeriphClkInit->Dfsdm1ClockSelection  = __HAL_RCC_GET_DFSDM1_SOURCE();
 800aaba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aabe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aac2:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 800aac6:	bd10      	pop	{r4, pc}
 800aac8:	000fffff 	.word	0x000fffff
 800aacc:	40021000 	.word	0x40021000

0800aad0 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800aad0:	4a02      	ldr	r2, [pc, #8]	; (800aadc <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 800aad2:	6813      	ldr	r3, [r2, #0]
 800aad4:	f043 0304 	orr.w	r3, r3, #4
 800aad8:	6013      	str	r3, [r2, #0]
}
 800aada:	4770      	bx	lr
 800aadc:	40021000 	.word	0x40021000

0800aae0 <HAL_SPI_ErrorCallback>:
 800aae0:	4770      	bx	lr
	...

0800aae4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800aae4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsource = hspi->Instance->CR2;
 800aae6:	6803      	ldr	r3, [r0, #0]
 800aae8:	685d      	ldr	r5, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800aaea:	689a      	ldr	r2, [r3, #8]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800aaec:	0656      	lsls	r6, r2, #25
{
 800aaee:	b085      	sub	sp, #20
 800aaf0:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800aaf2:	ea4f 1192 	mov.w	r1, r2, lsr #6
 800aaf6:	f3c2 1780 	ubfx	r7, r2, #6, #1
 800aafa:	d408      	bmi.n	800ab0e <HAL_SPI_IRQHandler+0x2a>
 800aafc:	07d6      	lsls	r6, r2, #31
 800aafe:	d506      	bpl.n	800ab0e <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ab00:	066e      	lsls	r6, r5, #25
 800ab02:	d504      	bpl.n	800ab0e <HAL_SPI_IRQHandler+0x2a>
  {
    hspi->RxISR(hspi);
 800ab04:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
  }
}
 800ab06:	b005      	add	sp, #20
 800ab08:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hspi->TxISR(hspi);
 800ab0c:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ab0e:	0796      	lsls	r6, r2, #30
 800ab10:	d504      	bpl.n	800ab1c <HAL_SPI_IRQHandler+0x38>
 800ab12:	0628      	lsls	r0, r5, #24
 800ab14:	d502      	bpl.n	800ab1c <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 800ab16:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ab18:	4620      	mov	r0, r4
 800ab1a:	e7f4      	b.n	800ab06 <HAL_SPI_IRQHandler+0x22>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ab1c:	ea41 1152 	orr.w	r1, r1, r2, lsr #5
 800ab20:	f3c2 2000 	ubfx	r0, r2, #8, #1
 800ab24:	f001 0101 	and.w	r1, r1, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ab28:	0956      	lsrs	r6, r2, #5
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ab2a:	ea51 0200 	orrs.w	r2, r1, r0
 800ab2e:	d057      	beq.n	800abe0 <HAL_SPI_IRQHandler+0xfc>
 800ab30:	06aa      	lsls	r2, r5, #26
 800ab32:	d555      	bpl.n	800abe0 <HAL_SPI_IRQHandler+0xfc>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ab34:	b17f      	cbz	r7, 800ab56 <HAL_SPI_IRQHandler+0x72>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ab36:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 800ab3a:	2a03      	cmp	r2, #3
 800ab3c:	f04f 0100 	mov.w	r1, #0
 800ab40:	d048      	beq.n	800abd4 <HAL_SPI_IRQHandler+0xf0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ab42:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800ab44:	f042 0204 	orr.w	r2, r2, #4
 800ab48:	6622      	str	r2, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ab4a:	9100      	str	r1, [sp, #0]
 800ab4c:	68da      	ldr	r2, [r3, #12]
 800ab4e:	9200      	str	r2, [sp, #0]
 800ab50:	689a      	ldr	r2, [r3, #8]
 800ab52:	9200      	str	r2, [sp, #0]
 800ab54:	9a00      	ldr	r2, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ab56:	07f1      	lsls	r1, r6, #31
 800ab58:	d50c      	bpl.n	800ab74 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ab5a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800ab5c:	f042 0201 	orr.w	r2, r2, #1
 800ab60:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ab62:	2200      	movs	r2, #0
 800ab64:	9202      	str	r2, [sp, #8]
 800ab66:	689a      	ldr	r2, [r3, #8]
 800ab68:	9202      	str	r2, [sp, #8]
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab70:	601a      	str	r2, [r3, #0]
 800ab72:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800ab74:	b140      	cbz	r0, 800ab88 <HAL_SPI_IRQHandler+0xa4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ab76:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800ab78:	f042 0208 	orr.w	r2, r2, #8
 800ab7c:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ab7e:	2200      	movs	r2, #0
 800ab80:	9203      	str	r2, [sp, #12]
 800ab82:	689a      	ldr	r2, [r3, #8]
 800ab84:	9203      	str	r2, [sp, #12]
 800ab86:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab88:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800ab8a:	b34a      	cbz	r2, 800abe0 <HAL_SPI_IRQHandler+0xfc>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ab8c:	685a      	ldr	r2, [r3, #4]
 800ab8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ab92:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800ab94:	2201      	movs	r2, #1
 800ab96:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800ab9a:	07aa      	lsls	r2, r5, #30
 800ab9c:	d022      	beq.n	800abe4 <HAL_SPI_IRQHandler+0x100>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800ab9e:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800aba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800aba2:	f022 0203 	bic.w	r2, r2, #3
 800aba6:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800aba8:	b140      	cbz	r0, 800abbc <HAL_SPI_IRQHandler+0xd8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800abaa:	4b10      	ldr	r3, [pc, #64]	; (800abec <HAL_SPI_IRQHandler+0x108>)
 800abac:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800abae:	f7fe fcda 	bl	8009566 <HAL_DMA_Abort_IT>
 800abb2:	b118      	cbz	r0, 800abbc <HAL_SPI_IRQHandler+0xd8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800abb4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800abb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abba:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800abbc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800abbe:	b178      	cbz	r0, 800abe0 <HAL_SPI_IRQHandler+0xfc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800abc0:	4b0a      	ldr	r3, [pc, #40]	; (800abec <HAL_SPI_IRQHandler+0x108>)
 800abc2:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800abc4:	f7fe fccf 	bl	8009566 <HAL_DMA_Abort_IT>
 800abc8:	b150      	cbz	r0, 800abe0 <HAL_SPI_IRQHandler+0xfc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800abca:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800abcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abd0:	6623      	str	r3, [r4, #96]	; 0x60
 800abd2:	e005      	b.n	800abe0 <HAL_SPI_IRQHandler+0xfc>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800abd4:	9101      	str	r1, [sp, #4]
 800abd6:	68da      	ldr	r2, [r3, #12]
 800abd8:	9201      	str	r2, [sp, #4]
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	9301      	str	r3, [sp, #4]
 800abde:	9b01      	ldr	r3, [sp, #4]
}
 800abe0:	b005      	add	sp, #20
 800abe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_SPI_ErrorCallback(hspi);
 800abe4:	4620      	mov	r0, r4
 800abe6:	f7ff ff7b 	bl	800aae0 <HAL_SPI_ErrorCallback>
 800abea:	e7f9      	b.n	800abe0 <HAL_SPI_IRQHandler+0xfc>
 800abec:	0800abf1 	.word	0x0800abf1

0800abf0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800abf0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800abf2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 800abf4:	2300      	movs	r3, #0
 800abf6:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800abfa:	87c3      	strh	r3, [r0, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800abfc:	f7ff ff70 	bl	800aae0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ac00:	bd08      	pop	{r3, pc}

0800ac02 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac02:	6803      	ldr	r3, [r0, #0]
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ac0a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac0c:	689a      	ldr	r2, [r3, #8]
 800ac0e:	f022 0201 	bic.w	r2, r2, #1
 800ac12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac14:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800ac16:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac18:	bf02      	ittt	eq
 800ac1a:	681a      	ldreq	r2, [r3, #0]
 800ac1c:	f022 0210 	biceq.w	r2, r2, #16
 800ac20:	601a      	streq	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac22:	2320      	movs	r3, #32
 800ac24:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac26:	2300      	movs	r3, #0
 800ac28:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac2a:	6643      	str	r3, [r0, #100]	; 0x64
}
 800ac2c:	4770      	bx	lr
	...

0800ac30 <HAL_UART_Transmit_DMA>:
{
 800ac30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac32:	4604      	mov	r4, r0
 800ac34:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800ac36:	6fa7      	ldr	r7, [r4, #120]	; 0x78
 800ac38:	2f20      	cmp	r7, #32
 800ac3a:	d138      	bne.n	800acae <HAL_UART_Transmit_DMA+0x7e>
    if ((pData == NULL) || (Size == 0U))
 800ac3c:	b351      	cbz	r1, 800ac94 <HAL_UART_Transmit_DMA+0x64>
 800ac3e:	b34a      	cbz	r2, 800ac94 <HAL_UART_Transmit_DMA+0x64>
    __HAL_LOCK(huart);
 800ac40:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
 800ac44:	2a01      	cmp	r2, #1
 800ac46:	d032      	beq.n	800acae <HAL_UART_Transmit_DMA+0x7e>
    if (huart->hdmatx != NULL)
 800ac48:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->TxXferCount = Size;
 800ac4a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    __HAL_LOCK(huart);
 800ac4e:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac50:	2600      	movs	r6, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac52:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac54:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
    __HAL_LOCK(huart);
 800ac58:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    huart->pTxBuffPtr  = pData;
 800ac5c:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800ac5e:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac62:	67a2      	str	r2, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 800ac64:	b1c0      	cbz	r0, 800ac98 <HAL_UART_Transmit_DMA+0x68>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ac66:	f8df c04c 	ldr.w	ip, [pc, #76]	; 800acb4 <HAL_UART_Transmit_DMA+0x84>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ac6a:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ac6c:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ac70:	f8df c044 	ldr.w	ip, [pc, #68]	; 800acb8 <HAL_UART_Transmit_DMA+0x88>
 800ac74:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ac78:	f8df c040 	ldr.w	ip, [pc, #64]	; 800acbc <HAL_UART_Transmit_DMA+0x8c>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ac7c:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 800ac7e:	e9c0 c60d 	strd	ip, r6, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ac82:	f7fe fc31 	bl	80094e8 <HAL_DMA_Start_IT>
 800ac86:	b138      	cbz	r0, 800ac98 <HAL_UART_Transmit_DMA+0x68>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ac88:	2310      	movs	r3, #16
 800ac8a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        __HAL_UNLOCK(huart);
 800ac8e:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
        huart->gState = HAL_UART_STATE_READY;
 800ac92:	67a7      	str	r7, [r4, #120]	; 0x78
      return HAL_ERROR;
 800ac94:	2001      	movs	r0, #1
 800ac96:	e009      	b.n	800acac <HAL_UART_Transmit_DMA+0x7c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ac98:	6823      	ldr	r3, [r4, #0]
 800ac9a:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 800ac9c:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ac9e:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 800aca0:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aca4:	689a      	ldr	r2, [r3, #8]
 800aca6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800acaa:	609a      	str	r2, [r3, #8]
}
 800acac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800acae:	2002      	movs	r0, #2
 800acb0:	e7fc      	b.n	800acac <HAL_UART_Transmit_DMA+0x7c>
 800acb2:	bf00      	nop
 800acb4:	0800acc1 	.word	0x0800acc1
 800acb8:	0800acef 	.word	0x0800acef
 800acbc:	0800acfb 	.word	0x0800acfb

0800acc0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800acc0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800acc2:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800acc4:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f013 0320 	ands.w	r3, r3, #32
 800accc:	d10b      	bne.n	800ace6 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;
 800acce:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800acd2:	6813      	ldr	r3, [r2, #0]
 800acd4:	689a      	ldr	r2, [r3, #8]
 800acd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800acda:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ace2:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ace4:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800ace6:	4610      	mov	r0, r2
 800ace8:	f7fc fad8 	bl	800729c <HAL_UART_TxCpltCallback>
}
 800acec:	e7fa      	b.n	800ace4 <UART_DMATransmitCplt+0x24>

0800acee <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800acee:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800acf0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800acf2:	f7fc facd 	bl	8007290 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acf6:	bd08      	pop	{r3, pc}

0800acf8 <HAL_UART_ErrorCallback>:
 800acf8:	4770      	bx	lr

0800acfa <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800acfa:	6a80      	ldr	r0, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800acfc:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800acfe:	6f82      	ldr	r2, [r0, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ad00:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
{
 800ad02:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ad04:	689c      	ldr	r4, [r3, #8]
 800ad06:	0624      	lsls	r4, r4, #24
 800ad08:	d50a      	bpl.n	800ad20 <UART_DMAError+0x26>
 800ad0a:	2a21      	cmp	r2, #33	; 0x21
 800ad0c:	d108      	bne.n	800ad20 <UART_DMAError+0x26>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ad1a:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800ad1c:	2220      	movs	r2, #32
 800ad1e:	6782      	str	r2, [r0, #120]	; 0x78
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	065b      	lsls	r3, r3, #25
 800ad24:	d506      	bpl.n	800ad34 <UART_DMAError+0x3a>
 800ad26:	2922      	cmp	r1, #34	; 0x22
 800ad28:	d104      	bne.n	800ad34 <UART_DMAError+0x3a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800ad30:	f7ff ff67 	bl	800ac02 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ad34:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800ad38:	f043 0310 	orr.w	r3, r3, #16
 800ad3c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad40:	f7ff ffda 	bl	800acf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad44:	bd10      	pop	{r4, pc}
	...

0800ad48 <UART_SetConfig>:
{
 800ad48:	b570      	push	{r4, r5, r6, lr}
 800ad4a:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800ad4c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ad4e:	6921      	ldr	r1, [r4, #16]
 800ad50:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad52:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ad54:	69c0      	ldr	r0, [r0, #28]
 800ad56:	430a      	orrs	r2, r1
 800ad58:	6961      	ldr	r1, [r4, #20]
 800ad5a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad5c:	4990      	ldr	r1, [pc, #576]	; (800afa0 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ad5e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad60:	4029      	ands	r1, r5
 800ad62:	430a      	orrs	r2, r1
 800ad64:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad66:	685a      	ldr	r2, [r3, #4]
 800ad68:	68e1      	ldr	r1, [r4, #12]
 800ad6a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800ad6e:	430a      	orrs	r2, r1
 800ad70:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ad72:	4a8c      	ldr	r2, [pc, #560]	; (800afa4 <UART_SetConfig+0x25c>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ad74:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ad76:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 800ad78:	bf1c      	itt	ne
 800ad7a:	6a22      	ldrne	r2, [r4, #32]
 800ad7c:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ad7e:	689a      	ldr	r2, [r3, #8]
 800ad80:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800ad84:	430a      	orrs	r2, r1
 800ad86:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad88:	4a87      	ldr	r2, [pc, #540]	; (800afa8 <UART_SetConfig+0x260>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d117      	bne.n	800adbe <UART_SetConfig+0x76>
 800ad8e:	4b87      	ldr	r3, [pc, #540]	; (800afac <UART_SetConfig+0x264>)
 800ad90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad94:	f003 0303 	and.w	r3, r3, #3
 800ad98:	3b01      	subs	r3, #1
 800ad9a:	2b02      	cmp	r3, #2
 800ad9c:	f200 80d0 	bhi.w	800af40 <UART_SetConfig+0x1f8>
 800ada0:	4a83      	ldr	r2, [pc, #524]	; (800afb0 <UART_SetConfig+0x268>)
 800ada2:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ada4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800ada8:	f040 8099 	bne.w	800aede <UART_SetConfig+0x196>
    switch (clocksource)
 800adac:	2b08      	cmp	r3, #8
 800adae:	d822      	bhi.n	800adf6 <UART_SetConfig+0xae>
 800adb0:	e8df f003 	tbb	[pc, r3]
 800adb4:	2193c9da 	.word	0x2193c9da
 800adb8:	212121cf 	.word	0x212121cf
 800adbc:	de          	.byte	0xde
 800adbd:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800adbe:	4a7d      	ldr	r2, [pc, #500]	; (800afb4 <UART_SetConfig+0x26c>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d106      	bne.n	800add2 <UART_SetConfig+0x8a>
 800adc4:	4b79      	ldr	r3, [pc, #484]	; (800afac <UART_SetConfig+0x264>)
 800adc6:	4a7c      	ldr	r2, [pc, #496]	; (800afb8 <UART_SetConfig+0x270>)
 800adc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adcc:	f003 030c 	and.w	r3, r3, #12
 800add0:	e7e7      	b.n	800ada2 <UART_SetConfig+0x5a>
 800add2:	4a7a      	ldr	r2, [pc, #488]	; (800afbc <UART_SetConfig+0x274>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d119      	bne.n	800ae0c <UART_SetConfig+0xc4>
 800add8:	4b74      	ldr	r3, [pc, #464]	; (800afac <UART_SetConfig+0x264>)
 800adda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adde:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ade2:	2b20      	cmp	r3, #32
 800ade4:	f000 80b8 	beq.w	800af58 <UART_SetConfig+0x210>
 800ade8:	d807      	bhi.n	800adfa <UART_SetConfig+0xb2>
 800adea:	2b00      	cmp	r3, #0
 800adec:	f000 80b9 	beq.w	800af62 <UART_SetConfig+0x21a>
 800adf0:	2b10      	cmp	r3, #16
 800adf2:	f000 80ab 	beq.w	800af4c <UART_SetConfig+0x204>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800adf6:	2001      	movs	r0, #1
 800adf8:	e04e      	b.n	800ae98 <UART_SetConfig+0x150>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800adfa:	2b30      	cmp	r3, #48	; 0x30
 800adfc:	d1fb      	bne.n	800adf6 <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800adfe:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800ae02:	f000 80b5 	beq.w	800af70 <UART_SetConfig+0x228>
 800ae06:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ae0a:	e083      	b.n	800af14 <UART_SetConfig+0x1cc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae0c:	4a6c      	ldr	r2, [pc, #432]	; (800afc0 <UART_SetConfig+0x278>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d10f      	bne.n	800ae32 <UART_SetConfig+0xea>
 800ae12:	4b66      	ldr	r3, [pc, #408]	; (800afac <UART_SetConfig+0x264>)
 800ae14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae18:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ae1c:	2b80      	cmp	r3, #128	; 0x80
 800ae1e:	f000 809b 	beq.w	800af58 <UART_SetConfig+0x210>
 800ae22:	d804      	bhi.n	800ae2e <UART_SetConfig+0xe6>
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	f000 809c 	beq.w	800af62 <UART_SetConfig+0x21a>
 800ae2a:	2b40      	cmp	r3, #64	; 0x40
 800ae2c:	e7e1      	b.n	800adf2 <UART_SetConfig+0xaa>
 800ae2e:	2bc0      	cmp	r3, #192	; 0xc0
 800ae30:	e7e4      	b.n	800adfc <UART_SetConfig+0xb4>
 800ae32:	4a64      	ldr	r2, [pc, #400]	; (800afc4 <UART_SetConfig+0x27c>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d112      	bne.n	800ae5e <UART_SetConfig+0x116>
 800ae38:	4b5c      	ldr	r3, [pc, #368]	; (800afac <UART_SetConfig+0x264>)
 800ae3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae46:	f000 8087 	beq.w	800af58 <UART_SetConfig+0x210>
 800ae4a:	d805      	bhi.n	800ae58 <UART_SetConfig+0x110>
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	f000 8088 	beq.w	800af62 <UART_SetConfig+0x21a>
 800ae52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae56:	e7cc      	b.n	800adf2 <UART_SetConfig+0xaa>
 800ae58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae5c:	e7ce      	b.n	800adfc <UART_SetConfig+0xb4>
 800ae5e:	4a51      	ldr	r2, [pc, #324]	; (800afa4 <UART_SetConfig+0x25c>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d1c8      	bne.n	800adf6 <UART_SetConfig+0xae>
 800ae64:	4b51      	ldr	r3, [pc, #324]	; (800afac <UART_SetConfig+0x264>)
 800ae66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ae6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae72:	d015      	beq.n	800aea0 <UART_SetConfig+0x158>
 800ae74:	d806      	bhi.n	800ae84 <UART_SetConfig+0x13c>
 800ae76:	b15b      	cbz	r3, 800ae90 <UART_SetConfig+0x148>
 800ae78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae7c:	d1bb      	bne.n	800adf6 <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetSysClockFreq();
 800ae7e:	f7fe ff09 	bl	8009c94 <HAL_RCC_GetSysClockFreq>
        break;
 800ae82:	e007      	b.n	800ae94 <UART_SetConfig+0x14c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ae88:	d1b5      	bne.n	800adf6 <UART_SetConfig+0xae>
        pclk = (uint32_t) LSE_VALUE;
 800ae8a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ae8e:	e008      	b.n	800aea2 <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae90:	f7ff fa68 	bl	800a364 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800ae94:	b928      	cbnz	r0, 800aea2 <UART_SetConfig+0x15a>
 800ae96:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 800ae98:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800ae9a:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 800ae9e:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 800aea0:	4849      	ldr	r0, [pc, #292]	; (800afc8 <UART_SetConfig+0x280>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800aea2:	6862      	ldr	r2, [r4, #4]
 800aea4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800aea8:	4283      	cmp	r3, r0
 800aeaa:	d8a4      	bhi.n	800adf6 <UART_SetConfig+0xae>
 800aeac:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800aeb0:	d8a1      	bhi.n	800adf6 <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800aeb2:	0851      	lsrs	r1, r2, #1
 800aeb4:	2500      	movs	r5, #0
 800aeb6:	468c      	mov	ip, r1
 800aeb8:	f44f 7680 	mov.w	r6, #256	; 0x100
 800aebc:	4629      	mov	r1, r5
 800aebe:	fbe0 c106 	umlal	ip, r1, r0, r6
 800aec2:	462b      	mov	r3, r5
 800aec4:	4660      	mov	r0, ip
 800aec6:	f7fb ff27 	bl	8006d18 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aeca:	4b40      	ldr	r3, [pc, #256]	; (800afcc <UART_SetConfig+0x284>)
 800aecc:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d890      	bhi.n	800adf6 <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 800aed4:	6823      	ldr	r3, [r4, #0]
 800aed6:	60d8      	str	r0, [r3, #12]
 800aed8:	e7dd      	b.n	800ae96 <UART_SetConfig+0x14e>
        pclk = (uint32_t) HSI_VALUE;
 800aeda:	483b      	ldr	r0, [pc, #236]	; (800afc8 <UART_SetConfig+0x280>)
 800aedc:	e048      	b.n	800af70 <UART_SetConfig+0x228>
    switch (clocksource)
 800aede:	2b08      	cmp	r3, #8
 800aee0:	d889      	bhi.n	800adf6 <UART_SetConfig+0xae>
 800aee2:	a201      	add	r2, pc, #4	; (adr r2, 800aee8 <UART_SetConfig+0x1a0>)
 800aee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee8:	0800af0d 	.word	0x0800af0d
 800aeec:	0800af35 	.word	0x0800af35
 800aef0:	0800af5f 	.word	0x0800af5f
 800aef4:	0800adf7 	.word	0x0800adf7
 800aef8:	0800af3b 	.word	0x0800af3b
 800aefc:	0800adf7 	.word	0x0800adf7
 800af00:	0800adf7 	.word	0x0800adf7
 800af04:	0800adf7 	.word	0x0800adf7
 800af08:	0800ae07 	.word	0x0800ae07
        pclk = HAL_RCC_GetPCLK1Freq();
 800af0c:	f7ff fa2a 	bl	800a364 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800af10:	2800      	cmp	r0, #0
 800af12:	d0c0      	beq.n	800ae96 <UART_SetConfig+0x14e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800af14:	6862      	ldr	r2, [r4, #4]
 800af16:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800af1a:	fbb3 f3f2 	udiv	r3, r3, r2
 800af1e:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af20:	f1a3 0110 	sub.w	r1, r3, #16
 800af24:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800af28:	4291      	cmp	r1, r2
 800af2a:	f63f af64 	bhi.w	800adf6 <UART_SetConfig+0xae>
        huart->Instance->BRR = usartdiv;
 800af2e:	6822      	ldr	r2, [r4, #0]
 800af30:	60d3      	str	r3, [r2, #12]
 800af32:	e7b0      	b.n	800ae96 <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800af34:	f7ff fa28 	bl	800a388 <HAL_RCC_GetPCLK2Freq>
        break;
 800af38:	e7ea      	b.n	800af10 <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 800af3a:	f7fe feab 	bl	8009c94 <HAL_RCC_GetSysClockFreq>
        break;
 800af3e:	e7e7      	b.n	800af10 <UART_SetConfig+0x1c8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af40:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800af44:	d1f6      	bne.n	800af34 <UART_SetConfig+0x1ec>
        pclk = HAL_RCC_GetPCLK2Freq();
 800af46:	f7ff fa1f 	bl	800a388 <HAL_RCC_GetPCLK2Freq>
        break;
 800af4a:	e00f      	b.n	800af6c <UART_SetConfig+0x224>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af4c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800af50:	d1f3      	bne.n	800af3a <UART_SetConfig+0x1f2>
        pclk = HAL_RCC_GetSysClockFreq();
 800af52:	f7fe fe9f 	bl	8009c94 <HAL_RCC_GetSysClockFreq>
        break;
 800af56:	e009      	b.n	800af6c <UART_SetConfig+0x224>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af58:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800af5c:	d0bd      	beq.n	800aeda <UART_SetConfig+0x192>
        pclk = (uint32_t) HSI_VALUE;
 800af5e:	481a      	ldr	r0, [pc, #104]	; (800afc8 <UART_SetConfig+0x280>)
 800af60:	e7d8      	b.n	800af14 <UART_SetConfig+0x1cc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af62:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800af66:	d1d1      	bne.n	800af0c <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK1Freq();
 800af68:	f7ff f9fc 	bl	800a364 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800af6c:	2800      	cmp	r0, #0
 800af6e:	d092      	beq.n	800ae96 <UART_SetConfig+0x14e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800af70:	6862      	ldr	r2, [r4, #4]
 800af72:	0853      	lsrs	r3, r2, #1
 800af74:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800af78:	fbb0 f0f2 	udiv	r0, r0, r2
 800af7c:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af7e:	f1a3 0110 	sub.w	r1, r3, #16
 800af82:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800af86:	4291      	cmp	r1, r2
 800af88:	f63f af35 	bhi.w	800adf6 <UART_SetConfig+0xae>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af8c:	f020 000f 	bic.w	r0, r0, #15
        huart->Instance->BRR = brrtemp;
 800af90:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af92:	b280      	uxth	r0, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af94:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800af98:	4318      	orrs	r0, r3
 800af9a:	60d0      	str	r0, [r2, #12]
 800af9c:	e77b      	b.n	800ae96 <UART_SetConfig+0x14e>
 800af9e:	bf00      	nop
 800afa0:	efff69f3 	.word	0xefff69f3
 800afa4:	40008000 	.word	0x40008000
 800afa8:	40013800 	.word	0x40013800
 800afac:	40021000 	.word	0x40021000
 800afb0:	08013f1c 	.word	0x08013f1c
 800afb4:	40004400 	.word	0x40004400
 800afb8:	08013f1f 	.word	0x08013f1f
 800afbc:	40004800 	.word	0x40004800
 800afc0:	40004c00 	.word	0x40004c00
 800afc4:	40005000 	.word	0x40005000
 800afc8:	00f42400 	.word	0x00f42400
 800afcc:	000ffcff 	.word	0x000ffcff

0800afd0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800afd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800afd2:	07da      	lsls	r2, r3, #31
{
 800afd4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800afd6:	d506      	bpl.n	800afe6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800afd8:	6801      	ldr	r1, [r0, #0]
 800afda:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800afdc:	684a      	ldr	r2, [r1, #4]
 800afde:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800afe2:	4322      	orrs	r2, r4
 800afe4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800afe6:	079c      	lsls	r4, r3, #30
 800afe8:	d506      	bpl.n	800aff8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800afea:	6801      	ldr	r1, [r0, #0]
 800afec:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800afee:	684a      	ldr	r2, [r1, #4]
 800aff0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800aff4:	4322      	orrs	r2, r4
 800aff6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aff8:	0759      	lsls	r1, r3, #29
 800affa:	d506      	bpl.n	800b00a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800affc:	6801      	ldr	r1, [r0, #0]
 800affe:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800b000:	684a      	ldr	r2, [r1, #4]
 800b002:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b006:	4322      	orrs	r2, r4
 800b008:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b00a:	071a      	lsls	r2, r3, #28
 800b00c:	d506      	bpl.n	800b01c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b00e:	6801      	ldr	r1, [r0, #0]
 800b010:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800b012:	684a      	ldr	r2, [r1, #4]
 800b014:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b018:	4322      	orrs	r2, r4
 800b01a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b01c:	06dc      	lsls	r4, r3, #27
 800b01e:	d506      	bpl.n	800b02e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b020:	6801      	ldr	r1, [r0, #0]
 800b022:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800b024:	688a      	ldr	r2, [r1, #8]
 800b026:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b02a:	4322      	orrs	r2, r4
 800b02c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b02e:	0699      	lsls	r1, r3, #26
 800b030:	d506      	bpl.n	800b040 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b032:	6801      	ldr	r1, [r0, #0]
 800b034:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800b036:	688a      	ldr	r2, [r1, #8]
 800b038:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b03c:	4322      	orrs	r2, r4
 800b03e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b040:	065a      	lsls	r2, r3, #25
 800b042:	d50f      	bpl.n	800b064 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b044:	6801      	ldr	r1, [r0, #0]
 800b046:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800b048:	684a      	ldr	r2, [r1, #4]
 800b04a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800b04e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b050:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b054:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b056:	d105      	bne.n	800b064 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b058:	684a      	ldr	r2, [r1, #4]
 800b05a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800b05c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800b060:	4322      	orrs	r2, r4
 800b062:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b064:	061b      	lsls	r3, r3, #24
 800b066:	d506      	bpl.n	800b076 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b068:	6802      	ldr	r2, [r0, #0]
 800b06a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800b06c:	6853      	ldr	r3, [r2, #4]
 800b06e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800b072:	430b      	orrs	r3, r1
 800b074:	6053      	str	r3, [r2, #4]
}
 800b076:	bd10      	pop	{r4, pc}

0800b078 <UART_WaitOnFlagUntilTimeout>:
{
 800b078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b07c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b080:	4604      	mov	r4, r0
 800b082:	460e      	mov	r6, r1
 800b084:	4615      	mov	r5, r2
 800b086:	461f      	mov	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b088:	6822      	ldr	r2, [r4, #0]
 800b08a:	69d3      	ldr	r3, [r2, #28]
 800b08c:	ea36 0303 	bics.w	r3, r6, r3
 800b090:	bf0c      	ite	eq
 800b092:	2301      	moveq	r3, #1
 800b094:	2300      	movne	r3, #0
 800b096:	42ab      	cmp	r3, r5
 800b098:	d001      	beq.n	800b09e <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800b09a:	2000      	movs	r0, #0
 800b09c:	e01a      	b.n	800b0d4 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 800b09e:	f1b8 3fff 	cmp.w	r8, #4294967295
 800b0a2:	d0f2      	beq.n	800b08a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0a4:	f7fd fee0 	bl	8008e68 <HAL_GetTick>
 800b0a8:	1bc0      	subs	r0, r0, r7
 800b0aa:	4540      	cmp	r0, r8
 800b0ac:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b0ae:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0b0:	d802      	bhi.n	800b0b8 <UART_WaitOnFlagUntilTimeout+0x40>
 800b0b2:	f1b8 0f00 	cmp.w	r8, #0
 800b0b6:	d10f      	bne.n	800b0d8 <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b0b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b0bc:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0be:	6883      	ldr	r3, [r0, #8]
 800b0c0:	f023 0301 	bic.w	r3, r3, #1
 800b0c4:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 800b0c6:	2320      	movs	r3, #32
 800b0c8:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b0ca:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 800b0d2:	2003      	movs	r0, #3
}
 800b0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b0d8:	075a      	lsls	r2, r3, #29
 800b0da:	d5d5      	bpl.n	800b088 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b0dc:	69c3      	ldr	r3, [r0, #28]
 800b0de:	051b      	lsls	r3, r3, #20
 800b0e0:	d5d2      	bpl.n	800b088 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b0e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b0e6:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b0e8:	6803      	ldr	r3, [r0, #0]
 800b0ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b0ee:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0f0:	6883      	ldr	r3, [r0, #8]
 800b0f2:	f023 0301 	bic.w	r3, r3, #1
 800b0f6:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 800b0f8:	2320      	movs	r3, #32
 800b0fa:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b0fc:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b0fe:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800b102:	e7e3      	b.n	800b0cc <UART_WaitOnFlagUntilTimeout+0x54>

0800b104 <UART_CheckIdleState>:
{
 800b104:	b530      	push	{r4, r5, lr}
 800b106:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b108:	2500      	movs	r5, #0
{
 800b10a:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b10c:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 800b110:	f7fd feaa 	bl	8008e68 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b114:	6822      	ldr	r2, [r4, #0]
 800b116:	6812      	ldr	r2, [r2, #0]
 800b118:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800b11a:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b11c:	d415      	bmi.n	800b14a <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b11e:	6822      	ldr	r2, [r4, #0]
 800b120:	6812      	ldr	r2, [r2, #0]
 800b122:	0752      	lsls	r2, r2, #29
 800b124:	d509      	bpl.n	800b13a <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b126:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800b12a:	9200      	str	r2, [sp, #0]
 800b12c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b130:	2200      	movs	r2, #0
 800b132:	4620      	mov	r0, r4
 800b134:	f7ff ffa0 	bl	800b078 <UART_WaitOnFlagUntilTimeout>
 800b138:	b9a0      	cbnz	r0, 800b164 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 800b13a:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b13c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800b13e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800b140:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b144:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b146:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 800b148:	e00d      	b.n	800b166 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b14a:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800b14e:	9200      	str	r2, [sp, #0]
 800b150:	9003      	str	r0, [sp, #12]
 800b152:	462a      	mov	r2, r5
 800b154:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b158:	4620      	mov	r0, r4
 800b15a:	f7ff ff8d 	bl	800b078 <UART_WaitOnFlagUntilTimeout>
 800b15e:	9b03      	ldr	r3, [sp, #12]
 800b160:	2800      	cmp	r0, #0
 800b162:	d0dc      	beq.n	800b11e <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800b164:	2003      	movs	r0, #3
}
 800b166:	b005      	add	sp, #20
 800b168:	bd30      	pop	{r4, r5, pc}

0800b16a <HAL_UART_Init>:
{
 800b16a:	b510      	push	{r4, lr}
  if (huart == NULL)
 800b16c:	4604      	mov	r4, r0
 800b16e:	b340      	cbz	r0, 800b1c2 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800b170:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800b172:	b91b      	cbnz	r3, 800b17c <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 800b174:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 800b178:	f7fc feda 	bl	8007f30 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800b17c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b17e:	2324      	movs	r3, #36	; 0x24
 800b180:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 800b182:	6813      	ldr	r3, [r2, #0]
 800b184:	f023 0301 	bic.w	r3, r3, #1
 800b188:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b18a:	4620      	mov	r0, r4
 800b18c:	f7ff fddc 	bl	800ad48 <UART_SetConfig>
 800b190:	2801      	cmp	r0, #1
 800b192:	d016      	beq.n	800b1c2 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b196:	b113      	cbz	r3, 800b19e <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 800b198:	4620      	mov	r0, r4
 800b19a:	f7ff ff19 	bl	800afd0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b19e:	6823      	ldr	r3, [r4, #0]
 800b1a0:	685a      	ldr	r2, [r3, #4]
 800b1a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b1a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b1a8:	689a      	ldr	r2, [r3, #8]
 800b1aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b1ae:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800b1b6:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800b1b8:	601a      	str	r2, [r3, #0]
}
 800b1ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800b1be:	f7ff bfa1 	b.w	800b104 <UART_CheckIdleState>
}
 800b1c2:	2001      	movs	r0, #1
 800b1c4:	bd10      	pop	{r4, pc}
	...

0800b1c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b1c8:	b084      	sub	sp, #16
 800b1ca:	b510      	push	{r4, lr}
 800b1cc:	4604      	mov	r4, r0
 800b1ce:	a803      	add	r0, sp, #12
 800b1d0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b1d4:	68e3      	ldr	r3, [r4, #12]
 800b1d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1da:	60e3      	str	r3, [r4, #12]
 800b1dc:	4b10      	ldr	r3, [pc, #64]	; (800b220 <USB_CoreInit+0x58>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	d017      	beq.n	800b212 <USB_CoreInit+0x4a>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b1e2:	6922      	ldr	r2, [r4, #16]
 800b1e4:	2a00      	cmp	r2, #0
 800b1e6:	dafa      	bge.n	800b1de <USB_CoreInit+0x16>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b1e8:	6923      	ldr	r3, [r4, #16]
 800b1ea:	f043 0301 	orr.w	r3, r3, #1
 800b1ee:	6123      	str	r3, [r4, #16]
 800b1f0:	4b0b      	ldr	r3, [pc, #44]	; (800b220 <USB_CoreInit+0x58>)

  do
  {
    if (++count > 200000U)
 800b1f2:	3b01      	subs	r3, #1
 800b1f4:	d00d      	beq.n	800b212 <USB_CoreInit+0x4a>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b1f6:	6920      	ldr	r0, [r4, #16]
 800b1f8:	f010 0001 	ands.w	r0, r0, #1
 800b1fc:	d1f9      	bne.n	800b1f2 <USB_CoreInit+0x2a>
  if (cfg.battery_charging_enable == 0U)
 800b1fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b200:	b94b      	cbnz	r3, 800b216 <USB_CoreInit+0x4e>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b202:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b208:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800b20a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b20e:	b004      	add	sp, #16
 800b210:	4770      	bx	lr
      return HAL_TIMEOUT;
 800b212:	2003      	movs	r0, #3
 800b214:	e7f3      	b.n	800b1fe <USB_CoreInit+0x36>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b216:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b21c:	e7f4      	b.n	800b208 <USB_CoreInit+0x40>
 800b21e:	bf00      	nop
 800b220:	00030d41 	.word	0x00030d41

0800b224 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b224:	6883      	ldr	r3, [r0, #8]
 800b226:	f023 0301 	bic.w	r3, r3, #1
 800b22a:	6083      	str	r3, [r0, #8]
}
 800b22c:	2000      	movs	r0, #0
 800b22e:	4770      	bx	lr

0800b230 <USB_SetCurrentMode>:
{
 800b230:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b232:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800b234:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b236:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b23a:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800b23c:	d108      	bne.n	800b250 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b23e:	68c3      	ldr	r3, [r0, #12]
 800b240:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b244:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800b246:	2032      	movs	r0, #50	; 0x32
 800b248:	f7fd fe14 	bl	8008e74 <HAL_Delay>
  return HAL_OK;
 800b24c:	2000      	movs	r0, #0
}
 800b24e:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 800b250:	b919      	cbnz	r1, 800b25a <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b252:	68c3      	ldr	r3, [r0, #12]
 800b254:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b258:	e7f4      	b.n	800b244 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 800b25a:	2001      	movs	r0, #1
 800b25c:	e7f7      	b.n	800b24e <USB_SetCurrentMode+0x1e>
	...

0800b260 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b260:	0189      	lsls	r1, r1, #6
 800b262:	f041 0120 	orr.w	r1, r1, #32
 800b266:	4a06      	ldr	r2, [pc, #24]	; (800b280 <USB_FlushTxFifo+0x20>)
 800b268:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800b26a:	3a01      	subs	r2, #1
 800b26c:	d005      	beq.n	800b27a <USB_FlushTxFifo+0x1a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b26e:	6903      	ldr	r3, [r0, #16]
 800b270:	f013 0320 	ands.w	r3, r3, #32
 800b274:	d1f9      	bne.n	800b26a <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800b276:	4618      	mov	r0, r3
 800b278:	4770      	bx	lr
      return HAL_TIMEOUT;
 800b27a:	2003      	movs	r0, #3
}
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	00030d41 	.word	0x00030d41

0800b284 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b284:	2310      	movs	r3, #16
 800b286:	4a06      	ldr	r2, [pc, #24]	; (800b2a0 <USB_FlushRxFifo+0x1c>)
 800b288:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800b28a:	3a01      	subs	r2, #1
 800b28c:	d005      	beq.n	800b29a <USB_FlushRxFifo+0x16>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b28e:	6903      	ldr	r3, [r0, #16]
 800b290:	f013 0310 	ands.w	r3, r3, #16
 800b294:	d1f9      	bne.n	800b28a <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800b296:	4618      	mov	r0, r3
 800b298:	4770      	bx	lr
      return HAL_TIMEOUT;
 800b29a:	2003      	movs	r0, #3
}
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	00030d41 	.word	0x00030d41

0800b2a4 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 800b2a4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800b2a8:	4319      	orrs	r1, r3
 800b2aa:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800b2ae:	2000      	movs	r0, #0
 800b2b0:	4770      	bx	lr
	...

0800b2b4 <USB_DevInit>:
{
 800b2b4:	b084      	sub	sp, #16
 800b2b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2ba:	4604      	mov	r4, r0
 800b2bc:	a809      	add	r0, sp, #36	; 0x24
 800b2be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800b2c2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  for (i = 0U; i < 15U; i++)
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800b2ce:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 800b2d6:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 800b2d8:	d1f7      	bne.n	800b2ca <USB_DevInit+0x16>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b2da:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 800b2de:	2f00      	cmp	r7, #0
 800b2e0:	d164      	bne.n	800b3ac <USB_DevInit+0xf8>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b2e2:	6873      	ldr	r3, [r6, #4]
 800b2e4:	f043 0302 	orr.w	r3, r3, #2
 800b2e8:	6073      	str	r3, [r6, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b2ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b2ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b2f0:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b2f2:	6823      	ldr	r3, [r4, #0]
 800b2f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2f8:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b2fa:	6823      	ldr	r3, [r4, #0]
 800b2fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b300:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 800b302:	2500      	movs	r5, #0
 800b304:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b308:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800b30c:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b310:	2103      	movs	r1, #3
 800b312:	4620      	mov	r0, r4
 800b314:	f7ff ffc6 	bl	800b2a4 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b318:	2110      	movs	r1, #16
 800b31a:	4620      	mov	r0, r4
 800b31c:	f7ff ffa0 	bl	800b260 <USB_FlushTxFifo>
 800b320:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b322:	4620      	mov	r0, r4
 800b324:	f7ff ffae 	bl	800b284 <USB_FlushRxFifo>
 800b328:	4308      	orrs	r0, r1
 800b32a:	b2c0      	uxtb	r0, r0
    ret = HAL_ERROR;
 800b32c:	1b40      	subs	r0, r0, r5
  USBx_DEVICE->DIEPMSK = 0U;
 800b32e:	6135      	str	r5, [r6, #16]
    ret = HAL_ERROR;
 800b330:	bf18      	it	ne
 800b332:	2001      	movne	r0, #1
  USBx_DEVICE->DOEPMSK = 0U;
 800b334:	6175      	str	r5, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b336:	f504 6310 	add.w	r3, r4, #2304	; 0x900
 800b33a:	61f5      	str	r5, [r6, #28]
      USBx_INEP(i)->DIEPCTL = 0U;
 800b33c:	462a      	mov	r2, r5
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b33e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b342:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b346:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b34a:	4545      	cmp	r5, r8
 800b34c:	d133      	bne.n	800b3b6 <USB_DevInit+0x102>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b34e:	2200      	movs	r2, #0
 800b350:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b354:	4611      	mov	r1, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b356:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b35a:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b35e:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b362:	4542      	cmp	r2, r8
 800b364:	d139      	bne.n	800b3da <USB_DevInit+0x126>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b366:	6933      	ldr	r3, [r6, #16]
 800b368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b36c:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 800b36e:	2300      	movs	r3, #0
 800b370:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b372:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800b376:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b378:	69a3      	ldr	r3, [r4, #24]
 800b37a:	f043 0310 	orr.w	r3, r3, #16
 800b37e:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b380:	69a2      	ldr	r2, [r4, #24]
 800b382:	4b1f      	ldr	r3, [pc, #124]	; (800b400 <USB_DevInit+0x14c>)
 800b384:	4313      	orrs	r3, r2
 800b386:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800b388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b38a:	b11b      	cbz	r3, 800b394 <USB_DevInit+0xe0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b38c:	69a3      	ldr	r3, [r4, #24]
 800b38e:	f043 0308 	orr.w	r3, r3, #8
 800b392:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800b394:	2f01      	cmp	r7, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b396:	bf01      	itttt	eq
 800b398:	69a3      	ldreq	r3, [r4, #24]
 800b39a:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800b39e:	f043 0304 	orreq.w	r3, r3, #4
 800b3a2:	61a3      	streq	r3, [r4, #24]
}
 800b3a4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3a8:	b004      	add	sp, #16
 800b3aa:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b3ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b3ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b3b2:	63a3      	str	r3, [r4, #56]	; 0x38
 800b3b4:	e7a5      	b.n	800b302 <USB_DevInit+0x4e>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b3b6:	f8d3 9000 	ldr.w	r9, [r3]
 800b3ba:	f1b9 0f00 	cmp.w	r9, #0
 800b3be:	da0a      	bge.n	800b3d6 <USB_DevInit+0x122>
      if (i == 0U)
 800b3c0:	b93d      	cbnz	r5, 800b3d2 <USB_DevInit+0x11e>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b3c2:	f8c3 c000 	str.w	ip, [r3]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b3c6:	611a      	str	r2, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3c8:	3501      	adds	r5, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b3ca:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3ce:	3320      	adds	r3, #32
 800b3d0:	e7bb      	b.n	800b34a <USB_DevInit+0x96>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b3d2:	6019      	str	r1, [r3, #0]
 800b3d4:	e7f7      	b.n	800b3c6 <USB_DevInit+0x112>
      USBx_INEP(i)->DIEPCTL = 0U;
 800b3d6:	601a      	str	r2, [r3, #0]
 800b3d8:	e7f5      	b.n	800b3c6 <USB_DevInit+0x112>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b3da:	f8d3 9000 	ldr.w	r9, [r3]
 800b3de:	f1b9 0f00 	cmp.w	r9, #0
 800b3e2:	da0a      	bge.n	800b3fa <USB_DevInit+0x146>
      if (i == 0U)
 800b3e4:	b93a      	cbnz	r2, 800b3f6 <USB_DevInit+0x142>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b3e6:	f8c3 c000 	str.w	ip, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b3ea:	6119      	str	r1, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3ec:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b3ee:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3f2:	3320      	adds	r3, #32
 800b3f4:	e7b5      	b.n	800b362 <USB_DevInit+0xae>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b3f6:	601d      	str	r5, [r3, #0]
 800b3f8:	e7f7      	b.n	800b3ea <USB_DevInit+0x136>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b3fa:	6019      	str	r1, [r3, #0]
 800b3fc:	e7f5      	b.n	800b3ea <USB_DevInit+0x136>
 800b3fe:	bf00      	nop
 800b400:	803c3800 	.word	0x803c3800

0800b404 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b404:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 800b408:	f023 0303 	bic.w	r3, r3, #3
 800b40c:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b410:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800b414:	f043 0302 	orr.w	r3, r3, #2
 800b418:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800b41c:	2000      	movs	r0, #0
 800b41e:	4770      	bx	lr

0800b420 <ai_network_get_error>:
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 800b420:	f7f4 bfd1 	b.w	80003c6 <ai_platform_network_get_error>

0800b424 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800b424:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 800b426:	2303      	movs	r3, #3
 800b428:	2200      	movs	r2, #0
 800b42a:	e9cd 3200 	strd	r3, r2, [sp]
 800b42e:	4a03      	ldr	r2, [pc, #12]	; (800b43c <ai_network_create+0x18>)
 800b430:	2301      	movs	r3, #1
 800b432:	f7f5 f8b3 	bl	800059c <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800b436:	b003      	add	sp, #12
 800b438:	f85d fb04 	ldr.w	pc, [sp], #4
 800b43c:	20000504 	.word	0x20000504

0800b440 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800b440:	b510      	push	{r4, lr}
 800b442:	460c      	mov	r4, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800b444:	f7f5 f912 	bl	800066c <ai_platform_network_init>
  if ( !net_ctx ) return false;
 800b448:	2800      	cmp	r0, #0
 800b44a:	f000 8094 	beq.w	800b576 <ai_network_init+0x136>
    node_24_C_array.format |= AI_FMT_FLAG_CONST;
 800b44e:	4a4a      	ldr	r2, [pc, #296]	; (800b578 <ai_network_init+0x138>)
 800b450:	6923      	ldr	r3, [r4, #16]
 800b452:	6811      	ldr	r1, [r2, #0]
 800b454:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800b458:	6011      	str	r1, [r2, #0]
    node_24_C_array.data = AI_PTR(weights + 153856);
 800b45a:	f503 3116 	add.w	r1, r3, #153600	; 0x25800
 800b45e:	f501 7180 	add.w	r1, r1, #256	; 0x100
    node_24_C_array.data_start = AI_PTR(weights + 153856);
 800b462:	e9c2 1102 	strd	r1, r1, [r2, #8]
    node_24_B_array.format |= AI_FMT_FLAG_CONST;
 800b466:	4945      	ldr	r1, [pc, #276]	; (800b57c <ai_network_init+0x13c>)
 800b468:	680a      	ldr	r2, [r1, #0]
 800b46a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b46e:	600a      	str	r2, [r1, #0]
    node_24_B_array.data = AI_PTR(weights + 149248);
 800b470:	f503 3211 	add.w	r2, r3, #148480	; 0x24400
 800b474:	f502 7040 	add.w	r0, r2, #768	; 0x300
    node_24_B_array.data_start = AI_PTR(weights + 149248);
 800b478:	e9c1 0002 	strd	r0, r0, [r1, #8]
    node_20_bias_array.format |= AI_FMT_FLAG_CONST;
 800b47c:	4940      	ldr	r1, [pc, #256]	; (800b580 <ai_network_init+0x140>)
    node_20_bias_array.data = AI_PTR(weights + 148992);
 800b47e:	f502 7200 	add.w	r2, r2, #512	; 0x200
    node_20_bias_array.format |= AI_FMT_FLAG_CONST;
 800b482:	6808      	ldr	r0, [r1, #0]
    node_20_bias_array.data_start = AI_PTR(weights + 148992);
 800b484:	e9c1 2202 	strd	r2, r2, [r1, #8]
    node_20_weights_array.format |= AI_FMT_FLAG_CONST;
 800b488:	4a3e      	ldr	r2, [pc, #248]	; (800b584 <ai_network_init+0x144>)
    node_20_bias_array.format |= AI_FMT_FLAG_CONST;
 800b48a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800b48e:	6008      	str	r0, [r1, #0]
    node_20_weights_array.format |= AI_FMT_FLAG_CONST;
 800b490:	6811      	ldr	r1, [r2, #0]
 800b492:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800b496:	6011      	str	r1, [r2, #0]
    node_20_weights_array.data = AI_PTR(weights + 75264);
 800b498:	f503 3193 	add.w	r1, r3, #75264	; 0x12600
    node_20_weights_array.data_start = AI_PTR(weights + 75264);
 800b49c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    node_17_bias_array.format |= AI_FMT_FLAG_CONST;
 800b4a0:	4a39      	ldr	r2, [pc, #228]	; (800b588 <ai_network_init+0x148>)
 800b4a2:	6811      	ldr	r1, [r2, #0]
 800b4a4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800b4a8:	6011      	str	r1, [r2, #0]
    node_17_bias_array.data = AI_PTR(weights + 75136);
 800b4aa:	f503 3192 	add.w	r1, r3, #74752	; 0x12400
 800b4ae:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    node_17_bias_array.data_start = AI_PTR(weights + 75136);
 800b4b2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    node_17_weights_array.format |= AI_FMT_FLAG_CONST;
 800b4b6:	4a35      	ldr	r2, [pc, #212]	; (800b58c <ai_network_init+0x14c>)
 800b4b8:	6811      	ldr	r1, [r2, #0]
 800b4ba:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800b4be:	6011      	str	r1, [r2, #0]
    node_17_weights_array.data = AI_PTR(weights + 38272);
 800b4c0:	f503 4115 	add.w	r1, r3, #38144	; 0x9500
 800b4c4:	3180      	adds	r1, #128	; 0x80
    node_17_weights_array.data_start = AI_PTR(weights + 38272);
 800b4c6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    node_14_bias_array.format |= AI_FMT_FLAG_CONST;
 800b4ca:	4a31      	ldr	r2, [pc, #196]	; (800b590 <ai_network_init+0x150>)
 800b4cc:	6811      	ldr	r1, [r2, #0]
 800b4ce:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800b4d2:	6011      	str	r1, [r2, #0]
    node_14_bias_array.data = AI_PTR(weights + 38144);
 800b4d4:	f503 4115 	add.w	r1, r3, #38144	; 0x9500
    node_14_bias_array.data_start = AI_PTR(weights + 38144);
 800b4d8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    node_14_weights_array.format |= AI_FMT_FLAG_CONST;
 800b4dc:	4a2d      	ldr	r2, [pc, #180]	; (800b594 <ai_network_init+0x154>)
 800b4de:	6811      	ldr	r1, [r2, #0]
 800b4e0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800b4e4:	6011      	str	r1, [r2, #0]
    node_14_weights_array.data = AI_PTR(weights + 1280);
 800b4e6:	f503 61a0 	add.w	r1, r3, #1280	; 0x500
    node_14_weights_array.data_start = AI_PTR(weights + 1280);
 800b4ea:	e9c2 1102 	strd	r1, r1, [r2, #8]
    node_11_bias_array.format |= AI_FMT_FLAG_CONST;
 800b4ee:	4a2a      	ldr	r2, [pc, #168]	; (800b598 <ai_network_init+0x158>)
 800b4f0:	6811      	ldr	r1, [r2, #0]
 800b4f2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800b4f6:	6011      	str	r1, [r2, #0]
    node_11_bias_array.data = AI_PTR(weights + 1152);
 800b4f8:	f503 6190 	add.w	r1, r3, #1152	; 0x480
    node_11_bias_array.data_start = AI_PTR(weights + 1152);
 800b4fc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    node_11_weights_array.format |= AI_FMT_FLAG_CONST;
 800b500:	4a26      	ldr	r2, [pc, #152]	; (800b59c <ai_network_init+0x15c>)
 800b502:	6811      	ldr	r1, [r2, #0]
    node_11_weights_array.data_start = AI_PTR(weights + 0);
 800b504:	e9c2 3302 	strd	r3, r3, [r2, #8]
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800b508:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    node_11_weights_array.format |= AI_FMT_FLAG_CONST;
 800b50a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800b50e:	3303      	adds	r3, #3
 800b510:	f023 0303 	bic.w	r3, r3, #3
    node_11_weights_array.format |= AI_FMT_FLAG_CONST;
 800b514:	6011      	str	r1, [r2, #0]
    node_20_scratch0_array.data = AI_PTR(activations + 38656);
 800b516:	4922      	ldr	r1, [pc, #136]	; (800b5a0 <ai_network_init+0x160>)
 800b518:	f503 4217 	add.w	r2, r3, #38656	; 0x9700
    node_20_scratch0_array.data_start = AI_PTR(activations + 38656);
 800b51c:	e9c1 2202 	strd	r2, r2, [r1, #8]
    node_17_scratch0_array.data = AI_PTR(activations + 38656);
 800b520:	4920      	ldr	r1, [pc, #128]	; (800b5a4 <ai_network_init+0x164>)
    node_17_scratch0_array.data_start = AI_PTR(activations + 38656);
 800b522:	e9c1 2202 	strd	r2, r2, [r1, #8]
    node_14_scratch0_array.data = AI_PTR(activations + 38656);
 800b526:	4920      	ldr	r1, [pc, #128]	; (800b5a8 <ai_network_init+0x168>)
    node_14_scratch0_array.data_start = AI_PTR(activations + 38656);
 800b528:	e9c1 2202 	strd	r2, r2, [r1, #8]
    node_11_scratch0_array.data = AI_PTR(activations + 38656);
 800b52c:	491f      	ldr	r1, [pc, #124]	; (800b5ac <ai_network_init+0x16c>)
    node_11_scratch0_array.data_start = AI_PTR(activations + 38656);
 800b52e:	e9c1 2202 	strd	r2, r2, [r1, #8]
    input1_output_array.data = AI_PTR(NULL);
 800b532:	491f      	ldr	r1, [pc, #124]	; (800b5b0 <ai_network_init+0x170>)
 800b534:	2200      	movs	r2, #0
    input1_output_array.data_start = AI_PTR(NULL);
 800b536:	e9c1 2202 	strd	r2, r2, [r1, #8]
    node_11_output_array.data = AI_PTR(activations + 3840);
 800b53a:	491e      	ldr	r1, [pc, #120]	; (800b5b4 <ai_network_init+0x174>)
 800b53c:	f503 6070 	add.w	r0, r3, #3840	; 0xf00
    node_11_output_array.data_start = AI_PTR(activations + 3840);
 800b540:	e9c1 0002 	strd	r0, r0, [r1, #8]
    node_14_output_array.data = AI_PTR(activations + 0);
 800b544:	491c      	ldr	r1, [pc, #112]	; (800b5b8 <ai_network_init+0x178>)
    node_17_output_array.data = AI_PTR(activations + 35456);
 800b546:	481d      	ldr	r0, [pc, #116]	; (800b5bc <ai_network_init+0x17c>)
    node_14_output_array.data_start = AI_PTR(activations + 0);
 800b548:	e9c1 3302 	strd	r3, r3, [r1, #8]
    node_17_output_array.data = AI_PTR(activations + 35456);
 800b54c:	f503 410a 	add.w	r1, r3, #35328	; 0x8a00
 800b550:	3180      	adds	r1, #128	; 0x80
    node_17_output_array.data_start = AI_PTR(activations + 35456);
 800b552:	e9c0 1102 	strd	r1, r1, [r0, #8]
    node_20_output_array.data = AI_PTR(activations + 33152);
 800b556:	481a      	ldr	r0, [pc, #104]	; (800b5c0 <ai_network_init+0x180>)
 800b558:	f503 4101 	add.w	r1, r3, #33024	; 0x8100
 800b55c:	3180      	adds	r1, #128	; 0x80
    node_20_output_array.data_start = AI_PTR(activations + 33152);
 800b55e:	e9c0 1102 	strd	r1, r1, [r0, #8]
    node_24_output_array.data = AI_PTR(activations + 33144);
 800b562:	f503 4301 	add.w	r3, r3, #33024	; 0x8100
 800b566:	4917      	ldr	r1, [pc, #92]	; (800b5c4 <ai_network_init+0x184>)
 800b568:	3378      	adds	r3, #120	; 0x78
    node_24_output_array.data_start = AI_PTR(activations + 33144);
 800b56a:	e9c1 3302 	strd	r3, r3, [r1, #8]
    node_25_output_array.data = AI_PTR(NULL);
 800b56e:	4b16      	ldr	r3, [pc, #88]	; (800b5c8 <ai_network_init+0x188>)
    node_25_output_array.data_start = AI_PTR(NULL);
 800b570:	e9c3 2202 	strd	r2, r2, [r3, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, &params->params);
  ok &= network_configure_activations(net_ctx, &params->activations);

  return ok;
 800b574:	2001      	movs	r0, #1
}
 800b576:	bd10      	pop	{r4, pc}
 800b578:	20000a0c 	.word	0x20000a0c
 800b57c:	200009e0 	.word	0x200009e0
 800b580:	200008bc 	.word	0x200008bc
 800b584:	200009b4 	.word	0x200009b4
 800b588:	200007b4 	.word	0x200007b4
 800b58c:	20000890 	.word	0x20000890
 800b590:	200006ac 	.word	0x200006ac
 800b594:	20000788 	.word	0x20000788
 800b598:	200005a4 	.word	0x200005a4
 800b59c:	20000680 	.word	0x20000680
 800b5a0:	20000988 	.word	0x20000988
 800b5a4:	20000864 	.word	0x20000864
 800b5a8:	2000075c 	.word	0x2000075c
 800b5ac:	20000654 	.word	0x20000654
 800b5b0:	20000578 	.word	0x20000578
 800b5b4:	20000628 	.word	0x20000628
 800b5b8:	20000730 	.word	0x20000730
 800b5bc:	20000838 	.word	0x20000838
 800b5c0:	2000095c 	.word	0x2000095c
 800b5c4:	20000a5c 	.word	0x20000a5c
 800b5c8:	20000aa4 	.word	0x20000aa4

0800b5cc <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 800b5cc:	f7f5 b8aa 	b.w	8000724 <ai_platform_network_process>

0800b5d0 <ai_network_data_weights_get>:
    0xbc, 0x30, 0x15, 0x11, 0x3c, 0xac, 0x47, 0x93, 0x3c
  };

  return AI_HANDLE_PTR(s_network_weights);

}
 800b5d0:	4800      	ldr	r0, [pc, #0]	; (800b5d4 <ai_network_data_weights_get+0x4>)
 800b5d2:	4770      	bx	lr
 800b5d4:	08013f5c 	.word	0x08013f5c

0800b5d8 <arm_rfft_32_fast_init_f32>:
 800b5d8:	b178      	cbz	r0, 800b5fa <arm_rfft_32_fast_init_f32+0x22>
 800b5da:	b430      	push	{r4, r5}
 800b5dc:	4908      	ldr	r1, [pc, #32]	; (800b600 <arm_rfft_32_fast_init_f32+0x28>)
 800b5de:	4a09      	ldr	r2, [pc, #36]	; (800b604 <arm_rfft_32_fast_init_f32+0x2c>)
 800b5e0:	2310      	movs	r3, #16
 800b5e2:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b5e6:	8003      	strh	r3, [r0, #0]
 800b5e8:	2520      	movs	r5, #32
 800b5ea:	2414      	movs	r4, #20
 800b5ec:	4b06      	ldr	r3, [pc, #24]	; (800b608 <arm_rfft_32_fast_init_f32+0x30>)
 800b5ee:	8205      	strh	r5, [r0, #16]
 800b5f0:	8184      	strh	r4, [r0, #12]
 800b5f2:	6143      	str	r3, [r0, #20]
 800b5f4:	bc30      	pop	{r4, r5}
 800b5f6:	2000      	movs	r0, #0
 800b5f8:	4770      	bx	lr
 800b5fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b5fe:	4770      	bx	lr
 800b600:	0803a814 	.word	0x0803a814
 800b604:	0803f14c 	.word	0x0803f14c
 800b608:	08047ecc 	.word	0x08047ecc

0800b60c <arm_rfft_64_fast_init_f32>:
 800b60c:	b178      	cbz	r0, 800b62e <arm_rfft_64_fast_init_f32+0x22>
 800b60e:	b430      	push	{r4, r5}
 800b610:	4908      	ldr	r1, [pc, #32]	; (800b634 <arm_rfft_64_fast_init_f32+0x28>)
 800b612:	4a09      	ldr	r2, [pc, #36]	; (800b638 <arm_rfft_64_fast_init_f32+0x2c>)
 800b614:	2320      	movs	r3, #32
 800b616:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b61a:	8003      	strh	r3, [r0, #0]
 800b61c:	2540      	movs	r5, #64	; 0x40
 800b61e:	2430      	movs	r4, #48	; 0x30
 800b620:	4b06      	ldr	r3, [pc, #24]	; (800b63c <arm_rfft_64_fast_init_f32+0x30>)
 800b622:	8205      	strh	r5, [r0, #16]
 800b624:	8184      	strh	r4, [r0, #12]
 800b626:	6143      	str	r3, [r0, #20]
 800b628:	bc30      	pop	{r4, r5}
 800b62a:	2000      	movs	r0, #0
 800b62c:	4770      	bx	lr
 800b62e:	f04f 30ff 	mov.w	r0, #4294967295
 800b632:	4770      	bx	lr
 800b634:	0803c96c 	.word	0x0803c96c
 800b638:	080439cc 	.word	0x080439cc
 800b63c:	0804c74c 	.word	0x0804c74c

0800b640 <arm_rfft_256_fast_init_f32>:
 800b640:	b180      	cbz	r0, 800b664 <arm_rfft_256_fast_init_f32+0x24>
 800b642:	b430      	push	{r4, r5}
 800b644:	4909      	ldr	r1, [pc, #36]	; (800b66c <arm_rfft_256_fast_init_f32+0x2c>)
 800b646:	4a0a      	ldr	r2, [pc, #40]	; (800b670 <arm_rfft_256_fast_init_f32+0x30>)
 800b648:	2380      	movs	r3, #128	; 0x80
 800b64a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b64e:	8003      	strh	r3, [r0, #0]
 800b650:	f44f 7580 	mov.w	r5, #256	; 0x100
 800b654:	24d0      	movs	r4, #208	; 0xd0
 800b656:	4b07      	ldr	r3, [pc, #28]	; (800b674 <arm_rfft_256_fast_init_f32+0x34>)
 800b658:	8205      	strh	r5, [r0, #16]
 800b65a:	8184      	strh	r4, [r0, #12]
 800b65c:	6143      	str	r3, [r0, #20]
 800b65e:	bc30      	pop	{r4, r5}
 800b660:	2000      	movs	r0, #0
 800b662:	4770      	bx	lr
 800b664:	f04f 30ff 	mov.w	r0, #4294967295
 800b668:	4770      	bx	lr
 800b66a:	bf00      	nop
 800b66c:	0803a674 	.word	0x0803a674
 800b670:	0803ed4c 	.word	0x0803ed4c
 800b674:	08047acc 	.word	0x08047acc

0800b678 <arm_rfft_512_fast_init_f32>:
 800b678:	b190      	cbz	r0, 800b6a0 <arm_rfft_512_fast_init_f32+0x28>
 800b67a:	b430      	push	{r4, r5}
 800b67c:	490a      	ldr	r1, [pc, #40]	; (800b6a8 <arm_rfft_512_fast_init_f32+0x30>)
 800b67e:	4a0b      	ldr	r2, [pc, #44]	; (800b6ac <arm_rfft_512_fast_init_f32+0x34>)
 800b680:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b684:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b688:	8003      	strh	r3, [r0, #0]
 800b68a:	f44f 7500 	mov.w	r5, #512	; 0x200
 800b68e:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800b692:	4b07      	ldr	r3, [pc, #28]	; (800b6b0 <arm_rfft_512_fast_init_f32+0x38>)
 800b694:	8205      	strh	r5, [r0, #16]
 800b696:	8184      	strh	r4, [r0, #12]
 800b698:	6143      	str	r3, [r0, #20]
 800b69a:	bc30      	pop	{r4, r5}
 800b69c:	2000      	movs	r0, #0
 800b69e:	4770      	bx	lr
 800b6a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a4:	4770      	bx	lr
 800b6a6:	bf00      	nop
 800b6a8:	0803c5fc 	.word	0x0803c5fc
 800b6ac:	080431cc 	.word	0x080431cc
 800b6b0:	0804bf4c 	.word	0x0804bf4c

0800b6b4 <arm_rfft_1024_fast_init_f32>:
 800b6b4:	b190      	cbz	r0, 800b6dc <arm_rfft_1024_fast_init_f32+0x28>
 800b6b6:	b430      	push	{r4, r5}
 800b6b8:	490a      	ldr	r1, [pc, #40]	; (800b6e4 <arm_rfft_1024_fast_init_f32+0x30>)
 800b6ba:	4a0b      	ldr	r2, [pc, #44]	; (800b6e8 <arm_rfft_1024_fast_init_f32+0x34>)
 800b6bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6c0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b6c4:	8003      	strh	r3, [r0, #0]
 800b6c6:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800b6ca:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800b6ce:	4b07      	ldr	r3, [pc, #28]	; (800b6ec <arm_rfft_1024_fast_init_f32+0x38>)
 800b6d0:	8205      	strh	r5, [r0, #16]
 800b6d2:	8184      	strh	r4, [r0, #12]
 800b6d4:	6143      	str	r3, [r0, #20]
 800b6d6:	bc30      	pop	{r4, r5}
 800b6d8:	2000      	movs	r0, #0
 800b6da:	4770      	bx	lr
 800b6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b6e0:	4770      	bx	lr
 800b6e2:	bf00      	nop
 800b6e4:	0803c9cc 	.word	0x0803c9cc
 800b6e8:	08043acc 	.word	0x08043acc
 800b6ec:	08044acc 	.word	0x08044acc

0800b6f0 <arm_rfft_2048_fast_init_f32>:
 800b6f0:	b190      	cbz	r0, 800b718 <arm_rfft_2048_fast_init_f32+0x28>
 800b6f2:	b430      	push	{r4, r5}
 800b6f4:	490a      	ldr	r1, [pc, #40]	; (800b720 <arm_rfft_2048_fast_init_f32+0x30>)
 800b6f6:	4a0b      	ldr	r2, [pc, #44]	; (800b724 <arm_rfft_2048_fast_init_f32+0x34>)
 800b6f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6fc:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b700:	8003      	strh	r3, [r0, #0]
 800b702:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800b706:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800b70a:	4b07      	ldr	r3, [pc, #28]	; (800b728 <arm_rfft_2048_fast_init_f32+0x38>)
 800b70c:	8205      	strh	r5, [r0, #16]
 800b70e:	8184      	strh	r4, [r0, #12]
 800b710:	6143      	str	r3, [r0, #20]
 800b712:	bc30      	pop	{r4, r5}
 800b714:	2000      	movs	r0, #0
 800b716:	4770      	bx	lr
 800b718:	f04f 30ff 	mov.w	r0, #4294967295
 800b71c:	4770      	bx	lr
 800b71e:	bf00      	nop
 800b720:	08039864 	.word	0x08039864
 800b724:	0803cd4c 	.word	0x0803cd4c
 800b728:	08045acc 	.word	0x08045acc

0800b72c <arm_rfft_4096_fast_init_f32>:
 800b72c:	b190      	cbz	r0, 800b754 <arm_rfft_4096_fast_init_f32+0x28>
 800b72e:	b430      	push	{r4, r5}
 800b730:	490a      	ldr	r1, [pc, #40]	; (800b75c <arm_rfft_4096_fast_init_f32+0x30>)
 800b732:	4a0b      	ldr	r2, [pc, #44]	; (800b760 <arm_rfft_4096_fast_init_f32+0x34>)
 800b734:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b738:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b73c:	8003      	strh	r3, [r0, #0]
 800b73e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800b742:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800b746:	4b07      	ldr	r3, [pc, #28]	; (800b764 <arm_rfft_4096_fast_init_f32+0x38>)
 800b748:	8205      	strh	r5, [r0, #16]
 800b74a:	8184      	strh	r4, [r0, #12]
 800b74c:	6143      	str	r3, [r0, #20]
 800b74e:	bc30      	pop	{r4, r5}
 800b750:	2000      	movs	r0, #0
 800b752:	4770      	bx	lr
 800b754:	f04f 30ff 	mov.w	r0, #4294967295
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	0803a83c 	.word	0x0803a83c
 800b760:	0803f1cc 	.word	0x0803f1cc
 800b764:	08047f4c 	.word	0x08047f4c

0800b768 <arm_rfft_fast_init_f32>:
 800b768:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b76c:	d01f      	beq.n	800b7ae <arm_rfft_fast_init_f32+0x46>
 800b76e:	d90b      	bls.n	800b788 <arm_rfft_fast_init_f32+0x20>
 800b770:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800b774:	d019      	beq.n	800b7aa <arm_rfft_fast_init_f32+0x42>
 800b776:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800b77a:	d012      	beq.n	800b7a2 <arm_rfft_fast_init_f32+0x3a>
 800b77c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b780:	d00d      	beq.n	800b79e <arm_rfft_fast_init_f32+0x36>
 800b782:	f04f 30ff 	mov.w	r0, #4294967295
 800b786:	4770      	bx	lr
 800b788:	2940      	cmp	r1, #64	; 0x40
 800b78a:	d00c      	beq.n	800b7a6 <arm_rfft_fast_init_f32+0x3e>
 800b78c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800b790:	d003      	beq.n	800b79a <arm_rfft_fast_init_f32+0x32>
 800b792:	2920      	cmp	r1, #32
 800b794:	d1f5      	bne.n	800b782 <arm_rfft_fast_init_f32+0x1a>
 800b796:	4b07      	ldr	r3, [pc, #28]	; (800b7b4 <arm_rfft_fast_init_f32+0x4c>)
 800b798:	4718      	bx	r3
 800b79a:	4b07      	ldr	r3, [pc, #28]	; (800b7b8 <arm_rfft_fast_init_f32+0x50>)
 800b79c:	4718      	bx	r3
 800b79e:	4b07      	ldr	r3, [pc, #28]	; (800b7bc <arm_rfft_fast_init_f32+0x54>)
 800b7a0:	4718      	bx	r3
 800b7a2:	4b07      	ldr	r3, [pc, #28]	; (800b7c0 <arm_rfft_fast_init_f32+0x58>)
 800b7a4:	4718      	bx	r3
 800b7a6:	4b07      	ldr	r3, [pc, #28]	; (800b7c4 <arm_rfft_fast_init_f32+0x5c>)
 800b7a8:	e7f6      	b.n	800b798 <arm_rfft_fast_init_f32+0x30>
 800b7aa:	4b07      	ldr	r3, [pc, #28]	; (800b7c8 <arm_rfft_fast_init_f32+0x60>)
 800b7ac:	e7f4      	b.n	800b798 <arm_rfft_fast_init_f32+0x30>
 800b7ae:	4b07      	ldr	r3, [pc, #28]	; (800b7cc <arm_rfft_fast_init_f32+0x64>)
 800b7b0:	e7f2      	b.n	800b798 <arm_rfft_fast_init_f32+0x30>
 800b7b2:	bf00      	nop
 800b7b4:	0800b5d9 	.word	0x0800b5d9
 800b7b8:	0800b641 	.word	0x0800b641
 800b7bc:	0800b6b5 	.word	0x0800b6b5
 800b7c0:	0800b72d 	.word	0x0800b72d
 800b7c4:	0800b60d 	.word	0x0800b60d
 800b7c8:	0800b6f1 	.word	0x0800b6f1
 800b7cc:	0800b679 	.word	0x0800b679

0800b7d0 <stage_rfft_f32>:
 800b7d0:	b410      	push	{r4}
 800b7d2:	edd1 7a00 	vldr	s15, [r1]
 800b7d6:	ed91 7a01 	vldr	s14, [r1, #4]
 800b7da:	8804      	ldrh	r4, [r0, #0]
 800b7dc:	6940      	ldr	r0, [r0, #20]
 800b7de:	ee37 7a07 	vadd.f32	s14, s14, s14
 800b7e2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b7e6:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800b7ea:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b7ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b7f2:	3c01      	subs	r4, #1
 800b7f4:	ee26 7a84 	vmul.f32	s14, s13, s8
 800b7f8:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b7fc:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800b800:	ed82 7a00 	vstr	s14, [r2]
 800b804:	edc2 7a01 	vstr	s15, [r2, #4]
 800b808:	3010      	adds	r0, #16
 800b80a:	3210      	adds	r2, #16
 800b80c:	3b08      	subs	r3, #8
 800b80e:	3110      	adds	r1, #16
 800b810:	ed11 5a02 	vldr	s10, [r1, #-8]
 800b814:	ed93 7a02 	vldr	s14, [r3, #8]
 800b818:	ed50 6a02 	vldr	s13, [r0, #-8]
 800b81c:	edd3 4a03 	vldr	s9, [r3, #12]
 800b820:	ed51 7a01 	vldr	s15, [r1, #-4]
 800b824:	ed10 6a01 	vldr	s12, [r0, #-4]
 800b828:	ee77 5a45 	vsub.f32	s11, s14, s10
 800b82c:	ee37 7a05 	vadd.f32	s14, s14, s10
 800b830:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800b834:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800b838:	ee66 5a25 	vmul.f32	s11, s12, s11
 800b83c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800b840:	ee37 7a23 	vadd.f32	s14, s14, s7
 800b844:	ee66 6a85 	vmul.f32	s13, s13, s10
 800b848:	ee26 6a05 	vmul.f32	s12, s12, s10
 800b84c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800b850:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b854:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b858:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b85c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b860:	3c01      	subs	r4, #1
 800b862:	ed02 7a02 	vstr	s14, [r2, #-8]
 800b866:	ed42 7a01 	vstr	s15, [r2, #-4]
 800b86a:	f1a3 0308 	sub.w	r3, r3, #8
 800b86e:	f101 0108 	add.w	r1, r1, #8
 800b872:	f100 0008 	add.w	r0, r0, #8
 800b876:	f102 0208 	add.w	r2, r2, #8
 800b87a:	d1c9      	bne.n	800b810 <stage_rfft_f32+0x40>
 800b87c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b880:	4770      	bx	lr
 800b882:	bf00      	nop

0800b884 <merge_rfft_f32>:
 800b884:	b410      	push	{r4}
 800b886:	edd1 7a00 	vldr	s15, [r1]
 800b88a:	edd1 6a01 	vldr	s13, [r1, #4]
 800b88e:	8804      	ldrh	r4, [r0, #0]
 800b890:	6940      	ldr	r0, [r0, #20]
 800b892:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b896:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b89a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800b89e:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b8a2:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b8a6:	3c01      	subs	r4, #1
 800b8a8:	ed82 7a00 	vstr	s14, [r2]
 800b8ac:	edc2 7a01 	vstr	s15, [r2, #4]
 800b8b0:	b3dc      	cbz	r4, 800b92a <merge_rfft_f32+0xa6>
 800b8b2:	00e3      	lsls	r3, r4, #3
 800b8b4:	3b08      	subs	r3, #8
 800b8b6:	440b      	add	r3, r1
 800b8b8:	3010      	adds	r0, #16
 800b8ba:	3210      	adds	r2, #16
 800b8bc:	3110      	adds	r1, #16
 800b8be:	ed11 5a02 	vldr	s10, [r1, #-8]
 800b8c2:	ed93 7a02 	vldr	s14, [r3, #8]
 800b8c6:	ed50 6a02 	vldr	s13, [r0, #-8]
 800b8ca:	edd3 4a03 	vldr	s9, [r3, #12]
 800b8ce:	ed51 7a01 	vldr	s15, [r1, #-4]
 800b8d2:	ed10 6a01 	vldr	s12, [r0, #-4]
 800b8d6:	ee75 5a47 	vsub.f32	s11, s10, s14
 800b8da:	ee37 7a05 	vadd.f32	s14, s14, s10
 800b8de:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800b8e2:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800b8e6:	ee66 5a25 	vmul.f32	s11, s12, s11
 800b8ea:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800b8ee:	ee37 7a63 	vsub.f32	s14, s14, s7
 800b8f2:	ee66 6a85 	vmul.f32	s13, s13, s10
 800b8f6:	ee26 6a05 	vmul.f32	s12, s12, s10
 800b8fa:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800b8fe:	ee37 7a46 	vsub.f32	s14, s14, s12
 800b902:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b906:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b90a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b90e:	3c01      	subs	r4, #1
 800b910:	ed02 7a02 	vstr	s14, [r2, #-8]
 800b914:	ed42 7a01 	vstr	s15, [r2, #-4]
 800b918:	f1a3 0308 	sub.w	r3, r3, #8
 800b91c:	f101 0108 	add.w	r1, r1, #8
 800b920:	f100 0008 	add.w	r0, r0, #8
 800b924:	f102 0208 	add.w	r2, r2, #8
 800b928:	d1c9      	bne.n	800b8be <merge_rfft_f32+0x3a>
 800b92a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <arm_rfft_fast_f32>:
 800b930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b934:	8a05      	ldrh	r5, [r0, #16]
 800b936:	086d      	lsrs	r5, r5, #1
 800b938:	8005      	strh	r5, [r0, #0]
 800b93a:	4604      	mov	r4, r0
 800b93c:	4616      	mov	r6, r2
 800b93e:	461d      	mov	r5, r3
 800b940:	b14b      	cbz	r3, 800b956 <arm_rfft_fast_f32+0x26>
 800b942:	f7ff ff9f 	bl	800b884 <merge_rfft_f32>
 800b946:	462a      	mov	r2, r5
 800b948:	4631      	mov	r1, r6
 800b94a:	4620      	mov	r0, r4
 800b94c:	2301      	movs	r3, #1
 800b94e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b952:	f000 bb33 	b.w	800bfbc <arm_cfft_f32>
 800b956:	460f      	mov	r7, r1
 800b958:	461a      	mov	r2, r3
 800b95a:	2301      	movs	r3, #1
 800b95c:	f000 fb2e 	bl	800bfbc <arm_cfft_f32>
 800b960:	4632      	mov	r2, r6
 800b962:	4639      	mov	r1, r7
 800b964:	4620      	mov	r0, r4
 800b966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b96a:	f7ff bf31 	b.w	800b7d0 <stage_rfft_f32>
 800b96e:	bf00      	nop

0800b970 <arm_cfft_radix8by2_f32>:
 800b970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b974:	ed2d 8b08 	vpush	{d8-d11}
 800b978:	4607      	mov	r7, r0
 800b97a:	4608      	mov	r0, r1
 800b97c:	f8b7 c000 	ldrh.w	ip, [r7]
 800b980:	687a      	ldr	r2, [r7, #4]
 800b982:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800b986:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800b98a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800b98e:	f000 80b0 	beq.w	800baf2 <arm_cfft_radix8by2_f32+0x182>
 800b992:	008c      	lsls	r4, r1, #2
 800b994:	3410      	adds	r4, #16
 800b996:	f100 0310 	add.w	r3, r0, #16
 800b99a:	1906      	adds	r6, r0, r4
 800b99c:	3210      	adds	r2, #16
 800b99e:	4444      	add	r4, r8
 800b9a0:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800b9a4:	f108 0510 	add.w	r5, r8, #16
 800b9a8:	ed15 2a04 	vldr	s4, [r5, #-16]
 800b9ac:	ed55 2a03 	vldr	s5, [r5, #-12]
 800b9b0:	ed54 4a04 	vldr	s9, [r4, #-16]
 800b9b4:	ed14 4a03 	vldr	s8, [r4, #-12]
 800b9b8:	ed14 6a02 	vldr	s12, [r4, #-8]
 800b9bc:	ed54 5a01 	vldr	s11, [r4, #-4]
 800b9c0:	ed53 3a04 	vldr	s7, [r3, #-16]
 800b9c4:	ed15 0a02 	vldr	s0, [r5, #-8]
 800b9c8:	ed55 0a01 	vldr	s1, [r5, #-4]
 800b9cc:	ed56 6a04 	vldr	s13, [r6, #-16]
 800b9d0:	ed16 3a03 	vldr	s6, [r6, #-12]
 800b9d4:	ed13 7a03 	vldr	s14, [r3, #-12]
 800b9d8:	ed13 5a02 	vldr	s10, [r3, #-8]
 800b9dc:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b9e0:	ed16 1a02 	vldr	s2, [r6, #-8]
 800b9e4:	ed56 1a01 	vldr	s3, [r6, #-4]
 800b9e8:	ee73 ba82 	vadd.f32	s23, s7, s4
 800b9ec:	ee37 ba22 	vadd.f32	s22, s14, s5
 800b9f0:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800b9f4:	ee33 9a04 	vadd.f32	s18, s6, s8
 800b9f8:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800b9fc:	ee75 aa00 	vadd.f32	s21, s10, s0
 800ba00:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800ba04:	ee71 8a06 	vadd.f32	s17, s2, s12
 800ba08:	ed43 ba04 	vstr	s23, [r3, #-16]
 800ba0c:	ed03 ba03 	vstr	s22, [r3, #-12]
 800ba10:	ed43 aa02 	vstr	s21, [r3, #-8]
 800ba14:	ed03 aa01 	vstr	s20, [r3, #-4]
 800ba18:	ed06 8a01 	vstr	s16, [r6, #-4]
 800ba1c:	ed46 9a04 	vstr	s19, [r6, #-16]
 800ba20:	ed06 9a03 	vstr	s18, [r6, #-12]
 800ba24:	ed46 8a02 	vstr	s17, [r6, #-8]
 800ba28:	ee37 7a62 	vsub.f32	s14, s14, s5
 800ba2c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800ba30:	ee34 4a43 	vsub.f32	s8, s8, s6
 800ba34:	ed52 6a03 	vldr	s13, [r2, #-12]
 800ba38:	ed12 3a04 	vldr	s6, [r2, #-16]
 800ba3c:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800ba40:	ee27 8a26 	vmul.f32	s16, s14, s13
 800ba44:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800ba48:	ee23 2a83 	vmul.f32	s4, s7, s6
 800ba4c:	ee64 4a83 	vmul.f32	s9, s9, s6
 800ba50:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800ba54:	ee27 7a03 	vmul.f32	s14, s14, s6
 800ba58:	ee64 6a26 	vmul.f32	s13, s8, s13
 800ba5c:	ee24 4a03 	vmul.f32	s8, s8, s6
 800ba60:	ee37 7a63 	vsub.f32	s14, s14, s7
 800ba64:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800ba68:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800ba6c:	ee32 3a08 	vadd.f32	s6, s4, s16
 800ba70:	ed05 7a03 	vstr	s14, [r5, #-12]
 800ba74:	ed05 3a04 	vstr	s6, [r5, #-16]
 800ba78:	ed04 4a04 	vstr	s8, [r4, #-16]
 800ba7c:	ed44 6a03 	vstr	s13, [r4, #-12]
 800ba80:	ed12 7a01 	vldr	s14, [r2, #-4]
 800ba84:	ee76 6a41 	vsub.f32	s13, s12, s2
 800ba88:	ee35 5a40 	vsub.f32	s10, s10, s0
 800ba8c:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800ba90:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ba94:	ed52 5a02 	vldr	s11, [r2, #-8]
 800ba98:	ee67 3a87 	vmul.f32	s7, s15, s14
 800ba9c:	ee66 4a87 	vmul.f32	s9, s13, s14
 800baa0:	ee25 4a25 	vmul.f32	s8, s10, s11
 800baa4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800baa8:	ee25 5a07 	vmul.f32	s10, s10, s14
 800baac:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800bab0:	ee26 7a07 	vmul.f32	s14, s12, s14
 800bab4:	ee26 6a25 	vmul.f32	s12, s12, s11
 800bab8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800babc:	ee74 5a23 	vadd.f32	s11, s8, s7
 800bac0:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800bac4:	ee37 7a26 	vadd.f32	s14, s14, s13
 800bac8:	3310      	adds	r3, #16
 800baca:	4563      	cmp	r3, ip
 800bacc:	ed45 5a02 	vstr	s11, [r5, #-8]
 800bad0:	f106 0610 	add.w	r6, r6, #16
 800bad4:	ed45 7a01 	vstr	s15, [r5, #-4]
 800bad8:	f102 0210 	add.w	r2, r2, #16
 800badc:	ed04 6a02 	vstr	s12, [r4, #-8]
 800bae0:	ed04 7a01 	vstr	s14, [r4, #-4]
 800bae4:	f105 0510 	add.w	r5, r5, #16
 800bae8:	f104 0410 	add.w	r4, r4, #16
 800baec:	f47f af5c 	bne.w	800b9a8 <arm_cfft_radix8by2_f32+0x38>
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	b28c      	uxth	r4, r1
 800baf4:	4621      	mov	r1, r4
 800baf6:	2302      	movs	r3, #2
 800baf8:	f000 fbc2 	bl	800c280 <arm_radix8_butterfly_f32>
 800bafc:	ecbd 8b08 	vpop	{d8-d11}
 800bb00:	4621      	mov	r1, r4
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	4640      	mov	r0, r8
 800bb06:	2302      	movs	r3, #2
 800bb08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb0c:	f000 bbb8 	b.w	800c280 <arm_radix8_butterfly_f32>

0800bb10 <arm_cfft_radix8by4_f32>:
 800bb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb14:	ed2d 8b0a 	vpush	{d8-d12}
 800bb18:	b08d      	sub	sp, #52	; 0x34
 800bb1a:	460d      	mov	r5, r1
 800bb1c:	910b      	str	r1, [sp, #44]	; 0x2c
 800bb1e:	8801      	ldrh	r1, [r0, #0]
 800bb20:	6842      	ldr	r2, [r0, #4]
 800bb22:	900a      	str	r0, [sp, #40]	; 0x28
 800bb24:	0849      	lsrs	r1, r1, #1
 800bb26:	008b      	lsls	r3, r1, #2
 800bb28:	18ee      	adds	r6, r5, r3
 800bb2a:	18f0      	adds	r0, r6, r3
 800bb2c:	edd0 5a00 	vldr	s11, [r0]
 800bb30:	edd5 7a00 	vldr	s15, [r5]
 800bb34:	ed96 7a00 	vldr	s14, [r6]
 800bb38:	edd0 3a01 	vldr	s7, [r0, #4]
 800bb3c:	ed96 4a01 	vldr	s8, [r6, #4]
 800bb40:	ed95 5a01 	vldr	s10, [r5, #4]
 800bb44:	9008      	str	r0, [sp, #32]
 800bb46:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800bb4a:	18c7      	adds	r7, r0, r3
 800bb4c:	edd7 4a00 	vldr	s9, [r7]
 800bb50:	ed97 3a01 	vldr	s6, [r7, #4]
 800bb54:	9701      	str	r7, [sp, #4]
 800bb56:	ee77 6a06 	vadd.f32	s13, s14, s12
 800bb5a:	462c      	mov	r4, r5
 800bb5c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800bb60:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800bb64:	ee16 ca90 	vmov	ip, s13
 800bb68:	f844 cb08 	str.w	ip, [r4], #8
 800bb6c:	ee75 6a23 	vadd.f32	s13, s10, s7
 800bb70:	edd6 5a01 	vldr	s11, [r6, #4]
 800bb74:	edd7 2a01 	vldr	s5, [r7, #4]
 800bb78:	9404      	str	r4, [sp, #16]
 800bb7a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800bb7e:	ee74 3a27 	vadd.f32	s7, s8, s15
 800bb82:	ee36 6a47 	vsub.f32	s12, s12, s14
 800bb86:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800bb8a:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800bb8e:	0849      	lsrs	r1, r1, #1
 800bb90:	f102 0e08 	add.w	lr, r2, #8
 800bb94:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800bb98:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800bb9c:	9109      	str	r1, [sp, #36]	; 0x24
 800bb9e:	ee35 4a47 	vsub.f32	s8, s10, s14
 800bba2:	f1a1 0902 	sub.w	r9, r1, #2
 800bba6:	f8cd e00c 	str.w	lr, [sp, #12]
 800bbaa:	4631      	mov	r1, r6
 800bbac:	ee13 ea90 	vmov	lr, s7
 800bbb0:	ee36 6a64 	vsub.f32	s12, s12, s9
 800bbb4:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800bbb8:	4604      	mov	r4, r0
 800bbba:	edc5 5a01 	vstr	s11, [r5, #4]
 800bbbe:	ee37 7a05 	vadd.f32	s14, s14, s10
 800bbc2:	f841 eb08 	str.w	lr, [r1], #8
 800bbc6:	ee34 5a24 	vadd.f32	s10, s8, s9
 800bbca:	ee16 ea10 	vmov	lr, s12
 800bbce:	ed86 5a01 	vstr	s10, [r6, #4]
 800bbd2:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800bbd6:	f844 eb08 	str.w	lr, [r4], #8
 800bbda:	ee77 7a83 	vadd.f32	s15, s15, s6
 800bbde:	edc0 6a01 	vstr	s13, [r0, #4]
 800bbe2:	9405      	str	r4, [sp, #20]
 800bbe4:	4604      	mov	r4, r0
 800bbe6:	ee17 0a90 	vmov	r0, s15
 800bbea:	9106      	str	r1, [sp, #24]
 800bbec:	ee37 7a64 	vsub.f32	s14, s14, s9
 800bbf0:	f102 0110 	add.w	r1, r2, #16
 800bbf4:	46bc      	mov	ip, r7
 800bbf6:	9100      	str	r1, [sp, #0]
 800bbf8:	f847 0b08 	str.w	r0, [r7], #8
 800bbfc:	f102 0118 	add.w	r1, r2, #24
 800bc00:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800bc04:	9102      	str	r1, [sp, #8]
 800bc06:	ed8c 7a01 	vstr	s14, [ip, #4]
 800bc0a:	9007      	str	r0, [sp, #28]
 800bc0c:	f000 8134 	beq.w	800be78 <arm_cfft_radix8by4_f32+0x368>
 800bc10:	f102 0920 	add.w	r9, r2, #32
 800bc14:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800bc18:	9a01      	ldr	r2, [sp, #4]
 800bc1a:	f8dd a000 	ldr.w	sl, [sp]
 800bc1e:	3b0c      	subs	r3, #12
 800bc20:	4683      	mov	fp, r0
 800bc22:	4463      	add	r3, ip
 800bc24:	f105 0e10 	add.w	lr, r5, #16
 800bc28:	f1a4 010c 	sub.w	r1, r4, #12
 800bc2c:	f104 0510 	add.w	r5, r4, #16
 800bc30:	f1a6 0c0c 	sub.w	ip, r6, #12
 800bc34:	f1a2 040c 	sub.w	r4, r2, #12
 800bc38:	f106 0010 	add.w	r0, r6, #16
 800bc3c:	3210      	adds	r2, #16
 800bc3e:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800bc42:	ed55 5a02 	vldr	s11, [r5, #-8]
 800bc46:	ed50 7a02 	vldr	s15, [r0, #-8]
 800bc4a:	ed52 1a02 	vldr	s3, [r2, #-8]
 800bc4e:	ed55 6a01 	vldr	s13, [r5, #-4]
 800bc52:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800bc56:	ed12 1a01 	vldr	s2, [r2, #-4]
 800bc5a:	ed10 8a01 	vldr	s16, [r0, #-4]
 800bc5e:	ee35 4a25 	vadd.f32	s8, s10, s11
 800bc62:	ee30 6a26 	vadd.f32	s12, s0, s13
 800bc66:	ee37 7a84 	vadd.f32	s14, s15, s8
 800bc6a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800bc6e:	ee37 7a21 	vadd.f32	s14, s14, s3
 800bc72:	ee75 5a65 	vsub.f32	s11, s10, s11
 800bc76:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800bc7a:	ed10 7a01 	vldr	s14, [r0, #-4]
 800bc7e:	ed52 6a01 	vldr	s13, [r2, #-4]
 800bc82:	ee36 7a07 	vadd.f32	s14, s12, s14
 800bc86:	ee78 aa25 	vadd.f32	s21, s16, s11
 800bc8a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800bc8e:	ee70 3a67 	vsub.f32	s7, s0, s15
 800bc92:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800bc96:	ed94 7a02 	vldr	s14, [r4, #8]
 800bc9a:	ed9c 2a02 	vldr	s4, [ip, #8]
 800bc9e:	ed91 ba02 	vldr	s22, [r1, #8]
 800bca2:	edd3 9a02 	vldr	s19, [r3, #8]
 800bca6:	edd4 2a01 	vldr	s5, [r4, #4]
 800bcaa:	ed9c 9a01 	vldr	s18, [ip, #4]
 800bcae:	ed93 5a01 	vldr	s10, [r3, #4]
 800bcb2:	edd1 0a01 	vldr	s1, [r1, #4]
 800bcb6:	ee72 6a07 	vadd.f32	s13, s4, s14
 800bcba:	ee32 2a47 	vsub.f32	s4, s4, s14
 800bcbe:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800bcc2:	ee79 4a22 	vadd.f32	s9, s18, s5
 800bcc6:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800bcca:	ee79 2a62 	vsub.f32	s5, s18, s5
 800bcce:	ed8c 7a02 	vstr	s14, [ip, #8]
 800bcd2:	ed91 7a01 	vldr	s14, [r1, #4]
 800bcd6:	edd3 8a01 	vldr	s17, [r3, #4]
 800bcda:	ee34 7a87 	vadd.f32	s14, s9, s14
 800bcde:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800bce2:	ee37 7a28 	vadd.f32	s14, s14, s17
 800bce6:	ee32 9a60 	vsub.f32	s18, s4, s1
 800bcea:	ed8c 7a01 	vstr	s14, [ip, #4]
 800bcee:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800bcf2:	ed1a aa02 	vldr	s20, [sl, #-8]
 800bcf6:	ee73 8a22 	vadd.f32	s17, s6, s5
 800bcfa:	ee39 9a05 	vadd.f32	s18, s18, s10
 800bcfe:	ee7a aac1 	vsub.f32	s21, s21, s2
 800bd02:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800bd06:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800bd0a:	ee69 ba07 	vmul.f32	s23, s18, s14
 800bd0e:	ee6a aa87 	vmul.f32	s21, s21, s14
 800bd12:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800bd16:	ee63 ca87 	vmul.f32	s25, s7, s14
 800bd1a:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800bd1e:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800bd22:	ee68 8a87 	vmul.f32	s17, s17, s14
 800bd26:	ee73 3aea 	vsub.f32	s7, s7, s21
 800bd2a:	ee78 8a89 	vadd.f32	s17, s17, s18
 800bd2e:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800bd32:	ee3b aaca 	vsub.f32	s20, s23, s20
 800bd36:	ee34 4a67 	vsub.f32	s8, s8, s15
 800bd3a:	ee76 6acb 	vsub.f32	s13, s13, s22
 800bd3e:	ee36 6a48 	vsub.f32	s12, s12, s16
 800bd42:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800bd46:	ed00 7a02 	vstr	s14, [r0, #-8]
 800bd4a:	ed40 3a01 	vstr	s7, [r0, #-4]
 800bd4e:	edc1 8a01 	vstr	s17, [r1, #4]
 800bd52:	ed81 aa02 	vstr	s20, [r1, #8]
 800bd56:	ed59 3a04 	vldr	s7, [r9, #-16]
 800bd5a:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800bd5e:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800bd62:	ed59 6a03 	vldr	s13, [r9, #-12]
 800bd66:	ee34 4a61 	vsub.f32	s8, s8, s3
 800bd6a:	ee36 6a41 	vsub.f32	s12, s12, s2
 800bd6e:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800bd72:	ee66 9a26 	vmul.f32	s19, s12, s13
 800bd76:	ee24 9a23 	vmul.f32	s18, s8, s7
 800bd7a:	ee26 6a23 	vmul.f32	s12, s12, s7
 800bd7e:	ee24 4a26 	vmul.f32	s8, s8, s13
 800bd82:	ee27 7a26 	vmul.f32	s14, s14, s13
 800bd86:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800bd8a:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800bd8e:	ee36 6a44 	vsub.f32	s12, s12, s8
 800bd92:	ee37 7a64 	vsub.f32	s14, s14, s9
 800bd96:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800bd9a:	ee79 3a29 	vadd.f32	s7, s18, s19
 800bd9e:	ee75 6a60 	vsub.f32	s13, s10, s1
 800bda2:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800bda6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800bdaa:	ed45 3a02 	vstr	s7, [r5, #-8]
 800bdae:	ed05 6a01 	vstr	s12, [r5, #-4]
 800bdb2:	ed84 7a01 	vstr	s14, [r4, #4]
 800bdb6:	ed84 4a02 	vstr	s8, [r4, #8]
 800bdba:	ee35 6a81 	vadd.f32	s12, s11, s2
 800bdbe:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800bdc2:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800bdc6:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800bdca:	ee33 3a62 	vsub.f32	s6, s6, s5
 800bdce:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800bdd2:	ee67 2a26 	vmul.f32	s5, s14, s13
 800bdd6:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800bdda:	ee26 5a25 	vmul.f32	s10, s12, s11
 800bdde:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800bde2:	ee26 6a26 	vmul.f32	s12, s12, s13
 800bde6:	ee27 7a25 	vmul.f32	s14, s14, s11
 800bdea:	ee63 6a26 	vmul.f32	s13, s6, s13
 800bdee:	ee23 3a25 	vmul.f32	s6, s6, s11
 800bdf2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800bdf6:	ee75 5a24 	vadd.f32	s11, s10, s9
 800bdfa:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800bdfe:	ee36 7a87 	vadd.f32	s14, s13, s14
 800be02:	f1bb 0b01 	subs.w	fp, fp, #1
 800be06:	ed42 5a02 	vstr	s11, [r2, #-8]
 800be0a:	ed42 7a01 	vstr	s15, [r2, #-4]
 800be0e:	f10e 0e08 	add.w	lr, lr, #8
 800be12:	ed83 3a02 	vstr	s6, [r3, #8]
 800be16:	ed83 7a01 	vstr	s14, [r3, #4]
 800be1a:	f1ac 0c08 	sub.w	ip, ip, #8
 800be1e:	f10a 0a08 	add.w	sl, sl, #8
 800be22:	f100 0008 	add.w	r0, r0, #8
 800be26:	f1a1 0108 	sub.w	r1, r1, #8
 800be2a:	f109 0910 	add.w	r9, r9, #16
 800be2e:	f105 0508 	add.w	r5, r5, #8
 800be32:	f1a4 0408 	sub.w	r4, r4, #8
 800be36:	f108 0818 	add.w	r8, r8, #24
 800be3a:	f102 0208 	add.w	r2, r2, #8
 800be3e:	f1a3 0308 	sub.w	r3, r3, #8
 800be42:	f47f aefc 	bne.w	800bc3e <arm_cfft_radix8by4_f32+0x12e>
 800be46:	9907      	ldr	r1, [sp, #28]
 800be48:	9800      	ldr	r0, [sp, #0]
 800be4a:	00cb      	lsls	r3, r1, #3
 800be4c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800be50:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800be54:	9100      	str	r1, [sp, #0]
 800be56:	9904      	ldr	r1, [sp, #16]
 800be58:	4419      	add	r1, r3
 800be5a:	9104      	str	r1, [sp, #16]
 800be5c:	9903      	ldr	r1, [sp, #12]
 800be5e:	4419      	add	r1, r3
 800be60:	9103      	str	r1, [sp, #12]
 800be62:	9906      	ldr	r1, [sp, #24]
 800be64:	4419      	add	r1, r3
 800be66:	9106      	str	r1, [sp, #24]
 800be68:	9905      	ldr	r1, [sp, #20]
 800be6a:	441f      	add	r7, r3
 800be6c:	4419      	add	r1, r3
 800be6e:	9b02      	ldr	r3, [sp, #8]
 800be70:	9105      	str	r1, [sp, #20]
 800be72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be76:	9302      	str	r3, [sp, #8]
 800be78:	9904      	ldr	r1, [sp, #16]
 800be7a:	9805      	ldr	r0, [sp, #20]
 800be7c:	ed91 4a00 	vldr	s8, [r1]
 800be80:	edd0 6a00 	vldr	s13, [r0]
 800be84:	9b06      	ldr	r3, [sp, #24]
 800be86:	ed97 3a00 	vldr	s6, [r7]
 800be8a:	edd3 7a00 	vldr	s15, [r3]
 800be8e:	edd0 4a01 	vldr	s9, [r0, #4]
 800be92:	edd1 3a01 	vldr	s7, [r1, #4]
 800be96:	ed97 2a01 	vldr	s4, [r7, #4]
 800be9a:	ed93 7a01 	vldr	s14, [r3, #4]
 800be9e:	9a03      	ldr	r2, [sp, #12]
 800bea0:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800bea4:	ee34 6a26 	vadd.f32	s12, s8, s13
 800bea8:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800beac:	ee37 5a86 	vadd.f32	s10, s15, s12
 800beb0:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800beb4:	ee35 5a03 	vadd.f32	s10, s10, s6
 800beb8:	ee74 6a66 	vsub.f32	s13, s8, s13
 800bebc:	ed81 5a00 	vstr	s10, [r1]
 800bec0:	ed93 5a01 	vldr	s10, [r3, #4]
 800bec4:	edd7 4a01 	vldr	s9, [r7, #4]
 800bec8:	ee35 5a85 	vadd.f32	s10, s11, s10
 800becc:	ee37 4a26 	vadd.f32	s8, s14, s13
 800bed0:	ee35 5a24 	vadd.f32	s10, s10, s9
 800bed4:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800bed8:	ed81 5a01 	vstr	s10, [r1, #4]
 800bedc:	edd2 1a00 	vldr	s3, [r2]
 800bee0:	edd2 2a01 	vldr	s5, [r2, #4]
 800bee4:	ee34 5a83 	vadd.f32	s10, s9, s6
 800bee8:	ee34 4a42 	vsub.f32	s8, s8, s4
 800beec:	ee36 6a67 	vsub.f32	s12, s12, s15
 800bef0:	ee64 4a21 	vmul.f32	s9, s8, s3
 800bef4:	ee24 4a22 	vmul.f32	s8, s8, s5
 800bef8:	ee65 2a22 	vmul.f32	s5, s10, s5
 800befc:	ee25 5a21 	vmul.f32	s10, s10, s3
 800bf00:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800bf04:	ee35 5a44 	vsub.f32	s10, s10, s8
 800bf08:	edc3 2a00 	vstr	s5, [r3]
 800bf0c:	ed83 5a01 	vstr	s10, [r3, #4]
 800bf10:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800bf14:	9b00      	ldr	r3, [sp, #0]
 800bf16:	ee36 6a43 	vsub.f32	s12, s12, s6
 800bf1a:	ed93 4a01 	vldr	s8, [r3, #4]
 800bf1e:	ed93 5a00 	vldr	s10, [r3]
 800bf22:	9b02      	ldr	r3, [sp, #8]
 800bf24:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800bf28:	ee66 4a05 	vmul.f32	s9, s12, s10
 800bf2c:	ee25 5a85 	vmul.f32	s10, s11, s10
 800bf30:	ee26 6a04 	vmul.f32	s12, s12, s8
 800bf34:	ee65 5a84 	vmul.f32	s11, s11, s8
 800bf38:	ee35 6a46 	vsub.f32	s12, s10, s12
 800bf3c:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800bf40:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800bf44:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800bf48:	ed80 6a01 	vstr	s12, [r0, #4]
 800bf4c:	edc0 5a00 	vstr	s11, [r0]
 800bf50:	edd3 5a01 	vldr	s11, [r3, #4]
 800bf54:	edd3 6a00 	vldr	s13, [r3]
 800bf58:	ee37 7a02 	vadd.f32	s14, s14, s4
 800bf5c:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800bf60:	ee27 6a26 	vmul.f32	s12, s14, s13
 800bf64:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800bf68:	ee27 7a25 	vmul.f32	s14, s14, s11
 800bf6c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800bf70:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800bf74:	ee76 7a27 	vadd.f32	s15, s12, s15
 800bf78:	ed87 7a01 	vstr	s14, [r7, #4]
 800bf7c:	edc7 7a00 	vstr	s15, [r7]
 800bf80:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800bf84:	4621      	mov	r1, r4
 800bf86:	686a      	ldr	r2, [r5, #4]
 800bf88:	2304      	movs	r3, #4
 800bf8a:	f000 f979 	bl	800c280 <arm_radix8_butterfly_f32>
 800bf8e:	4630      	mov	r0, r6
 800bf90:	4621      	mov	r1, r4
 800bf92:	686a      	ldr	r2, [r5, #4]
 800bf94:	2304      	movs	r3, #4
 800bf96:	f000 f973 	bl	800c280 <arm_radix8_butterfly_f32>
 800bf9a:	9808      	ldr	r0, [sp, #32]
 800bf9c:	686a      	ldr	r2, [r5, #4]
 800bf9e:	4621      	mov	r1, r4
 800bfa0:	2304      	movs	r3, #4
 800bfa2:	f000 f96d 	bl	800c280 <arm_radix8_butterfly_f32>
 800bfa6:	686a      	ldr	r2, [r5, #4]
 800bfa8:	9801      	ldr	r0, [sp, #4]
 800bfaa:	4621      	mov	r1, r4
 800bfac:	2304      	movs	r3, #4
 800bfae:	b00d      	add	sp, #52	; 0x34
 800bfb0:	ecbd 8b0a 	vpop	{d8-d12}
 800bfb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb8:	f000 b962 	b.w	800c280 <arm_radix8_butterfly_f32>

0800bfbc <arm_cfft_f32>:
 800bfbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfc0:	2a01      	cmp	r2, #1
 800bfc2:	4606      	mov	r6, r0
 800bfc4:	4617      	mov	r7, r2
 800bfc6:	460c      	mov	r4, r1
 800bfc8:	4698      	mov	r8, r3
 800bfca:	8805      	ldrh	r5, [r0, #0]
 800bfcc:	d056      	beq.n	800c07c <arm_cfft_f32+0xc0>
 800bfce:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800bfd2:	d063      	beq.n	800c09c <arm_cfft_f32+0xe0>
 800bfd4:	d916      	bls.n	800c004 <arm_cfft_f32+0x48>
 800bfd6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800bfda:	d01a      	beq.n	800c012 <arm_cfft_f32+0x56>
 800bfdc:	d947      	bls.n	800c06e <arm_cfft_f32+0xb2>
 800bfde:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800bfe2:	d05b      	beq.n	800c09c <arm_cfft_f32+0xe0>
 800bfe4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800bfe8:	d105      	bne.n	800bff6 <arm_cfft_f32+0x3a>
 800bfea:	2301      	movs	r3, #1
 800bfec:	6872      	ldr	r2, [r6, #4]
 800bfee:	4629      	mov	r1, r5
 800bff0:	4620      	mov	r0, r4
 800bff2:	f000 f945 	bl	800c280 <arm_radix8_butterfly_f32>
 800bff6:	f1b8 0f00 	cmp.w	r8, #0
 800bffa:	d111      	bne.n	800c020 <arm_cfft_f32+0x64>
 800bffc:	2f01      	cmp	r7, #1
 800bffe:	d016      	beq.n	800c02e <arm_cfft_f32+0x72>
 800c000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c004:	2d20      	cmp	r5, #32
 800c006:	d049      	beq.n	800c09c <arm_cfft_f32+0xe0>
 800c008:	d935      	bls.n	800c076 <arm_cfft_f32+0xba>
 800c00a:	2d40      	cmp	r5, #64	; 0x40
 800c00c:	d0ed      	beq.n	800bfea <arm_cfft_f32+0x2e>
 800c00e:	2d80      	cmp	r5, #128	; 0x80
 800c010:	d1f1      	bne.n	800bff6 <arm_cfft_f32+0x3a>
 800c012:	4621      	mov	r1, r4
 800c014:	4630      	mov	r0, r6
 800c016:	f7ff fcab 	bl	800b970 <arm_cfft_radix8by2_f32>
 800c01a:	f1b8 0f00 	cmp.w	r8, #0
 800c01e:	d0ed      	beq.n	800bffc <arm_cfft_f32+0x40>
 800c020:	68b2      	ldr	r2, [r6, #8]
 800c022:	89b1      	ldrh	r1, [r6, #12]
 800c024:	4620      	mov	r0, r4
 800c026:	f000 f841 	bl	800c0ac <arm_bitreversal_32>
 800c02a:	2f01      	cmp	r7, #1
 800c02c:	d1e8      	bne.n	800c000 <arm_cfft_f32+0x44>
 800c02e:	ee07 5a90 	vmov	s15, r5
 800c032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c036:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c03a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c03e:	2d00      	cmp	r5, #0
 800c040:	d0de      	beq.n	800c000 <arm_cfft_f32+0x44>
 800c042:	f104 0108 	add.w	r1, r4, #8
 800c046:	2300      	movs	r3, #0
 800c048:	3301      	adds	r3, #1
 800c04a:	429d      	cmp	r5, r3
 800c04c:	f101 0108 	add.w	r1, r1, #8
 800c050:	ed11 7a04 	vldr	s14, [r1, #-16]
 800c054:	ed51 7a03 	vldr	s15, [r1, #-12]
 800c058:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c05c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c060:	ed01 7a04 	vstr	s14, [r1, #-16]
 800c064:	ed41 7a03 	vstr	s15, [r1, #-12]
 800c068:	d1ee      	bne.n	800c048 <arm_cfft_f32+0x8c>
 800c06a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c06e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800c072:	d0ba      	beq.n	800bfea <arm_cfft_f32+0x2e>
 800c074:	e7bf      	b.n	800bff6 <arm_cfft_f32+0x3a>
 800c076:	2d10      	cmp	r5, #16
 800c078:	d0cb      	beq.n	800c012 <arm_cfft_f32+0x56>
 800c07a:	e7bc      	b.n	800bff6 <arm_cfft_f32+0x3a>
 800c07c:	b19d      	cbz	r5, 800c0a6 <arm_cfft_f32+0xea>
 800c07e:	f101 030c 	add.w	r3, r1, #12
 800c082:	2200      	movs	r2, #0
 800c084:	ed53 7a02 	vldr	s15, [r3, #-8]
 800c088:	3201      	adds	r2, #1
 800c08a:	eef1 7a67 	vneg.f32	s15, s15
 800c08e:	4295      	cmp	r5, r2
 800c090:	ed43 7a02 	vstr	s15, [r3, #-8]
 800c094:	f103 0308 	add.w	r3, r3, #8
 800c098:	d1f4      	bne.n	800c084 <arm_cfft_f32+0xc8>
 800c09a:	e798      	b.n	800bfce <arm_cfft_f32+0x12>
 800c09c:	4621      	mov	r1, r4
 800c09e:	4630      	mov	r0, r6
 800c0a0:	f7ff fd36 	bl	800bb10 <arm_cfft_radix8by4_f32>
 800c0a4:	e7a7      	b.n	800bff6 <arm_cfft_f32+0x3a>
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d0aa      	beq.n	800c000 <arm_cfft_f32+0x44>
 800c0aa:	e7b9      	b.n	800c020 <arm_cfft_f32+0x64>

0800c0ac <arm_bitreversal_32>:
 800c0ac:	b1e9      	cbz	r1, 800c0ea <arm_bitreversal_32+0x3e>
 800c0ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0b0:	2500      	movs	r5, #0
 800c0b2:	f102 0e02 	add.w	lr, r2, #2
 800c0b6:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800c0ba:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800c0be:	08a4      	lsrs	r4, r4, #2
 800c0c0:	089b      	lsrs	r3, r3, #2
 800c0c2:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800c0c6:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800c0ca:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800c0ce:	00a6      	lsls	r6, r4, #2
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800c0d6:	3304      	adds	r3, #4
 800c0d8:	1d34      	adds	r4, r6, #4
 800c0da:	3502      	adds	r5, #2
 800c0dc:	58c6      	ldr	r6, [r0, r3]
 800c0de:	5907      	ldr	r7, [r0, r4]
 800c0e0:	50c7      	str	r7, [r0, r3]
 800c0e2:	428d      	cmp	r5, r1
 800c0e4:	5106      	str	r6, [r0, r4]
 800c0e6:	d3e6      	bcc.n	800c0b6 <arm_bitreversal_32+0xa>
 800c0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0ea:	4770      	bx	lr

0800c0ec <arm_cmplx_mag_squared_f32>:
 800c0ec:	b470      	push	{r4, r5, r6}
 800c0ee:	0896      	lsrs	r6, r2, #2
 800c0f0:	d03e      	beq.n	800c170 <arm_cmplx_mag_squared_f32+0x84>
 800c0f2:	f100 0320 	add.w	r3, r0, #32
 800c0f6:	f101 0410 	add.w	r4, r1, #16
 800c0fa:	4635      	mov	r5, r6
 800c0fc:	ed53 7a08 	vldr	s15, [r3, #-32]	; 0xffffffe0
 800c100:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 800c104:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c108:	ee27 7a07 	vmul.f32	s14, s14, s14
 800c10c:	3d01      	subs	r5, #1
 800c10e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c112:	f103 0320 	add.w	r3, r3, #32
 800c116:	ed44 7a04 	vstr	s15, [r4, #-16]
 800c11a:	ed53 7a0e 	vldr	s15, [r3, #-56]	; 0xffffffc8
 800c11e:	ed13 7a0d 	vldr	s14, [r3, #-52]	; 0xffffffcc
 800c122:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c126:	ee27 7a07 	vmul.f32	s14, s14, s14
 800c12a:	f104 0410 	add.w	r4, r4, #16
 800c12e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c132:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 800c136:	ed53 7a0c 	vldr	s15, [r3, #-48]	; 0xffffffd0
 800c13a:	ed13 7a0b 	vldr	s14, [r3, #-44]	; 0xffffffd4
 800c13e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c142:	ee27 7a07 	vmul.f32	s14, s14, s14
 800c146:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c14a:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 800c14e:	ed53 7a0a 	vldr	s15, [r3, #-40]	; 0xffffffd8
 800c152:	ed13 7a09 	vldr	s14, [r3, #-36]	; 0xffffffdc
 800c156:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c15a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800c15e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c162:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800c166:	d1c9      	bne.n	800c0fc <arm_cmplx_mag_squared_f32+0x10>
 800c168:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 800c16c:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800c170:	f012 0203 	ands.w	r2, r2, #3
 800c174:	d027      	beq.n	800c1c6 <arm_cmplx_mag_squared_f32+0xda>
 800c176:	ed90 7a00 	vldr	s14, [r0]
 800c17a:	edd0 7a01 	vldr	s15, [r0, #4]
 800c17e:	ee27 7a07 	vmul.f32	s14, s14, s14
 800c182:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c186:	3a01      	subs	r2, #1
 800c188:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c18c:	edc1 7a00 	vstr	s15, [r1]
 800c190:	d019      	beq.n	800c1c6 <arm_cmplx_mag_squared_f32+0xda>
 800c192:	edd0 7a02 	vldr	s15, [r0, #8]
 800c196:	ed90 7a03 	vldr	s14, [r0, #12]
 800c19a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c19e:	ee27 7a07 	vmul.f32	s14, s14, s14
 800c1a2:	2a01      	cmp	r2, #1
 800c1a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c1a8:	edc1 7a01 	vstr	s15, [r1, #4]
 800c1ac:	d00b      	beq.n	800c1c6 <arm_cmplx_mag_squared_f32+0xda>
 800c1ae:	edd0 7a04 	vldr	s15, [r0, #16]
 800c1b2:	ed90 7a05 	vldr	s14, [r0, #20]
 800c1b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c1ba:	ee27 7a07 	vmul.f32	s14, s14, s14
 800c1be:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c1c2:	edc1 7a02 	vstr	s15, [r1, #8]
 800c1c6:	bc70      	pop	{r4, r5, r6}
 800c1c8:	4770      	bx	lr
 800c1ca:	bf00      	nop

0800c1cc <arm_mult_f32>:
 800c1cc:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 800c1d0:	b4f0      	push	{r4, r5, r6, r7}
 800c1d2:	d033      	beq.n	800c23c <arm_mult_f32+0x70>
 800c1d4:	f100 0610 	add.w	r6, r0, #16
 800c1d8:	f101 0510 	add.w	r5, r1, #16
 800c1dc:	f102 0410 	add.w	r4, r2, #16
 800c1e0:	4667      	mov	r7, ip
 800c1e2:	ed15 7a04 	vldr	s14, [r5, #-16]
 800c1e6:	ed56 7a04 	vldr	s15, [r6, #-16]
 800c1ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c1ee:	3f01      	subs	r7, #1
 800c1f0:	ed44 7a04 	vstr	s15, [r4, #-16]
 800c1f4:	ed15 7a03 	vldr	s14, [r5, #-12]
 800c1f8:	ed56 7a03 	vldr	s15, [r6, #-12]
 800c1fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c200:	f106 0610 	add.w	r6, r6, #16
 800c204:	ed44 7a03 	vstr	s15, [r4, #-12]
 800c208:	ed15 7a02 	vldr	s14, [r5, #-8]
 800c20c:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800c210:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c214:	f105 0510 	add.w	r5, r5, #16
 800c218:	ed44 7a02 	vstr	s15, [r4, #-8]
 800c21c:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 800c220:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 800c224:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c228:	f104 0410 	add.w	r4, r4, #16
 800c22c:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800c230:	d1d7      	bne.n	800c1e2 <arm_mult_f32+0x16>
 800c232:	ea4f 140c 	mov.w	r4, ip, lsl #4
 800c236:	4420      	add	r0, r4
 800c238:	4421      	add	r1, r4
 800c23a:	4422      	add	r2, r4
 800c23c:	f013 0303 	ands.w	r3, r3, #3
 800c240:	d01b      	beq.n	800c27a <arm_mult_f32+0xae>
 800c242:	edd1 7a00 	vldr	s15, [r1]
 800c246:	ed90 7a00 	vldr	s14, [r0]
 800c24a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c24e:	3b01      	subs	r3, #1
 800c250:	edc2 7a00 	vstr	s15, [r2]
 800c254:	d011      	beq.n	800c27a <arm_mult_f32+0xae>
 800c256:	edd0 7a01 	vldr	s15, [r0, #4]
 800c25a:	ed91 7a01 	vldr	s14, [r1, #4]
 800c25e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c262:	2b01      	cmp	r3, #1
 800c264:	edc2 7a01 	vstr	s15, [r2, #4]
 800c268:	d007      	beq.n	800c27a <arm_mult_f32+0xae>
 800c26a:	edd0 7a02 	vldr	s15, [r0, #8]
 800c26e:	ed91 7a02 	vldr	s14, [r1, #8]
 800c272:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c276:	edc2 7a02 	vstr	s15, [r2, #8]
 800c27a:	bcf0      	pop	{r4, r5, r6, r7}
 800c27c:	4770      	bx	lr
 800c27e:	bf00      	nop

0800c280 <arm_radix8_butterfly_f32>:
 800c280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c284:	ed2d 8b10 	vpush	{d8-d15}
 800c288:	b095      	sub	sp, #84	; 0x54
 800c28a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800c28e:	4603      	mov	r3, r0
 800c290:	3304      	adds	r3, #4
 800c292:	ed9f bab9 	vldr	s22, [pc, #740]	; 800c578 <arm_radix8_butterfly_f32+0x2f8>
 800c296:	9012      	str	r0, [sp, #72]	; 0x48
 800c298:	468b      	mov	fp, r1
 800c29a:	9313      	str	r3, [sp, #76]	; 0x4c
 800c29c:	4689      	mov	r9, r1
 800c29e:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800c2a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c2a4:	960f      	str	r6, [sp, #60]	; 0x3c
 800c2a6:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800c2aa:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800c2ae:	eb03 0508 	add.w	r5, r3, r8
 800c2b2:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800c2b6:	eb05 040e 	add.w	r4, r5, lr
 800c2ba:	0137      	lsls	r7, r6, #4
 800c2bc:	eba6 030a 	sub.w	r3, r6, sl
 800c2c0:	eb04 000e 	add.w	r0, r4, lr
 800c2c4:	44b2      	add	sl, r6
 800c2c6:	1d3a      	adds	r2, r7, #4
 800c2c8:	9702      	str	r7, [sp, #8]
 800c2ca:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800c2ce:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800c2d2:	ebae 0c06 	sub.w	ip, lr, r6
 800c2d6:	9703      	str	r7, [sp, #12]
 800c2d8:	eb03 0708 	add.w	r7, r3, r8
 800c2dc:	9701      	str	r7, [sp, #4]
 800c2de:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800c2e2:	9706      	str	r7, [sp, #24]
 800c2e4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800c2e6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800c2ea:	f10e 0104 	add.w	r1, lr, #4
 800c2ee:	4439      	add	r1, r7
 800c2f0:	443a      	add	r2, r7
 800c2f2:	0137      	lsls	r7, r6, #4
 800c2f4:	00f6      	lsls	r6, r6, #3
 800c2f6:	9704      	str	r7, [sp, #16]
 800c2f8:	9605      	str	r6, [sp, #20]
 800c2fa:	9f01      	ldr	r7, [sp, #4]
 800c2fc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800c2fe:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800c302:	f04f 0c00 	mov.w	ip, #0
 800c306:	edd4 6a00 	vldr	s13, [r4]
 800c30a:	edd7 1a00 	vldr	s3, [r7]
 800c30e:	ed16 aa01 	vldr	s20, [r6, #-4]
 800c312:	edd5 5a00 	vldr	s11, [r5]
 800c316:	ed52 9a01 	vldr	s19, [r2, #-4]
 800c31a:	ed90 6a00 	vldr	s12, [r0]
 800c31e:	ed51 7a01 	vldr	s15, [r1, #-4]
 800c322:	ed93 3a00 	vldr	s6, [r3]
 800c326:	ee39 0a86 	vadd.f32	s0, s19, s12
 800c32a:	ee33 2a21 	vadd.f32	s4, s6, s3
 800c32e:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800c332:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800c336:	ee35 7a02 	vadd.f32	s14, s10, s4
 800c33a:	ee34 4a80 	vadd.f32	s8, s9, s0
 800c33e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c342:	ee74 6a07 	vadd.f32	s13, s8, s14
 800c346:	ee34 4a47 	vsub.f32	s8, s8, s14
 800c34a:	ed46 6a01 	vstr	s13, [r6, #-4]
 800c34e:	ed85 4a00 	vstr	s8, [r5]
 800c352:	edd1 6a00 	vldr	s13, [r1]
 800c356:	ed94 9a01 	vldr	s18, [r4, #4]
 800c35a:	edd3 2a01 	vldr	s5, [r3, #4]
 800c35e:	edd7 8a01 	vldr	s17, [r7, #4]
 800c362:	edd6 0a00 	vldr	s1, [r6]
 800c366:	edd5 3a01 	vldr	s7, [r5, #4]
 800c36a:	ed90 8a01 	vldr	s16, [r0, #4]
 800c36e:	ed92 7a00 	vldr	s14, [r2]
 800c372:	ee33 3a61 	vsub.f32	s6, s6, s3
 800c376:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800c37a:	ee72 aae8 	vsub.f32	s21, s5, s17
 800c37e:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800c382:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800c386:	ee77 7a83 	vadd.f32	s15, s15, s6
 800c38a:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800c38e:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800c392:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800c396:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800c39a:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800c39e:	ee77 0a08 	vadd.f32	s1, s14, s16
 800c3a2:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800c3a6:	ee37 7a48 	vsub.f32	s14, s14, s16
 800c3aa:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800c3ae:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800c3b2:	ee76 6a89 	vadd.f32	s13, s13, s18
 800c3b6:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800c3ba:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800c3be:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800c3c2:	ee35 5a42 	vsub.f32	s10, s10, s4
 800c3c6:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800c3ca:	ee33 2a20 	vadd.f32	s4, s6, s1
 800c3ce:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800c3d2:	ee33 3a60 	vsub.f32	s6, s6, s1
 800c3d6:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800c3da:	ee77 0a01 	vadd.f32	s1, s14, s2
 800c3de:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800c3e2:	ee37 7a41 	vsub.f32	s14, s14, s2
 800c3e6:	ee73 1a84 	vadd.f32	s3, s7, s8
 800c3ea:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800c3ee:	ee76 3a27 	vadd.f32	s7, s12, s15
 800c3f2:	ee76 7a67 	vsub.f32	s15, s12, s15
 800c3f6:	ee32 8a00 	vadd.f32	s16, s4, s0
 800c3fa:	ee33 1a45 	vsub.f32	s2, s6, s10
 800c3fe:	ee32 2a40 	vsub.f32	s4, s4, s0
 800c402:	ee35 5a03 	vadd.f32	s10, s10, s6
 800c406:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800c40a:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800c40e:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800c412:	ee34 6a67 	vsub.f32	s12, s8, s15
 800c416:	ee75 4a87 	vadd.f32	s9, s11, s14
 800c41a:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800c41e:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800c422:	ee77 7a84 	vadd.f32	s15, s15, s8
 800c426:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800c42a:	44dc      	add	ip, fp
 800c42c:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800c430:	45e1      	cmp	r9, ip
 800c432:	ed86 8a00 	vstr	s16, [r6]
 800c436:	ed85 2a01 	vstr	s4, [r5, #4]
 800c43a:	4456      	add	r6, sl
 800c43c:	ed02 0a01 	vstr	s0, [r2, #-4]
 800c440:	4455      	add	r5, sl
 800c442:	edc0 6a00 	vstr	s13, [r0]
 800c446:	ed82 1a00 	vstr	s2, [r2]
 800c44a:	ed80 5a01 	vstr	s10, [r0, #4]
 800c44e:	4452      	add	r2, sl
 800c450:	ed01 3a01 	vstr	s6, [r1, #-4]
 800c454:	4450      	add	r0, sl
 800c456:	edc7 2a00 	vstr	s5, [r7]
 800c45a:	edc4 4a00 	vstr	s9, [r4]
 800c45e:	ed83 7a00 	vstr	s14, [r3]
 800c462:	edc1 5a00 	vstr	s11, [r1]
 800c466:	edc7 3a01 	vstr	s7, [r7, #4]
 800c46a:	4451      	add	r1, sl
 800c46c:	ed84 6a01 	vstr	s12, [r4, #4]
 800c470:	4457      	add	r7, sl
 800c472:	edc3 7a01 	vstr	s15, [r3, #4]
 800c476:	4454      	add	r4, sl
 800c478:	4453      	add	r3, sl
 800c47a:	f63f af44 	bhi.w	800c306 <arm_radix8_butterfly_f32+0x86>
 800c47e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c480:	2b07      	cmp	r3, #7
 800c482:	f240 81b7 	bls.w	800c7f4 <arm_radix8_butterfly_f32+0x574>
 800c486:	9b06      	ldr	r3, [sp, #24]
 800c488:	9903      	ldr	r1, [sp, #12]
 800c48a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c48c:	9e05      	ldr	r6, [sp, #20]
 800c48e:	9a04      	ldr	r2, [sp, #16]
 800c490:	f103 0c08 	add.w	ip, r3, #8
 800c494:	9b02      	ldr	r3, [sp, #8]
 800c496:	3108      	adds	r1, #8
 800c498:	f108 0808 	add.w	r8, r8, #8
 800c49c:	1841      	adds	r1, r0, r1
 800c49e:	3608      	adds	r6, #8
 800c4a0:	330c      	adds	r3, #12
 800c4a2:	4604      	mov	r4, r0
 800c4a4:	4444      	add	r4, r8
 800c4a6:	18c3      	adds	r3, r0, r3
 800c4a8:	9109      	str	r1, [sp, #36]	; 0x24
 800c4aa:	1981      	adds	r1, r0, r6
 800c4ac:	f10e 0e08 	add.w	lr, lr, #8
 800c4b0:	3208      	adds	r2, #8
 800c4b2:	940b      	str	r4, [sp, #44]	; 0x2c
 800c4b4:	9107      	str	r1, [sp, #28]
 800c4b6:	4604      	mov	r4, r0
 800c4b8:	4601      	mov	r1, r0
 800c4ba:	9304      	str	r3, [sp, #16]
 800c4bc:	f100 030c 	add.w	r3, r0, #12
 800c4c0:	4474      	add	r4, lr
 800c4c2:	f04f 0801 	mov.w	r8, #1
 800c4c6:	1882      	adds	r2, r0, r2
 800c4c8:	4461      	add	r1, ip
 800c4ca:	9305      	str	r3, [sp, #20]
 800c4cc:	464b      	mov	r3, r9
 800c4ce:	940a      	str	r4, [sp, #40]	; 0x28
 800c4d0:	46c1      	mov	r9, r8
 800c4d2:	9208      	str	r2, [sp, #32]
 800c4d4:	46d8      	mov	r8, fp
 800c4d6:	9106      	str	r1, [sp, #24]
 800c4d8:	f04f 0e00 	mov.w	lr, #0
 800c4dc:	469b      	mov	fp, r3
 800c4de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c4e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c4e2:	449e      	add	lr, r3
 800c4e4:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800c4e8:	441a      	add	r2, r3
 800c4ea:	920e      	str	r2, [sp, #56]	; 0x38
 800c4ec:	441a      	add	r2, r3
 800c4ee:	18d4      	adds	r4, r2, r3
 800c4f0:	18e5      	adds	r5, r4, r3
 800c4f2:	18ee      	adds	r6, r5, r3
 800c4f4:	18f7      	adds	r7, r6, r3
 800c4f6:	eb07 0c03 	add.w	ip, r7, r3
 800c4fa:	920d      	str	r2, [sp, #52]	; 0x34
 800c4fc:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800c500:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800c504:	910c      	str	r1, [sp, #48]	; 0x30
 800c506:	4419      	add	r1, r3
 800c508:	9103      	str	r1, [sp, #12]
 800c50a:	4419      	add	r1, r3
 800c50c:	18ca      	adds	r2, r1, r3
 800c50e:	9202      	str	r2, [sp, #8]
 800c510:	441a      	add	r2, r3
 800c512:	18d0      	adds	r0, r2, r3
 800c514:	ed92 ea01 	vldr	s28, [r2, #4]
 800c518:	9a02      	ldr	r2, [sp, #8]
 800c51a:	edd4 7a00 	vldr	s15, [r4]
 800c51e:	edd2 da01 	vldr	s27, [r2, #4]
 800c522:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c524:	ed91 da01 	vldr	s26, [r1, #4]
 800c528:	ed92 ca01 	vldr	s24, [r2, #4]
 800c52c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c52e:	9903      	ldr	r1, [sp, #12]
 800c530:	edcd 7a03 	vstr	s15, [sp, #12]
 800c534:	edd2 7a00 	vldr	s15, [r2]
 800c538:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c53a:	edcd 7a02 	vstr	s15, [sp, #8]
 800c53e:	edd2 7a00 	vldr	s15, [r2]
 800c542:	edd0 ea01 	vldr	s29, [r0, #4]
 800c546:	edd1 ca01 	vldr	s25, [r1, #4]
 800c54a:	eddc ba00 	vldr	s23, [ip]
 800c54e:	edd7 aa00 	vldr	s21, [r7]
 800c552:	ed96 aa00 	vldr	s20, [r6]
 800c556:	edd5 9a00 	vldr	s19, [r5]
 800c55a:	edcd 7a01 	vstr	s15, [sp, #4]
 800c55e:	4403      	add	r3, r0
 800c560:	ed93 fa01 	vldr	s30, [r3, #4]
 800c564:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800c568:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800c56c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c570:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c574:	46cc      	mov	ip, r9
 800c576:	e001      	b.n	800c57c <arm_radix8_butterfly_f32+0x2fc>
 800c578:	3f3504f3 	.word	0x3f3504f3
 800c57c:	ed91 6a00 	vldr	s12, [r1]
 800c580:	ed93 5a00 	vldr	s10, [r3]
 800c584:	edd0 fa00 	vldr	s31, [r0]
 800c588:	edd4 7a00 	vldr	s15, [r4]
 800c58c:	ed95 7a00 	vldr	s14, [r5]
 800c590:	ed56 3a01 	vldr	s7, [r6, #-4]
 800c594:	ed17 3a01 	vldr	s6, [r7, #-4]
 800c598:	ed92 2a00 	vldr	s4, [r2]
 800c59c:	ed96 0a00 	vldr	s0, [r6]
 800c5a0:	ee33 8a85 	vadd.f32	s16, s7, s10
 800c5a4:	ee32 1a06 	vadd.f32	s2, s4, s12
 800c5a8:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800c5ac:	ee77 4a87 	vadd.f32	s9, s15, s14
 800c5b0:	ee78 1a04 	vadd.f32	s3, s16, s8
 800c5b4:	ee71 6a24 	vadd.f32	s13, s2, s9
 800c5b8:	ee32 2a46 	vsub.f32	s4, s4, s12
 800c5bc:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800c5c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c5c4:	ed06 6a01 	vstr	s12, [r6, #-4]
 800c5c8:	edd4 8a01 	vldr	s17, [r4, #4]
 800c5cc:	ed92 9a01 	vldr	s18, [r2, #4]
 800c5d0:	edd7 0a00 	vldr	s1, [r7]
 800c5d4:	edd1 2a01 	vldr	s5, [r1, #4]
 800c5d8:	ed95 7a01 	vldr	s14, [r5, #4]
 800c5dc:	ed93 6a01 	vldr	s12, [r3, #4]
 800c5e0:	edd0 5a01 	vldr	s11, [r0, #4]
 800c5e4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800c5e8:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800c5ec:	ee39 5a62 	vsub.f32	s10, s18, s5
 800c5f0:	ee78 fac7 	vsub.f32	s31, s17, s14
 800c5f4:	ee38 4a44 	vsub.f32	s8, s16, s8
 800c5f8:	ee38 7a87 	vadd.f32	s14, s17, s14
 800c5fc:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800c600:	ee79 2a22 	vadd.f32	s5, s18, s5
 800c604:	ee32 9a27 	vadd.f32	s18, s4, s15
 800c608:	ee72 7a67 	vsub.f32	s15, s4, s15
 800c60c:	ee30 2a06 	vadd.f32	s4, s0, s12
 800c610:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800c614:	ee71 4a64 	vsub.f32	s9, s2, s9
 800c618:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800c61c:	ee32 1a08 	vadd.f32	s2, s4, s16
 800c620:	ee72 fa87 	vadd.f32	s31, s5, s14
 800c624:	ee32 2a48 	vsub.f32	s4, s4, s16
 800c628:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800c62c:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800c630:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800c634:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800c638:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800c63c:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800c640:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800c644:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800c648:	ee30 6a46 	vsub.f32	s12, s0, s12
 800c64c:	ee74 0a22 	vadd.f32	s1, s8, s5
 800c650:	ee36 0a28 	vadd.f32	s0, s12, s17
 800c654:	ee74 2a62 	vsub.f32	s5, s8, s5
 800c658:	ee36 6a68 	vsub.f32	s12, s12, s17
 800c65c:	ee32 4a64 	vsub.f32	s8, s4, s9
 800c660:	ee73 8a09 	vadd.f32	s17, s6, s18
 800c664:	ee74 4a82 	vadd.f32	s9, s9, s4
 800c668:	ee33 9a49 	vsub.f32	s18, s6, s18
 800c66c:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800c670:	ee35 3a85 	vadd.f32	s6, s11, s10
 800c674:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800c678:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800c67c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800c680:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800c684:	ee30 7a68 	vsub.f32	s14, s0, s17
 800c688:	ee35 8a03 	vadd.f32	s16, s10, s6
 800c68c:	ee38 0a80 	vadd.f32	s0, s17, s0
 800c690:	ee73 3a82 	vadd.f32	s7, s7, s4
 800c694:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800c698:	ed9d 2a01 	vldr	s4, [sp, #4]
 800c69c:	eddd 1a02 	vldr	s3, [sp, #8]
 800c6a0:	ee35 5a43 	vsub.f32	s10, s10, s6
 800c6a4:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800c6a8:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800c6ac:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800c6b0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c6b4:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800c6b8:	ee76 5a49 	vsub.f32	s11, s12, s18
 800c6bc:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800c6c0:	ee39 6a06 	vadd.f32	s12, s18, s12
 800c6c4:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800c6c8:	ee21 4a84 	vmul.f32	s8, s3, s8
 800c6cc:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800c6d0:	ee22 7a07 	vmul.f32	s14, s4, s14
 800c6d4:	ee22 2a08 	vmul.f32	s4, s4, s16
 800c6d8:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800c6dc:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800c6e0:	ee31 1a09 	vadd.f32	s2, s2, s18
 800c6e4:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800c6e8:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800c6ec:	ee74 0a60 	vsub.f32	s1, s8, s1
 800c6f0:	ee37 7a48 	vsub.f32	s14, s14, s16
 800c6f4:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800c6f8:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800c6fc:	ee72 1a21 	vadd.f32	s3, s4, s3
 800c700:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800c704:	ee38 2a89 	vadd.f32	s4, s17, s18
 800c708:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800c70c:	ee38 8a04 	vadd.f32	s16, s16, s8
 800c710:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800c714:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800c718:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800c71c:	eddd 5a03 	vldr	s11, [sp, #12]
 800c720:	edc6 fa00 	vstr	s31, [r6]
 800c724:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800c728:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800c72c:	ee30 0a45 	vsub.f32	s0, s0, s10
 800c730:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800c734:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800c738:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800c73c:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800c740:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800c744:	ee25 6a86 	vmul.f32	s12, s11, s12
 800c748:	ee74 4a89 	vadd.f32	s9, s9, s18
 800c74c:	ee34 3a43 	vsub.f32	s6, s8, s6
 800c750:	ee78 8a85 	vadd.f32	s17, s17, s10
 800c754:	ee36 6a67 	vsub.f32	s12, s12, s15
 800c758:	44c4      	add	ip, r8
 800c75a:	45e3      	cmp	fp, ip
 800c75c:	edc3 3a00 	vstr	s7, [r3]
 800c760:	edc3 6a01 	vstr	s13, [r3, #4]
 800c764:	4456      	add	r6, sl
 800c766:	ed07 1a01 	vstr	s2, [r7, #-4]
 800c76a:	edc7 0a00 	vstr	s1, [r7]
 800c76e:	4453      	add	r3, sl
 800c770:	ed80 2a00 	vstr	s4, [r0]
 800c774:	edc0 2a01 	vstr	s5, [r0, #4]
 800c778:	4457      	add	r7, sl
 800c77a:	edc2 1a00 	vstr	s3, [r2]
 800c77e:	ed82 7a01 	vstr	s14, [r2, #4]
 800c782:	4450      	add	r0, sl
 800c784:	ed85 8a00 	vstr	s16, [r5]
 800c788:	ed85 0a01 	vstr	s0, [r5, #4]
 800c78c:	4452      	add	r2, sl
 800c78e:	edc1 4a00 	vstr	s9, [r1]
 800c792:	4455      	add	r5, sl
 800c794:	ed81 3a01 	vstr	s6, [r1, #4]
 800c798:	edc4 8a00 	vstr	s17, [r4]
 800c79c:	ed84 6a01 	vstr	s12, [r4, #4]
 800c7a0:	4451      	add	r1, sl
 800c7a2:	4454      	add	r4, sl
 800c7a4:	f63f aeea 	bhi.w	800c57c <arm_radix8_butterfly_f32+0x2fc>
 800c7a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7aa:	3308      	adds	r3, #8
 800c7ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800c7ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7b0:	3308      	adds	r3, #8
 800c7b2:	930a      	str	r3, [sp, #40]	; 0x28
 800c7b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7b6:	3308      	adds	r3, #8
 800c7b8:	9309      	str	r3, [sp, #36]	; 0x24
 800c7ba:	9b08      	ldr	r3, [sp, #32]
 800c7bc:	3308      	adds	r3, #8
 800c7be:	9308      	str	r3, [sp, #32]
 800c7c0:	9b07      	ldr	r3, [sp, #28]
 800c7c2:	3308      	adds	r3, #8
 800c7c4:	9307      	str	r3, [sp, #28]
 800c7c6:	9b06      	ldr	r3, [sp, #24]
 800c7c8:	3308      	adds	r3, #8
 800c7ca:	9306      	str	r3, [sp, #24]
 800c7cc:	9b05      	ldr	r3, [sp, #20]
 800c7ce:	3308      	adds	r3, #8
 800c7d0:	9305      	str	r3, [sp, #20]
 800c7d2:	9b04      	ldr	r3, [sp, #16]
 800c7d4:	3308      	adds	r3, #8
 800c7d6:	9304      	str	r3, [sp, #16]
 800c7d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7da:	f109 0901 	add.w	r9, r9, #1
 800c7de:	454b      	cmp	r3, r9
 800c7e0:	f47f ae7d 	bne.w	800c4de <arm_radix8_butterfly_f32+0x25e>
 800c7e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c7e6:	00db      	lsls	r3, r3, #3
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	46d9      	mov	r9, fp
 800c7ec:	9310      	str	r3, [sp, #64]	; 0x40
 800c7ee:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800c7f2:	e554      	b.n	800c29e <arm_radix8_butterfly_f32+0x1e>
 800c7f4:	b015      	add	sp, #84	; 0x54
 800c7f6:	ecbd 8b10 	vpop	{d8-d15}
 800c7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7fe:	bf00      	nop

0800c800 <findslot>:
 800c800:	4b0a      	ldr	r3, [pc, #40]	; (800c82c <findslot+0x2c>)
 800c802:	b510      	push	{r4, lr}
 800c804:	4604      	mov	r4, r0
 800c806:	6818      	ldr	r0, [r3, #0]
 800c808:	b118      	cbz	r0, 800c812 <findslot+0x12>
 800c80a:	6983      	ldr	r3, [r0, #24]
 800c80c:	b90b      	cbnz	r3, 800c812 <findslot+0x12>
 800c80e:	f000 faff 	bl	800ce10 <__sinit>
 800c812:	2c13      	cmp	r4, #19
 800c814:	d807      	bhi.n	800c826 <findslot+0x26>
 800c816:	4806      	ldr	r0, [pc, #24]	; (800c830 <findslot+0x30>)
 800c818:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800c81c:	3201      	adds	r2, #1
 800c81e:	d002      	beq.n	800c826 <findslot+0x26>
 800c820:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800c824:	bd10      	pop	{r4, pc}
 800c826:	2000      	movs	r0, #0
 800c828:	e7fc      	b.n	800c824 <findslot+0x24>
 800c82a:	bf00      	nop
 800c82c:	20000abc 	.word	0x20000abc
 800c830:	20013f6c 	.word	0x20013f6c

0800c834 <error>:
 800c834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c836:	4604      	mov	r4, r0
 800c838:	f000 fa8c 	bl	800cd54 <__errno>
 800c83c:	2613      	movs	r6, #19
 800c83e:	4605      	mov	r5, r0
 800c840:	2700      	movs	r7, #0
 800c842:	4630      	mov	r0, r6
 800c844:	4639      	mov	r1, r7
 800c846:	beab      	bkpt	0x00ab
 800c848:	4606      	mov	r6, r0
 800c84a:	602e      	str	r6, [r5, #0]
 800c84c:	4620      	mov	r0, r4
 800c84e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c850 <checkerror>:
 800c850:	1c43      	adds	r3, r0, #1
 800c852:	d101      	bne.n	800c858 <checkerror+0x8>
 800c854:	f7ff bfee 	b.w	800c834 <error>
 800c858:	4770      	bx	lr

0800c85a <_swiread>:
 800c85a:	b530      	push	{r4, r5, lr}
 800c85c:	b085      	sub	sp, #20
 800c85e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800c862:	9203      	str	r2, [sp, #12]
 800c864:	2406      	movs	r4, #6
 800c866:	ad01      	add	r5, sp, #4
 800c868:	4620      	mov	r0, r4
 800c86a:	4629      	mov	r1, r5
 800c86c:	beab      	bkpt	0x00ab
 800c86e:	4604      	mov	r4, r0
 800c870:	4620      	mov	r0, r4
 800c872:	f7ff ffed 	bl	800c850 <checkerror>
 800c876:	b005      	add	sp, #20
 800c878:	bd30      	pop	{r4, r5, pc}

0800c87a <_read>:
 800c87a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c87c:	4615      	mov	r5, r2
 800c87e:	9101      	str	r1, [sp, #4]
 800c880:	f7ff ffbe 	bl	800c800 <findslot>
 800c884:	9901      	ldr	r1, [sp, #4]
 800c886:	4604      	mov	r4, r0
 800c888:	b938      	cbnz	r0, 800c89a <_read+0x20>
 800c88a:	f000 fa63 	bl	800cd54 <__errno>
 800c88e:	2309      	movs	r3, #9
 800c890:	6003      	str	r3, [r0, #0]
 800c892:	f04f 30ff 	mov.w	r0, #4294967295
 800c896:	b003      	add	sp, #12
 800c898:	bd30      	pop	{r4, r5, pc}
 800c89a:	6800      	ldr	r0, [r0, #0]
 800c89c:	462a      	mov	r2, r5
 800c89e:	f7ff ffdc 	bl	800c85a <_swiread>
 800c8a2:	1c43      	adds	r3, r0, #1
 800c8a4:	d0f7      	beq.n	800c896 <_read+0x1c>
 800c8a6:	6863      	ldr	r3, [r4, #4]
 800c8a8:	1a2a      	subs	r2, r5, r0
 800c8aa:	4413      	add	r3, r2
 800c8ac:	6063      	str	r3, [r4, #4]
 800c8ae:	4610      	mov	r0, r2
 800c8b0:	e7f1      	b.n	800c896 <_read+0x1c>

0800c8b2 <_swilseek>:
 800c8b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8b4:	460c      	mov	r4, r1
 800c8b6:	4616      	mov	r6, r2
 800c8b8:	f7ff ffa2 	bl	800c800 <findslot>
 800c8bc:	4605      	mov	r5, r0
 800c8be:	b940      	cbnz	r0, 800c8d2 <_swilseek+0x20>
 800c8c0:	f000 fa48 	bl	800cd54 <__errno>
 800c8c4:	2309      	movs	r3, #9
 800c8c6:	6003      	str	r3, [r0, #0]
 800c8c8:	f04f 34ff 	mov.w	r4, #4294967295
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	b003      	add	sp, #12
 800c8d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8d2:	2e02      	cmp	r6, #2
 800c8d4:	d903      	bls.n	800c8de <_swilseek+0x2c>
 800c8d6:	f000 fa3d 	bl	800cd54 <__errno>
 800c8da:	2316      	movs	r3, #22
 800c8dc:	e7f3      	b.n	800c8c6 <_swilseek+0x14>
 800c8de:	2e01      	cmp	r6, #1
 800c8e0:	d112      	bne.n	800c908 <_swilseek+0x56>
 800c8e2:	6843      	ldr	r3, [r0, #4]
 800c8e4:	18e4      	adds	r4, r4, r3
 800c8e6:	d4f6      	bmi.n	800c8d6 <_swilseek+0x24>
 800c8e8:	682b      	ldr	r3, [r5, #0]
 800c8ea:	260a      	movs	r6, #10
 800c8ec:	e9cd 3400 	strd	r3, r4, [sp]
 800c8f0:	466f      	mov	r7, sp
 800c8f2:	4630      	mov	r0, r6
 800c8f4:	4639      	mov	r1, r7
 800c8f6:	beab      	bkpt	0x00ab
 800c8f8:	4606      	mov	r6, r0
 800c8fa:	4630      	mov	r0, r6
 800c8fc:	f7ff ffa8 	bl	800c850 <checkerror>
 800c900:	2800      	cmp	r0, #0
 800c902:	dbe1      	blt.n	800c8c8 <_swilseek+0x16>
 800c904:	606c      	str	r4, [r5, #4]
 800c906:	e7e1      	b.n	800c8cc <_swilseek+0x1a>
 800c908:	2e02      	cmp	r6, #2
 800c90a:	d1ed      	bne.n	800c8e8 <_swilseek+0x36>
 800c90c:	6803      	ldr	r3, [r0, #0]
 800c90e:	9300      	str	r3, [sp, #0]
 800c910:	260c      	movs	r6, #12
 800c912:	466f      	mov	r7, sp
 800c914:	4630      	mov	r0, r6
 800c916:	4639      	mov	r1, r7
 800c918:	beab      	bkpt	0x00ab
 800c91a:	4606      	mov	r6, r0
 800c91c:	4630      	mov	r0, r6
 800c91e:	f7ff ff97 	bl	800c850 <checkerror>
 800c922:	1c43      	adds	r3, r0, #1
 800c924:	d0d0      	beq.n	800c8c8 <_swilseek+0x16>
 800c926:	4404      	add	r4, r0
 800c928:	e7de      	b.n	800c8e8 <_swilseek+0x36>

0800c92a <_lseek>:
 800c92a:	f7ff bfc2 	b.w	800c8b2 <_swilseek>

0800c92e <_swiwrite>:
 800c92e:	b530      	push	{r4, r5, lr}
 800c930:	b085      	sub	sp, #20
 800c932:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800c936:	9203      	str	r2, [sp, #12]
 800c938:	2405      	movs	r4, #5
 800c93a:	ad01      	add	r5, sp, #4
 800c93c:	4620      	mov	r0, r4
 800c93e:	4629      	mov	r1, r5
 800c940:	beab      	bkpt	0x00ab
 800c942:	4604      	mov	r4, r0
 800c944:	4620      	mov	r0, r4
 800c946:	f7ff ff83 	bl	800c850 <checkerror>
 800c94a:	b005      	add	sp, #20
 800c94c:	bd30      	pop	{r4, r5, pc}

0800c94e <_write>:
 800c94e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c950:	4615      	mov	r5, r2
 800c952:	9101      	str	r1, [sp, #4]
 800c954:	f7ff ff54 	bl	800c800 <findslot>
 800c958:	9901      	ldr	r1, [sp, #4]
 800c95a:	4604      	mov	r4, r0
 800c95c:	b930      	cbnz	r0, 800c96c <_write+0x1e>
 800c95e:	f000 f9f9 	bl	800cd54 <__errno>
 800c962:	2309      	movs	r3, #9
 800c964:	6003      	str	r3, [r0, #0]
 800c966:	f04f 30ff 	mov.w	r0, #4294967295
 800c96a:	e012      	b.n	800c992 <_write+0x44>
 800c96c:	6800      	ldr	r0, [r0, #0]
 800c96e:	462a      	mov	r2, r5
 800c970:	f7ff ffdd 	bl	800c92e <_swiwrite>
 800c974:	2800      	cmp	r0, #0
 800c976:	dbf6      	blt.n	800c966 <_write+0x18>
 800c978:	6862      	ldr	r2, [r4, #4]
 800c97a:	1a2b      	subs	r3, r5, r0
 800c97c:	441a      	add	r2, r3
 800c97e:	42a8      	cmp	r0, r5
 800c980:	6062      	str	r2, [r4, #4]
 800c982:	d105      	bne.n	800c990 <_write+0x42>
 800c984:	2000      	movs	r0, #0
 800c986:	b003      	add	sp, #12
 800c988:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c98c:	f7ff bf52 	b.w	800c834 <error>
 800c990:	4618      	mov	r0, r3
 800c992:	b003      	add	sp, #12
 800c994:	bd30      	pop	{r4, r5, pc}

0800c996 <_swiclose>:
 800c996:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c998:	2402      	movs	r4, #2
 800c99a:	9001      	str	r0, [sp, #4]
 800c99c:	ad01      	add	r5, sp, #4
 800c99e:	4620      	mov	r0, r4
 800c9a0:	4629      	mov	r1, r5
 800c9a2:	beab      	bkpt	0x00ab
 800c9a4:	4604      	mov	r4, r0
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	f7ff ff52 	bl	800c850 <checkerror>
 800c9ac:	b003      	add	sp, #12
 800c9ae:	bd30      	pop	{r4, r5, pc}

0800c9b0 <_close>:
 800c9b0:	b538      	push	{r3, r4, r5, lr}
 800c9b2:	4605      	mov	r5, r0
 800c9b4:	f7ff ff24 	bl	800c800 <findslot>
 800c9b8:	4604      	mov	r4, r0
 800c9ba:	b930      	cbnz	r0, 800c9ca <_close+0x1a>
 800c9bc:	f000 f9ca 	bl	800cd54 <__errno>
 800c9c0:	2309      	movs	r3, #9
 800c9c2:	6003      	str	r3, [r0, #0]
 800c9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9c8:	bd38      	pop	{r3, r4, r5, pc}
 800c9ca:	3d01      	subs	r5, #1
 800c9cc:	2d01      	cmp	r5, #1
 800c9ce:	d809      	bhi.n	800c9e4 <_close+0x34>
 800c9d0:	4b09      	ldr	r3, [pc, #36]	; (800c9f8 <_close+0x48>)
 800c9d2:	689a      	ldr	r2, [r3, #8]
 800c9d4:	691b      	ldr	r3, [r3, #16]
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d104      	bne.n	800c9e4 <_close+0x34>
 800c9da:	f04f 33ff 	mov.w	r3, #4294967295
 800c9de:	6003      	str	r3, [r0, #0]
 800c9e0:	2000      	movs	r0, #0
 800c9e2:	e7f1      	b.n	800c9c8 <_close+0x18>
 800c9e4:	6820      	ldr	r0, [r4, #0]
 800c9e6:	f7ff ffd6 	bl	800c996 <_swiclose>
 800c9ea:	2800      	cmp	r0, #0
 800c9ec:	d1ec      	bne.n	800c9c8 <_close+0x18>
 800c9ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c9f2:	6023      	str	r3, [r4, #0]
 800c9f4:	e7e8      	b.n	800c9c8 <_close+0x18>
 800c9f6:	bf00      	nop
 800c9f8:	20013f6c 	.word	0x20013f6c

0800c9fc <_getpid>:
 800c9fc:	2001      	movs	r0, #1
 800c9fe:	4770      	bx	lr

0800ca00 <_swistat>:
 800ca00:	b570      	push	{r4, r5, r6, lr}
 800ca02:	460c      	mov	r4, r1
 800ca04:	f7ff fefc 	bl	800c800 <findslot>
 800ca08:	4605      	mov	r5, r0
 800ca0a:	b930      	cbnz	r0, 800ca1a <_swistat+0x1a>
 800ca0c:	f000 f9a2 	bl	800cd54 <__errno>
 800ca10:	2309      	movs	r3, #9
 800ca12:	6003      	str	r3, [r0, #0]
 800ca14:	f04f 30ff 	mov.w	r0, #4294967295
 800ca18:	bd70      	pop	{r4, r5, r6, pc}
 800ca1a:	6863      	ldr	r3, [r4, #4]
 800ca1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ca20:	6063      	str	r3, [r4, #4]
 800ca22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca26:	64a3      	str	r3, [r4, #72]	; 0x48
 800ca28:	260c      	movs	r6, #12
 800ca2a:	4630      	mov	r0, r6
 800ca2c:	4629      	mov	r1, r5
 800ca2e:	beab      	bkpt	0x00ab
 800ca30:	4605      	mov	r5, r0
 800ca32:	4628      	mov	r0, r5
 800ca34:	f7ff ff0c 	bl	800c850 <checkerror>
 800ca38:	1c43      	adds	r3, r0, #1
 800ca3a:	bf1c      	itt	ne
 800ca3c:	6120      	strne	r0, [r4, #16]
 800ca3e:	2000      	movne	r0, #0
 800ca40:	e7ea      	b.n	800ca18 <_swistat+0x18>

0800ca42 <_fstat>:
 800ca42:	460b      	mov	r3, r1
 800ca44:	b510      	push	{r4, lr}
 800ca46:	2100      	movs	r1, #0
 800ca48:	4604      	mov	r4, r0
 800ca4a:	2258      	movs	r2, #88	; 0x58
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f000 fac2 	bl	800cfd6 <memset>
 800ca52:	4601      	mov	r1, r0
 800ca54:	4620      	mov	r0, r4
 800ca56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca5a:	f7ff bfd1 	b.w	800ca00 <_swistat>

0800ca5e <_stat>:
 800ca5e:	b538      	push	{r3, r4, r5, lr}
 800ca60:	460d      	mov	r5, r1
 800ca62:	4604      	mov	r4, r0
 800ca64:	2258      	movs	r2, #88	; 0x58
 800ca66:	2100      	movs	r1, #0
 800ca68:	4628      	mov	r0, r5
 800ca6a:	f000 fab4 	bl	800cfd6 <memset>
 800ca6e:	4620      	mov	r0, r4
 800ca70:	2100      	movs	r1, #0
 800ca72:	f000 f811 	bl	800ca98 <_swiopen>
 800ca76:	1c43      	adds	r3, r0, #1
 800ca78:	4604      	mov	r4, r0
 800ca7a:	d00b      	beq.n	800ca94 <_stat+0x36>
 800ca7c:	686b      	ldr	r3, [r5, #4]
 800ca7e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800ca82:	606b      	str	r3, [r5, #4]
 800ca84:	4629      	mov	r1, r5
 800ca86:	f7ff ffbb 	bl	800ca00 <_swistat>
 800ca8a:	4605      	mov	r5, r0
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	f7ff ff8f 	bl	800c9b0 <_close>
 800ca92:	462c      	mov	r4, r5
 800ca94:	4620      	mov	r0, r4
 800ca96:	bd38      	pop	{r3, r4, r5, pc}

0800ca98 <_swiopen>:
 800ca98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca9c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800cb48 <_swiopen+0xb0>
 800caa0:	b097      	sub	sp, #92	; 0x5c
 800caa2:	4607      	mov	r7, r0
 800caa4:	460e      	mov	r6, r1
 800caa6:	2500      	movs	r5, #0
 800caa8:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 800caac:	1c61      	adds	r1, r4, #1
 800caae:	d037      	beq.n	800cb20 <_swiopen+0x88>
 800cab0:	3501      	adds	r5, #1
 800cab2:	2d14      	cmp	r5, #20
 800cab4:	d1f8      	bne.n	800caa8 <_swiopen+0x10>
 800cab6:	f000 f94d 	bl	800cd54 <__errno>
 800caba:	2318      	movs	r3, #24
 800cabc:	6003      	str	r3, [r0, #0]
 800cabe:	f04f 34ff 	mov.w	r4, #4294967295
 800cac2:	e03d      	b.n	800cb40 <_swiopen+0xa8>
 800cac4:	f3c6 4400 	ubfx	r4, r6, #16, #1
 800cac8:	f240 6301 	movw	r3, #1537	; 0x601
 800cacc:	07b2      	lsls	r2, r6, #30
 800cace:	bf48      	it	mi
 800cad0:	f044 0402 	orrmi.w	r4, r4, #2
 800cad4:	421e      	tst	r6, r3
 800cad6:	bf18      	it	ne
 800cad8:	f044 0404 	orrne.w	r4, r4, #4
 800cadc:	0733      	lsls	r3, r6, #28
 800cade:	bf48      	it	mi
 800cae0:	f024 0404 	bicmi.w	r4, r4, #4
 800cae4:	4638      	mov	r0, r7
 800cae6:	bf48      	it	mi
 800cae8:	f044 0408 	orrmi.w	r4, r4, #8
 800caec:	9700      	str	r7, [sp, #0]
 800caee:	f7f9 fbd0 	bl	8006292 <strlen>
 800caf2:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800caf6:	2401      	movs	r4, #1
 800caf8:	4620      	mov	r0, r4
 800cafa:	4649      	mov	r1, r9
 800cafc:	beab      	bkpt	0x00ab
 800cafe:	4604      	mov	r4, r0
 800cb00:	2c00      	cmp	r4, #0
 800cb02:	db08      	blt.n	800cb16 <_swiopen+0x7e>
 800cb04:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800cb08:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	f8c8 3004 	str.w	r3, [r8, #4]
 800cb12:	462c      	mov	r4, r5
 800cb14:	e014      	b.n	800cb40 <_swiopen+0xa8>
 800cb16:	4620      	mov	r0, r4
 800cb18:	f7ff fe8c 	bl	800c834 <error>
 800cb1c:	4604      	mov	r4, r0
 800cb1e:	e00f      	b.n	800cb40 <_swiopen+0xa8>
 800cb20:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800cb24:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800cb28:	46e9      	mov	r9, sp
 800cb2a:	d1cb      	bne.n	800cac4 <_swiopen+0x2c>
 800cb2c:	4649      	mov	r1, r9
 800cb2e:	4638      	mov	r0, r7
 800cb30:	f7ff ff95 	bl	800ca5e <_stat>
 800cb34:	3001      	adds	r0, #1
 800cb36:	d0c5      	beq.n	800cac4 <_swiopen+0x2c>
 800cb38:	f000 f90c 	bl	800cd54 <__errno>
 800cb3c:	2311      	movs	r3, #17
 800cb3e:	6003      	str	r3, [r0, #0]
 800cb40:	4620      	mov	r0, r4
 800cb42:	b017      	add	sp, #92	; 0x5c
 800cb44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb48:	20013f6c 	.word	0x20013f6c

0800cb4c <_get_semihosting_exts>:
 800cb4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb50:	4606      	mov	r6, r0
 800cb52:	460f      	mov	r7, r1
 800cb54:	482a      	ldr	r0, [pc, #168]	; (800cc00 <_get_semihosting_exts+0xb4>)
 800cb56:	2100      	movs	r1, #0
 800cb58:	4615      	mov	r5, r2
 800cb5a:	f7ff ff9d 	bl	800ca98 <_swiopen>
 800cb5e:	462a      	mov	r2, r5
 800cb60:	4604      	mov	r4, r0
 800cb62:	2100      	movs	r1, #0
 800cb64:	4630      	mov	r0, r6
 800cb66:	f000 fa36 	bl	800cfd6 <memset>
 800cb6a:	1c63      	adds	r3, r4, #1
 800cb6c:	d016      	beq.n	800cb9c <_get_semihosting_exts+0x50>
 800cb6e:	4620      	mov	r0, r4
 800cb70:	f7ff fe46 	bl	800c800 <findslot>
 800cb74:	f04f 090c 	mov.w	r9, #12
 800cb78:	4680      	mov	r8, r0
 800cb7a:	4648      	mov	r0, r9
 800cb7c:	4641      	mov	r1, r8
 800cb7e:	beab      	bkpt	0x00ab
 800cb80:	4680      	mov	r8, r0
 800cb82:	4640      	mov	r0, r8
 800cb84:	f7ff fe64 	bl	800c850 <checkerror>
 800cb88:	2803      	cmp	r0, #3
 800cb8a:	dd02      	ble.n	800cb92 <_get_semihosting_exts+0x46>
 800cb8c:	1ec3      	subs	r3, r0, #3
 800cb8e:	42ab      	cmp	r3, r5
 800cb90:	dc08      	bgt.n	800cba4 <_get_semihosting_exts+0x58>
 800cb92:	4620      	mov	r0, r4
 800cb94:	f7ff ff0c 	bl	800c9b0 <_close>
 800cb98:	f04f 34ff 	mov.w	r4, #4294967295
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	b003      	add	sp, #12
 800cba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cba4:	2204      	movs	r2, #4
 800cba6:	eb0d 0102 	add.w	r1, sp, r2
 800cbaa:	4620      	mov	r0, r4
 800cbac:	f7ff fe65 	bl	800c87a <_read>
 800cbb0:	2803      	cmp	r0, #3
 800cbb2:	ddee      	ble.n	800cb92 <_get_semihosting_exts+0x46>
 800cbb4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cbb8:	2b53      	cmp	r3, #83	; 0x53
 800cbba:	d1ea      	bne.n	800cb92 <_get_semihosting_exts+0x46>
 800cbbc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cbc0:	2b48      	cmp	r3, #72	; 0x48
 800cbc2:	d1e6      	bne.n	800cb92 <_get_semihosting_exts+0x46>
 800cbc4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cbc8:	2b46      	cmp	r3, #70	; 0x46
 800cbca:	d1e2      	bne.n	800cb92 <_get_semihosting_exts+0x46>
 800cbcc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cbd0:	2b42      	cmp	r3, #66	; 0x42
 800cbd2:	d1de      	bne.n	800cb92 <_get_semihosting_exts+0x46>
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	4639      	mov	r1, r7
 800cbd8:	4620      	mov	r0, r4
 800cbda:	f7ff fe6a 	bl	800c8b2 <_swilseek>
 800cbde:	2800      	cmp	r0, #0
 800cbe0:	dbd7      	blt.n	800cb92 <_get_semihosting_exts+0x46>
 800cbe2:	462a      	mov	r2, r5
 800cbe4:	4631      	mov	r1, r6
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	f7ff fe47 	bl	800c87a <_read>
 800cbec:	4605      	mov	r5, r0
 800cbee:	4620      	mov	r0, r4
 800cbf0:	f7ff fede 	bl	800c9b0 <_close>
 800cbf4:	4628      	mov	r0, r5
 800cbf6:	f7ff fe2b 	bl	800c850 <checkerror>
 800cbfa:	4604      	mov	r4, r0
 800cbfc:	e7ce      	b.n	800cb9c <_get_semihosting_exts+0x50>
 800cbfe:	bf00      	nop
 800cc00:	0804c84c 	.word	0x0804c84c

0800cc04 <initialise_semihosting_exts>:
 800cc04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc06:	4d0a      	ldr	r5, [pc, #40]	; (800cc30 <initialise_semihosting_exts+0x2c>)
 800cc08:	4c0a      	ldr	r4, [pc, #40]	; (800cc34 <initialise_semihosting_exts+0x30>)
 800cc0a:	2100      	movs	r1, #0
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	a801      	add	r0, sp, #4
 800cc10:	6029      	str	r1, [r5, #0]
 800cc12:	6022      	str	r2, [r4, #0]
 800cc14:	f7ff ff9a 	bl	800cb4c <_get_semihosting_exts>
 800cc18:	2800      	cmp	r0, #0
 800cc1a:	dd07      	ble.n	800cc2c <initialise_semihosting_exts+0x28>
 800cc1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cc20:	f003 0201 	and.w	r2, r3, #1
 800cc24:	f003 0302 	and.w	r3, r3, #2
 800cc28:	602a      	str	r2, [r5, #0]
 800cc2a:	6023      	str	r3, [r4, #0]
 800cc2c:	b003      	add	sp, #12
 800cc2e:	bd30      	pop	{r4, r5, pc}
 800cc30:	20000ab4 	.word	0x20000ab4
 800cc34:	20000ab8 	.word	0x20000ab8

0800cc38 <_has_ext_stdout_stderr>:
 800cc38:	b510      	push	{r4, lr}
 800cc3a:	4c04      	ldr	r4, [pc, #16]	; (800cc4c <_has_ext_stdout_stderr+0x14>)
 800cc3c:	6823      	ldr	r3, [r4, #0]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	da01      	bge.n	800cc46 <_has_ext_stdout_stderr+0xe>
 800cc42:	f7ff ffdf 	bl	800cc04 <initialise_semihosting_exts>
 800cc46:	6820      	ldr	r0, [r4, #0]
 800cc48:	bd10      	pop	{r4, pc}
 800cc4a:	bf00      	nop
 800cc4c:	20000ab8 	.word	0x20000ab8

0800cc50 <initialise_monitor_handles>:
 800cc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc54:	b085      	sub	sp, #20
 800cc56:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800cd08 <initialise_monitor_handles+0xb8>
 800cc5a:	f8cd 9004 	str.w	r9, [sp, #4]
 800cc5e:	2303      	movs	r3, #3
 800cc60:	2400      	movs	r4, #0
 800cc62:	9303      	str	r3, [sp, #12]
 800cc64:	af01      	add	r7, sp, #4
 800cc66:	9402      	str	r4, [sp, #8]
 800cc68:	2501      	movs	r5, #1
 800cc6a:	4628      	mov	r0, r5
 800cc6c:	4639      	mov	r1, r7
 800cc6e:	beab      	bkpt	0x00ab
 800cc70:	4605      	mov	r5, r0
 800cc72:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800cd0c <initialise_monitor_handles+0xbc>
 800cc76:	4623      	mov	r3, r4
 800cc78:	4c20      	ldr	r4, [pc, #128]	; (800ccfc <initialise_monitor_handles+0xac>)
 800cc7a:	f8c8 5000 	str.w	r5, [r8]
 800cc7e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc82:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800cc86:	3301      	adds	r3, #1
 800cc88:	2b14      	cmp	r3, #20
 800cc8a:	d1fa      	bne.n	800cc82 <initialise_monitor_handles+0x32>
 800cc8c:	f7ff ffd4 	bl	800cc38 <_has_ext_stdout_stderr>
 800cc90:	4d1b      	ldr	r5, [pc, #108]	; (800cd00 <initialise_monitor_handles+0xb0>)
 800cc92:	b1d0      	cbz	r0, 800ccca <initialise_monitor_handles+0x7a>
 800cc94:	f04f 0a03 	mov.w	sl, #3
 800cc98:	2304      	movs	r3, #4
 800cc9a:	f8cd 9004 	str.w	r9, [sp, #4]
 800cc9e:	2601      	movs	r6, #1
 800cca0:	f8cd a00c 	str.w	sl, [sp, #12]
 800cca4:	9302      	str	r3, [sp, #8]
 800cca6:	4630      	mov	r0, r6
 800cca8:	4639      	mov	r1, r7
 800ccaa:	beab      	bkpt	0x00ab
 800ccac:	4683      	mov	fp, r0
 800ccae:	4b15      	ldr	r3, [pc, #84]	; (800cd04 <initialise_monitor_handles+0xb4>)
 800ccb0:	f8cd 9004 	str.w	r9, [sp, #4]
 800ccb4:	f8c3 b000 	str.w	fp, [r3]
 800ccb8:	2308      	movs	r3, #8
 800ccba:	f8cd a00c 	str.w	sl, [sp, #12]
 800ccbe:	9302      	str	r3, [sp, #8]
 800ccc0:	4630      	mov	r0, r6
 800ccc2:	4639      	mov	r1, r7
 800ccc4:	beab      	bkpt	0x00ab
 800ccc6:	4606      	mov	r6, r0
 800ccc8:	602e      	str	r6, [r5, #0]
 800ccca:	682b      	ldr	r3, [r5, #0]
 800cccc:	3301      	adds	r3, #1
 800ccce:	bf02      	ittt	eq
 800ccd0:	4b0c      	ldreq	r3, [pc, #48]	; (800cd04 <initialise_monitor_handles+0xb4>)
 800ccd2:	681b      	ldreq	r3, [r3, #0]
 800ccd4:	602b      	streq	r3, [r5, #0]
 800ccd6:	2600      	movs	r6, #0
 800ccd8:	f8d8 3000 	ldr.w	r3, [r8]
 800ccdc:	6023      	str	r3, [r4, #0]
 800ccde:	6066      	str	r6, [r4, #4]
 800cce0:	f7ff ffaa 	bl	800cc38 <_has_ext_stdout_stderr>
 800cce4:	b130      	cbz	r0, 800ccf4 <initialise_monitor_handles+0xa4>
 800cce6:	4b07      	ldr	r3, [pc, #28]	; (800cd04 <initialise_monitor_handles+0xb4>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800ccee:	682b      	ldr	r3, [r5, #0]
 800ccf0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800ccf4:	b005      	add	sp, #20
 800ccf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccfa:	bf00      	nop
 800ccfc:	20013f6c 	.word	0x20013f6c
 800cd00:	20013f60 	.word	0x20013f60
 800cd04:	20013f68 	.word	0x20013f68
 800cd08:	0804c862 	.word	0x0804c862
 800cd0c:	20013f64 	.word	0x20013f64

0800cd10 <_isatty>:
 800cd10:	b570      	push	{r4, r5, r6, lr}
 800cd12:	f7ff fd75 	bl	800c800 <findslot>
 800cd16:	2509      	movs	r5, #9
 800cd18:	4604      	mov	r4, r0
 800cd1a:	b920      	cbnz	r0, 800cd26 <_isatty+0x16>
 800cd1c:	f000 f81a 	bl	800cd54 <__errno>
 800cd20:	6005      	str	r5, [r0, #0]
 800cd22:	4620      	mov	r0, r4
 800cd24:	bd70      	pop	{r4, r5, r6, pc}
 800cd26:	4628      	mov	r0, r5
 800cd28:	4621      	mov	r1, r4
 800cd2a:	beab      	bkpt	0x00ab
 800cd2c:	4604      	mov	r4, r0
 800cd2e:	2c01      	cmp	r4, #1
 800cd30:	d0f7      	beq.n	800cd22 <_isatty+0x12>
 800cd32:	f000 f80f 	bl	800cd54 <__errno>
 800cd36:	2400      	movs	r4, #0
 800cd38:	4605      	mov	r5, r0
 800cd3a:	2613      	movs	r6, #19
 800cd3c:	4630      	mov	r0, r6
 800cd3e:	4621      	mov	r1, r4
 800cd40:	beab      	bkpt	0x00ab
 800cd42:	4606      	mov	r6, r0
 800cd44:	602e      	str	r6, [r5, #0]
 800cd46:	e7ec      	b.n	800cd22 <_isatty+0x12>

0800cd48 <__aeabi_memclr>:
 800cd48:	2200      	movs	r2, #0
 800cd4a:	f7f9 ba55 	b.w	80061f8 <__aeabi_memset>

0800cd4e <__aeabi_memcpy>:
 800cd4e:	f000 b934 	b.w	800cfba <memcpy>
	...

0800cd54 <__errno>:
 800cd54:	4b01      	ldr	r3, [pc, #4]	; (800cd5c <__errno+0x8>)
 800cd56:	6818      	ldr	r0, [r3, #0]
 800cd58:	4770      	bx	lr
 800cd5a:	bf00      	nop
 800cd5c:	20000abc 	.word	0x20000abc

0800cd60 <std>:
 800cd60:	2300      	movs	r3, #0
 800cd62:	b510      	push	{r4, lr}
 800cd64:	4604      	mov	r4, r0
 800cd66:	e9c0 3300 	strd	r3, r3, [r0]
 800cd6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd6e:	6083      	str	r3, [r0, #8]
 800cd70:	8181      	strh	r1, [r0, #12]
 800cd72:	6643      	str	r3, [r0, #100]	; 0x64
 800cd74:	81c2      	strh	r2, [r0, #14]
 800cd76:	6183      	str	r3, [r0, #24]
 800cd78:	4619      	mov	r1, r3
 800cd7a:	2208      	movs	r2, #8
 800cd7c:	305c      	adds	r0, #92	; 0x5c
 800cd7e:	f000 f92a 	bl	800cfd6 <memset>
 800cd82:	4b05      	ldr	r3, [pc, #20]	; (800cd98 <std+0x38>)
 800cd84:	6263      	str	r3, [r4, #36]	; 0x24
 800cd86:	4b05      	ldr	r3, [pc, #20]	; (800cd9c <std+0x3c>)
 800cd88:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd8a:	4b05      	ldr	r3, [pc, #20]	; (800cda0 <std+0x40>)
 800cd8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cd8e:	4b05      	ldr	r3, [pc, #20]	; (800cda4 <std+0x44>)
 800cd90:	6224      	str	r4, [r4, #32]
 800cd92:	6323      	str	r3, [r4, #48]	; 0x30
 800cd94:	bd10      	pop	{r4, pc}
 800cd96:	bf00      	nop
 800cd98:	0800db89 	.word	0x0800db89
 800cd9c:	0800dbab 	.word	0x0800dbab
 800cda0:	0800dbe3 	.word	0x0800dbe3
 800cda4:	0800dc07 	.word	0x0800dc07

0800cda8 <_cleanup_r>:
 800cda8:	4901      	ldr	r1, [pc, #4]	; (800cdb0 <_cleanup_r+0x8>)
 800cdaa:	f000 b8af 	b.w	800cf0c <_fwalk_reent>
 800cdae:	bf00      	nop
 800cdb0:	0800ec11 	.word	0x0800ec11

0800cdb4 <__sfmoreglue>:
 800cdb4:	b570      	push	{r4, r5, r6, lr}
 800cdb6:	2268      	movs	r2, #104	; 0x68
 800cdb8:	1e4d      	subs	r5, r1, #1
 800cdba:	4355      	muls	r5, r2
 800cdbc:	460e      	mov	r6, r1
 800cdbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cdc2:	f000 f931 	bl	800d028 <_malloc_r>
 800cdc6:	4604      	mov	r4, r0
 800cdc8:	b140      	cbz	r0, 800cddc <__sfmoreglue+0x28>
 800cdca:	2100      	movs	r1, #0
 800cdcc:	e9c0 1600 	strd	r1, r6, [r0]
 800cdd0:	300c      	adds	r0, #12
 800cdd2:	60a0      	str	r0, [r4, #8]
 800cdd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cdd8:	f000 f8fd 	bl	800cfd6 <memset>
 800cddc:	4620      	mov	r0, r4
 800cdde:	bd70      	pop	{r4, r5, r6, pc}

0800cde0 <__sfp_lock_acquire>:
 800cde0:	4801      	ldr	r0, [pc, #4]	; (800cde8 <__sfp_lock_acquire+0x8>)
 800cde2:	f000 b8d8 	b.w	800cf96 <__retarget_lock_acquire_recursive>
 800cde6:	bf00      	nop
 800cde8:	2001400d 	.word	0x2001400d

0800cdec <__sfp_lock_release>:
 800cdec:	4801      	ldr	r0, [pc, #4]	; (800cdf4 <__sfp_lock_release+0x8>)
 800cdee:	f000 b8d3 	b.w	800cf98 <__retarget_lock_release_recursive>
 800cdf2:	bf00      	nop
 800cdf4:	2001400d 	.word	0x2001400d

0800cdf8 <__sinit_lock_acquire>:
 800cdf8:	4801      	ldr	r0, [pc, #4]	; (800ce00 <__sinit_lock_acquire+0x8>)
 800cdfa:	f000 b8cc 	b.w	800cf96 <__retarget_lock_acquire_recursive>
 800cdfe:	bf00      	nop
 800ce00:	2001400e 	.word	0x2001400e

0800ce04 <__sinit_lock_release>:
 800ce04:	4801      	ldr	r0, [pc, #4]	; (800ce0c <__sinit_lock_release+0x8>)
 800ce06:	f000 b8c7 	b.w	800cf98 <__retarget_lock_release_recursive>
 800ce0a:	bf00      	nop
 800ce0c:	2001400e 	.word	0x2001400e

0800ce10 <__sinit>:
 800ce10:	b510      	push	{r4, lr}
 800ce12:	4604      	mov	r4, r0
 800ce14:	f7ff fff0 	bl	800cdf8 <__sinit_lock_acquire>
 800ce18:	69a3      	ldr	r3, [r4, #24]
 800ce1a:	b11b      	cbz	r3, 800ce24 <__sinit+0x14>
 800ce1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce20:	f7ff bff0 	b.w	800ce04 <__sinit_lock_release>
 800ce24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ce28:	6523      	str	r3, [r4, #80]	; 0x50
 800ce2a:	4b13      	ldr	r3, [pc, #76]	; (800ce78 <__sinit+0x68>)
 800ce2c:	4a13      	ldr	r2, [pc, #76]	; (800ce7c <__sinit+0x6c>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	62a2      	str	r2, [r4, #40]	; 0x28
 800ce32:	42a3      	cmp	r3, r4
 800ce34:	bf04      	itt	eq
 800ce36:	2301      	moveq	r3, #1
 800ce38:	61a3      	streq	r3, [r4, #24]
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	f000 f820 	bl	800ce80 <__sfp>
 800ce40:	6060      	str	r0, [r4, #4]
 800ce42:	4620      	mov	r0, r4
 800ce44:	f000 f81c 	bl	800ce80 <__sfp>
 800ce48:	60a0      	str	r0, [r4, #8]
 800ce4a:	4620      	mov	r0, r4
 800ce4c:	f000 f818 	bl	800ce80 <__sfp>
 800ce50:	2200      	movs	r2, #0
 800ce52:	60e0      	str	r0, [r4, #12]
 800ce54:	2104      	movs	r1, #4
 800ce56:	6860      	ldr	r0, [r4, #4]
 800ce58:	f7ff ff82 	bl	800cd60 <std>
 800ce5c:	68a0      	ldr	r0, [r4, #8]
 800ce5e:	2201      	movs	r2, #1
 800ce60:	2109      	movs	r1, #9
 800ce62:	f7ff ff7d 	bl	800cd60 <std>
 800ce66:	68e0      	ldr	r0, [r4, #12]
 800ce68:	2202      	movs	r2, #2
 800ce6a:	2112      	movs	r1, #18
 800ce6c:	f7ff ff78 	bl	800cd60 <std>
 800ce70:	2301      	movs	r3, #1
 800ce72:	61a3      	str	r3, [r4, #24]
 800ce74:	e7d2      	b.n	800ce1c <__sinit+0xc>
 800ce76:	bf00      	nop
 800ce78:	0804c8c8 	.word	0x0804c8c8
 800ce7c:	0800cda9 	.word	0x0800cda9

0800ce80 <__sfp>:
 800ce80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce82:	4607      	mov	r7, r0
 800ce84:	f7ff ffac 	bl	800cde0 <__sfp_lock_acquire>
 800ce88:	4b1e      	ldr	r3, [pc, #120]	; (800cf04 <__sfp+0x84>)
 800ce8a:	681e      	ldr	r6, [r3, #0]
 800ce8c:	69b3      	ldr	r3, [r6, #24]
 800ce8e:	b913      	cbnz	r3, 800ce96 <__sfp+0x16>
 800ce90:	4630      	mov	r0, r6
 800ce92:	f7ff ffbd 	bl	800ce10 <__sinit>
 800ce96:	3648      	adds	r6, #72	; 0x48
 800ce98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ce9c:	3b01      	subs	r3, #1
 800ce9e:	d503      	bpl.n	800cea8 <__sfp+0x28>
 800cea0:	6833      	ldr	r3, [r6, #0]
 800cea2:	b30b      	cbz	r3, 800cee8 <__sfp+0x68>
 800cea4:	6836      	ldr	r6, [r6, #0]
 800cea6:	e7f7      	b.n	800ce98 <__sfp+0x18>
 800cea8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ceac:	b9d5      	cbnz	r5, 800cee4 <__sfp+0x64>
 800ceae:	4b16      	ldr	r3, [pc, #88]	; (800cf08 <__sfp+0x88>)
 800ceb0:	60e3      	str	r3, [r4, #12]
 800ceb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ceb6:	6665      	str	r5, [r4, #100]	; 0x64
 800ceb8:	f000 f86c 	bl	800cf94 <__retarget_lock_init_recursive>
 800cebc:	f7ff ff96 	bl	800cdec <__sfp_lock_release>
 800cec0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cec4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cec8:	6025      	str	r5, [r4, #0]
 800ceca:	61a5      	str	r5, [r4, #24]
 800cecc:	2208      	movs	r2, #8
 800cece:	4629      	mov	r1, r5
 800ced0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ced4:	f000 f87f 	bl	800cfd6 <memset>
 800ced8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cedc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cee0:	4620      	mov	r0, r4
 800cee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cee4:	3468      	adds	r4, #104	; 0x68
 800cee6:	e7d9      	b.n	800ce9c <__sfp+0x1c>
 800cee8:	2104      	movs	r1, #4
 800ceea:	4638      	mov	r0, r7
 800ceec:	f7ff ff62 	bl	800cdb4 <__sfmoreglue>
 800cef0:	4604      	mov	r4, r0
 800cef2:	6030      	str	r0, [r6, #0]
 800cef4:	2800      	cmp	r0, #0
 800cef6:	d1d5      	bne.n	800cea4 <__sfp+0x24>
 800cef8:	f7ff ff78 	bl	800cdec <__sfp_lock_release>
 800cefc:	230c      	movs	r3, #12
 800cefe:	603b      	str	r3, [r7, #0]
 800cf00:	e7ee      	b.n	800cee0 <__sfp+0x60>
 800cf02:	bf00      	nop
 800cf04:	0804c8c8 	.word	0x0804c8c8
 800cf08:	ffff0001 	.word	0xffff0001

0800cf0c <_fwalk_reent>:
 800cf0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf10:	4606      	mov	r6, r0
 800cf12:	4688      	mov	r8, r1
 800cf14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cf18:	2700      	movs	r7, #0
 800cf1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf1e:	f1b9 0901 	subs.w	r9, r9, #1
 800cf22:	d505      	bpl.n	800cf30 <_fwalk_reent+0x24>
 800cf24:	6824      	ldr	r4, [r4, #0]
 800cf26:	2c00      	cmp	r4, #0
 800cf28:	d1f7      	bne.n	800cf1a <_fwalk_reent+0xe>
 800cf2a:	4638      	mov	r0, r7
 800cf2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf30:	89ab      	ldrh	r3, [r5, #12]
 800cf32:	2b01      	cmp	r3, #1
 800cf34:	d907      	bls.n	800cf46 <_fwalk_reent+0x3a>
 800cf36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	d003      	beq.n	800cf46 <_fwalk_reent+0x3a>
 800cf3e:	4629      	mov	r1, r5
 800cf40:	4630      	mov	r0, r6
 800cf42:	47c0      	blx	r8
 800cf44:	4307      	orrs	r7, r0
 800cf46:	3568      	adds	r5, #104	; 0x68
 800cf48:	e7e9      	b.n	800cf1e <_fwalk_reent+0x12>
	...

0800cf4c <__libc_init_array>:
 800cf4c:	b570      	push	{r4, r5, r6, lr}
 800cf4e:	4d0d      	ldr	r5, [pc, #52]	; (800cf84 <__libc_init_array+0x38>)
 800cf50:	4c0d      	ldr	r4, [pc, #52]	; (800cf88 <__libc_init_array+0x3c>)
 800cf52:	1b64      	subs	r4, r4, r5
 800cf54:	10a4      	asrs	r4, r4, #2
 800cf56:	2600      	movs	r6, #0
 800cf58:	42a6      	cmp	r6, r4
 800cf5a:	d109      	bne.n	800cf70 <__libc_init_array+0x24>
 800cf5c:	4d0b      	ldr	r5, [pc, #44]	; (800cf8c <__libc_init_array+0x40>)
 800cf5e:	4c0c      	ldr	r4, [pc, #48]	; (800cf90 <__libc_init_array+0x44>)
 800cf60:	f006 fed4 	bl	8013d0c <_init>
 800cf64:	1b64      	subs	r4, r4, r5
 800cf66:	10a4      	asrs	r4, r4, #2
 800cf68:	2600      	movs	r6, #0
 800cf6a:	42a6      	cmp	r6, r4
 800cf6c:	d105      	bne.n	800cf7a <__libc_init_array+0x2e>
 800cf6e:	bd70      	pop	{r4, r5, r6, pc}
 800cf70:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf74:	4798      	blx	r3
 800cf76:	3601      	adds	r6, #1
 800cf78:	e7ee      	b.n	800cf58 <__libc_init_array+0xc>
 800cf7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf7e:	4798      	blx	r3
 800cf80:	3601      	adds	r6, #1
 800cf82:	e7f2      	b.n	800cf6a <__libc_init_array+0x1e>
 800cf84:	0804d248 	.word	0x0804d248
 800cf88:	0804d248 	.word	0x0804d248
 800cf8c:	0804d248 	.word	0x0804d248
 800cf90:	0804d24c 	.word	0x0804d24c

0800cf94 <__retarget_lock_init_recursive>:
 800cf94:	4770      	bx	lr

0800cf96 <__retarget_lock_acquire_recursive>:
 800cf96:	4770      	bx	lr

0800cf98 <__retarget_lock_release_recursive>:
 800cf98:	4770      	bx	lr

0800cf9a <memcmp>:
 800cf9a:	b510      	push	{r4, lr}
 800cf9c:	3901      	subs	r1, #1
 800cf9e:	4402      	add	r2, r0
 800cfa0:	4290      	cmp	r0, r2
 800cfa2:	d101      	bne.n	800cfa8 <memcmp+0xe>
 800cfa4:	2000      	movs	r0, #0
 800cfa6:	e005      	b.n	800cfb4 <memcmp+0x1a>
 800cfa8:	7803      	ldrb	r3, [r0, #0]
 800cfaa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cfae:	42a3      	cmp	r3, r4
 800cfb0:	d001      	beq.n	800cfb6 <memcmp+0x1c>
 800cfb2:	1b18      	subs	r0, r3, r4
 800cfb4:	bd10      	pop	{r4, pc}
 800cfb6:	3001      	adds	r0, #1
 800cfb8:	e7f2      	b.n	800cfa0 <memcmp+0x6>

0800cfba <memcpy>:
 800cfba:	440a      	add	r2, r1
 800cfbc:	4291      	cmp	r1, r2
 800cfbe:	f100 33ff 	add.w	r3, r0, #4294967295
 800cfc2:	d100      	bne.n	800cfc6 <memcpy+0xc>
 800cfc4:	4770      	bx	lr
 800cfc6:	b510      	push	{r4, lr}
 800cfc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfd0:	4291      	cmp	r1, r2
 800cfd2:	d1f9      	bne.n	800cfc8 <memcpy+0xe>
 800cfd4:	bd10      	pop	{r4, pc}

0800cfd6 <memset>:
 800cfd6:	4402      	add	r2, r0
 800cfd8:	4603      	mov	r3, r0
 800cfda:	4293      	cmp	r3, r2
 800cfdc:	d100      	bne.n	800cfe0 <memset+0xa>
 800cfde:	4770      	bx	lr
 800cfe0:	f803 1b01 	strb.w	r1, [r3], #1
 800cfe4:	e7f9      	b.n	800cfda <memset+0x4>
	...

0800cfe8 <sbrk_aligned>:
 800cfe8:	b570      	push	{r4, r5, r6, lr}
 800cfea:	4e0e      	ldr	r6, [pc, #56]	; (800d024 <sbrk_aligned+0x3c>)
 800cfec:	460c      	mov	r4, r1
 800cfee:	6831      	ldr	r1, [r6, #0]
 800cff0:	4605      	mov	r5, r0
 800cff2:	b911      	cbnz	r1, 800cffa <sbrk_aligned+0x12>
 800cff4:	f000 fd84 	bl	800db00 <_sbrk_r>
 800cff8:	6030      	str	r0, [r6, #0]
 800cffa:	4621      	mov	r1, r4
 800cffc:	4628      	mov	r0, r5
 800cffe:	f000 fd7f 	bl	800db00 <_sbrk_r>
 800d002:	1c43      	adds	r3, r0, #1
 800d004:	d00a      	beq.n	800d01c <sbrk_aligned+0x34>
 800d006:	1cc4      	adds	r4, r0, #3
 800d008:	f024 0403 	bic.w	r4, r4, #3
 800d00c:	42a0      	cmp	r0, r4
 800d00e:	d007      	beq.n	800d020 <sbrk_aligned+0x38>
 800d010:	1a21      	subs	r1, r4, r0
 800d012:	4628      	mov	r0, r5
 800d014:	f000 fd74 	bl	800db00 <_sbrk_r>
 800d018:	3001      	adds	r0, #1
 800d01a:	d101      	bne.n	800d020 <sbrk_aligned+0x38>
 800d01c:	f04f 34ff 	mov.w	r4, #4294967295
 800d020:	4620      	mov	r0, r4
 800d022:	bd70      	pop	{r4, r5, r6, pc}
 800d024:	20014014 	.word	0x20014014

0800d028 <_malloc_r>:
 800d028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d02c:	1ccd      	adds	r5, r1, #3
 800d02e:	f025 0503 	bic.w	r5, r5, #3
 800d032:	3508      	adds	r5, #8
 800d034:	2d0c      	cmp	r5, #12
 800d036:	bf38      	it	cc
 800d038:	250c      	movcc	r5, #12
 800d03a:	2d00      	cmp	r5, #0
 800d03c:	4607      	mov	r7, r0
 800d03e:	db01      	blt.n	800d044 <_malloc_r+0x1c>
 800d040:	42a9      	cmp	r1, r5
 800d042:	d905      	bls.n	800d050 <_malloc_r+0x28>
 800d044:	230c      	movs	r3, #12
 800d046:	603b      	str	r3, [r7, #0]
 800d048:	2600      	movs	r6, #0
 800d04a:	4630      	mov	r0, r6
 800d04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d050:	4e2e      	ldr	r6, [pc, #184]	; (800d10c <_malloc_r+0xe4>)
 800d052:	f001 feaf 	bl	800edb4 <__malloc_lock>
 800d056:	6833      	ldr	r3, [r6, #0]
 800d058:	461c      	mov	r4, r3
 800d05a:	bb34      	cbnz	r4, 800d0aa <_malloc_r+0x82>
 800d05c:	4629      	mov	r1, r5
 800d05e:	4638      	mov	r0, r7
 800d060:	f7ff ffc2 	bl	800cfe8 <sbrk_aligned>
 800d064:	1c43      	adds	r3, r0, #1
 800d066:	4604      	mov	r4, r0
 800d068:	d14d      	bne.n	800d106 <_malloc_r+0xde>
 800d06a:	6834      	ldr	r4, [r6, #0]
 800d06c:	4626      	mov	r6, r4
 800d06e:	2e00      	cmp	r6, #0
 800d070:	d140      	bne.n	800d0f4 <_malloc_r+0xcc>
 800d072:	6823      	ldr	r3, [r4, #0]
 800d074:	4631      	mov	r1, r6
 800d076:	4638      	mov	r0, r7
 800d078:	eb04 0803 	add.w	r8, r4, r3
 800d07c:	f000 fd40 	bl	800db00 <_sbrk_r>
 800d080:	4580      	cmp	r8, r0
 800d082:	d13a      	bne.n	800d0fa <_malloc_r+0xd2>
 800d084:	6821      	ldr	r1, [r4, #0]
 800d086:	3503      	adds	r5, #3
 800d088:	1a6d      	subs	r5, r5, r1
 800d08a:	f025 0503 	bic.w	r5, r5, #3
 800d08e:	3508      	adds	r5, #8
 800d090:	2d0c      	cmp	r5, #12
 800d092:	bf38      	it	cc
 800d094:	250c      	movcc	r5, #12
 800d096:	4629      	mov	r1, r5
 800d098:	4638      	mov	r0, r7
 800d09a:	f7ff ffa5 	bl	800cfe8 <sbrk_aligned>
 800d09e:	3001      	adds	r0, #1
 800d0a0:	d02b      	beq.n	800d0fa <_malloc_r+0xd2>
 800d0a2:	6823      	ldr	r3, [r4, #0]
 800d0a4:	442b      	add	r3, r5
 800d0a6:	6023      	str	r3, [r4, #0]
 800d0a8:	e00e      	b.n	800d0c8 <_malloc_r+0xa0>
 800d0aa:	6822      	ldr	r2, [r4, #0]
 800d0ac:	1b52      	subs	r2, r2, r5
 800d0ae:	d41e      	bmi.n	800d0ee <_malloc_r+0xc6>
 800d0b0:	2a0b      	cmp	r2, #11
 800d0b2:	d916      	bls.n	800d0e2 <_malloc_r+0xba>
 800d0b4:	1961      	adds	r1, r4, r5
 800d0b6:	42a3      	cmp	r3, r4
 800d0b8:	6025      	str	r5, [r4, #0]
 800d0ba:	bf18      	it	ne
 800d0bc:	6059      	strne	r1, [r3, #4]
 800d0be:	6863      	ldr	r3, [r4, #4]
 800d0c0:	bf08      	it	eq
 800d0c2:	6031      	streq	r1, [r6, #0]
 800d0c4:	5162      	str	r2, [r4, r5]
 800d0c6:	604b      	str	r3, [r1, #4]
 800d0c8:	4638      	mov	r0, r7
 800d0ca:	f104 060b 	add.w	r6, r4, #11
 800d0ce:	f001 fe77 	bl	800edc0 <__malloc_unlock>
 800d0d2:	f026 0607 	bic.w	r6, r6, #7
 800d0d6:	1d23      	adds	r3, r4, #4
 800d0d8:	1af2      	subs	r2, r6, r3
 800d0da:	d0b6      	beq.n	800d04a <_malloc_r+0x22>
 800d0dc:	1b9b      	subs	r3, r3, r6
 800d0de:	50a3      	str	r3, [r4, r2]
 800d0e0:	e7b3      	b.n	800d04a <_malloc_r+0x22>
 800d0e2:	6862      	ldr	r2, [r4, #4]
 800d0e4:	42a3      	cmp	r3, r4
 800d0e6:	bf0c      	ite	eq
 800d0e8:	6032      	streq	r2, [r6, #0]
 800d0ea:	605a      	strne	r2, [r3, #4]
 800d0ec:	e7ec      	b.n	800d0c8 <_malloc_r+0xa0>
 800d0ee:	4623      	mov	r3, r4
 800d0f0:	6864      	ldr	r4, [r4, #4]
 800d0f2:	e7b2      	b.n	800d05a <_malloc_r+0x32>
 800d0f4:	4634      	mov	r4, r6
 800d0f6:	6876      	ldr	r6, [r6, #4]
 800d0f8:	e7b9      	b.n	800d06e <_malloc_r+0x46>
 800d0fa:	230c      	movs	r3, #12
 800d0fc:	603b      	str	r3, [r7, #0]
 800d0fe:	4638      	mov	r0, r7
 800d100:	f001 fe5e 	bl	800edc0 <__malloc_unlock>
 800d104:	e7a1      	b.n	800d04a <_malloc_r+0x22>
 800d106:	6025      	str	r5, [r4, #0]
 800d108:	e7de      	b.n	800d0c8 <_malloc_r+0xa0>
 800d10a:	bf00      	nop
 800d10c:	20014010 	.word	0x20014010

0800d110 <__cvt>:
 800d110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d114:	ec55 4b10 	vmov	r4, r5, d0
 800d118:	2d00      	cmp	r5, #0
 800d11a:	460e      	mov	r6, r1
 800d11c:	4619      	mov	r1, r3
 800d11e:	462b      	mov	r3, r5
 800d120:	bfbb      	ittet	lt
 800d122:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d126:	461d      	movlt	r5, r3
 800d128:	2300      	movge	r3, #0
 800d12a:	232d      	movlt	r3, #45	; 0x2d
 800d12c:	700b      	strb	r3, [r1, #0]
 800d12e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d130:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d134:	4691      	mov	r9, r2
 800d136:	f023 0820 	bic.w	r8, r3, #32
 800d13a:	bfbc      	itt	lt
 800d13c:	4622      	movlt	r2, r4
 800d13e:	4614      	movlt	r4, r2
 800d140:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d144:	d005      	beq.n	800d152 <__cvt+0x42>
 800d146:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d14a:	d100      	bne.n	800d14e <__cvt+0x3e>
 800d14c:	3601      	adds	r6, #1
 800d14e:	2102      	movs	r1, #2
 800d150:	e000      	b.n	800d154 <__cvt+0x44>
 800d152:	2103      	movs	r1, #3
 800d154:	ab03      	add	r3, sp, #12
 800d156:	9301      	str	r3, [sp, #4]
 800d158:	ab02      	add	r3, sp, #8
 800d15a:	9300      	str	r3, [sp, #0]
 800d15c:	ec45 4b10 	vmov	d0, r4, r5
 800d160:	4653      	mov	r3, sl
 800d162:	4632      	mov	r2, r6
 800d164:	f000 fee0 	bl	800df28 <_dtoa_r>
 800d168:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d16c:	4607      	mov	r7, r0
 800d16e:	d102      	bne.n	800d176 <__cvt+0x66>
 800d170:	f019 0f01 	tst.w	r9, #1
 800d174:	d022      	beq.n	800d1bc <__cvt+0xac>
 800d176:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d17a:	eb07 0906 	add.w	r9, r7, r6
 800d17e:	d110      	bne.n	800d1a2 <__cvt+0x92>
 800d180:	783b      	ldrb	r3, [r7, #0]
 800d182:	2b30      	cmp	r3, #48	; 0x30
 800d184:	d10a      	bne.n	800d19c <__cvt+0x8c>
 800d186:	2200      	movs	r2, #0
 800d188:	2300      	movs	r3, #0
 800d18a:	4620      	mov	r0, r4
 800d18c:	4629      	mov	r1, r5
 800d18e:	f7f9 fd03 	bl	8006b98 <__aeabi_dcmpeq>
 800d192:	b918      	cbnz	r0, 800d19c <__cvt+0x8c>
 800d194:	f1c6 0601 	rsb	r6, r6, #1
 800d198:	f8ca 6000 	str.w	r6, [sl]
 800d19c:	f8da 3000 	ldr.w	r3, [sl]
 800d1a0:	4499      	add	r9, r3
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	4620      	mov	r0, r4
 800d1a8:	4629      	mov	r1, r5
 800d1aa:	f7f9 fcf5 	bl	8006b98 <__aeabi_dcmpeq>
 800d1ae:	b108      	cbz	r0, 800d1b4 <__cvt+0xa4>
 800d1b0:	f8cd 900c 	str.w	r9, [sp, #12]
 800d1b4:	2230      	movs	r2, #48	; 0x30
 800d1b6:	9b03      	ldr	r3, [sp, #12]
 800d1b8:	454b      	cmp	r3, r9
 800d1ba:	d307      	bcc.n	800d1cc <__cvt+0xbc>
 800d1bc:	9b03      	ldr	r3, [sp, #12]
 800d1be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d1c0:	1bdb      	subs	r3, r3, r7
 800d1c2:	4638      	mov	r0, r7
 800d1c4:	6013      	str	r3, [r2, #0]
 800d1c6:	b004      	add	sp, #16
 800d1c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1cc:	1c59      	adds	r1, r3, #1
 800d1ce:	9103      	str	r1, [sp, #12]
 800d1d0:	701a      	strb	r2, [r3, #0]
 800d1d2:	e7f0      	b.n	800d1b6 <__cvt+0xa6>

0800d1d4 <__exponent>:
 800d1d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	2900      	cmp	r1, #0
 800d1da:	bfb8      	it	lt
 800d1dc:	4249      	neglt	r1, r1
 800d1de:	f803 2b02 	strb.w	r2, [r3], #2
 800d1e2:	bfb4      	ite	lt
 800d1e4:	222d      	movlt	r2, #45	; 0x2d
 800d1e6:	222b      	movge	r2, #43	; 0x2b
 800d1e8:	2909      	cmp	r1, #9
 800d1ea:	7042      	strb	r2, [r0, #1]
 800d1ec:	dd2a      	ble.n	800d244 <__exponent+0x70>
 800d1ee:	f10d 0407 	add.w	r4, sp, #7
 800d1f2:	46a4      	mov	ip, r4
 800d1f4:	270a      	movs	r7, #10
 800d1f6:	46a6      	mov	lr, r4
 800d1f8:	460a      	mov	r2, r1
 800d1fa:	fb91 f6f7 	sdiv	r6, r1, r7
 800d1fe:	fb07 1516 	mls	r5, r7, r6, r1
 800d202:	3530      	adds	r5, #48	; 0x30
 800d204:	2a63      	cmp	r2, #99	; 0x63
 800d206:	f104 34ff 	add.w	r4, r4, #4294967295
 800d20a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d20e:	4631      	mov	r1, r6
 800d210:	dcf1      	bgt.n	800d1f6 <__exponent+0x22>
 800d212:	3130      	adds	r1, #48	; 0x30
 800d214:	f1ae 0502 	sub.w	r5, lr, #2
 800d218:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d21c:	1c44      	adds	r4, r0, #1
 800d21e:	4629      	mov	r1, r5
 800d220:	4561      	cmp	r1, ip
 800d222:	d30a      	bcc.n	800d23a <__exponent+0x66>
 800d224:	f10d 0209 	add.w	r2, sp, #9
 800d228:	eba2 020e 	sub.w	r2, r2, lr
 800d22c:	4565      	cmp	r5, ip
 800d22e:	bf88      	it	hi
 800d230:	2200      	movhi	r2, #0
 800d232:	4413      	add	r3, r2
 800d234:	1a18      	subs	r0, r3, r0
 800d236:	b003      	add	sp, #12
 800d238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d23a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d23e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d242:	e7ed      	b.n	800d220 <__exponent+0x4c>
 800d244:	2330      	movs	r3, #48	; 0x30
 800d246:	3130      	adds	r1, #48	; 0x30
 800d248:	7083      	strb	r3, [r0, #2]
 800d24a:	70c1      	strb	r1, [r0, #3]
 800d24c:	1d03      	adds	r3, r0, #4
 800d24e:	e7f1      	b.n	800d234 <__exponent+0x60>

0800d250 <_printf_float>:
 800d250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d254:	ed2d 8b02 	vpush	{d8}
 800d258:	b08d      	sub	sp, #52	; 0x34
 800d25a:	460c      	mov	r4, r1
 800d25c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d260:	4616      	mov	r6, r2
 800d262:	461f      	mov	r7, r3
 800d264:	4605      	mov	r5, r0
 800d266:	f001 fd21 	bl	800ecac <_localeconv_r>
 800d26a:	f8d0 a000 	ldr.w	sl, [r0]
 800d26e:	4650      	mov	r0, sl
 800d270:	f7f9 f80f 	bl	8006292 <strlen>
 800d274:	2300      	movs	r3, #0
 800d276:	930a      	str	r3, [sp, #40]	; 0x28
 800d278:	6823      	ldr	r3, [r4, #0]
 800d27a:	9305      	str	r3, [sp, #20]
 800d27c:	f8d8 3000 	ldr.w	r3, [r8]
 800d280:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d284:	3307      	adds	r3, #7
 800d286:	f023 0307 	bic.w	r3, r3, #7
 800d28a:	f103 0208 	add.w	r2, r3, #8
 800d28e:	f8c8 2000 	str.w	r2, [r8]
 800d292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d296:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d29a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d29e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d2a2:	9307      	str	r3, [sp, #28]
 800d2a4:	f8cd 8018 	str.w	r8, [sp, #24]
 800d2a8:	ee08 0a10 	vmov	s16, r0
 800d2ac:	4b9f      	ldr	r3, [pc, #636]	; (800d52c <_printf_float+0x2dc>)
 800d2ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d2b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d2b6:	f7f9 fca1 	bl	8006bfc <__aeabi_dcmpun>
 800d2ba:	bb88      	cbnz	r0, 800d320 <_printf_float+0xd0>
 800d2bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d2c0:	4b9a      	ldr	r3, [pc, #616]	; (800d52c <_printf_float+0x2dc>)
 800d2c2:	f04f 32ff 	mov.w	r2, #4294967295
 800d2c6:	f7f9 fc7b 	bl	8006bc0 <__aeabi_dcmple>
 800d2ca:	bb48      	cbnz	r0, 800d320 <_printf_float+0xd0>
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	4640      	mov	r0, r8
 800d2d2:	4649      	mov	r1, r9
 800d2d4:	f7f9 fc6a 	bl	8006bac <__aeabi_dcmplt>
 800d2d8:	b110      	cbz	r0, 800d2e0 <_printf_float+0x90>
 800d2da:	232d      	movs	r3, #45	; 0x2d
 800d2dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2e0:	4b93      	ldr	r3, [pc, #588]	; (800d530 <_printf_float+0x2e0>)
 800d2e2:	4894      	ldr	r0, [pc, #592]	; (800d534 <_printf_float+0x2e4>)
 800d2e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d2e8:	bf94      	ite	ls
 800d2ea:	4698      	movls	r8, r3
 800d2ec:	4680      	movhi	r8, r0
 800d2ee:	2303      	movs	r3, #3
 800d2f0:	6123      	str	r3, [r4, #16]
 800d2f2:	9b05      	ldr	r3, [sp, #20]
 800d2f4:	f023 0204 	bic.w	r2, r3, #4
 800d2f8:	6022      	str	r2, [r4, #0]
 800d2fa:	f04f 0900 	mov.w	r9, #0
 800d2fe:	9700      	str	r7, [sp, #0]
 800d300:	4633      	mov	r3, r6
 800d302:	aa0b      	add	r2, sp, #44	; 0x2c
 800d304:	4621      	mov	r1, r4
 800d306:	4628      	mov	r0, r5
 800d308:	f000 f9d8 	bl	800d6bc <_printf_common>
 800d30c:	3001      	adds	r0, #1
 800d30e:	f040 8090 	bne.w	800d432 <_printf_float+0x1e2>
 800d312:	f04f 30ff 	mov.w	r0, #4294967295
 800d316:	b00d      	add	sp, #52	; 0x34
 800d318:	ecbd 8b02 	vpop	{d8}
 800d31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d320:	4642      	mov	r2, r8
 800d322:	464b      	mov	r3, r9
 800d324:	4640      	mov	r0, r8
 800d326:	4649      	mov	r1, r9
 800d328:	f7f9 fc68 	bl	8006bfc <__aeabi_dcmpun>
 800d32c:	b140      	cbz	r0, 800d340 <_printf_float+0xf0>
 800d32e:	464b      	mov	r3, r9
 800d330:	2b00      	cmp	r3, #0
 800d332:	bfbc      	itt	lt
 800d334:	232d      	movlt	r3, #45	; 0x2d
 800d336:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d33a:	487f      	ldr	r0, [pc, #508]	; (800d538 <_printf_float+0x2e8>)
 800d33c:	4b7f      	ldr	r3, [pc, #508]	; (800d53c <_printf_float+0x2ec>)
 800d33e:	e7d1      	b.n	800d2e4 <_printf_float+0x94>
 800d340:	6863      	ldr	r3, [r4, #4]
 800d342:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d346:	9206      	str	r2, [sp, #24]
 800d348:	1c5a      	adds	r2, r3, #1
 800d34a:	d13f      	bne.n	800d3cc <_printf_float+0x17c>
 800d34c:	2306      	movs	r3, #6
 800d34e:	6063      	str	r3, [r4, #4]
 800d350:	9b05      	ldr	r3, [sp, #20]
 800d352:	6861      	ldr	r1, [r4, #4]
 800d354:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d358:	2300      	movs	r3, #0
 800d35a:	9303      	str	r3, [sp, #12]
 800d35c:	ab0a      	add	r3, sp, #40	; 0x28
 800d35e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d362:	ab09      	add	r3, sp, #36	; 0x24
 800d364:	ec49 8b10 	vmov	d0, r8, r9
 800d368:	9300      	str	r3, [sp, #0]
 800d36a:	6022      	str	r2, [r4, #0]
 800d36c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d370:	4628      	mov	r0, r5
 800d372:	f7ff fecd 	bl	800d110 <__cvt>
 800d376:	9b06      	ldr	r3, [sp, #24]
 800d378:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d37a:	2b47      	cmp	r3, #71	; 0x47
 800d37c:	4680      	mov	r8, r0
 800d37e:	d108      	bne.n	800d392 <_printf_float+0x142>
 800d380:	1cc8      	adds	r0, r1, #3
 800d382:	db02      	blt.n	800d38a <_printf_float+0x13a>
 800d384:	6863      	ldr	r3, [r4, #4]
 800d386:	4299      	cmp	r1, r3
 800d388:	dd41      	ble.n	800d40e <_printf_float+0x1be>
 800d38a:	f1ab 0b02 	sub.w	fp, fp, #2
 800d38e:	fa5f fb8b 	uxtb.w	fp, fp
 800d392:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d396:	d820      	bhi.n	800d3da <_printf_float+0x18a>
 800d398:	3901      	subs	r1, #1
 800d39a:	465a      	mov	r2, fp
 800d39c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d3a0:	9109      	str	r1, [sp, #36]	; 0x24
 800d3a2:	f7ff ff17 	bl	800d1d4 <__exponent>
 800d3a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3a8:	1813      	adds	r3, r2, r0
 800d3aa:	2a01      	cmp	r2, #1
 800d3ac:	4681      	mov	r9, r0
 800d3ae:	6123      	str	r3, [r4, #16]
 800d3b0:	dc02      	bgt.n	800d3b8 <_printf_float+0x168>
 800d3b2:	6822      	ldr	r2, [r4, #0]
 800d3b4:	07d2      	lsls	r2, r2, #31
 800d3b6:	d501      	bpl.n	800d3bc <_printf_float+0x16c>
 800d3b8:	3301      	adds	r3, #1
 800d3ba:	6123      	str	r3, [r4, #16]
 800d3bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d09c      	beq.n	800d2fe <_printf_float+0xae>
 800d3c4:	232d      	movs	r3, #45	; 0x2d
 800d3c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3ca:	e798      	b.n	800d2fe <_printf_float+0xae>
 800d3cc:	9a06      	ldr	r2, [sp, #24]
 800d3ce:	2a47      	cmp	r2, #71	; 0x47
 800d3d0:	d1be      	bne.n	800d350 <_printf_float+0x100>
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d1bc      	bne.n	800d350 <_printf_float+0x100>
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	e7b9      	b.n	800d34e <_printf_float+0xfe>
 800d3da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d3de:	d118      	bne.n	800d412 <_printf_float+0x1c2>
 800d3e0:	2900      	cmp	r1, #0
 800d3e2:	6863      	ldr	r3, [r4, #4]
 800d3e4:	dd0b      	ble.n	800d3fe <_printf_float+0x1ae>
 800d3e6:	6121      	str	r1, [r4, #16]
 800d3e8:	b913      	cbnz	r3, 800d3f0 <_printf_float+0x1a0>
 800d3ea:	6822      	ldr	r2, [r4, #0]
 800d3ec:	07d0      	lsls	r0, r2, #31
 800d3ee:	d502      	bpl.n	800d3f6 <_printf_float+0x1a6>
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	440b      	add	r3, r1
 800d3f4:	6123      	str	r3, [r4, #16]
 800d3f6:	65a1      	str	r1, [r4, #88]	; 0x58
 800d3f8:	f04f 0900 	mov.w	r9, #0
 800d3fc:	e7de      	b.n	800d3bc <_printf_float+0x16c>
 800d3fe:	b913      	cbnz	r3, 800d406 <_printf_float+0x1b6>
 800d400:	6822      	ldr	r2, [r4, #0]
 800d402:	07d2      	lsls	r2, r2, #31
 800d404:	d501      	bpl.n	800d40a <_printf_float+0x1ba>
 800d406:	3302      	adds	r3, #2
 800d408:	e7f4      	b.n	800d3f4 <_printf_float+0x1a4>
 800d40a:	2301      	movs	r3, #1
 800d40c:	e7f2      	b.n	800d3f4 <_printf_float+0x1a4>
 800d40e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d414:	4299      	cmp	r1, r3
 800d416:	db05      	blt.n	800d424 <_printf_float+0x1d4>
 800d418:	6823      	ldr	r3, [r4, #0]
 800d41a:	6121      	str	r1, [r4, #16]
 800d41c:	07d8      	lsls	r0, r3, #31
 800d41e:	d5ea      	bpl.n	800d3f6 <_printf_float+0x1a6>
 800d420:	1c4b      	adds	r3, r1, #1
 800d422:	e7e7      	b.n	800d3f4 <_printf_float+0x1a4>
 800d424:	2900      	cmp	r1, #0
 800d426:	bfd4      	ite	le
 800d428:	f1c1 0202 	rsble	r2, r1, #2
 800d42c:	2201      	movgt	r2, #1
 800d42e:	4413      	add	r3, r2
 800d430:	e7e0      	b.n	800d3f4 <_printf_float+0x1a4>
 800d432:	6823      	ldr	r3, [r4, #0]
 800d434:	055a      	lsls	r2, r3, #21
 800d436:	d407      	bmi.n	800d448 <_printf_float+0x1f8>
 800d438:	6923      	ldr	r3, [r4, #16]
 800d43a:	4642      	mov	r2, r8
 800d43c:	4631      	mov	r1, r6
 800d43e:	4628      	mov	r0, r5
 800d440:	47b8      	blx	r7
 800d442:	3001      	adds	r0, #1
 800d444:	d12c      	bne.n	800d4a0 <_printf_float+0x250>
 800d446:	e764      	b.n	800d312 <_printf_float+0xc2>
 800d448:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d44c:	f240 80e0 	bls.w	800d610 <_printf_float+0x3c0>
 800d450:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d454:	2200      	movs	r2, #0
 800d456:	2300      	movs	r3, #0
 800d458:	f7f9 fb9e 	bl	8006b98 <__aeabi_dcmpeq>
 800d45c:	2800      	cmp	r0, #0
 800d45e:	d034      	beq.n	800d4ca <_printf_float+0x27a>
 800d460:	4a37      	ldr	r2, [pc, #220]	; (800d540 <_printf_float+0x2f0>)
 800d462:	2301      	movs	r3, #1
 800d464:	4631      	mov	r1, r6
 800d466:	4628      	mov	r0, r5
 800d468:	47b8      	blx	r7
 800d46a:	3001      	adds	r0, #1
 800d46c:	f43f af51 	beq.w	800d312 <_printf_float+0xc2>
 800d470:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d474:	429a      	cmp	r2, r3
 800d476:	db02      	blt.n	800d47e <_printf_float+0x22e>
 800d478:	6823      	ldr	r3, [r4, #0]
 800d47a:	07d8      	lsls	r0, r3, #31
 800d47c:	d510      	bpl.n	800d4a0 <_printf_float+0x250>
 800d47e:	ee18 3a10 	vmov	r3, s16
 800d482:	4652      	mov	r2, sl
 800d484:	4631      	mov	r1, r6
 800d486:	4628      	mov	r0, r5
 800d488:	47b8      	blx	r7
 800d48a:	3001      	adds	r0, #1
 800d48c:	f43f af41 	beq.w	800d312 <_printf_float+0xc2>
 800d490:	f04f 0800 	mov.w	r8, #0
 800d494:	f104 091a 	add.w	r9, r4, #26
 800d498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d49a:	3b01      	subs	r3, #1
 800d49c:	4543      	cmp	r3, r8
 800d49e:	dc09      	bgt.n	800d4b4 <_printf_float+0x264>
 800d4a0:	6823      	ldr	r3, [r4, #0]
 800d4a2:	079b      	lsls	r3, r3, #30
 800d4a4:	f100 8105 	bmi.w	800d6b2 <_printf_float+0x462>
 800d4a8:	68e0      	ldr	r0, [r4, #12]
 800d4aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4ac:	4298      	cmp	r0, r3
 800d4ae:	bfb8      	it	lt
 800d4b0:	4618      	movlt	r0, r3
 800d4b2:	e730      	b.n	800d316 <_printf_float+0xc6>
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	464a      	mov	r2, r9
 800d4b8:	4631      	mov	r1, r6
 800d4ba:	4628      	mov	r0, r5
 800d4bc:	47b8      	blx	r7
 800d4be:	3001      	adds	r0, #1
 800d4c0:	f43f af27 	beq.w	800d312 <_printf_float+0xc2>
 800d4c4:	f108 0801 	add.w	r8, r8, #1
 800d4c8:	e7e6      	b.n	800d498 <_printf_float+0x248>
 800d4ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	dc39      	bgt.n	800d544 <_printf_float+0x2f4>
 800d4d0:	4a1b      	ldr	r2, [pc, #108]	; (800d540 <_printf_float+0x2f0>)
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	4631      	mov	r1, r6
 800d4d6:	4628      	mov	r0, r5
 800d4d8:	47b8      	blx	r7
 800d4da:	3001      	adds	r0, #1
 800d4dc:	f43f af19 	beq.w	800d312 <_printf_float+0xc2>
 800d4e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d4e4:	4313      	orrs	r3, r2
 800d4e6:	d102      	bne.n	800d4ee <_printf_float+0x29e>
 800d4e8:	6823      	ldr	r3, [r4, #0]
 800d4ea:	07d9      	lsls	r1, r3, #31
 800d4ec:	d5d8      	bpl.n	800d4a0 <_printf_float+0x250>
 800d4ee:	ee18 3a10 	vmov	r3, s16
 800d4f2:	4652      	mov	r2, sl
 800d4f4:	4631      	mov	r1, r6
 800d4f6:	4628      	mov	r0, r5
 800d4f8:	47b8      	blx	r7
 800d4fa:	3001      	adds	r0, #1
 800d4fc:	f43f af09 	beq.w	800d312 <_printf_float+0xc2>
 800d500:	f04f 0900 	mov.w	r9, #0
 800d504:	f104 0a1a 	add.w	sl, r4, #26
 800d508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d50a:	425b      	negs	r3, r3
 800d50c:	454b      	cmp	r3, r9
 800d50e:	dc01      	bgt.n	800d514 <_printf_float+0x2c4>
 800d510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d512:	e792      	b.n	800d43a <_printf_float+0x1ea>
 800d514:	2301      	movs	r3, #1
 800d516:	4652      	mov	r2, sl
 800d518:	4631      	mov	r1, r6
 800d51a:	4628      	mov	r0, r5
 800d51c:	47b8      	blx	r7
 800d51e:	3001      	adds	r0, #1
 800d520:	f43f aef7 	beq.w	800d312 <_printf_float+0xc2>
 800d524:	f109 0901 	add.w	r9, r9, #1
 800d528:	e7ee      	b.n	800d508 <_printf_float+0x2b8>
 800d52a:	bf00      	nop
 800d52c:	7fefffff 	.word	0x7fefffff
 800d530:	0804c8cc 	.word	0x0804c8cc
 800d534:	0804c8d0 	.word	0x0804c8d0
 800d538:	0804c8d8 	.word	0x0804c8d8
 800d53c:	0804c8d4 	.word	0x0804c8d4
 800d540:	0804c8dc 	.word	0x0804c8dc
 800d544:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d546:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d548:	429a      	cmp	r2, r3
 800d54a:	bfa8      	it	ge
 800d54c:	461a      	movge	r2, r3
 800d54e:	2a00      	cmp	r2, #0
 800d550:	4691      	mov	r9, r2
 800d552:	dc37      	bgt.n	800d5c4 <_printf_float+0x374>
 800d554:	f04f 0b00 	mov.w	fp, #0
 800d558:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d55c:	f104 021a 	add.w	r2, r4, #26
 800d560:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d562:	9305      	str	r3, [sp, #20]
 800d564:	eba3 0309 	sub.w	r3, r3, r9
 800d568:	455b      	cmp	r3, fp
 800d56a:	dc33      	bgt.n	800d5d4 <_printf_float+0x384>
 800d56c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d570:	429a      	cmp	r2, r3
 800d572:	db3b      	blt.n	800d5ec <_printf_float+0x39c>
 800d574:	6823      	ldr	r3, [r4, #0]
 800d576:	07da      	lsls	r2, r3, #31
 800d578:	d438      	bmi.n	800d5ec <_printf_float+0x39c>
 800d57a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d57c:	9a05      	ldr	r2, [sp, #20]
 800d57e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d580:	1a9a      	subs	r2, r3, r2
 800d582:	eba3 0901 	sub.w	r9, r3, r1
 800d586:	4591      	cmp	r9, r2
 800d588:	bfa8      	it	ge
 800d58a:	4691      	movge	r9, r2
 800d58c:	f1b9 0f00 	cmp.w	r9, #0
 800d590:	dc35      	bgt.n	800d5fe <_printf_float+0x3ae>
 800d592:	f04f 0800 	mov.w	r8, #0
 800d596:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d59a:	f104 0a1a 	add.w	sl, r4, #26
 800d59e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d5a2:	1a9b      	subs	r3, r3, r2
 800d5a4:	eba3 0309 	sub.w	r3, r3, r9
 800d5a8:	4543      	cmp	r3, r8
 800d5aa:	f77f af79 	ble.w	800d4a0 <_printf_float+0x250>
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	4652      	mov	r2, sl
 800d5b2:	4631      	mov	r1, r6
 800d5b4:	4628      	mov	r0, r5
 800d5b6:	47b8      	blx	r7
 800d5b8:	3001      	adds	r0, #1
 800d5ba:	f43f aeaa 	beq.w	800d312 <_printf_float+0xc2>
 800d5be:	f108 0801 	add.w	r8, r8, #1
 800d5c2:	e7ec      	b.n	800d59e <_printf_float+0x34e>
 800d5c4:	4613      	mov	r3, r2
 800d5c6:	4631      	mov	r1, r6
 800d5c8:	4642      	mov	r2, r8
 800d5ca:	4628      	mov	r0, r5
 800d5cc:	47b8      	blx	r7
 800d5ce:	3001      	adds	r0, #1
 800d5d0:	d1c0      	bne.n	800d554 <_printf_float+0x304>
 800d5d2:	e69e      	b.n	800d312 <_printf_float+0xc2>
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	4631      	mov	r1, r6
 800d5d8:	4628      	mov	r0, r5
 800d5da:	9205      	str	r2, [sp, #20]
 800d5dc:	47b8      	blx	r7
 800d5de:	3001      	adds	r0, #1
 800d5e0:	f43f ae97 	beq.w	800d312 <_printf_float+0xc2>
 800d5e4:	9a05      	ldr	r2, [sp, #20]
 800d5e6:	f10b 0b01 	add.w	fp, fp, #1
 800d5ea:	e7b9      	b.n	800d560 <_printf_float+0x310>
 800d5ec:	ee18 3a10 	vmov	r3, s16
 800d5f0:	4652      	mov	r2, sl
 800d5f2:	4631      	mov	r1, r6
 800d5f4:	4628      	mov	r0, r5
 800d5f6:	47b8      	blx	r7
 800d5f8:	3001      	adds	r0, #1
 800d5fa:	d1be      	bne.n	800d57a <_printf_float+0x32a>
 800d5fc:	e689      	b.n	800d312 <_printf_float+0xc2>
 800d5fe:	9a05      	ldr	r2, [sp, #20]
 800d600:	464b      	mov	r3, r9
 800d602:	4442      	add	r2, r8
 800d604:	4631      	mov	r1, r6
 800d606:	4628      	mov	r0, r5
 800d608:	47b8      	blx	r7
 800d60a:	3001      	adds	r0, #1
 800d60c:	d1c1      	bne.n	800d592 <_printf_float+0x342>
 800d60e:	e680      	b.n	800d312 <_printf_float+0xc2>
 800d610:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d612:	2a01      	cmp	r2, #1
 800d614:	dc01      	bgt.n	800d61a <_printf_float+0x3ca>
 800d616:	07db      	lsls	r3, r3, #31
 800d618:	d538      	bpl.n	800d68c <_printf_float+0x43c>
 800d61a:	2301      	movs	r3, #1
 800d61c:	4642      	mov	r2, r8
 800d61e:	4631      	mov	r1, r6
 800d620:	4628      	mov	r0, r5
 800d622:	47b8      	blx	r7
 800d624:	3001      	adds	r0, #1
 800d626:	f43f ae74 	beq.w	800d312 <_printf_float+0xc2>
 800d62a:	ee18 3a10 	vmov	r3, s16
 800d62e:	4652      	mov	r2, sl
 800d630:	4631      	mov	r1, r6
 800d632:	4628      	mov	r0, r5
 800d634:	47b8      	blx	r7
 800d636:	3001      	adds	r0, #1
 800d638:	f43f ae6b 	beq.w	800d312 <_printf_float+0xc2>
 800d63c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d640:	2200      	movs	r2, #0
 800d642:	2300      	movs	r3, #0
 800d644:	f7f9 faa8 	bl	8006b98 <__aeabi_dcmpeq>
 800d648:	b9d8      	cbnz	r0, 800d682 <_printf_float+0x432>
 800d64a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d64c:	f108 0201 	add.w	r2, r8, #1
 800d650:	3b01      	subs	r3, #1
 800d652:	4631      	mov	r1, r6
 800d654:	4628      	mov	r0, r5
 800d656:	47b8      	blx	r7
 800d658:	3001      	adds	r0, #1
 800d65a:	d10e      	bne.n	800d67a <_printf_float+0x42a>
 800d65c:	e659      	b.n	800d312 <_printf_float+0xc2>
 800d65e:	2301      	movs	r3, #1
 800d660:	4652      	mov	r2, sl
 800d662:	4631      	mov	r1, r6
 800d664:	4628      	mov	r0, r5
 800d666:	47b8      	blx	r7
 800d668:	3001      	adds	r0, #1
 800d66a:	f43f ae52 	beq.w	800d312 <_printf_float+0xc2>
 800d66e:	f108 0801 	add.w	r8, r8, #1
 800d672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d674:	3b01      	subs	r3, #1
 800d676:	4543      	cmp	r3, r8
 800d678:	dcf1      	bgt.n	800d65e <_printf_float+0x40e>
 800d67a:	464b      	mov	r3, r9
 800d67c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d680:	e6dc      	b.n	800d43c <_printf_float+0x1ec>
 800d682:	f04f 0800 	mov.w	r8, #0
 800d686:	f104 0a1a 	add.w	sl, r4, #26
 800d68a:	e7f2      	b.n	800d672 <_printf_float+0x422>
 800d68c:	2301      	movs	r3, #1
 800d68e:	4642      	mov	r2, r8
 800d690:	e7df      	b.n	800d652 <_printf_float+0x402>
 800d692:	2301      	movs	r3, #1
 800d694:	464a      	mov	r2, r9
 800d696:	4631      	mov	r1, r6
 800d698:	4628      	mov	r0, r5
 800d69a:	47b8      	blx	r7
 800d69c:	3001      	adds	r0, #1
 800d69e:	f43f ae38 	beq.w	800d312 <_printf_float+0xc2>
 800d6a2:	f108 0801 	add.w	r8, r8, #1
 800d6a6:	68e3      	ldr	r3, [r4, #12]
 800d6a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d6aa:	1a5b      	subs	r3, r3, r1
 800d6ac:	4543      	cmp	r3, r8
 800d6ae:	dcf0      	bgt.n	800d692 <_printf_float+0x442>
 800d6b0:	e6fa      	b.n	800d4a8 <_printf_float+0x258>
 800d6b2:	f04f 0800 	mov.w	r8, #0
 800d6b6:	f104 0919 	add.w	r9, r4, #25
 800d6ba:	e7f4      	b.n	800d6a6 <_printf_float+0x456>

0800d6bc <_printf_common>:
 800d6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6c0:	4616      	mov	r6, r2
 800d6c2:	4699      	mov	r9, r3
 800d6c4:	688a      	ldr	r2, [r1, #8]
 800d6c6:	690b      	ldr	r3, [r1, #16]
 800d6c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	bfb8      	it	lt
 800d6d0:	4613      	movlt	r3, r2
 800d6d2:	6033      	str	r3, [r6, #0]
 800d6d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d6d8:	4607      	mov	r7, r0
 800d6da:	460c      	mov	r4, r1
 800d6dc:	b10a      	cbz	r2, 800d6e2 <_printf_common+0x26>
 800d6de:	3301      	adds	r3, #1
 800d6e0:	6033      	str	r3, [r6, #0]
 800d6e2:	6823      	ldr	r3, [r4, #0]
 800d6e4:	0699      	lsls	r1, r3, #26
 800d6e6:	bf42      	ittt	mi
 800d6e8:	6833      	ldrmi	r3, [r6, #0]
 800d6ea:	3302      	addmi	r3, #2
 800d6ec:	6033      	strmi	r3, [r6, #0]
 800d6ee:	6825      	ldr	r5, [r4, #0]
 800d6f0:	f015 0506 	ands.w	r5, r5, #6
 800d6f4:	d106      	bne.n	800d704 <_printf_common+0x48>
 800d6f6:	f104 0a19 	add.w	sl, r4, #25
 800d6fa:	68e3      	ldr	r3, [r4, #12]
 800d6fc:	6832      	ldr	r2, [r6, #0]
 800d6fe:	1a9b      	subs	r3, r3, r2
 800d700:	42ab      	cmp	r3, r5
 800d702:	dc26      	bgt.n	800d752 <_printf_common+0x96>
 800d704:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d708:	1e13      	subs	r3, r2, #0
 800d70a:	6822      	ldr	r2, [r4, #0]
 800d70c:	bf18      	it	ne
 800d70e:	2301      	movne	r3, #1
 800d710:	0692      	lsls	r2, r2, #26
 800d712:	d42b      	bmi.n	800d76c <_printf_common+0xb0>
 800d714:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d718:	4649      	mov	r1, r9
 800d71a:	4638      	mov	r0, r7
 800d71c:	47c0      	blx	r8
 800d71e:	3001      	adds	r0, #1
 800d720:	d01e      	beq.n	800d760 <_printf_common+0xa4>
 800d722:	6823      	ldr	r3, [r4, #0]
 800d724:	68e5      	ldr	r5, [r4, #12]
 800d726:	6832      	ldr	r2, [r6, #0]
 800d728:	f003 0306 	and.w	r3, r3, #6
 800d72c:	2b04      	cmp	r3, #4
 800d72e:	bf08      	it	eq
 800d730:	1aad      	subeq	r5, r5, r2
 800d732:	68a3      	ldr	r3, [r4, #8]
 800d734:	6922      	ldr	r2, [r4, #16]
 800d736:	bf0c      	ite	eq
 800d738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d73c:	2500      	movne	r5, #0
 800d73e:	4293      	cmp	r3, r2
 800d740:	bfc4      	itt	gt
 800d742:	1a9b      	subgt	r3, r3, r2
 800d744:	18ed      	addgt	r5, r5, r3
 800d746:	2600      	movs	r6, #0
 800d748:	341a      	adds	r4, #26
 800d74a:	42b5      	cmp	r5, r6
 800d74c:	d11a      	bne.n	800d784 <_printf_common+0xc8>
 800d74e:	2000      	movs	r0, #0
 800d750:	e008      	b.n	800d764 <_printf_common+0xa8>
 800d752:	2301      	movs	r3, #1
 800d754:	4652      	mov	r2, sl
 800d756:	4649      	mov	r1, r9
 800d758:	4638      	mov	r0, r7
 800d75a:	47c0      	blx	r8
 800d75c:	3001      	adds	r0, #1
 800d75e:	d103      	bne.n	800d768 <_printf_common+0xac>
 800d760:	f04f 30ff 	mov.w	r0, #4294967295
 800d764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d768:	3501      	adds	r5, #1
 800d76a:	e7c6      	b.n	800d6fa <_printf_common+0x3e>
 800d76c:	18e1      	adds	r1, r4, r3
 800d76e:	1c5a      	adds	r2, r3, #1
 800d770:	2030      	movs	r0, #48	; 0x30
 800d772:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d776:	4422      	add	r2, r4
 800d778:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d77c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d780:	3302      	adds	r3, #2
 800d782:	e7c7      	b.n	800d714 <_printf_common+0x58>
 800d784:	2301      	movs	r3, #1
 800d786:	4622      	mov	r2, r4
 800d788:	4649      	mov	r1, r9
 800d78a:	4638      	mov	r0, r7
 800d78c:	47c0      	blx	r8
 800d78e:	3001      	adds	r0, #1
 800d790:	d0e6      	beq.n	800d760 <_printf_common+0xa4>
 800d792:	3601      	adds	r6, #1
 800d794:	e7d9      	b.n	800d74a <_printf_common+0x8e>
	...

0800d798 <_printf_i>:
 800d798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d79c:	7e0f      	ldrb	r7, [r1, #24]
 800d79e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d7a0:	2f78      	cmp	r7, #120	; 0x78
 800d7a2:	4691      	mov	r9, r2
 800d7a4:	4680      	mov	r8, r0
 800d7a6:	460c      	mov	r4, r1
 800d7a8:	469a      	mov	sl, r3
 800d7aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d7ae:	d807      	bhi.n	800d7c0 <_printf_i+0x28>
 800d7b0:	2f62      	cmp	r7, #98	; 0x62
 800d7b2:	d80a      	bhi.n	800d7ca <_printf_i+0x32>
 800d7b4:	2f00      	cmp	r7, #0
 800d7b6:	f000 80d8 	beq.w	800d96a <_printf_i+0x1d2>
 800d7ba:	2f58      	cmp	r7, #88	; 0x58
 800d7bc:	f000 80a3 	beq.w	800d906 <_printf_i+0x16e>
 800d7c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d7c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d7c8:	e03a      	b.n	800d840 <_printf_i+0xa8>
 800d7ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d7ce:	2b15      	cmp	r3, #21
 800d7d0:	d8f6      	bhi.n	800d7c0 <_printf_i+0x28>
 800d7d2:	a101      	add	r1, pc, #4	; (adr r1, 800d7d8 <_printf_i+0x40>)
 800d7d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d7d8:	0800d831 	.word	0x0800d831
 800d7dc:	0800d845 	.word	0x0800d845
 800d7e0:	0800d7c1 	.word	0x0800d7c1
 800d7e4:	0800d7c1 	.word	0x0800d7c1
 800d7e8:	0800d7c1 	.word	0x0800d7c1
 800d7ec:	0800d7c1 	.word	0x0800d7c1
 800d7f0:	0800d845 	.word	0x0800d845
 800d7f4:	0800d7c1 	.word	0x0800d7c1
 800d7f8:	0800d7c1 	.word	0x0800d7c1
 800d7fc:	0800d7c1 	.word	0x0800d7c1
 800d800:	0800d7c1 	.word	0x0800d7c1
 800d804:	0800d951 	.word	0x0800d951
 800d808:	0800d875 	.word	0x0800d875
 800d80c:	0800d933 	.word	0x0800d933
 800d810:	0800d7c1 	.word	0x0800d7c1
 800d814:	0800d7c1 	.word	0x0800d7c1
 800d818:	0800d973 	.word	0x0800d973
 800d81c:	0800d7c1 	.word	0x0800d7c1
 800d820:	0800d875 	.word	0x0800d875
 800d824:	0800d7c1 	.word	0x0800d7c1
 800d828:	0800d7c1 	.word	0x0800d7c1
 800d82c:	0800d93b 	.word	0x0800d93b
 800d830:	682b      	ldr	r3, [r5, #0]
 800d832:	1d1a      	adds	r2, r3, #4
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	602a      	str	r2, [r5, #0]
 800d838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d83c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d840:	2301      	movs	r3, #1
 800d842:	e0a3      	b.n	800d98c <_printf_i+0x1f4>
 800d844:	6820      	ldr	r0, [r4, #0]
 800d846:	6829      	ldr	r1, [r5, #0]
 800d848:	0606      	lsls	r6, r0, #24
 800d84a:	f101 0304 	add.w	r3, r1, #4
 800d84e:	d50a      	bpl.n	800d866 <_printf_i+0xce>
 800d850:	680e      	ldr	r6, [r1, #0]
 800d852:	602b      	str	r3, [r5, #0]
 800d854:	2e00      	cmp	r6, #0
 800d856:	da03      	bge.n	800d860 <_printf_i+0xc8>
 800d858:	232d      	movs	r3, #45	; 0x2d
 800d85a:	4276      	negs	r6, r6
 800d85c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d860:	485e      	ldr	r0, [pc, #376]	; (800d9dc <_printf_i+0x244>)
 800d862:	230a      	movs	r3, #10
 800d864:	e019      	b.n	800d89a <_printf_i+0x102>
 800d866:	680e      	ldr	r6, [r1, #0]
 800d868:	602b      	str	r3, [r5, #0]
 800d86a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d86e:	bf18      	it	ne
 800d870:	b236      	sxthne	r6, r6
 800d872:	e7ef      	b.n	800d854 <_printf_i+0xbc>
 800d874:	682b      	ldr	r3, [r5, #0]
 800d876:	6820      	ldr	r0, [r4, #0]
 800d878:	1d19      	adds	r1, r3, #4
 800d87a:	6029      	str	r1, [r5, #0]
 800d87c:	0601      	lsls	r1, r0, #24
 800d87e:	d501      	bpl.n	800d884 <_printf_i+0xec>
 800d880:	681e      	ldr	r6, [r3, #0]
 800d882:	e002      	b.n	800d88a <_printf_i+0xf2>
 800d884:	0646      	lsls	r6, r0, #25
 800d886:	d5fb      	bpl.n	800d880 <_printf_i+0xe8>
 800d888:	881e      	ldrh	r6, [r3, #0]
 800d88a:	4854      	ldr	r0, [pc, #336]	; (800d9dc <_printf_i+0x244>)
 800d88c:	2f6f      	cmp	r7, #111	; 0x6f
 800d88e:	bf0c      	ite	eq
 800d890:	2308      	moveq	r3, #8
 800d892:	230a      	movne	r3, #10
 800d894:	2100      	movs	r1, #0
 800d896:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d89a:	6865      	ldr	r5, [r4, #4]
 800d89c:	60a5      	str	r5, [r4, #8]
 800d89e:	2d00      	cmp	r5, #0
 800d8a0:	bfa2      	ittt	ge
 800d8a2:	6821      	ldrge	r1, [r4, #0]
 800d8a4:	f021 0104 	bicge.w	r1, r1, #4
 800d8a8:	6021      	strge	r1, [r4, #0]
 800d8aa:	b90e      	cbnz	r6, 800d8b0 <_printf_i+0x118>
 800d8ac:	2d00      	cmp	r5, #0
 800d8ae:	d04d      	beq.n	800d94c <_printf_i+0x1b4>
 800d8b0:	4615      	mov	r5, r2
 800d8b2:	fbb6 f1f3 	udiv	r1, r6, r3
 800d8b6:	fb03 6711 	mls	r7, r3, r1, r6
 800d8ba:	5dc7      	ldrb	r7, [r0, r7]
 800d8bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d8c0:	4637      	mov	r7, r6
 800d8c2:	42bb      	cmp	r3, r7
 800d8c4:	460e      	mov	r6, r1
 800d8c6:	d9f4      	bls.n	800d8b2 <_printf_i+0x11a>
 800d8c8:	2b08      	cmp	r3, #8
 800d8ca:	d10b      	bne.n	800d8e4 <_printf_i+0x14c>
 800d8cc:	6823      	ldr	r3, [r4, #0]
 800d8ce:	07de      	lsls	r6, r3, #31
 800d8d0:	d508      	bpl.n	800d8e4 <_printf_i+0x14c>
 800d8d2:	6923      	ldr	r3, [r4, #16]
 800d8d4:	6861      	ldr	r1, [r4, #4]
 800d8d6:	4299      	cmp	r1, r3
 800d8d8:	bfde      	ittt	le
 800d8da:	2330      	movle	r3, #48	; 0x30
 800d8dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d8e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d8e4:	1b52      	subs	r2, r2, r5
 800d8e6:	6122      	str	r2, [r4, #16]
 800d8e8:	f8cd a000 	str.w	sl, [sp]
 800d8ec:	464b      	mov	r3, r9
 800d8ee:	aa03      	add	r2, sp, #12
 800d8f0:	4621      	mov	r1, r4
 800d8f2:	4640      	mov	r0, r8
 800d8f4:	f7ff fee2 	bl	800d6bc <_printf_common>
 800d8f8:	3001      	adds	r0, #1
 800d8fa:	d14c      	bne.n	800d996 <_printf_i+0x1fe>
 800d8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d900:	b004      	add	sp, #16
 800d902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d906:	4835      	ldr	r0, [pc, #212]	; (800d9dc <_printf_i+0x244>)
 800d908:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d90c:	6829      	ldr	r1, [r5, #0]
 800d90e:	6823      	ldr	r3, [r4, #0]
 800d910:	f851 6b04 	ldr.w	r6, [r1], #4
 800d914:	6029      	str	r1, [r5, #0]
 800d916:	061d      	lsls	r5, r3, #24
 800d918:	d514      	bpl.n	800d944 <_printf_i+0x1ac>
 800d91a:	07df      	lsls	r7, r3, #31
 800d91c:	bf44      	itt	mi
 800d91e:	f043 0320 	orrmi.w	r3, r3, #32
 800d922:	6023      	strmi	r3, [r4, #0]
 800d924:	b91e      	cbnz	r6, 800d92e <_printf_i+0x196>
 800d926:	6823      	ldr	r3, [r4, #0]
 800d928:	f023 0320 	bic.w	r3, r3, #32
 800d92c:	6023      	str	r3, [r4, #0]
 800d92e:	2310      	movs	r3, #16
 800d930:	e7b0      	b.n	800d894 <_printf_i+0xfc>
 800d932:	6823      	ldr	r3, [r4, #0]
 800d934:	f043 0320 	orr.w	r3, r3, #32
 800d938:	6023      	str	r3, [r4, #0]
 800d93a:	2378      	movs	r3, #120	; 0x78
 800d93c:	4828      	ldr	r0, [pc, #160]	; (800d9e0 <_printf_i+0x248>)
 800d93e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d942:	e7e3      	b.n	800d90c <_printf_i+0x174>
 800d944:	0659      	lsls	r1, r3, #25
 800d946:	bf48      	it	mi
 800d948:	b2b6      	uxthmi	r6, r6
 800d94a:	e7e6      	b.n	800d91a <_printf_i+0x182>
 800d94c:	4615      	mov	r5, r2
 800d94e:	e7bb      	b.n	800d8c8 <_printf_i+0x130>
 800d950:	682b      	ldr	r3, [r5, #0]
 800d952:	6826      	ldr	r6, [r4, #0]
 800d954:	6961      	ldr	r1, [r4, #20]
 800d956:	1d18      	adds	r0, r3, #4
 800d958:	6028      	str	r0, [r5, #0]
 800d95a:	0635      	lsls	r5, r6, #24
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	d501      	bpl.n	800d964 <_printf_i+0x1cc>
 800d960:	6019      	str	r1, [r3, #0]
 800d962:	e002      	b.n	800d96a <_printf_i+0x1d2>
 800d964:	0670      	lsls	r0, r6, #25
 800d966:	d5fb      	bpl.n	800d960 <_printf_i+0x1c8>
 800d968:	8019      	strh	r1, [r3, #0]
 800d96a:	2300      	movs	r3, #0
 800d96c:	6123      	str	r3, [r4, #16]
 800d96e:	4615      	mov	r5, r2
 800d970:	e7ba      	b.n	800d8e8 <_printf_i+0x150>
 800d972:	682b      	ldr	r3, [r5, #0]
 800d974:	1d1a      	adds	r2, r3, #4
 800d976:	602a      	str	r2, [r5, #0]
 800d978:	681d      	ldr	r5, [r3, #0]
 800d97a:	6862      	ldr	r2, [r4, #4]
 800d97c:	2100      	movs	r1, #0
 800d97e:	4628      	mov	r0, r5
 800d980:	f7f8 fc96 	bl	80062b0 <memchr>
 800d984:	b108      	cbz	r0, 800d98a <_printf_i+0x1f2>
 800d986:	1b40      	subs	r0, r0, r5
 800d988:	6060      	str	r0, [r4, #4]
 800d98a:	6863      	ldr	r3, [r4, #4]
 800d98c:	6123      	str	r3, [r4, #16]
 800d98e:	2300      	movs	r3, #0
 800d990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d994:	e7a8      	b.n	800d8e8 <_printf_i+0x150>
 800d996:	6923      	ldr	r3, [r4, #16]
 800d998:	462a      	mov	r2, r5
 800d99a:	4649      	mov	r1, r9
 800d99c:	4640      	mov	r0, r8
 800d99e:	47d0      	blx	sl
 800d9a0:	3001      	adds	r0, #1
 800d9a2:	d0ab      	beq.n	800d8fc <_printf_i+0x164>
 800d9a4:	6823      	ldr	r3, [r4, #0]
 800d9a6:	079b      	lsls	r3, r3, #30
 800d9a8:	d413      	bmi.n	800d9d2 <_printf_i+0x23a>
 800d9aa:	68e0      	ldr	r0, [r4, #12]
 800d9ac:	9b03      	ldr	r3, [sp, #12]
 800d9ae:	4298      	cmp	r0, r3
 800d9b0:	bfb8      	it	lt
 800d9b2:	4618      	movlt	r0, r3
 800d9b4:	e7a4      	b.n	800d900 <_printf_i+0x168>
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	4632      	mov	r2, r6
 800d9ba:	4649      	mov	r1, r9
 800d9bc:	4640      	mov	r0, r8
 800d9be:	47d0      	blx	sl
 800d9c0:	3001      	adds	r0, #1
 800d9c2:	d09b      	beq.n	800d8fc <_printf_i+0x164>
 800d9c4:	3501      	adds	r5, #1
 800d9c6:	68e3      	ldr	r3, [r4, #12]
 800d9c8:	9903      	ldr	r1, [sp, #12]
 800d9ca:	1a5b      	subs	r3, r3, r1
 800d9cc:	42ab      	cmp	r3, r5
 800d9ce:	dcf2      	bgt.n	800d9b6 <_printf_i+0x21e>
 800d9d0:	e7eb      	b.n	800d9aa <_printf_i+0x212>
 800d9d2:	2500      	movs	r5, #0
 800d9d4:	f104 0619 	add.w	r6, r4, #25
 800d9d8:	e7f5      	b.n	800d9c6 <_printf_i+0x22e>
 800d9da:	bf00      	nop
 800d9dc:	0804c8de 	.word	0x0804c8de
 800d9e0:	0804c8ef 	.word	0x0804c8ef

0800d9e4 <iprintf>:
 800d9e4:	b40f      	push	{r0, r1, r2, r3}
 800d9e6:	4b0a      	ldr	r3, [pc, #40]	; (800da10 <iprintf+0x2c>)
 800d9e8:	b513      	push	{r0, r1, r4, lr}
 800d9ea:	681c      	ldr	r4, [r3, #0]
 800d9ec:	b124      	cbz	r4, 800d9f8 <iprintf+0x14>
 800d9ee:	69a3      	ldr	r3, [r4, #24]
 800d9f0:	b913      	cbnz	r3, 800d9f8 <iprintf+0x14>
 800d9f2:	4620      	mov	r0, r4
 800d9f4:	f7ff fa0c 	bl	800ce10 <__sinit>
 800d9f8:	ab05      	add	r3, sp, #20
 800d9fa:	9a04      	ldr	r2, [sp, #16]
 800d9fc:	68a1      	ldr	r1, [r4, #8]
 800d9fe:	9301      	str	r3, [sp, #4]
 800da00:	4620      	mov	r0, r4
 800da02:	f001 ff4f 	bl	800f8a4 <_vfiprintf_r>
 800da06:	b002      	add	sp, #8
 800da08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da0c:	b004      	add	sp, #16
 800da0e:	4770      	bx	lr
 800da10:	20000abc 	.word	0x20000abc

0800da14 <_puts_r>:
 800da14:	b570      	push	{r4, r5, r6, lr}
 800da16:	460e      	mov	r6, r1
 800da18:	4605      	mov	r5, r0
 800da1a:	b118      	cbz	r0, 800da24 <_puts_r+0x10>
 800da1c:	6983      	ldr	r3, [r0, #24]
 800da1e:	b90b      	cbnz	r3, 800da24 <_puts_r+0x10>
 800da20:	f7ff f9f6 	bl	800ce10 <__sinit>
 800da24:	69ab      	ldr	r3, [r5, #24]
 800da26:	68ac      	ldr	r4, [r5, #8]
 800da28:	b913      	cbnz	r3, 800da30 <_puts_r+0x1c>
 800da2a:	4628      	mov	r0, r5
 800da2c:	f7ff f9f0 	bl	800ce10 <__sinit>
 800da30:	4b2c      	ldr	r3, [pc, #176]	; (800dae4 <_puts_r+0xd0>)
 800da32:	429c      	cmp	r4, r3
 800da34:	d120      	bne.n	800da78 <_puts_r+0x64>
 800da36:	686c      	ldr	r4, [r5, #4]
 800da38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da3a:	07db      	lsls	r3, r3, #31
 800da3c:	d405      	bmi.n	800da4a <_puts_r+0x36>
 800da3e:	89a3      	ldrh	r3, [r4, #12]
 800da40:	0598      	lsls	r0, r3, #22
 800da42:	d402      	bmi.n	800da4a <_puts_r+0x36>
 800da44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da46:	f7ff faa6 	bl	800cf96 <__retarget_lock_acquire_recursive>
 800da4a:	89a3      	ldrh	r3, [r4, #12]
 800da4c:	0719      	lsls	r1, r3, #28
 800da4e:	d51d      	bpl.n	800da8c <_puts_r+0x78>
 800da50:	6923      	ldr	r3, [r4, #16]
 800da52:	b1db      	cbz	r3, 800da8c <_puts_r+0x78>
 800da54:	3e01      	subs	r6, #1
 800da56:	68a3      	ldr	r3, [r4, #8]
 800da58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800da5c:	3b01      	subs	r3, #1
 800da5e:	60a3      	str	r3, [r4, #8]
 800da60:	bb39      	cbnz	r1, 800dab2 <_puts_r+0x9e>
 800da62:	2b00      	cmp	r3, #0
 800da64:	da38      	bge.n	800dad8 <_puts_r+0xc4>
 800da66:	4622      	mov	r2, r4
 800da68:	210a      	movs	r1, #10
 800da6a:	4628      	mov	r0, r5
 800da6c:	f000 f8d0 	bl	800dc10 <__swbuf_r>
 800da70:	3001      	adds	r0, #1
 800da72:	d011      	beq.n	800da98 <_puts_r+0x84>
 800da74:	250a      	movs	r5, #10
 800da76:	e011      	b.n	800da9c <_puts_r+0x88>
 800da78:	4b1b      	ldr	r3, [pc, #108]	; (800dae8 <_puts_r+0xd4>)
 800da7a:	429c      	cmp	r4, r3
 800da7c:	d101      	bne.n	800da82 <_puts_r+0x6e>
 800da7e:	68ac      	ldr	r4, [r5, #8]
 800da80:	e7da      	b.n	800da38 <_puts_r+0x24>
 800da82:	4b1a      	ldr	r3, [pc, #104]	; (800daec <_puts_r+0xd8>)
 800da84:	429c      	cmp	r4, r3
 800da86:	bf08      	it	eq
 800da88:	68ec      	ldreq	r4, [r5, #12]
 800da8a:	e7d5      	b.n	800da38 <_puts_r+0x24>
 800da8c:	4621      	mov	r1, r4
 800da8e:	4628      	mov	r0, r5
 800da90:	f000 f922 	bl	800dcd8 <__swsetup_r>
 800da94:	2800      	cmp	r0, #0
 800da96:	d0dd      	beq.n	800da54 <_puts_r+0x40>
 800da98:	f04f 35ff 	mov.w	r5, #4294967295
 800da9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da9e:	07da      	lsls	r2, r3, #31
 800daa0:	d405      	bmi.n	800daae <_puts_r+0x9a>
 800daa2:	89a3      	ldrh	r3, [r4, #12]
 800daa4:	059b      	lsls	r3, r3, #22
 800daa6:	d402      	bmi.n	800daae <_puts_r+0x9a>
 800daa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800daaa:	f7ff fa75 	bl	800cf98 <__retarget_lock_release_recursive>
 800daae:	4628      	mov	r0, r5
 800dab0:	bd70      	pop	{r4, r5, r6, pc}
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	da04      	bge.n	800dac0 <_puts_r+0xac>
 800dab6:	69a2      	ldr	r2, [r4, #24]
 800dab8:	429a      	cmp	r2, r3
 800daba:	dc06      	bgt.n	800daca <_puts_r+0xb6>
 800dabc:	290a      	cmp	r1, #10
 800dabe:	d004      	beq.n	800daca <_puts_r+0xb6>
 800dac0:	6823      	ldr	r3, [r4, #0]
 800dac2:	1c5a      	adds	r2, r3, #1
 800dac4:	6022      	str	r2, [r4, #0]
 800dac6:	7019      	strb	r1, [r3, #0]
 800dac8:	e7c5      	b.n	800da56 <_puts_r+0x42>
 800daca:	4622      	mov	r2, r4
 800dacc:	4628      	mov	r0, r5
 800dace:	f000 f89f 	bl	800dc10 <__swbuf_r>
 800dad2:	3001      	adds	r0, #1
 800dad4:	d1bf      	bne.n	800da56 <_puts_r+0x42>
 800dad6:	e7df      	b.n	800da98 <_puts_r+0x84>
 800dad8:	6823      	ldr	r3, [r4, #0]
 800dada:	250a      	movs	r5, #10
 800dadc:	1c5a      	adds	r2, r3, #1
 800dade:	6022      	str	r2, [r4, #0]
 800dae0:	701d      	strb	r5, [r3, #0]
 800dae2:	e7db      	b.n	800da9c <_puts_r+0x88>
 800dae4:	0804c888 	.word	0x0804c888
 800dae8:	0804c8a8 	.word	0x0804c8a8
 800daec:	0804c868 	.word	0x0804c868

0800daf0 <puts>:
 800daf0:	4b02      	ldr	r3, [pc, #8]	; (800dafc <puts+0xc>)
 800daf2:	4601      	mov	r1, r0
 800daf4:	6818      	ldr	r0, [r3, #0]
 800daf6:	f7ff bf8d 	b.w	800da14 <_puts_r>
 800dafa:	bf00      	nop
 800dafc:	20000abc 	.word	0x20000abc

0800db00 <_sbrk_r>:
 800db00:	b538      	push	{r3, r4, r5, lr}
 800db02:	4d06      	ldr	r5, [pc, #24]	; (800db1c <_sbrk_r+0x1c>)
 800db04:	2300      	movs	r3, #0
 800db06:	4604      	mov	r4, r0
 800db08:	4608      	mov	r0, r1
 800db0a:	602b      	str	r3, [r5, #0]
 800db0c:	f7fa faf6 	bl	80080fc <_sbrk>
 800db10:	1c43      	adds	r3, r0, #1
 800db12:	d102      	bne.n	800db1a <_sbrk_r+0x1a>
 800db14:	682b      	ldr	r3, [r5, #0]
 800db16:	b103      	cbz	r3, 800db1a <_sbrk_r+0x1a>
 800db18:	6023      	str	r3, [r4, #0]
 800db1a:	bd38      	pop	{r3, r4, r5, pc}
 800db1c:	20014018 	.word	0x20014018

0800db20 <sniprintf>:
 800db20:	b40c      	push	{r2, r3}
 800db22:	b530      	push	{r4, r5, lr}
 800db24:	4b17      	ldr	r3, [pc, #92]	; (800db84 <sniprintf+0x64>)
 800db26:	1e0c      	subs	r4, r1, #0
 800db28:	681d      	ldr	r5, [r3, #0]
 800db2a:	b09d      	sub	sp, #116	; 0x74
 800db2c:	da08      	bge.n	800db40 <sniprintf+0x20>
 800db2e:	238b      	movs	r3, #139	; 0x8b
 800db30:	602b      	str	r3, [r5, #0]
 800db32:	f04f 30ff 	mov.w	r0, #4294967295
 800db36:	b01d      	add	sp, #116	; 0x74
 800db38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db3c:	b002      	add	sp, #8
 800db3e:	4770      	bx	lr
 800db40:	f44f 7302 	mov.w	r3, #520	; 0x208
 800db44:	f8ad 3014 	strh.w	r3, [sp, #20]
 800db48:	bf14      	ite	ne
 800db4a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800db4e:	4623      	moveq	r3, r4
 800db50:	9304      	str	r3, [sp, #16]
 800db52:	9307      	str	r3, [sp, #28]
 800db54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db58:	9002      	str	r0, [sp, #8]
 800db5a:	9006      	str	r0, [sp, #24]
 800db5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800db60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800db62:	ab21      	add	r3, sp, #132	; 0x84
 800db64:	a902      	add	r1, sp, #8
 800db66:	4628      	mov	r0, r5
 800db68:	9301      	str	r3, [sp, #4]
 800db6a:	f001 fd71 	bl	800f650 <_svfiprintf_r>
 800db6e:	1c43      	adds	r3, r0, #1
 800db70:	bfbc      	itt	lt
 800db72:	238b      	movlt	r3, #139	; 0x8b
 800db74:	602b      	strlt	r3, [r5, #0]
 800db76:	2c00      	cmp	r4, #0
 800db78:	d0dd      	beq.n	800db36 <sniprintf+0x16>
 800db7a:	9b02      	ldr	r3, [sp, #8]
 800db7c:	2200      	movs	r2, #0
 800db7e:	701a      	strb	r2, [r3, #0]
 800db80:	e7d9      	b.n	800db36 <sniprintf+0x16>
 800db82:	bf00      	nop
 800db84:	20000abc 	.word	0x20000abc

0800db88 <__sread>:
 800db88:	b510      	push	{r4, lr}
 800db8a:	460c      	mov	r4, r1
 800db8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db90:	f001 ffb8 	bl	800fb04 <_read_r>
 800db94:	2800      	cmp	r0, #0
 800db96:	bfab      	itete	ge
 800db98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800db9a:	89a3      	ldrhlt	r3, [r4, #12]
 800db9c:	181b      	addge	r3, r3, r0
 800db9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dba2:	bfac      	ite	ge
 800dba4:	6563      	strge	r3, [r4, #84]	; 0x54
 800dba6:	81a3      	strhlt	r3, [r4, #12]
 800dba8:	bd10      	pop	{r4, pc}

0800dbaa <__swrite>:
 800dbaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbae:	461f      	mov	r7, r3
 800dbb0:	898b      	ldrh	r3, [r1, #12]
 800dbb2:	05db      	lsls	r3, r3, #23
 800dbb4:	4605      	mov	r5, r0
 800dbb6:	460c      	mov	r4, r1
 800dbb8:	4616      	mov	r6, r2
 800dbba:	d505      	bpl.n	800dbc8 <__swrite+0x1e>
 800dbbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbc0:	2302      	movs	r3, #2
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	f001 f876 	bl	800ecb4 <_lseek_r>
 800dbc8:	89a3      	ldrh	r3, [r4, #12]
 800dbca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dbd2:	81a3      	strh	r3, [r4, #12]
 800dbd4:	4632      	mov	r2, r6
 800dbd6:	463b      	mov	r3, r7
 800dbd8:	4628      	mov	r0, r5
 800dbda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbde:	f000 b869 	b.w	800dcb4 <_write_r>

0800dbe2 <__sseek>:
 800dbe2:	b510      	push	{r4, lr}
 800dbe4:	460c      	mov	r4, r1
 800dbe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbea:	f001 f863 	bl	800ecb4 <_lseek_r>
 800dbee:	1c43      	adds	r3, r0, #1
 800dbf0:	89a3      	ldrh	r3, [r4, #12]
 800dbf2:	bf15      	itete	ne
 800dbf4:	6560      	strne	r0, [r4, #84]	; 0x54
 800dbf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dbfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dbfe:	81a3      	strheq	r3, [r4, #12]
 800dc00:	bf18      	it	ne
 800dc02:	81a3      	strhne	r3, [r4, #12]
 800dc04:	bd10      	pop	{r4, pc}

0800dc06 <__sclose>:
 800dc06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc0a:	f000 b8f1 	b.w	800ddf0 <_close_r>
	...

0800dc10 <__swbuf_r>:
 800dc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc12:	460e      	mov	r6, r1
 800dc14:	4614      	mov	r4, r2
 800dc16:	4605      	mov	r5, r0
 800dc18:	b118      	cbz	r0, 800dc22 <__swbuf_r+0x12>
 800dc1a:	6983      	ldr	r3, [r0, #24]
 800dc1c:	b90b      	cbnz	r3, 800dc22 <__swbuf_r+0x12>
 800dc1e:	f7ff f8f7 	bl	800ce10 <__sinit>
 800dc22:	4b21      	ldr	r3, [pc, #132]	; (800dca8 <__swbuf_r+0x98>)
 800dc24:	429c      	cmp	r4, r3
 800dc26:	d12b      	bne.n	800dc80 <__swbuf_r+0x70>
 800dc28:	686c      	ldr	r4, [r5, #4]
 800dc2a:	69a3      	ldr	r3, [r4, #24]
 800dc2c:	60a3      	str	r3, [r4, #8]
 800dc2e:	89a3      	ldrh	r3, [r4, #12]
 800dc30:	071a      	lsls	r2, r3, #28
 800dc32:	d52f      	bpl.n	800dc94 <__swbuf_r+0x84>
 800dc34:	6923      	ldr	r3, [r4, #16]
 800dc36:	b36b      	cbz	r3, 800dc94 <__swbuf_r+0x84>
 800dc38:	6923      	ldr	r3, [r4, #16]
 800dc3a:	6820      	ldr	r0, [r4, #0]
 800dc3c:	1ac0      	subs	r0, r0, r3
 800dc3e:	6963      	ldr	r3, [r4, #20]
 800dc40:	b2f6      	uxtb	r6, r6
 800dc42:	4283      	cmp	r3, r0
 800dc44:	4637      	mov	r7, r6
 800dc46:	dc04      	bgt.n	800dc52 <__swbuf_r+0x42>
 800dc48:	4621      	mov	r1, r4
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	f000 ffe0 	bl	800ec10 <_fflush_r>
 800dc50:	bb30      	cbnz	r0, 800dca0 <__swbuf_r+0x90>
 800dc52:	68a3      	ldr	r3, [r4, #8]
 800dc54:	3b01      	subs	r3, #1
 800dc56:	60a3      	str	r3, [r4, #8]
 800dc58:	6823      	ldr	r3, [r4, #0]
 800dc5a:	1c5a      	adds	r2, r3, #1
 800dc5c:	6022      	str	r2, [r4, #0]
 800dc5e:	701e      	strb	r6, [r3, #0]
 800dc60:	6963      	ldr	r3, [r4, #20]
 800dc62:	3001      	adds	r0, #1
 800dc64:	4283      	cmp	r3, r0
 800dc66:	d004      	beq.n	800dc72 <__swbuf_r+0x62>
 800dc68:	89a3      	ldrh	r3, [r4, #12]
 800dc6a:	07db      	lsls	r3, r3, #31
 800dc6c:	d506      	bpl.n	800dc7c <__swbuf_r+0x6c>
 800dc6e:	2e0a      	cmp	r6, #10
 800dc70:	d104      	bne.n	800dc7c <__swbuf_r+0x6c>
 800dc72:	4621      	mov	r1, r4
 800dc74:	4628      	mov	r0, r5
 800dc76:	f000 ffcb 	bl	800ec10 <_fflush_r>
 800dc7a:	b988      	cbnz	r0, 800dca0 <__swbuf_r+0x90>
 800dc7c:	4638      	mov	r0, r7
 800dc7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc80:	4b0a      	ldr	r3, [pc, #40]	; (800dcac <__swbuf_r+0x9c>)
 800dc82:	429c      	cmp	r4, r3
 800dc84:	d101      	bne.n	800dc8a <__swbuf_r+0x7a>
 800dc86:	68ac      	ldr	r4, [r5, #8]
 800dc88:	e7cf      	b.n	800dc2a <__swbuf_r+0x1a>
 800dc8a:	4b09      	ldr	r3, [pc, #36]	; (800dcb0 <__swbuf_r+0xa0>)
 800dc8c:	429c      	cmp	r4, r3
 800dc8e:	bf08      	it	eq
 800dc90:	68ec      	ldreq	r4, [r5, #12]
 800dc92:	e7ca      	b.n	800dc2a <__swbuf_r+0x1a>
 800dc94:	4621      	mov	r1, r4
 800dc96:	4628      	mov	r0, r5
 800dc98:	f000 f81e 	bl	800dcd8 <__swsetup_r>
 800dc9c:	2800      	cmp	r0, #0
 800dc9e:	d0cb      	beq.n	800dc38 <__swbuf_r+0x28>
 800dca0:	f04f 37ff 	mov.w	r7, #4294967295
 800dca4:	e7ea      	b.n	800dc7c <__swbuf_r+0x6c>
 800dca6:	bf00      	nop
 800dca8:	0804c888 	.word	0x0804c888
 800dcac:	0804c8a8 	.word	0x0804c8a8
 800dcb0:	0804c868 	.word	0x0804c868

0800dcb4 <_write_r>:
 800dcb4:	b538      	push	{r3, r4, r5, lr}
 800dcb6:	4d07      	ldr	r5, [pc, #28]	; (800dcd4 <_write_r+0x20>)
 800dcb8:	4604      	mov	r4, r0
 800dcba:	4608      	mov	r0, r1
 800dcbc:	4611      	mov	r1, r2
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	602a      	str	r2, [r5, #0]
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	f7fe fe43 	bl	800c94e <_write>
 800dcc8:	1c43      	adds	r3, r0, #1
 800dcca:	d102      	bne.n	800dcd2 <_write_r+0x1e>
 800dccc:	682b      	ldr	r3, [r5, #0]
 800dcce:	b103      	cbz	r3, 800dcd2 <_write_r+0x1e>
 800dcd0:	6023      	str	r3, [r4, #0]
 800dcd2:	bd38      	pop	{r3, r4, r5, pc}
 800dcd4:	20014018 	.word	0x20014018

0800dcd8 <__swsetup_r>:
 800dcd8:	4b32      	ldr	r3, [pc, #200]	; (800dda4 <__swsetup_r+0xcc>)
 800dcda:	b570      	push	{r4, r5, r6, lr}
 800dcdc:	681d      	ldr	r5, [r3, #0]
 800dcde:	4606      	mov	r6, r0
 800dce0:	460c      	mov	r4, r1
 800dce2:	b125      	cbz	r5, 800dcee <__swsetup_r+0x16>
 800dce4:	69ab      	ldr	r3, [r5, #24]
 800dce6:	b913      	cbnz	r3, 800dcee <__swsetup_r+0x16>
 800dce8:	4628      	mov	r0, r5
 800dcea:	f7ff f891 	bl	800ce10 <__sinit>
 800dcee:	4b2e      	ldr	r3, [pc, #184]	; (800dda8 <__swsetup_r+0xd0>)
 800dcf0:	429c      	cmp	r4, r3
 800dcf2:	d10f      	bne.n	800dd14 <__swsetup_r+0x3c>
 800dcf4:	686c      	ldr	r4, [r5, #4]
 800dcf6:	89a3      	ldrh	r3, [r4, #12]
 800dcf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dcfc:	0719      	lsls	r1, r3, #28
 800dcfe:	d42c      	bmi.n	800dd5a <__swsetup_r+0x82>
 800dd00:	06dd      	lsls	r5, r3, #27
 800dd02:	d411      	bmi.n	800dd28 <__swsetup_r+0x50>
 800dd04:	2309      	movs	r3, #9
 800dd06:	6033      	str	r3, [r6, #0]
 800dd08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dd0c:	81a3      	strh	r3, [r4, #12]
 800dd0e:	f04f 30ff 	mov.w	r0, #4294967295
 800dd12:	e03e      	b.n	800dd92 <__swsetup_r+0xba>
 800dd14:	4b25      	ldr	r3, [pc, #148]	; (800ddac <__swsetup_r+0xd4>)
 800dd16:	429c      	cmp	r4, r3
 800dd18:	d101      	bne.n	800dd1e <__swsetup_r+0x46>
 800dd1a:	68ac      	ldr	r4, [r5, #8]
 800dd1c:	e7eb      	b.n	800dcf6 <__swsetup_r+0x1e>
 800dd1e:	4b24      	ldr	r3, [pc, #144]	; (800ddb0 <__swsetup_r+0xd8>)
 800dd20:	429c      	cmp	r4, r3
 800dd22:	bf08      	it	eq
 800dd24:	68ec      	ldreq	r4, [r5, #12]
 800dd26:	e7e6      	b.n	800dcf6 <__swsetup_r+0x1e>
 800dd28:	0758      	lsls	r0, r3, #29
 800dd2a:	d512      	bpl.n	800dd52 <__swsetup_r+0x7a>
 800dd2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd2e:	b141      	cbz	r1, 800dd42 <__swsetup_r+0x6a>
 800dd30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd34:	4299      	cmp	r1, r3
 800dd36:	d002      	beq.n	800dd3e <__swsetup_r+0x66>
 800dd38:	4630      	mov	r0, r6
 800dd3a:	f001 fbe1 	bl	800f500 <_free_r>
 800dd3e:	2300      	movs	r3, #0
 800dd40:	6363      	str	r3, [r4, #52]	; 0x34
 800dd42:	89a3      	ldrh	r3, [r4, #12]
 800dd44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dd48:	81a3      	strh	r3, [r4, #12]
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	6063      	str	r3, [r4, #4]
 800dd4e:	6923      	ldr	r3, [r4, #16]
 800dd50:	6023      	str	r3, [r4, #0]
 800dd52:	89a3      	ldrh	r3, [r4, #12]
 800dd54:	f043 0308 	orr.w	r3, r3, #8
 800dd58:	81a3      	strh	r3, [r4, #12]
 800dd5a:	6923      	ldr	r3, [r4, #16]
 800dd5c:	b94b      	cbnz	r3, 800dd72 <__swsetup_r+0x9a>
 800dd5e:	89a3      	ldrh	r3, [r4, #12]
 800dd60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dd64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd68:	d003      	beq.n	800dd72 <__swsetup_r+0x9a>
 800dd6a:	4621      	mov	r1, r4
 800dd6c:	4630      	mov	r0, r6
 800dd6e:	f000 ffd9 	bl	800ed24 <__smakebuf_r>
 800dd72:	89a0      	ldrh	r0, [r4, #12]
 800dd74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd78:	f010 0301 	ands.w	r3, r0, #1
 800dd7c:	d00a      	beq.n	800dd94 <__swsetup_r+0xbc>
 800dd7e:	2300      	movs	r3, #0
 800dd80:	60a3      	str	r3, [r4, #8]
 800dd82:	6963      	ldr	r3, [r4, #20]
 800dd84:	425b      	negs	r3, r3
 800dd86:	61a3      	str	r3, [r4, #24]
 800dd88:	6923      	ldr	r3, [r4, #16]
 800dd8a:	b943      	cbnz	r3, 800dd9e <__swsetup_r+0xc6>
 800dd8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dd90:	d1ba      	bne.n	800dd08 <__swsetup_r+0x30>
 800dd92:	bd70      	pop	{r4, r5, r6, pc}
 800dd94:	0781      	lsls	r1, r0, #30
 800dd96:	bf58      	it	pl
 800dd98:	6963      	ldrpl	r3, [r4, #20]
 800dd9a:	60a3      	str	r3, [r4, #8]
 800dd9c:	e7f4      	b.n	800dd88 <__swsetup_r+0xb0>
 800dd9e:	2000      	movs	r0, #0
 800dda0:	e7f7      	b.n	800dd92 <__swsetup_r+0xba>
 800dda2:	bf00      	nop
 800dda4:	20000abc 	.word	0x20000abc
 800dda8:	0804c888 	.word	0x0804c888
 800ddac:	0804c8a8 	.word	0x0804c8a8
 800ddb0:	0804c868 	.word	0x0804c868

0800ddb4 <__assert_func>:
 800ddb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ddb6:	4614      	mov	r4, r2
 800ddb8:	461a      	mov	r2, r3
 800ddba:	4b09      	ldr	r3, [pc, #36]	; (800dde0 <__assert_func+0x2c>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	4605      	mov	r5, r0
 800ddc0:	68d8      	ldr	r0, [r3, #12]
 800ddc2:	b14c      	cbz	r4, 800ddd8 <__assert_func+0x24>
 800ddc4:	4b07      	ldr	r3, [pc, #28]	; (800dde4 <__assert_func+0x30>)
 800ddc6:	9100      	str	r1, [sp, #0]
 800ddc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ddcc:	4906      	ldr	r1, [pc, #24]	; (800dde8 <__assert_func+0x34>)
 800ddce:	462b      	mov	r3, r5
 800ddd0:	f000 ff5a 	bl	800ec88 <fiprintf>
 800ddd4:	f001 fea8 	bl	800fb28 <abort>
 800ddd8:	4b04      	ldr	r3, [pc, #16]	; (800ddec <__assert_func+0x38>)
 800ddda:	461c      	mov	r4, r3
 800dddc:	e7f3      	b.n	800ddc6 <__assert_func+0x12>
 800ddde:	bf00      	nop
 800dde0:	20000abc 	.word	0x20000abc
 800dde4:	0804c900 	.word	0x0804c900
 800dde8:	0804c90d 	.word	0x0804c90d
 800ddec:	08013e23 	.word	0x08013e23

0800ddf0 <_close_r>:
 800ddf0:	b538      	push	{r3, r4, r5, lr}
 800ddf2:	4d06      	ldr	r5, [pc, #24]	; (800de0c <_close_r+0x1c>)
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	4604      	mov	r4, r0
 800ddf8:	4608      	mov	r0, r1
 800ddfa:	602b      	str	r3, [r5, #0]
 800ddfc:	f7fe fdd8 	bl	800c9b0 <_close>
 800de00:	1c43      	adds	r3, r0, #1
 800de02:	d102      	bne.n	800de0a <_close_r+0x1a>
 800de04:	682b      	ldr	r3, [r5, #0]
 800de06:	b103      	cbz	r3, 800de0a <_close_r+0x1a>
 800de08:	6023      	str	r3, [r4, #0]
 800de0a:	bd38      	pop	{r3, r4, r5, pc}
 800de0c:	20014018 	.word	0x20014018

0800de10 <quorem>:
 800de10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de14:	6903      	ldr	r3, [r0, #16]
 800de16:	690c      	ldr	r4, [r1, #16]
 800de18:	42a3      	cmp	r3, r4
 800de1a:	4607      	mov	r7, r0
 800de1c:	f2c0 8081 	blt.w	800df22 <quorem+0x112>
 800de20:	3c01      	subs	r4, #1
 800de22:	f101 0814 	add.w	r8, r1, #20
 800de26:	f100 0514 	add.w	r5, r0, #20
 800de2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de2e:	9301      	str	r3, [sp, #4]
 800de30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800de34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de38:	3301      	adds	r3, #1
 800de3a:	429a      	cmp	r2, r3
 800de3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800de40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800de44:	fbb2 f6f3 	udiv	r6, r2, r3
 800de48:	d331      	bcc.n	800deae <quorem+0x9e>
 800de4a:	f04f 0e00 	mov.w	lr, #0
 800de4e:	4640      	mov	r0, r8
 800de50:	46ac      	mov	ip, r5
 800de52:	46f2      	mov	sl, lr
 800de54:	f850 2b04 	ldr.w	r2, [r0], #4
 800de58:	b293      	uxth	r3, r2
 800de5a:	fb06 e303 	mla	r3, r6, r3, lr
 800de5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800de62:	b29b      	uxth	r3, r3
 800de64:	ebaa 0303 	sub.w	r3, sl, r3
 800de68:	f8dc a000 	ldr.w	sl, [ip]
 800de6c:	0c12      	lsrs	r2, r2, #16
 800de6e:	fa13 f38a 	uxtah	r3, r3, sl
 800de72:	fb06 e202 	mla	r2, r6, r2, lr
 800de76:	9300      	str	r3, [sp, #0]
 800de78:	9b00      	ldr	r3, [sp, #0]
 800de7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800de7e:	b292      	uxth	r2, r2
 800de80:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800de84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800de88:	f8bd 3000 	ldrh.w	r3, [sp]
 800de8c:	4581      	cmp	r9, r0
 800de8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de92:	f84c 3b04 	str.w	r3, [ip], #4
 800de96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800de9a:	d2db      	bcs.n	800de54 <quorem+0x44>
 800de9c:	f855 300b 	ldr.w	r3, [r5, fp]
 800dea0:	b92b      	cbnz	r3, 800deae <quorem+0x9e>
 800dea2:	9b01      	ldr	r3, [sp, #4]
 800dea4:	3b04      	subs	r3, #4
 800dea6:	429d      	cmp	r5, r3
 800dea8:	461a      	mov	r2, r3
 800deaa:	d32e      	bcc.n	800df0a <quorem+0xfa>
 800deac:	613c      	str	r4, [r7, #16]
 800deae:	4638      	mov	r0, r7
 800deb0:	f001 fa0e 	bl	800f2d0 <__mcmp>
 800deb4:	2800      	cmp	r0, #0
 800deb6:	db24      	blt.n	800df02 <quorem+0xf2>
 800deb8:	3601      	adds	r6, #1
 800deba:	4628      	mov	r0, r5
 800debc:	f04f 0c00 	mov.w	ip, #0
 800dec0:	f858 2b04 	ldr.w	r2, [r8], #4
 800dec4:	f8d0 e000 	ldr.w	lr, [r0]
 800dec8:	b293      	uxth	r3, r2
 800deca:	ebac 0303 	sub.w	r3, ip, r3
 800dece:	0c12      	lsrs	r2, r2, #16
 800ded0:	fa13 f38e 	uxtah	r3, r3, lr
 800ded4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ded8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dedc:	b29b      	uxth	r3, r3
 800dede:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dee2:	45c1      	cmp	r9, r8
 800dee4:	f840 3b04 	str.w	r3, [r0], #4
 800dee8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800deec:	d2e8      	bcs.n	800dec0 <quorem+0xb0>
 800deee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800def2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800def6:	b922      	cbnz	r2, 800df02 <quorem+0xf2>
 800def8:	3b04      	subs	r3, #4
 800defa:	429d      	cmp	r5, r3
 800defc:	461a      	mov	r2, r3
 800defe:	d30a      	bcc.n	800df16 <quorem+0x106>
 800df00:	613c      	str	r4, [r7, #16]
 800df02:	4630      	mov	r0, r6
 800df04:	b003      	add	sp, #12
 800df06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df0a:	6812      	ldr	r2, [r2, #0]
 800df0c:	3b04      	subs	r3, #4
 800df0e:	2a00      	cmp	r2, #0
 800df10:	d1cc      	bne.n	800deac <quorem+0x9c>
 800df12:	3c01      	subs	r4, #1
 800df14:	e7c7      	b.n	800dea6 <quorem+0x96>
 800df16:	6812      	ldr	r2, [r2, #0]
 800df18:	3b04      	subs	r3, #4
 800df1a:	2a00      	cmp	r2, #0
 800df1c:	d1f0      	bne.n	800df00 <quorem+0xf0>
 800df1e:	3c01      	subs	r4, #1
 800df20:	e7eb      	b.n	800defa <quorem+0xea>
 800df22:	2000      	movs	r0, #0
 800df24:	e7ee      	b.n	800df04 <quorem+0xf4>
	...

0800df28 <_dtoa_r>:
 800df28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df2c:	ed2d 8b04 	vpush	{d8-d9}
 800df30:	ec57 6b10 	vmov	r6, r7, d0
 800df34:	b093      	sub	sp, #76	; 0x4c
 800df36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800df38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800df3c:	9106      	str	r1, [sp, #24]
 800df3e:	ee10 aa10 	vmov	sl, s0
 800df42:	4604      	mov	r4, r0
 800df44:	9209      	str	r2, [sp, #36]	; 0x24
 800df46:	930c      	str	r3, [sp, #48]	; 0x30
 800df48:	46bb      	mov	fp, r7
 800df4a:	b975      	cbnz	r5, 800df6a <_dtoa_r+0x42>
 800df4c:	2010      	movs	r0, #16
 800df4e:	f000 ff29 	bl	800eda4 <malloc>
 800df52:	4602      	mov	r2, r0
 800df54:	6260      	str	r0, [r4, #36]	; 0x24
 800df56:	b920      	cbnz	r0, 800df62 <_dtoa_r+0x3a>
 800df58:	4ba7      	ldr	r3, [pc, #668]	; (800e1f8 <_dtoa_r+0x2d0>)
 800df5a:	21ea      	movs	r1, #234	; 0xea
 800df5c:	48a7      	ldr	r0, [pc, #668]	; (800e1fc <_dtoa_r+0x2d4>)
 800df5e:	f7ff ff29 	bl	800ddb4 <__assert_func>
 800df62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800df66:	6005      	str	r5, [r0, #0]
 800df68:	60c5      	str	r5, [r0, #12]
 800df6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df6c:	6819      	ldr	r1, [r3, #0]
 800df6e:	b151      	cbz	r1, 800df86 <_dtoa_r+0x5e>
 800df70:	685a      	ldr	r2, [r3, #4]
 800df72:	604a      	str	r2, [r1, #4]
 800df74:	2301      	movs	r3, #1
 800df76:	4093      	lsls	r3, r2
 800df78:	608b      	str	r3, [r1, #8]
 800df7a:	4620      	mov	r0, r4
 800df7c:	f000 ff66 	bl	800ee4c <_Bfree>
 800df80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df82:	2200      	movs	r2, #0
 800df84:	601a      	str	r2, [r3, #0]
 800df86:	1e3b      	subs	r3, r7, #0
 800df88:	bfaa      	itet	ge
 800df8a:	2300      	movge	r3, #0
 800df8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800df90:	f8c8 3000 	strge.w	r3, [r8]
 800df94:	4b9a      	ldr	r3, [pc, #616]	; (800e200 <_dtoa_r+0x2d8>)
 800df96:	bfbc      	itt	lt
 800df98:	2201      	movlt	r2, #1
 800df9a:	f8c8 2000 	strlt.w	r2, [r8]
 800df9e:	ea33 030b 	bics.w	r3, r3, fp
 800dfa2:	d11b      	bne.n	800dfdc <_dtoa_r+0xb4>
 800dfa4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dfa6:	f242 730f 	movw	r3, #9999	; 0x270f
 800dfaa:	6013      	str	r3, [r2, #0]
 800dfac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dfb0:	4333      	orrs	r3, r6
 800dfb2:	f000 8592 	beq.w	800eada <_dtoa_r+0xbb2>
 800dfb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dfb8:	b963      	cbnz	r3, 800dfd4 <_dtoa_r+0xac>
 800dfba:	4b92      	ldr	r3, [pc, #584]	; (800e204 <_dtoa_r+0x2dc>)
 800dfbc:	e022      	b.n	800e004 <_dtoa_r+0xdc>
 800dfbe:	4b92      	ldr	r3, [pc, #584]	; (800e208 <_dtoa_r+0x2e0>)
 800dfc0:	9301      	str	r3, [sp, #4]
 800dfc2:	3308      	adds	r3, #8
 800dfc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dfc6:	6013      	str	r3, [r2, #0]
 800dfc8:	9801      	ldr	r0, [sp, #4]
 800dfca:	b013      	add	sp, #76	; 0x4c
 800dfcc:	ecbd 8b04 	vpop	{d8-d9}
 800dfd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfd4:	4b8b      	ldr	r3, [pc, #556]	; (800e204 <_dtoa_r+0x2dc>)
 800dfd6:	9301      	str	r3, [sp, #4]
 800dfd8:	3303      	adds	r3, #3
 800dfda:	e7f3      	b.n	800dfc4 <_dtoa_r+0x9c>
 800dfdc:	2200      	movs	r2, #0
 800dfde:	2300      	movs	r3, #0
 800dfe0:	4650      	mov	r0, sl
 800dfe2:	4659      	mov	r1, fp
 800dfe4:	f7f8 fdd8 	bl	8006b98 <__aeabi_dcmpeq>
 800dfe8:	ec4b ab19 	vmov	d9, sl, fp
 800dfec:	4680      	mov	r8, r0
 800dfee:	b158      	cbz	r0, 800e008 <_dtoa_r+0xe0>
 800dff0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dff2:	2301      	movs	r3, #1
 800dff4:	6013      	str	r3, [r2, #0]
 800dff6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	f000 856b 	beq.w	800ead4 <_dtoa_r+0xbac>
 800dffe:	4883      	ldr	r0, [pc, #524]	; (800e20c <_dtoa_r+0x2e4>)
 800e000:	6018      	str	r0, [r3, #0]
 800e002:	1e43      	subs	r3, r0, #1
 800e004:	9301      	str	r3, [sp, #4]
 800e006:	e7df      	b.n	800dfc8 <_dtoa_r+0xa0>
 800e008:	ec4b ab10 	vmov	d0, sl, fp
 800e00c:	aa10      	add	r2, sp, #64	; 0x40
 800e00e:	a911      	add	r1, sp, #68	; 0x44
 800e010:	4620      	mov	r0, r4
 800e012:	f001 fa03 	bl	800f41c <__d2b>
 800e016:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e01a:	ee08 0a10 	vmov	s16, r0
 800e01e:	2d00      	cmp	r5, #0
 800e020:	f000 8084 	beq.w	800e12c <_dtoa_r+0x204>
 800e024:	ee19 3a90 	vmov	r3, s19
 800e028:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e02c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e030:	4656      	mov	r6, sl
 800e032:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e036:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e03a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e03e:	4b74      	ldr	r3, [pc, #464]	; (800e210 <_dtoa_r+0x2e8>)
 800e040:	2200      	movs	r2, #0
 800e042:	4630      	mov	r0, r6
 800e044:	4639      	mov	r1, r7
 800e046:	f7f8 f987 	bl	8006358 <__aeabi_dsub>
 800e04a:	a365      	add	r3, pc, #404	; (adr r3, 800e1e0 <_dtoa_r+0x2b8>)
 800e04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e050:	f7f8 fb3a 	bl	80066c8 <__aeabi_dmul>
 800e054:	a364      	add	r3, pc, #400	; (adr r3, 800e1e8 <_dtoa_r+0x2c0>)
 800e056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e05a:	f7f8 f97f 	bl	800635c <__adddf3>
 800e05e:	4606      	mov	r6, r0
 800e060:	4628      	mov	r0, r5
 800e062:	460f      	mov	r7, r1
 800e064:	f7f8 fac6 	bl	80065f4 <__aeabi_i2d>
 800e068:	a361      	add	r3, pc, #388	; (adr r3, 800e1f0 <_dtoa_r+0x2c8>)
 800e06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e06e:	f7f8 fb2b 	bl	80066c8 <__aeabi_dmul>
 800e072:	4602      	mov	r2, r0
 800e074:	460b      	mov	r3, r1
 800e076:	4630      	mov	r0, r6
 800e078:	4639      	mov	r1, r7
 800e07a:	f7f8 f96f 	bl	800635c <__adddf3>
 800e07e:	4606      	mov	r6, r0
 800e080:	460f      	mov	r7, r1
 800e082:	f7f8 fdd1 	bl	8006c28 <__aeabi_d2iz>
 800e086:	2200      	movs	r2, #0
 800e088:	9000      	str	r0, [sp, #0]
 800e08a:	2300      	movs	r3, #0
 800e08c:	4630      	mov	r0, r6
 800e08e:	4639      	mov	r1, r7
 800e090:	f7f8 fd8c 	bl	8006bac <__aeabi_dcmplt>
 800e094:	b150      	cbz	r0, 800e0ac <_dtoa_r+0x184>
 800e096:	9800      	ldr	r0, [sp, #0]
 800e098:	f7f8 faac 	bl	80065f4 <__aeabi_i2d>
 800e09c:	4632      	mov	r2, r6
 800e09e:	463b      	mov	r3, r7
 800e0a0:	f7f8 fd7a 	bl	8006b98 <__aeabi_dcmpeq>
 800e0a4:	b910      	cbnz	r0, 800e0ac <_dtoa_r+0x184>
 800e0a6:	9b00      	ldr	r3, [sp, #0]
 800e0a8:	3b01      	subs	r3, #1
 800e0aa:	9300      	str	r3, [sp, #0]
 800e0ac:	9b00      	ldr	r3, [sp, #0]
 800e0ae:	2b16      	cmp	r3, #22
 800e0b0:	d85a      	bhi.n	800e168 <_dtoa_r+0x240>
 800e0b2:	9a00      	ldr	r2, [sp, #0]
 800e0b4:	4b57      	ldr	r3, [pc, #348]	; (800e214 <_dtoa_r+0x2ec>)
 800e0b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0be:	ec51 0b19 	vmov	r0, r1, d9
 800e0c2:	f7f8 fd73 	bl	8006bac <__aeabi_dcmplt>
 800e0c6:	2800      	cmp	r0, #0
 800e0c8:	d050      	beq.n	800e16c <_dtoa_r+0x244>
 800e0ca:	9b00      	ldr	r3, [sp, #0]
 800e0cc:	3b01      	subs	r3, #1
 800e0ce:	9300      	str	r3, [sp, #0]
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800e0d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e0d6:	1b5d      	subs	r5, r3, r5
 800e0d8:	1e6b      	subs	r3, r5, #1
 800e0da:	9305      	str	r3, [sp, #20]
 800e0dc:	bf45      	ittet	mi
 800e0de:	f1c5 0301 	rsbmi	r3, r5, #1
 800e0e2:	9304      	strmi	r3, [sp, #16]
 800e0e4:	2300      	movpl	r3, #0
 800e0e6:	2300      	movmi	r3, #0
 800e0e8:	bf4c      	ite	mi
 800e0ea:	9305      	strmi	r3, [sp, #20]
 800e0ec:	9304      	strpl	r3, [sp, #16]
 800e0ee:	9b00      	ldr	r3, [sp, #0]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	db3d      	blt.n	800e170 <_dtoa_r+0x248>
 800e0f4:	9b05      	ldr	r3, [sp, #20]
 800e0f6:	9a00      	ldr	r2, [sp, #0]
 800e0f8:	920a      	str	r2, [sp, #40]	; 0x28
 800e0fa:	4413      	add	r3, r2
 800e0fc:	9305      	str	r3, [sp, #20]
 800e0fe:	2300      	movs	r3, #0
 800e100:	9307      	str	r3, [sp, #28]
 800e102:	9b06      	ldr	r3, [sp, #24]
 800e104:	2b09      	cmp	r3, #9
 800e106:	f200 8089 	bhi.w	800e21c <_dtoa_r+0x2f4>
 800e10a:	2b05      	cmp	r3, #5
 800e10c:	bfc4      	itt	gt
 800e10e:	3b04      	subgt	r3, #4
 800e110:	9306      	strgt	r3, [sp, #24]
 800e112:	9b06      	ldr	r3, [sp, #24]
 800e114:	f1a3 0302 	sub.w	r3, r3, #2
 800e118:	bfcc      	ite	gt
 800e11a:	2500      	movgt	r5, #0
 800e11c:	2501      	movle	r5, #1
 800e11e:	2b03      	cmp	r3, #3
 800e120:	f200 8087 	bhi.w	800e232 <_dtoa_r+0x30a>
 800e124:	e8df f003 	tbb	[pc, r3]
 800e128:	59383a2d 	.word	0x59383a2d
 800e12c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e130:	441d      	add	r5, r3
 800e132:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e136:	2b20      	cmp	r3, #32
 800e138:	bfc1      	itttt	gt
 800e13a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e13e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e142:	fa0b f303 	lslgt.w	r3, fp, r3
 800e146:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e14a:	bfda      	itte	le
 800e14c:	f1c3 0320 	rsble	r3, r3, #32
 800e150:	fa06 f003 	lslle.w	r0, r6, r3
 800e154:	4318      	orrgt	r0, r3
 800e156:	f7f8 fa3d 	bl	80065d4 <__aeabi_ui2d>
 800e15a:	2301      	movs	r3, #1
 800e15c:	4606      	mov	r6, r0
 800e15e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e162:	3d01      	subs	r5, #1
 800e164:	930e      	str	r3, [sp, #56]	; 0x38
 800e166:	e76a      	b.n	800e03e <_dtoa_r+0x116>
 800e168:	2301      	movs	r3, #1
 800e16a:	e7b2      	b.n	800e0d2 <_dtoa_r+0x1aa>
 800e16c:	900b      	str	r0, [sp, #44]	; 0x2c
 800e16e:	e7b1      	b.n	800e0d4 <_dtoa_r+0x1ac>
 800e170:	9b04      	ldr	r3, [sp, #16]
 800e172:	9a00      	ldr	r2, [sp, #0]
 800e174:	1a9b      	subs	r3, r3, r2
 800e176:	9304      	str	r3, [sp, #16]
 800e178:	4253      	negs	r3, r2
 800e17a:	9307      	str	r3, [sp, #28]
 800e17c:	2300      	movs	r3, #0
 800e17e:	930a      	str	r3, [sp, #40]	; 0x28
 800e180:	e7bf      	b.n	800e102 <_dtoa_r+0x1da>
 800e182:	2300      	movs	r3, #0
 800e184:	9308      	str	r3, [sp, #32]
 800e186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e188:	2b00      	cmp	r3, #0
 800e18a:	dc55      	bgt.n	800e238 <_dtoa_r+0x310>
 800e18c:	2301      	movs	r3, #1
 800e18e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e192:	461a      	mov	r2, r3
 800e194:	9209      	str	r2, [sp, #36]	; 0x24
 800e196:	e00c      	b.n	800e1b2 <_dtoa_r+0x28a>
 800e198:	2301      	movs	r3, #1
 800e19a:	e7f3      	b.n	800e184 <_dtoa_r+0x25c>
 800e19c:	2300      	movs	r3, #0
 800e19e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1a0:	9308      	str	r3, [sp, #32]
 800e1a2:	9b00      	ldr	r3, [sp, #0]
 800e1a4:	4413      	add	r3, r2
 800e1a6:	9302      	str	r3, [sp, #8]
 800e1a8:	3301      	adds	r3, #1
 800e1aa:	2b01      	cmp	r3, #1
 800e1ac:	9303      	str	r3, [sp, #12]
 800e1ae:	bfb8      	it	lt
 800e1b0:	2301      	movlt	r3, #1
 800e1b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	6042      	str	r2, [r0, #4]
 800e1b8:	2204      	movs	r2, #4
 800e1ba:	f102 0614 	add.w	r6, r2, #20
 800e1be:	429e      	cmp	r6, r3
 800e1c0:	6841      	ldr	r1, [r0, #4]
 800e1c2:	d93d      	bls.n	800e240 <_dtoa_r+0x318>
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	f000 fe01 	bl	800edcc <_Balloc>
 800e1ca:	9001      	str	r0, [sp, #4]
 800e1cc:	2800      	cmp	r0, #0
 800e1ce:	d13b      	bne.n	800e248 <_dtoa_r+0x320>
 800e1d0:	4b11      	ldr	r3, [pc, #68]	; (800e218 <_dtoa_r+0x2f0>)
 800e1d2:	4602      	mov	r2, r0
 800e1d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e1d8:	e6c0      	b.n	800df5c <_dtoa_r+0x34>
 800e1da:	2301      	movs	r3, #1
 800e1dc:	e7df      	b.n	800e19e <_dtoa_r+0x276>
 800e1de:	bf00      	nop
 800e1e0:	636f4361 	.word	0x636f4361
 800e1e4:	3fd287a7 	.word	0x3fd287a7
 800e1e8:	8b60c8b3 	.word	0x8b60c8b3
 800e1ec:	3fc68a28 	.word	0x3fc68a28
 800e1f0:	509f79fb 	.word	0x509f79fb
 800e1f4:	3fd34413 	.word	0x3fd34413
 800e1f8:	0804c949 	.word	0x0804c949
 800e1fc:	0804c960 	.word	0x0804c960
 800e200:	7ff00000 	.word	0x7ff00000
 800e204:	0804c945 	.word	0x0804c945
 800e208:	0804c93c 	.word	0x0804c93c
 800e20c:	0804c8dd 	.word	0x0804c8dd
 800e210:	3ff80000 	.word	0x3ff80000
 800e214:	0804ca50 	.word	0x0804ca50
 800e218:	0804c9bb 	.word	0x0804c9bb
 800e21c:	2501      	movs	r5, #1
 800e21e:	2300      	movs	r3, #0
 800e220:	9306      	str	r3, [sp, #24]
 800e222:	9508      	str	r5, [sp, #32]
 800e224:	f04f 33ff 	mov.w	r3, #4294967295
 800e228:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e22c:	2200      	movs	r2, #0
 800e22e:	2312      	movs	r3, #18
 800e230:	e7b0      	b.n	800e194 <_dtoa_r+0x26c>
 800e232:	2301      	movs	r3, #1
 800e234:	9308      	str	r3, [sp, #32]
 800e236:	e7f5      	b.n	800e224 <_dtoa_r+0x2fc>
 800e238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e23a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e23e:	e7b8      	b.n	800e1b2 <_dtoa_r+0x28a>
 800e240:	3101      	adds	r1, #1
 800e242:	6041      	str	r1, [r0, #4]
 800e244:	0052      	lsls	r2, r2, #1
 800e246:	e7b8      	b.n	800e1ba <_dtoa_r+0x292>
 800e248:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e24a:	9a01      	ldr	r2, [sp, #4]
 800e24c:	601a      	str	r2, [r3, #0]
 800e24e:	9b03      	ldr	r3, [sp, #12]
 800e250:	2b0e      	cmp	r3, #14
 800e252:	f200 809d 	bhi.w	800e390 <_dtoa_r+0x468>
 800e256:	2d00      	cmp	r5, #0
 800e258:	f000 809a 	beq.w	800e390 <_dtoa_r+0x468>
 800e25c:	9b00      	ldr	r3, [sp, #0]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	dd32      	ble.n	800e2c8 <_dtoa_r+0x3a0>
 800e262:	4ab7      	ldr	r2, [pc, #732]	; (800e540 <_dtoa_r+0x618>)
 800e264:	f003 030f 	and.w	r3, r3, #15
 800e268:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e26c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e270:	9b00      	ldr	r3, [sp, #0]
 800e272:	05d8      	lsls	r0, r3, #23
 800e274:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e278:	d516      	bpl.n	800e2a8 <_dtoa_r+0x380>
 800e27a:	4bb2      	ldr	r3, [pc, #712]	; (800e544 <_dtoa_r+0x61c>)
 800e27c:	ec51 0b19 	vmov	r0, r1, d9
 800e280:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e284:	f7f8 fb4a 	bl	800691c <__aeabi_ddiv>
 800e288:	f007 070f 	and.w	r7, r7, #15
 800e28c:	4682      	mov	sl, r0
 800e28e:	468b      	mov	fp, r1
 800e290:	2503      	movs	r5, #3
 800e292:	4eac      	ldr	r6, [pc, #688]	; (800e544 <_dtoa_r+0x61c>)
 800e294:	b957      	cbnz	r7, 800e2ac <_dtoa_r+0x384>
 800e296:	4642      	mov	r2, r8
 800e298:	464b      	mov	r3, r9
 800e29a:	4650      	mov	r0, sl
 800e29c:	4659      	mov	r1, fp
 800e29e:	f7f8 fb3d 	bl	800691c <__aeabi_ddiv>
 800e2a2:	4682      	mov	sl, r0
 800e2a4:	468b      	mov	fp, r1
 800e2a6:	e028      	b.n	800e2fa <_dtoa_r+0x3d2>
 800e2a8:	2502      	movs	r5, #2
 800e2aa:	e7f2      	b.n	800e292 <_dtoa_r+0x36a>
 800e2ac:	07f9      	lsls	r1, r7, #31
 800e2ae:	d508      	bpl.n	800e2c2 <_dtoa_r+0x39a>
 800e2b0:	4640      	mov	r0, r8
 800e2b2:	4649      	mov	r1, r9
 800e2b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e2b8:	f7f8 fa06 	bl	80066c8 <__aeabi_dmul>
 800e2bc:	3501      	adds	r5, #1
 800e2be:	4680      	mov	r8, r0
 800e2c0:	4689      	mov	r9, r1
 800e2c2:	107f      	asrs	r7, r7, #1
 800e2c4:	3608      	adds	r6, #8
 800e2c6:	e7e5      	b.n	800e294 <_dtoa_r+0x36c>
 800e2c8:	f000 809b 	beq.w	800e402 <_dtoa_r+0x4da>
 800e2cc:	9b00      	ldr	r3, [sp, #0]
 800e2ce:	4f9d      	ldr	r7, [pc, #628]	; (800e544 <_dtoa_r+0x61c>)
 800e2d0:	425e      	negs	r6, r3
 800e2d2:	4b9b      	ldr	r3, [pc, #620]	; (800e540 <_dtoa_r+0x618>)
 800e2d4:	f006 020f 	and.w	r2, r6, #15
 800e2d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e0:	ec51 0b19 	vmov	r0, r1, d9
 800e2e4:	f7f8 f9f0 	bl	80066c8 <__aeabi_dmul>
 800e2e8:	1136      	asrs	r6, r6, #4
 800e2ea:	4682      	mov	sl, r0
 800e2ec:	468b      	mov	fp, r1
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	2502      	movs	r5, #2
 800e2f2:	2e00      	cmp	r6, #0
 800e2f4:	d17a      	bne.n	800e3ec <_dtoa_r+0x4c4>
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d1d3      	bne.n	800e2a2 <_dtoa_r+0x37a>
 800e2fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	f000 8082 	beq.w	800e406 <_dtoa_r+0x4de>
 800e302:	4b91      	ldr	r3, [pc, #580]	; (800e548 <_dtoa_r+0x620>)
 800e304:	2200      	movs	r2, #0
 800e306:	4650      	mov	r0, sl
 800e308:	4659      	mov	r1, fp
 800e30a:	f7f8 fc4f 	bl	8006bac <__aeabi_dcmplt>
 800e30e:	2800      	cmp	r0, #0
 800e310:	d079      	beq.n	800e406 <_dtoa_r+0x4de>
 800e312:	9b03      	ldr	r3, [sp, #12]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d076      	beq.n	800e406 <_dtoa_r+0x4de>
 800e318:	9b02      	ldr	r3, [sp, #8]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	dd36      	ble.n	800e38c <_dtoa_r+0x464>
 800e31e:	9b00      	ldr	r3, [sp, #0]
 800e320:	4650      	mov	r0, sl
 800e322:	4659      	mov	r1, fp
 800e324:	1e5f      	subs	r7, r3, #1
 800e326:	2200      	movs	r2, #0
 800e328:	4b88      	ldr	r3, [pc, #544]	; (800e54c <_dtoa_r+0x624>)
 800e32a:	f7f8 f9cd 	bl	80066c8 <__aeabi_dmul>
 800e32e:	9e02      	ldr	r6, [sp, #8]
 800e330:	4682      	mov	sl, r0
 800e332:	468b      	mov	fp, r1
 800e334:	3501      	adds	r5, #1
 800e336:	4628      	mov	r0, r5
 800e338:	f7f8 f95c 	bl	80065f4 <__aeabi_i2d>
 800e33c:	4652      	mov	r2, sl
 800e33e:	465b      	mov	r3, fp
 800e340:	f7f8 f9c2 	bl	80066c8 <__aeabi_dmul>
 800e344:	4b82      	ldr	r3, [pc, #520]	; (800e550 <_dtoa_r+0x628>)
 800e346:	2200      	movs	r2, #0
 800e348:	f7f8 f808 	bl	800635c <__adddf3>
 800e34c:	46d0      	mov	r8, sl
 800e34e:	46d9      	mov	r9, fp
 800e350:	4682      	mov	sl, r0
 800e352:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e356:	2e00      	cmp	r6, #0
 800e358:	d158      	bne.n	800e40c <_dtoa_r+0x4e4>
 800e35a:	4b7e      	ldr	r3, [pc, #504]	; (800e554 <_dtoa_r+0x62c>)
 800e35c:	2200      	movs	r2, #0
 800e35e:	4640      	mov	r0, r8
 800e360:	4649      	mov	r1, r9
 800e362:	f7f7 fff9 	bl	8006358 <__aeabi_dsub>
 800e366:	4652      	mov	r2, sl
 800e368:	465b      	mov	r3, fp
 800e36a:	4680      	mov	r8, r0
 800e36c:	4689      	mov	r9, r1
 800e36e:	f7f8 fc3b 	bl	8006be8 <__aeabi_dcmpgt>
 800e372:	2800      	cmp	r0, #0
 800e374:	f040 8295 	bne.w	800e8a2 <_dtoa_r+0x97a>
 800e378:	4652      	mov	r2, sl
 800e37a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e37e:	4640      	mov	r0, r8
 800e380:	4649      	mov	r1, r9
 800e382:	f7f8 fc13 	bl	8006bac <__aeabi_dcmplt>
 800e386:	2800      	cmp	r0, #0
 800e388:	f040 8289 	bne.w	800e89e <_dtoa_r+0x976>
 800e38c:	ec5b ab19 	vmov	sl, fp, d9
 800e390:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e392:	2b00      	cmp	r3, #0
 800e394:	f2c0 8148 	blt.w	800e628 <_dtoa_r+0x700>
 800e398:	9a00      	ldr	r2, [sp, #0]
 800e39a:	2a0e      	cmp	r2, #14
 800e39c:	f300 8144 	bgt.w	800e628 <_dtoa_r+0x700>
 800e3a0:	4b67      	ldr	r3, [pc, #412]	; (800e540 <_dtoa_r+0x618>)
 800e3a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e3a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e3aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	f280 80d5 	bge.w	800e55c <_dtoa_r+0x634>
 800e3b2:	9b03      	ldr	r3, [sp, #12]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	f300 80d1 	bgt.w	800e55c <_dtoa_r+0x634>
 800e3ba:	f040 826f 	bne.w	800e89c <_dtoa_r+0x974>
 800e3be:	4b65      	ldr	r3, [pc, #404]	; (800e554 <_dtoa_r+0x62c>)
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	4640      	mov	r0, r8
 800e3c4:	4649      	mov	r1, r9
 800e3c6:	f7f8 f97f 	bl	80066c8 <__aeabi_dmul>
 800e3ca:	4652      	mov	r2, sl
 800e3cc:	465b      	mov	r3, fp
 800e3ce:	f7f8 fc01 	bl	8006bd4 <__aeabi_dcmpge>
 800e3d2:	9e03      	ldr	r6, [sp, #12]
 800e3d4:	4637      	mov	r7, r6
 800e3d6:	2800      	cmp	r0, #0
 800e3d8:	f040 8245 	bne.w	800e866 <_dtoa_r+0x93e>
 800e3dc:	9d01      	ldr	r5, [sp, #4]
 800e3de:	2331      	movs	r3, #49	; 0x31
 800e3e0:	f805 3b01 	strb.w	r3, [r5], #1
 800e3e4:	9b00      	ldr	r3, [sp, #0]
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	9300      	str	r3, [sp, #0]
 800e3ea:	e240      	b.n	800e86e <_dtoa_r+0x946>
 800e3ec:	07f2      	lsls	r2, r6, #31
 800e3ee:	d505      	bpl.n	800e3fc <_dtoa_r+0x4d4>
 800e3f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e3f4:	f7f8 f968 	bl	80066c8 <__aeabi_dmul>
 800e3f8:	3501      	adds	r5, #1
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	1076      	asrs	r6, r6, #1
 800e3fe:	3708      	adds	r7, #8
 800e400:	e777      	b.n	800e2f2 <_dtoa_r+0x3ca>
 800e402:	2502      	movs	r5, #2
 800e404:	e779      	b.n	800e2fa <_dtoa_r+0x3d2>
 800e406:	9f00      	ldr	r7, [sp, #0]
 800e408:	9e03      	ldr	r6, [sp, #12]
 800e40a:	e794      	b.n	800e336 <_dtoa_r+0x40e>
 800e40c:	9901      	ldr	r1, [sp, #4]
 800e40e:	4b4c      	ldr	r3, [pc, #304]	; (800e540 <_dtoa_r+0x618>)
 800e410:	4431      	add	r1, r6
 800e412:	910d      	str	r1, [sp, #52]	; 0x34
 800e414:	9908      	ldr	r1, [sp, #32]
 800e416:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e41a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e41e:	2900      	cmp	r1, #0
 800e420:	d043      	beq.n	800e4aa <_dtoa_r+0x582>
 800e422:	494d      	ldr	r1, [pc, #308]	; (800e558 <_dtoa_r+0x630>)
 800e424:	2000      	movs	r0, #0
 800e426:	f7f8 fa79 	bl	800691c <__aeabi_ddiv>
 800e42a:	4652      	mov	r2, sl
 800e42c:	465b      	mov	r3, fp
 800e42e:	f7f7 ff93 	bl	8006358 <__aeabi_dsub>
 800e432:	9d01      	ldr	r5, [sp, #4]
 800e434:	4682      	mov	sl, r0
 800e436:	468b      	mov	fp, r1
 800e438:	4649      	mov	r1, r9
 800e43a:	4640      	mov	r0, r8
 800e43c:	f7f8 fbf4 	bl	8006c28 <__aeabi_d2iz>
 800e440:	4606      	mov	r6, r0
 800e442:	f7f8 f8d7 	bl	80065f4 <__aeabi_i2d>
 800e446:	4602      	mov	r2, r0
 800e448:	460b      	mov	r3, r1
 800e44a:	4640      	mov	r0, r8
 800e44c:	4649      	mov	r1, r9
 800e44e:	f7f7 ff83 	bl	8006358 <__aeabi_dsub>
 800e452:	3630      	adds	r6, #48	; 0x30
 800e454:	f805 6b01 	strb.w	r6, [r5], #1
 800e458:	4652      	mov	r2, sl
 800e45a:	465b      	mov	r3, fp
 800e45c:	4680      	mov	r8, r0
 800e45e:	4689      	mov	r9, r1
 800e460:	f7f8 fba4 	bl	8006bac <__aeabi_dcmplt>
 800e464:	2800      	cmp	r0, #0
 800e466:	d163      	bne.n	800e530 <_dtoa_r+0x608>
 800e468:	4642      	mov	r2, r8
 800e46a:	464b      	mov	r3, r9
 800e46c:	4936      	ldr	r1, [pc, #216]	; (800e548 <_dtoa_r+0x620>)
 800e46e:	2000      	movs	r0, #0
 800e470:	f7f7 ff72 	bl	8006358 <__aeabi_dsub>
 800e474:	4652      	mov	r2, sl
 800e476:	465b      	mov	r3, fp
 800e478:	f7f8 fb98 	bl	8006bac <__aeabi_dcmplt>
 800e47c:	2800      	cmp	r0, #0
 800e47e:	f040 80b5 	bne.w	800e5ec <_dtoa_r+0x6c4>
 800e482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e484:	429d      	cmp	r5, r3
 800e486:	d081      	beq.n	800e38c <_dtoa_r+0x464>
 800e488:	4b30      	ldr	r3, [pc, #192]	; (800e54c <_dtoa_r+0x624>)
 800e48a:	2200      	movs	r2, #0
 800e48c:	4650      	mov	r0, sl
 800e48e:	4659      	mov	r1, fp
 800e490:	f7f8 f91a 	bl	80066c8 <__aeabi_dmul>
 800e494:	4b2d      	ldr	r3, [pc, #180]	; (800e54c <_dtoa_r+0x624>)
 800e496:	4682      	mov	sl, r0
 800e498:	468b      	mov	fp, r1
 800e49a:	4640      	mov	r0, r8
 800e49c:	4649      	mov	r1, r9
 800e49e:	2200      	movs	r2, #0
 800e4a0:	f7f8 f912 	bl	80066c8 <__aeabi_dmul>
 800e4a4:	4680      	mov	r8, r0
 800e4a6:	4689      	mov	r9, r1
 800e4a8:	e7c6      	b.n	800e438 <_dtoa_r+0x510>
 800e4aa:	4650      	mov	r0, sl
 800e4ac:	4659      	mov	r1, fp
 800e4ae:	f7f8 f90b 	bl	80066c8 <__aeabi_dmul>
 800e4b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e4b4:	9d01      	ldr	r5, [sp, #4]
 800e4b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e4b8:	4682      	mov	sl, r0
 800e4ba:	468b      	mov	fp, r1
 800e4bc:	4649      	mov	r1, r9
 800e4be:	4640      	mov	r0, r8
 800e4c0:	f7f8 fbb2 	bl	8006c28 <__aeabi_d2iz>
 800e4c4:	4606      	mov	r6, r0
 800e4c6:	f7f8 f895 	bl	80065f4 <__aeabi_i2d>
 800e4ca:	3630      	adds	r6, #48	; 0x30
 800e4cc:	4602      	mov	r2, r0
 800e4ce:	460b      	mov	r3, r1
 800e4d0:	4640      	mov	r0, r8
 800e4d2:	4649      	mov	r1, r9
 800e4d4:	f7f7 ff40 	bl	8006358 <__aeabi_dsub>
 800e4d8:	f805 6b01 	strb.w	r6, [r5], #1
 800e4dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e4de:	429d      	cmp	r5, r3
 800e4e0:	4680      	mov	r8, r0
 800e4e2:	4689      	mov	r9, r1
 800e4e4:	f04f 0200 	mov.w	r2, #0
 800e4e8:	d124      	bne.n	800e534 <_dtoa_r+0x60c>
 800e4ea:	4b1b      	ldr	r3, [pc, #108]	; (800e558 <_dtoa_r+0x630>)
 800e4ec:	4650      	mov	r0, sl
 800e4ee:	4659      	mov	r1, fp
 800e4f0:	f7f7 ff34 	bl	800635c <__adddf3>
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	460b      	mov	r3, r1
 800e4f8:	4640      	mov	r0, r8
 800e4fa:	4649      	mov	r1, r9
 800e4fc:	f7f8 fb74 	bl	8006be8 <__aeabi_dcmpgt>
 800e500:	2800      	cmp	r0, #0
 800e502:	d173      	bne.n	800e5ec <_dtoa_r+0x6c4>
 800e504:	4652      	mov	r2, sl
 800e506:	465b      	mov	r3, fp
 800e508:	4913      	ldr	r1, [pc, #76]	; (800e558 <_dtoa_r+0x630>)
 800e50a:	2000      	movs	r0, #0
 800e50c:	f7f7 ff24 	bl	8006358 <__aeabi_dsub>
 800e510:	4602      	mov	r2, r0
 800e512:	460b      	mov	r3, r1
 800e514:	4640      	mov	r0, r8
 800e516:	4649      	mov	r1, r9
 800e518:	f7f8 fb48 	bl	8006bac <__aeabi_dcmplt>
 800e51c:	2800      	cmp	r0, #0
 800e51e:	f43f af35 	beq.w	800e38c <_dtoa_r+0x464>
 800e522:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e524:	1e6b      	subs	r3, r5, #1
 800e526:	930f      	str	r3, [sp, #60]	; 0x3c
 800e528:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e52c:	2b30      	cmp	r3, #48	; 0x30
 800e52e:	d0f8      	beq.n	800e522 <_dtoa_r+0x5fa>
 800e530:	9700      	str	r7, [sp, #0]
 800e532:	e049      	b.n	800e5c8 <_dtoa_r+0x6a0>
 800e534:	4b05      	ldr	r3, [pc, #20]	; (800e54c <_dtoa_r+0x624>)
 800e536:	f7f8 f8c7 	bl	80066c8 <__aeabi_dmul>
 800e53a:	4680      	mov	r8, r0
 800e53c:	4689      	mov	r9, r1
 800e53e:	e7bd      	b.n	800e4bc <_dtoa_r+0x594>
 800e540:	0804ca50 	.word	0x0804ca50
 800e544:	0804ca28 	.word	0x0804ca28
 800e548:	3ff00000 	.word	0x3ff00000
 800e54c:	40240000 	.word	0x40240000
 800e550:	401c0000 	.word	0x401c0000
 800e554:	40140000 	.word	0x40140000
 800e558:	3fe00000 	.word	0x3fe00000
 800e55c:	9d01      	ldr	r5, [sp, #4]
 800e55e:	4656      	mov	r6, sl
 800e560:	465f      	mov	r7, fp
 800e562:	4642      	mov	r2, r8
 800e564:	464b      	mov	r3, r9
 800e566:	4630      	mov	r0, r6
 800e568:	4639      	mov	r1, r7
 800e56a:	f7f8 f9d7 	bl	800691c <__aeabi_ddiv>
 800e56e:	f7f8 fb5b 	bl	8006c28 <__aeabi_d2iz>
 800e572:	4682      	mov	sl, r0
 800e574:	f7f8 f83e 	bl	80065f4 <__aeabi_i2d>
 800e578:	4642      	mov	r2, r8
 800e57a:	464b      	mov	r3, r9
 800e57c:	f7f8 f8a4 	bl	80066c8 <__aeabi_dmul>
 800e580:	4602      	mov	r2, r0
 800e582:	460b      	mov	r3, r1
 800e584:	4630      	mov	r0, r6
 800e586:	4639      	mov	r1, r7
 800e588:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e58c:	f7f7 fee4 	bl	8006358 <__aeabi_dsub>
 800e590:	f805 6b01 	strb.w	r6, [r5], #1
 800e594:	9e01      	ldr	r6, [sp, #4]
 800e596:	9f03      	ldr	r7, [sp, #12]
 800e598:	1bae      	subs	r6, r5, r6
 800e59a:	42b7      	cmp	r7, r6
 800e59c:	4602      	mov	r2, r0
 800e59e:	460b      	mov	r3, r1
 800e5a0:	d135      	bne.n	800e60e <_dtoa_r+0x6e6>
 800e5a2:	f7f7 fedb 	bl	800635c <__adddf3>
 800e5a6:	4642      	mov	r2, r8
 800e5a8:	464b      	mov	r3, r9
 800e5aa:	4606      	mov	r6, r0
 800e5ac:	460f      	mov	r7, r1
 800e5ae:	f7f8 fb1b 	bl	8006be8 <__aeabi_dcmpgt>
 800e5b2:	b9d0      	cbnz	r0, 800e5ea <_dtoa_r+0x6c2>
 800e5b4:	4642      	mov	r2, r8
 800e5b6:	464b      	mov	r3, r9
 800e5b8:	4630      	mov	r0, r6
 800e5ba:	4639      	mov	r1, r7
 800e5bc:	f7f8 faec 	bl	8006b98 <__aeabi_dcmpeq>
 800e5c0:	b110      	cbz	r0, 800e5c8 <_dtoa_r+0x6a0>
 800e5c2:	f01a 0f01 	tst.w	sl, #1
 800e5c6:	d110      	bne.n	800e5ea <_dtoa_r+0x6c2>
 800e5c8:	4620      	mov	r0, r4
 800e5ca:	ee18 1a10 	vmov	r1, s16
 800e5ce:	f000 fc3d 	bl	800ee4c <_Bfree>
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	9800      	ldr	r0, [sp, #0]
 800e5d6:	702b      	strb	r3, [r5, #0]
 800e5d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e5da:	3001      	adds	r0, #1
 800e5dc:	6018      	str	r0, [r3, #0]
 800e5de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	f43f acf1 	beq.w	800dfc8 <_dtoa_r+0xa0>
 800e5e6:	601d      	str	r5, [r3, #0]
 800e5e8:	e4ee      	b.n	800dfc8 <_dtoa_r+0xa0>
 800e5ea:	9f00      	ldr	r7, [sp, #0]
 800e5ec:	462b      	mov	r3, r5
 800e5ee:	461d      	mov	r5, r3
 800e5f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e5f4:	2a39      	cmp	r2, #57	; 0x39
 800e5f6:	d106      	bne.n	800e606 <_dtoa_r+0x6de>
 800e5f8:	9a01      	ldr	r2, [sp, #4]
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d1f7      	bne.n	800e5ee <_dtoa_r+0x6c6>
 800e5fe:	9901      	ldr	r1, [sp, #4]
 800e600:	2230      	movs	r2, #48	; 0x30
 800e602:	3701      	adds	r7, #1
 800e604:	700a      	strb	r2, [r1, #0]
 800e606:	781a      	ldrb	r2, [r3, #0]
 800e608:	3201      	adds	r2, #1
 800e60a:	701a      	strb	r2, [r3, #0]
 800e60c:	e790      	b.n	800e530 <_dtoa_r+0x608>
 800e60e:	4ba6      	ldr	r3, [pc, #664]	; (800e8a8 <_dtoa_r+0x980>)
 800e610:	2200      	movs	r2, #0
 800e612:	f7f8 f859 	bl	80066c8 <__aeabi_dmul>
 800e616:	2200      	movs	r2, #0
 800e618:	2300      	movs	r3, #0
 800e61a:	4606      	mov	r6, r0
 800e61c:	460f      	mov	r7, r1
 800e61e:	f7f8 fabb 	bl	8006b98 <__aeabi_dcmpeq>
 800e622:	2800      	cmp	r0, #0
 800e624:	d09d      	beq.n	800e562 <_dtoa_r+0x63a>
 800e626:	e7cf      	b.n	800e5c8 <_dtoa_r+0x6a0>
 800e628:	9a08      	ldr	r2, [sp, #32]
 800e62a:	2a00      	cmp	r2, #0
 800e62c:	f000 80d7 	beq.w	800e7de <_dtoa_r+0x8b6>
 800e630:	9a06      	ldr	r2, [sp, #24]
 800e632:	2a01      	cmp	r2, #1
 800e634:	f300 80ba 	bgt.w	800e7ac <_dtoa_r+0x884>
 800e638:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e63a:	2a00      	cmp	r2, #0
 800e63c:	f000 80b2 	beq.w	800e7a4 <_dtoa_r+0x87c>
 800e640:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e644:	9e07      	ldr	r6, [sp, #28]
 800e646:	9d04      	ldr	r5, [sp, #16]
 800e648:	9a04      	ldr	r2, [sp, #16]
 800e64a:	441a      	add	r2, r3
 800e64c:	9204      	str	r2, [sp, #16]
 800e64e:	9a05      	ldr	r2, [sp, #20]
 800e650:	2101      	movs	r1, #1
 800e652:	441a      	add	r2, r3
 800e654:	4620      	mov	r0, r4
 800e656:	9205      	str	r2, [sp, #20]
 800e658:	f000 fcb0 	bl	800efbc <__i2b>
 800e65c:	4607      	mov	r7, r0
 800e65e:	2d00      	cmp	r5, #0
 800e660:	dd0c      	ble.n	800e67c <_dtoa_r+0x754>
 800e662:	9b05      	ldr	r3, [sp, #20]
 800e664:	2b00      	cmp	r3, #0
 800e666:	dd09      	ble.n	800e67c <_dtoa_r+0x754>
 800e668:	42ab      	cmp	r3, r5
 800e66a:	9a04      	ldr	r2, [sp, #16]
 800e66c:	bfa8      	it	ge
 800e66e:	462b      	movge	r3, r5
 800e670:	1ad2      	subs	r2, r2, r3
 800e672:	9204      	str	r2, [sp, #16]
 800e674:	9a05      	ldr	r2, [sp, #20]
 800e676:	1aed      	subs	r5, r5, r3
 800e678:	1ad3      	subs	r3, r2, r3
 800e67a:	9305      	str	r3, [sp, #20]
 800e67c:	9b07      	ldr	r3, [sp, #28]
 800e67e:	b31b      	cbz	r3, 800e6c8 <_dtoa_r+0x7a0>
 800e680:	9b08      	ldr	r3, [sp, #32]
 800e682:	2b00      	cmp	r3, #0
 800e684:	f000 80af 	beq.w	800e7e6 <_dtoa_r+0x8be>
 800e688:	2e00      	cmp	r6, #0
 800e68a:	dd13      	ble.n	800e6b4 <_dtoa_r+0x78c>
 800e68c:	4639      	mov	r1, r7
 800e68e:	4632      	mov	r2, r6
 800e690:	4620      	mov	r0, r4
 800e692:	f000 fd53 	bl	800f13c <__pow5mult>
 800e696:	ee18 2a10 	vmov	r2, s16
 800e69a:	4601      	mov	r1, r0
 800e69c:	4607      	mov	r7, r0
 800e69e:	4620      	mov	r0, r4
 800e6a0:	f000 fca2 	bl	800efe8 <__multiply>
 800e6a4:	ee18 1a10 	vmov	r1, s16
 800e6a8:	4680      	mov	r8, r0
 800e6aa:	4620      	mov	r0, r4
 800e6ac:	f000 fbce 	bl	800ee4c <_Bfree>
 800e6b0:	ee08 8a10 	vmov	s16, r8
 800e6b4:	9b07      	ldr	r3, [sp, #28]
 800e6b6:	1b9a      	subs	r2, r3, r6
 800e6b8:	d006      	beq.n	800e6c8 <_dtoa_r+0x7a0>
 800e6ba:	ee18 1a10 	vmov	r1, s16
 800e6be:	4620      	mov	r0, r4
 800e6c0:	f000 fd3c 	bl	800f13c <__pow5mult>
 800e6c4:	ee08 0a10 	vmov	s16, r0
 800e6c8:	2101      	movs	r1, #1
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	f000 fc76 	bl	800efbc <__i2b>
 800e6d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	4606      	mov	r6, r0
 800e6d6:	f340 8088 	ble.w	800e7ea <_dtoa_r+0x8c2>
 800e6da:	461a      	mov	r2, r3
 800e6dc:	4601      	mov	r1, r0
 800e6de:	4620      	mov	r0, r4
 800e6e0:	f000 fd2c 	bl	800f13c <__pow5mult>
 800e6e4:	9b06      	ldr	r3, [sp, #24]
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	4606      	mov	r6, r0
 800e6ea:	f340 8081 	ble.w	800e7f0 <_dtoa_r+0x8c8>
 800e6ee:	f04f 0800 	mov.w	r8, #0
 800e6f2:	6933      	ldr	r3, [r6, #16]
 800e6f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e6f8:	6918      	ldr	r0, [r3, #16]
 800e6fa:	f000 fc0f 	bl	800ef1c <__hi0bits>
 800e6fe:	f1c0 0020 	rsb	r0, r0, #32
 800e702:	9b05      	ldr	r3, [sp, #20]
 800e704:	4418      	add	r0, r3
 800e706:	f010 001f 	ands.w	r0, r0, #31
 800e70a:	f000 8092 	beq.w	800e832 <_dtoa_r+0x90a>
 800e70e:	f1c0 0320 	rsb	r3, r0, #32
 800e712:	2b04      	cmp	r3, #4
 800e714:	f340 808a 	ble.w	800e82c <_dtoa_r+0x904>
 800e718:	f1c0 001c 	rsb	r0, r0, #28
 800e71c:	9b04      	ldr	r3, [sp, #16]
 800e71e:	4403      	add	r3, r0
 800e720:	9304      	str	r3, [sp, #16]
 800e722:	9b05      	ldr	r3, [sp, #20]
 800e724:	4403      	add	r3, r0
 800e726:	4405      	add	r5, r0
 800e728:	9305      	str	r3, [sp, #20]
 800e72a:	9b04      	ldr	r3, [sp, #16]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	dd07      	ble.n	800e740 <_dtoa_r+0x818>
 800e730:	ee18 1a10 	vmov	r1, s16
 800e734:	461a      	mov	r2, r3
 800e736:	4620      	mov	r0, r4
 800e738:	f000 fd5a 	bl	800f1f0 <__lshift>
 800e73c:	ee08 0a10 	vmov	s16, r0
 800e740:	9b05      	ldr	r3, [sp, #20]
 800e742:	2b00      	cmp	r3, #0
 800e744:	dd05      	ble.n	800e752 <_dtoa_r+0x82a>
 800e746:	4631      	mov	r1, r6
 800e748:	461a      	mov	r2, r3
 800e74a:	4620      	mov	r0, r4
 800e74c:	f000 fd50 	bl	800f1f0 <__lshift>
 800e750:	4606      	mov	r6, r0
 800e752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e754:	2b00      	cmp	r3, #0
 800e756:	d06e      	beq.n	800e836 <_dtoa_r+0x90e>
 800e758:	ee18 0a10 	vmov	r0, s16
 800e75c:	4631      	mov	r1, r6
 800e75e:	f000 fdb7 	bl	800f2d0 <__mcmp>
 800e762:	2800      	cmp	r0, #0
 800e764:	da67      	bge.n	800e836 <_dtoa_r+0x90e>
 800e766:	9b00      	ldr	r3, [sp, #0]
 800e768:	3b01      	subs	r3, #1
 800e76a:	ee18 1a10 	vmov	r1, s16
 800e76e:	9300      	str	r3, [sp, #0]
 800e770:	220a      	movs	r2, #10
 800e772:	2300      	movs	r3, #0
 800e774:	4620      	mov	r0, r4
 800e776:	f000 fb8b 	bl	800ee90 <__multadd>
 800e77a:	9b08      	ldr	r3, [sp, #32]
 800e77c:	ee08 0a10 	vmov	s16, r0
 800e780:	2b00      	cmp	r3, #0
 800e782:	f000 81b1 	beq.w	800eae8 <_dtoa_r+0xbc0>
 800e786:	2300      	movs	r3, #0
 800e788:	4639      	mov	r1, r7
 800e78a:	220a      	movs	r2, #10
 800e78c:	4620      	mov	r0, r4
 800e78e:	f000 fb7f 	bl	800ee90 <__multadd>
 800e792:	9b02      	ldr	r3, [sp, #8]
 800e794:	2b00      	cmp	r3, #0
 800e796:	4607      	mov	r7, r0
 800e798:	f300 808e 	bgt.w	800e8b8 <_dtoa_r+0x990>
 800e79c:	9b06      	ldr	r3, [sp, #24]
 800e79e:	2b02      	cmp	r3, #2
 800e7a0:	dc51      	bgt.n	800e846 <_dtoa_r+0x91e>
 800e7a2:	e089      	b.n	800e8b8 <_dtoa_r+0x990>
 800e7a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e7a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e7aa:	e74b      	b.n	800e644 <_dtoa_r+0x71c>
 800e7ac:	9b03      	ldr	r3, [sp, #12]
 800e7ae:	1e5e      	subs	r6, r3, #1
 800e7b0:	9b07      	ldr	r3, [sp, #28]
 800e7b2:	42b3      	cmp	r3, r6
 800e7b4:	bfbf      	itttt	lt
 800e7b6:	9b07      	ldrlt	r3, [sp, #28]
 800e7b8:	9607      	strlt	r6, [sp, #28]
 800e7ba:	1af2      	sublt	r2, r6, r3
 800e7bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e7be:	bfb6      	itet	lt
 800e7c0:	189b      	addlt	r3, r3, r2
 800e7c2:	1b9e      	subge	r6, r3, r6
 800e7c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e7c6:	9b03      	ldr	r3, [sp, #12]
 800e7c8:	bfb8      	it	lt
 800e7ca:	2600      	movlt	r6, #0
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	bfb7      	itett	lt
 800e7d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e7d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e7d8:	1a9d      	sublt	r5, r3, r2
 800e7da:	2300      	movlt	r3, #0
 800e7dc:	e734      	b.n	800e648 <_dtoa_r+0x720>
 800e7de:	9e07      	ldr	r6, [sp, #28]
 800e7e0:	9d04      	ldr	r5, [sp, #16]
 800e7e2:	9f08      	ldr	r7, [sp, #32]
 800e7e4:	e73b      	b.n	800e65e <_dtoa_r+0x736>
 800e7e6:	9a07      	ldr	r2, [sp, #28]
 800e7e8:	e767      	b.n	800e6ba <_dtoa_r+0x792>
 800e7ea:	9b06      	ldr	r3, [sp, #24]
 800e7ec:	2b01      	cmp	r3, #1
 800e7ee:	dc18      	bgt.n	800e822 <_dtoa_r+0x8fa>
 800e7f0:	f1ba 0f00 	cmp.w	sl, #0
 800e7f4:	d115      	bne.n	800e822 <_dtoa_r+0x8fa>
 800e7f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e7fa:	b993      	cbnz	r3, 800e822 <_dtoa_r+0x8fa>
 800e7fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e800:	0d1b      	lsrs	r3, r3, #20
 800e802:	051b      	lsls	r3, r3, #20
 800e804:	b183      	cbz	r3, 800e828 <_dtoa_r+0x900>
 800e806:	9b04      	ldr	r3, [sp, #16]
 800e808:	3301      	adds	r3, #1
 800e80a:	9304      	str	r3, [sp, #16]
 800e80c:	9b05      	ldr	r3, [sp, #20]
 800e80e:	3301      	adds	r3, #1
 800e810:	9305      	str	r3, [sp, #20]
 800e812:	f04f 0801 	mov.w	r8, #1
 800e816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e818:	2b00      	cmp	r3, #0
 800e81a:	f47f af6a 	bne.w	800e6f2 <_dtoa_r+0x7ca>
 800e81e:	2001      	movs	r0, #1
 800e820:	e76f      	b.n	800e702 <_dtoa_r+0x7da>
 800e822:	f04f 0800 	mov.w	r8, #0
 800e826:	e7f6      	b.n	800e816 <_dtoa_r+0x8ee>
 800e828:	4698      	mov	r8, r3
 800e82a:	e7f4      	b.n	800e816 <_dtoa_r+0x8ee>
 800e82c:	f43f af7d 	beq.w	800e72a <_dtoa_r+0x802>
 800e830:	4618      	mov	r0, r3
 800e832:	301c      	adds	r0, #28
 800e834:	e772      	b.n	800e71c <_dtoa_r+0x7f4>
 800e836:	9b03      	ldr	r3, [sp, #12]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	dc37      	bgt.n	800e8ac <_dtoa_r+0x984>
 800e83c:	9b06      	ldr	r3, [sp, #24]
 800e83e:	2b02      	cmp	r3, #2
 800e840:	dd34      	ble.n	800e8ac <_dtoa_r+0x984>
 800e842:	9b03      	ldr	r3, [sp, #12]
 800e844:	9302      	str	r3, [sp, #8]
 800e846:	9b02      	ldr	r3, [sp, #8]
 800e848:	b96b      	cbnz	r3, 800e866 <_dtoa_r+0x93e>
 800e84a:	4631      	mov	r1, r6
 800e84c:	2205      	movs	r2, #5
 800e84e:	4620      	mov	r0, r4
 800e850:	f000 fb1e 	bl	800ee90 <__multadd>
 800e854:	4601      	mov	r1, r0
 800e856:	4606      	mov	r6, r0
 800e858:	ee18 0a10 	vmov	r0, s16
 800e85c:	f000 fd38 	bl	800f2d0 <__mcmp>
 800e860:	2800      	cmp	r0, #0
 800e862:	f73f adbb 	bgt.w	800e3dc <_dtoa_r+0x4b4>
 800e866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e868:	9d01      	ldr	r5, [sp, #4]
 800e86a:	43db      	mvns	r3, r3
 800e86c:	9300      	str	r3, [sp, #0]
 800e86e:	f04f 0800 	mov.w	r8, #0
 800e872:	4631      	mov	r1, r6
 800e874:	4620      	mov	r0, r4
 800e876:	f000 fae9 	bl	800ee4c <_Bfree>
 800e87a:	2f00      	cmp	r7, #0
 800e87c:	f43f aea4 	beq.w	800e5c8 <_dtoa_r+0x6a0>
 800e880:	f1b8 0f00 	cmp.w	r8, #0
 800e884:	d005      	beq.n	800e892 <_dtoa_r+0x96a>
 800e886:	45b8      	cmp	r8, r7
 800e888:	d003      	beq.n	800e892 <_dtoa_r+0x96a>
 800e88a:	4641      	mov	r1, r8
 800e88c:	4620      	mov	r0, r4
 800e88e:	f000 fadd 	bl	800ee4c <_Bfree>
 800e892:	4639      	mov	r1, r7
 800e894:	4620      	mov	r0, r4
 800e896:	f000 fad9 	bl	800ee4c <_Bfree>
 800e89a:	e695      	b.n	800e5c8 <_dtoa_r+0x6a0>
 800e89c:	2600      	movs	r6, #0
 800e89e:	4637      	mov	r7, r6
 800e8a0:	e7e1      	b.n	800e866 <_dtoa_r+0x93e>
 800e8a2:	9700      	str	r7, [sp, #0]
 800e8a4:	4637      	mov	r7, r6
 800e8a6:	e599      	b.n	800e3dc <_dtoa_r+0x4b4>
 800e8a8:	40240000 	.word	0x40240000
 800e8ac:	9b08      	ldr	r3, [sp, #32]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	f000 80ca 	beq.w	800ea48 <_dtoa_r+0xb20>
 800e8b4:	9b03      	ldr	r3, [sp, #12]
 800e8b6:	9302      	str	r3, [sp, #8]
 800e8b8:	2d00      	cmp	r5, #0
 800e8ba:	dd05      	ble.n	800e8c8 <_dtoa_r+0x9a0>
 800e8bc:	4639      	mov	r1, r7
 800e8be:	462a      	mov	r2, r5
 800e8c0:	4620      	mov	r0, r4
 800e8c2:	f000 fc95 	bl	800f1f0 <__lshift>
 800e8c6:	4607      	mov	r7, r0
 800e8c8:	f1b8 0f00 	cmp.w	r8, #0
 800e8cc:	d05b      	beq.n	800e986 <_dtoa_r+0xa5e>
 800e8ce:	6879      	ldr	r1, [r7, #4]
 800e8d0:	4620      	mov	r0, r4
 800e8d2:	f000 fa7b 	bl	800edcc <_Balloc>
 800e8d6:	4605      	mov	r5, r0
 800e8d8:	b928      	cbnz	r0, 800e8e6 <_dtoa_r+0x9be>
 800e8da:	4b87      	ldr	r3, [pc, #540]	; (800eaf8 <_dtoa_r+0xbd0>)
 800e8dc:	4602      	mov	r2, r0
 800e8de:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e8e2:	f7ff bb3b 	b.w	800df5c <_dtoa_r+0x34>
 800e8e6:	693a      	ldr	r2, [r7, #16]
 800e8e8:	3202      	adds	r2, #2
 800e8ea:	0092      	lsls	r2, r2, #2
 800e8ec:	f107 010c 	add.w	r1, r7, #12
 800e8f0:	300c      	adds	r0, #12
 800e8f2:	f7fe fb62 	bl	800cfba <memcpy>
 800e8f6:	2201      	movs	r2, #1
 800e8f8:	4629      	mov	r1, r5
 800e8fa:	4620      	mov	r0, r4
 800e8fc:	f000 fc78 	bl	800f1f0 <__lshift>
 800e900:	9b01      	ldr	r3, [sp, #4]
 800e902:	f103 0901 	add.w	r9, r3, #1
 800e906:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e90a:	4413      	add	r3, r2
 800e90c:	9305      	str	r3, [sp, #20]
 800e90e:	f00a 0301 	and.w	r3, sl, #1
 800e912:	46b8      	mov	r8, r7
 800e914:	9304      	str	r3, [sp, #16]
 800e916:	4607      	mov	r7, r0
 800e918:	4631      	mov	r1, r6
 800e91a:	ee18 0a10 	vmov	r0, s16
 800e91e:	f7ff fa77 	bl	800de10 <quorem>
 800e922:	4641      	mov	r1, r8
 800e924:	9002      	str	r0, [sp, #8]
 800e926:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e92a:	ee18 0a10 	vmov	r0, s16
 800e92e:	f000 fccf 	bl	800f2d0 <__mcmp>
 800e932:	463a      	mov	r2, r7
 800e934:	9003      	str	r0, [sp, #12]
 800e936:	4631      	mov	r1, r6
 800e938:	4620      	mov	r0, r4
 800e93a:	f000 fce5 	bl	800f308 <__mdiff>
 800e93e:	68c2      	ldr	r2, [r0, #12]
 800e940:	f109 3bff 	add.w	fp, r9, #4294967295
 800e944:	4605      	mov	r5, r0
 800e946:	bb02      	cbnz	r2, 800e98a <_dtoa_r+0xa62>
 800e948:	4601      	mov	r1, r0
 800e94a:	ee18 0a10 	vmov	r0, s16
 800e94e:	f000 fcbf 	bl	800f2d0 <__mcmp>
 800e952:	4602      	mov	r2, r0
 800e954:	4629      	mov	r1, r5
 800e956:	4620      	mov	r0, r4
 800e958:	9207      	str	r2, [sp, #28]
 800e95a:	f000 fa77 	bl	800ee4c <_Bfree>
 800e95e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e962:	ea43 0102 	orr.w	r1, r3, r2
 800e966:	9b04      	ldr	r3, [sp, #16]
 800e968:	430b      	orrs	r3, r1
 800e96a:	464d      	mov	r5, r9
 800e96c:	d10f      	bne.n	800e98e <_dtoa_r+0xa66>
 800e96e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e972:	d02a      	beq.n	800e9ca <_dtoa_r+0xaa2>
 800e974:	9b03      	ldr	r3, [sp, #12]
 800e976:	2b00      	cmp	r3, #0
 800e978:	dd02      	ble.n	800e980 <_dtoa_r+0xa58>
 800e97a:	9b02      	ldr	r3, [sp, #8]
 800e97c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e980:	f88b a000 	strb.w	sl, [fp]
 800e984:	e775      	b.n	800e872 <_dtoa_r+0x94a>
 800e986:	4638      	mov	r0, r7
 800e988:	e7ba      	b.n	800e900 <_dtoa_r+0x9d8>
 800e98a:	2201      	movs	r2, #1
 800e98c:	e7e2      	b.n	800e954 <_dtoa_r+0xa2c>
 800e98e:	9b03      	ldr	r3, [sp, #12]
 800e990:	2b00      	cmp	r3, #0
 800e992:	db04      	blt.n	800e99e <_dtoa_r+0xa76>
 800e994:	9906      	ldr	r1, [sp, #24]
 800e996:	430b      	orrs	r3, r1
 800e998:	9904      	ldr	r1, [sp, #16]
 800e99a:	430b      	orrs	r3, r1
 800e99c:	d122      	bne.n	800e9e4 <_dtoa_r+0xabc>
 800e99e:	2a00      	cmp	r2, #0
 800e9a0:	ddee      	ble.n	800e980 <_dtoa_r+0xa58>
 800e9a2:	ee18 1a10 	vmov	r1, s16
 800e9a6:	2201      	movs	r2, #1
 800e9a8:	4620      	mov	r0, r4
 800e9aa:	f000 fc21 	bl	800f1f0 <__lshift>
 800e9ae:	4631      	mov	r1, r6
 800e9b0:	ee08 0a10 	vmov	s16, r0
 800e9b4:	f000 fc8c 	bl	800f2d0 <__mcmp>
 800e9b8:	2800      	cmp	r0, #0
 800e9ba:	dc03      	bgt.n	800e9c4 <_dtoa_r+0xa9c>
 800e9bc:	d1e0      	bne.n	800e980 <_dtoa_r+0xa58>
 800e9be:	f01a 0f01 	tst.w	sl, #1
 800e9c2:	d0dd      	beq.n	800e980 <_dtoa_r+0xa58>
 800e9c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e9c8:	d1d7      	bne.n	800e97a <_dtoa_r+0xa52>
 800e9ca:	2339      	movs	r3, #57	; 0x39
 800e9cc:	f88b 3000 	strb.w	r3, [fp]
 800e9d0:	462b      	mov	r3, r5
 800e9d2:	461d      	mov	r5, r3
 800e9d4:	3b01      	subs	r3, #1
 800e9d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e9da:	2a39      	cmp	r2, #57	; 0x39
 800e9dc:	d071      	beq.n	800eac2 <_dtoa_r+0xb9a>
 800e9de:	3201      	adds	r2, #1
 800e9e0:	701a      	strb	r2, [r3, #0]
 800e9e2:	e746      	b.n	800e872 <_dtoa_r+0x94a>
 800e9e4:	2a00      	cmp	r2, #0
 800e9e6:	dd07      	ble.n	800e9f8 <_dtoa_r+0xad0>
 800e9e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e9ec:	d0ed      	beq.n	800e9ca <_dtoa_r+0xaa2>
 800e9ee:	f10a 0301 	add.w	r3, sl, #1
 800e9f2:	f88b 3000 	strb.w	r3, [fp]
 800e9f6:	e73c      	b.n	800e872 <_dtoa_r+0x94a>
 800e9f8:	9b05      	ldr	r3, [sp, #20]
 800e9fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e9fe:	4599      	cmp	r9, r3
 800ea00:	d047      	beq.n	800ea92 <_dtoa_r+0xb6a>
 800ea02:	ee18 1a10 	vmov	r1, s16
 800ea06:	2300      	movs	r3, #0
 800ea08:	220a      	movs	r2, #10
 800ea0a:	4620      	mov	r0, r4
 800ea0c:	f000 fa40 	bl	800ee90 <__multadd>
 800ea10:	45b8      	cmp	r8, r7
 800ea12:	ee08 0a10 	vmov	s16, r0
 800ea16:	f04f 0300 	mov.w	r3, #0
 800ea1a:	f04f 020a 	mov.w	r2, #10
 800ea1e:	4641      	mov	r1, r8
 800ea20:	4620      	mov	r0, r4
 800ea22:	d106      	bne.n	800ea32 <_dtoa_r+0xb0a>
 800ea24:	f000 fa34 	bl	800ee90 <__multadd>
 800ea28:	4680      	mov	r8, r0
 800ea2a:	4607      	mov	r7, r0
 800ea2c:	f109 0901 	add.w	r9, r9, #1
 800ea30:	e772      	b.n	800e918 <_dtoa_r+0x9f0>
 800ea32:	f000 fa2d 	bl	800ee90 <__multadd>
 800ea36:	4639      	mov	r1, r7
 800ea38:	4680      	mov	r8, r0
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	220a      	movs	r2, #10
 800ea3e:	4620      	mov	r0, r4
 800ea40:	f000 fa26 	bl	800ee90 <__multadd>
 800ea44:	4607      	mov	r7, r0
 800ea46:	e7f1      	b.n	800ea2c <_dtoa_r+0xb04>
 800ea48:	9b03      	ldr	r3, [sp, #12]
 800ea4a:	9302      	str	r3, [sp, #8]
 800ea4c:	9d01      	ldr	r5, [sp, #4]
 800ea4e:	ee18 0a10 	vmov	r0, s16
 800ea52:	4631      	mov	r1, r6
 800ea54:	f7ff f9dc 	bl	800de10 <quorem>
 800ea58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ea5c:	9b01      	ldr	r3, [sp, #4]
 800ea5e:	f805 ab01 	strb.w	sl, [r5], #1
 800ea62:	1aea      	subs	r2, r5, r3
 800ea64:	9b02      	ldr	r3, [sp, #8]
 800ea66:	4293      	cmp	r3, r2
 800ea68:	dd09      	ble.n	800ea7e <_dtoa_r+0xb56>
 800ea6a:	ee18 1a10 	vmov	r1, s16
 800ea6e:	2300      	movs	r3, #0
 800ea70:	220a      	movs	r2, #10
 800ea72:	4620      	mov	r0, r4
 800ea74:	f000 fa0c 	bl	800ee90 <__multadd>
 800ea78:	ee08 0a10 	vmov	s16, r0
 800ea7c:	e7e7      	b.n	800ea4e <_dtoa_r+0xb26>
 800ea7e:	9b02      	ldr	r3, [sp, #8]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	bfc8      	it	gt
 800ea84:	461d      	movgt	r5, r3
 800ea86:	9b01      	ldr	r3, [sp, #4]
 800ea88:	bfd8      	it	le
 800ea8a:	2501      	movle	r5, #1
 800ea8c:	441d      	add	r5, r3
 800ea8e:	f04f 0800 	mov.w	r8, #0
 800ea92:	ee18 1a10 	vmov	r1, s16
 800ea96:	2201      	movs	r2, #1
 800ea98:	4620      	mov	r0, r4
 800ea9a:	f000 fba9 	bl	800f1f0 <__lshift>
 800ea9e:	4631      	mov	r1, r6
 800eaa0:	ee08 0a10 	vmov	s16, r0
 800eaa4:	f000 fc14 	bl	800f2d0 <__mcmp>
 800eaa8:	2800      	cmp	r0, #0
 800eaaa:	dc91      	bgt.n	800e9d0 <_dtoa_r+0xaa8>
 800eaac:	d102      	bne.n	800eab4 <_dtoa_r+0xb8c>
 800eaae:	f01a 0f01 	tst.w	sl, #1
 800eab2:	d18d      	bne.n	800e9d0 <_dtoa_r+0xaa8>
 800eab4:	462b      	mov	r3, r5
 800eab6:	461d      	mov	r5, r3
 800eab8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eabc:	2a30      	cmp	r2, #48	; 0x30
 800eabe:	d0fa      	beq.n	800eab6 <_dtoa_r+0xb8e>
 800eac0:	e6d7      	b.n	800e872 <_dtoa_r+0x94a>
 800eac2:	9a01      	ldr	r2, [sp, #4]
 800eac4:	429a      	cmp	r2, r3
 800eac6:	d184      	bne.n	800e9d2 <_dtoa_r+0xaaa>
 800eac8:	9b00      	ldr	r3, [sp, #0]
 800eaca:	3301      	adds	r3, #1
 800eacc:	9300      	str	r3, [sp, #0]
 800eace:	2331      	movs	r3, #49	; 0x31
 800ead0:	7013      	strb	r3, [r2, #0]
 800ead2:	e6ce      	b.n	800e872 <_dtoa_r+0x94a>
 800ead4:	4b09      	ldr	r3, [pc, #36]	; (800eafc <_dtoa_r+0xbd4>)
 800ead6:	f7ff ba95 	b.w	800e004 <_dtoa_r+0xdc>
 800eada:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eadc:	2b00      	cmp	r3, #0
 800eade:	f47f aa6e 	bne.w	800dfbe <_dtoa_r+0x96>
 800eae2:	4b07      	ldr	r3, [pc, #28]	; (800eb00 <_dtoa_r+0xbd8>)
 800eae4:	f7ff ba8e 	b.w	800e004 <_dtoa_r+0xdc>
 800eae8:	9b02      	ldr	r3, [sp, #8]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	dcae      	bgt.n	800ea4c <_dtoa_r+0xb24>
 800eaee:	9b06      	ldr	r3, [sp, #24]
 800eaf0:	2b02      	cmp	r3, #2
 800eaf2:	f73f aea8 	bgt.w	800e846 <_dtoa_r+0x91e>
 800eaf6:	e7a9      	b.n	800ea4c <_dtoa_r+0xb24>
 800eaf8:	0804c9bb 	.word	0x0804c9bb
 800eafc:	0804c8dc 	.word	0x0804c8dc
 800eb00:	0804c93c 	.word	0x0804c93c

0800eb04 <__sflush_r>:
 800eb04:	898a      	ldrh	r2, [r1, #12]
 800eb06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb0a:	4605      	mov	r5, r0
 800eb0c:	0710      	lsls	r0, r2, #28
 800eb0e:	460c      	mov	r4, r1
 800eb10:	d458      	bmi.n	800ebc4 <__sflush_r+0xc0>
 800eb12:	684b      	ldr	r3, [r1, #4]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	dc05      	bgt.n	800eb24 <__sflush_r+0x20>
 800eb18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	dc02      	bgt.n	800eb24 <__sflush_r+0x20>
 800eb1e:	2000      	movs	r0, #0
 800eb20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb26:	2e00      	cmp	r6, #0
 800eb28:	d0f9      	beq.n	800eb1e <__sflush_r+0x1a>
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eb30:	682f      	ldr	r7, [r5, #0]
 800eb32:	602b      	str	r3, [r5, #0]
 800eb34:	d032      	beq.n	800eb9c <__sflush_r+0x98>
 800eb36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eb38:	89a3      	ldrh	r3, [r4, #12]
 800eb3a:	075a      	lsls	r2, r3, #29
 800eb3c:	d505      	bpl.n	800eb4a <__sflush_r+0x46>
 800eb3e:	6863      	ldr	r3, [r4, #4]
 800eb40:	1ac0      	subs	r0, r0, r3
 800eb42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb44:	b10b      	cbz	r3, 800eb4a <__sflush_r+0x46>
 800eb46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eb48:	1ac0      	subs	r0, r0, r3
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	4602      	mov	r2, r0
 800eb4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb50:	6a21      	ldr	r1, [r4, #32]
 800eb52:	4628      	mov	r0, r5
 800eb54:	47b0      	blx	r6
 800eb56:	1c43      	adds	r3, r0, #1
 800eb58:	89a3      	ldrh	r3, [r4, #12]
 800eb5a:	d106      	bne.n	800eb6a <__sflush_r+0x66>
 800eb5c:	6829      	ldr	r1, [r5, #0]
 800eb5e:	291d      	cmp	r1, #29
 800eb60:	d82c      	bhi.n	800ebbc <__sflush_r+0xb8>
 800eb62:	4a2a      	ldr	r2, [pc, #168]	; (800ec0c <__sflush_r+0x108>)
 800eb64:	40ca      	lsrs	r2, r1
 800eb66:	07d6      	lsls	r6, r2, #31
 800eb68:	d528      	bpl.n	800ebbc <__sflush_r+0xb8>
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	6062      	str	r2, [r4, #4]
 800eb6e:	04d9      	lsls	r1, r3, #19
 800eb70:	6922      	ldr	r2, [r4, #16]
 800eb72:	6022      	str	r2, [r4, #0]
 800eb74:	d504      	bpl.n	800eb80 <__sflush_r+0x7c>
 800eb76:	1c42      	adds	r2, r0, #1
 800eb78:	d101      	bne.n	800eb7e <__sflush_r+0x7a>
 800eb7a:	682b      	ldr	r3, [r5, #0]
 800eb7c:	b903      	cbnz	r3, 800eb80 <__sflush_r+0x7c>
 800eb7e:	6560      	str	r0, [r4, #84]	; 0x54
 800eb80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb82:	602f      	str	r7, [r5, #0]
 800eb84:	2900      	cmp	r1, #0
 800eb86:	d0ca      	beq.n	800eb1e <__sflush_r+0x1a>
 800eb88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb8c:	4299      	cmp	r1, r3
 800eb8e:	d002      	beq.n	800eb96 <__sflush_r+0x92>
 800eb90:	4628      	mov	r0, r5
 800eb92:	f000 fcb5 	bl	800f500 <_free_r>
 800eb96:	2000      	movs	r0, #0
 800eb98:	6360      	str	r0, [r4, #52]	; 0x34
 800eb9a:	e7c1      	b.n	800eb20 <__sflush_r+0x1c>
 800eb9c:	6a21      	ldr	r1, [r4, #32]
 800eb9e:	2301      	movs	r3, #1
 800eba0:	4628      	mov	r0, r5
 800eba2:	47b0      	blx	r6
 800eba4:	1c41      	adds	r1, r0, #1
 800eba6:	d1c7      	bne.n	800eb38 <__sflush_r+0x34>
 800eba8:	682b      	ldr	r3, [r5, #0]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d0c4      	beq.n	800eb38 <__sflush_r+0x34>
 800ebae:	2b1d      	cmp	r3, #29
 800ebb0:	d001      	beq.n	800ebb6 <__sflush_r+0xb2>
 800ebb2:	2b16      	cmp	r3, #22
 800ebb4:	d101      	bne.n	800ebba <__sflush_r+0xb6>
 800ebb6:	602f      	str	r7, [r5, #0]
 800ebb8:	e7b1      	b.n	800eb1e <__sflush_r+0x1a>
 800ebba:	89a3      	ldrh	r3, [r4, #12]
 800ebbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebc0:	81a3      	strh	r3, [r4, #12]
 800ebc2:	e7ad      	b.n	800eb20 <__sflush_r+0x1c>
 800ebc4:	690f      	ldr	r7, [r1, #16]
 800ebc6:	2f00      	cmp	r7, #0
 800ebc8:	d0a9      	beq.n	800eb1e <__sflush_r+0x1a>
 800ebca:	0793      	lsls	r3, r2, #30
 800ebcc:	680e      	ldr	r6, [r1, #0]
 800ebce:	bf08      	it	eq
 800ebd0:	694b      	ldreq	r3, [r1, #20]
 800ebd2:	600f      	str	r7, [r1, #0]
 800ebd4:	bf18      	it	ne
 800ebd6:	2300      	movne	r3, #0
 800ebd8:	eba6 0807 	sub.w	r8, r6, r7
 800ebdc:	608b      	str	r3, [r1, #8]
 800ebde:	f1b8 0f00 	cmp.w	r8, #0
 800ebe2:	dd9c      	ble.n	800eb1e <__sflush_r+0x1a>
 800ebe4:	6a21      	ldr	r1, [r4, #32]
 800ebe6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ebe8:	4643      	mov	r3, r8
 800ebea:	463a      	mov	r2, r7
 800ebec:	4628      	mov	r0, r5
 800ebee:	47b0      	blx	r6
 800ebf0:	2800      	cmp	r0, #0
 800ebf2:	dc06      	bgt.n	800ec02 <__sflush_r+0xfe>
 800ebf4:	89a3      	ldrh	r3, [r4, #12]
 800ebf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebfa:	81a3      	strh	r3, [r4, #12]
 800ebfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ec00:	e78e      	b.n	800eb20 <__sflush_r+0x1c>
 800ec02:	4407      	add	r7, r0
 800ec04:	eba8 0800 	sub.w	r8, r8, r0
 800ec08:	e7e9      	b.n	800ebde <__sflush_r+0xda>
 800ec0a:	bf00      	nop
 800ec0c:	20400001 	.word	0x20400001

0800ec10 <_fflush_r>:
 800ec10:	b538      	push	{r3, r4, r5, lr}
 800ec12:	690b      	ldr	r3, [r1, #16]
 800ec14:	4605      	mov	r5, r0
 800ec16:	460c      	mov	r4, r1
 800ec18:	b913      	cbnz	r3, 800ec20 <_fflush_r+0x10>
 800ec1a:	2500      	movs	r5, #0
 800ec1c:	4628      	mov	r0, r5
 800ec1e:	bd38      	pop	{r3, r4, r5, pc}
 800ec20:	b118      	cbz	r0, 800ec2a <_fflush_r+0x1a>
 800ec22:	6983      	ldr	r3, [r0, #24]
 800ec24:	b90b      	cbnz	r3, 800ec2a <_fflush_r+0x1a>
 800ec26:	f7fe f8f3 	bl	800ce10 <__sinit>
 800ec2a:	4b14      	ldr	r3, [pc, #80]	; (800ec7c <_fflush_r+0x6c>)
 800ec2c:	429c      	cmp	r4, r3
 800ec2e:	d11b      	bne.n	800ec68 <_fflush_r+0x58>
 800ec30:	686c      	ldr	r4, [r5, #4]
 800ec32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d0ef      	beq.n	800ec1a <_fflush_r+0xa>
 800ec3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ec3c:	07d0      	lsls	r0, r2, #31
 800ec3e:	d404      	bmi.n	800ec4a <_fflush_r+0x3a>
 800ec40:	0599      	lsls	r1, r3, #22
 800ec42:	d402      	bmi.n	800ec4a <_fflush_r+0x3a>
 800ec44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec46:	f7fe f9a6 	bl	800cf96 <__retarget_lock_acquire_recursive>
 800ec4a:	4628      	mov	r0, r5
 800ec4c:	4621      	mov	r1, r4
 800ec4e:	f7ff ff59 	bl	800eb04 <__sflush_r>
 800ec52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec54:	07da      	lsls	r2, r3, #31
 800ec56:	4605      	mov	r5, r0
 800ec58:	d4e0      	bmi.n	800ec1c <_fflush_r+0xc>
 800ec5a:	89a3      	ldrh	r3, [r4, #12]
 800ec5c:	059b      	lsls	r3, r3, #22
 800ec5e:	d4dd      	bmi.n	800ec1c <_fflush_r+0xc>
 800ec60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec62:	f7fe f999 	bl	800cf98 <__retarget_lock_release_recursive>
 800ec66:	e7d9      	b.n	800ec1c <_fflush_r+0xc>
 800ec68:	4b05      	ldr	r3, [pc, #20]	; (800ec80 <_fflush_r+0x70>)
 800ec6a:	429c      	cmp	r4, r3
 800ec6c:	d101      	bne.n	800ec72 <_fflush_r+0x62>
 800ec6e:	68ac      	ldr	r4, [r5, #8]
 800ec70:	e7df      	b.n	800ec32 <_fflush_r+0x22>
 800ec72:	4b04      	ldr	r3, [pc, #16]	; (800ec84 <_fflush_r+0x74>)
 800ec74:	429c      	cmp	r4, r3
 800ec76:	bf08      	it	eq
 800ec78:	68ec      	ldreq	r4, [r5, #12]
 800ec7a:	e7da      	b.n	800ec32 <_fflush_r+0x22>
 800ec7c:	0804c888 	.word	0x0804c888
 800ec80:	0804c8a8 	.word	0x0804c8a8
 800ec84:	0804c868 	.word	0x0804c868

0800ec88 <fiprintf>:
 800ec88:	b40e      	push	{r1, r2, r3}
 800ec8a:	b503      	push	{r0, r1, lr}
 800ec8c:	4601      	mov	r1, r0
 800ec8e:	ab03      	add	r3, sp, #12
 800ec90:	4805      	ldr	r0, [pc, #20]	; (800eca8 <fiprintf+0x20>)
 800ec92:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec96:	6800      	ldr	r0, [r0, #0]
 800ec98:	9301      	str	r3, [sp, #4]
 800ec9a:	f000 fe03 	bl	800f8a4 <_vfiprintf_r>
 800ec9e:	b002      	add	sp, #8
 800eca0:	f85d eb04 	ldr.w	lr, [sp], #4
 800eca4:	b003      	add	sp, #12
 800eca6:	4770      	bx	lr
 800eca8:	20000abc 	.word	0x20000abc

0800ecac <_localeconv_r>:
 800ecac:	4800      	ldr	r0, [pc, #0]	; (800ecb0 <_localeconv_r+0x4>)
 800ecae:	4770      	bx	lr
 800ecb0:	20000c10 	.word	0x20000c10

0800ecb4 <_lseek_r>:
 800ecb4:	b538      	push	{r3, r4, r5, lr}
 800ecb6:	4d07      	ldr	r5, [pc, #28]	; (800ecd4 <_lseek_r+0x20>)
 800ecb8:	4604      	mov	r4, r0
 800ecba:	4608      	mov	r0, r1
 800ecbc:	4611      	mov	r1, r2
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	602a      	str	r2, [r5, #0]
 800ecc2:	461a      	mov	r2, r3
 800ecc4:	f7fd fe31 	bl	800c92a <_lseek>
 800ecc8:	1c43      	adds	r3, r0, #1
 800ecca:	d102      	bne.n	800ecd2 <_lseek_r+0x1e>
 800eccc:	682b      	ldr	r3, [r5, #0]
 800ecce:	b103      	cbz	r3, 800ecd2 <_lseek_r+0x1e>
 800ecd0:	6023      	str	r3, [r4, #0]
 800ecd2:	bd38      	pop	{r3, r4, r5, pc}
 800ecd4:	20014018 	.word	0x20014018

0800ecd8 <__swhatbuf_r>:
 800ecd8:	b570      	push	{r4, r5, r6, lr}
 800ecda:	460e      	mov	r6, r1
 800ecdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ece0:	2900      	cmp	r1, #0
 800ece2:	b096      	sub	sp, #88	; 0x58
 800ece4:	4614      	mov	r4, r2
 800ece6:	461d      	mov	r5, r3
 800ece8:	da08      	bge.n	800ecfc <__swhatbuf_r+0x24>
 800ecea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ecee:	2200      	movs	r2, #0
 800ecf0:	602a      	str	r2, [r5, #0]
 800ecf2:	061a      	lsls	r2, r3, #24
 800ecf4:	d410      	bmi.n	800ed18 <__swhatbuf_r+0x40>
 800ecf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ecfa:	e00e      	b.n	800ed1a <__swhatbuf_r+0x42>
 800ecfc:	466a      	mov	r2, sp
 800ecfe:	f000 ff1b 	bl	800fb38 <_fstat_r>
 800ed02:	2800      	cmp	r0, #0
 800ed04:	dbf1      	blt.n	800ecea <__swhatbuf_r+0x12>
 800ed06:	9a01      	ldr	r2, [sp, #4]
 800ed08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ed0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ed10:	425a      	negs	r2, r3
 800ed12:	415a      	adcs	r2, r3
 800ed14:	602a      	str	r2, [r5, #0]
 800ed16:	e7ee      	b.n	800ecf6 <__swhatbuf_r+0x1e>
 800ed18:	2340      	movs	r3, #64	; 0x40
 800ed1a:	2000      	movs	r0, #0
 800ed1c:	6023      	str	r3, [r4, #0]
 800ed1e:	b016      	add	sp, #88	; 0x58
 800ed20:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ed24 <__smakebuf_r>:
 800ed24:	898b      	ldrh	r3, [r1, #12]
 800ed26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ed28:	079d      	lsls	r5, r3, #30
 800ed2a:	4606      	mov	r6, r0
 800ed2c:	460c      	mov	r4, r1
 800ed2e:	d507      	bpl.n	800ed40 <__smakebuf_r+0x1c>
 800ed30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ed34:	6023      	str	r3, [r4, #0]
 800ed36:	6123      	str	r3, [r4, #16]
 800ed38:	2301      	movs	r3, #1
 800ed3a:	6163      	str	r3, [r4, #20]
 800ed3c:	b002      	add	sp, #8
 800ed3e:	bd70      	pop	{r4, r5, r6, pc}
 800ed40:	ab01      	add	r3, sp, #4
 800ed42:	466a      	mov	r2, sp
 800ed44:	f7ff ffc8 	bl	800ecd8 <__swhatbuf_r>
 800ed48:	9900      	ldr	r1, [sp, #0]
 800ed4a:	4605      	mov	r5, r0
 800ed4c:	4630      	mov	r0, r6
 800ed4e:	f7fe f96b 	bl	800d028 <_malloc_r>
 800ed52:	b948      	cbnz	r0, 800ed68 <__smakebuf_r+0x44>
 800ed54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed58:	059a      	lsls	r2, r3, #22
 800ed5a:	d4ef      	bmi.n	800ed3c <__smakebuf_r+0x18>
 800ed5c:	f023 0303 	bic.w	r3, r3, #3
 800ed60:	f043 0302 	orr.w	r3, r3, #2
 800ed64:	81a3      	strh	r3, [r4, #12]
 800ed66:	e7e3      	b.n	800ed30 <__smakebuf_r+0xc>
 800ed68:	4b0d      	ldr	r3, [pc, #52]	; (800eda0 <__smakebuf_r+0x7c>)
 800ed6a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ed6c:	89a3      	ldrh	r3, [r4, #12]
 800ed6e:	6020      	str	r0, [r4, #0]
 800ed70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed74:	81a3      	strh	r3, [r4, #12]
 800ed76:	9b00      	ldr	r3, [sp, #0]
 800ed78:	6163      	str	r3, [r4, #20]
 800ed7a:	9b01      	ldr	r3, [sp, #4]
 800ed7c:	6120      	str	r0, [r4, #16]
 800ed7e:	b15b      	cbz	r3, 800ed98 <__smakebuf_r+0x74>
 800ed80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed84:	4630      	mov	r0, r6
 800ed86:	f000 fee9 	bl	800fb5c <_isatty_r>
 800ed8a:	b128      	cbz	r0, 800ed98 <__smakebuf_r+0x74>
 800ed8c:	89a3      	ldrh	r3, [r4, #12]
 800ed8e:	f023 0303 	bic.w	r3, r3, #3
 800ed92:	f043 0301 	orr.w	r3, r3, #1
 800ed96:	81a3      	strh	r3, [r4, #12]
 800ed98:	89a0      	ldrh	r0, [r4, #12]
 800ed9a:	4305      	orrs	r5, r0
 800ed9c:	81a5      	strh	r5, [r4, #12]
 800ed9e:	e7cd      	b.n	800ed3c <__smakebuf_r+0x18>
 800eda0:	0800cda9 	.word	0x0800cda9

0800eda4 <malloc>:
 800eda4:	4b02      	ldr	r3, [pc, #8]	; (800edb0 <malloc+0xc>)
 800eda6:	4601      	mov	r1, r0
 800eda8:	6818      	ldr	r0, [r3, #0]
 800edaa:	f7fe b93d 	b.w	800d028 <_malloc_r>
 800edae:	bf00      	nop
 800edb0:	20000abc 	.word	0x20000abc

0800edb4 <__malloc_lock>:
 800edb4:	4801      	ldr	r0, [pc, #4]	; (800edbc <__malloc_lock+0x8>)
 800edb6:	f7fe b8ee 	b.w	800cf96 <__retarget_lock_acquire_recursive>
 800edba:	bf00      	nop
 800edbc:	2001400c 	.word	0x2001400c

0800edc0 <__malloc_unlock>:
 800edc0:	4801      	ldr	r0, [pc, #4]	; (800edc8 <__malloc_unlock+0x8>)
 800edc2:	f7fe b8e9 	b.w	800cf98 <__retarget_lock_release_recursive>
 800edc6:	bf00      	nop
 800edc8:	2001400c 	.word	0x2001400c

0800edcc <_Balloc>:
 800edcc:	b570      	push	{r4, r5, r6, lr}
 800edce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800edd0:	4604      	mov	r4, r0
 800edd2:	460d      	mov	r5, r1
 800edd4:	b976      	cbnz	r6, 800edf4 <_Balloc+0x28>
 800edd6:	2010      	movs	r0, #16
 800edd8:	f7ff ffe4 	bl	800eda4 <malloc>
 800eddc:	4602      	mov	r2, r0
 800edde:	6260      	str	r0, [r4, #36]	; 0x24
 800ede0:	b920      	cbnz	r0, 800edec <_Balloc+0x20>
 800ede2:	4b18      	ldr	r3, [pc, #96]	; (800ee44 <_Balloc+0x78>)
 800ede4:	4818      	ldr	r0, [pc, #96]	; (800ee48 <_Balloc+0x7c>)
 800ede6:	2166      	movs	r1, #102	; 0x66
 800ede8:	f7fe ffe4 	bl	800ddb4 <__assert_func>
 800edec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800edf0:	6006      	str	r6, [r0, #0]
 800edf2:	60c6      	str	r6, [r0, #12]
 800edf4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800edf6:	68f3      	ldr	r3, [r6, #12]
 800edf8:	b183      	cbz	r3, 800ee1c <_Balloc+0x50>
 800edfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edfc:	68db      	ldr	r3, [r3, #12]
 800edfe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ee02:	b9b8      	cbnz	r0, 800ee34 <_Balloc+0x68>
 800ee04:	2101      	movs	r1, #1
 800ee06:	fa01 f605 	lsl.w	r6, r1, r5
 800ee0a:	1d72      	adds	r2, r6, #5
 800ee0c:	0092      	lsls	r2, r2, #2
 800ee0e:	4620      	mov	r0, r4
 800ee10:	f000 fb60 	bl	800f4d4 <_calloc_r>
 800ee14:	b160      	cbz	r0, 800ee30 <_Balloc+0x64>
 800ee16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ee1a:	e00e      	b.n	800ee3a <_Balloc+0x6e>
 800ee1c:	2221      	movs	r2, #33	; 0x21
 800ee1e:	2104      	movs	r1, #4
 800ee20:	4620      	mov	r0, r4
 800ee22:	f000 fb57 	bl	800f4d4 <_calloc_r>
 800ee26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee28:	60f0      	str	r0, [r6, #12]
 800ee2a:	68db      	ldr	r3, [r3, #12]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d1e4      	bne.n	800edfa <_Balloc+0x2e>
 800ee30:	2000      	movs	r0, #0
 800ee32:	bd70      	pop	{r4, r5, r6, pc}
 800ee34:	6802      	ldr	r2, [r0, #0]
 800ee36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ee40:	e7f7      	b.n	800ee32 <_Balloc+0x66>
 800ee42:	bf00      	nop
 800ee44:	0804c949 	.word	0x0804c949
 800ee48:	0804c9cc 	.word	0x0804c9cc

0800ee4c <_Bfree>:
 800ee4c:	b570      	push	{r4, r5, r6, lr}
 800ee4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ee50:	4605      	mov	r5, r0
 800ee52:	460c      	mov	r4, r1
 800ee54:	b976      	cbnz	r6, 800ee74 <_Bfree+0x28>
 800ee56:	2010      	movs	r0, #16
 800ee58:	f7ff ffa4 	bl	800eda4 <malloc>
 800ee5c:	4602      	mov	r2, r0
 800ee5e:	6268      	str	r0, [r5, #36]	; 0x24
 800ee60:	b920      	cbnz	r0, 800ee6c <_Bfree+0x20>
 800ee62:	4b09      	ldr	r3, [pc, #36]	; (800ee88 <_Bfree+0x3c>)
 800ee64:	4809      	ldr	r0, [pc, #36]	; (800ee8c <_Bfree+0x40>)
 800ee66:	218a      	movs	r1, #138	; 0x8a
 800ee68:	f7fe ffa4 	bl	800ddb4 <__assert_func>
 800ee6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ee70:	6006      	str	r6, [r0, #0]
 800ee72:	60c6      	str	r6, [r0, #12]
 800ee74:	b13c      	cbz	r4, 800ee86 <_Bfree+0x3a>
 800ee76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ee78:	6862      	ldr	r2, [r4, #4]
 800ee7a:	68db      	ldr	r3, [r3, #12]
 800ee7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ee80:	6021      	str	r1, [r4, #0]
 800ee82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ee86:	bd70      	pop	{r4, r5, r6, pc}
 800ee88:	0804c949 	.word	0x0804c949
 800ee8c:	0804c9cc 	.word	0x0804c9cc

0800ee90 <__multadd>:
 800ee90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee94:	690d      	ldr	r5, [r1, #16]
 800ee96:	4607      	mov	r7, r0
 800ee98:	460c      	mov	r4, r1
 800ee9a:	461e      	mov	r6, r3
 800ee9c:	f101 0c14 	add.w	ip, r1, #20
 800eea0:	2000      	movs	r0, #0
 800eea2:	f8dc 3000 	ldr.w	r3, [ip]
 800eea6:	b299      	uxth	r1, r3
 800eea8:	fb02 6101 	mla	r1, r2, r1, r6
 800eeac:	0c1e      	lsrs	r6, r3, #16
 800eeae:	0c0b      	lsrs	r3, r1, #16
 800eeb0:	fb02 3306 	mla	r3, r2, r6, r3
 800eeb4:	b289      	uxth	r1, r1
 800eeb6:	3001      	adds	r0, #1
 800eeb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eebc:	4285      	cmp	r5, r0
 800eebe:	f84c 1b04 	str.w	r1, [ip], #4
 800eec2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eec6:	dcec      	bgt.n	800eea2 <__multadd+0x12>
 800eec8:	b30e      	cbz	r6, 800ef0e <__multadd+0x7e>
 800eeca:	68a3      	ldr	r3, [r4, #8]
 800eecc:	42ab      	cmp	r3, r5
 800eece:	dc19      	bgt.n	800ef04 <__multadd+0x74>
 800eed0:	6861      	ldr	r1, [r4, #4]
 800eed2:	4638      	mov	r0, r7
 800eed4:	3101      	adds	r1, #1
 800eed6:	f7ff ff79 	bl	800edcc <_Balloc>
 800eeda:	4680      	mov	r8, r0
 800eedc:	b928      	cbnz	r0, 800eeea <__multadd+0x5a>
 800eede:	4602      	mov	r2, r0
 800eee0:	4b0c      	ldr	r3, [pc, #48]	; (800ef14 <__multadd+0x84>)
 800eee2:	480d      	ldr	r0, [pc, #52]	; (800ef18 <__multadd+0x88>)
 800eee4:	21b5      	movs	r1, #181	; 0xb5
 800eee6:	f7fe ff65 	bl	800ddb4 <__assert_func>
 800eeea:	6922      	ldr	r2, [r4, #16]
 800eeec:	3202      	adds	r2, #2
 800eeee:	f104 010c 	add.w	r1, r4, #12
 800eef2:	0092      	lsls	r2, r2, #2
 800eef4:	300c      	adds	r0, #12
 800eef6:	f7fe f860 	bl	800cfba <memcpy>
 800eefa:	4621      	mov	r1, r4
 800eefc:	4638      	mov	r0, r7
 800eefe:	f7ff ffa5 	bl	800ee4c <_Bfree>
 800ef02:	4644      	mov	r4, r8
 800ef04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ef08:	3501      	adds	r5, #1
 800ef0a:	615e      	str	r6, [r3, #20]
 800ef0c:	6125      	str	r5, [r4, #16]
 800ef0e:	4620      	mov	r0, r4
 800ef10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef14:	0804c9bb 	.word	0x0804c9bb
 800ef18:	0804c9cc 	.word	0x0804c9cc

0800ef1c <__hi0bits>:
 800ef1c:	0c03      	lsrs	r3, r0, #16
 800ef1e:	041b      	lsls	r3, r3, #16
 800ef20:	b9d3      	cbnz	r3, 800ef58 <__hi0bits+0x3c>
 800ef22:	0400      	lsls	r0, r0, #16
 800ef24:	2310      	movs	r3, #16
 800ef26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ef2a:	bf04      	itt	eq
 800ef2c:	0200      	lsleq	r0, r0, #8
 800ef2e:	3308      	addeq	r3, #8
 800ef30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ef34:	bf04      	itt	eq
 800ef36:	0100      	lsleq	r0, r0, #4
 800ef38:	3304      	addeq	r3, #4
 800ef3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ef3e:	bf04      	itt	eq
 800ef40:	0080      	lsleq	r0, r0, #2
 800ef42:	3302      	addeq	r3, #2
 800ef44:	2800      	cmp	r0, #0
 800ef46:	db05      	blt.n	800ef54 <__hi0bits+0x38>
 800ef48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ef4c:	f103 0301 	add.w	r3, r3, #1
 800ef50:	bf08      	it	eq
 800ef52:	2320      	moveq	r3, #32
 800ef54:	4618      	mov	r0, r3
 800ef56:	4770      	bx	lr
 800ef58:	2300      	movs	r3, #0
 800ef5a:	e7e4      	b.n	800ef26 <__hi0bits+0xa>

0800ef5c <__lo0bits>:
 800ef5c:	6803      	ldr	r3, [r0, #0]
 800ef5e:	f013 0207 	ands.w	r2, r3, #7
 800ef62:	4601      	mov	r1, r0
 800ef64:	d00b      	beq.n	800ef7e <__lo0bits+0x22>
 800ef66:	07da      	lsls	r2, r3, #31
 800ef68:	d423      	bmi.n	800efb2 <__lo0bits+0x56>
 800ef6a:	0798      	lsls	r0, r3, #30
 800ef6c:	bf49      	itett	mi
 800ef6e:	085b      	lsrmi	r3, r3, #1
 800ef70:	089b      	lsrpl	r3, r3, #2
 800ef72:	2001      	movmi	r0, #1
 800ef74:	600b      	strmi	r3, [r1, #0]
 800ef76:	bf5c      	itt	pl
 800ef78:	600b      	strpl	r3, [r1, #0]
 800ef7a:	2002      	movpl	r0, #2
 800ef7c:	4770      	bx	lr
 800ef7e:	b298      	uxth	r0, r3
 800ef80:	b9a8      	cbnz	r0, 800efae <__lo0bits+0x52>
 800ef82:	0c1b      	lsrs	r3, r3, #16
 800ef84:	2010      	movs	r0, #16
 800ef86:	b2da      	uxtb	r2, r3
 800ef88:	b90a      	cbnz	r2, 800ef8e <__lo0bits+0x32>
 800ef8a:	3008      	adds	r0, #8
 800ef8c:	0a1b      	lsrs	r3, r3, #8
 800ef8e:	071a      	lsls	r2, r3, #28
 800ef90:	bf04      	itt	eq
 800ef92:	091b      	lsreq	r3, r3, #4
 800ef94:	3004      	addeq	r0, #4
 800ef96:	079a      	lsls	r2, r3, #30
 800ef98:	bf04      	itt	eq
 800ef9a:	089b      	lsreq	r3, r3, #2
 800ef9c:	3002      	addeq	r0, #2
 800ef9e:	07da      	lsls	r2, r3, #31
 800efa0:	d403      	bmi.n	800efaa <__lo0bits+0x4e>
 800efa2:	085b      	lsrs	r3, r3, #1
 800efa4:	f100 0001 	add.w	r0, r0, #1
 800efa8:	d005      	beq.n	800efb6 <__lo0bits+0x5a>
 800efaa:	600b      	str	r3, [r1, #0]
 800efac:	4770      	bx	lr
 800efae:	4610      	mov	r0, r2
 800efb0:	e7e9      	b.n	800ef86 <__lo0bits+0x2a>
 800efb2:	2000      	movs	r0, #0
 800efb4:	4770      	bx	lr
 800efb6:	2020      	movs	r0, #32
 800efb8:	4770      	bx	lr
	...

0800efbc <__i2b>:
 800efbc:	b510      	push	{r4, lr}
 800efbe:	460c      	mov	r4, r1
 800efc0:	2101      	movs	r1, #1
 800efc2:	f7ff ff03 	bl	800edcc <_Balloc>
 800efc6:	4602      	mov	r2, r0
 800efc8:	b928      	cbnz	r0, 800efd6 <__i2b+0x1a>
 800efca:	4b05      	ldr	r3, [pc, #20]	; (800efe0 <__i2b+0x24>)
 800efcc:	4805      	ldr	r0, [pc, #20]	; (800efe4 <__i2b+0x28>)
 800efce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800efd2:	f7fe feef 	bl	800ddb4 <__assert_func>
 800efd6:	2301      	movs	r3, #1
 800efd8:	6144      	str	r4, [r0, #20]
 800efda:	6103      	str	r3, [r0, #16]
 800efdc:	bd10      	pop	{r4, pc}
 800efde:	bf00      	nop
 800efe0:	0804c9bb 	.word	0x0804c9bb
 800efe4:	0804c9cc 	.word	0x0804c9cc

0800efe8 <__multiply>:
 800efe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efec:	4691      	mov	r9, r2
 800efee:	690a      	ldr	r2, [r1, #16]
 800eff0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eff4:	429a      	cmp	r2, r3
 800eff6:	bfb8      	it	lt
 800eff8:	460b      	movlt	r3, r1
 800effa:	460c      	mov	r4, r1
 800effc:	bfbc      	itt	lt
 800effe:	464c      	movlt	r4, r9
 800f000:	4699      	movlt	r9, r3
 800f002:	6927      	ldr	r7, [r4, #16]
 800f004:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f008:	68a3      	ldr	r3, [r4, #8]
 800f00a:	6861      	ldr	r1, [r4, #4]
 800f00c:	eb07 060a 	add.w	r6, r7, sl
 800f010:	42b3      	cmp	r3, r6
 800f012:	b085      	sub	sp, #20
 800f014:	bfb8      	it	lt
 800f016:	3101      	addlt	r1, #1
 800f018:	f7ff fed8 	bl	800edcc <_Balloc>
 800f01c:	b930      	cbnz	r0, 800f02c <__multiply+0x44>
 800f01e:	4602      	mov	r2, r0
 800f020:	4b44      	ldr	r3, [pc, #272]	; (800f134 <__multiply+0x14c>)
 800f022:	4845      	ldr	r0, [pc, #276]	; (800f138 <__multiply+0x150>)
 800f024:	f240 115d 	movw	r1, #349	; 0x15d
 800f028:	f7fe fec4 	bl	800ddb4 <__assert_func>
 800f02c:	f100 0514 	add.w	r5, r0, #20
 800f030:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f034:	462b      	mov	r3, r5
 800f036:	2200      	movs	r2, #0
 800f038:	4543      	cmp	r3, r8
 800f03a:	d321      	bcc.n	800f080 <__multiply+0x98>
 800f03c:	f104 0314 	add.w	r3, r4, #20
 800f040:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f044:	f109 0314 	add.w	r3, r9, #20
 800f048:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f04c:	9202      	str	r2, [sp, #8]
 800f04e:	1b3a      	subs	r2, r7, r4
 800f050:	3a15      	subs	r2, #21
 800f052:	f022 0203 	bic.w	r2, r2, #3
 800f056:	3204      	adds	r2, #4
 800f058:	f104 0115 	add.w	r1, r4, #21
 800f05c:	428f      	cmp	r7, r1
 800f05e:	bf38      	it	cc
 800f060:	2204      	movcc	r2, #4
 800f062:	9201      	str	r2, [sp, #4]
 800f064:	9a02      	ldr	r2, [sp, #8]
 800f066:	9303      	str	r3, [sp, #12]
 800f068:	429a      	cmp	r2, r3
 800f06a:	d80c      	bhi.n	800f086 <__multiply+0x9e>
 800f06c:	2e00      	cmp	r6, #0
 800f06e:	dd03      	ble.n	800f078 <__multiply+0x90>
 800f070:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f074:	2b00      	cmp	r3, #0
 800f076:	d05a      	beq.n	800f12e <__multiply+0x146>
 800f078:	6106      	str	r6, [r0, #16]
 800f07a:	b005      	add	sp, #20
 800f07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f080:	f843 2b04 	str.w	r2, [r3], #4
 800f084:	e7d8      	b.n	800f038 <__multiply+0x50>
 800f086:	f8b3 a000 	ldrh.w	sl, [r3]
 800f08a:	f1ba 0f00 	cmp.w	sl, #0
 800f08e:	d024      	beq.n	800f0da <__multiply+0xf2>
 800f090:	f104 0e14 	add.w	lr, r4, #20
 800f094:	46a9      	mov	r9, r5
 800f096:	f04f 0c00 	mov.w	ip, #0
 800f09a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f09e:	f8d9 1000 	ldr.w	r1, [r9]
 800f0a2:	fa1f fb82 	uxth.w	fp, r2
 800f0a6:	b289      	uxth	r1, r1
 800f0a8:	fb0a 110b 	mla	r1, sl, fp, r1
 800f0ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f0b0:	f8d9 2000 	ldr.w	r2, [r9]
 800f0b4:	4461      	add	r1, ip
 800f0b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f0ba:	fb0a c20b 	mla	r2, sl, fp, ip
 800f0be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f0c2:	b289      	uxth	r1, r1
 800f0c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f0c8:	4577      	cmp	r7, lr
 800f0ca:	f849 1b04 	str.w	r1, [r9], #4
 800f0ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f0d2:	d8e2      	bhi.n	800f09a <__multiply+0xb2>
 800f0d4:	9a01      	ldr	r2, [sp, #4]
 800f0d6:	f845 c002 	str.w	ip, [r5, r2]
 800f0da:	9a03      	ldr	r2, [sp, #12]
 800f0dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f0e0:	3304      	adds	r3, #4
 800f0e2:	f1b9 0f00 	cmp.w	r9, #0
 800f0e6:	d020      	beq.n	800f12a <__multiply+0x142>
 800f0e8:	6829      	ldr	r1, [r5, #0]
 800f0ea:	f104 0c14 	add.w	ip, r4, #20
 800f0ee:	46ae      	mov	lr, r5
 800f0f0:	f04f 0a00 	mov.w	sl, #0
 800f0f4:	f8bc b000 	ldrh.w	fp, [ip]
 800f0f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f0fc:	fb09 220b 	mla	r2, r9, fp, r2
 800f100:	4492      	add	sl, r2
 800f102:	b289      	uxth	r1, r1
 800f104:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f108:	f84e 1b04 	str.w	r1, [lr], #4
 800f10c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f110:	f8be 1000 	ldrh.w	r1, [lr]
 800f114:	0c12      	lsrs	r2, r2, #16
 800f116:	fb09 1102 	mla	r1, r9, r2, r1
 800f11a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f11e:	4567      	cmp	r7, ip
 800f120:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f124:	d8e6      	bhi.n	800f0f4 <__multiply+0x10c>
 800f126:	9a01      	ldr	r2, [sp, #4]
 800f128:	50a9      	str	r1, [r5, r2]
 800f12a:	3504      	adds	r5, #4
 800f12c:	e79a      	b.n	800f064 <__multiply+0x7c>
 800f12e:	3e01      	subs	r6, #1
 800f130:	e79c      	b.n	800f06c <__multiply+0x84>
 800f132:	bf00      	nop
 800f134:	0804c9bb 	.word	0x0804c9bb
 800f138:	0804c9cc 	.word	0x0804c9cc

0800f13c <__pow5mult>:
 800f13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f140:	4615      	mov	r5, r2
 800f142:	f012 0203 	ands.w	r2, r2, #3
 800f146:	4606      	mov	r6, r0
 800f148:	460f      	mov	r7, r1
 800f14a:	d007      	beq.n	800f15c <__pow5mult+0x20>
 800f14c:	4c25      	ldr	r4, [pc, #148]	; (800f1e4 <__pow5mult+0xa8>)
 800f14e:	3a01      	subs	r2, #1
 800f150:	2300      	movs	r3, #0
 800f152:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f156:	f7ff fe9b 	bl	800ee90 <__multadd>
 800f15a:	4607      	mov	r7, r0
 800f15c:	10ad      	asrs	r5, r5, #2
 800f15e:	d03d      	beq.n	800f1dc <__pow5mult+0xa0>
 800f160:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f162:	b97c      	cbnz	r4, 800f184 <__pow5mult+0x48>
 800f164:	2010      	movs	r0, #16
 800f166:	f7ff fe1d 	bl	800eda4 <malloc>
 800f16a:	4602      	mov	r2, r0
 800f16c:	6270      	str	r0, [r6, #36]	; 0x24
 800f16e:	b928      	cbnz	r0, 800f17c <__pow5mult+0x40>
 800f170:	4b1d      	ldr	r3, [pc, #116]	; (800f1e8 <__pow5mult+0xac>)
 800f172:	481e      	ldr	r0, [pc, #120]	; (800f1ec <__pow5mult+0xb0>)
 800f174:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f178:	f7fe fe1c 	bl	800ddb4 <__assert_func>
 800f17c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f180:	6004      	str	r4, [r0, #0]
 800f182:	60c4      	str	r4, [r0, #12]
 800f184:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f188:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f18c:	b94c      	cbnz	r4, 800f1a2 <__pow5mult+0x66>
 800f18e:	f240 2171 	movw	r1, #625	; 0x271
 800f192:	4630      	mov	r0, r6
 800f194:	f7ff ff12 	bl	800efbc <__i2b>
 800f198:	2300      	movs	r3, #0
 800f19a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f19e:	4604      	mov	r4, r0
 800f1a0:	6003      	str	r3, [r0, #0]
 800f1a2:	f04f 0900 	mov.w	r9, #0
 800f1a6:	07eb      	lsls	r3, r5, #31
 800f1a8:	d50a      	bpl.n	800f1c0 <__pow5mult+0x84>
 800f1aa:	4639      	mov	r1, r7
 800f1ac:	4622      	mov	r2, r4
 800f1ae:	4630      	mov	r0, r6
 800f1b0:	f7ff ff1a 	bl	800efe8 <__multiply>
 800f1b4:	4639      	mov	r1, r7
 800f1b6:	4680      	mov	r8, r0
 800f1b8:	4630      	mov	r0, r6
 800f1ba:	f7ff fe47 	bl	800ee4c <_Bfree>
 800f1be:	4647      	mov	r7, r8
 800f1c0:	106d      	asrs	r5, r5, #1
 800f1c2:	d00b      	beq.n	800f1dc <__pow5mult+0xa0>
 800f1c4:	6820      	ldr	r0, [r4, #0]
 800f1c6:	b938      	cbnz	r0, 800f1d8 <__pow5mult+0x9c>
 800f1c8:	4622      	mov	r2, r4
 800f1ca:	4621      	mov	r1, r4
 800f1cc:	4630      	mov	r0, r6
 800f1ce:	f7ff ff0b 	bl	800efe8 <__multiply>
 800f1d2:	6020      	str	r0, [r4, #0]
 800f1d4:	f8c0 9000 	str.w	r9, [r0]
 800f1d8:	4604      	mov	r4, r0
 800f1da:	e7e4      	b.n	800f1a6 <__pow5mult+0x6a>
 800f1dc:	4638      	mov	r0, r7
 800f1de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1e2:	bf00      	nop
 800f1e4:	0804cb18 	.word	0x0804cb18
 800f1e8:	0804c949 	.word	0x0804c949
 800f1ec:	0804c9cc 	.word	0x0804c9cc

0800f1f0 <__lshift>:
 800f1f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1f4:	460c      	mov	r4, r1
 800f1f6:	6849      	ldr	r1, [r1, #4]
 800f1f8:	6923      	ldr	r3, [r4, #16]
 800f1fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f1fe:	68a3      	ldr	r3, [r4, #8]
 800f200:	4607      	mov	r7, r0
 800f202:	4691      	mov	r9, r2
 800f204:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f208:	f108 0601 	add.w	r6, r8, #1
 800f20c:	42b3      	cmp	r3, r6
 800f20e:	db0b      	blt.n	800f228 <__lshift+0x38>
 800f210:	4638      	mov	r0, r7
 800f212:	f7ff fddb 	bl	800edcc <_Balloc>
 800f216:	4605      	mov	r5, r0
 800f218:	b948      	cbnz	r0, 800f22e <__lshift+0x3e>
 800f21a:	4602      	mov	r2, r0
 800f21c:	4b2a      	ldr	r3, [pc, #168]	; (800f2c8 <__lshift+0xd8>)
 800f21e:	482b      	ldr	r0, [pc, #172]	; (800f2cc <__lshift+0xdc>)
 800f220:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f224:	f7fe fdc6 	bl	800ddb4 <__assert_func>
 800f228:	3101      	adds	r1, #1
 800f22a:	005b      	lsls	r3, r3, #1
 800f22c:	e7ee      	b.n	800f20c <__lshift+0x1c>
 800f22e:	2300      	movs	r3, #0
 800f230:	f100 0114 	add.w	r1, r0, #20
 800f234:	f100 0210 	add.w	r2, r0, #16
 800f238:	4618      	mov	r0, r3
 800f23a:	4553      	cmp	r3, sl
 800f23c:	db37      	blt.n	800f2ae <__lshift+0xbe>
 800f23e:	6920      	ldr	r0, [r4, #16]
 800f240:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f244:	f104 0314 	add.w	r3, r4, #20
 800f248:	f019 091f 	ands.w	r9, r9, #31
 800f24c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f250:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f254:	d02f      	beq.n	800f2b6 <__lshift+0xc6>
 800f256:	f1c9 0e20 	rsb	lr, r9, #32
 800f25a:	468a      	mov	sl, r1
 800f25c:	f04f 0c00 	mov.w	ip, #0
 800f260:	681a      	ldr	r2, [r3, #0]
 800f262:	fa02 f209 	lsl.w	r2, r2, r9
 800f266:	ea42 020c 	orr.w	r2, r2, ip
 800f26a:	f84a 2b04 	str.w	r2, [sl], #4
 800f26e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f272:	4298      	cmp	r0, r3
 800f274:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f278:	d8f2      	bhi.n	800f260 <__lshift+0x70>
 800f27a:	1b03      	subs	r3, r0, r4
 800f27c:	3b15      	subs	r3, #21
 800f27e:	f023 0303 	bic.w	r3, r3, #3
 800f282:	3304      	adds	r3, #4
 800f284:	f104 0215 	add.w	r2, r4, #21
 800f288:	4290      	cmp	r0, r2
 800f28a:	bf38      	it	cc
 800f28c:	2304      	movcc	r3, #4
 800f28e:	f841 c003 	str.w	ip, [r1, r3]
 800f292:	f1bc 0f00 	cmp.w	ip, #0
 800f296:	d001      	beq.n	800f29c <__lshift+0xac>
 800f298:	f108 0602 	add.w	r6, r8, #2
 800f29c:	3e01      	subs	r6, #1
 800f29e:	4638      	mov	r0, r7
 800f2a0:	612e      	str	r6, [r5, #16]
 800f2a2:	4621      	mov	r1, r4
 800f2a4:	f7ff fdd2 	bl	800ee4c <_Bfree>
 800f2a8:	4628      	mov	r0, r5
 800f2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2ae:	f842 0f04 	str.w	r0, [r2, #4]!
 800f2b2:	3301      	adds	r3, #1
 800f2b4:	e7c1      	b.n	800f23a <__lshift+0x4a>
 800f2b6:	3904      	subs	r1, #4
 800f2b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2bc:	f841 2f04 	str.w	r2, [r1, #4]!
 800f2c0:	4298      	cmp	r0, r3
 800f2c2:	d8f9      	bhi.n	800f2b8 <__lshift+0xc8>
 800f2c4:	e7ea      	b.n	800f29c <__lshift+0xac>
 800f2c6:	bf00      	nop
 800f2c8:	0804c9bb 	.word	0x0804c9bb
 800f2cc:	0804c9cc 	.word	0x0804c9cc

0800f2d0 <__mcmp>:
 800f2d0:	b530      	push	{r4, r5, lr}
 800f2d2:	6902      	ldr	r2, [r0, #16]
 800f2d4:	690c      	ldr	r4, [r1, #16]
 800f2d6:	1b12      	subs	r2, r2, r4
 800f2d8:	d10e      	bne.n	800f2f8 <__mcmp+0x28>
 800f2da:	f100 0314 	add.w	r3, r0, #20
 800f2de:	3114      	adds	r1, #20
 800f2e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f2e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f2e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f2ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f2f0:	42a5      	cmp	r5, r4
 800f2f2:	d003      	beq.n	800f2fc <__mcmp+0x2c>
 800f2f4:	d305      	bcc.n	800f302 <__mcmp+0x32>
 800f2f6:	2201      	movs	r2, #1
 800f2f8:	4610      	mov	r0, r2
 800f2fa:	bd30      	pop	{r4, r5, pc}
 800f2fc:	4283      	cmp	r3, r0
 800f2fe:	d3f3      	bcc.n	800f2e8 <__mcmp+0x18>
 800f300:	e7fa      	b.n	800f2f8 <__mcmp+0x28>
 800f302:	f04f 32ff 	mov.w	r2, #4294967295
 800f306:	e7f7      	b.n	800f2f8 <__mcmp+0x28>

0800f308 <__mdiff>:
 800f308:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f30c:	460c      	mov	r4, r1
 800f30e:	4606      	mov	r6, r0
 800f310:	4611      	mov	r1, r2
 800f312:	4620      	mov	r0, r4
 800f314:	4690      	mov	r8, r2
 800f316:	f7ff ffdb 	bl	800f2d0 <__mcmp>
 800f31a:	1e05      	subs	r5, r0, #0
 800f31c:	d110      	bne.n	800f340 <__mdiff+0x38>
 800f31e:	4629      	mov	r1, r5
 800f320:	4630      	mov	r0, r6
 800f322:	f7ff fd53 	bl	800edcc <_Balloc>
 800f326:	b930      	cbnz	r0, 800f336 <__mdiff+0x2e>
 800f328:	4b3a      	ldr	r3, [pc, #232]	; (800f414 <__mdiff+0x10c>)
 800f32a:	4602      	mov	r2, r0
 800f32c:	f240 2132 	movw	r1, #562	; 0x232
 800f330:	4839      	ldr	r0, [pc, #228]	; (800f418 <__mdiff+0x110>)
 800f332:	f7fe fd3f 	bl	800ddb4 <__assert_func>
 800f336:	2301      	movs	r3, #1
 800f338:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f33c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f340:	bfa4      	itt	ge
 800f342:	4643      	movge	r3, r8
 800f344:	46a0      	movge	r8, r4
 800f346:	4630      	mov	r0, r6
 800f348:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f34c:	bfa6      	itte	ge
 800f34e:	461c      	movge	r4, r3
 800f350:	2500      	movge	r5, #0
 800f352:	2501      	movlt	r5, #1
 800f354:	f7ff fd3a 	bl	800edcc <_Balloc>
 800f358:	b920      	cbnz	r0, 800f364 <__mdiff+0x5c>
 800f35a:	4b2e      	ldr	r3, [pc, #184]	; (800f414 <__mdiff+0x10c>)
 800f35c:	4602      	mov	r2, r0
 800f35e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f362:	e7e5      	b.n	800f330 <__mdiff+0x28>
 800f364:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f368:	6926      	ldr	r6, [r4, #16]
 800f36a:	60c5      	str	r5, [r0, #12]
 800f36c:	f104 0914 	add.w	r9, r4, #20
 800f370:	f108 0514 	add.w	r5, r8, #20
 800f374:	f100 0e14 	add.w	lr, r0, #20
 800f378:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f37c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f380:	f108 0210 	add.w	r2, r8, #16
 800f384:	46f2      	mov	sl, lr
 800f386:	2100      	movs	r1, #0
 800f388:	f859 3b04 	ldr.w	r3, [r9], #4
 800f38c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f390:	fa1f f883 	uxth.w	r8, r3
 800f394:	fa11 f18b 	uxtah	r1, r1, fp
 800f398:	0c1b      	lsrs	r3, r3, #16
 800f39a:	eba1 0808 	sub.w	r8, r1, r8
 800f39e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f3a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f3a6:	fa1f f888 	uxth.w	r8, r8
 800f3aa:	1419      	asrs	r1, r3, #16
 800f3ac:	454e      	cmp	r6, r9
 800f3ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f3b2:	f84a 3b04 	str.w	r3, [sl], #4
 800f3b6:	d8e7      	bhi.n	800f388 <__mdiff+0x80>
 800f3b8:	1b33      	subs	r3, r6, r4
 800f3ba:	3b15      	subs	r3, #21
 800f3bc:	f023 0303 	bic.w	r3, r3, #3
 800f3c0:	3304      	adds	r3, #4
 800f3c2:	3415      	adds	r4, #21
 800f3c4:	42a6      	cmp	r6, r4
 800f3c6:	bf38      	it	cc
 800f3c8:	2304      	movcc	r3, #4
 800f3ca:	441d      	add	r5, r3
 800f3cc:	4473      	add	r3, lr
 800f3ce:	469e      	mov	lr, r3
 800f3d0:	462e      	mov	r6, r5
 800f3d2:	4566      	cmp	r6, ip
 800f3d4:	d30e      	bcc.n	800f3f4 <__mdiff+0xec>
 800f3d6:	f10c 0203 	add.w	r2, ip, #3
 800f3da:	1b52      	subs	r2, r2, r5
 800f3dc:	f022 0203 	bic.w	r2, r2, #3
 800f3e0:	3d03      	subs	r5, #3
 800f3e2:	45ac      	cmp	ip, r5
 800f3e4:	bf38      	it	cc
 800f3e6:	2200      	movcc	r2, #0
 800f3e8:	441a      	add	r2, r3
 800f3ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f3ee:	b17b      	cbz	r3, 800f410 <__mdiff+0x108>
 800f3f0:	6107      	str	r7, [r0, #16]
 800f3f2:	e7a3      	b.n	800f33c <__mdiff+0x34>
 800f3f4:	f856 8b04 	ldr.w	r8, [r6], #4
 800f3f8:	fa11 f288 	uxtah	r2, r1, r8
 800f3fc:	1414      	asrs	r4, r2, #16
 800f3fe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f402:	b292      	uxth	r2, r2
 800f404:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f408:	f84e 2b04 	str.w	r2, [lr], #4
 800f40c:	1421      	asrs	r1, r4, #16
 800f40e:	e7e0      	b.n	800f3d2 <__mdiff+0xca>
 800f410:	3f01      	subs	r7, #1
 800f412:	e7ea      	b.n	800f3ea <__mdiff+0xe2>
 800f414:	0804c9bb 	.word	0x0804c9bb
 800f418:	0804c9cc 	.word	0x0804c9cc

0800f41c <__d2b>:
 800f41c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f420:	4689      	mov	r9, r1
 800f422:	2101      	movs	r1, #1
 800f424:	ec57 6b10 	vmov	r6, r7, d0
 800f428:	4690      	mov	r8, r2
 800f42a:	f7ff fccf 	bl	800edcc <_Balloc>
 800f42e:	4604      	mov	r4, r0
 800f430:	b930      	cbnz	r0, 800f440 <__d2b+0x24>
 800f432:	4602      	mov	r2, r0
 800f434:	4b25      	ldr	r3, [pc, #148]	; (800f4cc <__d2b+0xb0>)
 800f436:	4826      	ldr	r0, [pc, #152]	; (800f4d0 <__d2b+0xb4>)
 800f438:	f240 310a 	movw	r1, #778	; 0x30a
 800f43c:	f7fe fcba 	bl	800ddb4 <__assert_func>
 800f440:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f444:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f448:	bb35      	cbnz	r5, 800f498 <__d2b+0x7c>
 800f44a:	2e00      	cmp	r6, #0
 800f44c:	9301      	str	r3, [sp, #4]
 800f44e:	d028      	beq.n	800f4a2 <__d2b+0x86>
 800f450:	4668      	mov	r0, sp
 800f452:	9600      	str	r6, [sp, #0]
 800f454:	f7ff fd82 	bl	800ef5c <__lo0bits>
 800f458:	9900      	ldr	r1, [sp, #0]
 800f45a:	b300      	cbz	r0, 800f49e <__d2b+0x82>
 800f45c:	9a01      	ldr	r2, [sp, #4]
 800f45e:	f1c0 0320 	rsb	r3, r0, #32
 800f462:	fa02 f303 	lsl.w	r3, r2, r3
 800f466:	430b      	orrs	r3, r1
 800f468:	40c2      	lsrs	r2, r0
 800f46a:	6163      	str	r3, [r4, #20]
 800f46c:	9201      	str	r2, [sp, #4]
 800f46e:	9b01      	ldr	r3, [sp, #4]
 800f470:	61a3      	str	r3, [r4, #24]
 800f472:	2b00      	cmp	r3, #0
 800f474:	bf14      	ite	ne
 800f476:	2202      	movne	r2, #2
 800f478:	2201      	moveq	r2, #1
 800f47a:	6122      	str	r2, [r4, #16]
 800f47c:	b1d5      	cbz	r5, 800f4b4 <__d2b+0x98>
 800f47e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f482:	4405      	add	r5, r0
 800f484:	f8c9 5000 	str.w	r5, [r9]
 800f488:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f48c:	f8c8 0000 	str.w	r0, [r8]
 800f490:	4620      	mov	r0, r4
 800f492:	b003      	add	sp, #12
 800f494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f498:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f49c:	e7d5      	b.n	800f44a <__d2b+0x2e>
 800f49e:	6161      	str	r1, [r4, #20]
 800f4a0:	e7e5      	b.n	800f46e <__d2b+0x52>
 800f4a2:	a801      	add	r0, sp, #4
 800f4a4:	f7ff fd5a 	bl	800ef5c <__lo0bits>
 800f4a8:	9b01      	ldr	r3, [sp, #4]
 800f4aa:	6163      	str	r3, [r4, #20]
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	6122      	str	r2, [r4, #16]
 800f4b0:	3020      	adds	r0, #32
 800f4b2:	e7e3      	b.n	800f47c <__d2b+0x60>
 800f4b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f4b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f4bc:	f8c9 0000 	str.w	r0, [r9]
 800f4c0:	6918      	ldr	r0, [r3, #16]
 800f4c2:	f7ff fd2b 	bl	800ef1c <__hi0bits>
 800f4c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f4ca:	e7df      	b.n	800f48c <__d2b+0x70>
 800f4cc:	0804c9bb 	.word	0x0804c9bb
 800f4d0:	0804c9cc 	.word	0x0804c9cc

0800f4d4 <_calloc_r>:
 800f4d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f4d6:	fba1 2402 	umull	r2, r4, r1, r2
 800f4da:	b94c      	cbnz	r4, 800f4f0 <_calloc_r+0x1c>
 800f4dc:	4611      	mov	r1, r2
 800f4de:	9201      	str	r2, [sp, #4]
 800f4e0:	f7fd fda2 	bl	800d028 <_malloc_r>
 800f4e4:	9a01      	ldr	r2, [sp, #4]
 800f4e6:	4605      	mov	r5, r0
 800f4e8:	b930      	cbnz	r0, 800f4f8 <_calloc_r+0x24>
 800f4ea:	4628      	mov	r0, r5
 800f4ec:	b003      	add	sp, #12
 800f4ee:	bd30      	pop	{r4, r5, pc}
 800f4f0:	220c      	movs	r2, #12
 800f4f2:	6002      	str	r2, [r0, #0]
 800f4f4:	2500      	movs	r5, #0
 800f4f6:	e7f8      	b.n	800f4ea <_calloc_r+0x16>
 800f4f8:	4621      	mov	r1, r4
 800f4fa:	f7fd fd6c 	bl	800cfd6 <memset>
 800f4fe:	e7f4      	b.n	800f4ea <_calloc_r+0x16>

0800f500 <_free_r>:
 800f500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f502:	2900      	cmp	r1, #0
 800f504:	d044      	beq.n	800f590 <_free_r+0x90>
 800f506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f50a:	9001      	str	r0, [sp, #4]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	f1a1 0404 	sub.w	r4, r1, #4
 800f512:	bfb8      	it	lt
 800f514:	18e4      	addlt	r4, r4, r3
 800f516:	f7ff fc4d 	bl	800edb4 <__malloc_lock>
 800f51a:	4a1e      	ldr	r2, [pc, #120]	; (800f594 <_free_r+0x94>)
 800f51c:	9801      	ldr	r0, [sp, #4]
 800f51e:	6813      	ldr	r3, [r2, #0]
 800f520:	b933      	cbnz	r3, 800f530 <_free_r+0x30>
 800f522:	6063      	str	r3, [r4, #4]
 800f524:	6014      	str	r4, [r2, #0]
 800f526:	b003      	add	sp, #12
 800f528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f52c:	f7ff bc48 	b.w	800edc0 <__malloc_unlock>
 800f530:	42a3      	cmp	r3, r4
 800f532:	d908      	bls.n	800f546 <_free_r+0x46>
 800f534:	6825      	ldr	r5, [r4, #0]
 800f536:	1961      	adds	r1, r4, r5
 800f538:	428b      	cmp	r3, r1
 800f53a:	bf01      	itttt	eq
 800f53c:	6819      	ldreq	r1, [r3, #0]
 800f53e:	685b      	ldreq	r3, [r3, #4]
 800f540:	1949      	addeq	r1, r1, r5
 800f542:	6021      	streq	r1, [r4, #0]
 800f544:	e7ed      	b.n	800f522 <_free_r+0x22>
 800f546:	461a      	mov	r2, r3
 800f548:	685b      	ldr	r3, [r3, #4]
 800f54a:	b10b      	cbz	r3, 800f550 <_free_r+0x50>
 800f54c:	42a3      	cmp	r3, r4
 800f54e:	d9fa      	bls.n	800f546 <_free_r+0x46>
 800f550:	6811      	ldr	r1, [r2, #0]
 800f552:	1855      	adds	r5, r2, r1
 800f554:	42a5      	cmp	r5, r4
 800f556:	d10b      	bne.n	800f570 <_free_r+0x70>
 800f558:	6824      	ldr	r4, [r4, #0]
 800f55a:	4421      	add	r1, r4
 800f55c:	1854      	adds	r4, r2, r1
 800f55e:	42a3      	cmp	r3, r4
 800f560:	6011      	str	r1, [r2, #0]
 800f562:	d1e0      	bne.n	800f526 <_free_r+0x26>
 800f564:	681c      	ldr	r4, [r3, #0]
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	6053      	str	r3, [r2, #4]
 800f56a:	4421      	add	r1, r4
 800f56c:	6011      	str	r1, [r2, #0]
 800f56e:	e7da      	b.n	800f526 <_free_r+0x26>
 800f570:	d902      	bls.n	800f578 <_free_r+0x78>
 800f572:	230c      	movs	r3, #12
 800f574:	6003      	str	r3, [r0, #0]
 800f576:	e7d6      	b.n	800f526 <_free_r+0x26>
 800f578:	6825      	ldr	r5, [r4, #0]
 800f57a:	1961      	adds	r1, r4, r5
 800f57c:	428b      	cmp	r3, r1
 800f57e:	bf04      	itt	eq
 800f580:	6819      	ldreq	r1, [r3, #0]
 800f582:	685b      	ldreq	r3, [r3, #4]
 800f584:	6063      	str	r3, [r4, #4]
 800f586:	bf04      	itt	eq
 800f588:	1949      	addeq	r1, r1, r5
 800f58a:	6021      	streq	r1, [r4, #0]
 800f58c:	6054      	str	r4, [r2, #4]
 800f58e:	e7ca      	b.n	800f526 <_free_r+0x26>
 800f590:	b003      	add	sp, #12
 800f592:	bd30      	pop	{r4, r5, pc}
 800f594:	20014010 	.word	0x20014010

0800f598 <__ssputs_r>:
 800f598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f59c:	688e      	ldr	r6, [r1, #8]
 800f59e:	429e      	cmp	r6, r3
 800f5a0:	4682      	mov	sl, r0
 800f5a2:	460c      	mov	r4, r1
 800f5a4:	4690      	mov	r8, r2
 800f5a6:	461f      	mov	r7, r3
 800f5a8:	d838      	bhi.n	800f61c <__ssputs_r+0x84>
 800f5aa:	898a      	ldrh	r2, [r1, #12]
 800f5ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f5b0:	d032      	beq.n	800f618 <__ssputs_r+0x80>
 800f5b2:	6825      	ldr	r5, [r4, #0]
 800f5b4:	6909      	ldr	r1, [r1, #16]
 800f5b6:	eba5 0901 	sub.w	r9, r5, r1
 800f5ba:	6965      	ldr	r5, [r4, #20]
 800f5bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f5c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f5c4:	3301      	adds	r3, #1
 800f5c6:	444b      	add	r3, r9
 800f5c8:	106d      	asrs	r5, r5, #1
 800f5ca:	429d      	cmp	r5, r3
 800f5cc:	bf38      	it	cc
 800f5ce:	461d      	movcc	r5, r3
 800f5d0:	0553      	lsls	r3, r2, #21
 800f5d2:	d531      	bpl.n	800f638 <__ssputs_r+0xa0>
 800f5d4:	4629      	mov	r1, r5
 800f5d6:	f7fd fd27 	bl	800d028 <_malloc_r>
 800f5da:	4606      	mov	r6, r0
 800f5dc:	b950      	cbnz	r0, 800f5f4 <__ssputs_r+0x5c>
 800f5de:	230c      	movs	r3, #12
 800f5e0:	f8ca 3000 	str.w	r3, [sl]
 800f5e4:	89a3      	ldrh	r3, [r4, #12]
 800f5e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5ea:	81a3      	strh	r3, [r4, #12]
 800f5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f5f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5f4:	6921      	ldr	r1, [r4, #16]
 800f5f6:	464a      	mov	r2, r9
 800f5f8:	f7fd fcdf 	bl	800cfba <memcpy>
 800f5fc:	89a3      	ldrh	r3, [r4, #12]
 800f5fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f606:	81a3      	strh	r3, [r4, #12]
 800f608:	6126      	str	r6, [r4, #16]
 800f60a:	6165      	str	r5, [r4, #20]
 800f60c:	444e      	add	r6, r9
 800f60e:	eba5 0509 	sub.w	r5, r5, r9
 800f612:	6026      	str	r6, [r4, #0]
 800f614:	60a5      	str	r5, [r4, #8]
 800f616:	463e      	mov	r6, r7
 800f618:	42be      	cmp	r6, r7
 800f61a:	d900      	bls.n	800f61e <__ssputs_r+0x86>
 800f61c:	463e      	mov	r6, r7
 800f61e:	6820      	ldr	r0, [r4, #0]
 800f620:	4632      	mov	r2, r6
 800f622:	4641      	mov	r1, r8
 800f624:	f000 fabc 	bl	800fba0 <memmove>
 800f628:	68a3      	ldr	r3, [r4, #8]
 800f62a:	1b9b      	subs	r3, r3, r6
 800f62c:	60a3      	str	r3, [r4, #8]
 800f62e:	6823      	ldr	r3, [r4, #0]
 800f630:	4433      	add	r3, r6
 800f632:	6023      	str	r3, [r4, #0]
 800f634:	2000      	movs	r0, #0
 800f636:	e7db      	b.n	800f5f0 <__ssputs_r+0x58>
 800f638:	462a      	mov	r2, r5
 800f63a:	f000 facb 	bl	800fbd4 <_realloc_r>
 800f63e:	4606      	mov	r6, r0
 800f640:	2800      	cmp	r0, #0
 800f642:	d1e1      	bne.n	800f608 <__ssputs_r+0x70>
 800f644:	6921      	ldr	r1, [r4, #16]
 800f646:	4650      	mov	r0, sl
 800f648:	f7ff ff5a 	bl	800f500 <_free_r>
 800f64c:	e7c7      	b.n	800f5de <__ssputs_r+0x46>
	...

0800f650 <_svfiprintf_r>:
 800f650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f654:	4698      	mov	r8, r3
 800f656:	898b      	ldrh	r3, [r1, #12]
 800f658:	061b      	lsls	r3, r3, #24
 800f65a:	b09d      	sub	sp, #116	; 0x74
 800f65c:	4607      	mov	r7, r0
 800f65e:	460d      	mov	r5, r1
 800f660:	4614      	mov	r4, r2
 800f662:	d50e      	bpl.n	800f682 <_svfiprintf_r+0x32>
 800f664:	690b      	ldr	r3, [r1, #16]
 800f666:	b963      	cbnz	r3, 800f682 <_svfiprintf_r+0x32>
 800f668:	2140      	movs	r1, #64	; 0x40
 800f66a:	f7fd fcdd 	bl	800d028 <_malloc_r>
 800f66e:	6028      	str	r0, [r5, #0]
 800f670:	6128      	str	r0, [r5, #16]
 800f672:	b920      	cbnz	r0, 800f67e <_svfiprintf_r+0x2e>
 800f674:	230c      	movs	r3, #12
 800f676:	603b      	str	r3, [r7, #0]
 800f678:	f04f 30ff 	mov.w	r0, #4294967295
 800f67c:	e0d1      	b.n	800f822 <_svfiprintf_r+0x1d2>
 800f67e:	2340      	movs	r3, #64	; 0x40
 800f680:	616b      	str	r3, [r5, #20]
 800f682:	2300      	movs	r3, #0
 800f684:	9309      	str	r3, [sp, #36]	; 0x24
 800f686:	2320      	movs	r3, #32
 800f688:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f68c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f690:	2330      	movs	r3, #48	; 0x30
 800f692:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f83c <_svfiprintf_r+0x1ec>
 800f696:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f69a:	f04f 0901 	mov.w	r9, #1
 800f69e:	4623      	mov	r3, r4
 800f6a0:	469a      	mov	sl, r3
 800f6a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6a6:	b10a      	cbz	r2, 800f6ac <_svfiprintf_r+0x5c>
 800f6a8:	2a25      	cmp	r2, #37	; 0x25
 800f6aa:	d1f9      	bne.n	800f6a0 <_svfiprintf_r+0x50>
 800f6ac:	ebba 0b04 	subs.w	fp, sl, r4
 800f6b0:	d00b      	beq.n	800f6ca <_svfiprintf_r+0x7a>
 800f6b2:	465b      	mov	r3, fp
 800f6b4:	4622      	mov	r2, r4
 800f6b6:	4629      	mov	r1, r5
 800f6b8:	4638      	mov	r0, r7
 800f6ba:	f7ff ff6d 	bl	800f598 <__ssputs_r>
 800f6be:	3001      	adds	r0, #1
 800f6c0:	f000 80aa 	beq.w	800f818 <_svfiprintf_r+0x1c8>
 800f6c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6c6:	445a      	add	r2, fp
 800f6c8:	9209      	str	r2, [sp, #36]	; 0x24
 800f6ca:	f89a 3000 	ldrb.w	r3, [sl]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	f000 80a2 	beq.w	800f818 <_svfiprintf_r+0x1c8>
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	f04f 32ff 	mov.w	r2, #4294967295
 800f6da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6de:	f10a 0a01 	add.w	sl, sl, #1
 800f6e2:	9304      	str	r3, [sp, #16]
 800f6e4:	9307      	str	r3, [sp, #28]
 800f6e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f6ea:	931a      	str	r3, [sp, #104]	; 0x68
 800f6ec:	4654      	mov	r4, sl
 800f6ee:	2205      	movs	r2, #5
 800f6f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6f4:	4851      	ldr	r0, [pc, #324]	; (800f83c <_svfiprintf_r+0x1ec>)
 800f6f6:	f7f6 fddb 	bl	80062b0 <memchr>
 800f6fa:	9a04      	ldr	r2, [sp, #16]
 800f6fc:	b9d8      	cbnz	r0, 800f736 <_svfiprintf_r+0xe6>
 800f6fe:	06d0      	lsls	r0, r2, #27
 800f700:	bf44      	itt	mi
 800f702:	2320      	movmi	r3, #32
 800f704:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f708:	0711      	lsls	r1, r2, #28
 800f70a:	bf44      	itt	mi
 800f70c:	232b      	movmi	r3, #43	; 0x2b
 800f70e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f712:	f89a 3000 	ldrb.w	r3, [sl]
 800f716:	2b2a      	cmp	r3, #42	; 0x2a
 800f718:	d015      	beq.n	800f746 <_svfiprintf_r+0xf6>
 800f71a:	9a07      	ldr	r2, [sp, #28]
 800f71c:	4654      	mov	r4, sl
 800f71e:	2000      	movs	r0, #0
 800f720:	f04f 0c0a 	mov.w	ip, #10
 800f724:	4621      	mov	r1, r4
 800f726:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f72a:	3b30      	subs	r3, #48	; 0x30
 800f72c:	2b09      	cmp	r3, #9
 800f72e:	d94e      	bls.n	800f7ce <_svfiprintf_r+0x17e>
 800f730:	b1b0      	cbz	r0, 800f760 <_svfiprintf_r+0x110>
 800f732:	9207      	str	r2, [sp, #28]
 800f734:	e014      	b.n	800f760 <_svfiprintf_r+0x110>
 800f736:	eba0 0308 	sub.w	r3, r0, r8
 800f73a:	fa09 f303 	lsl.w	r3, r9, r3
 800f73e:	4313      	orrs	r3, r2
 800f740:	9304      	str	r3, [sp, #16]
 800f742:	46a2      	mov	sl, r4
 800f744:	e7d2      	b.n	800f6ec <_svfiprintf_r+0x9c>
 800f746:	9b03      	ldr	r3, [sp, #12]
 800f748:	1d19      	adds	r1, r3, #4
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	9103      	str	r1, [sp, #12]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	bfbb      	ittet	lt
 800f752:	425b      	neglt	r3, r3
 800f754:	f042 0202 	orrlt.w	r2, r2, #2
 800f758:	9307      	strge	r3, [sp, #28]
 800f75a:	9307      	strlt	r3, [sp, #28]
 800f75c:	bfb8      	it	lt
 800f75e:	9204      	strlt	r2, [sp, #16]
 800f760:	7823      	ldrb	r3, [r4, #0]
 800f762:	2b2e      	cmp	r3, #46	; 0x2e
 800f764:	d10c      	bne.n	800f780 <_svfiprintf_r+0x130>
 800f766:	7863      	ldrb	r3, [r4, #1]
 800f768:	2b2a      	cmp	r3, #42	; 0x2a
 800f76a:	d135      	bne.n	800f7d8 <_svfiprintf_r+0x188>
 800f76c:	9b03      	ldr	r3, [sp, #12]
 800f76e:	1d1a      	adds	r2, r3, #4
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	9203      	str	r2, [sp, #12]
 800f774:	2b00      	cmp	r3, #0
 800f776:	bfb8      	it	lt
 800f778:	f04f 33ff 	movlt.w	r3, #4294967295
 800f77c:	3402      	adds	r4, #2
 800f77e:	9305      	str	r3, [sp, #20]
 800f780:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f84c <_svfiprintf_r+0x1fc>
 800f784:	7821      	ldrb	r1, [r4, #0]
 800f786:	2203      	movs	r2, #3
 800f788:	4650      	mov	r0, sl
 800f78a:	f7f6 fd91 	bl	80062b0 <memchr>
 800f78e:	b140      	cbz	r0, 800f7a2 <_svfiprintf_r+0x152>
 800f790:	2340      	movs	r3, #64	; 0x40
 800f792:	eba0 000a 	sub.w	r0, r0, sl
 800f796:	fa03 f000 	lsl.w	r0, r3, r0
 800f79a:	9b04      	ldr	r3, [sp, #16]
 800f79c:	4303      	orrs	r3, r0
 800f79e:	3401      	adds	r4, #1
 800f7a0:	9304      	str	r3, [sp, #16]
 800f7a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7a6:	4826      	ldr	r0, [pc, #152]	; (800f840 <_svfiprintf_r+0x1f0>)
 800f7a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f7ac:	2206      	movs	r2, #6
 800f7ae:	f7f6 fd7f 	bl	80062b0 <memchr>
 800f7b2:	2800      	cmp	r0, #0
 800f7b4:	d038      	beq.n	800f828 <_svfiprintf_r+0x1d8>
 800f7b6:	4b23      	ldr	r3, [pc, #140]	; (800f844 <_svfiprintf_r+0x1f4>)
 800f7b8:	bb1b      	cbnz	r3, 800f802 <_svfiprintf_r+0x1b2>
 800f7ba:	9b03      	ldr	r3, [sp, #12]
 800f7bc:	3307      	adds	r3, #7
 800f7be:	f023 0307 	bic.w	r3, r3, #7
 800f7c2:	3308      	adds	r3, #8
 800f7c4:	9303      	str	r3, [sp, #12]
 800f7c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7c8:	4433      	add	r3, r6
 800f7ca:	9309      	str	r3, [sp, #36]	; 0x24
 800f7cc:	e767      	b.n	800f69e <_svfiprintf_r+0x4e>
 800f7ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800f7d2:	460c      	mov	r4, r1
 800f7d4:	2001      	movs	r0, #1
 800f7d6:	e7a5      	b.n	800f724 <_svfiprintf_r+0xd4>
 800f7d8:	2300      	movs	r3, #0
 800f7da:	3401      	adds	r4, #1
 800f7dc:	9305      	str	r3, [sp, #20]
 800f7de:	4619      	mov	r1, r3
 800f7e0:	f04f 0c0a 	mov.w	ip, #10
 800f7e4:	4620      	mov	r0, r4
 800f7e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7ea:	3a30      	subs	r2, #48	; 0x30
 800f7ec:	2a09      	cmp	r2, #9
 800f7ee:	d903      	bls.n	800f7f8 <_svfiprintf_r+0x1a8>
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d0c5      	beq.n	800f780 <_svfiprintf_r+0x130>
 800f7f4:	9105      	str	r1, [sp, #20]
 800f7f6:	e7c3      	b.n	800f780 <_svfiprintf_r+0x130>
 800f7f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f7fc:	4604      	mov	r4, r0
 800f7fe:	2301      	movs	r3, #1
 800f800:	e7f0      	b.n	800f7e4 <_svfiprintf_r+0x194>
 800f802:	ab03      	add	r3, sp, #12
 800f804:	9300      	str	r3, [sp, #0]
 800f806:	462a      	mov	r2, r5
 800f808:	4b0f      	ldr	r3, [pc, #60]	; (800f848 <_svfiprintf_r+0x1f8>)
 800f80a:	a904      	add	r1, sp, #16
 800f80c:	4638      	mov	r0, r7
 800f80e:	f7fd fd1f 	bl	800d250 <_printf_float>
 800f812:	1c42      	adds	r2, r0, #1
 800f814:	4606      	mov	r6, r0
 800f816:	d1d6      	bne.n	800f7c6 <_svfiprintf_r+0x176>
 800f818:	89ab      	ldrh	r3, [r5, #12]
 800f81a:	065b      	lsls	r3, r3, #25
 800f81c:	f53f af2c 	bmi.w	800f678 <_svfiprintf_r+0x28>
 800f820:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f822:	b01d      	add	sp, #116	; 0x74
 800f824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f828:	ab03      	add	r3, sp, #12
 800f82a:	9300      	str	r3, [sp, #0]
 800f82c:	462a      	mov	r2, r5
 800f82e:	4b06      	ldr	r3, [pc, #24]	; (800f848 <_svfiprintf_r+0x1f8>)
 800f830:	a904      	add	r1, sp, #16
 800f832:	4638      	mov	r0, r7
 800f834:	f7fd ffb0 	bl	800d798 <_printf_i>
 800f838:	e7eb      	b.n	800f812 <_svfiprintf_r+0x1c2>
 800f83a:	bf00      	nop
 800f83c:	0804cb24 	.word	0x0804cb24
 800f840:	0804cb2e 	.word	0x0804cb2e
 800f844:	0800d251 	.word	0x0800d251
 800f848:	0800f599 	.word	0x0800f599
 800f84c:	0804cb2a 	.word	0x0804cb2a

0800f850 <__sfputc_r>:
 800f850:	6893      	ldr	r3, [r2, #8]
 800f852:	3b01      	subs	r3, #1
 800f854:	2b00      	cmp	r3, #0
 800f856:	b410      	push	{r4}
 800f858:	6093      	str	r3, [r2, #8]
 800f85a:	da08      	bge.n	800f86e <__sfputc_r+0x1e>
 800f85c:	6994      	ldr	r4, [r2, #24]
 800f85e:	42a3      	cmp	r3, r4
 800f860:	db01      	blt.n	800f866 <__sfputc_r+0x16>
 800f862:	290a      	cmp	r1, #10
 800f864:	d103      	bne.n	800f86e <__sfputc_r+0x1e>
 800f866:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f86a:	f7fe b9d1 	b.w	800dc10 <__swbuf_r>
 800f86e:	6813      	ldr	r3, [r2, #0]
 800f870:	1c58      	adds	r0, r3, #1
 800f872:	6010      	str	r0, [r2, #0]
 800f874:	7019      	strb	r1, [r3, #0]
 800f876:	4608      	mov	r0, r1
 800f878:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f87c:	4770      	bx	lr

0800f87e <__sfputs_r>:
 800f87e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f880:	4606      	mov	r6, r0
 800f882:	460f      	mov	r7, r1
 800f884:	4614      	mov	r4, r2
 800f886:	18d5      	adds	r5, r2, r3
 800f888:	42ac      	cmp	r4, r5
 800f88a:	d101      	bne.n	800f890 <__sfputs_r+0x12>
 800f88c:	2000      	movs	r0, #0
 800f88e:	e007      	b.n	800f8a0 <__sfputs_r+0x22>
 800f890:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f894:	463a      	mov	r2, r7
 800f896:	4630      	mov	r0, r6
 800f898:	f7ff ffda 	bl	800f850 <__sfputc_r>
 800f89c:	1c43      	adds	r3, r0, #1
 800f89e:	d1f3      	bne.n	800f888 <__sfputs_r+0xa>
 800f8a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f8a4 <_vfiprintf_r>:
 800f8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8a8:	460d      	mov	r5, r1
 800f8aa:	b09d      	sub	sp, #116	; 0x74
 800f8ac:	4614      	mov	r4, r2
 800f8ae:	4698      	mov	r8, r3
 800f8b0:	4606      	mov	r6, r0
 800f8b2:	b118      	cbz	r0, 800f8bc <_vfiprintf_r+0x18>
 800f8b4:	6983      	ldr	r3, [r0, #24]
 800f8b6:	b90b      	cbnz	r3, 800f8bc <_vfiprintf_r+0x18>
 800f8b8:	f7fd faaa 	bl	800ce10 <__sinit>
 800f8bc:	4b89      	ldr	r3, [pc, #548]	; (800fae4 <_vfiprintf_r+0x240>)
 800f8be:	429d      	cmp	r5, r3
 800f8c0:	d11b      	bne.n	800f8fa <_vfiprintf_r+0x56>
 800f8c2:	6875      	ldr	r5, [r6, #4]
 800f8c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f8c6:	07d9      	lsls	r1, r3, #31
 800f8c8:	d405      	bmi.n	800f8d6 <_vfiprintf_r+0x32>
 800f8ca:	89ab      	ldrh	r3, [r5, #12]
 800f8cc:	059a      	lsls	r2, r3, #22
 800f8ce:	d402      	bmi.n	800f8d6 <_vfiprintf_r+0x32>
 800f8d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f8d2:	f7fd fb60 	bl	800cf96 <__retarget_lock_acquire_recursive>
 800f8d6:	89ab      	ldrh	r3, [r5, #12]
 800f8d8:	071b      	lsls	r3, r3, #28
 800f8da:	d501      	bpl.n	800f8e0 <_vfiprintf_r+0x3c>
 800f8dc:	692b      	ldr	r3, [r5, #16]
 800f8de:	b9eb      	cbnz	r3, 800f91c <_vfiprintf_r+0x78>
 800f8e0:	4629      	mov	r1, r5
 800f8e2:	4630      	mov	r0, r6
 800f8e4:	f7fe f9f8 	bl	800dcd8 <__swsetup_r>
 800f8e8:	b1c0      	cbz	r0, 800f91c <_vfiprintf_r+0x78>
 800f8ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f8ec:	07dc      	lsls	r4, r3, #31
 800f8ee:	d50e      	bpl.n	800f90e <_vfiprintf_r+0x6a>
 800f8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f8f4:	b01d      	add	sp, #116	; 0x74
 800f8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8fa:	4b7b      	ldr	r3, [pc, #492]	; (800fae8 <_vfiprintf_r+0x244>)
 800f8fc:	429d      	cmp	r5, r3
 800f8fe:	d101      	bne.n	800f904 <_vfiprintf_r+0x60>
 800f900:	68b5      	ldr	r5, [r6, #8]
 800f902:	e7df      	b.n	800f8c4 <_vfiprintf_r+0x20>
 800f904:	4b79      	ldr	r3, [pc, #484]	; (800faec <_vfiprintf_r+0x248>)
 800f906:	429d      	cmp	r5, r3
 800f908:	bf08      	it	eq
 800f90a:	68f5      	ldreq	r5, [r6, #12]
 800f90c:	e7da      	b.n	800f8c4 <_vfiprintf_r+0x20>
 800f90e:	89ab      	ldrh	r3, [r5, #12]
 800f910:	0598      	lsls	r0, r3, #22
 800f912:	d4ed      	bmi.n	800f8f0 <_vfiprintf_r+0x4c>
 800f914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f916:	f7fd fb3f 	bl	800cf98 <__retarget_lock_release_recursive>
 800f91a:	e7e9      	b.n	800f8f0 <_vfiprintf_r+0x4c>
 800f91c:	2300      	movs	r3, #0
 800f91e:	9309      	str	r3, [sp, #36]	; 0x24
 800f920:	2320      	movs	r3, #32
 800f922:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f926:	f8cd 800c 	str.w	r8, [sp, #12]
 800f92a:	2330      	movs	r3, #48	; 0x30
 800f92c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800faf0 <_vfiprintf_r+0x24c>
 800f930:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f934:	f04f 0901 	mov.w	r9, #1
 800f938:	4623      	mov	r3, r4
 800f93a:	469a      	mov	sl, r3
 800f93c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f940:	b10a      	cbz	r2, 800f946 <_vfiprintf_r+0xa2>
 800f942:	2a25      	cmp	r2, #37	; 0x25
 800f944:	d1f9      	bne.n	800f93a <_vfiprintf_r+0x96>
 800f946:	ebba 0b04 	subs.w	fp, sl, r4
 800f94a:	d00b      	beq.n	800f964 <_vfiprintf_r+0xc0>
 800f94c:	465b      	mov	r3, fp
 800f94e:	4622      	mov	r2, r4
 800f950:	4629      	mov	r1, r5
 800f952:	4630      	mov	r0, r6
 800f954:	f7ff ff93 	bl	800f87e <__sfputs_r>
 800f958:	3001      	adds	r0, #1
 800f95a:	f000 80aa 	beq.w	800fab2 <_vfiprintf_r+0x20e>
 800f95e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f960:	445a      	add	r2, fp
 800f962:	9209      	str	r2, [sp, #36]	; 0x24
 800f964:	f89a 3000 	ldrb.w	r3, [sl]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	f000 80a2 	beq.w	800fab2 <_vfiprintf_r+0x20e>
 800f96e:	2300      	movs	r3, #0
 800f970:	f04f 32ff 	mov.w	r2, #4294967295
 800f974:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f978:	f10a 0a01 	add.w	sl, sl, #1
 800f97c:	9304      	str	r3, [sp, #16]
 800f97e:	9307      	str	r3, [sp, #28]
 800f980:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f984:	931a      	str	r3, [sp, #104]	; 0x68
 800f986:	4654      	mov	r4, sl
 800f988:	2205      	movs	r2, #5
 800f98a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f98e:	4858      	ldr	r0, [pc, #352]	; (800faf0 <_vfiprintf_r+0x24c>)
 800f990:	f7f6 fc8e 	bl	80062b0 <memchr>
 800f994:	9a04      	ldr	r2, [sp, #16]
 800f996:	b9d8      	cbnz	r0, 800f9d0 <_vfiprintf_r+0x12c>
 800f998:	06d1      	lsls	r1, r2, #27
 800f99a:	bf44      	itt	mi
 800f99c:	2320      	movmi	r3, #32
 800f99e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9a2:	0713      	lsls	r3, r2, #28
 800f9a4:	bf44      	itt	mi
 800f9a6:	232b      	movmi	r3, #43	; 0x2b
 800f9a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9ac:	f89a 3000 	ldrb.w	r3, [sl]
 800f9b0:	2b2a      	cmp	r3, #42	; 0x2a
 800f9b2:	d015      	beq.n	800f9e0 <_vfiprintf_r+0x13c>
 800f9b4:	9a07      	ldr	r2, [sp, #28]
 800f9b6:	4654      	mov	r4, sl
 800f9b8:	2000      	movs	r0, #0
 800f9ba:	f04f 0c0a 	mov.w	ip, #10
 800f9be:	4621      	mov	r1, r4
 800f9c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f9c4:	3b30      	subs	r3, #48	; 0x30
 800f9c6:	2b09      	cmp	r3, #9
 800f9c8:	d94e      	bls.n	800fa68 <_vfiprintf_r+0x1c4>
 800f9ca:	b1b0      	cbz	r0, 800f9fa <_vfiprintf_r+0x156>
 800f9cc:	9207      	str	r2, [sp, #28]
 800f9ce:	e014      	b.n	800f9fa <_vfiprintf_r+0x156>
 800f9d0:	eba0 0308 	sub.w	r3, r0, r8
 800f9d4:	fa09 f303 	lsl.w	r3, r9, r3
 800f9d8:	4313      	orrs	r3, r2
 800f9da:	9304      	str	r3, [sp, #16]
 800f9dc:	46a2      	mov	sl, r4
 800f9de:	e7d2      	b.n	800f986 <_vfiprintf_r+0xe2>
 800f9e0:	9b03      	ldr	r3, [sp, #12]
 800f9e2:	1d19      	adds	r1, r3, #4
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	9103      	str	r1, [sp, #12]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	bfbb      	ittet	lt
 800f9ec:	425b      	neglt	r3, r3
 800f9ee:	f042 0202 	orrlt.w	r2, r2, #2
 800f9f2:	9307      	strge	r3, [sp, #28]
 800f9f4:	9307      	strlt	r3, [sp, #28]
 800f9f6:	bfb8      	it	lt
 800f9f8:	9204      	strlt	r2, [sp, #16]
 800f9fa:	7823      	ldrb	r3, [r4, #0]
 800f9fc:	2b2e      	cmp	r3, #46	; 0x2e
 800f9fe:	d10c      	bne.n	800fa1a <_vfiprintf_r+0x176>
 800fa00:	7863      	ldrb	r3, [r4, #1]
 800fa02:	2b2a      	cmp	r3, #42	; 0x2a
 800fa04:	d135      	bne.n	800fa72 <_vfiprintf_r+0x1ce>
 800fa06:	9b03      	ldr	r3, [sp, #12]
 800fa08:	1d1a      	adds	r2, r3, #4
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	9203      	str	r2, [sp, #12]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	bfb8      	it	lt
 800fa12:	f04f 33ff 	movlt.w	r3, #4294967295
 800fa16:	3402      	adds	r4, #2
 800fa18:	9305      	str	r3, [sp, #20]
 800fa1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fb00 <_vfiprintf_r+0x25c>
 800fa1e:	7821      	ldrb	r1, [r4, #0]
 800fa20:	2203      	movs	r2, #3
 800fa22:	4650      	mov	r0, sl
 800fa24:	f7f6 fc44 	bl	80062b0 <memchr>
 800fa28:	b140      	cbz	r0, 800fa3c <_vfiprintf_r+0x198>
 800fa2a:	2340      	movs	r3, #64	; 0x40
 800fa2c:	eba0 000a 	sub.w	r0, r0, sl
 800fa30:	fa03 f000 	lsl.w	r0, r3, r0
 800fa34:	9b04      	ldr	r3, [sp, #16]
 800fa36:	4303      	orrs	r3, r0
 800fa38:	3401      	adds	r4, #1
 800fa3a:	9304      	str	r3, [sp, #16]
 800fa3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa40:	482c      	ldr	r0, [pc, #176]	; (800faf4 <_vfiprintf_r+0x250>)
 800fa42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fa46:	2206      	movs	r2, #6
 800fa48:	f7f6 fc32 	bl	80062b0 <memchr>
 800fa4c:	2800      	cmp	r0, #0
 800fa4e:	d03f      	beq.n	800fad0 <_vfiprintf_r+0x22c>
 800fa50:	4b29      	ldr	r3, [pc, #164]	; (800faf8 <_vfiprintf_r+0x254>)
 800fa52:	bb1b      	cbnz	r3, 800fa9c <_vfiprintf_r+0x1f8>
 800fa54:	9b03      	ldr	r3, [sp, #12]
 800fa56:	3307      	adds	r3, #7
 800fa58:	f023 0307 	bic.w	r3, r3, #7
 800fa5c:	3308      	adds	r3, #8
 800fa5e:	9303      	str	r3, [sp, #12]
 800fa60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa62:	443b      	add	r3, r7
 800fa64:	9309      	str	r3, [sp, #36]	; 0x24
 800fa66:	e767      	b.n	800f938 <_vfiprintf_r+0x94>
 800fa68:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa6c:	460c      	mov	r4, r1
 800fa6e:	2001      	movs	r0, #1
 800fa70:	e7a5      	b.n	800f9be <_vfiprintf_r+0x11a>
 800fa72:	2300      	movs	r3, #0
 800fa74:	3401      	adds	r4, #1
 800fa76:	9305      	str	r3, [sp, #20]
 800fa78:	4619      	mov	r1, r3
 800fa7a:	f04f 0c0a 	mov.w	ip, #10
 800fa7e:	4620      	mov	r0, r4
 800fa80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa84:	3a30      	subs	r2, #48	; 0x30
 800fa86:	2a09      	cmp	r2, #9
 800fa88:	d903      	bls.n	800fa92 <_vfiprintf_r+0x1ee>
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d0c5      	beq.n	800fa1a <_vfiprintf_r+0x176>
 800fa8e:	9105      	str	r1, [sp, #20]
 800fa90:	e7c3      	b.n	800fa1a <_vfiprintf_r+0x176>
 800fa92:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa96:	4604      	mov	r4, r0
 800fa98:	2301      	movs	r3, #1
 800fa9a:	e7f0      	b.n	800fa7e <_vfiprintf_r+0x1da>
 800fa9c:	ab03      	add	r3, sp, #12
 800fa9e:	9300      	str	r3, [sp, #0]
 800faa0:	462a      	mov	r2, r5
 800faa2:	4b16      	ldr	r3, [pc, #88]	; (800fafc <_vfiprintf_r+0x258>)
 800faa4:	a904      	add	r1, sp, #16
 800faa6:	4630      	mov	r0, r6
 800faa8:	f7fd fbd2 	bl	800d250 <_printf_float>
 800faac:	4607      	mov	r7, r0
 800faae:	1c78      	adds	r0, r7, #1
 800fab0:	d1d6      	bne.n	800fa60 <_vfiprintf_r+0x1bc>
 800fab2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fab4:	07d9      	lsls	r1, r3, #31
 800fab6:	d405      	bmi.n	800fac4 <_vfiprintf_r+0x220>
 800fab8:	89ab      	ldrh	r3, [r5, #12]
 800faba:	059a      	lsls	r2, r3, #22
 800fabc:	d402      	bmi.n	800fac4 <_vfiprintf_r+0x220>
 800fabe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fac0:	f7fd fa6a 	bl	800cf98 <__retarget_lock_release_recursive>
 800fac4:	89ab      	ldrh	r3, [r5, #12]
 800fac6:	065b      	lsls	r3, r3, #25
 800fac8:	f53f af12 	bmi.w	800f8f0 <_vfiprintf_r+0x4c>
 800facc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800face:	e711      	b.n	800f8f4 <_vfiprintf_r+0x50>
 800fad0:	ab03      	add	r3, sp, #12
 800fad2:	9300      	str	r3, [sp, #0]
 800fad4:	462a      	mov	r2, r5
 800fad6:	4b09      	ldr	r3, [pc, #36]	; (800fafc <_vfiprintf_r+0x258>)
 800fad8:	a904      	add	r1, sp, #16
 800fada:	4630      	mov	r0, r6
 800fadc:	f7fd fe5c 	bl	800d798 <_printf_i>
 800fae0:	e7e4      	b.n	800faac <_vfiprintf_r+0x208>
 800fae2:	bf00      	nop
 800fae4:	0804c888 	.word	0x0804c888
 800fae8:	0804c8a8 	.word	0x0804c8a8
 800faec:	0804c868 	.word	0x0804c868
 800faf0:	0804cb24 	.word	0x0804cb24
 800faf4:	0804cb2e 	.word	0x0804cb2e
 800faf8:	0800d251 	.word	0x0800d251
 800fafc:	0800f87f 	.word	0x0800f87f
 800fb00:	0804cb2a 	.word	0x0804cb2a

0800fb04 <_read_r>:
 800fb04:	b538      	push	{r3, r4, r5, lr}
 800fb06:	4d07      	ldr	r5, [pc, #28]	; (800fb24 <_read_r+0x20>)
 800fb08:	4604      	mov	r4, r0
 800fb0a:	4608      	mov	r0, r1
 800fb0c:	4611      	mov	r1, r2
 800fb0e:	2200      	movs	r2, #0
 800fb10:	602a      	str	r2, [r5, #0]
 800fb12:	461a      	mov	r2, r3
 800fb14:	f7fc feb1 	bl	800c87a <_read>
 800fb18:	1c43      	adds	r3, r0, #1
 800fb1a:	d102      	bne.n	800fb22 <_read_r+0x1e>
 800fb1c:	682b      	ldr	r3, [r5, #0]
 800fb1e:	b103      	cbz	r3, 800fb22 <_read_r+0x1e>
 800fb20:	6023      	str	r3, [r4, #0]
 800fb22:	bd38      	pop	{r3, r4, r5, pc}
 800fb24:	20014018 	.word	0x20014018

0800fb28 <abort>:
 800fb28:	b508      	push	{r3, lr}
 800fb2a:	2006      	movs	r0, #6
 800fb2c:	f000 f8aa 	bl	800fc84 <raise>
 800fb30:	2001      	movs	r0, #1
 800fb32:	f004 f8e9 	bl	8013d08 <_exit>
	...

0800fb38 <_fstat_r>:
 800fb38:	b538      	push	{r3, r4, r5, lr}
 800fb3a:	4d07      	ldr	r5, [pc, #28]	; (800fb58 <_fstat_r+0x20>)
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	4604      	mov	r4, r0
 800fb40:	4608      	mov	r0, r1
 800fb42:	4611      	mov	r1, r2
 800fb44:	602b      	str	r3, [r5, #0]
 800fb46:	f7fc ff7c 	bl	800ca42 <_fstat>
 800fb4a:	1c43      	adds	r3, r0, #1
 800fb4c:	d102      	bne.n	800fb54 <_fstat_r+0x1c>
 800fb4e:	682b      	ldr	r3, [r5, #0]
 800fb50:	b103      	cbz	r3, 800fb54 <_fstat_r+0x1c>
 800fb52:	6023      	str	r3, [r4, #0]
 800fb54:	bd38      	pop	{r3, r4, r5, pc}
 800fb56:	bf00      	nop
 800fb58:	20014018 	.word	0x20014018

0800fb5c <_isatty_r>:
 800fb5c:	b538      	push	{r3, r4, r5, lr}
 800fb5e:	4d06      	ldr	r5, [pc, #24]	; (800fb78 <_isatty_r+0x1c>)
 800fb60:	2300      	movs	r3, #0
 800fb62:	4604      	mov	r4, r0
 800fb64:	4608      	mov	r0, r1
 800fb66:	602b      	str	r3, [r5, #0]
 800fb68:	f7fd f8d2 	bl	800cd10 <_isatty>
 800fb6c:	1c43      	adds	r3, r0, #1
 800fb6e:	d102      	bne.n	800fb76 <_isatty_r+0x1a>
 800fb70:	682b      	ldr	r3, [r5, #0]
 800fb72:	b103      	cbz	r3, 800fb76 <_isatty_r+0x1a>
 800fb74:	6023      	str	r3, [r4, #0]
 800fb76:	bd38      	pop	{r3, r4, r5, pc}
 800fb78:	20014018 	.word	0x20014018

0800fb7c <__ascii_mbtowc>:
 800fb7c:	b082      	sub	sp, #8
 800fb7e:	b901      	cbnz	r1, 800fb82 <__ascii_mbtowc+0x6>
 800fb80:	a901      	add	r1, sp, #4
 800fb82:	b142      	cbz	r2, 800fb96 <__ascii_mbtowc+0x1a>
 800fb84:	b14b      	cbz	r3, 800fb9a <__ascii_mbtowc+0x1e>
 800fb86:	7813      	ldrb	r3, [r2, #0]
 800fb88:	600b      	str	r3, [r1, #0]
 800fb8a:	7812      	ldrb	r2, [r2, #0]
 800fb8c:	1e10      	subs	r0, r2, #0
 800fb8e:	bf18      	it	ne
 800fb90:	2001      	movne	r0, #1
 800fb92:	b002      	add	sp, #8
 800fb94:	4770      	bx	lr
 800fb96:	4610      	mov	r0, r2
 800fb98:	e7fb      	b.n	800fb92 <__ascii_mbtowc+0x16>
 800fb9a:	f06f 0001 	mvn.w	r0, #1
 800fb9e:	e7f8      	b.n	800fb92 <__ascii_mbtowc+0x16>

0800fba0 <memmove>:
 800fba0:	4288      	cmp	r0, r1
 800fba2:	b510      	push	{r4, lr}
 800fba4:	eb01 0402 	add.w	r4, r1, r2
 800fba8:	d902      	bls.n	800fbb0 <memmove+0x10>
 800fbaa:	4284      	cmp	r4, r0
 800fbac:	4623      	mov	r3, r4
 800fbae:	d807      	bhi.n	800fbc0 <memmove+0x20>
 800fbb0:	1e43      	subs	r3, r0, #1
 800fbb2:	42a1      	cmp	r1, r4
 800fbb4:	d008      	beq.n	800fbc8 <memmove+0x28>
 800fbb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fbba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fbbe:	e7f8      	b.n	800fbb2 <memmove+0x12>
 800fbc0:	4402      	add	r2, r0
 800fbc2:	4601      	mov	r1, r0
 800fbc4:	428a      	cmp	r2, r1
 800fbc6:	d100      	bne.n	800fbca <memmove+0x2a>
 800fbc8:	bd10      	pop	{r4, pc}
 800fbca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fbce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fbd2:	e7f7      	b.n	800fbc4 <memmove+0x24>

0800fbd4 <_realloc_r>:
 800fbd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbd8:	4680      	mov	r8, r0
 800fbda:	4614      	mov	r4, r2
 800fbdc:	460e      	mov	r6, r1
 800fbde:	b921      	cbnz	r1, 800fbea <_realloc_r+0x16>
 800fbe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbe4:	4611      	mov	r1, r2
 800fbe6:	f7fd ba1f 	b.w	800d028 <_malloc_r>
 800fbea:	b92a      	cbnz	r2, 800fbf8 <_realloc_r+0x24>
 800fbec:	f7ff fc88 	bl	800f500 <_free_r>
 800fbf0:	4625      	mov	r5, r4
 800fbf2:	4628      	mov	r0, r5
 800fbf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbf8:	f000 f86d 	bl	800fcd6 <_malloc_usable_size_r>
 800fbfc:	4284      	cmp	r4, r0
 800fbfe:	4607      	mov	r7, r0
 800fc00:	d802      	bhi.n	800fc08 <_realloc_r+0x34>
 800fc02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fc06:	d812      	bhi.n	800fc2e <_realloc_r+0x5a>
 800fc08:	4621      	mov	r1, r4
 800fc0a:	4640      	mov	r0, r8
 800fc0c:	f7fd fa0c 	bl	800d028 <_malloc_r>
 800fc10:	4605      	mov	r5, r0
 800fc12:	2800      	cmp	r0, #0
 800fc14:	d0ed      	beq.n	800fbf2 <_realloc_r+0x1e>
 800fc16:	42bc      	cmp	r4, r7
 800fc18:	4622      	mov	r2, r4
 800fc1a:	4631      	mov	r1, r6
 800fc1c:	bf28      	it	cs
 800fc1e:	463a      	movcs	r2, r7
 800fc20:	f7fd f9cb 	bl	800cfba <memcpy>
 800fc24:	4631      	mov	r1, r6
 800fc26:	4640      	mov	r0, r8
 800fc28:	f7ff fc6a 	bl	800f500 <_free_r>
 800fc2c:	e7e1      	b.n	800fbf2 <_realloc_r+0x1e>
 800fc2e:	4635      	mov	r5, r6
 800fc30:	e7df      	b.n	800fbf2 <_realloc_r+0x1e>

0800fc32 <_raise_r>:
 800fc32:	291f      	cmp	r1, #31
 800fc34:	b538      	push	{r3, r4, r5, lr}
 800fc36:	4604      	mov	r4, r0
 800fc38:	460d      	mov	r5, r1
 800fc3a:	d904      	bls.n	800fc46 <_raise_r+0x14>
 800fc3c:	2316      	movs	r3, #22
 800fc3e:	6003      	str	r3, [r0, #0]
 800fc40:	f04f 30ff 	mov.w	r0, #4294967295
 800fc44:	bd38      	pop	{r3, r4, r5, pc}
 800fc46:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fc48:	b112      	cbz	r2, 800fc50 <_raise_r+0x1e>
 800fc4a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fc4e:	b94b      	cbnz	r3, 800fc64 <_raise_r+0x32>
 800fc50:	4620      	mov	r0, r4
 800fc52:	f000 f831 	bl	800fcb8 <_getpid_r>
 800fc56:	462a      	mov	r2, r5
 800fc58:	4601      	mov	r1, r0
 800fc5a:	4620      	mov	r0, r4
 800fc5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc60:	f000 b818 	b.w	800fc94 <_kill_r>
 800fc64:	2b01      	cmp	r3, #1
 800fc66:	d00a      	beq.n	800fc7e <_raise_r+0x4c>
 800fc68:	1c59      	adds	r1, r3, #1
 800fc6a:	d103      	bne.n	800fc74 <_raise_r+0x42>
 800fc6c:	2316      	movs	r3, #22
 800fc6e:	6003      	str	r3, [r0, #0]
 800fc70:	2001      	movs	r0, #1
 800fc72:	e7e7      	b.n	800fc44 <_raise_r+0x12>
 800fc74:	2400      	movs	r4, #0
 800fc76:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fc7a:	4628      	mov	r0, r5
 800fc7c:	4798      	blx	r3
 800fc7e:	2000      	movs	r0, #0
 800fc80:	e7e0      	b.n	800fc44 <_raise_r+0x12>
	...

0800fc84 <raise>:
 800fc84:	4b02      	ldr	r3, [pc, #8]	; (800fc90 <raise+0xc>)
 800fc86:	4601      	mov	r1, r0
 800fc88:	6818      	ldr	r0, [r3, #0]
 800fc8a:	f7ff bfd2 	b.w	800fc32 <_raise_r>
 800fc8e:	bf00      	nop
 800fc90:	20000abc 	.word	0x20000abc

0800fc94 <_kill_r>:
 800fc94:	b538      	push	{r3, r4, r5, lr}
 800fc96:	4d07      	ldr	r5, [pc, #28]	; (800fcb4 <_kill_r+0x20>)
 800fc98:	2300      	movs	r3, #0
 800fc9a:	4604      	mov	r4, r0
 800fc9c:	4608      	mov	r0, r1
 800fc9e:	4611      	mov	r1, r2
 800fca0:	602b      	str	r3, [r5, #0]
 800fca2:	f004 f829 	bl	8013cf8 <_kill>
 800fca6:	1c43      	adds	r3, r0, #1
 800fca8:	d102      	bne.n	800fcb0 <_kill_r+0x1c>
 800fcaa:	682b      	ldr	r3, [r5, #0]
 800fcac:	b103      	cbz	r3, 800fcb0 <_kill_r+0x1c>
 800fcae:	6023      	str	r3, [r4, #0]
 800fcb0:	bd38      	pop	{r3, r4, r5, pc}
 800fcb2:	bf00      	nop
 800fcb4:	20014018 	.word	0x20014018

0800fcb8 <_getpid_r>:
 800fcb8:	f7fc bea0 	b.w	800c9fc <_getpid>

0800fcbc <__ascii_wctomb>:
 800fcbc:	b149      	cbz	r1, 800fcd2 <__ascii_wctomb+0x16>
 800fcbe:	2aff      	cmp	r2, #255	; 0xff
 800fcc0:	bf85      	ittet	hi
 800fcc2:	238a      	movhi	r3, #138	; 0x8a
 800fcc4:	6003      	strhi	r3, [r0, #0]
 800fcc6:	700a      	strbls	r2, [r1, #0]
 800fcc8:	f04f 30ff 	movhi.w	r0, #4294967295
 800fccc:	bf98      	it	ls
 800fcce:	2001      	movls	r0, #1
 800fcd0:	4770      	bx	lr
 800fcd2:	4608      	mov	r0, r1
 800fcd4:	4770      	bx	lr

0800fcd6 <_malloc_usable_size_r>:
 800fcd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fcda:	1f18      	subs	r0, r3, #4
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	bfbc      	itt	lt
 800fce0:	580b      	ldrlt	r3, [r1, r0]
 800fce2:	18c0      	addlt	r0, r0, r3
 800fce4:	4770      	bx	lr
	...

0800fce8 <cos>:
 800fce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fcea:	ec53 2b10 	vmov	r2, r3, d0
 800fcee:	4826      	ldr	r0, [pc, #152]	; (800fd88 <cos+0xa0>)
 800fcf0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fcf4:	4281      	cmp	r1, r0
 800fcf6:	dc06      	bgt.n	800fd06 <cos+0x1e>
 800fcf8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800fd80 <cos+0x98>
 800fcfc:	b005      	add	sp, #20
 800fcfe:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd02:	f002 bc31 	b.w	8012568 <__kernel_cos>
 800fd06:	4821      	ldr	r0, [pc, #132]	; (800fd8c <cos+0xa4>)
 800fd08:	4281      	cmp	r1, r0
 800fd0a:	dd09      	ble.n	800fd20 <cos+0x38>
 800fd0c:	ee10 0a10 	vmov	r0, s0
 800fd10:	4619      	mov	r1, r3
 800fd12:	f7f6 fb21 	bl	8006358 <__aeabi_dsub>
 800fd16:	ec41 0b10 	vmov	d0, r0, r1
 800fd1a:	b005      	add	sp, #20
 800fd1c:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd20:	4668      	mov	r0, sp
 800fd22:	f001 f825 	bl	8010d70 <__ieee754_rem_pio2>
 800fd26:	f000 0003 	and.w	r0, r0, #3
 800fd2a:	2801      	cmp	r0, #1
 800fd2c:	d00b      	beq.n	800fd46 <cos+0x5e>
 800fd2e:	2802      	cmp	r0, #2
 800fd30:	d016      	beq.n	800fd60 <cos+0x78>
 800fd32:	b9e0      	cbnz	r0, 800fd6e <cos+0x86>
 800fd34:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fd38:	ed9d 0b00 	vldr	d0, [sp]
 800fd3c:	f002 fc14 	bl	8012568 <__kernel_cos>
 800fd40:	ec51 0b10 	vmov	r0, r1, d0
 800fd44:	e7e7      	b.n	800fd16 <cos+0x2e>
 800fd46:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fd4a:	ed9d 0b00 	vldr	d0, [sp]
 800fd4e:	f003 f823 	bl	8012d98 <__kernel_sin>
 800fd52:	ec53 2b10 	vmov	r2, r3, d0
 800fd56:	ee10 0a10 	vmov	r0, s0
 800fd5a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fd5e:	e7da      	b.n	800fd16 <cos+0x2e>
 800fd60:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fd64:	ed9d 0b00 	vldr	d0, [sp]
 800fd68:	f002 fbfe 	bl	8012568 <__kernel_cos>
 800fd6c:	e7f1      	b.n	800fd52 <cos+0x6a>
 800fd6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fd72:	ed9d 0b00 	vldr	d0, [sp]
 800fd76:	2001      	movs	r0, #1
 800fd78:	f003 f80e 	bl	8012d98 <__kernel_sin>
 800fd7c:	e7e0      	b.n	800fd40 <cos+0x58>
 800fd7e:	bf00      	nop
	...
 800fd88:	3fe921fb 	.word	0x3fe921fb
 800fd8c:	7fefffff 	.word	0x7fefffff

0800fd90 <asinhf>:
 800fd90:	b510      	push	{r4, lr}
 800fd92:	ee10 4a10 	vmov	r4, s0
 800fd96:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800fd9a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fd9e:	ed2d 8b04 	vpush	{d8-d9}
 800fda2:	eeb0 8a40 	vmov.f32	s16, s0
 800fda6:	db06      	blt.n	800fdb6 <asinhf+0x26>
 800fda8:	ee30 8a00 	vadd.f32	s16, s0, s0
 800fdac:	eeb0 0a48 	vmov.f32	s0, s16
 800fdb0:	ecbd 8b04 	vpop	{d8-d9}
 800fdb4:	bd10      	pop	{r4, pc}
 800fdb6:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 800fdba:	da21      	bge.n	800fe00 <asinhf+0x70>
 800fdbc:	eddf 7a26 	vldr	s15, [pc, #152]	; 800fe58 <asinhf+0xc8>
 800fdc0:	ee70 7a27 	vadd.f32	s15, s0, s15
 800fdc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fdc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fdcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdd0:	dcec      	bgt.n	800fdac <asinhf+0x1c>
 800fdd2:	eeb0 0a48 	vmov.f32	s0, s16
 800fdd6:	f000 fb77 	bl	80104c8 <fabsf>
 800fdda:	ee68 8a08 	vmul.f32	s17, s16, s16
 800fdde:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800fde2:	eeb0 8a40 	vmov.f32	s16, s0
 800fde6:	ee38 0a89 	vadd.f32	s0, s17, s18
 800fdea:	f002 fbb7 	bl	801255c <__ieee754_sqrtf>
 800fdee:	ee30 0a09 	vadd.f32	s0, s0, s18
 800fdf2:	eec8 7a80 	vdiv.f32	s15, s17, s0
 800fdf6:	ee37 0a88 	vadd.f32	s0, s15, s16
 800fdfa:	f000 fbaf 	bl	801055c <log1pf>
 800fdfe:	e028      	b.n	800fe52 <asinhf+0xc2>
 800fe00:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 800fe04:	dd0c      	ble.n	800fe20 <asinhf+0x90>
 800fe06:	f000 fb5f 	bl	80104c8 <fabsf>
 800fe0a:	f001 fde5 	bl	80119d8 <__ieee754_logf>
 800fe0e:	ed9f 8a13 	vldr	s16, [pc, #76]	; 800fe5c <asinhf+0xcc>
 800fe12:	ee30 8a08 	vadd.f32	s16, s0, s16
 800fe16:	2c00      	cmp	r4, #0
 800fe18:	bfd8      	it	le
 800fe1a:	eeb1 8a48 	vnegle.f32	s16, s16
 800fe1e:	e7c5      	b.n	800fdac <asinhf+0x1c>
 800fe20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe24:	ddd5      	ble.n	800fdd2 <asinhf+0x42>
 800fe26:	f000 fb4f 	bl	80104c8 <fabsf>
 800fe2a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800fe2e:	eef0 8a40 	vmov.f32	s17, s0
 800fe32:	eeb0 0a49 	vmov.f32	s0, s18
 800fe36:	eea8 0a08 	vfma.f32	s0, s16, s16
 800fe3a:	f002 fb8f 	bl	801255c <__ieee754_sqrtf>
 800fe3e:	ee70 7a28 	vadd.f32	s15, s0, s17
 800fe42:	ee89 0a27 	vdiv.f32	s0, s18, s15
 800fe46:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800fe4a:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800fe4e:	f001 fdc3 	bl	80119d8 <__ieee754_logf>
 800fe52:	eeb0 8a40 	vmov.f32	s16, s0
 800fe56:	e7de      	b.n	800fe16 <asinhf+0x86>
 800fe58:	7149f2ca 	.word	0x7149f2ca
 800fe5c:	3f317218 	.word	0x3f317218

0800fe60 <atanf>:
 800fe60:	b538      	push	{r3, r4, r5, lr}
 800fe62:	ee10 5a10 	vmov	r5, s0
 800fe66:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800fe6a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800fe6e:	eef0 7a40 	vmov.f32	s15, s0
 800fe72:	db10      	blt.n	800fe96 <atanf+0x36>
 800fe74:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800fe78:	dd04      	ble.n	800fe84 <atanf+0x24>
 800fe7a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800fe7e:	eeb0 0a67 	vmov.f32	s0, s15
 800fe82:	bd38      	pop	{r3, r4, r5, pc}
 800fe84:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800ffbc <atanf+0x15c>
 800fe88:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800ffc0 <atanf+0x160>
 800fe8c:	2d00      	cmp	r5, #0
 800fe8e:	bfd8      	it	le
 800fe90:	eef0 7a40 	vmovle.f32	s15, s0
 800fe94:	e7f3      	b.n	800fe7e <atanf+0x1e>
 800fe96:	4b4b      	ldr	r3, [pc, #300]	; (800ffc4 <atanf+0x164>)
 800fe98:	429c      	cmp	r4, r3
 800fe9a:	dc10      	bgt.n	800febe <atanf+0x5e>
 800fe9c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800fea0:	da0a      	bge.n	800feb8 <atanf+0x58>
 800fea2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ffc8 <atanf+0x168>
 800fea6:	ee30 7a07 	vadd.f32	s14, s0, s14
 800feaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800feae:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800feb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feb6:	dce2      	bgt.n	800fe7e <atanf+0x1e>
 800feb8:	f04f 33ff 	mov.w	r3, #4294967295
 800febc:	e013      	b.n	800fee6 <atanf+0x86>
 800febe:	f000 fb03 	bl	80104c8 <fabsf>
 800fec2:	4b42      	ldr	r3, [pc, #264]	; (800ffcc <atanf+0x16c>)
 800fec4:	429c      	cmp	r4, r3
 800fec6:	dc4f      	bgt.n	800ff68 <atanf+0x108>
 800fec8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800fecc:	429c      	cmp	r4, r3
 800fece:	dc41      	bgt.n	800ff54 <atanf+0xf4>
 800fed0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800fed4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800fed8:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fedc:	2300      	movs	r3, #0
 800fede:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fee2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fee6:	1c5a      	adds	r2, r3, #1
 800fee8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800feec:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ffd0 <atanf+0x170>
 800fef0:	eddf 5a38 	vldr	s11, [pc, #224]	; 800ffd4 <atanf+0x174>
 800fef4:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800ffd8 <atanf+0x178>
 800fef8:	ee66 6a06 	vmul.f32	s13, s12, s12
 800fefc:	eee6 5a87 	vfma.f32	s11, s13, s14
 800ff00:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ffdc <atanf+0x17c>
 800ff04:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ff08:	eddf 5a35 	vldr	s11, [pc, #212]	; 800ffe0 <atanf+0x180>
 800ff0c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ff10:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800ffe4 <atanf+0x184>
 800ff14:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ff18:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ffe8 <atanf+0x188>
 800ff1c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ff20:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800ffec <atanf+0x18c>
 800ff24:	eea6 5a87 	vfma.f32	s10, s13, s14
 800ff28:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800fff0 <atanf+0x190>
 800ff2c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ff30:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800fff4 <atanf+0x194>
 800ff34:	eea7 5a26 	vfma.f32	s10, s14, s13
 800ff38:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800fff8 <atanf+0x198>
 800ff3c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ff40:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ff44:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ff48:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ff4c:	d121      	bne.n	800ff92 <atanf+0x132>
 800ff4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff52:	e794      	b.n	800fe7e <atanf+0x1e>
 800ff54:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ff58:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ff5c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ff60:	2301      	movs	r3, #1
 800ff62:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ff66:	e7be      	b.n	800fee6 <atanf+0x86>
 800ff68:	4b24      	ldr	r3, [pc, #144]	; (800fffc <atanf+0x19c>)
 800ff6a:	429c      	cmp	r4, r3
 800ff6c:	dc0b      	bgt.n	800ff86 <atanf+0x126>
 800ff6e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800ff72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ff76:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ff7a:	2302      	movs	r3, #2
 800ff7c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ff80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff84:	e7af      	b.n	800fee6 <atanf+0x86>
 800ff86:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ff8a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ff8e:	2303      	movs	r3, #3
 800ff90:	e7a9      	b.n	800fee6 <atanf+0x86>
 800ff92:	4a1b      	ldr	r2, [pc, #108]	; (8010000 <atanf+0x1a0>)
 800ff94:	491b      	ldr	r1, [pc, #108]	; (8010004 <atanf+0x1a4>)
 800ff96:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ff9a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ff9e:	ed93 0a00 	vldr	s0, [r3]
 800ffa2:	ee37 7a40 	vsub.f32	s14, s14, s0
 800ffa6:	ed92 0a00 	vldr	s0, [r2]
 800ffaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ffae:	2d00      	cmp	r5, #0
 800ffb0:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ffb4:	bfb8      	it	lt
 800ffb6:	eef1 7a67 	vneglt.f32	s15, s15
 800ffba:	e760      	b.n	800fe7e <atanf+0x1e>
 800ffbc:	3fc90fdb 	.word	0x3fc90fdb
 800ffc0:	bfc90fdb 	.word	0xbfc90fdb
 800ffc4:	3edfffff 	.word	0x3edfffff
 800ffc8:	7149f2ca 	.word	0x7149f2ca
 800ffcc:	3f97ffff 	.word	0x3f97ffff
 800ffd0:	3c8569d7 	.word	0x3c8569d7
 800ffd4:	3d4bda59 	.word	0x3d4bda59
 800ffd8:	bd6ef16b 	.word	0xbd6ef16b
 800ffdc:	3d886b35 	.word	0x3d886b35
 800ffe0:	3dba2e6e 	.word	0x3dba2e6e
 800ffe4:	3e124925 	.word	0x3e124925
 800ffe8:	3eaaaaab 	.word	0x3eaaaaab
 800ffec:	bd15a221 	.word	0xbd15a221
 800fff0:	bd9d8795 	.word	0xbd9d8795
 800fff4:	bde38e38 	.word	0xbde38e38
 800fff8:	be4ccccd 	.word	0xbe4ccccd
 800fffc:	401bffff 	.word	0x401bffff
 8010000:	0804cc40 	.word	0x0804cc40
 8010004:	0804cc50 	.word	0x0804cc50

08010008 <ceilf>:
 8010008:	ee10 3a10 	vmov	r3, s0
 801000c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010010:	3a7f      	subs	r2, #127	; 0x7f
 8010012:	2a16      	cmp	r2, #22
 8010014:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010018:	dc2a      	bgt.n	8010070 <ceilf+0x68>
 801001a:	2a00      	cmp	r2, #0
 801001c:	da11      	bge.n	8010042 <ceilf+0x3a>
 801001e:	eddf 7a19 	vldr	s15, [pc, #100]	; 8010084 <ceilf+0x7c>
 8010022:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010026:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801002a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801002e:	dd05      	ble.n	801003c <ceilf+0x34>
 8010030:	2b00      	cmp	r3, #0
 8010032:	db23      	blt.n	801007c <ceilf+0x74>
 8010034:	2900      	cmp	r1, #0
 8010036:	bf18      	it	ne
 8010038:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 801003c:	ee00 3a10 	vmov	s0, r3
 8010040:	4770      	bx	lr
 8010042:	4911      	ldr	r1, [pc, #68]	; (8010088 <ceilf+0x80>)
 8010044:	4111      	asrs	r1, r2
 8010046:	420b      	tst	r3, r1
 8010048:	d0fa      	beq.n	8010040 <ceilf+0x38>
 801004a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8010084 <ceilf+0x7c>
 801004e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010052:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801005a:	ddef      	ble.n	801003c <ceilf+0x34>
 801005c:	2b00      	cmp	r3, #0
 801005e:	bfc2      	ittt	gt
 8010060:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8010064:	fa40 f202 	asrgt.w	r2, r0, r2
 8010068:	189b      	addgt	r3, r3, r2
 801006a:	ea23 0301 	bic.w	r3, r3, r1
 801006e:	e7e5      	b.n	801003c <ceilf+0x34>
 8010070:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010074:	d3e4      	bcc.n	8010040 <ceilf+0x38>
 8010076:	ee30 0a00 	vadd.f32	s0, s0, s0
 801007a:	4770      	bx	lr
 801007c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010080:	e7dc      	b.n	801003c <ceilf+0x34>
 8010082:	bf00      	nop
 8010084:	7149f2ca 	.word	0x7149f2ca
 8010088:	007fffff 	.word	0x007fffff

0801008c <cosf>:
 801008c:	ee10 3a10 	vmov	r3, s0
 8010090:	b507      	push	{r0, r1, r2, lr}
 8010092:	4a1e      	ldr	r2, [pc, #120]	; (801010c <cosf+0x80>)
 8010094:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010098:	4293      	cmp	r3, r2
 801009a:	dc06      	bgt.n	80100aa <cosf+0x1e>
 801009c:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8010110 <cosf+0x84>
 80100a0:	b003      	add	sp, #12
 80100a2:	f85d eb04 	ldr.w	lr, [sp], #4
 80100a6:	f002 bf35 	b.w	8012f14 <__kernel_cosf>
 80100aa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80100ae:	db04      	blt.n	80100ba <cosf+0x2e>
 80100b0:	ee30 0a40 	vsub.f32	s0, s0, s0
 80100b4:	b003      	add	sp, #12
 80100b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80100ba:	4668      	mov	r0, sp
 80100bc:	f002 f8a2 	bl	8012204 <__ieee754_rem_pio2f>
 80100c0:	f000 0003 	and.w	r0, r0, #3
 80100c4:	2801      	cmp	r0, #1
 80100c6:	d009      	beq.n	80100dc <cosf+0x50>
 80100c8:	2802      	cmp	r0, #2
 80100ca:	d010      	beq.n	80100ee <cosf+0x62>
 80100cc:	b9b0      	cbnz	r0, 80100fc <cosf+0x70>
 80100ce:	eddd 0a01 	vldr	s1, [sp, #4]
 80100d2:	ed9d 0a00 	vldr	s0, [sp]
 80100d6:	f002 ff1d 	bl	8012f14 <__kernel_cosf>
 80100da:	e7eb      	b.n	80100b4 <cosf+0x28>
 80100dc:	eddd 0a01 	vldr	s1, [sp, #4]
 80100e0:	ed9d 0a00 	vldr	s0, [sp]
 80100e4:	f003 f9ec 	bl	80134c0 <__kernel_sinf>
 80100e8:	eeb1 0a40 	vneg.f32	s0, s0
 80100ec:	e7e2      	b.n	80100b4 <cosf+0x28>
 80100ee:	eddd 0a01 	vldr	s1, [sp, #4]
 80100f2:	ed9d 0a00 	vldr	s0, [sp]
 80100f6:	f002 ff0d 	bl	8012f14 <__kernel_cosf>
 80100fa:	e7f5      	b.n	80100e8 <cosf+0x5c>
 80100fc:	eddd 0a01 	vldr	s1, [sp, #4]
 8010100:	ed9d 0a00 	vldr	s0, [sp]
 8010104:	2001      	movs	r0, #1
 8010106:	f003 f9db 	bl	80134c0 <__kernel_sinf>
 801010a:	e7d3      	b.n	80100b4 <cosf+0x28>
 801010c:	3f490fd8 	.word	0x3f490fd8
 8010110:	00000000 	.word	0x00000000

08010114 <erff>:
 8010114:	b538      	push	{r3, r4, r5, lr}
 8010116:	ee10 4a10 	vmov	r4, s0
 801011a:	f024 4500 	bic.w	r5, r4, #2147483648	; 0x80000000
 801011e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8010122:	ed2d 8b06 	vpush	{d8-d10}
 8010126:	eef0 7a40 	vmov.f32	s15, s0
 801012a:	db10      	blt.n	801014e <erff+0x3a>
 801012c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010134:	0fe4      	lsrs	r4, r4, #31
 8010136:	0064      	lsls	r4, r4, #1
 8010138:	f1c4 0301 	rsb	r3, r4, #1
 801013c:	ee00 3a10 	vmov	s0, r3
 8010140:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8010144:	ee30 0a07 	vadd.f32	s0, s0, s14
 8010148:	ecbd 8b06 	vpop	{d8-d10}
 801014c:	bd38      	pop	{r3, r4, r5, pc}
 801014e:	4ba2      	ldr	r3, [pc, #648]	; (80103d8 <erff+0x2c4>)
 8010150:	429d      	cmp	r5, r3
 8010152:	dc48      	bgt.n	80101e6 <erff+0xd2>
 8010154:	f1b5 5f46 	cmp.w	r5, #830472192	; 0x31800000
 8010158:	da18      	bge.n	801018c <erff+0x78>
 801015a:	f014 4ff8 	tst.w	r4, #2080374784	; 0x7c000000
 801015e:	d10e      	bne.n	801017e <erff+0x6a>
 8010160:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 80103dc <erff+0x2c8>
 8010164:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010168:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 801016c:	eeb0 7a40 	vmov.f32	s14, s0
 8010170:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8010174:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8010178:	ee27 0a00 	vmul.f32	s0, s14, s0
 801017c:	e7e4      	b.n	8010148 <erff+0x34>
 801017e:	ed9f 7a98 	vldr	s14, [pc, #608]	; 80103e0 <erff+0x2cc>
 8010182:	eee7 7a87 	vfma.f32	s15, s15, s14
 8010186:	eeb0 0a67 	vmov.f32	s0, s15
 801018a:	e7dd      	b.n	8010148 <erff+0x34>
 801018c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010190:	ed9f 6a94 	vldr	s12, [pc, #592]	; 80103e4 <erff+0x2d0>
 8010194:	eddf 6a94 	vldr	s13, [pc, #592]	; 80103e8 <erff+0x2d4>
 8010198:	eddf 5a94 	vldr	s11, [pc, #592]	; 80103ec <erff+0x2d8>
 801019c:	eee7 6a06 	vfma.f32	s13, s14, s12
 80101a0:	ed9f 6a93 	vldr	s12, [pc, #588]	; 80103f0 <erff+0x2dc>
 80101a4:	eea6 6a87 	vfma.f32	s12, s13, s14
 80101a8:	eddf 6a92 	vldr	s13, [pc, #584]	; 80103f4 <erff+0x2e0>
 80101ac:	eee6 6a07 	vfma.f32	s13, s12, s14
 80101b0:	ed9f 6a8b 	vldr	s12, [pc, #556]	; 80103e0 <erff+0x2cc>
 80101b4:	eea6 6a87 	vfma.f32	s12, s13, s14
 80101b8:	eddf 6a8f 	vldr	s13, [pc, #572]	; 80103f8 <erff+0x2e4>
 80101bc:	eee7 6a25 	vfma.f32	s13, s14, s11
 80101c0:	eddf 5a8e 	vldr	s11, [pc, #568]	; 80103fc <erff+0x2e8>
 80101c4:	eee6 5a87 	vfma.f32	s11, s13, s14
 80101c8:	eddf 6a8d 	vldr	s13, [pc, #564]	; 8010400 <erff+0x2ec>
 80101cc:	eee5 6a87 	vfma.f32	s13, s11, s14
 80101d0:	eddf 5a8c 	vldr	s11, [pc, #560]	; 8010404 <erff+0x2f0>
 80101d4:	eee6 5a87 	vfma.f32	s11, s13, s14
 80101d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80101dc:	eee5 6a87 	vfma.f32	s13, s11, s14
 80101e0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80101e4:	e7cd      	b.n	8010182 <erff+0x6e>
 80101e6:	4b88      	ldr	r3, [pc, #544]	; (8010408 <erff+0x2f4>)
 80101e8:	429d      	cmp	r5, r3
 80101ea:	dc44      	bgt.n	8010276 <erff+0x162>
 80101ec:	f000 f96c 	bl	80104c8 <fabsf>
 80101f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80101f4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80101f8:	ed9f 7a84 	vldr	s14, [pc, #528]	; 801040c <erff+0x2f8>
 80101fc:	eddf 6a84 	vldr	s13, [pc, #528]	; 8010410 <erff+0x2fc>
 8010200:	ed9f 6a84 	vldr	s12, [pc, #528]	; 8010414 <erff+0x300>
 8010204:	eee0 6a07 	vfma.f32	s13, s0, s14
 8010208:	2c00      	cmp	r4, #0
 801020a:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8010418 <erff+0x304>
 801020e:	eea6 7a80 	vfma.f32	s14, s13, s0
 8010212:	eddf 6a82 	vldr	s13, [pc, #520]	; 801041c <erff+0x308>
 8010216:	eee7 6a00 	vfma.f32	s13, s14, s0
 801021a:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8010420 <erff+0x30c>
 801021e:	eea6 7a80 	vfma.f32	s14, s13, s0
 8010222:	eddf 6a80 	vldr	s13, [pc, #512]	; 8010424 <erff+0x310>
 8010226:	eee7 6a00 	vfma.f32	s13, s14, s0
 801022a:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8010428 <erff+0x314>
 801022e:	eea6 7a80 	vfma.f32	s14, s13, s0
 8010232:	eddf 6a7e 	vldr	s13, [pc, #504]	; 801042c <erff+0x318>
 8010236:	eee0 6a06 	vfma.f32	s13, s0, s12
 801023a:	ed9f 6a7d 	vldr	s12, [pc, #500]	; 8010430 <erff+0x31c>
 801023e:	eea6 6a80 	vfma.f32	s12, s13, s0
 8010242:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8010434 <erff+0x320>
 8010246:	eee6 6a00 	vfma.f32	s13, s12, s0
 801024a:	ed9f 6a7b 	vldr	s12, [pc, #492]	; 8010438 <erff+0x324>
 801024e:	eea6 6a80 	vfma.f32	s12, s13, s0
 8010252:	eddf 6a7a 	vldr	s13, [pc, #488]	; 801043c <erff+0x328>
 8010256:	eee6 6a00 	vfma.f32	s13, s12, s0
 801025a:	eee6 7a80 	vfma.f32	s15, s13, s0
 801025e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8010262:	bfab      	itete	ge
 8010264:	eddf 7a76 	vldrge	s15, [pc, #472]	; 8010440 <erff+0x32c>
 8010268:	eddf 7a76 	vldrlt	s15, [pc, #472]	; 8010444 <erff+0x330>
 801026c:	ee30 0a27 	vaddge.f32	s0, s0, s15
 8010270:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 8010274:	e768      	b.n	8010148 <erff+0x34>
 8010276:	4b74      	ldr	r3, [pc, #464]	; (8010448 <erff+0x334>)
 8010278:	429d      	cmp	r5, r3
 801027a:	dd08      	ble.n	801028e <erff+0x17a>
 801027c:	2c00      	cmp	r4, #0
 801027e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010282:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8010286:	bfb8      	it	lt
 8010288:	eeb0 0a67 	vmovlt.f32	s0, s15
 801028c:	e75c      	b.n	8010148 <erff+0x34>
 801028e:	f000 f91b 	bl	80104c8 <fabsf>
 8010292:	4b6e      	ldr	r3, [pc, #440]	; (801044c <erff+0x338>)
 8010294:	ee60 7a00 	vmul.f32	s15, s0, s0
 8010298:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 801029c:	429d      	cmp	r5, r3
 801029e:	ee89 7aa7 	vdiv.f32	s14, s19, s15
 80102a2:	eeb0 8a40 	vmov.f32	s16, s0
 80102a6:	dc64      	bgt.n	8010372 <erff+0x25e>
 80102a8:	eddf 7a69 	vldr	s15, [pc, #420]	; 8010450 <erff+0x33c>
 80102ac:	eddf 6a69 	vldr	s13, [pc, #420]	; 8010454 <erff+0x340>
 80102b0:	ed9f 9a69 	vldr	s18, [pc, #420]	; 8010458 <erff+0x344>
 80102b4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80102b8:	eddf 7a68 	vldr	s15, [pc, #416]	; 801045c <erff+0x348>
 80102bc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80102c0:	eddf 6a67 	vldr	s13, [pc, #412]	; 8010460 <erff+0x34c>
 80102c4:	eee7 6a87 	vfma.f32	s13, s15, s14
 80102c8:	eddf 7a66 	vldr	s15, [pc, #408]	; 8010464 <erff+0x350>
 80102cc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80102d0:	eddf 6a65 	vldr	s13, [pc, #404]	; 8010468 <erff+0x354>
 80102d4:	eee7 6a87 	vfma.f32	s13, s15, s14
 80102d8:	eddf 7a64 	vldr	s15, [pc, #400]	; 801046c <erff+0x358>
 80102dc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80102e0:	eddf 6a63 	vldr	s13, [pc, #396]	; 8010470 <erff+0x35c>
 80102e4:	eea7 9a87 	vfma.f32	s18, s15, s14
 80102e8:	eddf 7a62 	vldr	s15, [pc, #392]	; 8010474 <erff+0x360>
 80102ec:	eee7 7a26 	vfma.f32	s15, s14, s13
 80102f0:	eddf 6a61 	vldr	s13, [pc, #388]	; 8010478 <erff+0x364>
 80102f4:	eee7 6a87 	vfma.f32	s13, s15, s14
 80102f8:	eddf 7a60 	vldr	s15, [pc, #384]	; 801047c <erff+0x368>
 80102fc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010300:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010480 <erff+0x36c>
 8010304:	eee7 6a87 	vfma.f32	s13, s15, s14
 8010308:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8010484 <erff+0x370>
 801030c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010310:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8010488 <erff+0x374>
 8010314:	eee7 6a87 	vfma.f32	s13, s15, s14
 8010318:	eddf 7a5c 	vldr	s15, [pc, #368]	; 801048c <erff+0x378>
 801031c:	ee18 3a10 	vmov	r3, s16
 8010320:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010324:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010328:	f023 030f 	bic.w	r3, r3, #15
 801032c:	ee08 3a90 	vmov	s17, r3
 8010330:	eef0 aa69 	vmov.f32	s21, s19
 8010334:	eebe 0a02 	vmov.f32	s0, #226	; 0xbf100000 -0.5625000
 8010338:	eee7 aa87 	vfma.f32	s21, s15, s14
 801033c:	eea8 0ae8 	vfms.f32	s0, s17, s17
 8010340:	f001 f9fa 	bl	8011738 <__ieee754_expf>
 8010344:	eeb0 aa40 	vmov.f32	s20, s0
 8010348:	ee89 0a2a 	vdiv.f32	s0, s18, s21
 801034c:	ee78 7ac8 	vsub.f32	s15, s17, s16
 8010350:	ee78 8a28 	vadd.f32	s17, s16, s17
 8010354:	eea7 0aa8 	vfma.f32	s0, s15, s17
 8010358:	f001 f9ee 	bl	8011738 <__ieee754_expf>
 801035c:	ee2a 0a00 	vmul.f32	s0, s20, s0
 8010360:	2c00      	cmp	r4, #0
 8010362:	eec0 7a08 	vdiv.f32	s15, s0, s16
 8010366:	bfac      	ite	ge
 8010368:	ee39 0ae7 	vsubge.f32	s0, s19, s15
 801036c:	ee37 0ae9 	vsublt.f32	s0, s15, s19
 8010370:	e6ea      	b.n	8010148 <erff+0x34>
 8010372:	eddf 6a47 	vldr	s13, [pc, #284]	; 8010490 <erff+0x37c>
 8010376:	eddf 7a47 	vldr	s15, [pc, #284]	; 8010494 <erff+0x380>
 801037a:	ed9f 9a47 	vldr	s18, [pc, #284]	; 8010498 <erff+0x384>
 801037e:	eee7 7a26 	vfma.f32	s15, s14, s13
 8010382:	eddf 6a46 	vldr	s13, [pc, #280]	; 801049c <erff+0x388>
 8010386:	eee7 6a87 	vfma.f32	s13, s15, s14
 801038a:	eddf 7a45 	vldr	s15, [pc, #276]	; 80104a0 <erff+0x38c>
 801038e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010392:	eddf 6a44 	vldr	s13, [pc, #272]	; 80104a4 <erff+0x390>
 8010396:	eee7 6a87 	vfma.f32	s13, s15, s14
 801039a:	eddf 7a43 	vldr	s15, [pc, #268]	; 80104a8 <erff+0x394>
 801039e:	eee6 7a87 	vfma.f32	s15, s13, s14
 80103a2:	eddf 6a42 	vldr	s13, [pc, #264]	; 80104ac <erff+0x398>
 80103a6:	eea7 9a87 	vfma.f32	s18, s15, s14
 80103aa:	eddf 7a41 	vldr	s15, [pc, #260]	; 80104b0 <erff+0x39c>
 80103ae:	eee7 6a27 	vfma.f32	s13, s14, s15
 80103b2:	eddf 7a40 	vldr	s15, [pc, #256]	; 80104b4 <erff+0x3a0>
 80103b6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80103ba:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80104b8 <erff+0x3a4>
 80103be:	eee7 6a87 	vfma.f32	s13, s15, s14
 80103c2:	eddf 7a3e 	vldr	s15, [pc, #248]	; 80104bc <erff+0x3a8>
 80103c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80103ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80104c0 <erff+0x3ac>
 80103ce:	eee7 6a87 	vfma.f32	s13, s15, s14
 80103d2:	eddf 7a3c 	vldr	s15, [pc, #240]	; 80104c4 <erff+0x3b0>
 80103d6:	e7a1      	b.n	801031c <erff+0x208>
 80103d8:	3f57ffff 	.word	0x3f57ffff
 80103dc:	3f8375d4 	.word	0x3f8375d4
 80103e0:	3e0375d4 	.word	0x3e0375d4
 80103e4:	b7c756b1 	.word	0xb7c756b1
 80103e8:	bbbd1489 	.word	0xbbbd1489
 80103ec:	b684e21a 	.word	0xb684e21a
 80103f0:	bce9528f 	.word	0xbce9528f
 80103f4:	bea66beb 	.word	0xbea66beb
 80103f8:	390aee49 	.word	0x390aee49
 80103fc:	3ba68116 	.word	0x3ba68116
 8010400:	3d852a63 	.word	0x3d852a63
 8010404:	3ecbbbce 	.word	0x3ecbbbce
 8010408:	3f9fffff 	.word	0x3f9fffff
 801040c:	bb0df9c0 	.word	0xbb0df9c0
 8010410:	3d1151b3 	.word	0x3d1151b3
 8010414:	3c445aa3 	.word	0x3c445aa3
 8010418:	bde31cc2 	.word	0xbde31cc2
 801041c:	3ea2fe54 	.word	0x3ea2fe54
 8010420:	bebe9208 	.word	0xbebe9208
 8010424:	3ed46805 	.word	0x3ed46805
 8010428:	bb1acdc6 	.word	0xbb1acdc6
 801042c:	3c5f6e13 	.word	0x3c5f6e13
 8010430:	3e013307 	.word	0x3e013307
 8010434:	3d931ae7 	.word	0x3d931ae7
 8010438:	3f0a5785 	.word	0x3f0a5785
 801043c:	3dd9f331 	.word	0x3dd9f331
 8010440:	3f58560b 	.word	0x3f58560b
 8010444:	bf58560b 	.word	0xbf58560b
 8010448:	40bfffff 	.word	0x40bfffff
 801044c:	4036db6d 	.word	0x4036db6d
 8010450:	c11d077e 	.word	0xc11d077e
 8010454:	c2a2932b 	.word	0xc2a2932b
 8010458:	bc21a093 	.word	0xbc21a093
 801045c:	c3389ae7 	.word	0xc3389ae7
 8010460:	c322658c 	.word	0xc322658c
 8010464:	c2798057 	.word	0xc2798057
 8010468:	c128f022 	.word	0xc128f022
 801046c:	bf31a0b7 	.word	0xbf31a0b7
 8010470:	bd777f97 	.word	0xbd777f97
 8010474:	40d23f7c 	.word	0x40d23f7c
 8010478:	42d9451f 	.word	0x42d9451f
 801047c:	43d6810b 	.word	0x43d6810b
 8010480:	442158c9 	.word	0x442158c9
 8010484:	43d9486f 	.word	0x43d9486f
 8010488:	4309a863 	.word	0x4309a863
 801048c:	419d35ce 	.word	0x419d35ce
 8010490:	c3f1c275 	.word	0xc3f1c275
 8010494:	c480230b 	.word	0xc480230b
 8010498:	bc21a092 	.word	0xbc21a092
 801049c:	c41f6441 	.word	0xc41f6441
 80104a0:	c320a2ea 	.word	0xc320a2ea
 80104a4:	c18e104b 	.word	0xc18e104b
 80104a8:	bf4c9dd4 	.word	0xbf4c9dd4
 80104ac:	43ed43a7 	.word	0x43ed43a7
 80104b0:	c1b38712 	.word	0xc1b38712
 80104b4:	451f90ce 	.word	0x451f90ce
 80104b8:	4547fdbb 	.word	0x4547fdbb
 80104bc:	44c01759 	.word	0x44c01759
 80104c0:	43a2e571 	.word	0x43a2e571
 80104c4:	41f2b459 	.word	0x41f2b459

080104c8 <fabsf>:
 80104c8:	ee10 3a10 	vmov	r3, s0
 80104cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80104d0:	ee00 3a10 	vmov	s0, r3
 80104d4:	4770      	bx	lr
	...

080104d8 <floorf>:
 80104d8:	ee10 3a10 	vmov	r3, s0
 80104dc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80104e0:	3a7f      	subs	r2, #127	; 0x7f
 80104e2:	2a16      	cmp	r2, #22
 80104e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80104e8:	dc2a      	bgt.n	8010540 <floorf+0x68>
 80104ea:	2a00      	cmp	r2, #0
 80104ec:	da11      	bge.n	8010512 <floorf+0x3a>
 80104ee:	eddf 7a18 	vldr	s15, [pc, #96]	; 8010550 <floorf+0x78>
 80104f2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80104f6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80104fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104fe:	dd05      	ble.n	801050c <floorf+0x34>
 8010500:	2b00      	cmp	r3, #0
 8010502:	da23      	bge.n	801054c <floorf+0x74>
 8010504:	4a13      	ldr	r2, [pc, #76]	; (8010554 <floorf+0x7c>)
 8010506:	2900      	cmp	r1, #0
 8010508:	bf18      	it	ne
 801050a:	4613      	movne	r3, r2
 801050c:	ee00 3a10 	vmov	s0, r3
 8010510:	4770      	bx	lr
 8010512:	4911      	ldr	r1, [pc, #68]	; (8010558 <floorf+0x80>)
 8010514:	4111      	asrs	r1, r2
 8010516:	420b      	tst	r3, r1
 8010518:	d0fa      	beq.n	8010510 <floorf+0x38>
 801051a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8010550 <floorf+0x78>
 801051e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010522:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801052a:	ddef      	ble.n	801050c <floorf+0x34>
 801052c:	2b00      	cmp	r3, #0
 801052e:	bfbe      	ittt	lt
 8010530:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8010534:	fa40 f202 	asrlt.w	r2, r0, r2
 8010538:	189b      	addlt	r3, r3, r2
 801053a:	ea23 0301 	bic.w	r3, r3, r1
 801053e:	e7e5      	b.n	801050c <floorf+0x34>
 8010540:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010544:	d3e4      	bcc.n	8010510 <floorf+0x38>
 8010546:	ee30 0a00 	vadd.f32	s0, s0, s0
 801054a:	4770      	bx	lr
 801054c:	2300      	movs	r3, #0
 801054e:	e7dd      	b.n	801050c <floorf+0x34>
 8010550:	7149f2ca 	.word	0x7149f2ca
 8010554:	bf800000 	.word	0xbf800000
 8010558:	007fffff 	.word	0x007fffff

0801055c <log1pf>:
 801055c:	ee10 2a10 	vmov	r2, s0
 8010560:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8010564:	eef0 7a40 	vmov.f32	s15, s0
 8010568:	db04      	blt.n	8010574 <log1pf+0x18>
 801056a:	ee70 7a00 	vadd.f32	s15, s0, s0
 801056e:	eeb0 0a67 	vmov.f32	s0, s15
 8010572:	4770      	bx	lr
 8010574:	4b6a      	ldr	r3, [pc, #424]	; (8010720 <log1pf+0x1c4>)
 8010576:	429a      	cmp	r2, r3
 8010578:	dc6f      	bgt.n	801065a <log1pf+0xfe>
 801057a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801057e:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8010582:	db0b      	blt.n	801059c <log1pf+0x40>
 8010584:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010588:	eeb4 0a47 	vcmp.f32	s0, s14
 801058c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010590:	d102      	bne.n	8010598 <log1pf+0x3c>
 8010592:	2001      	movs	r0, #1
 8010594:	f003 b8de 	b.w	8013754 <__math_divzerof>
 8010598:	f003 b8ee 	b.w	8013778 <__math_invalidf>
 801059c:	f1b3 5f44 	cmp.w	r3, #822083584	; 0x31000000
 80105a0:	da12      	bge.n	80105c8 <log1pf+0x6c>
 80105a2:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8010724 <log1pf+0x1c8>
 80105a6:	ee30 7a07 	vadd.f32	s14, s0, s14
 80105aa:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80105ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105b2:	dd02      	ble.n	80105ba <log1pf+0x5e>
 80105b4:	f1b3 5f12 	cmp.w	r3, #612368384	; 0x24800000
 80105b8:	dbd9      	blt.n	801056e <log1pf+0x12>
 80105ba:	ee67 6ae7 	vnmul.f32	s13, s15, s15
 80105be:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80105c2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80105c6:	e7d2      	b.n	801056e <log1pf+0x12>
 80105c8:	4b57      	ldr	r3, [pc, #348]	; (8010728 <log1pf+0x1cc>)
 80105ca:	441a      	add	r2, r3
 80105cc:	429a      	cmp	r2, r3
 80105ce:	d84c      	bhi.n	801066a <log1pf+0x10e>
 80105d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80105d4:	ee77 6a87 	vadd.f32	s13, s15, s14
 80105d8:	ee16 2a90 	vmov	r2, s13
 80105dc:	15d3      	asrs	r3, r2, #23
 80105de:	3b7f      	subs	r3, #127	; 0x7f
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	bfcb      	itete	gt
 80105e4:	ee76 7ae7 	vsubgt.f32	s15, s13, s15
 80105e8:	ee36 7ac7 	vsuble.f32	s14, s13, s14
 80105ec:	ee77 7a67 	vsubgt.f32	s15, s14, s15
 80105f0:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 80105f4:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80105f8:	494c      	ldr	r1, [pc, #304]	; (801072c <log1pf+0x1d0>)
 80105fa:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80105fe:	428a      	cmp	r2, r1
 8010600:	bfc9      	itett	gt
 8010602:	f042 517c 	orrgt.w	r1, r2, #1056964608	; 0x3f000000
 8010606:	f042 517e 	orrle.w	r1, r2, #1065353216	; 0x3f800000
 801060a:	f5c2 0200 	rsbgt	r2, r2, #8388608	; 0x800000
 801060e:	3301      	addgt	r3, #1
 8010610:	bfc8      	it	gt
 8010612:	1092      	asrgt	r2, r2, #2
 8010614:	ee07 1a10 	vmov	s14, r1
 8010618:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801061c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010620:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8010624:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8010628:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801062c:	bbea      	cbnz	r2, 80106aa <log1pf+0x14e>
 801062e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010636:	d11b      	bne.n	8010670 <log1pf+0x114>
 8010638:	2b00      	cmp	r3, #0
 801063a:	d06d      	beq.n	8010718 <log1pf+0x1bc>
 801063c:	ee07 3a90 	vmov	s15, r3
 8010640:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8010730 <log1pf+0x1d4>
 8010644:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010648:	eef0 7a46 	vmov.f32	s15, s12
 801064c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8010650:	eddf 6a38 	vldr	s13, [pc, #224]	; 8010734 <log1pf+0x1d8>
 8010654:	eee7 7a26 	vfma.f32	s15, s14, s13
 8010658:	e789      	b.n	801056e <log1pf+0x12>
 801065a:	f1b2 4fb4 	cmp.w	r2, #1509949440	; 0x5a000000
 801065e:	dbb7      	blt.n	80105d0 <log1pf+0x74>
 8010660:	15d3      	asrs	r3, r2, #23
 8010662:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8010738 <log1pf+0x1dc>
 8010666:	3b7f      	subs	r3, #127	; 0x7f
 8010668:	e7c6      	b.n	80105f8 <log1pf+0x9c>
 801066a:	2201      	movs	r2, #1
 801066c:	2300      	movs	r3, #0
 801066e:	e7d7      	b.n	8010620 <log1pf+0xc4>
 8010670:	eddf 5a32 	vldr	s11, [pc, #200]	; 801073c <log1pf+0x1e0>
 8010674:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010678:	eea7 7ae5 	vfms.f32	s14, s15, s11
 801067c:	ee67 6a26 	vmul.f32	s13, s14, s13
 8010680:	b913      	cbnz	r3, 8010688 <log1pf+0x12c>
 8010682:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010686:	e772      	b.n	801056e <log1pf+0x12>
 8010688:	ee07 3a10 	vmov	s14, r3
 801068c:	eddf 5a28 	vldr	s11, [pc, #160]	; 8010730 <log1pf+0x1d4>
 8010690:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010694:	eea7 6a25 	vfma.f32	s12, s14, s11
 8010698:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801069c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80106a0:	eddf 6a24 	vldr	s13, [pc, #144]	; 8010734 <log1pf+0x1d8>
 80106a4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80106a8:	e761      	b.n	801056e <log1pf+0x12>
 80106aa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80106ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80106b2:	ed9f 5a23 	vldr	s10, [pc, #140]	; 8010740 <log1pf+0x1e4>
 80106b6:	eddf 4a23 	vldr	s9, [pc, #140]	; 8010744 <log1pf+0x1e8>
 80106ba:	eec7 5a87 	vdiv.f32	s11, s15, s14
 80106be:	ee25 7aa5 	vmul.f32	s14, s11, s11
 80106c2:	eee7 4a05 	vfma.f32	s9, s14, s10
 80106c6:	ed9f 5a20 	vldr	s10, [pc, #128]	; 8010748 <log1pf+0x1ec>
 80106ca:	eea4 5a87 	vfma.f32	s10, s9, s14
 80106ce:	eddf 4a1f 	vldr	s9, [pc, #124]	; 801074c <log1pf+0x1f0>
 80106d2:	eee5 4a07 	vfma.f32	s9, s10, s14
 80106d6:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 8010750 <log1pf+0x1f4>
 80106da:	eea4 5a87 	vfma.f32	s10, s9, s14
 80106de:	eddf 4a1d 	vldr	s9, [pc, #116]	; 8010754 <log1pf+0x1f8>
 80106e2:	eee5 4a07 	vfma.f32	s9, s10, s14
 80106e6:	ed9f 5a15 	vldr	s10, [pc, #84]	; 801073c <log1pf+0x1e0>
 80106ea:	eea4 5a87 	vfma.f32	s10, s9, s14
 80106ee:	eef0 4a66 	vmov.f32	s9, s13
 80106f2:	eee5 4a07 	vfma.f32	s9, s10, s14
 80106f6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80106fa:	b913      	cbnz	r3, 8010702 <log1pf+0x1a6>
 80106fc:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8010700:	e7bf      	b.n	8010682 <log1pf+0x126>
 8010702:	ee07 3a10 	vmov	s14, r3
 8010706:	ed9f 5a0a 	vldr	s10, [pc, #40]	; 8010730 <log1pf+0x1d4>
 801070a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801070e:	eea7 6a05 	vfma.f32	s12, s14, s10
 8010712:	ee36 6a25 	vadd.f32	s12, s12, s11
 8010716:	e7bf      	b.n	8010698 <log1pf+0x13c>
 8010718:	eddf 7a07 	vldr	s15, [pc, #28]	; 8010738 <log1pf+0x1dc>
 801071c:	e727      	b.n	801056e <log1pf+0x12>
 801071e:	bf00      	nop
 8010720:	3ed413d6 	.word	0x3ed413d6
 8010724:	4c000000 	.word	0x4c000000
 8010728:	416a09e0 	.word	0x416a09e0
 801072c:	003504f6 	.word	0x003504f6
 8010730:	3717f7d1 	.word	0x3717f7d1
 8010734:	3f317180 	.word	0x3f317180
 8010738:	00000000 	.word	0x00000000
 801073c:	3f2aaaab 	.word	0x3f2aaaab
 8010740:	3e178897 	.word	0x3e178897
 8010744:	3e1cd04f 	.word	0x3e1cd04f
 8010748:	3e3a3325 	.word	0x3e3a3325
 801074c:	3e638e29 	.word	0x3e638e29
 8010750:	3e924925 	.word	0x3e924925
 8010754:	3ecccccd 	.word	0x3ecccccd

08010758 <roundf>:
 8010758:	ee10 0a10 	vmov	r0, s0
 801075c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8010760:	3a7f      	subs	r2, #127	; 0x7f
 8010762:	2a16      	cmp	r2, #22
 8010764:	dc15      	bgt.n	8010792 <roundf+0x3a>
 8010766:	2a00      	cmp	r2, #0
 8010768:	da08      	bge.n	801077c <roundf+0x24>
 801076a:	3201      	adds	r2, #1
 801076c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8010770:	d101      	bne.n	8010776 <roundf+0x1e>
 8010772:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8010776:	ee00 3a10 	vmov	s0, r3
 801077a:	4770      	bx	lr
 801077c:	4907      	ldr	r1, [pc, #28]	; (801079c <roundf+0x44>)
 801077e:	4111      	asrs	r1, r2
 8010780:	4208      	tst	r0, r1
 8010782:	d0fa      	beq.n	801077a <roundf+0x22>
 8010784:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010788:	4113      	asrs	r3, r2
 801078a:	4403      	add	r3, r0
 801078c:	ea23 0301 	bic.w	r3, r3, r1
 8010790:	e7f1      	b.n	8010776 <roundf+0x1e>
 8010792:	2a80      	cmp	r2, #128	; 0x80
 8010794:	d1f1      	bne.n	801077a <roundf+0x22>
 8010796:	ee30 0a00 	vadd.f32	s0, s0, s0
 801079a:	4770      	bx	lr
 801079c:	007fffff 	.word	0x007fffff

080107a0 <sinf>:
 80107a0:	ee10 3a10 	vmov	r3, s0
 80107a4:	b507      	push	{r0, r1, r2, lr}
 80107a6:	4a1f      	ldr	r2, [pc, #124]	; (8010824 <sinf+0x84>)
 80107a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80107ac:	4293      	cmp	r3, r2
 80107ae:	dc07      	bgt.n	80107c0 <sinf+0x20>
 80107b0:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8010828 <sinf+0x88>
 80107b4:	2000      	movs	r0, #0
 80107b6:	b003      	add	sp, #12
 80107b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80107bc:	f002 be80 	b.w	80134c0 <__kernel_sinf>
 80107c0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80107c4:	db04      	blt.n	80107d0 <sinf+0x30>
 80107c6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80107ca:	b003      	add	sp, #12
 80107cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80107d0:	4668      	mov	r0, sp
 80107d2:	f001 fd17 	bl	8012204 <__ieee754_rem_pio2f>
 80107d6:	f000 0003 	and.w	r0, r0, #3
 80107da:	2801      	cmp	r0, #1
 80107dc:	d00a      	beq.n	80107f4 <sinf+0x54>
 80107de:	2802      	cmp	r0, #2
 80107e0:	d00f      	beq.n	8010802 <sinf+0x62>
 80107e2:	b9c0      	cbnz	r0, 8010816 <sinf+0x76>
 80107e4:	eddd 0a01 	vldr	s1, [sp, #4]
 80107e8:	ed9d 0a00 	vldr	s0, [sp]
 80107ec:	2001      	movs	r0, #1
 80107ee:	f002 fe67 	bl	80134c0 <__kernel_sinf>
 80107f2:	e7ea      	b.n	80107ca <sinf+0x2a>
 80107f4:	eddd 0a01 	vldr	s1, [sp, #4]
 80107f8:	ed9d 0a00 	vldr	s0, [sp]
 80107fc:	f002 fb8a 	bl	8012f14 <__kernel_cosf>
 8010800:	e7e3      	b.n	80107ca <sinf+0x2a>
 8010802:	eddd 0a01 	vldr	s1, [sp, #4]
 8010806:	ed9d 0a00 	vldr	s0, [sp]
 801080a:	2001      	movs	r0, #1
 801080c:	f002 fe58 	bl	80134c0 <__kernel_sinf>
 8010810:	eeb1 0a40 	vneg.f32	s0, s0
 8010814:	e7d9      	b.n	80107ca <sinf+0x2a>
 8010816:	eddd 0a01 	vldr	s1, [sp, #4]
 801081a:	ed9d 0a00 	vldr	s0, [sp]
 801081e:	f002 fb79 	bl	8012f14 <__kernel_cosf>
 8010822:	e7f5      	b.n	8010810 <sinf+0x70>
 8010824:	3f490fd8 	.word	0x3f490fd8
 8010828:	00000000 	.word	0x00000000

0801082c <tanf>:
 801082c:	ee10 3a10 	vmov	r3, s0
 8010830:	b507      	push	{r0, r1, r2, lr}
 8010832:	4a12      	ldr	r2, [pc, #72]	; (801087c <tanf+0x50>)
 8010834:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010838:	4293      	cmp	r3, r2
 801083a:	dc07      	bgt.n	801084c <tanf+0x20>
 801083c:	eddf 0a10 	vldr	s1, [pc, #64]	; 8010880 <tanf+0x54>
 8010840:	2001      	movs	r0, #1
 8010842:	b003      	add	sp, #12
 8010844:	f85d eb04 	ldr.w	lr, [sp], #4
 8010848:	f002 be82 	b.w	8013550 <__kernel_tanf>
 801084c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010850:	db04      	blt.n	801085c <tanf+0x30>
 8010852:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010856:	b003      	add	sp, #12
 8010858:	f85d fb04 	ldr.w	pc, [sp], #4
 801085c:	4668      	mov	r0, sp
 801085e:	f001 fcd1 	bl	8012204 <__ieee754_rem_pio2f>
 8010862:	0040      	lsls	r0, r0, #1
 8010864:	f000 0002 	and.w	r0, r0, #2
 8010868:	eddd 0a01 	vldr	s1, [sp, #4]
 801086c:	ed9d 0a00 	vldr	s0, [sp]
 8010870:	f1c0 0001 	rsb	r0, r0, #1
 8010874:	f002 fe6c 	bl	8013550 <__kernel_tanf>
 8010878:	e7ed      	b.n	8010856 <tanf+0x2a>
 801087a:	bf00      	nop
 801087c:	3f490fda 	.word	0x3f490fda
 8010880:	00000000 	.word	0x00000000

08010884 <tanhf>:
 8010884:	b510      	push	{r4, lr}
 8010886:	ee10 4a10 	vmov	r4, s0
 801088a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801088e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010892:	ed2d 8b02 	vpush	{d8}
 8010896:	eeb0 7a40 	vmov.f32	s14, s0
 801089a:	db0c      	blt.n	80108b6 <tanhf+0x32>
 801089c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80108a0:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80108a4:	2c00      	cmp	r4, #0
 80108a6:	bfac      	ite	ge
 80108a8:	ee37 0a80 	vaddge.f32	s0, s15, s0
 80108ac:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 80108b0:	ecbd 8b02 	vpop	{d8}
 80108b4:	bd10      	pop	{r4, pc}
 80108b6:	4a1b      	ldr	r2, [pc, #108]	; (8010924 <tanhf+0xa0>)
 80108b8:	4293      	cmp	r3, r2
 80108ba:	dc30      	bgt.n	801091e <tanhf+0x9a>
 80108bc:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 80108c0:	da06      	bge.n	80108d0 <tanhf+0x4c>
 80108c2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80108c6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80108ca:	ee27 0a80 	vmul.f32	s0, s15, s0
 80108ce:	e7ef      	b.n	80108b0 <tanhf+0x2c>
 80108d0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80108d4:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 80108d8:	db12      	blt.n	8010900 <tanhf+0x7c>
 80108da:	f7ff fdf5 	bl	80104c8 <fabsf>
 80108de:	ee30 0a00 	vadd.f32	s0, s0, s0
 80108e2:	f003 f867 	bl	80139b4 <expm1f>
 80108e6:	ee30 0a08 	vadd.f32	s0, s0, s16
 80108ea:	eec8 7a00 	vdiv.f32	s15, s16, s0
 80108ee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80108f2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80108f6:	2c00      	cmp	r4, #0
 80108f8:	bfb8      	it	lt
 80108fa:	eeb1 0a40 	vneglt.f32	s0, s0
 80108fe:	e7d7      	b.n	80108b0 <tanhf+0x2c>
 8010900:	f7ff fde2 	bl	80104c8 <fabsf>
 8010904:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8010908:	ee20 0a27 	vmul.f32	s0, s0, s15
 801090c:	f003 f852 	bl	80139b4 <expm1f>
 8010910:	ee70 7a08 	vadd.f32	s15, s0, s16
 8010914:	eeb1 7a40 	vneg.f32	s14, s0
 8010918:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801091c:	e7eb      	b.n	80108f6 <tanhf+0x72>
 801091e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010922:	e7e8      	b.n	80108f6 <tanhf+0x72>
 8010924:	41afffff 	.word	0x41afffff

08010928 <acosf>:
 8010928:	b508      	push	{r3, lr}
 801092a:	ed2d 8b02 	vpush	{d8}
 801092e:	eeb0 8a40 	vmov.f32	s16, s0
 8010932:	f000 fc29 	bl	8011188 <__ieee754_acosf>
 8010936:	eeb4 8a48 	vcmp.f32	s16, s16
 801093a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801093e:	eef0 8a40 	vmov.f32	s17, s0
 8010942:	d615      	bvs.n	8010970 <acosf+0x48>
 8010944:	eeb0 0a48 	vmov.f32	s0, s16
 8010948:	f7ff fdbe 	bl	80104c8 <fabsf>
 801094c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010950:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010958:	dd0a      	ble.n	8010970 <acosf+0x48>
 801095a:	f7fc f9fb 	bl	800cd54 <__errno>
 801095e:	ecbd 8b02 	vpop	{d8}
 8010962:	2321      	movs	r3, #33	; 0x21
 8010964:	6003      	str	r3, [r0, #0]
 8010966:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801096a:	4804      	ldr	r0, [pc, #16]	; (801097c <acosf+0x54>)
 801096c:	f003 b94c 	b.w	8013c08 <nanf>
 8010970:	eeb0 0a68 	vmov.f32	s0, s17
 8010974:	ecbd 8b02 	vpop	{d8}
 8010978:	bd08      	pop	{r3, pc}
 801097a:	bf00      	nop
 801097c:	08013e23 	.word	0x08013e23

08010980 <acoshf>:
 8010980:	b508      	push	{r3, lr}
 8010982:	ed2d 8b02 	vpush	{d8}
 8010986:	eeb0 8a40 	vmov.f32	s16, s0
 801098a:	f000 fcf5 	bl	8011378 <__ieee754_acoshf>
 801098e:	eeb4 8a48 	vcmp.f32	s16, s16
 8010992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010996:	d60e      	bvs.n	80109b6 <acoshf+0x36>
 8010998:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801099c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80109a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109a4:	d507      	bpl.n	80109b6 <acoshf+0x36>
 80109a6:	f7fc f9d5 	bl	800cd54 <__errno>
 80109aa:	eddf 7a04 	vldr	s15, [pc, #16]	; 80109bc <acoshf+0x3c>
 80109ae:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80109b2:	2321      	movs	r3, #33	; 0x21
 80109b4:	6003      	str	r3, [r0, #0]
 80109b6:	ecbd 8b02 	vpop	{d8}
 80109ba:	bd08      	pop	{r3, pc}
 80109bc:	00000000 	.word	0x00000000

080109c0 <asinf>:
 80109c0:	b508      	push	{r3, lr}
 80109c2:	ed2d 8b02 	vpush	{d8}
 80109c6:	eeb0 8a40 	vmov.f32	s16, s0
 80109ca:	f000 fd29 	bl	8011420 <__ieee754_asinf>
 80109ce:	eeb4 8a48 	vcmp.f32	s16, s16
 80109d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109d6:	eef0 8a40 	vmov.f32	s17, s0
 80109da:	d615      	bvs.n	8010a08 <asinf+0x48>
 80109dc:	eeb0 0a48 	vmov.f32	s0, s16
 80109e0:	f7ff fd72 	bl	80104c8 <fabsf>
 80109e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80109e8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80109ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109f0:	dd0a      	ble.n	8010a08 <asinf+0x48>
 80109f2:	f7fc f9af 	bl	800cd54 <__errno>
 80109f6:	ecbd 8b02 	vpop	{d8}
 80109fa:	2321      	movs	r3, #33	; 0x21
 80109fc:	6003      	str	r3, [r0, #0]
 80109fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010a02:	4804      	ldr	r0, [pc, #16]	; (8010a14 <asinf+0x54>)
 8010a04:	f003 b900 	b.w	8013c08 <nanf>
 8010a08:	eeb0 0a68 	vmov.f32	s0, s17
 8010a0c:	ecbd 8b02 	vpop	{d8}
 8010a10:	bd08      	pop	{r3, pc}
 8010a12:	bf00      	nop
 8010a14:	08013e23 	.word	0x08013e23

08010a18 <atanhf>:
 8010a18:	b510      	push	{r4, lr}
 8010a1a:	ed2d 8b04 	vpush	{d8-d9}
 8010a1e:	eeb0 8a40 	vmov.f32	s16, s0
 8010a22:	f000 fde3 	bl	80115ec <__ieee754_atanhf>
 8010a26:	eeb4 8a48 	vcmp.f32	s16, s16
 8010a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a2e:	eef0 8a40 	vmov.f32	s17, s0
 8010a32:	d614      	bvs.n	8010a5e <atanhf+0x46>
 8010a34:	eeb0 0a48 	vmov.f32	s0, s16
 8010a38:	f7ff fd46 	bl	80104c8 <fabsf>
 8010a3c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010a40:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a48:	db09      	blt.n	8010a5e <atanhf+0x46>
 8010a4a:	ed9f 9a0a 	vldr	s18, [pc, #40]	; 8010a74 <atanhf+0x5c>
 8010a4e:	f04f 0421 	mov.w	r4, #33	; 0x21
 8010a52:	dd09      	ble.n	8010a68 <atanhf+0x50>
 8010a54:	f7fc f97e 	bl	800cd54 <__errno>
 8010a58:	eec9 8a09 	vdiv.f32	s17, s18, s18
 8010a5c:	6004      	str	r4, [r0, #0]
 8010a5e:	eeb0 0a68 	vmov.f32	s0, s17
 8010a62:	ecbd 8b04 	vpop	{d8-d9}
 8010a66:	bd10      	pop	{r4, pc}
 8010a68:	f7fc f974 	bl	800cd54 <__errno>
 8010a6c:	eec8 8a09 	vdiv.f32	s17, s16, s18
 8010a70:	6004      	str	r4, [r0, #0]
 8010a72:	e7f4      	b.n	8010a5e <atanhf+0x46>
 8010a74:	00000000 	.word	0x00000000

08010a78 <coshf>:
 8010a78:	b508      	push	{r3, lr}
 8010a7a:	ed2d 8b02 	vpush	{d8}
 8010a7e:	eeb0 8a40 	vmov.f32	s16, s0
 8010a82:	f000 fdf9 	bl	8011678 <__ieee754_coshf>
 8010a86:	eeb4 8a48 	vcmp.f32	s16, s16
 8010a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a8e:	eef0 8a40 	vmov.f32	s17, s0
 8010a92:	d610      	bvs.n	8010ab6 <coshf+0x3e>
 8010a94:	eeb0 0a48 	vmov.f32	s0, s16
 8010a98:	f7ff fd16 	bl	80104c8 <fabsf>
 8010a9c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010ac0 <coshf+0x48>
 8010aa0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aa8:	dd05      	ble.n	8010ab6 <coshf+0x3e>
 8010aaa:	f7fc f953 	bl	800cd54 <__errno>
 8010aae:	eddf 8a05 	vldr	s17, [pc, #20]	; 8010ac4 <coshf+0x4c>
 8010ab2:	2322      	movs	r3, #34	; 0x22
 8010ab4:	6003      	str	r3, [r0, #0]
 8010ab6:	eeb0 0a68 	vmov.f32	s0, s17
 8010aba:	ecbd 8b02 	vpop	{d8}
 8010abe:	bd08      	pop	{r3, pc}
 8010ac0:	42b2d4fc 	.word	0x42b2d4fc
 8010ac4:	7f800000 	.word	0x7f800000

08010ac8 <expf>:
 8010ac8:	b508      	push	{r3, lr}
 8010aca:	ed2d 8b02 	vpush	{d8}
 8010ace:	eef0 8a40 	vmov.f32	s17, s0
 8010ad2:	f000 fe31 	bl	8011738 <__ieee754_expf>
 8010ad6:	eeb0 8a40 	vmov.f32	s16, s0
 8010ada:	eeb0 0a68 	vmov.f32	s0, s17
 8010ade:	f003 f885 	bl	8013bec <finitef>
 8010ae2:	b160      	cbz	r0, 8010afe <expf+0x36>
 8010ae4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8010b24 <expf+0x5c>
 8010ae8:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010af0:	dd0a      	ble.n	8010b08 <expf+0x40>
 8010af2:	f7fc f92f 	bl	800cd54 <__errno>
 8010af6:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8010b28 <expf+0x60>
 8010afa:	2322      	movs	r3, #34	; 0x22
 8010afc:	6003      	str	r3, [r0, #0]
 8010afe:	eeb0 0a48 	vmov.f32	s0, s16
 8010b02:	ecbd 8b02 	vpop	{d8}
 8010b06:	bd08      	pop	{r3, pc}
 8010b08:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010b2c <expf+0x64>
 8010b0c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b14:	d5f3      	bpl.n	8010afe <expf+0x36>
 8010b16:	f7fc f91d 	bl	800cd54 <__errno>
 8010b1a:	2322      	movs	r3, #34	; 0x22
 8010b1c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8010b30 <expf+0x68>
 8010b20:	6003      	str	r3, [r0, #0]
 8010b22:	e7ec      	b.n	8010afe <expf+0x36>
 8010b24:	42b17180 	.word	0x42b17180
 8010b28:	7f800000 	.word	0x7f800000
 8010b2c:	c2cff1b5 	.word	0xc2cff1b5
 8010b30:	00000000 	.word	0x00000000

08010b34 <fmodf>:
 8010b34:	b508      	push	{r3, lr}
 8010b36:	ed2d 8b02 	vpush	{d8}
 8010b3a:	eef0 8a40 	vmov.f32	s17, s0
 8010b3e:	eeb0 8a60 	vmov.f32	s16, s1
 8010b42:	f000 fec7 	bl	80118d4 <__ieee754_fmodf>
 8010b46:	eef4 8a48 	vcmp.f32	s17, s16
 8010b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b4e:	d60c      	bvs.n	8010b6a <fmodf+0x36>
 8010b50:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010b70 <fmodf+0x3c>
 8010b54:	eeb4 8a68 	vcmp.f32	s16, s17
 8010b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b5c:	d105      	bne.n	8010b6a <fmodf+0x36>
 8010b5e:	f7fc f8f9 	bl	800cd54 <__errno>
 8010b62:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010b66:	2321      	movs	r3, #33	; 0x21
 8010b68:	6003      	str	r3, [r0, #0]
 8010b6a:	ecbd 8b02 	vpop	{d8}
 8010b6e:	bd08      	pop	{r3, pc}
 8010b70:	00000000 	.word	0x00000000

08010b74 <logf>:
 8010b74:	b508      	push	{r3, lr}
 8010b76:	ed2d 8b02 	vpush	{d8}
 8010b7a:	eeb0 8a40 	vmov.f32	s16, s0
 8010b7e:	f000 ff2b 	bl	80119d8 <__ieee754_logf>
 8010b82:	eeb4 8a48 	vcmp.f32	s16, s16
 8010b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b8a:	d60f      	bvs.n	8010bac <logf+0x38>
 8010b8c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b94:	dc0a      	bgt.n	8010bac <logf+0x38>
 8010b96:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b9e:	d108      	bne.n	8010bb2 <logf+0x3e>
 8010ba0:	f7fc f8d8 	bl	800cd54 <__errno>
 8010ba4:	2322      	movs	r3, #34	; 0x22
 8010ba6:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8010bc8 <logf+0x54>
 8010baa:	6003      	str	r3, [r0, #0]
 8010bac:	ecbd 8b02 	vpop	{d8}
 8010bb0:	bd08      	pop	{r3, pc}
 8010bb2:	f7fc f8cf 	bl	800cd54 <__errno>
 8010bb6:	ecbd 8b02 	vpop	{d8}
 8010bba:	2321      	movs	r3, #33	; 0x21
 8010bbc:	6003      	str	r3, [r0, #0]
 8010bbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010bc2:	4802      	ldr	r0, [pc, #8]	; (8010bcc <logf+0x58>)
 8010bc4:	f003 b820 	b.w	8013c08 <nanf>
 8010bc8:	ff800000 	.word	0xff800000
 8010bcc:	08013e23 	.word	0x08013e23

08010bd0 <log10f>:
 8010bd0:	b508      	push	{r3, lr}
 8010bd2:	ed2d 8b02 	vpush	{d8}
 8010bd6:	eeb0 8a40 	vmov.f32	s16, s0
 8010bda:	f000 ffed 	bl	8011bb8 <__ieee754_log10f>
 8010bde:	eeb4 8a48 	vcmp.f32	s16, s16
 8010be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010be6:	d60f      	bvs.n	8010c08 <log10f+0x38>
 8010be8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bf0:	d80a      	bhi.n	8010c08 <log10f+0x38>
 8010bf2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bfa:	d108      	bne.n	8010c0e <log10f+0x3e>
 8010bfc:	f7fc f8aa 	bl	800cd54 <__errno>
 8010c00:	2322      	movs	r3, #34	; 0x22
 8010c02:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8010c24 <log10f+0x54>
 8010c06:	6003      	str	r3, [r0, #0]
 8010c08:	ecbd 8b02 	vpop	{d8}
 8010c0c:	bd08      	pop	{r3, pc}
 8010c0e:	f7fc f8a1 	bl	800cd54 <__errno>
 8010c12:	ecbd 8b02 	vpop	{d8}
 8010c16:	2321      	movs	r3, #33	; 0x21
 8010c18:	6003      	str	r3, [r0, #0]
 8010c1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010c1e:	4802      	ldr	r0, [pc, #8]	; (8010c28 <log10f+0x58>)
 8010c20:	f002 bff2 	b.w	8013c08 <nanf>
 8010c24:	ff800000 	.word	0xff800000
 8010c28:	08013e23 	.word	0x08013e23

08010c2c <powf>:
 8010c2c:	b508      	push	{r3, lr}
 8010c2e:	ed2d 8b04 	vpush	{d8-d9}
 8010c32:	eeb0 8a60 	vmov.f32	s16, s1
 8010c36:	eeb0 9a40 	vmov.f32	s18, s0
 8010c3a:	f001 f815 	bl	8011c68 <__ieee754_powf>
 8010c3e:	eeb4 8a48 	vcmp.f32	s16, s16
 8010c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c46:	eef0 8a40 	vmov.f32	s17, s0
 8010c4a:	d63e      	bvs.n	8010cca <powf+0x9e>
 8010c4c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8010c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c54:	d112      	bne.n	8010c7c <powf+0x50>
 8010c56:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c5e:	d039      	beq.n	8010cd4 <powf+0xa8>
 8010c60:	eeb0 0a48 	vmov.f32	s0, s16
 8010c64:	f002 ffc2 	bl	8013bec <finitef>
 8010c68:	b378      	cbz	r0, 8010cca <powf+0x9e>
 8010c6a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c72:	d52a      	bpl.n	8010cca <powf+0x9e>
 8010c74:	f7fc f86e 	bl	800cd54 <__errno>
 8010c78:	2322      	movs	r3, #34	; 0x22
 8010c7a:	e014      	b.n	8010ca6 <powf+0x7a>
 8010c7c:	f002 ffb6 	bl	8013bec <finitef>
 8010c80:	b998      	cbnz	r0, 8010caa <powf+0x7e>
 8010c82:	eeb0 0a49 	vmov.f32	s0, s18
 8010c86:	f002 ffb1 	bl	8013bec <finitef>
 8010c8a:	b170      	cbz	r0, 8010caa <powf+0x7e>
 8010c8c:	eeb0 0a48 	vmov.f32	s0, s16
 8010c90:	f002 ffac 	bl	8013bec <finitef>
 8010c94:	b148      	cbz	r0, 8010caa <powf+0x7e>
 8010c96:	eef4 8a68 	vcmp.f32	s17, s17
 8010c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c9e:	d7e9      	bvc.n	8010c74 <powf+0x48>
 8010ca0:	f7fc f858 	bl	800cd54 <__errno>
 8010ca4:	2321      	movs	r3, #33	; 0x21
 8010ca6:	6003      	str	r3, [r0, #0]
 8010ca8:	e00f      	b.n	8010cca <powf+0x9e>
 8010caa:	eef5 8a40 	vcmp.f32	s17, #0.0
 8010cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cb2:	d10a      	bne.n	8010cca <powf+0x9e>
 8010cb4:	eeb0 0a49 	vmov.f32	s0, s18
 8010cb8:	f002 ff98 	bl	8013bec <finitef>
 8010cbc:	b128      	cbz	r0, 8010cca <powf+0x9e>
 8010cbe:	eeb0 0a48 	vmov.f32	s0, s16
 8010cc2:	f002 ff93 	bl	8013bec <finitef>
 8010cc6:	2800      	cmp	r0, #0
 8010cc8:	d1d4      	bne.n	8010c74 <powf+0x48>
 8010cca:	eeb0 0a68 	vmov.f32	s0, s17
 8010cce:	ecbd 8b04 	vpop	{d8-d9}
 8010cd2:	bd08      	pop	{r3, pc}
 8010cd4:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8010cd8:	e7f7      	b.n	8010cca <powf+0x9e>
	...

08010cdc <sinhf>:
 8010cdc:	b508      	push	{r3, lr}
 8010cde:	ed2d 8b02 	vpush	{d8}
 8010ce2:	eef0 8a40 	vmov.f32	s17, s0
 8010ce6:	f001 fbc9 	bl	801247c <__ieee754_sinhf>
 8010cea:	eeb0 8a40 	vmov.f32	s16, s0
 8010cee:	f002 ff7d 	bl	8013bec <finitef>
 8010cf2:	b998      	cbnz	r0, 8010d1c <sinhf+0x40>
 8010cf4:	eeb0 0a68 	vmov.f32	s0, s17
 8010cf8:	f002 ff78 	bl	8013bec <finitef>
 8010cfc:	b170      	cbz	r0, 8010d1c <sinhf+0x40>
 8010cfe:	f7fc f829 	bl	800cd54 <__errno>
 8010d02:	ed9f 8a09 	vldr	s16, [pc, #36]	; 8010d28 <sinhf+0x4c>
 8010d06:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8010d2c <sinhf+0x50>
 8010d0a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8010d0e:	2322      	movs	r3, #34	; 0x22
 8010d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d14:	6003      	str	r3, [r0, #0]
 8010d16:	bfd8      	it	le
 8010d18:	eeb0 8a40 	vmovle.f32	s16, s0
 8010d1c:	eeb0 0a48 	vmov.f32	s0, s16
 8010d20:	ecbd 8b02 	vpop	{d8}
 8010d24:	bd08      	pop	{r3, pc}
 8010d26:	bf00      	nop
 8010d28:	7f800000 	.word	0x7f800000
 8010d2c:	ff800000 	.word	0xff800000

08010d30 <sqrtf>:
 8010d30:	b508      	push	{r3, lr}
 8010d32:	ed2d 8b02 	vpush	{d8}
 8010d36:	eeb0 8a40 	vmov.f32	s16, s0
 8010d3a:	f001 fc0f 	bl	801255c <__ieee754_sqrtf>
 8010d3e:	eeb4 8a48 	vcmp.f32	s16, s16
 8010d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d46:	d60c      	bvs.n	8010d62 <sqrtf+0x32>
 8010d48:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010d68 <sqrtf+0x38>
 8010d4c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d54:	d505      	bpl.n	8010d62 <sqrtf+0x32>
 8010d56:	f7fb fffd 	bl	800cd54 <__errno>
 8010d5a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010d5e:	2321      	movs	r3, #33	; 0x21
 8010d60:	6003      	str	r3, [r0, #0]
 8010d62:	ecbd 8b02 	vpop	{d8}
 8010d66:	bd08      	pop	{r3, pc}
	...

08010d70 <__ieee754_rem_pio2>:
 8010d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d74:	ed2d 8b02 	vpush	{d8}
 8010d78:	ec55 4b10 	vmov	r4, r5, d0
 8010d7c:	4bca      	ldr	r3, [pc, #808]	; (80110a8 <__ieee754_rem_pio2+0x338>)
 8010d7e:	b08b      	sub	sp, #44	; 0x2c
 8010d80:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8010d84:	4598      	cmp	r8, r3
 8010d86:	4682      	mov	sl, r0
 8010d88:	9502      	str	r5, [sp, #8]
 8010d8a:	dc08      	bgt.n	8010d9e <__ieee754_rem_pio2+0x2e>
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	2300      	movs	r3, #0
 8010d90:	ed80 0b00 	vstr	d0, [r0]
 8010d94:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010d98:	f04f 0b00 	mov.w	fp, #0
 8010d9c:	e028      	b.n	8010df0 <__ieee754_rem_pio2+0x80>
 8010d9e:	4bc3      	ldr	r3, [pc, #780]	; (80110ac <__ieee754_rem_pio2+0x33c>)
 8010da0:	4598      	cmp	r8, r3
 8010da2:	dc78      	bgt.n	8010e96 <__ieee754_rem_pio2+0x126>
 8010da4:	9b02      	ldr	r3, [sp, #8]
 8010da6:	4ec2      	ldr	r6, [pc, #776]	; (80110b0 <__ieee754_rem_pio2+0x340>)
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	ee10 0a10 	vmov	r0, s0
 8010dae:	a3b0      	add	r3, pc, #704	; (adr r3, 8011070 <__ieee754_rem_pio2+0x300>)
 8010db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db4:	4629      	mov	r1, r5
 8010db6:	dd39      	ble.n	8010e2c <__ieee754_rem_pio2+0xbc>
 8010db8:	f7f5 face 	bl	8006358 <__aeabi_dsub>
 8010dbc:	45b0      	cmp	r8, r6
 8010dbe:	4604      	mov	r4, r0
 8010dc0:	460d      	mov	r5, r1
 8010dc2:	d01b      	beq.n	8010dfc <__ieee754_rem_pio2+0x8c>
 8010dc4:	a3ac      	add	r3, pc, #688	; (adr r3, 8011078 <__ieee754_rem_pio2+0x308>)
 8010dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dca:	f7f5 fac5 	bl	8006358 <__aeabi_dsub>
 8010dce:	4602      	mov	r2, r0
 8010dd0:	460b      	mov	r3, r1
 8010dd2:	e9ca 2300 	strd	r2, r3, [sl]
 8010dd6:	4620      	mov	r0, r4
 8010dd8:	4629      	mov	r1, r5
 8010dda:	f7f5 fabd 	bl	8006358 <__aeabi_dsub>
 8010dde:	a3a6      	add	r3, pc, #664	; (adr r3, 8011078 <__ieee754_rem_pio2+0x308>)
 8010de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010de4:	f7f5 fab8 	bl	8006358 <__aeabi_dsub>
 8010de8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010dec:	f04f 0b01 	mov.w	fp, #1
 8010df0:	4658      	mov	r0, fp
 8010df2:	b00b      	add	sp, #44	; 0x2c
 8010df4:	ecbd 8b02 	vpop	{d8}
 8010df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dfc:	a3a0      	add	r3, pc, #640	; (adr r3, 8011080 <__ieee754_rem_pio2+0x310>)
 8010dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e02:	f7f5 faa9 	bl	8006358 <__aeabi_dsub>
 8010e06:	a3a0      	add	r3, pc, #640	; (adr r3, 8011088 <__ieee754_rem_pio2+0x318>)
 8010e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e0c:	4604      	mov	r4, r0
 8010e0e:	460d      	mov	r5, r1
 8010e10:	f7f5 faa2 	bl	8006358 <__aeabi_dsub>
 8010e14:	4602      	mov	r2, r0
 8010e16:	460b      	mov	r3, r1
 8010e18:	e9ca 2300 	strd	r2, r3, [sl]
 8010e1c:	4620      	mov	r0, r4
 8010e1e:	4629      	mov	r1, r5
 8010e20:	f7f5 fa9a 	bl	8006358 <__aeabi_dsub>
 8010e24:	a398      	add	r3, pc, #608	; (adr r3, 8011088 <__ieee754_rem_pio2+0x318>)
 8010e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e2a:	e7db      	b.n	8010de4 <__ieee754_rem_pio2+0x74>
 8010e2c:	f7f5 fa96 	bl	800635c <__adddf3>
 8010e30:	45b0      	cmp	r8, r6
 8010e32:	4604      	mov	r4, r0
 8010e34:	460d      	mov	r5, r1
 8010e36:	d016      	beq.n	8010e66 <__ieee754_rem_pio2+0xf6>
 8010e38:	a38f      	add	r3, pc, #572	; (adr r3, 8011078 <__ieee754_rem_pio2+0x308>)
 8010e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e3e:	f7f5 fa8d 	bl	800635c <__adddf3>
 8010e42:	4602      	mov	r2, r0
 8010e44:	460b      	mov	r3, r1
 8010e46:	e9ca 2300 	strd	r2, r3, [sl]
 8010e4a:	4620      	mov	r0, r4
 8010e4c:	4629      	mov	r1, r5
 8010e4e:	f7f5 fa83 	bl	8006358 <__aeabi_dsub>
 8010e52:	a389      	add	r3, pc, #548	; (adr r3, 8011078 <__ieee754_rem_pio2+0x308>)
 8010e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e58:	f7f5 fa80 	bl	800635c <__adddf3>
 8010e5c:	f04f 3bff 	mov.w	fp, #4294967295
 8010e60:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010e64:	e7c4      	b.n	8010df0 <__ieee754_rem_pio2+0x80>
 8010e66:	a386      	add	r3, pc, #536	; (adr r3, 8011080 <__ieee754_rem_pio2+0x310>)
 8010e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e6c:	f7f5 fa76 	bl	800635c <__adddf3>
 8010e70:	a385      	add	r3, pc, #532	; (adr r3, 8011088 <__ieee754_rem_pio2+0x318>)
 8010e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e76:	4604      	mov	r4, r0
 8010e78:	460d      	mov	r5, r1
 8010e7a:	f7f5 fa6f 	bl	800635c <__adddf3>
 8010e7e:	4602      	mov	r2, r0
 8010e80:	460b      	mov	r3, r1
 8010e82:	e9ca 2300 	strd	r2, r3, [sl]
 8010e86:	4620      	mov	r0, r4
 8010e88:	4629      	mov	r1, r5
 8010e8a:	f7f5 fa65 	bl	8006358 <__aeabi_dsub>
 8010e8e:	a37e      	add	r3, pc, #504	; (adr r3, 8011088 <__ieee754_rem_pio2+0x318>)
 8010e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e94:	e7e0      	b.n	8010e58 <__ieee754_rem_pio2+0xe8>
 8010e96:	4b87      	ldr	r3, [pc, #540]	; (80110b4 <__ieee754_rem_pio2+0x344>)
 8010e98:	4598      	cmp	r8, r3
 8010e9a:	f300 80d9 	bgt.w	8011050 <__ieee754_rem_pio2+0x2e0>
 8010e9e:	f002 fc7a 	bl	8013796 <fabs>
 8010ea2:	ec55 4b10 	vmov	r4, r5, d0
 8010ea6:	ee10 0a10 	vmov	r0, s0
 8010eaa:	a379      	add	r3, pc, #484	; (adr r3, 8011090 <__ieee754_rem_pio2+0x320>)
 8010eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eb0:	4629      	mov	r1, r5
 8010eb2:	f7f5 fc09 	bl	80066c8 <__aeabi_dmul>
 8010eb6:	4b80      	ldr	r3, [pc, #512]	; (80110b8 <__ieee754_rem_pio2+0x348>)
 8010eb8:	2200      	movs	r2, #0
 8010eba:	f7f5 fa4f 	bl	800635c <__adddf3>
 8010ebe:	f7f5 feb3 	bl	8006c28 <__aeabi_d2iz>
 8010ec2:	4683      	mov	fp, r0
 8010ec4:	f7f5 fb96 	bl	80065f4 <__aeabi_i2d>
 8010ec8:	4602      	mov	r2, r0
 8010eca:	460b      	mov	r3, r1
 8010ecc:	ec43 2b18 	vmov	d8, r2, r3
 8010ed0:	a367      	add	r3, pc, #412	; (adr r3, 8011070 <__ieee754_rem_pio2+0x300>)
 8010ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ed6:	f7f5 fbf7 	bl	80066c8 <__aeabi_dmul>
 8010eda:	4602      	mov	r2, r0
 8010edc:	460b      	mov	r3, r1
 8010ede:	4620      	mov	r0, r4
 8010ee0:	4629      	mov	r1, r5
 8010ee2:	f7f5 fa39 	bl	8006358 <__aeabi_dsub>
 8010ee6:	a364      	add	r3, pc, #400	; (adr r3, 8011078 <__ieee754_rem_pio2+0x308>)
 8010ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eec:	4606      	mov	r6, r0
 8010eee:	460f      	mov	r7, r1
 8010ef0:	ec51 0b18 	vmov	r0, r1, d8
 8010ef4:	f7f5 fbe8 	bl	80066c8 <__aeabi_dmul>
 8010ef8:	f1bb 0f1f 	cmp.w	fp, #31
 8010efc:	4604      	mov	r4, r0
 8010efe:	460d      	mov	r5, r1
 8010f00:	dc0d      	bgt.n	8010f1e <__ieee754_rem_pio2+0x1ae>
 8010f02:	4b6e      	ldr	r3, [pc, #440]	; (80110bc <__ieee754_rem_pio2+0x34c>)
 8010f04:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f0c:	4543      	cmp	r3, r8
 8010f0e:	d006      	beq.n	8010f1e <__ieee754_rem_pio2+0x1ae>
 8010f10:	4622      	mov	r2, r4
 8010f12:	462b      	mov	r3, r5
 8010f14:	4630      	mov	r0, r6
 8010f16:	4639      	mov	r1, r7
 8010f18:	f7f5 fa1e 	bl	8006358 <__aeabi_dsub>
 8010f1c:	e00f      	b.n	8010f3e <__ieee754_rem_pio2+0x1ce>
 8010f1e:	462b      	mov	r3, r5
 8010f20:	4622      	mov	r2, r4
 8010f22:	4630      	mov	r0, r6
 8010f24:	4639      	mov	r1, r7
 8010f26:	f7f5 fa17 	bl	8006358 <__aeabi_dsub>
 8010f2a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010f2e:	9303      	str	r3, [sp, #12]
 8010f30:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010f34:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8010f38:	f1b8 0f10 	cmp.w	r8, #16
 8010f3c:	dc02      	bgt.n	8010f44 <__ieee754_rem_pio2+0x1d4>
 8010f3e:	e9ca 0100 	strd	r0, r1, [sl]
 8010f42:	e039      	b.n	8010fb8 <__ieee754_rem_pio2+0x248>
 8010f44:	a34e      	add	r3, pc, #312	; (adr r3, 8011080 <__ieee754_rem_pio2+0x310>)
 8010f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f4a:	ec51 0b18 	vmov	r0, r1, d8
 8010f4e:	f7f5 fbbb 	bl	80066c8 <__aeabi_dmul>
 8010f52:	4604      	mov	r4, r0
 8010f54:	460d      	mov	r5, r1
 8010f56:	4602      	mov	r2, r0
 8010f58:	460b      	mov	r3, r1
 8010f5a:	4630      	mov	r0, r6
 8010f5c:	4639      	mov	r1, r7
 8010f5e:	f7f5 f9fb 	bl	8006358 <__aeabi_dsub>
 8010f62:	4602      	mov	r2, r0
 8010f64:	460b      	mov	r3, r1
 8010f66:	4680      	mov	r8, r0
 8010f68:	4689      	mov	r9, r1
 8010f6a:	4630      	mov	r0, r6
 8010f6c:	4639      	mov	r1, r7
 8010f6e:	f7f5 f9f3 	bl	8006358 <__aeabi_dsub>
 8010f72:	4622      	mov	r2, r4
 8010f74:	462b      	mov	r3, r5
 8010f76:	f7f5 f9ef 	bl	8006358 <__aeabi_dsub>
 8010f7a:	a343      	add	r3, pc, #268	; (adr r3, 8011088 <__ieee754_rem_pio2+0x318>)
 8010f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f80:	4604      	mov	r4, r0
 8010f82:	460d      	mov	r5, r1
 8010f84:	ec51 0b18 	vmov	r0, r1, d8
 8010f88:	f7f5 fb9e 	bl	80066c8 <__aeabi_dmul>
 8010f8c:	4622      	mov	r2, r4
 8010f8e:	462b      	mov	r3, r5
 8010f90:	f7f5 f9e2 	bl	8006358 <__aeabi_dsub>
 8010f94:	4602      	mov	r2, r0
 8010f96:	460b      	mov	r3, r1
 8010f98:	4604      	mov	r4, r0
 8010f9a:	460d      	mov	r5, r1
 8010f9c:	4640      	mov	r0, r8
 8010f9e:	4649      	mov	r1, r9
 8010fa0:	f7f5 f9da 	bl	8006358 <__aeabi_dsub>
 8010fa4:	9a03      	ldr	r2, [sp, #12]
 8010fa6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010faa:	1ad3      	subs	r3, r2, r3
 8010fac:	2b31      	cmp	r3, #49	; 0x31
 8010fae:	dc24      	bgt.n	8010ffa <__ieee754_rem_pio2+0x28a>
 8010fb0:	e9ca 0100 	strd	r0, r1, [sl]
 8010fb4:	4646      	mov	r6, r8
 8010fb6:	464f      	mov	r7, r9
 8010fb8:	e9da 8900 	ldrd	r8, r9, [sl]
 8010fbc:	4630      	mov	r0, r6
 8010fbe:	4642      	mov	r2, r8
 8010fc0:	464b      	mov	r3, r9
 8010fc2:	4639      	mov	r1, r7
 8010fc4:	f7f5 f9c8 	bl	8006358 <__aeabi_dsub>
 8010fc8:	462b      	mov	r3, r5
 8010fca:	4622      	mov	r2, r4
 8010fcc:	f7f5 f9c4 	bl	8006358 <__aeabi_dsub>
 8010fd0:	9b02      	ldr	r3, [sp, #8]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010fd8:	f6bf af0a 	bge.w	8010df0 <__ieee754_rem_pio2+0x80>
 8010fdc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010fe0:	f8ca 3004 	str.w	r3, [sl, #4]
 8010fe4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010fe8:	f8ca 8000 	str.w	r8, [sl]
 8010fec:	f8ca 0008 	str.w	r0, [sl, #8]
 8010ff0:	f8ca 300c 	str.w	r3, [sl, #12]
 8010ff4:	f1cb 0b00 	rsb	fp, fp, #0
 8010ff8:	e6fa      	b.n	8010df0 <__ieee754_rem_pio2+0x80>
 8010ffa:	a327      	add	r3, pc, #156	; (adr r3, 8011098 <__ieee754_rem_pio2+0x328>)
 8010ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011000:	ec51 0b18 	vmov	r0, r1, d8
 8011004:	f7f5 fb60 	bl	80066c8 <__aeabi_dmul>
 8011008:	4604      	mov	r4, r0
 801100a:	460d      	mov	r5, r1
 801100c:	4602      	mov	r2, r0
 801100e:	460b      	mov	r3, r1
 8011010:	4640      	mov	r0, r8
 8011012:	4649      	mov	r1, r9
 8011014:	f7f5 f9a0 	bl	8006358 <__aeabi_dsub>
 8011018:	4602      	mov	r2, r0
 801101a:	460b      	mov	r3, r1
 801101c:	4606      	mov	r6, r0
 801101e:	460f      	mov	r7, r1
 8011020:	4640      	mov	r0, r8
 8011022:	4649      	mov	r1, r9
 8011024:	f7f5 f998 	bl	8006358 <__aeabi_dsub>
 8011028:	4622      	mov	r2, r4
 801102a:	462b      	mov	r3, r5
 801102c:	f7f5 f994 	bl	8006358 <__aeabi_dsub>
 8011030:	a31b      	add	r3, pc, #108	; (adr r3, 80110a0 <__ieee754_rem_pio2+0x330>)
 8011032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011036:	4604      	mov	r4, r0
 8011038:	460d      	mov	r5, r1
 801103a:	ec51 0b18 	vmov	r0, r1, d8
 801103e:	f7f5 fb43 	bl	80066c8 <__aeabi_dmul>
 8011042:	4622      	mov	r2, r4
 8011044:	462b      	mov	r3, r5
 8011046:	f7f5 f987 	bl	8006358 <__aeabi_dsub>
 801104a:	4604      	mov	r4, r0
 801104c:	460d      	mov	r5, r1
 801104e:	e75f      	b.n	8010f10 <__ieee754_rem_pio2+0x1a0>
 8011050:	4b1b      	ldr	r3, [pc, #108]	; (80110c0 <__ieee754_rem_pio2+0x350>)
 8011052:	4598      	cmp	r8, r3
 8011054:	dd36      	ble.n	80110c4 <__ieee754_rem_pio2+0x354>
 8011056:	ee10 2a10 	vmov	r2, s0
 801105a:	462b      	mov	r3, r5
 801105c:	4620      	mov	r0, r4
 801105e:	4629      	mov	r1, r5
 8011060:	f7f5 f97a 	bl	8006358 <__aeabi_dsub>
 8011064:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011068:	e9ca 0100 	strd	r0, r1, [sl]
 801106c:	e694      	b.n	8010d98 <__ieee754_rem_pio2+0x28>
 801106e:	bf00      	nop
 8011070:	54400000 	.word	0x54400000
 8011074:	3ff921fb 	.word	0x3ff921fb
 8011078:	1a626331 	.word	0x1a626331
 801107c:	3dd0b461 	.word	0x3dd0b461
 8011080:	1a600000 	.word	0x1a600000
 8011084:	3dd0b461 	.word	0x3dd0b461
 8011088:	2e037073 	.word	0x2e037073
 801108c:	3ba3198a 	.word	0x3ba3198a
 8011090:	6dc9c883 	.word	0x6dc9c883
 8011094:	3fe45f30 	.word	0x3fe45f30
 8011098:	2e000000 	.word	0x2e000000
 801109c:	3ba3198a 	.word	0x3ba3198a
 80110a0:	252049c1 	.word	0x252049c1
 80110a4:	397b839a 	.word	0x397b839a
 80110a8:	3fe921fb 	.word	0x3fe921fb
 80110ac:	4002d97b 	.word	0x4002d97b
 80110b0:	3ff921fb 	.word	0x3ff921fb
 80110b4:	413921fb 	.word	0x413921fb
 80110b8:	3fe00000 	.word	0x3fe00000
 80110bc:	0804cc60 	.word	0x0804cc60
 80110c0:	7fefffff 	.word	0x7fefffff
 80110c4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80110c8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80110cc:	ee10 0a10 	vmov	r0, s0
 80110d0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80110d4:	ee10 6a10 	vmov	r6, s0
 80110d8:	460f      	mov	r7, r1
 80110da:	f7f5 fda5 	bl	8006c28 <__aeabi_d2iz>
 80110de:	f7f5 fa89 	bl	80065f4 <__aeabi_i2d>
 80110e2:	4602      	mov	r2, r0
 80110e4:	460b      	mov	r3, r1
 80110e6:	4630      	mov	r0, r6
 80110e8:	4639      	mov	r1, r7
 80110ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80110ee:	f7f5 f933 	bl	8006358 <__aeabi_dsub>
 80110f2:	4b23      	ldr	r3, [pc, #140]	; (8011180 <__ieee754_rem_pio2+0x410>)
 80110f4:	2200      	movs	r2, #0
 80110f6:	f7f5 fae7 	bl	80066c8 <__aeabi_dmul>
 80110fa:	460f      	mov	r7, r1
 80110fc:	4606      	mov	r6, r0
 80110fe:	f7f5 fd93 	bl	8006c28 <__aeabi_d2iz>
 8011102:	f7f5 fa77 	bl	80065f4 <__aeabi_i2d>
 8011106:	4602      	mov	r2, r0
 8011108:	460b      	mov	r3, r1
 801110a:	4630      	mov	r0, r6
 801110c:	4639      	mov	r1, r7
 801110e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011112:	f7f5 f921 	bl	8006358 <__aeabi_dsub>
 8011116:	4b1a      	ldr	r3, [pc, #104]	; (8011180 <__ieee754_rem_pio2+0x410>)
 8011118:	2200      	movs	r2, #0
 801111a:	f7f5 fad5 	bl	80066c8 <__aeabi_dmul>
 801111e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011122:	ad04      	add	r5, sp, #16
 8011124:	f04f 0803 	mov.w	r8, #3
 8011128:	46a9      	mov	r9, r5
 801112a:	2600      	movs	r6, #0
 801112c:	2700      	movs	r7, #0
 801112e:	4632      	mov	r2, r6
 8011130:	463b      	mov	r3, r7
 8011132:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8011136:	46c3      	mov	fp, r8
 8011138:	3d08      	subs	r5, #8
 801113a:	f108 38ff 	add.w	r8, r8, #4294967295
 801113e:	f7f5 fd2b 	bl	8006b98 <__aeabi_dcmpeq>
 8011142:	2800      	cmp	r0, #0
 8011144:	d1f3      	bne.n	801112e <__ieee754_rem_pio2+0x3be>
 8011146:	4b0f      	ldr	r3, [pc, #60]	; (8011184 <__ieee754_rem_pio2+0x414>)
 8011148:	9301      	str	r3, [sp, #4]
 801114a:	2302      	movs	r3, #2
 801114c:	9300      	str	r3, [sp, #0]
 801114e:	4622      	mov	r2, r4
 8011150:	465b      	mov	r3, fp
 8011152:	4651      	mov	r1, sl
 8011154:	4648      	mov	r0, r9
 8011156:	f001 facf 	bl	80126f8 <__kernel_rem_pio2>
 801115a:	9b02      	ldr	r3, [sp, #8]
 801115c:	2b00      	cmp	r3, #0
 801115e:	4683      	mov	fp, r0
 8011160:	f6bf ae46 	bge.w	8010df0 <__ieee754_rem_pio2+0x80>
 8011164:	e9da 2100 	ldrd	r2, r1, [sl]
 8011168:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801116c:	e9ca 2300 	strd	r2, r3, [sl]
 8011170:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8011174:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011178:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801117c:	e73a      	b.n	8010ff4 <__ieee754_rem_pio2+0x284>
 801117e:	bf00      	nop
 8011180:	41700000 	.word	0x41700000
 8011184:	0804cce0 	.word	0x0804cce0

08011188 <__ieee754_acosf>:
 8011188:	b508      	push	{r3, lr}
 801118a:	ee10 3a10 	vmov	r3, s0
 801118e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011192:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8011196:	ed2d 8b0c 	vpush	{d8-d13}
 801119a:	d10a      	bne.n	80111b2 <__ieee754_acosf+0x2a>
 801119c:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8011334 <__ieee754_acosf+0x1ac>
 80111a0:	ed9f 8a65 	vldr	s16, [pc, #404]	; 8011338 <__ieee754_acosf+0x1b0>
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	bfd8      	it	le
 80111a8:	eeb0 0a48 	vmovle.f32	s0, s16
 80111ac:	ecbd 8b0c 	vpop	{d8-d13}
 80111b0:	bd08      	pop	{r3, pc}
 80111b2:	dd04      	ble.n	80111be <__ieee754_acosf+0x36>
 80111b4:	ee30 8a40 	vsub.f32	s16, s0, s0
 80111b8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80111bc:	e7f6      	b.n	80111ac <__ieee754_acosf+0x24>
 80111be:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 80111c2:	da3c      	bge.n	801123e <__ieee754_acosf+0xb6>
 80111c4:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 80111c8:	f340 80b1 	ble.w	801132e <__ieee754_acosf+0x1a6>
 80111cc:	ee60 7a00 	vmul.f32	s15, s0, s0
 80111d0:	eddf 6a5a 	vldr	s13, [pc, #360]	; 801133c <__ieee754_acosf+0x1b4>
 80111d4:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8011340 <__ieee754_acosf+0x1b8>
 80111d8:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 8011344 <__ieee754_acosf+0x1bc>
 80111dc:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 8011348 <__ieee754_acosf+0x1c0>
 80111e0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80111e4:	eddf 6a59 	vldr	s13, [pc, #356]	; 801134c <__ieee754_acosf+0x1c4>
 80111e8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80111ec:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8011350 <__ieee754_acosf+0x1c8>
 80111f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80111f4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8011354 <__ieee754_acosf+0x1cc>
 80111f8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80111fc:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8011358 <__ieee754_acosf+0x1d0>
 8011200:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011204:	eddf 6a55 	vldr	s13, [pc, #340]	; 801135c <__ieee754_acosf+0x1d4>
 8011208:	eea7 6aa6 	vfma.f32	s12, s15, s13
 801120c:	eddf 6a54 	vldr	s13, [pc, #336]	; 8011360 <__ieee754_acosf+0x1d8>
 8011210:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011214:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8011364 <__ieee754_acosf+0x1dc>
 8011218:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801121c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011220:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011224:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011228:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801122c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8011230:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8011368 <__ieee754_acosf+0x1e0>
 8011234:	ee30 0a48 	vsub.f32	s0, s0, s16
 8011238:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801123c:	e7b6      	b.n	80111ac <__ieee754_acosf+0x24>
 801123e:	2b00      	cmp	r3, #0
 8011240:	eddf da3e 	vldr	s27, [pc, #248]	; 801133c <__ieee754_acosf+0x1b4>
 8011244:	eddf ca3e 	vldr	s25, [pc, #248]	; 8011340 <__ieee754_acosf+0x1b8>
 8011248:	ed9f ca40 	vldr	s24, [pc, #256]	; 801134c <__ieee754_acosf+0x1c4>
 801124c:	eddf ba40 	vldr	s23, [pc, #256]	; 8011350 <__ieee754_acosf+0x1c8>
 8011250:	ed9f ba40 	vldr	s22, [pc, #256]	; 8011354 <__ieee754_acosf+0x1cc>
 8011254:	eddf 8a40 	vldr	s17, [pc, #256]	; 8011358 <__ieee754_acosf+0x1d0>
 8011258:	ed9f da40 	vldr	s26, [pc, #256]	; 801135c <__ieee754_acosf+0x1d4>
 801125c:	eddf aa39 	vldr	s21, [pc, #228]	; 8011344 <__ieee754_acosf+0x1bc>
 8011260:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8011360 <__ieee754_acosf+0x1d8>
 8011264:	eddf 9a3f 	vldr	s19, [pc, #252]	; 8011364 <__ieee754_acosf+0x1dc>
 8011268:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801126c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011270:	da28      	bge.n	80112c4 <__ieee754_acosf+0x13c>
 8011272:	ee30 0a09 	vadd.f32	s0, s0, s18
 8011276:	ee20 0a27 	vmul.f32	s0, s0, s15
 801127a:	eee0 ca2d 	vfma.f32	s25, s0, s27
 801127e:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8011282:	eeac ca80 	vfma.f32	s24, s25, s0
 8011286:	eeaa aa80 	vfma.f32	s20, s21, s0
 801128a:	eeec ba00 	vfma.f32	s23, s24, s0
 801128e:	eeea 9a00 	vfma.f32	s19, s20, s0
 8011292:	eeab ba80 	vfma.f32	s22, s23, s0
 8011296:	eea9 9a80 	vfma.f32	s18, s19, s0
 801129a:	eeeb 8a00 	vfma.f32	s17, s22, s0
 801129e:	ee68 8a80 	vmul.f32	s17, s17, s0
 80112a2:	f001 f95b 	bl	801255c <__ieee754_sqrtf>
 80112a6:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80112aa:	eddf 7a30 	vldr	s15, [pc, #192]	; 801136c <__ieee754_acosf+0x1e4>
 80112ae:	eee0 7a07 	vfma.f32	s15, s0, s14
 80112b2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80112b6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80112ba:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8011370 <__ieee754_acosf+0x1e8>
 80112be:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80112c2:	e773      	b.n	80111ac <__ieee754_acosf+0x24>
 80112c4:	ee39 8a40 	vsub.f32	s16, s18, s0
 80112c8:	ee28 8a27 	vmul.f32	s16, s16, s15
 80112cc:	eeb0 0a48 	vmov.f32	s0, s16
 80112d0:	f001 f944 	bl	801255c <__ieee754_sqrtf>
 80112d4:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80112d8:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80112dc:	eeac ca88 	vfma.f32	s24, s25, s16
 80112e0:	eeaa aa88 	vfma.f32	s20, s21, s16
 80112e4:	eeec ba08 	vfma.f32	s23, s24, s16
 80112e8:	ee10 3a10 	vmov	r3, s0
 80112ec:	eeab ba88 	vfma.f32	s22, s23, s16
 80112f0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80112f4:	f023 030f 	bic.w	r3, r3, #15
 80112f8:	eeea 9a08 	vfma.f32	s19, s20, s16
 80112fc:	ee07 3a90 	vmov	s15, r3
 8011300:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8011304:	eeb0 6a48 	vmov.f32	s12, s16
 8011308:	eea7 6ae7 	vfms.f32	s12, s15, s15
 801130c:	eea9 9a88 	vfma.f32	s18, s19, s16
 8011310:	ee70 6a27 	vadd.f32	s13, s0, s15
 8011314:	ee68 8a88 	vmul.f32	s17, s17, s16
 8011318:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801131c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8011320:	eea0 7a26 	vfma.f32	s14, s0, s13
 8011324:	ee37 0a87 	vadd.f32	s0, s15, s14
 8011328:	ee30 0a00 	vadd.f32	s0, s0, s0
 801132c:	e73e      	b.n	80111ac <__ieee754_acosf+0x24>
 801132e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8011374 <__ieee754_acosf+0x1ec>
 8011332:	e73b      	b.n	80111ac <__ieee754_acosf+0x24>
 8011334:	00000000 	.word	0x00000000
 8011338:	40490fdb 	.word	0x40490fdb
 801133c:	3811ef08 	.word	0x3811ef08
 8011340:	3a4f7f04 	.word	0x3a4f7f04
 8011344:	bf303361 	.word	0xbf303361
 8011348:	33a22168 	.word	0x33a22168
 801134c:	bd241146 	.word	0xbd241146
 8011350:	3e4e0aa8 	.word	0x3e4e0aa8
 8011354:	bea6b090 	.word	0xbea6b090
 8011358:	3e2aaaab 	.word	0x3e2aaaab
 801135c:	3d9dc62e 	.word	0x3d9dc62e
 8011360:	4001572d 	.word	0x4001572d
 8011364:	c019d139 	.word	0xc019d139
 8011368:	3fc90fda 	.word	0x3fc90fda
 801136c:	b3a22168 	.word	0xb3a22168
 8011370:	40490fda 	.word	0x40490fda
 8011374:	3fc90fdb 	.word	0x3fc90fdb

08011378 <__ieee754_acoshf>:
 8011378:	b508      	push	{r3, lr}
 801137a:	ee10 3a10 	vmov	r3, s0
 801137e:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8011382:	ed2d 8b04 	vpush	{d8-d9}
 8011386:	eeb0 8a40 	vmov.f32	s16, s0
 801138a:	da06      	bge.n	801139a <__ieee754_acoshf+0x22>
 801138c:	ee30 8a40 	vsub.f32	s16, s0, s0
 8011390:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8011394:	ecbd 8b04 	vpop	{d8-d9}
 8011398:	bd08      	pop	{r3, pc}
 801139a:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 801139e:	db0c      	blt.n	80113ba <__ieee754_acoshf+0x42>
 80113a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80113a4:	db02      	blt.n	80113ac <__ieee754_acoshf+0x34>
 80113a6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80113aa:	e7f3      	b.n	8011394 <__ieee754_acoshf+0x1c>
 80113ac:	f000 fb14 	bl	80119d8 <__ieee754_logf>
 80113b0:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8011418 <__ieee754_acoshf+0xa0>
 80113b4:	ee30 0a08 	vadd.f32	s0, s0, s16
 80113b8:	e7ec      	b.n	8011394 <__ieee754_acoshf+0x1c>
 80113ba:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80113be:	d028      	beq.n	8011412 <__ieee754_acoshf+0x9a>
 80113c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80113c4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80113c8:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
 80113cc:	dd11      	ble.n	80113f2 <__ieee754_acoshf+0x7a>
 80113ce:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80113d2:	eea8 0a08 	vfma.f32	s0, s16, s16
 80113d6:	f001 f8c1 	bl	801255c <__ieee754_sqrtf>
 80113da:	ee70 7a08 	vadd.f32	s15, s0, s16
 80113de:	ee89 0a27 	vdiv.f32	s0, s18, s15
 80113e2:	ee98 0a28 	vfnms.f32	s0, s16, s17
 80113e6:	ecbd 8b04 	vpop	{d8-d9}
 80113ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80113ee:	f000 baf3 	b.w	80119d8 <__ieee754_logf>
 80113f2:	ee30 8a49 	vsub.f32	s16, s0, s18
 80113f6:	ee28 0a08 	vmul.f32	s0, s16, s16
 80113fa:	eea8 0a28 	vfma.f32	s0, s16, s17
 80113fe:	f001 f8ad 	bl	801255c <__ieee754_sqrtf>
 8011402:	ee30 0a08 	vadd.f32	s0, s0, s16
 8011406:	ecbd 8b04 	vpop	{d8-d9}
 801140a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801140e:	f7ff b8a5 	b.w	801055c <log1pf>
 8011412:	ed9f 0a02 	vldr	s0, [pc, #8]	; 801141c <__ieee754_acoshf+0xa4>
 8011416:	e7bd      	b.n	8011394 <__ieee754_acoshf+0x1c>
 8011418:	3f317218 	.word	0x3f317218
 801141c:	00000000 	.word	0x00000000

08011420 <__ieee754_asinf>:
 8011420:	b538      	push	{r3, r4, r5, lr}
 8011422:	ee10 5a10 	vmov	r5, s0
 8011426:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801142a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801142e:	ed2d 8b04 	vpush	{d8-d9}
 8011432:	d10c      	bne.n	801144e <__ieee754_asinf+0x2e>
 8011434:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80115ac <__ieee754_asinf+0x18c>
 8011438:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80115b0 <__ieee754_asinf+0x190>
 801143c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011440:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011444:	eeb0 0a67 	vmov.f32	s0, s15
 8011448:	ecbd 8b04 	vpop	{d8-d9}
 801144c:	bd38      	pop	{r3, r4, r5, pc}
 801144e:	dd04      	ble.n	801145a <__ieee754_asinf+0x3a>
 8011450:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011454:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8011458:	e7f6      	b.n	8011448 <__ieee754_asinf+0x28>
 801145a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801145e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8011462:	da0b      	bge.n	801147c <__ieee754_asinf+0x5c>
 8011464:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8011468:	da52      	bge.n	8011510 <__ieee754_asinf+0xf0>
 801146a:	eddf 7a52 	vldr	s15, [pc, #328]	; 80115b4 <__ieee754_asinf+0x194>
 801146e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011472:	eef4 7ae8 	vcmpe.f32	s15, s17
 8011476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801147a:	dce5      	bgt.n	8011448 <__ieee754_asinf+0x28>
 801147c:	f7ff f824 	bl	80104c8 <fabsf>
 8011480:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8011484:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8011488:	ee20 8a08 	vmul.f32	s16, s0, s16
 801148c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80115b8 <__ieee754_asinf+0x198>
 8011490:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80115bc <__ieee754_asinf+0x19c>
 8011494:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 80115c0 <__ieee754_asinf+0x1a0>
 8011498:	eea8 7a27 	vfma.f32	s14, s16, s15
 801149c:	eddf 7a49 	vldr	s15, [pc, #292]	; 80115c4 <__ieee754_asinf+0x1a4>
 80114a0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80114a4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80115c8 <__ieee754_asinf+0x1a8>
 80114a8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80114ac:	eddf 7a47 	vldr	s15, [pc, #284]	; 80115cc <__ieee754_asinf+0x1ac>
 80114b0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80114b4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80115d0 <__ieee754_asinf+0x1b0>
 80114b8:	eea7 9a88 	vfma.f32	s18, s15, s16
 80114bc:	eddf 7a45 	vldr	s15, [pc, #276]	; 80115d4 <__ieee754_asinf+0x1b4>
 80114c0:	eee8 7a07 	vfma.f32	s15, s16, s14
 80114c4:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80115d8 <__ieee754_asinf+0x1b8>
 80114c8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80114cc:	eddf 7a43 	vldr	s15, [pc, #268]	; 80115dc <__ieee754_asinf+0x1bc>
 80114d0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80114d4:	eeb0 0a48 	vmov.f32	s0, s16
 80114d8:	eee7 8a88 	vfma.f32	s17, s15, s16
 80114dc:	f001 f83e 	bl	801255c <__ieee754_sqrtf>
 80114e0:	4b3f      	ldr	r3, [pc, #252]	; (80115e0 <__ieee754_asinf+0x1c0>)
 80114e2:	ee29 9a08 	vmul.f32	s18, s18, s16
 80114e6:	429c      	cmp	r4, r3
 80114e8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80114ec:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80114f0:	dd3d      	ble.n	801156e <__ieee754_asinf+0x14e>
 80114f2:	eea0 0a06 	vfma.f32	s0, s0, s12
 80114f6:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80115e4 <__ieee754_asinf+0x1c4>
 80114fa:	eee0 7a26 	vfma.f32	s15, s0, s13
 80114fe:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80115b0 <__ieee754_asinf+0x190>
 8011502:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011506:	2d00      	cmp	r5, #0
 8011508:	bfd8      	it	le
 801150a:	eeb1 0a40 	vnegle.f32	s0, s0
 801150e:	e79b      	b.n	8011448 <__ieee754_asinf+0x28>
 8011510:	ee60 7a00 	vmul.f32	s15, s0, s0
 8011514:	eddf 6a28 	vldr	s13, [pc, #160]	; 80115b8 <__ieee754_asinf+0x198>
 8011518:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80115bc <__ieee754_asinf+0x19c>
 801151c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80115d0 <__ieee754_asinf+0x1b0>
 8011520:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011524:	eddf 6a27 	vldr	s13, [pc, #156]	; 80115c4 <__ieee754_asinf+0x1a4>
 8011528:	eee7 6a27 	vfma.f32	s13, s14, s15
 801152c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80115c8 <__ieee754_asinf+0x1a8>
 8011530:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011534:	eddf 6a25 	vldr	s13, [pc, #148]	; 80115cc <__ieee754_asinf+0x1ac>
 8011538:	eee7 6a27 	vfma.f32	s13, s14, s15
 801153c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80115c0 <__ieee754_asinf+0x1a0>
 8011540:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011544:	eddf 6a23 	vldr	s13, [pc, #140]	; 80115d4 <__ieee754_asinf+0x1b4>
 8011548:	eee7 6a86 	vfma.f32	s13, s15, s12
 801154c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80115d8 <__ieee754_asinf+0x1b8>
 8011550:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8011554:	eddf 6a21 	vldr	s13, [pc, #132]	; 80115dc <__ieee754_asinf+0x1bc>
 8011558:	eee6 6a27 	vfma.f32	s13, s12, s15
 801155c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011560:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8011564:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8011568:	eea0 0a27 	vfma.f32	s0, s0, s15
 801156c:	e76c      	b.n	8011448 <__ieee754_asinf+0x28>
 801156e:	ee10 3a10 	vmov	r3, s0
 8011572:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8011576:	f023 030f 	bic.w	r3, r3, #15
 801157a:	ee07 3a10 	vmov	s14, r3
 801157e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8011582:	ee70 7a07 	vadd.f32	s15, s0, s14
 8011586:	ee30 0a00 	vadd.f32	s0, s0, s0
 801158a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801158e:	eddf 7a07 	vldr	s15, [pc, #28]	; 80115ac <__ieee754_asinf+0x18c>
 8011592:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8011596:	eed0 7a06 	vfnms.f32	s15, s0, s12
 801159a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80115e8 <__ieee754_asinf+0x1c8>
 801159e:	eeb0 6a40 	vmov.f32	s12, s0
 80115a2:	eea7 6a66 	vfms.f32	s12, s14, s13
 80115a6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80115aa:	e7aa      	b.n	8011502 <__ieee754_asinf+0xe2>
 80115ac:	b33bbd2e 	.word	0xb33bbd2e
 80115b0:	3fc90fdb 	.word	0x3fc90fdb
 80115b4:	7149f2ca 	.word	0x7149f2ca
 80115b8:	3811ef08 	.word	0x3811ef08
 80115bc:	3a4f7f04 	.word	0x3a4f7f04
 80115c0:	3e2aaaab 	.word	0x3e2aaaab
 80115c4:	bd241146 	.word	0xbd241146
 80115c8:	3e4e0aa8 	.word	0x3e4e0aa8
 80115cc:	bea6b090 	.word	0xbea6b090
 80115d0:	3d9dc62e 	.word	0x3d9dc62e
 80115d4:	bf303361 	.word	0xbf303361
 80115d8:	4001572d 	.word	0x4001572d
 80115dc:	c019d139 	.word	0xc019d139
 80115e0:	3f799999 	.word	0x3f799999
 80115e4:	333bbd2e 	.word	0x333bbd2e
 80115e8:	3f490fdb 	.word	0x3f490fdb

080115ec <__ieee754_atanhf>:
 80115ec:	b510      	push	{r4, lr}
 80115ee:	ee10 4a10 	vmov	r4, s0
 80115f2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80115f6:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80115fa:	ed2d 8b02 	vpush	{d8}
 80115fe:	dd06      	ble.n	801160e <__ieee754_atanhf+0x22>
 8011600:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011604:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8011608:	ecbd 8b02 	vpop	{d8}
 801160c:	bd10      	pop	{r4, pc}
 801160e:	d104      	bne.n	801161a <__ieee754_atanhf+0x2e>
 8011610:	eddf 7a17 	vldr	s15, [pc, #92]	; 8011670 <__ieee754_atanhf+0x84>
 8011614:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8011618:	e7f6      	b.n	8011608 <__ieee754_atanhf+0x1c>
 801161a:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 801161e:	da08      	bge.n	8011632 <__ieee754_atanhf+0x46>
 8011620:	eddf 7a14 	vldr	s15, [pc, #80]	; 8011674 <__ieee754_atanhf+0x88>
 8011624:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011628:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801162c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011630:	dcea      	bgt.n	8011608 <__ieee754_atanhf+0x1c>
 8011632:	ee07 3a90 	vmov	s15, r3
 8011636:	ee37 0aa7 	vadd.f32	s0, s15, s15
 801163a:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801163e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011642:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011646:	bfb6      	itet	lt
 8011648:	ee67 7a80 	vmullt.f32	s15, s15, s0
 801164c:	ee80 0a07 	vdivge.f32	s0, s0, s14
 8011650:	eec7 6a87 	vdivlt.f32	s13, s15, s14
 8011654:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8011658:	bfb8      	it	lt
 801165a:	ee36 0a80 	vaddlt.f32	s0, s13, s0
 801165e:	f7fe ff7d 	bl	801055c <log1pf>
 8011662:	ee20 0a08 	vmul.f32	s0, s0, s16
 8011666:	2c00      	cmp	r4, #0
 8011668:	bfb8      	it	lt
 801166a:	eeb1 0a40 	vneglt.f32	s0, s0
 801166e:	e7cb      	b.n	8011608 <__ieee754_atanhf+0x1c>
 8011670:	00000000 	.word	0x00000000
 8011674:	7149f2ca 	.word	0x7149f2ca

08011678 <__ieee754_coshf>:
 8011678:	b510      	push	{r4, lr}
 801167a:	ee10 4a10 	vmov	r4, s0
 801167e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8011682:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8011686:	ed2d 8b02 	vpush	{d8}
 801168a:	db06      	blt.n	801169a <__ieee754_coshf+0x22>
 801168c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8011690:	ecbd 8b02 	vpop	{d8}
 8011694:	eeb0 0a67 	vmov.f32	s0, s15
 8011698:	bd10      	pop	{r4, pc}
 801169a:	4b23      	ldr	r3, [pc, #140]	; (8011728 <__ieee754_coshf+0xb0>)
 801169c:	429c      	cmp	r4, r3
 801169e:	dc13      	bgt.n	80116c8 <__ieee754_coshf+0x50>
 80116a0:	f7fe ff12 	bl	80104c8 <fabsf>
 80116a4:	f002 f986 	bl	80139b4 <expm1f>
 80116a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80116ac:	f1b4 5f10 	cmp.w	r4, #603979776	; 0x24000000
 80116b0:	ee70 7a26 	vadd.f32	s15, s0, s13
 80116b4:	dbec      	blt.n	8011690 <__ieee754_coshf+0x18>
 80116b6:	ee20 7a00 	vmul.f32	s14, s0, s0
 80116ba:	ee37 0aa7 	vadd.f32	s0, s15, s15
 80116be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80116c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80116c6:	e7e3      	b.n	8011690 <__ieee754_coshf+0x18>
 80116c8:	4b18      	ldr	r3, [pc, #96]	; (801172c <__ieee754_coshf+0xb4>)
 80116ca:	429c      	cmp	r4, r3
 80116cc:	dc0a      	bgt.n	80116e4 <__ieee754_coshf+0x6c>
 80116ce:	f7fe fefb 	bl	80104c8 <fabsf>
 80116d2:	f000 f831 	bl	8011738 <__ieee754_expf>
 80116d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80116da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80116de:	eee0 7a07 	vfma.f32	s15, s0, s14
 80116e2:	e7d5      	b.n	8011690 <__ieee754_coshf+0x18>
 80116e4:	4b12      	ldr	r3, [pc, #72]	; (8011730 <__ieee754_coshf+0xb8>)
 80116e6:	429c      	cmp	r4, r3
 80116e8:	dc08      	bgt.n	80116fc <__ieee754_coshf+0x84>
 80116ea:	f7fe feed 	bl	80104c8 <fabsf>
 80116ee:	f000 f823 	bl	8011738 <__ieee754_expf>
 80116f2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80116f6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80116fa:	e7c9      	b.n	8011690 <__ieee754_coshf+0x18>
 80116fc:	4b0d      	ldr	r3, [pc, #52]	; (8011734 <__ieee754_coshf+0xbc>)
 80116fe:	429c      	cmp	r4, r3
 8011700:	dc0a      	bgt.n	8011718 <__ieee754_coshf+0xa0>
 8011702:	f7fe fee1 	bl	80104c8 <fabsf>
 8011706:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 801170a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801170e:	f000 f813 	bl	8011738 <__ieee754_expf>
 8011712:	ee60 7a08 	vmul.f32	s15, s0, s16
 8011716:	e7ee      	b.n	80116f6 <__ieee754_coshf+0x7e>
 8011718:	ecbd 8b02 	vpop	{d8}
 801171c:	2000      	movs	r0, #0
 801171e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011722:	f002 b811 	b.w	8013748 <__math_oflowf>
 8011726:	bf00      	nop
 8011728:	3eb17217 	.word	0x3eb17217
 801172c:	41afffff 	.word	0x41afffff
 8011730:	42b17217 	.word	0x42b17217
 8011734:	42b2d4fc 	.word	0x42b2d4fc

08011738 <__ieee754_expf>:
 8011738:	ee10 2a10 	vmov	r2, s0
 801173c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8011740:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011744:	d902      	bls.n	801174c <__ieee754_expf+0x14>
 8011746:	ee30 0a00 	vadd.f32	s0, s0, s0
 801174a:	4770      	bx	lr
 801174c:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8011750:	d106      	bne.n	8011760 <__ieee754_expf+0x28>
 8011752:	eddf 7a4e 	vldr	s15, [pc, #312]	; 801188c <__ieee754_expf+0x154>
 8011756:	2b00      	cmp	r3, #0
 8011758:	bf18      	it	ne
 801175a:	eeb0 0a67 	vmovne.f32	s0, s15
 801175e:	4770      	bx	lr
 8011760:	484b      	ldr	r0, [pc, #300]	; (8011890 <__ieee754_expf+0x158>)
 8011762:	4282      	cmp	r2, r0
 8011764:	dd02      	ble.n	801176c <__ieee754_expf+0x34>
 8011766:	2000      	movs	r0, #0
 8011768:	f001 bfee 	b.w	8013748 <__math_oflowf>
 801176c:	2a00      	cmp	r2, #0
 801176e:	da05      	bge.n	801177c <__ieee754_expf+0x44>
 8011770:	4a48      	ldr	r2, [pc, #288]	; (8011894 <__ieee754_expf+0x15c>)
 8011772:	4291      	cmp	r1, r2
 8011774:	d902      	bls.n	801177c <__ieee754_expf+0x44>
 8011776:	2000      	movs	r0, #0
 8011778:	f001 bfe0 	b.w	801373c <__math_uflowf>
 801177c:	4a46      	ldr	r2, [pc, #280]	; (8011898 <__ieee754_expf+0x160>)
 801177e:	4291      	cmp	r1, r2
 8011780:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8011784:	d952      	bls.n	801182c <__ieee754_expf+0xf4>
 8011786:	4a45      	ldr	r2, [pc, #276]	; (801189c <__ieee754_expf+0x164>)
 8011788:	4291      	cmp	r1, r2
 801178a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801178e:	d834      	bhi.n	80117fa <__ieee754_expf+0xc2>
 8011790:	4943      	ldr	r1, [pc, #268]	; (80118a0 <__ieee754_expf+0x168>)
 8011792:	4411      	add	r1, r2
 8011794:	ed91 7a00 	vldr	s14, [r1]
 8011798:	4942      	ldr	r1, [pc, #264]	; (80118a4 <__ieee754_expf+0x16c>)
 801179a:	440a      	add	r2, r1
 801179c:	edd2 7a00 	vldr	s15, [r2]
 80117a0:	ee30 7a47 	vsub.f32	s14, s0, s14
 80117a4:	f1c3 0201 	rsb	r2, r3, #1
 80117a8:	1ad2      	subs	r2, r2, r3
 80117aa:	ee37 0a67 	vsub.f32	s0, s14, s15
 80117ae:	ee20 6a00 	vmul.f32	s12, s0, s0
 80117b2:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80118a8 <__ieee754_expf+0x170>
 80117b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80118ac <__ieee754_expf+0x174>
 80117ba:	eee6 6a05 	vfma.f32	s13, s12, s10
 80117be:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80118b0 <__ieee754_expf+0x178>
 80117c2:	eea6 5a86 	vfma.f32	s10, s13, s12
 80117c6:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80118b4 <__ieee754_expf+0x17c>
 80117ca:	eee5 6a06 	vfma.f32	s13, s10, s12
 80117ce:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80118b8 <__ieee754_expf+0x180>
 80117d2:	eea6 5a86 	vfma.f32	s10, s13, s12
 80117d6:	eef0 6a40 	vmov.f32	s13, s0
 80117da:	eee5 6a46 	vfms.f32	s13, s10, s12
 80117de:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80117e2:	ee20 5a26 	vmul.f32	s10, s0, s13
 80117e6:	bb92      	cbnz	r2, 801184e <__ieee754_expf+0x116>
 80117e8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80117ec:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80117f0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80117f4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80117f8:	4770      	bx	lr
 80117fa:	4b30      	ldr	r3, [pc, #192]	; (80118bc <__ieee754_expf+0x184>)
 80117fc:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80118c0 <__ieee754_expf+0x188>
 8011800:	eddf 6a30 	vldr	s13, [pc, #192]	; 80118c4 <__ieee754_expf+0x18c>
 8011804:	4413      	add	r3, r2
 8011806:	edd3 7a00 	vldr	s15, [r3]
 801180a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801180e:	eeb0 7a40 	vmov.f32	s14, s0
 8011812:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011816:	ee17 2a90 	vmov	r2, s15
 801181a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801181e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8011822:	eddf 6a29 	vldr	s13, [pc, #164]	; 80118c8 <__ieee754_expf+0x190>
 8011826:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801182a:	e7be      	b.n	80117aa <__ieee754_expf+0x72>
 801182c:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8011830:	d20b      	bcs.n	801184a <__ieee754_expf+0x112>
 8011832:	eddf 6a26 	vldr	s13, [pc, #152]	; 80118cc <__ieee754_expf+0x194>
 8011836:	ee70 6a26 	vadd.f32	s13, s0, s13
 801183a:	eef4 6ae5 	vcmpe.f32	s13, s11
 801183e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011842:	dd02      	ble.n	801184a <__ieee754_expf+0x112>
 8011844:	ee30 0a25 	vadd.f32	s0, s0, s11
 8011848:	4770      	bx	lr
 801184a:	2200      	movs	r2, #0
 801184c:	e7af      	b.n	80117ae <__ieee754_expf+0x76>
 801184e:	ee76 6a66 	vsub.f32	s13, s12, s13
 8011852:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8011856:	ee85 0a26 	vdiv.f32	s0, s10, s13
 801185a:	bfb8      	it	lt
 801185c:	3264      	addlt	r2, #100	; 0x64
 801185e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011862:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8011866:	ee75 7ac0 	vsub.f32	s15, s11, s0
 801186a:	ee17 3a90 	vmov	r3, s15
 801186e:	bfab      	itete	ge
 8011870:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8011874:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8011878:	ee00 3a10 	vmovge	s0, r3
 801187c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80118d0 <__ieee754_expf+0x198>
 8011880:	bfbc      	itt	lt
 8011882:	ee00 3a10 	vmovlt	s0, r3
 8011886:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801188a:	4770      	bx	lr
 801188c:	00000000 	.word	0x00000000
 8011890:	42b17217 	.word	0x42b17217
 8011894:	42cff1b5 	.word	0x42cff1b5
 8011898:	3eb17218 	.word	0x3eb17218
 801189c:	3f851591 	.word	0x3f851591
 80118a0:	0804cdf0 	.word	0x0804cdf0
 80118a4:	0804cdf8 	.word	0x0804cdf8
 80118a8:	3331bb4c 	.word	0x3331bb4c
 80118ac:	b5ddea0e 	.word	0xb5ddea0e
 80118b0:	388ab355 	.word	0x388ab355
 80118b4:	bb360b61 	.word	0xbb360b61
 80118b8:	3e2aaaab 	.word	0x3e2aaaab
 80118bc:	0804cde8 	.word	0x0804cde8
 80118c0:	3fb8aa3b 	.word	0x3fb8aa3b
 80118c4:	3f317180 	.word	0x3f317180
 80118c8:	3717f7d1 	.word	0x3717f7d1
 80118cc:	7149f2ca 	.word	0x7149f2ca
 80118d0:	0d800000 	.word	0x0d800000

080118d4 <__ieee754_fmodf>:
 80118d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118d6:	ee10 5a90 	vmov	r5, s1
 80118da:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 80118de:	d009      	beq.n	80118f4 <__ieee754_fmodf+0x20>
 80118e0:	ee10 2a10 	vmov	r2, s0
 80118e4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80118e8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80118ec:	da02      	bge.n	80118f4 <__ieee754_fmodf+0x20>
 80118ee:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80118f2:	dd04      	ble.n	80118fe <__ieee754_fmodf+0x2a>
 80118f4:	ee60 0a20 	vmul.f32	s1, s0, s1
 80118f8:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80118fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118fe:	42a3      	cmp	r3, r4
 8011900:	dbfc      	blt.n	80118fc <__ieee754_fmodf+0x28>
 8011902:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 8011906:	d105      	bne.n	8011914 <__ieee754_fmodf+0x40>
 8011908:	4b32      	ldr	r3, [pc, #200]	; (80119d4 <__ieee754_fmodf+0x100>)
 801190a:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 801190e:	ed93 0a00 	vldr	s0, [r3]
 8011912:	e7f3      	b.n	80118fc <__ieee754_fmodf+0x28>
 8011914:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8011918:	d13f      	bne.n	801199a <__ieee754_fmodf+0xc6>
 801191a:	0219      	lsls	r1, r3, #8
 801191c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8011920:	2900      	cmp	r1, #0
 8011922:	dc37      	bgt.n	8011994 <__ieee754_fmodf+0xc0>
 8011924:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8011928:	d13d      	bne.n	80119a6 <__ieee754_fmodf+0xd2>
 801192a:	0227      	lsls	r7, r4, #8
 801192c:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8011930:	2f00      	cmp	r7, #0
 8011932:	da35      	bge.n	80119a0 <__ieee754_fmodf+0xcc>
 8011934:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8011938:	bfbb      	ittet	lt
 801193a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 801193e:	1a12      	sublt	r2, r2, r0
 8011940:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8011944:	4093      	lsllt	r3, r2
 8011946:	bfa8      	it	ge
 8011948:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 801194c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8011950:	bfb5      	itete	lt
 8011952:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8011956:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 801195a:	1a52      	sublt	r2, r2, r1
 801195c:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8011960:	bfb8      	it	lt
 8011962:	4094      	lsllt	r4, r2
 8011964:	1a40      	subs	r0, r0, r1
 8011966:	1b1a      	subs	r2, r3, r4
 8011968:	bb00      	cbnz	r0, 80119ac <__ieee754_fmodf+0xd8>
 801196a:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 801196e:	bf38      	it	cc
 8011970:	4613      	movcc	r3, r2
 8011972:	2b00      	cmp	r3, #0
 8011974:	d0c8      	beq.n	8011908 <__ieee754_fmodf+0x34>
 8011976:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801197a:	db1f      	blt.n	80119bc <__ieee754_fmodf+0xe8>
 801197c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8011980:	db1f      	blt.n	80119c2 <__ieee754_fmodf+0xee>
 8011982:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8011986:	317f      	adds	r1, #127	; 0x7f
 8011988:	4333      	orrs	r3, r6
 801198a:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 801198e:	ee00 3a10 	vmov	s0, r3
 8011992:	e7b3      	b.n	80118fc <__ieee754_fmodf+0x28>
 8011994:	3801      	subs	r0, #1
 8011996:	0049      	lsls	r1, r1, #1
 8011998:	e7c2      	b.n	8011920 <__ieee754_fmodf+0x4c>
 801199a:	15d8      	asrs	r0, r3, #23
 801199c:	387f      	subs	r0, #127	; 0x7f
 801199e:	e7c1      	b.n	8011924 <__ieee754_fmodf+0x50>
 80119a0:	3901      	subs	r1, #1
 80119a2:	007f      	lsls	r7, r7, #1
 80119a4:	e7c4      	b.n	8011930 <__ieee754_fmodf+0x5c>
 80119a6:	15e1      	asrs	r1, r4, #23
 80119a8:	397f      	subs	r1, #127	; 0x7f
 80119aa:	e7c3      	b.n	8011934 <__ieee754_fmodf+0x60>
 80119ac:	2a00      	cmp	r2, #0
 80119ae:	da02      	bge.n	80119b6 <__ieee754_fmodf+0xe2>
 80119b0:	005b      	lsls	r3, r3, #1
 80119b2:	3801      	subs	r0, #1
 80119b4:	e7d7      	b.n	8011966 <__ieee754_fmodf+0x92>
 80119b6:	d0a7      	beq.n	8011908 <__ieee754_fmodf+0x34>
 80119b8:	0053      	lsls	r3, r2, #1
 80119ba:	e7fa      	b.n	80119b2 <__ieee754_fmodf+0xde>
 80119bc:	005b      	lsls	r3, r3, #1
 80119be:	3901      	subs	r1, #1
 80119c0:	e7d9      	b.n	8011976 <__ieee754_fmodf+0xa2>
 80119c2:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 80119c6:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 80119ca:	3182      	adds	r1, #130	; 0x82
 80119cc:	410b      	asrs	r3, r1
 80119ce:	4333      	orrs	r3, r6
 80119d0:	e7dd      	b.n	801198e <__ieee754_fmodf+0xba>
 80119d2:	bf00      	nop
 80119d4:	0804ce00 	.word	0x0804ce00

080119d8 <__ieee754_logf>:
 80119d8:	ee10 3a10 	vmov	r3, s0
 80119dc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80119e0:	d106      	bne.n	80119f0 <__ieee754_logf+0x18>
 80119e2:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8011b78 <__ieee754_logf+0x1a0>
 80119e6:	eddf 7a65 	vldr	s15, [pc, #404]	; 8011b7c <__ieee754_logf+0x1a4>
 80119ea:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80119ee:	4770      	bx	lr
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	da02      	bge.n	80119fa <__ieee754_logf+0x22>
 80119f4:	ee30 7a40 	vsub.f32	s14, s0, s0
 80119f8:	e7f5      	b.n	80119e6 <__ieee754_logf+0xe>
 80119fa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80119fe:	db02      	blt.n	8011a06 <__ieee754_logf+0x2e>
 8011a00:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011a04:	4770      	bx	lr
 8011a06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011a0a:	bfb8      	it	lt
 8011a0c:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8011b80 <__ieee754_logf+0x1a8>
 8011a10:	485c      	ldr	r0, [pc, #368]	; (8011b84 <__ieee754_logf+0x1ac>)
 8011a12:	bfbe      	ittt	lt
 8011a14:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8011a18:	f06f 0118 	mvnlt.w	r1, #24
 8011a1c:	ee17 3a90 	vmovlt	r3, s15
 8011a20:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8011a24:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011a28:	4418      	add	r0, r3
 8011a2a:	bfa8      	it	ge
 8011a2c:	2100      	movge	r1, #0
 8011a2e:	3a7f      	subs	r2, #127	; 0x7f
 8011a30:	440a      	add	r2, r1
 8011a32:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8011a36:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8011a3a:	4319      	orrs	r1, r3
 8011a3c:	ee00 1a10 	vmov	s0, r1
 8011a40:	4951      	ldr	r1, [pc, #324]	; (8011b88 <__ieee754_logf+0x1b0>)
 8011a42:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8011a46:	f103 000f 	add.w	r0, r3, #15
 8011a4a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011a4e:	4001      	ands	r1, r0
 8011a50:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011a54:	bb89      	cbnz	r1, 8011aba <__ieee754_logf+0xe2>
 8011a56:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8011a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a5e:	d10f      	bne.n	8011a80 <__ieee754_logf+0xa8>
 8011a60:	2a00      	cmp	r2, #0
 8011a62:	f000 8085 	beq.w	8011b70 <__ieee754_logf+0x198>
 8011a66:	ee07 2a90 	vmov	s15, r2
 8011a6a:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8011b8c <__ieee754_logf+0x1b4>
 8011a6e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8011b90 <__ieee754_logf+0x1b8>
 8011a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011a76:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011a7a:	eea7 0a87 	vfma.f32	s0, s15, s14
 8011a7e:	4770      	bx	lr
 8011a80:	eddf 6a44 	vldr	s13, [pc, #272]	; 8011b94 <__ieee754_logf+0x1bc>
 8011a84:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011a88:	eee0 7a66 	vfms.f32	s15, s0, s13
 8011a8c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011a90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011a94:	b912      	cbnz	r2, 8011a9c <__ieee754_logf+0xc4>
 8011a96:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011a9a:	4770      	bx	lr
 8011a9c:	ee07 2a90 	vmov	s15, r2
 8011aa0:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8011b8c <__ieee754_logf+0x1b4>
 8011aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011aa8:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8011aac:	ee37 0a40 	vsub.f32	s0, s14, s0
 8011ab0:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8011b90 <__ieee754_logf+0x1b8>
 8011ab4:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8011ab8:	4770      	bx	lr
 8011aba:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8011abe:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011ac2:	eddf 5a35 	vldr	s11, [pc, #212]	; 8011b98 <__ieee754_logf+0x1c0>
 8011ac6:	eddf 4a35 	vldr	s9, [pc, #212]	; 8011b9c <__ieee754_logf+0x1c4>
 8011aca:	4935      	ldr	r1, [pc, #212]	; (8011ba0 <__ieee754_logf+0x1c8>)
 8011acc:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8011ad0:	4419      	add	r1, r3
 8011ad2:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8011ad6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8011ada:	430b      	orrs	r3, r1
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	ee07 2a90 	vmov	s15, r2
 8011ae2:	ee26 5a06 	vmul.f32	s10, s12, s12
 8011ae6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011aea:	ee25 7a05 	vmul.f32	s14, s10, s10
 8011aee:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8011ba4 <__ieee754_logf+0x1cc>
 8011af2:	eee7 7a25 	vfma.f32	s15, s14, s11
 8011af6:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8011ba8 <__ieee754_logf+0x1d0>
 8011afa:	eee7 5a87 	vfma.f32	s11, s15, s14
 8011afe:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8011bac <__ieee754_logf+0x1d4>
 8011b02:	eee7 7a24 	vfma.f32	s15, s14, s9
 8011b06:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8011bb0 <__ieee754_logf+0x1d8>
 8011b0a:	eee7 4a87 	vfma.f32	s9, s15, s14
 8011b0e:	eddf 7a29 	vldr	s15, [pc, #164]	; 8011bb4 <__ieee754_logf+0x1dc>
 8011b12:	eee4 7a87 	vfma.f32	s15, s9, s14
 8011b16:	ee67 7a85 	vmul.f32	s15, s15, s10
 8011b1a:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011b1e:	dd1c      	ble.n	8011b5a <__ieee754_logf+0x182>
 8011b20:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011b24:	ee20 7a07 	vmul.f32	s14, s0, s14
 8011b28:	ee27 7a00 	vmul.f32	s14, s14, s0
 8011b2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011b30:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011b34:	b922      	cbnz	r2, 8011b40 <__ieee754_logf+0x168>
 8011b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011b3a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011b3e:	4770      	bx	lr
 8011b40:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8011b8c <__ieee754_logf+0x1b4>
 8011b44:	eee6 7a86 	vfma.f32	s15, s13, s12
 8011b48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011b4c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011b50:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8011b90 <__ieee754_logf+0x1b8>
 8011b54:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8011b58:	4770      	bx	lr
 8011b5a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011b5e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011b62:	2a00      	cmp	r2, #0
 8011b64:	d0e9      	beq.n	8011b3a <__ieee754_logf+0x162>
 8011b66:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8011b8c <__ieee754_logf+0x1b4>
 8011b6a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8011b6e:	e7ed      	b.n	8011b4c <__ieee754_logf+0x174>
 8011b70:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8011b7c <__ieee754_logf+0x1a4>
 8011b74:	4770      	bx	lr
 8011b76:	bf00      	nop
 8011b78:	cc000000 	.word	0xcc000000
 8011b7c:	00000000 	.word	0x00000000
 8011b80:	4c000000 	.word	0x4c000000
 8011b84:	004afb20 	.word	0x004afb20
 8011b88:	007ffff0 	.word	0x007ffff0
 8011b8c:	3717f7d1 	.word	0x3717f7d1
 8011b90:	3f317180 	.word	0x3f317180
 8011b94:	3eaaaaab 	.word	0x3eaaaaab
 8011b98:	3e1cd04f 	.word	0x3e1cd04f
 8011b9c:	3e178897 	.word	0x3e178897
 8011ba0:	ffcf5c30 	.word	0xffcf5c30
 8011ba4:	3e638e29 	.word	0x3e638e29
 8011ba8:	3ecccccd 	.word	0x3ecccccd
 8011bac:	3e3a3325 	.word	0x3e3a3325
 8011bb0:	3e924925 	.word	0x3e924925
 8011bb4:	3f2aaaab 	.word	0x3f2aaaab

08011bb8 <__ieee754_log10f>:
 8011bb8:	b508      	push	{r3, lr}
 8011bba:	ee10 2a10 	vmov	r2, s0
 8011bbe:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8011bc2:	ed2d 8b02 	vpush	{d8}
 8011bc6:	d108      	bne.n	8011bda <__ieee754_log10f+0x22>
 8011bc8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8011c50 <__ieee754_log10f+0x98>
 8011bcc:	eddf 7a21 	vldr	s15, [pc, #132]	; 8011c54 <__ieee754_log10f+0x9c>
 8011bd0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8011bd4:	ecbd 8b02 	vpop	{d8}
 8011bd8:	bd08      	pop	{r3, pc}
 8011bda:	2a00      	cmp	r2, #0
 8011bdc:	da02      	bge.n	8011be4 <__ieee754_log10f+0x2c>
 8011bde:	ee30 7a40 	vsub.f32	s14, s0, s0
 8011be2:	e7f3      	b.n	8011bcc <__ieee754_log10f+0x14>
 8011be4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8011be8:	db02      	blt.n	8011bf0 <__ieee754_log10f+0x38>
 8011bea:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011bee:	e7f1      	b.n	8011bd4 <__ieee754_log10f+0x1c>
 8011bf0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8011bf4:	bfbf      	itttt	lt
 8011bf6:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8011c58 <__ieee754_log10f+0xa0>
 8011bfa:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8011bfe:	f06f 0118 	mvnlt.w	r1, #24
 8011c02:	ee17 2a90 	vmovlt	r2, s15
 8011c06:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8011c0a:	bfa8      	it	ge
 8011c0c:	2100      	movge	r1, #0
 8011c0e:	3b7f      	subs	r3, #127	; 0x7f
 8011c10:	440b      	add	r3, r1
 8011c12:	0fd9      	lsrs	r1, r3, #31
 8011c14:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8011c18:	ee07 3a90 	vmov	s15, r3
 8011c1c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8011c20:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8011c24:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8011c28:	ee00 3a10 	vmov	s0, r3
 8011c2c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8011c30:	f7ff fed2 	bl	80119d8 <__ieee754_logf>
 8011c34:	eddf 7a09 	vldr	s15, [pc, #36]	; 8011c5c <__ieee754_log10f+0xa4>
 8011c38:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011c3c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8011c60 <__ieee754_log10f+0xa8>
 8011c40:	eea8 0a27 	vfma.f32	s0, s16, s15
 8011c44:	eddf 7a07 	vldr	s15, [pc, #28]	; 8011c64 <__ieee754_log10f+0xac>
 8011c48:	eea8 0a27 	vfma.f32	s0, s16, s15
 8011c4c:	e7c2      	b.n	8011bd4 <__ieee754_log10f+0x1c>
 8011c4e:	bf00      	nop
 8011c50:	cc000000 	.word	0xcc000000
 8011c54:	00000000 	.word	0x00000000
 8011c58:	4c000000 	.word	0x4c000000
 8011c5c:	3ede5bd9 	.word	0x3ede5bd9
 8011c60:	355427db 	.word	0x355427db
 8011c64:	3e9a2080 	.word	0x3e9a2080

08011c68 <__ieee754_powf>:
 8011c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c6c:	ee10 4a90 	vmov	r4, s1
 8011c70:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8011c74:	ed2d 8b02 	vpush	{d8}
 8011c78:	ee10 6a10 	vmov	r6, s0
 8011c7c:	eeb0 8a40 	vmov.f32	s16, s0
 8011c80:	eef0 8a60 	vmov.f32	s17, s1
 8011c84:	d10c      	bne.n	8011ca0 <__ieee754_powf+0x38>
 8011c86:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8011c8a:	0076      	lsls	r6, r6, #1
 8011c8c:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8011c90:	f240 8296 	bls.w	80121c0 <__ieee754_powf+0x558>
 8011c94:	ee38 0a28 	vadd.f32	s0, s16, s17
 8011c98:	ecbd 8b02 	vpop	{d8}
 8011c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ca0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8011ca4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8011ca8:	dcf4      	bgt.n	8011c94 <__ieee754_powf+0x2c>
 8011caa:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8011cae:	dd08      	ble.n	8011cc2 <__ieee754_powf+0x5a>
 8011cb0:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8011cb4:	d1ee      	bne.n	8011c94 <__ieee754_powf+0x2c>
 8011cb6:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8011cba:	0064      	lsls	r4, r4, #1
 8011cbc:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8011cc0:	e7e6      	b.n	8011c90 <__ieee754_powf+0x28>
 8011cc2:	2e00      	cmp	r6, #0
 8011cc4:	da20      	bge.n	8011d08 <__ieee754_powf+0xa0>
 8011cc6:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8011cca:	da2d      	bge.n	8011d28 <__ieee754_powf+0xc0>
 8011ccc:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8011cd0:	f2c0 827f 	blt.w	80121d2 <__ieee754_powf+0x56a>
 8011cd4:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8011cd8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8011cdc:	fa48 f703 	asr.w	r7, r8, r3
 8011ce0:	fa07 f303 	lsl.w	r3, r7, r3
 8011ce4:	4543      	cmp	r3, r8
 8011ce6:	f040 8274 	bne.w	80121d2 <__ieee754_powf+0x56a>
 8011cea:	f007 0701 	and.w	r7, r7, #1
 8011cee:	f1c7 0702 	rsb	r7, r7, #2
 8011cf2:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8011cf6:	d11f      	bne.n	8011d38 <__ieee754_powf+0xd0>
 8011cf8:	2c00      	cmp	r4, #0
 8011cfa:	f280 8267 	bge.w	80121cc <__ieee754_powf+0x564>
 8011cfe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011d02:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8011d06:	e7c7      	b.n	8011c98 <__ieee754_powf+0x30>
 8011d08:	2700      	movs	r7, #0
 8011d0a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8011d0e:	d1f0      	bne.n	8011cf2 <__ieee754_powf+0x8a>
 8011d10:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8011d14:	f000 8254 	beq.w	80121c0 <__ieee754_powf+0x558>
 8011d18:	dd08      	ble.n	8011d2c <__ieee754_powf+0xc4>
 8011d1a:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8012024 <__ieee754_powf+0x3bc>
 8011d1e:	2c00      	cmp	r4, #0
 8011d20:	bfa8      	it	ge
 8011d22:	eeb0 0a68 	vmovge.f32	s0, s17
 8011d26:	e7b7      	b.n	8011c98 <__ieee754_powf+0x30>
 8011d28:	2702      	movs	r7, #2
 8011d2a:	e7ee      	b.n	8011d0a <__ieee754_powf+0xa2>
 8011d2c:	2c00      	cmp	r4, #0
 8011d2e:	f280 824a 	bge.w	80121c6 <__ieee754_powf+0x55e>
 8011d32:	eeb1 0a68 	vneg.f32	s0, s17
 8011d36:	e7af      	b.n	8011c98 <__ieee754_powf+0x30>
 8011d38:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8011d3c:	d102      	bne.n	8011d44 <__ieee754_powf+0xdc>
 8011d3e:	ee28 0a08 	vmul.f32	s0, s16, s16
 8011d42:	e7a9      	b.n	8011c98 <__ieee754_powf+0x30>
 8011d44:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8011d48:	eeb0 0a48 	vmov.f32	s0, s16
 8011d4c:	d107      	bne.n	8011d5e <__ieee754_powf+0xf6>
 8011d4e:	2e00      	cmp	r6, #0
 8011d50:	db05      	blt.n	8011d5e <__ieee754_powf+0xf6>
 8011d52:	ecbd 8b02 	vpop	{d8}
 8011d56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d5a:	f000 bbff 	b.w	801255c <__ieee754_sqrtf>
 8011d5e:	f7fe fbb3 	bl	80104c8 <fabsf>
 8011d62:	b125      	cbz	r5, 8011d6e <__ieee754_powf+0x106>
 8011d64:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8011d68:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8011d6c:	d116      	bne.n	8011d9c <__ieee754_powf+0x134>
 8011d6e:	2c00      	cmp	r4, #0
 8011d70:	bfbc      	itt	lt
 8011d72:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8011d76:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8011d7a:	2e00      	cmp	r6, #0
 8011d7c:	da8c      	bge.n	8011c98 <__ieee754_powf+0x30>
 8011d7e:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8011d82:	ea55 0307 	orrs.w	r3, r5, r7
 8011d86:	d104      	bne.n	8011d92 <__ieee754_powf+0x12a>
 8011d88:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011d8c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8011d90:	e782      	b.n	8011c98 <__ieee754_powf+0x30>
 8011d92:	2f01      	cmp	r7, #1
 8011d94:	d180      	bne.n	8011c98 <__ieee754_powf+0x30>
 8011d96:	eeb1 0a40 	vneg.f32	s0, s0
 8011d9a:	e77d      	b.n	8011c98 <__ieee754_powf+0x30>
 8011d9c:	0ff0      	lsrs	r0, r6, #31
 8011d9e:	3801      	subs	r0, #1
 8011da0:	ea57 0300 	orrs.w	r3, r7, r0
 8011da4:	d104      	bne.n	8011db0 <__ieee754_powf+0x148>
 8011da6:	ee38 8a48 	vsub.f32	s16, s16, s16
 8011daa:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8011dae:	e773      	b.n	8011c98 <__ieee754_powf+0x30>
 8011db0:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8011db4:	dd74      	ble.n	8011ea0 <__ieee754_powf+0x238>
 8011db6:	4b9c      	ldr	r3, [pc, #624]	; (8012028 <__ieee754_powf+0x3c0>)
 8011db8:	429d      	cmp	r5, r3
 8011dba:	dc08      	bgt.n	8011dce <__ieee754_powf+0x166>
 8011dbc:	2c00      	cmp	r4, #0
 8011dbe:	da0b      	bge.n	8011dd8 <__ieee754_powf+0x170>
 8011dc0:	2000      	movs	r0, #0
 8011dc2:	ecbd 8b02 	vpop	{d8}
 8011dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011dca:	f001 bcbd 	b.w	8013748 <__math_oflowf>
 8011dce:	4b97      	ldr	r3, [pc, #604]	; (801202c <__ieee754_powf+0x3c4>)
 8011dd0:	429d      	cmp	r5, r3
 8011dd2:	dd08      	ble.n	8011de6 <__ieee754_powf+0x17e>
 8011dd4:	2c00      	cmp	r4, #0
 8011dd6:	dcf3      	bgt.n	8011dc0 <__ieee754_powf+0x158>
 8011dd8:	2000      	movs	r0, #0
 8011dda:	ecbd 8b02 	vpop	{d8}
 8011dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011de2:	f001 bcab 	b.w	801373c <__math_uflowf>
 8011de6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011dea:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011dee:	eddf 6a90 	vldr	s13, [pc, #576]	; 8012030 <__ieee754_powf+0x3c8>
 8011df2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8011df6:	eee0 6a67 	vfms.f32	s13, s0, s15
 8011dfa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011dfe:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8011e02:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e0a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8012034 <__ieee754_powf+0x3cc>
 8011e0e:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8011e12:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8012038 <__ieee754_powf+0x3d0>
 8011e16:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011e1a:	ed9f 7a88 	vldr	s14, [pc, #544]	; 801203c <__ieee754_powf+0x3d4>
 8011e1e:	eef0 6a67 	vmov.f32	s13, s15
 8011e22:	eee0 6a07 	vfma.f32	s13, s0, s14
 8011e26:	ee16 3a90 	vmov	r3, s13
 8011e2a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8011e2e:	f023 030f 	bic.w	r3, r3, #15
 8011e32:	ee00 3a90 	vmov	s1, r3
 8011e36:	eee0 0a47 	vfms.f32	s1, s0, s14
 8011e3a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8011e3e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8011e42:	f024 040f 	bic.w	r4, r4, #15
 8011e46:	ee07 4a10 	vmov	s14, r4
 8011e4a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8011e4e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8011e52:	ee07 3a90 	vmov	s15, r3
 8011e56:	eee7 0a27 	vfma.f32	s1, s14, s15
 8011e5a:	3f01      	subs	r7, #1
 8011e5c:	ea57 0200 	orrs.w	r2, r7, r0
 8011e60:	ee07 4a10 	vmov	s14, r4
 8011e64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011e68:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8011e6c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8011e70:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8011e74:	ee17 4a10 	vmov	r4, s14
 8011e78:	bf08      	it	eq
 8011e7a:	eeb0 8a40 	vmoveq.f32	s16, s0
 8011e7e:	2c00      	cmp	r4, #0
 8011e80:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011e84:	f340 817e 	ble.w	8012184 <__ieee754_powf+0x51c>
 8011e88:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8011e8c:	f340 80f8 	ble.w	8012080 <__ieee754_powf+0x418>
 8011e90:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e98:	bf4c      	ite	mi
 8011e9a:	2001      	movmi	r0, #1
 8011e9c:	2000      	movpl	r0, #0
 8011e9e:	e790      	b.n	8011dc2 <__ieee754_powf+0x15a>
 8011ea0:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8011ea4:	bf01      	itttt	eq
 8011ea6:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8012040 <__ieee754_powf+0x3d8>
 8011eaa:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8011eae:	f06f 0217 	mvneq.w	r2, #23
 8011eb2:	ee17 5a90 	vmoveq	r5, s15
 8011eb6:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8011eba:	bf18      	it	ne
 8011ebc:	2200      	movne	r2, #0
 8011ebe:	3b7f      	subs	r3, #127	; 0x7f
 8011ec0:	4413      	add	r3, r2
 8011ec2:	4a60      	ldr	r2, [pc, #384]	; (8012044 <__ieee754_powf+0x3dc>)
 8011ec4:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8011ec8:	4295      	cmp	r5, r2
 8011eca:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8011ece:	dd06      	ble.n	8011ede <__ieee754_powf+0x276>
 8011ed0:	4a5d      	ldr	r2, [pc, #372]	; (8012048 <__ieee754_powf+0x3e0>)
 8011ed2:	4295      	cmp	r5, r2
 8011ed4:	f340 80a4 	ble.w	8012020 <__ieee754_powf+0x3b8>
 8011ed8:	3301      	adds	r3, #1
 8011eda:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8011ede:	2500      	movs	r5, #0
 8011ee0:	4a5a      	ldr	r2, [pc, #360]	; (801204c <__ieee754_powf+0x3e4>)
 8011ee2:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8011ee6:	ee07 1a90 	vmov	s15, r1
 8011eea:	ed92 7a00 	vldr	s14, [r2]
 8011eee:	4a58      	ldr	r2, [pc, #352]	; (8012050 <__ieee754_powf+0x3e8>)
 8011ef0:	ee37 6a27 	vadd.f32	s12, s14, s15
 8011ef4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8011ef8:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8011efc:	1049      	asrs	r1, r1, #1
 8011efe:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8011f02:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8011f06:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8011f0a:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8011f0e:	ee06 1a10 	vmov	s12, r1
 8011f12:	ee65 4a26 	vmul.f32	s9, s10, s13
 8011f16:	ee36 7a47 	vsub.f32	s14, s12, s14
 8011f1a:	ee14 6a90 	vmov	r6, s9
 8011f1e:	4016      	ands	r6, r2
 8011f20:	ee05 6a90 	vmov	s11, r6
 8011f24:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8011f28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011f2c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8012054 <__ieee754_powf+0x3ec>
 8011f30:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8011f34:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8011f38:	ee25 6a26 	vmul.f32	s12, s10, s13
 8011f3c:	eddf 6a46 	vldr	s13, [pc, #280]	; 8012058 <__ieee754_powf+0x3f0>
 8011f40:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011f44:	eddf 6a45 	vldr	s13, [pc, #276]	; 801205c <__ieee754_powf+0x3f4>
 8011f48:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011f4c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8012030 <__ieee754_powf+0x3c8>
 8011f50:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011f54:	eddf 6a42 	vldr	s13, [pc, #264]	; 8012060 <__ieee754_powf+0x3f8>
 8011f58:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011f5c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8012064 <__ieee754_powf+0x3fc>
 8011f60:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011f64:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8011f68:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8011f6c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011f70:	eee5 6a07 	vfma.f32	s13, s10, s14
 8011f74:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8011f78:	eef0 7a45 	vmov.f32	s15, s10
 8011f7c:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8011f80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011f84:	ee17 1a90 	vmov	r1, s15
 8011f88:	4011      	ands	r1, r2
 8011f8a:	ee07 1a90 	vmov	s15, r1
 8011f8e:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8011f92:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8011f96:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8011f9a:	ee27 7a24 	vmul.f32	s14, s14, s9
 8011f9e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8011fa2:	eeb0 6a47 	vmov.f32	s12, s14
 8011fa6:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8011faa:	ee16 1a10 	vmov	r1, s12
 8011fae:	4011      	ands	r1, r2
 8011fb0:	ee06 1a90 	vmov	s13, r1
 8011fb4:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8011fb8:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8012068 <__ieee754_powf+0x400>
 8011fbc:	eddf 5a2b 	vldr	s11, [pc, #172]	; 801206c <__ieee754_powf+0x404>
 8011fc0:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011fc4:	ee06 1a10 	vmov	s12, r1
 8011fc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011fcc:	eddf 7a28 	vldr	s15, [pc, #160]	; 8012070 <__ieee754_powf+0x408>
 8011fd0:	4928      	ldr	r1, [pc, #160]	; (8012074 <__ieee754_powf+0x40c>)
 8011fd2:	eea6 7a27 	vfma.f32	s14, s12, s15
 8011fd6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8011fda:	edd1 7a00 	vldr	s15, [r1]
 8011fde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011fe2:	ee07 3a90 	vmov	s15, r3
 8011fe6:	4b24      	ldr	r3, [pc, #144]	; (8012078 <__ieee754_powf+0x410>)
 8011fe8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011fec:	eef0 7a47 	vmov.f32	s15, s14
 8011ff0:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011ff4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8011ff8:	edd5 0a00 	vldr	s1, [r5]
 8011ffc:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8012000:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012004:	ee17 3a90 	vmov	r3, s15
 8012008:	4013      	ands	r3, r2
 801200a:	ee07 3a90 	vmov	s15, r3
 801200e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8012012:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8012016:	eee6 6a65 	vfms.f32	s13, s12, s11
 801201a:	ee77 7a66 	vsub.f32	s15, s14, s13
 801201e:	e70e      	b.n	8011e3e <__ieee754_powf+0x1d6>
 8012020:	2501      	movs	r5, #1
 8012022:	e75d      	b.n	8011ee0 <__ieee754_powf+0x278>
 8012024:	00000000 	.word	0x00000000
 8012028:	3f7ffff3 	.word	0x3f7ffff3
 801202c:	3f800007 	.word	0x3f800007
 8012030:	3eaaaaab 	.word	0x3eaaaaab
 8012034:	3fb8aa3b 	.word	0x3fb8aa3b
 8012038:	36eca570 	.word	0x36eca570
 801203c:	3fb8aa00 	.word	0x3fb8aa00
 8012040:	4b800000 	.word	0x4b800000
 8012044:	001cc471 	.word	0x001cc471
 8012048:	005db3d6 	.word	0x005db3d6
 801204c:	0804ce08 	.word	0x0804ce08
 8012050:	fffff000 	.word	0xfffff000
 8012054:	3e6c3255 	.word	0x3e6c3255
 8012058:	3e53f142 	.word	0x3e53f142
 801205c:	3e8ba305 	.word	0x3e8ba305
 8012060:	3edb6db7 	.word	0x3edb6db7
 8012064:	3f19999a 	.word	0x3f19999a
 8012068:	3f76384f 	.word	0x3f76384f
 801206c:	3f763800 	.word	0x3f763800
 8012070:	369dc3a0 	.word	0x369dc3a0
 8012074:	0804ce18 	.word	0x0804ce18
 8012078:	0804ce10 	.word	0x0804ce10
 801207c:	3338aa3c 	.word	0x3338aa3c
 8012080:	f040 8095 	bne.w	80121ae <__ieee754_powf+0x546>
 8012084:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801207c <__ieee754_powf+0x414>
 8012088:	ee37 7a67 	vsub.f32	s14, s14, s15
 801208c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8012090:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012098:	f73f aefa 	bgt.w	8011e90 <__ieee754_powf+0x228>
 801209c:	15db      	asrs	r3, r3, #23
 801209e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80120a2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80120a6:	4103      	asrs	r3, r0
 80120a8:	4423      	add	r3, r4
 80120aa:	494b      	ldr	r1, [pc, #300]	; (80121d8 <__ieee754_powf+0x570>)
 80120ac:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80120b0:	3a7f      	subs	r2, #127	; 0x7f
 80120b2:	4111      	asrs	r1, r2
 80120b4:	ea23 0101 	bic.w	r1, r3, r1
 80120b8:	ee07 1a10 	vmov	s14, r1
 80120bc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80120c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80120c4:	f1c2 0217 	rsb	r2, r2, #23
 80120c8:	4110      	asrs	r0, r2
 80120ca:	2c00      	cmp	r4, #0
 80120cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80120d0:	bfb8      	it	lt
 80120d2:	4240      	neglt	r0, r0
 80120d4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80120d8:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80121dc <__ieee754_powf+0x574>
 80120dc:	eddf 6a40 	vldr	s13, [pc, #256]	; 80121e0 <__ieee754_powf+0x578>
 80120e0:	ee17 3a10 	vmov	r3, s14
 80120e4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80120e8:	f023 030f 	bic.w	r3, r3, #15
 80120ec:	ee07 3a10 	vmov	s14, r3
 80120f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80120f4:	ee27 0a00 	vmul.f32	s0, s14, s0
 80120f8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80120fc:	eddf 7a39 	vldr	s15, [pc, #228]	; 80121e4 <__ieee754_powf+0x57c>
 8012100:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8012104:	eef0 7a40 	vmov.f32	s15, s0
 8012108:	eee7 7a26 	vfma.f32	s15, s14, s13
 801210c:	eeb0 6a67 	vmov.f32	s12, s15
 8012110:	eea7 6a66 	vfms.f32	s12, s14, s13
 8012114:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8012118:	ee30 0a46 	vsub.f32	s0, s0, s12
 801211c:	eddf 6a32 	vldr	s13, [pc, #200]	; 80121e8 <__ieee754_powf+0x580>
 8012120:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80121ec <__ieee754_powf+0x584>
 8012124:	eee7 6a06 	vfma.f32	s13, s14, s12
 8012128:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80121f0 <__ieee754_powf+0x588>
 801212c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8012130:	eddf 6a30 	vldr	s13, [pc, #192]	; 80121f4 <__ieee754_powf+0x58c>
 8012134:	eee6 6a07 	vfma.f32	s13, s12, s14
 8012138:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80121f8 <__ieee754_powf+0x590>
 801213c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8012140:	eef0 6a67 	vmov.f32	s13, s15
 8012144:	eee6 6a47 	vfms.f32	s13, s12, s14
 8012148:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801214c:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8012150:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8012154:	eea7 0a80 	vfma.f32	s0, s15, s0
 8012158:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801215c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8012160:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012164:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012168:	ee30 0a67 	vsub.f32	s0, s0, s15
 801216c:	ee10 3a10 	vmov	r3, s0
 8012170:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8012174:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012178:	da1f      	bge.n	80121ba <__ieee754_powf+0x552>
 801217a:	f001 fd4b 	bl	8013c14 <scalbnf>
 801217e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8012182:	e589      	b.n	8011c98 <__ieee754_powf+0x30>
 8012184:	4a1d      	ldr	r2, [pc, #116]	; (80121fc <__ieee754_powf+0x594>)
 8012186:	4293      	cmp	r3, r2
 8012188:	dd07      	ble.n	801219a <__ieee754_powf+0x532>
 801218a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801218e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012192:	bf4c      	ite	mi
 8012194:	2001      	movmi	r0, #1
 8012196:	2000      	movpl	r0, #0
 8012198:	e61f      	b.n	8011dda <__ieee754_powf+0x172>
 801219a:	d108      	bne.n	80121ae <__ieee754_powf+0x546>
 801219c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80121a0:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80121a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121a8:	f6ff af78 	blt.w	801209c <__ieee754_powf+0x434>
 80121ac:	e7ed      	b.n	801218a <__ieee754_powf+0x522>
 80121ae:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80121b2:	f73f af73 	bgt.w	801209c <__ieee754_powf+0x434>
 80121b6:	2000      	movs	r0, #0
 80121b8:	e78c      	b.n	80120d4 <__ieee754_powf+0x46c>
 80121ba:	ee00 3a10 	vmov	s0, r3
 80121be:	e7de      	b.n	801217e <__ieee754_powf+0x516>
 80121c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80121c4:	e568      	b.n	8011c98 <__ieee754_powf+0x30>
 80121c6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8012200 <__ieee754_powf+0x598>
 80121ca:	e565      	b.n	8011c98 <__ieee754_powf+0x30>
 80121cc:	eeb0 0a48 	vmov.f32	s0, s16
 80121d0:	e562      	b.n	8011c98 <__ieee754_powf+0x30>
 80121d2:	2700      	movs	r7, #0
 80121d4:	e58d      	b.n	8011cf2 <__ieee754_powf+0x8a>
 80121d6:	bf00      	nop
 80121d8:	007fffff 	.word	0x007fffff
 80121dc:	35bfbe8c 	.word	0x35bfbe8c
 80121e0:	3f317200 	.word	0x3f317200
 80121e4:	3f317218 	.word	0x3f317218
 80121e8:	b5ddea0e 	.word	0xb5ddea0e
 80121ec:	3331bb4c 	.word	0x3331bb4c
 80121f0:	388ab355 	.word	0x388ab355
 80121f4:	bb360b61 	.word	0xbb360b61
 80121f8:	3e2aaaab 	.word	0x3e2aaaab
 80121fc:	43160000 	.word	0x43160000
 8012200:	00000000 	.word	0x00000000

08012204 <__ieee754_rem_pio2f>:
 8012204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012206:	ee10 6a10 	vmov	r6, s0
 801220a:	4b8e      	ldr	r3, [pc, #568]	; (8012444 <__ieee754_rem_pio2f+0x240>)
 801220c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8012210:	429d      	cmp	r5, r3
 8012212:	b087      	sub	sp, #28
 8012214:	eef0 7a40 	vmov.f32	s15, s0
 8012218:	4604      	mov	r4, r0
 801221a:	dc05      	bgt.n	8012228 <__ieee754_rem_pio2f+0x24>
 801221c:	2300      	movs	r3, #0
 801221e:	ed80 0a00 	vstr	s0, [r0]
 8012222:	6043      	str	r3, [r0, #4]
 8012224:	2000      	movs	r0, #0
 8012226:	e01a      	b.n	801225e <__ieee754_rem_pio2f+0x5a>
 8012228:	4b87      	ldr	r3, [pc, #540]	; (8012448 <__ieee754_rem_pio2f+0x244>)
 801222a:	429d      	cmp	r5, r3
 801222c:	dc46      	bgt.n	80122bc <__ieee754_rem_pio2f+0xb8>
 801222e:	2e00      	cmp	r6, #0
 8012230:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801244c <__ieee754_rem_pio2f+0x248>
 8012234:	4b86      	ldr	r3, [pc, #536]	; (8012450 <__ieee754_rem_pio2f+0x24c>)
 8012236:	f025 050f 	bic.w	r5, r5, #15
 801223a:	dd1f      	ble.n	801227c <__ieee754_rem_pio2f+0x78>
 801223c:	429d      	cmp	r5, r3
 801223e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012242:	d00e      	beq.n	8012262 <__ieee754_rem_pio2f+0x5e>
 8012244:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8012454 <__ieee754_rem_pio2f+0x250>
 8012248:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801224c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012250:	ed80 0a00 	vstr	s0, [r0]
 8012254:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012258:	2001      	movs	r0, #1
 801225a:	edc4 7a01 	vstr	s15, [r4, #4]
 801225e:	b007      	add	sp, #28
 8012260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012262:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8012458 <__ieee754_rem_pio2f+0x254>
 8012266:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801245c <__ieee754_rem_pio2f+0x258>
 801226a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801226e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8012272:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012276:	edc0 6a00 	vstr	s13, [r0]
 801227a:	e7eb      	b.n	8012254 <__ieee754_rem_pio2f+0x50>
 801227c:	429d      	cmp	r5, r3
 801227e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012282:	d00e      	beq.n	80122a2 <__ieee754_rem_pio2f+0x9e>
 8012284:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8012454 <__ieee754_rem_pio2f+0x250>
 8012288:	ee37 0a87 	vadd.f32	s0, s15, s14
 801228c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012290:	ed80 0a00 	vstr	s0, [r0]
 8012294:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012298:	f04f 30ff 	mov.w	r0, #4294967295
 801229c:	edc4 7a01 	vstr	s15, [r4, #4]
 80122a0:	e7dd      	b.n	801225e <__ieee754_rem_pio2f+0x5a>
 80122a2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8012458 <__ieee754_rem_pio2f+0x254>
 80122a6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801245c <__ieee754_rem_pio2f+0x258>
 80122aa:	ee77 7a80 	vadd.f32	s15, s15, s0
 80122ae:	ee77 6a87 	vadd.f32	s13, s15, s14
 80122b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80122b6:	edc0 6a00 	vstr	s13, [r0]
 80122ba:	e7eb      	b.n	8012294 <__ieee754_rem_pio2f+0x90>
 80122bc:	4b68      	ldr	r3, [pc, #416]	; (8012460 <__ieee754_rem_pio2f+0x25c>)
 80122be:	429d      	cmp	r5, r3
 80122c0:	dc72      	bgt.n	80123a8 <__ieee754_rem_pio2f+0x1a4>
 80122c2:	f7fe f901 	bl	80104c8 <fabsf>
 80122c6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8012464 <__ieee754_rem_pio2f+0x260>
 80122ca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80122ce:	eee0 7a07 	vfma.f32	s15, s0, s14
 80122d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80122d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80122da:	ee17 0a90 	vmov	r0, s15
 80122de:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801244c <__ieee754_rem_pio2f+0x248>
 80122e2:	eea7 0a67 	vfms.f32	s0, s14, s15
 80122e6:	281f      	cmp	r0, #31
 80122e8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8012454 <__ieee754_rem_pio2f+0x250>
 80122ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122f0:	eeb1 6a47 	vneg.f32	s12, s14
 80122f4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80122f8:	ee16 2a90 	vmov	r2, s13
 80122fc:	dc1c      	bgt.n	8012338 <__ieee754_rem_pio2f+0x134>
 80122fe:	495a      	ldr	r1, [pc, #360]	; (8012468 <__ieee754_rem_pio2f+0x264>)
 8012300:	1e47      	subs	r7, r0, #1
 8012302:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8012306:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801230a:	428b      	cmp	r3, r1
 801230c:	d014      	beq.n	8012338 <__ieee754_rem_pio2f+0x134>
 801230e:	6022      	str	r2, [r4, #0]
 8012310:	ed94 7a00 	vldr	s14, [r4]
 8012314:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012318:	2e00      	cmp	r6, #0
 801231a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801231e:	ed84 0a01 	vstr	s0, [r4, #4]
 8012322:	da9c      	bge.n	801225e <__ieee754_rem_pio2f+0x5a>
 8012324:	eeb1 7a47 	vneg.f32	s14, s14
 8012328:	eeb1 0a40 	vneg.f32	s0, s0
 801232c:	ed84 7a00 	vstr	s14, [r4]
 8012330:	ed84 0a01 	vstr	s0, [r4, #4]
 8012334:	4240      	negs	r0, r0
 8012336:	e792      	b.n	801225e <__ieee754_rem_pio2f+0x5a>
 8012338:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801233c:	15eb      	asrs	r3, r5, #23
 801233e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8012342:	2d08      	cmp	r5, #8
 8012344:	dde3      	ble.n	801230e <__ieee754_rem_pio2f+0x10a>
 8012346:	eddf 7a44 	vldr	s15, [pc, #272]	; 8012458 <__ieee754_rem_pio2f+0x254>
 801234a:	eddf 5a44 	vldr	s11, [pc, #272]	; 801245c <__ieee754_rem_pio2f+0x258>
 801234e:	eef0 6a40 	vmov.f32	s13, s0
 8012352:	eee6 6a27 	vfma.f32	s13, s12, s15
 8012356:	ee30 0a66 	vsub.f32	s0, s0, s13
 801235a:	eea6 0a27 	vfma.f32	s0, s12, s15
 801235e:	eef0 7a40 	vmov.f32	s15, s0
 8012362:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8012366:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801236a:	ee15 2a90 	vmov	r2, s11
 801236e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8012372:	1a5b      	subs	r3, r3, r1
 8012374:	2b19      	cmp	r3, #25
 8012376:	dc04      	bgt.n	8012382 <__ieee754_rem_pio2f+0x17e>
 8012378:	edc4 5a00 	vstr	s11, [r4]
 801237c:	eeb0 0a66 	vmov.f32	s0, s13
 8012380:	e7c6      	b.n	8012310 <__ieee754_rem_pio2f+0x10c>
 8012382:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801246c <__ieee754_rem_pio2f+0x268>
 8012386:	eeb0 0a66 	vmov.f32	s0, s13
 801238a:	eea6 0a25 	vfma.f32	s0, s12, s11
 801238e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8012392:	eddf 6a37 	vldr	s13, [pc, #220]	; 8012470 <__ieee754_rem_pio2f+0x26c>
 8012396:	eee6 7a25 	vfma.f32	s15, s12, s11
 801239a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801239e:	ee30 7a67 	vsub.f32	s14, s0, s15
 80123a2:	ed84 7a00 	vstr	s14, [r4]
 80123a6:	e7b3      	b.n	8012310 <__ieee754_rem_pio2f+0x10c>
 80123a8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80123ac:	db06      	blt.n	80123bc <__ieee754_rem_pio2f+0x1b8>
 80123ae:	ee70 7a40 	vsub.f32	s15, s0, s0
 80123b2:	edc0 7a01 	vstr	s15, [r0, #4]
 80123b6:	edc0 7a00 	vstr	s15, [r0]
 80123ba:	e733      	b.n	8012224 <__ieee754_rem_pio2f+0x20>
 80123bc:	15ea      	asrs	r2, r5, #23
 80123be:	3a86      	subs	r2, #134	; 0x86
 80123c0:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80123c4:	ee07 3a90 	vmov	s15, r3
 80123c8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80123cc:	eddf 6a29 	vldr	s13, [pc, #164]	; 8012474 <__ieee754_rem_pio2f+0x270>
 80123d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80123d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80123d8:	ed8d 7a03 	vstr	s14, [sp, #12]
 80123dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80123e0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80123e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80123e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80123ec:	ed8d 7a04 	vstr	s14, [sp, #16]
 80123f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80123f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80123f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123fc:	edcd 7a05 	vstr	s15, [sp, #20]
 8012400:	d11e      	bne.n	8012440 <__ieee754_rem_pio2f+0x23c>
 8012402:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801240a:	bf14      	ite	ne
 801240c:	2302      	movne	r3, #2
 801240e:	2301      	moveq	r3, #1
 8012410:	4919      	ldr	r1, [pc, #100]	; (8012478 <__ieee754_rem_pio2f+0x274>)
 8012412:	9101      	str	r1, [sp, #4]
 8012414:	2102      	movs	r1, #2
 8012416:	9100      	str	r1, [sp, #0]
 8012418:	a803      	add	r0, sp, #12
 801241a:	4621      	mov	r1, r4
 801241c:	f000 fdda 	bl	8012fd4 <__kernel_rem_pio2f>
 8012420:	2e00      	cmp	r6, #0
 8012422:	f6bf af1c 	bge.w	801225e <__ieee754_rem_pio2f+0x5a>
 8012426:	edd4 7a00 	vldr	s15, [r4]
 801242a:	eef1 7a67 	vneg.f32	s15, s15
 801242e:	edc4 7a00 	vstr	s15, [r4]
 8012432:	edd4 7a01 	vldr	s15, [r4, #4]
 8012436:	eef1 7a67 	vneg.f32	s15, s15
 801243a:	edc4 7a01 	vstr	s15, [r4, #4]
 801243e:	e779      	b.n	8012334 <__ieee754_rem_pio2f+0x130>
 8012440:	2303      	movs	r3, #3
 8012442:	e7e5      	b.n	8012410 <__ieee754_rem_pio2f+0x20c>
 8012444:	3f490fd8 	.word	0x3f490fd8
 8012448:	4016cbe3 	.word	0x4016cbe3
 801244c:	3fc90f80 	.word	0x3fc90f80
 8012450:	3fc90fd0 	.word	0x3fc90fd0
 8012454:	37354443 	.word	0x37354443
 8012458:	37354400 	.word	0x37354400
 801245c:	2e85a308 	.word	0x2e85a308
 8012460:	43490f80 	.word	0x43490f80
 8012464:	3f22f984 	.word	0x3f22f984
 8012468:	0804ce20 	.word	0x0804ce20
 801246c:	2e85a300 	.word	0x2e85a300
 8012470:	248d3132 	.word	0x248d3132
 8012474:	43800000 	.word	0x43800000
 8012478:	0804cea0 	.word	0x0804cea0

0801247c <__ieee754_sinhf>:
 801247c:	b510      	push	{r4, lr}
 801247e:	ee10 3a10 	vmov	r3, s0
 8012482:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8012486:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801248a:	ed2d 8b02 	vpush	{d8}
 801248e:	eef0 7a40 	vmov.f32	s15, s0
 8012492:	db06      	blt.n	80124a2 <__ieee754_sinhf+0x26>
 8012494:	ee70 7a00 	vadd.f32	s15, s0, s0
 8012498:	ecbd 8b02 	vpop	{d8}
 801249c:	eeb0 0a67 	vmov.f32	s0, s15
 80124a0:	bd10      	pop	{r4, pc}
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	4b29      	ldr	r3, [pc, #164]	; (801254c <__ieee754_sinhf+0xd0>)
 80124a6:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 80124aa:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 80124ae:	bfa8      	it	ge
 80124b0:	eeb0 8a68 	vmovge.f32	s16, s17
 80124b4:	429c      	cmp	r4, r3
 80124b6:	dc2c      	bgt.n	8012512 <__ieee754_sinhf+0x96>
 80124b8:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 80124bc:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80124c0:	da08      	bge.n	80124d4 <__ieee754_sinhf+0x58>
 80124c2:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8012550 <__ieee754_sinhf+0xd4>
 80124c6:	ee30 7a07 	vadd.f32	s14, s0, s14
 80124ca:	eeb4 7ae8 	vcmpe.f32	s14, s17
 80124ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124d2:	dce1      	bgt.n	8012498 <__ieee754_sinhf+0x1c>
 80124d4:	eeb0 0a67 	vmov.f32	s0, s15
 80124d8:	f7fd fff6 	bl	80104c8 <fabsf>
 80124dc:	f001 fa6a 	bl	80139b4 <expm1f>
 80124e0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80124e4:	da0c      	bge.n	8012500 <__ieee754_sinhf+0x84>
 80124e6:	ee60 7a00 	vmul.f32	s15, s0, s0
 80124ea:	ee70 8a28 	vadd.f32	s17, s0, s17
 80124ee:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 80124f2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80124f6:	ee90 7a27 	vfnms.f32	s14, s0, s15
 80124fa:	ee67 7a08 	vmul.f32	s15, s14, s16
 80124fe:	e7cb      	b.n	8012498 <__ieee754_sinhf+0x1c>
 8012500:	ee70 8a28 	vadd.f32	s17, s0, s17
 8012504:	ee80 7a28 	vdiv.f32	s14, s0, s17
 8012508:	ee77 7a00 	vadd.f32	s15, s14, s0
 801250c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8012510:	e7c2      	b.n	8012498 <__ieee754_sinhf+0x1c>
 8012512:	4b10      	ldr	r3, [pc, #64]	; (8012554 <__ieee754_sinhf+0xd8>)
 8012514:	429c      	cmp	r4, r3
 8012516:	dc06      	bgt.n	8012526 <__ieee754_sinhf+0xaa>
 8012518:	f7fd ffd6 	bl	80104c8 <fabsf>
 801251c:	f7ff f90c 	bl	8011738 <__ieee754_expf>
 8012520:	ee60 7a08 	vmul.f32	s15, s0, s16
 8012524:	e7b8      	b.n	8012498 <__ieee754_sinhf+0x1c>
 8012526:	4b0c      	ldr	r3, [pc, #48]	; (8012558 <__ieee754_sinhf+0xdc>)
 8012528:	429c      	cmp	r4, r3
 801252a:	dc0a      	bgt.n	8012542 <__ieee754_sinhf+0xc6>
 801252c:	f7fd ffcc 	bl	80104c8 <fabsf>
 8012530:	ee20 0a28 	vmul.f32	s0, s0, s17
 8012534:	f7ff f900 	bl	8011738 <__ieee754_expf>
 8012538:	ee68 7a00 	vmul.f32	s15, s16, s0
 801253c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012540:	e7aa      	b.n	8012498 <__ieee754_sinhf+0x1c>
 8012542:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8012550 <__ieee754_sinhf+0xd4>
 8012546:	ee60 7a07 	vmul.f32	s15, s0, s14
 801254a:	e7a5      	b.n	8012498 <__ieee754_sinhf+0x1c>
 801254c:	41afffff 	.word	0x41afffff
 8012550:	7cf0bdc2 	.word	0x7cf0bdc2
 8012554:	42b17217 	.word	0x42b17217
 8012558:	42b2d4fc 	.word	0x42b2d4fc

0801255c <__ieee754_sqrtf>:
 801255c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012560:	4770      	bx	lr
 8012562:	0000      	movs	r0, r0
 8012564:	0000      	movs	r0, r0
	...

08012568 <__kernel_cos>:
 8012568:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801256c:	ec57 6b10 	vmov	r6, r7, d0
 8012570:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8012574:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8012578:	ed8d 1b00 	vstr	d1, [sp]
 801257c:	da07      	bge.n	801258e <__kernel_cos+0x26>
 801257e:	ee10 0a10 	vmov	r0, s0
 8012582:	4639      	mov	r1, r7
 8012584:	f7f4 fb50 	bl	8006c28 <__aeabi_d2iz>
 8012588:	2800      	cmp	r0, #0
 801258a:	f000 8088 	beq.w	801269e <__kernel_cos+0x136>
 801258e:	4632      	mov	r2, r6
 8012590:	463b      	mov	r3, r7
 8012592:	4630      	mov	r0, r6
 8012594:	4639      	mov	r1, r7
 8012596:	f7f4 f897 	bl	80066c8 <__aeabi_dmul>
 801259a:	4b51      	ldr	r3, [pc, #324]	; (80126e0 <__kernel_cos+0x178>)
 801259c:	2200      	movs	r2, #0
 801259e:	4604      	mov	r4, r0
 80125a0:	460d      	mov	r5, r1
 80125a2:	f7f4 f891 	bl	80066c8 <__aeabi_dmul>
 80125a6:	a340      	add	r3, pc, #256	; (adr r3, 80126a8 <__kernel_cos+0x140>)
 80125a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ac:	4682      	mov	sl, r0
 80125ae:	468b      	mov	fp, r1
 80125b0:	4620      	mov	r0, r4
 80125b2:	4629      	mov	r1, r5
 80125b4:	f7f4 f888 	bl	80066c8 <__aeabi_dmul>
 80125b8:	a33d      	add	r3, pc, #244	; (adr r3, 80126b0 <__kernel_cos+0x148>)
 80125ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125be:	f7f3 fecd 	bl	800635c <__adddf3>
 80125c2:	4622      	mov	r2, r4
 80125c4:	462b      	mov	r3, r5
 80125c6:	f7f4 f87f 	bl	80066c8 <__aeabi_dmul>
 80125ca:	a33b      	add	r3, pc, #236	; (adr r3, 80126b8 <__kernel_cos+0x150>)
 80125cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125d0:	f7f3 fec2 	bl	8006358 <__aeabi_dsub>
 80125d4:	4622      	mov	r2, r4
 80125d6:	462b      	mov	r3, r5
 80125d8:	f7f4 f876 	bl	80066c8 <__aeabi_dmul>
 80125dc:	a338      	add	r3, pc, #224	; (adr r3, 80126c0 <__kernel_cos+0x158>)
 80125de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125e2:	f7f3 febb 	bl	800635c <__adddf3>
 80125e6:	4622      	mov	r2, r4
 80125e8:	462b      	mov	r3, r5
 80125ea:	f7f4 f86d 	bl	80066c8 <__aeabi_dmul>
 80125ee:	a336      	add	r3, pc, #216	; (adr r3, 80126c8 <__kernel_cos+0x160>)
 80125f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125f4:	f7f3 feb0 	bl	8006358 <__aeabi_dsub>
 80125f8:	4622      	mov	r2, r4
 80125fa:	462b      	mov	r3, r5
 80125fc:	f7f4 f864 	bl	80066c8 <__aeabi_dmul>
 8012600:	a333      	add	r3, pc, #204	; (adr r3, 80126d0 <__kernel_cos+0x168>)
 8012602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012606:	f7f3 fea9 	bl	800635c <__adddf3>
 801260a:	4622      	mov	r2, r4
 801260c:	462b      	mov	r3, r5
 801260e:	f7f4 f85b 	bl	80066c8 <__aeabi_dmul>
 8012612:	4622      	mov	r2, r4
 8012614:	462b      	mov	r3, r5
 8012616:	f7f4 f857 	bl	80066c8 <__aeabi_dmul>
 801261a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801261e:	4604      	mov	r4, r0
 8012620:	460d      	mov	r5, r1
 8012622:	4630      	mov	r0, r6
 8012624:	4639      	mov	r1, r7
 8012626:	f7f4 f84f 	bl	80066c8 <__aeabi_dmul>
 801262a:	460b      	mov	r3, r1
 801262c:	4602      	mov	r2, r0
 801262e:	4629      	mov	r1, r5
 8012630:	4620      	mov	r0, r4
 8012632:	f7f3 fe91 	bl	8006358 <__aeabi_dsub>
 8012636:	4b2b      	ldr	r3, [pc, #172]	; (80126e4 <__kernel_cos+0x17c>)
 8012638:	4598      	cmp	r8, r3
 801263a:	4606      	mov	r6, r0
 801263c:	460f      	mov	r7, r1
 801263e:	dc10      	bgt.n	8012662 <__kernel_cos+0xfa>
 8012640:	4602      	mov	r2, r0
 8012642:	460b      	mov	r3, r1
 8012644:	4650      	mov	r0, sl
 8012646:	4659      	mov	r1, fp
 8012648:	f7f3 fe86 	bl	8006358 <__aeabi_dsub>
 801264c:	460b      	mov	r3, r1
 801264e:	4926      	ldr	r1, [pc, #152]	; (80126e8 <__kernel_cos+0x180>)
 8012650:	4602      	mov	r2, r0
 8012652:	2000      	movs	r0, #0
 8012654:	f7f3 fe80 	bl	8006358 <__aeabi_dsub>
 8012658:	ec41 0b10 	vmov	d0, r0, r1
 801265c:	b003      	add	sp, #12
 801265e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012662:	4b22      	ldr	r3, [pc, #136]	; (80126ec <__kernel_cos+0x184>)
 8012664:	4920      	ldr	r1, [pc, #128]	; (80126e8 <__kernel_cos+0x180>)
 8012666:	4598      	cmp	r8, r3
 8012668:	bfcc      	ite	gt
 801266a:	4d21      	ldrgt	r5, [pc, #132]	; (80126f0 <__kernel_cos+0x188>)
 801266c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8012670:	2400      	movs	r4, #0
 8012672:	4622      	mov	r2, r4
 8012674:	462b      	mov	r3, r5
 8012676:	2000      	movs	r0, #0
 8012678:	f7f3 fe6e 	bl	8006358 <__aeabi_dsub>
 801267c:	4622      	mov	r2, r4
 801267e:	4680      	mov	r8, r0
 8012680:	4689      	mov	r9, r1
 8012682:	462b      	mov	r3, r5
 8012684:	4650      	mov	r0, sl
 8012686:	4659      	mov	r1, fp
 8012688:	f7f3 fe66 	bl	8006358 <__aeabi_dsub>
 801268c:	4632      	mov	r2, r6
 801268e:	463b      	mov	r3, r7
 8012690:	f7f3 fe62 	bl	8006358 <__aeabi_dsub>
 8012694:	4602      	mov	r2, r0
 8012696:	460b      	mov	r3, r1
 8012698:	4640      	mov	r0, r8
 801269a:	4649      	mov	r1, r9
 801269c:	e7da      	b.n	8012654 <__kernel_cos+0xec>
 801269e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80126d8 <__kernel_cos+0x170>
 80126a2:	e7db      	b.n	801265c <__kernel_cos+0xf4>
 80126a4:	f3af 8000 	nop.w
 80126a8:	be8838d4 	.word	0xbe8838d4
 80126ac:	bda8fae9 	.word	0xbda8fae9
 80126b0:	bdb4b1c4 	.word	0xbdb4b1c4
 80126b4:	3e21ee9e 	.word	0x3e21ee9e
 80126b8:	809c52ad 	.word	0x809c52ad
 80126bc:	3e927e4f 	.word	0x3e927e4f
 80126c0:	19cb1590 	.word	0x19cb1590
 80126c4:	3efa01a0 	.word	0x3efa01a0
 80126c8:	16c15177 	.word	0x16c15177
 80126cc:	3f56c16c 	.word	0x3f56c16c
 80126d0:	5555554c 	.word	0x5555554c
 80126d4:	3fa55555 	.word	0x3fa55555
 80126d8:	00000000 	.word	0x00000000
 80126dc:	3ff00000 	.word	0x3ff00000
 80126e0:	3fe00000 	.word	0x3fe00000
 80126e4:	3fd33332 	.word	0x3fd33332
 80126e8:	3ff00000 	.word	0x3ff00000
 80126ec:	3fe90000 	.word	0x3fe90000
 80126f0:	3fd20000 	.word	0x3fd20000
 80126f4:	00000000 	.word	0x00000000

080126f8 <__kernel_rem_pio2>:
 80126f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126fc:	ed2d 8b02 	vpush	{d8}
 8012700:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8012704:	f112 0f14 	cmn.w	r2, #20
 8012708:	9308      	str	r3, [sp, #32]
 801270a:	9101      	str	r1, [sp, #4]
 801270c:	4bc4      	ldr	r3, [pc, #784]	; (8012a20 <__kernel_rem_pio2+0x328>)
 801270e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8012710:	900b      	str	r0, [sp, #44]	; 0x2c
 8012712:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012716:	9302      	str	r3, [sp, #8]
 8012718:	9b08      	ldr	r3, [sp, #32]
 801271a:	f103 33ff 	add.w	r3, r3, #4294967295
 801271e:	bfa8      	it	ge
 8012720:	1ed4      	subge	r4, r2, #3
 8012722:	9306      	str	r3, [sp, #24]
 8012724:	bfb2      	itee	lt
 8012726:	2400      	movlt	r4, #0
 8012728:	2318      	movge	r3, #24
 801272a:	fb94 f4f3 	sdivge	r4, r4, r3
 801272e:	f06f 0317 	mvn.w	r3, #23
 8012732:	fb04 3303 	mla	r3, r4, r3, r3
 8012736:	eb03 0a02 	add.w	sl, r3, r2
 801273a:	9b02      	ldr	r3, [sp, #8]
 801273c:	9a06      	ldr	r2, [sp, #24]
 801273e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8012a10 <__kernel_rem_pio2+0x318>
 8012742:	eb03 0802 	add.w	r8, r3, r2
 8012746:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012748:	1aa7      	subs	r7, r4, r2
 801274a:	ae22      	add	r6, sp, #136	; 0x88
 801274c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012750:	2500      	movs	r5, #0
 8012752:	4545      	cmp	r5, r8
 8012754:	dd13      	ble.n	801277e <__kernel_rem_pio2+0x86>
 8012756:	9b08      	ldr	r3, [sp, #32]
 8012758:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8012a10 <__kernel_rem_pio2+0x318>
 801275c:	aa22      	add	r2, sp, #136	; 0x88
 801275e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8012762:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8012766:	f04f 0800 	mov.w	r8, #0
 801276a:	9b02      	ldr	r3, [sp, #8]
 801276c:	4598      	cmp	r8, r3
 801276e:	dc2f      	bgt.n	80127d0 <__kernel_rem_pio2+0xd8>
 8012770:	ed8d 8b04 	vstr	d8, [sp, #16]
 8012774:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8012778:	462f      	mov	r7, r5
 801277a:	2600      	movs	r6, #0
 801277c:	e01b      	b.n	80127b6 <__kernel_rem_pio2+0xbe>
 801277e:	42ef      	cmn	r7, r5
 8012780:	d407      	bmi.n	8012792 <__kernel_rem_pio2+0x9a>
 8012782:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012786:	f7f3 ff35 	bl	80065f4 <__aeabi_i2d>
 801278a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801278e:	3501      	adds	r5, #1
 8012790:	e7df      	b.n	8012752 <__kernel_rem_pio2+0x5a>
 8012792:	ec51 0b18 	vmov	r0, r1, d8
 8012796:	e7f8      	b.n	801278a <__kernel_rem_pio2+0x92>
 8012798:	e9d7 2300 	ldrd	r2, r3, [r7]
 801279c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80127a0:	f7f3 ff92 	bl	80066c8 <__aeabi_dmul>
 80127a4:	4602      	mov	r2, r0
 80127a6:	460b      	mov	r3, r1
 80127a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80127ac:	f7f3 fdd6 	bl	800635c <__adddf3>
 80127b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80127b4:	3601      	adds	r6, #1
 80127b6:	9b06      	ldr	r3, [sp, #24]
 80127b8:	429e      	cmp	r6, r3
 80127ba:	f1a7 0708 	sub.w	r7, r7, #8
 80127be:	ddeb      	ble.n	8012798 <__kernel_rem_pio2+0xa0>
 80127c0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80127c4:	f108 0801 	add.w	r8, r8, #1
 80127c8:	ecab 7b02 	vstmia	fp!, {d7}
 80127cc:	3508      	adds	r5, #8
 80127ce:	e7cc      	b.n	801276a <__kernel_rem_pio2+0x72>
 80127d0:	9b02      	ldr	r3, [sp, #8]
 80127d2:	aa0e      	add	r2, sp, #56	; 0x38
 80127d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80127d8:	930d      	str	r3, [sp, #52]	; 0x34
 80127da:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80127dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80127e0:	9c02      	ldr	r4, [sp, #8]
 80127e2:	930c      	str	r3, [sp, #48]	; 0x30
 80127e4:	00e3      	lsls	r3, r4, #3
 80127e6:	930a      	str	r3, [sp, #40]	; 0x28
 80127e8:	ab9a      	add	r3, sp, #616	; 0x268
 80127ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80127ee:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80127f2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80127f6:	ab72      	add	r3, sp, #456	; 0x1c8
 80127f8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80127fc:	46c3      	mov	fp, r8
 80127fe:	46a1      	mov	r9, r4
 8012800:	f1b9 0f00 	cmp.w	r9, #0
 8012804:	f1a5 0508 	sub.w	r5, r5, #8
 8012808:	dc77      	bgt.n	80128fa <__kernel_rem_pio2+0x202>
 801280a:	ec47 6b10 	vmov	d0, r6, r7
 801280e:	4650      	mov	r0, sl
 8012810:	f001 f84a 	bl	80138a8 <scalbn>
 8012814:	ec57 6b10 	vmov	r6, r7, d0
 8012818:	2200      	movs	r2, #0
 801281a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801281e:	ee10 0a10 	vmov	r0, s0
 8012822:	4639      	mov	r1, r7
 8012824:	f7f3 ff50 	bl	80066c8 <__aeabi_dmul>
 8012828:	ec41 0b10 	vmov	d0, r0, r1
 801282c:	f000 ffbc 	bl	80137a8 <floor>
 8012830:	4b7c      	ldr	r3, [pc, #496]	; (8012a24 <__kernel_rem_pio2+0x32c>)
 8012832:	ec51 0b10 	vmov	r0, r1, d0
 8012836:	2200      	movs	r2, #0
 8012838:	f7f3 ff46 	bl	80066c8 <__aeabi_dmul>
 801283c:	4602      	mov	r2, r0
 801283e:	460b      	mov	r3, r1
 8012840:	4630      	mov	r0, r6
 8012842:	4639      	mov	r1, r7
 8012844:	f7f3 fd88 	bl	8006358 <__aeabi_dsub>
 8012848:	460f      	mov	r7, r1
 801284a:	4606      	mov	r6, r0
 801284c:	f7f4 f9ec 	bl	8006c28 <__aeabi_d2iz>
 8012850:	9004      	str	r0, [sp, #16]
 8012852:	f7f3 fecf 	bl	80065f4 <__aeabi_i2d>
 8012856:	4602      	mov	r2, r0
 8012858:	460b      	mov	r3, r1
 801285a:	4630      	mov	r0, r6
 801285c:	4639      	mov	r1, r7
 801285e:	f7f3 fd7b 	bl	8006358 <__aeabi_dsub>
 8012862:	f1ba 0f00 	cmp.w	sl, #0
 8012866:	4606      	mov	r6, r0
 8012868:	460f      	mov	r7, r1
 801286a:	dd6d      	ble.n	8012948 <__kernel_rem_pio2+0x250>
 801286c:	1e62      	subs	r2, r4, #1
 801286e:	ab0e      	add	r3, sp, #56	; 0x38
 8012870:	9d04      	ldr	r5, [sp, #16]
 8012872:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012876:	f1ca 0118 	rsb	r1, sl, #24
 801287a:	fa40 f301 	asr.w	r3, r0, r1
 801287e:	441d      	add	r5, r3
 8012880:	408b      	lsls	r3, r1
 8012882:	1ac0      	subs	r0, r0, r3
 8012884:	ab0e      	add	r3, sp, #56	; 0x38
 8012886:	9504      	str	r5, [sp, #16]
 8012888:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801288c:	f1ca 0317 	rsb	r3, sl, #23
 8012890:	fa40 fb03 	asr.w	fp, r0, r3
 8012894:	f1bb 0f00 	cmp.w	fp, #0
 8012898:	dd65      	ble.n	8012966 <__kernel_rem_pio2+0x26e>
 801289a:	9b04      	ldr	r3, [sp, #16]
 801289c:	2200      	movs	r2, #0
 801289e:	3301      	adds	r3, #1
 80128a0:	9304      	str	r3, [sp, #16]
 80128a2:	4615      	mov	r5, r2
 80128a4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80128a8:	4294      	cmp	r4, r2
 80128aa:	f300 809c 	bgt.w	80129e6 <__kernel_rem_pio2+0x2ee>
 80128ae:	f1ba 0f00 	cmp.w	sl, #0
 80128b2:	dd07      	ble.n	80128c4 <__kernel_rem_pio2+0x1cc>
 80128b4:	f1ba 0f01 	cmp.w	sl, #1
 80128b8:	f000 80c0 	beq.w	8012a3c <__kernel_rem_pio2+0x344>
 80128bc:	f1ba 0f02 	cmp.w	sl, #2
 80128c0:	f000 80c6 	beq.w	8012a50 <__kernel_rem_pio2+0x358>
 80128c4:	f1bb 0f02 	cmp.w	fp, #2
 80128c8:	d14d      	bne.n	8012966 <__kernel_rem_pio2+0x26e>
 80128ca:	4632      	mov	r2, r6
 80128cc:	463b      	mov	r3, r7
 80128ce:	4956      	ldr	r1, [pc, #344]	; (8012a28 <__kernel_rem_pio2+0x330>)
 80128d0:	2000      	movs	r0, #0
 80128d2:	f7f3 fd41 	bl	8006358 <__aeabi_dsub>
 80128d6:	4606      	mov	r6, r0
 80128d8:	460f      	mov	r7, r1
 80128da:	2d00      	cmp	r5, #0
 80128dc:	d043      	beq.n	8012966 <__kernel_rem_pio2+0x26e>
 80128de:	4650      	mov	r0, sl
 80128e0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8012a18 <__kernel_rem_pio2+0x320>
 80128e4:	f000 ffe0 	bl	80138a8 <scalbn>
 80128e8:	4630      	mov	r0, r6
 80128ea:	4639      	mov	r1, r7
 80128ec:	ec53 2b10 	vmov	r2, r3, d0
 80128f0:	f7f3 fd32 	bl	8006358 <__aeabi_dsub>
 80128f4:	4606      	mov	r6, r0
 80128f6:	460f      	mov	r7, r1
 80128f8:	e035      	b.n	8012966 <__kernel_rem_pio2+0x26e>
 80128fa:	4b4c      	ldr	r3, [pc, #304]	; (8012a2c <__kernel_rem_pio2+0x334>)
 80128fc:	2200      	movs	r2, #0
 80128fe:	4630      	mov	r0, r6
 8012900:	4639      	mov	r1, r7
 8012902:	f7f3 fee1 	bl	80066c8 <__aeabi_dmul>
 8012906:	f7f4 f98f 	bl	8006c28 <__aeabi_d2iz>
 801290a:	f7f3 fe73 	bl	80065f4 <__aeabi_i2d>
 801290e:	4602      	mov	r2, r0
 8012910:	460b      	mov	r3, r1
 8012912:	ec43 2b18 	vmov	d8, r2, r3
 8012916:	4b46      	ldr	r3, [pc, #280]	; (8012a30 <__kernel_rem_pio2+0x338>)
 8012918:	2200      	movs	r2, #0
 801291a:	f7f3 fed5 	bl	80066c8 <__aeabi_dmul>
 801291e:	4602      	mov	r2, r0
 8012920:	460b      	mov	r3, r1
 8012922:	4630      	mov	r0, r6
 8012924:	4639      	mov	r1, r7
 8012926:	f7f3 fd17 	bl	8006358 <__aeabi_dsub>
 801292a:	f7f4 f97d 	bl	8006c28 <__aeabi_d2iz>
 801292e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012932:	f84b 0b04 	str.w	r0, [fp], #4
 8012936:	ec51 0b18 	vmov	r0, r1, d8
 801293a:	f7f3 fd0f 	bl	800635c <__adddf3>
 801293e:	f109 39ff 	add.w	r9, r9, #4294967295
 8012942:	4606      	mov	r6, r0
 8012944:	460f      	mov	r7, r1
 8012946:	e75b      	b.n	8012800 <__kernel_rem_pio2+0x108>
 8012948:	d106      	bne.n	8012958 <__kernel_rem_pio2+0x260>
 801294a:	1e63      	subs	r3, r4, #1
 801294c:	aa0e      	add	r2, sp, #56	; 0x38
 801294e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012952:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8012956:	e79d      	b.n	8012894 <__kernel_rem_pio2+0x19c>
 8012958:	4b36      	ldr	r3, [pc, #216]	; (8012a34 <__kernel_rem_pio2+0x33c>)
 801295a:	2200      	movs	r2, #0
 801295c:	f7f4 f93a 	bl	8006bd4 <__aeabi_dcmpge>
 8012960:	2800      	cmp	r0, #0
 8012962:	d13d      	bne.n	80129e0 <__kernel_rem_pio2+0x2e8>
 8012964:	4683      	mov	fp, r0
 8012966:	2200      	movs	r2, #0
 8012968:	2300      	movs	r3, #0
 801296a:	4630      	mov	r0, r6
 801296c:	4639      	mov	r1, r7
 801296e:	f7f4 f913 	bl	8006b98 <__aeabi_dcmpeq>
 8012972:	2800      	cmp	r0, #0
 8012974:	f000 80c0 	beq.w	8012af8 <__kernel_rem_pio2+0x400>
 8012978:	1e65      	subs	r5, r4, #1
 801297a:	462b      	mov	r3, r5
 801297c:	2200      	movs	r2, #0
 801297e:	9902      	ldr	r1, [sp, #8]
 8012980:	428b      	cmp	r3, r1
 8012982:	da6c      	bge.n	8012a5e <__kernel_rem_pio2+0x366>
 8012984:	2a00      	cmp	r2, #0
 8012986:	f000 8089 	beq.w	8012a9c <__kernel_rem_pio2+0x3a4>
 801298a:	ab0e      	add	r3, sp, #56	; 0x38
 801298c:	f1aa 0a18 	sub.w	sl, sl, #24
 8012990:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012994:	2b00      	cmp	r3, #0
 8012996:	f000 80ad 	beq.w	8012af4 <__kernel_rem_pio2+0x3fc>
 801299a:	4650      	mov	r0, sl
 801299c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8012a18 <__kernel_rem_pio2+0x320>
 80129a0:	f000 ff82 	bl	80138a8 <scalbn>
 80129a4:	ab9a      	add	r3, sp, #616	; 0x268
 80129a6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80129aa:	ec57 6b10 	vmov	r6, r7, d0
 80129ae:	00ec      	lsls	r4, r5, #3
 80129b0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80129b4:	46aa      	mov	sl, r5
 80129b6:	f1ba 0f00 	cmp.w	sl, #0
 80129ba:	f280 80d6 	bge.w	8012b6a <__kernel_rem_pio2+0x472>
 80129be:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8012a10 <__kernel_rem_pio2+0x318>
 80129c2:	462e      	mov	r6, r5
 80129c4:	2e00      	cmp	r6, #0
 80129c6:	f2c0 8104 	blt.w	8012bd2 <__kernel_rem_pio2+0x4da>
 80129ca:	ab72      	add	r3, sp, #456	; 0x1c8
 80129cc:	ed8d 8b06 	vstr	d8, [sp, #24]
 80129d0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8012a38 <__kernel_rem_pio2+0x340>
 80129d4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80129d8:	f04f 0800 	mov.w	r8, #0
 80129dc:	1baf      	subs	r7, r5, r6
 80129de:	e0ea      	b.n	8012bb6 <__kernel_rem_pio2+0x4be>
 80129e0:	f04f 0b02 	mov.w	fp, #2
 80129e4:	e759      	b.n	801289a <__kernel_rem_pio2+0x1a2>
 80129e6:	f8d8 3000 	ldr.w	r3, [r8]
 80129ea:	b955      	cbnz	r5, 8012a02 <__kernel_rem_pio2+0x30a>
 80129ec:	b123      	cbz	r3, 80129f8 <__kernel_rem_pio2+0x300>
 80129ee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80129f2:	f8c8 3000 	str.w	r3, [r8]
 80129f6:	2301      	movs	r3, #1
 80129f8:	3201      	adds	r2, #1
 80129fa:	f108 0804 	add.w	r8, r8, #4
 80129fe:	461d      	mov	r5, r3
 8012a00:	e752      	b.n	80128a8 <__kernel_rem_pio2+0x1b0>
 8012a02:	1acb      	subs	r3, r1, r3
 8012a04:	f8c8 3000 	str.w	r3, [r8]
 8012a08:	462b      	mov	r3, r5
 8012a0a:	e7f5      	b.n	80129f8 <__kernel_rem_pio2+0x300>
 8012a0c:	f3af 8000 	nop.w
	...
 8012a1c:	3ff00000 	.word	0x3ff00000
 8012a20:	0804d1f8 	.word	0x0804d1f8
 8012a24:	40200000 	.word	0x40200000
 8012a28:	3ff00000 	.word	0x3ff00000
 8012a2c:	3e700000 	.word	0x3e700000
 8012a30:	41700000 	.word	0x41700000
 8012a34:	3fe00000 	.word	0x3fe00000
 8012a38:	0804d1b8 	.word	0x0804d1b8
 8012a3c:	1e62      	subs	r2, r4, #1
 8012a3e:	ab0e      	add	r3, sp, #56	; 0x38
 8012a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a44:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012a48:	a90e      	add	r1, sp, #56	; 0x38
 8012a4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012a4e:	e739      	b.n	80128c4 <__kernel_rem_pio2+0x1cc>
 8012a50:	1e62      	subs	r2, r4, #1
 8012a52:	ab0e      	add	r3, sp, #56	; 0x38
 8012a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a58:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012a5c:	e7f4      	b.n	8012a48 <__kernel_rem_pio2+0x350>
 8012a5e:	a90e      	add	r1, sp, #56	; 0x38
 8012a60:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012a64:	3b01      	subs	r3, #1
 8012a66:	430a      	orrs	r2, r1
 8012a68:	e789      	b.n	801297e <__kernel_rem_pio2+0x286>
 8012a6a:	3301      	adds	r3, #1
 8012a6c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012a70:	2900      	cmp	r1, #0
 8012a72:	d0fa      	beq.n	8012a6a <__kernel_rem_pio2+0x372>
 8012a74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a76:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8012a7a:	446a      	add	r2, sp
 8012a7c:	3a98      	subs	r2, #152	; 0x98
 8012a7e:	920a      	str	r2, [sp, #40]	; 0x28
 8012a80:	9a08      	ldr	r2, [sp, #32]
 8012a82:	18e3      	adds	r3, r4, r3
 8012a84:	18a5      	adds	r5, r4, r2
 8012a86:	aa22      	add	r2, sp, #136	; 0x88
 8012a88:	f104 0801 	add.w	r8, r4, #1
 8012a8c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8012a90:	9304      	str	r3, [sp, #16]
 8012a92:	9b04      	ldr	r3, [sp, #16]
 8012a94:	4543      	cmp	r3, r8
 8012a96:	da04      	bge.n	8012aa2 <__kernel_rem_pio2+0x3aa>
 8012a98:	461c      	mov	r4, r3
 8012a9a:	e6a3      	b.n	80127e4 <__kernel_rem_pio2+0xec>
 8012a9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012a9e:	2301      	movs	r3, #1
 8012aa0:	e7e4      	b.n	8012a6c <__kernel_rem_pio2+0x374>
 8012aa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012aa4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8012aa8:	f7f3 fda4 	bl	80065f4 <__aeabi_i2d>
 8012aac:	e8e5 0102 	strd	r0, r1, [r5], #8
 8012ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ab2:	46ab      	mov	fp, r5
 8012ab4:	461c      	mov	r4, r3
 8012ab6:	f04f 0900 	mov.w	r9, #0
 8012aba:	2600      	movs	r6, #0
 8012abc:	2700      	movs	r7, #0
 8012abe:	9b06      	ldr	r3, [sp, #24]
 8012ac0:	4599      	cmp	r9, r3
 8012ac2:	dd06      	ble.n	8012ad2 <__kernel_rem_pio2+0x3da>
 8012ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ac6:	e8e3 6702 	strd	r6, r7, [r3], #8
 8012aca:	f108 0801 	add.w	r8, r8, #1
 8012ace:	930a      	str	r3, [sp, #40]	; 0x28
 8012ad0:	e7df      	b.n	8012a92 <__kernel_rem_pio2+0x39a>
 8012ad2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012ad6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012ada:	f7f3 fdf5 	bl	80066c8 <__aeabi_dmul>
 8012ade:	4602      	mov	r2, r0
 8012ae0:	460b      	mov	r3, r1
 8012ae2:	4630      	mov	r0, r6
 8012ae4:	4639      	mov	r1, r7
 8012ae6:	f7f3 fc39 	bl	800635c <__adddf3>
 8012aea:	f109 0901 	add.w	r9, r9, #1
 8012aee:	4606      	mov	r6, r0
 8012af0:	460f      	mov	r7, r1
 8012af2:	e7e4      	b.n	8012abe <__kernel_rem_pio2+0x3c6>
 8012af4:	3d01      	subs	r5, #1
 8012af6:	e748      	b.n	801298a <__kernel_rem_pio2+0x292>
 8012af8:	ec47 6b10 	vmov	d0, r6, r7
 8012afc:	f1ca 0000 	rsb	r0, sl, #0
 8012b00:	f000 fed2 	bl	80138a8 <scalbn>
 8012b04:	ec57 6b10 	vmov	r6, r7, d0
 8012b08:	4ba0      	ldr	r3, [pc, #640]	; (8012d8c <__kernel_rem_pio2+0x694>)
 8012b0a:	ee10 0a10 	vmov	r0, s0
 8012b0e:	2200      	movs	r2, #0
 8012b10:	4639      	mov	r1, r7
 8012b12:	f7f4 f85f 	bl	8006bd4 <__aeabi_dcmpge>
 8012b16:	b1f8      	cbz	r0, 8012b58 <__kernel_rem_pio2+0x460>
 8012b18:	4b9d      	ldr	r3, [pc, #628]	; (8012d90 <__kernel_rem_pio2+0x698>)
 8012b1a:	2200      	movs	r2, #0
 8012b1c:	4630      	mov	r0, r6
 8012b1e:	4639      	mov	r1, r7
 8012b20:	f7f3 fdd2 	bl	80066c8 <__aeabi_dmul>
 8012b24:	f7f4 f880 	bl	8006c28 <__aeabi_d2iz>
 8012b28:	4680      	mov	r8, r0
 8012b2a:	f7f3 fd63 	bl	80065f4 <__aeabi_i2d>
 8012b2e:	4b97      	ldr	r3, [pc, #604]	; (8012d8c <__kernel_rem_pio2+0x694>)
 8012b30:	2200      	movs	r2, #0
 8012b32:	f7f3 fdc9 	bl	80066c8 <__aeabi_dmul>
 8012b36:	460b      	mov	r3, r1
 8012b38:	4602      	mov	r2, r0
 8012b3a:	4639      	mov	r1, r7
 8012b3c:	4630      	mov	r0, r6
 8012b3e:	f7f3 fc0b 	bl	8006358 <__aeabi_dsub>
 8012b42:	f7f4 f871 	bl	8006c28 <__aeabi_d2iz>
 8012b46:	1c65      	adds	r5, r4, #1
 8012b48:	ab0e      	add	r3, sp, #56	; 0x38
 8012b4a:	f10a 0a18 	add.w	sl, sl, #24
 8012b4e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012b52:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012b56:	e720      	b.n	801299a <__kernel_rem_pio2+0x2a2>
 8012b58:	4630      	mov	r0, r6
 8012b5a:	4639      	mov	r1, r7
 8012b5c:	f7f4 f864 	bl	8006c28 <__aeabi_d2iz>
 8012b60:	ab0e      	add	r3, sp, #56	; 0x38
 8012b62:	4625      	mov	r5, r4
 8012b64:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012b68:	e717      	b.n	801299a <__kernel_rem_pio2+0x2a2>
 8012b6a:	ab0e      	add	r3, sp, #56	; 0x38
 8012b6c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8012b70:	f7f3 fd40 	bl	80065f4 <__aeabi_i2d>
 8012b74:	4632      	mov	r2, r6
 8012b76:	463b      	mov	r3, r7
 8012b78:	f7f3 fda6 	bl	80066c8 <__aeabi_dmul>
 8012b7c:	4b84      	ldr	r3, [pc, #528]	; (8012d90 <__kernel_rem_pio2+0x698>)
 8012b7e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8012b82:	2200      	movs	r2, #0
 8012b84:	4630      	mov	r0, r6
 8012b86:	4639      	mov	r1, r7
 8012b88:	f7f3 fd9e 	bl	80066c8 <__aeabi_dmul>
 8012b8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012b90:	4606      	mov	r6, r0
 8012b92:	460f      	mov	r7, r1
 8012b94:	e70f      	b.n	80129b6 <__kernel_rem_pio2+0x2be>
 8012b96:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8012b9a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8012b9e:	f7f3 fd93 	bl	80066c8 <__aeabi_dmul>
 8012ba2:	4602      	mov	r2, r0
 8012ba4:	460b      	mov	r3, r1
 8012ba6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012baa:	f7f3 fbd7 	bl	800635c <__adddf3>
 8012bae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012bb2:	f108 0801 	add.w	r8, r8, #1
 8012bb6:	9b02      	ldr	r3, [sp, #8]
 8012bb8:	4598      	cmp	r8, r3
 8012bba:	dc01      	bgt.n	8012bc0 <__kernel_rem_pio2+0x4c8>
 8012bbc:	45b8      	cmp	r8, r7
 8012bbe:	ddea      	ble.n	8012b96 <__kernel_rem_pio2+0x49e>
 8012bc0:	ed9d 7b06 	vldr	d7, [sp, #24]
 8012bc4:	ab4a      	add	r3, sp, #296	; 0x128
 8012bc6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8012bca:	ed87 7b00 	vstr	d7, [r7]
 8012bce:	3e01      	subs	r6, #1
 8012bd0:	e6f8      	b.n	80129c4 <__kernel_rem_pio2+0x2cc>
 8012bd2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012bd4:	2b02      	cmp	r3, #2
 8012bd6:	dc0b      	bgt.n	8012bf0 <__kernel_rem_pio2+0x4f8>
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	dc35      	bgt.n	8012c48 <__kernel_rem_pio2+0x550>
 8012bdc:	d059      	beq.n	8012c92 <__kernel_rem_pio2+0x59a>
 8012bde:	9b04      	ldr	r3, [sp, #16]
 8012be0:	f003 0007 	and.w	r0, r3, #7
 8012be4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012be8:	ecbd 8b02 	vpop	{d8}
 8012bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bf0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012bf2:	2b03      	cmp	r3, #3
 8012bf4:	d1f3      	bne.n	8012bde <__kernel_rem_pio2+0x4e6>
 8012bf6:	ab4a      	add	r3, sp, #296	; 0x128
 8012bf8:	4423      	add	r3, r4
 8012bfa:	9306      	str	r3, [sp, #24]
 8012bfc:	461c      	mov	r4, r3
 8012bfe:	469a      	mov	sl, r3
 8012c00:	9502      	str	r5, [sp, #8]
 8012c02:	9b02      	ldr	r3, [sp, #8]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	f1aa 0a08 	sub.w	sl, sl, #8
 8012c0a:	dc6b      	bgt.n	8012ce4 <__kernel_rem_pio2+0x5ec>
 8012c0c:	46aa      	mov	sl, r5
 8012c0e:	f1ba 0f01 	cmp.w	sl, #1
 8012c12:	f1a4 0408 	sub.w	r4, r4, #8
 8012c16:	f300 8085 	bgt.w	8012d24 <__kernel_rem_pio2+0x62c>
 8012c1a:	9c06      	ldr	r4, [sp, #24]
 8012c1c:	2000      	movs	r0, #0
 8012c1e:	3408      	adds	r4, #8
 8012c20:	2100      	movs	r1, #0
 8012c22:	2d01      	cmp	r5, #1
 8012c24:	f300 809d 	bgt.w	8012d62 <__kernel_rem_pio2+0x66a>
 8012c28:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8012c2c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8012c30:	f1bb 0f00 	cmp.w	fp, #0
 8012c34:	f040 809b 	bne.w	8012d6e <__kernel_rem_pio2+0x676>
 8012c38:	9b01      	ldr	r3, [sp, #4]
 8012c3a:	e9c3 5600 	strd	r5, r6, [r3]
 8012c3e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8012c42:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012c46:	e7ca      	b.n	8012bde <__kernel_rem_pio2+0x4e6>
 8012c48:	3408      	adds	r4, #8
 8012c4a:	ab4a      	add	r3, sp, #296	; 0x128
 8012c4c:	441c      	add	r4, r3
 8012c4e:	462e      	mov	r6, r5
 8012c50:	2000      	movs	r0, #0
 8012c52:	2100      	movs	r1, #0
 8012c54:	2e00      	cmp	r6, #0
 8012c56:	da36      	bge.n	8012cc6 <__kernel_rem_pio2+0x5ce>
 8012c58:	f1bb 0f00 	cmp.w	fp, #0
 8012c5c:	d039      	beq.n	8012cd2 <__kernel_rem_pio2+0x5da>
 8012c5e:	4602      	mov	r2, r0
 8012c60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012c64:	9c01      	ldr	r4, [sp, #4]
 8012c66:	e9c4 2300 	strd	r2, r3, [r4]
 8012c6a:	4602      	mov	r2, r0
 8012c6c:	460b      	mov	r3, r1
 8012c6e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012c72:	f7f3 fb71 	bl	8006358 <__aeabi_dsub>
 8012c76:	ae4c      	add	r6, sp, #304	; 0x130
 8012c78:	2401      	movs	r4, #1
 8012c7a:	42a5      	cmp	r5, r4
 8012c7c:	da2c      	bge.n	8012cd8 <__kernel_rem_pio2+0x5e0>
 8012c7e:	f1bb 0f00 	cmp.w	fp, #0
 8012c82:	d002      	beq.n	8012c8a <__kernel_rem_pio2+0x592>
 8012c84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012c88:	4619      	mov	r1, r3
 8012c8a:	9b01      	ldr	r3, [sp, #4]
 8012c8c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012c90:	e7a5      	b.n	8012bde <__kernel_rem_pio2+0x4e6>
 8012c92:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8012c96:	eb0d 0403 	add.w	r4, sp, r3
 8012c9a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012c9e:	2000      	movs	r0, #0
 8012ca0:	2100      	movs	r1, #0
 8012ca2:	2d00      	cmp	r5, #0
 8012ca4:	da09      	bge.n	8012cba <__kernel_rem_pio2+0x5c2>
 8012ca6:	f1bb 0f00 	cmp.w	fp, #0
 8012caa:	d002      	beq.n	8012cb2 <__kernel_rem_pio2+0x5ba>
 8012cac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012cb0:	4619      	mov	r1, r3
 8012cb2:	9b01      	ldr	r3, [sp, #4]
 8012cb4:	e9c3 0100 	strd	r0, r1, [r3]
 8012cb8:	e791      	b.n	8012bde <__kernel_rem_pio2+0x4e6>
 8012cba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012cbe:	f7f3 fb4d 	bl	800635c <__adddf3>
 8012cc2:	3d01      	subs	r5, #1
 8012cc4:	e7ed      	b.n	8012ca2 <__kernel_rem_pio2+0x5aa>
 8012cc6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012cca:	f7f3 fb47 	bl	800635c <__adddf3>
 8012cce:	3e01      	subs	r6, #1
 8012cd0:	e7c0      	b.n	8012c54 <__kernel_rem_pio2+0x55c>
 8012cd2:	4602      	mov	r2, r0
 8012cd4:	460b      	mov	r3, r1
 8012cd6:	e7c5      	b.n	8012c64 <__kernel_rem_pio2+0x56c>
 8012cd8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012cdc:	f7f3 fb3e 	bl	800635c <__adddf3>
 8012ce0:	3401      	adds	r4, #1
 8012ce2:	e7ca      	b.n	8012c7a <__kernel_rem_pio2+0x582>
 8012ce4:	e9da 8900 	ldrd	r8, r9, [sl]
 8012ce8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8012cec:	9b02      	ldr	r3, [sp, #8]
 8012cee:	3b01      	subs	r3, #1
 8012cf0:	9302      	str	r3, [sp, #8]
 8012cf2:	4632      	mov	r2, r6
 8012cf4:	463b      	mov	r3, r7
 8012cf6:	4640      	mov	r0, r8
 8012cf8:	4649      	mov	r1, r9
 8012cfa:	f7f3 fb2f 	bl	800635c <__adddf3>
 8012cfe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012d02:	4602      	mov	r2, r0
 8012d04:	460b      	mov	r3, r1
 8012d06:	4640      	mov	r0, r8
 8012d08:	4649      	mov	r1, r9
 8012d0a:	f7f3 fb25 	bl	8006358 <__aeabi_dsub>
 8012d0e:	4632      	mov	r2, r6
 8012d10:	463b      	mov	r3, r7
 8012d12:	f7f3 fb23 	bl	800635c <__adddf3>
 8012d16:	ed9d 7b08 	vldr	d7, [sp, #32]
 8012d1a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012d1e:	ed8a 7b00 	vstr	d7, [sl]
 8012d22:	e76e      	b.n	8012c02 <__kernel_rem_pio2+0x50a>
 8012d24:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012d28:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8012d2c:	4640      	mov	r0, r8
 8012d2e:	4632      	mov	r2, r6
 8012d30:	463b      	mov	r3, r7
 8012d32:	4649      	mov	r1, r9
 8012d34:	f7f3 fb12 	bl	800635c <__adddf3>
 8012d38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d3c:	4602      	mov	r2, r0
 8012d3e:	460b      	mov	r3, r1
 8012d40:	4640      	mov	r0, r8
 8012d42:	4649      	mov	r1, r9
 8012d44:	f7f3 fb08 	bl	8006358 <__aeabi_dsub>
 8012d48:	4632      	mov	r2, r6
 8012d4a:	463b      	mov	r3, r7
 8012d4c:	f7f3 fb06 	bl	800635c <__adddf3>
 8012d50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012d54:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012d58:	ed84 7b00 	vstr	d7, [r4]
 8012d5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012d60:	e755      	b.n	8012c0e <__kernel_rem_pio2+0x516>
 8012d62:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012d66:	f7f3 faf9 	bl	800635c <__adddf3>
 8012d6a:	3d01      	subs	r5, #1
 8012d6c:	e759      	b.n	8012c22 <__kernel_rem_pio2+0x52a>
 8012d6e:	9b01      	ldr	r3, [sp, #4]
 8012d70:	9a01      	ldr	r2, [sp, #4]
 8012d72:	601d      	str	r5, [r3, #0]
 8012d74:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8012d78:	605c      	str	r4, [r3, #4]
 8012d7a:	609f      	str	r7, [r3, #8]
 8012d7c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8012d80:	60d3      	str	r3, [r2, #12]
 8012d82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012d86:	6110      	str	r0, [r2, #16]
 8012d88:	6153      	str	r3, [r2, #20]
 8012d8a:	e728      	b.n	8012bde <__kernel_rem_pio2+0x4e6>
 8012d8c:	41700000 	.word	0x41700000
 8012d90:	3e700000 	.word	0x3e700000
 8012d94:	00000000 	.word	0x00000000

08012d98 <__kernel_sin>:
 8012d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d9c:	ed2d 8b04 	vpush	{d8-d9}
 8012da0:	eeb0 8a41 	vmov.f32	s16, s2
 8012da4:	eef0 8a61 	vmov.f32	s17, s3
 8012da8:	ec55 4b10 	vmov	r4, r5, d0
 8012dac:	b083      	sub	sp, #12
 8012dae:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012db2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012db6:	9001      	str	r0, [sp, #4]
 8012db8:	da06      	bge.n	8012dc8 <__kernel_sin+0x30>
 8012dba:	ee10 0a10 	vmov	r0, s0
 8012dbe:	4629      	mov	r1, r5
 8012dc0:	f7f3 ff32 	bl	8006c28 <__aeabi_d2iz>
 8012dc4:	2800      	cmp	r0, #0
 8012dc6:	d051      	beq.n	8012e6c <__kernel_sin+0xd4>
 8012dc8:	4622      	mov	r2, r4
 8012dca:	462b      	mov	r3, r5
 8012dcc:	4620      	mov	r0, r4
 8012dce:	4629      	mov	r1, r5
 8012dd0:	f7f3 fc7a 	bl	80066c8 <__aeabi_dmul>
 8012dd4:	4682      	mov	sl, r0
 8012dd6:	468b      	mov	fp, r1
 8012dd8:	4602      	mov	r2, r0
 8012dda:	460b      	mov	r3, r1
 8012ddc:	4620      	mov	r0, r4
 8012dde:	4629      	mov	r1, r5
 8012de0:	f7f3 fc72 	bl	80066c8 <__aeabi_dmul>
 8012de4:	a341      	add	r3, pc, #260	; (adr r3, 8012eec <__kernel_sin+0x154>)
 8012de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dea:	4680      	mov	r8, r0
 8012dec:	4689      	mov	r9, r1
 8012dee:	4650      	mov	r0, sl
 8012df0:	4659      	mov	r1, fp
 8012df2:	f7f3 fc69 	bl	80066c8 <__aeabi_dmul>
 8012df6:	a33f      	add	r3, pc, #252	; (adr r3, 8012ef4 <__kernel_sin+0x15c>)
 8012df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dfc:	f7f3 faac 	bl	8006358 <__aeabi_dsub>
 8012e00:	4652      	mov	r2, sl
 8012e02:	465b      	mov	r3, fp
 8012e04:	f7f3 fc60 	bl	80066c8 <__aeabi_dmul>
 8012e08:	a33c      	add	r3, pc, #240	; (adr r3, 8012efc <__kernel_sin+0x164>)
 8012e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e0e:	f7f3 faa5 	bl	800635c <__adddf3>
 8012e12:	4652      	mov	r2, sl
 8012e14:	465b      	mov	r3, fp
 8012e16:	f7f3 fc57 	bl	80066c8 <__aeabi_dmul>
 8012e1a:	a33a      	add	r3, pc, #232	; (adr r3, 8012f04 <__kernel_sin+0x16c>)
 8012e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e20:	f7f3 fa9a 	bl	8006358 <__aeabi_dsub>
 8012e24:	4652      	mov	r2, sl
 8012e26:	465b      	mov	r3, fp
 8012e28:	f7f3 fc4e 	bl	80066c8 <__aeabi_dmul>
 8012e2c:	a337      	add	r3, pc, #220	; (adr r3, 8012f0c <__kernel_sin+0x174>)
 8012e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e32:	f7f3 fa93 	bl	800635c <__adddf3>
 8012e36:	9b01      	ldr	r3, [sp, #4]
 8012e38:	4606      	mov	r6, r0
 8012e3a:	460f      	mov	r7, r1
 8012e3c:	b9eb      	cbnz	r3, 8012e7a <__kernel_sin+0xe2>
 8012e3e:	4602      	mov	r2, r0
 8012e40:	460b      	mov	r3, r1
 8012e42:	4650      	mov	r0, sl
 8012e44:	4659      	mov	r1, fp
 8012e46:	f7f3 fc3f 	bl	80066c8 <__aeabi_dmul>
 8012e4a:	a325      	add	r3, pc, #148	; (adr r3, 8012ee0 <__kernel_sin+0x148>)
 8012e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e50:	f7f3 fa82 	bl	8006358 <__aeabi_dsub>
 8012e54:	4642      	mov	r2, r8
 8012e56:	464b      	mov	r3, r9
 8012e58:	f7f3 fc36 	bl	80066c8 <__aeabi_dmul>
 8012e5c:	4602      	mov	r2, r0
 8012e5e:	460b      	mov	r3, r1
 8012e60:	4620      	mov	r0, r4
 8012e62:	4629      	mov	r1, r5
 8012e64:	f7f3 fa7a 	bl	800635c <__adddf3>
 8012e68:	4604      	mov	r4, r0
 8012e6a:	460d      	mov	r5, r1
 8012e6c:	ec45 4b10 	vmov	d0, r4, r5
 8012e70:	b003      	add	sp, #12
 8012e72:	ecbd 8b04 	vpop	{d8-d9}
 8012e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e7a:	4b1b      	ldr	r3, [pc, #108]	; (8012ee8 <__kernel_sin+0x150>)
 8012e7c:	ec51 0b18 	vmov	r0, r1, d8
 8012e80:	2200      	movs	r2, #0
 8012e82:	f7f3 fc21 	bl	80066c8 <__aeabi_dmul>
 8012e86:	4632      	mov	r2, r6
 8012e88:	ec41 0b19 	vmov	d9, r0, r1
 8012e8c:	463b      	mov	r3, r7
 8012e8e:	4640      	mov	r0, r8
 8012e90:	4649      	mov	r1, r9
 8012e92:	f7f3 fc19 	bl	80066c8 <__aeabi_dmul>
 8012e96:	4602      	mov	r2, r0
 8012e98:	460b      	mov	r3, r1
 8012e9a:	ec51 0b19 	vmov	r0, r1, d9
 8012e9e:	f7f3 fa5b 	bl	8006358 <__aeabi_dsub>
 8012ea2:	4652      	mov	r2, sl
 8012ea4:	465b      	mov	r3, fp
 8012ea6:	f7f3 fc0f 	bl	80066c8 <__aeabi_dmul>
 8012eaa:	ec53 2b18 	vmov	r2, r3, d8
 8012eae:	f7f3 fa53 	bl	8006358 <__aeabi_dsub>
 8012eb2:	a30b      	add	r3, pc, #44	; (adr r3, 8012ee0 <__kernel_sin+0x148>)
 8012eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eb8:	4606      	mov	r6, r0
 8012eba:	460f      	mov	r7, r1
 8012ebc:	4640      	mov	r0, r8
 8012ebe:	4649      	mov	r1, r9
 8012ec0:	f7f3 fc02 	bl	80066c8 <__aeabi_dmul>
 8012ec4:	4602      	mov	r2, r0
 8012ec6:	460b      	mov	r3, r1
 8012ec8:	4630      	mov	r0, r6
 8012eca:	4639      	mov	r1, r7
 8012ecc:	f7f3 fa46 	bl	800635c <__adddf3>
 8012ed0:	4602      	mov	r2, r0
 8012ed2:	460b      	mov	r3, r1
 8012ed4:	4620      	mov	r0, r4
 8012ed6:	4629      	mov	r1, r5
 8012ed8:	f7f3 fa3e 	bl	8006358 <__aeabi_dsub>
 8012edc:	e7c4      	b.n	8012e68 <__kernel_sin+0xd0>
 8012ede:	bf00      	nop
 8012ee0:	55555549 	.word	0x55555549
 8012ee4:	3fc55555 	.word	0x3fc55555
 8012ee8:	3fe00000 	.word	0x3fe00000
 8012eec:	5acfd57c 	.word	0x5acfd57c
 8012ef0:	3de5d93a 	.word	0x3de5d93a
 8012ef4:	8a2b9ceb 	.word	0x8a2b9ceb
 8012ef8:	3e5ae5e6 	.word	0x3e5ae5e6
 8012efc:	57b1fe7d 	.word	0x57b1fe7d
 8012f00:	3ec71de3 	.word	0x3ec71de3
 8012f04:	19c161d5 	.word	0x19c161d5
 8012f08:	3f2a01a0 	.word	0x3f2a01a0
 8012f0c:	1110f8a6 	.word	0x1110f8a6
 8012f10:	3f811111 	.word	0x3f811111

08012f14 <__kernel_cosf>:
 8012f14:	ee10 3a10 	vmov	r3, s0
 8012f18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012f1c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8012f20:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8012f24:	da05      	bge.n	8012f32 <__kernel_cosf+0x1e>
 8012f26:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012f2a:	ee17 2a90 	vmov	r2, s15
 8012f2e:	2a00      	cmp	r2, #0
 8012f30:	d03d      	beq.n	8012fae <__kernel_cosf+0x9a>
 8012f32:	ee60 5a00 	vmul.f32	s11, s0, s0
 8012f36:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8012fb4 <__kernel_cosf+0xa0>
 8012f3a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8012fb8 <__kernel_cosf+0xa4>
 8012f3e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8012fbc <__kernel_cosf+0xa8>
 8012f42:	4a1f      	ldr	r2, [pc, #124]	; (8012fc0 <__kernel_cosf+0xac>)
 8012f44:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8012f48:	4293      	cmp	r3, r2
 8012f4a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8012fc4 <__kernel_cosf+0xb0>
 8012f4e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8012f52:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8012fc8 <__kernel_cosf+0xb4>
 8012f56:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8012f5a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8012fcc <__kernel_cosf+0xb8>
 8012f5e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8012f62:	eeb0 7a66 	vmov.f32	s14, s13
 8012f66:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8012f6a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8012f6e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8012f72:	ee67 6a25 	vmul.f32	s13, s14, s11
 8012f76:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8012f7a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012f7e:	dc04      	bgt.n	8012f8a <__kernel_cosf+0x76>
 8012f80:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8012f84:	ee36 0a47 	vsub.f32	s0, s12, s14
 8012f88:	4770      	bx	lr
 8012f8a:	4a11      	ldr	r2, [pc, #68]	; (8012fd0 <__kernel_cosf+0xbc>)
 8012f8c:	4293      	cmp	r3, r2
 8012f8e:	bfda      	itte	le
 8012f90:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8012f94:	ee06 3a90 	vmovle	s13, r3
 8012f98:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8012f9c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012fa0:	ee36 0a66 	vsub.f32	s0, s12, s13
 8012fa4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012fa8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012fac:	4770      	bx	lr
 8012fae:	eeb0 0a46 	vmov.f32	s0, s12
 8012fb2:	4770      	bx	lr
 8012fb4:	ad47d74e 	.word	0xad47d74e
 8012fb8:	310f74f6 	.word	0x310f74f6
 8012fbc:	3d2aaaab 	.word	0x3d2aaaab
 8012fc0:	3e999999 	.word	0x3e999999
 8012fc4:	b493f27c 	.word	0xb493f27c
 8012fc8:	37d00d01 	.word	0x37d00d01
 8012fcc:	bab60b61 	.word	0xbab60b61
 8012fd0:	3f480000 	.word	0x3f480000

08012fd4 <__kernel_rem_pio2f>:
 8012fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fd8:	ed2d 8b04 	vpush	{d8-d9}
 8012fdc:	b0d9      	sub	sp, #356	; 0x164
 8012fde:	4688      	mov	r8, r1
 8012fe0:	9002      	str	r0, [sp, #8]
 8012fe2:	49bb      	ldr	r1, [pc, #748]	; (80132d0 <__kernel_rem_pio2f+0x2fc>)
 8012fe4:	9866      	ldr	r0, [sp, #408]	; 0x198
 8012fe6:	9301      	str	r3, [sp, #4]
 8012fe8:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8012fec:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8012ff0:	1e59      	subs	r1, r3, #1
 8012ff2:	1d13      	adds	r3, r2, #4
 8012ff4:	db27      	blt.n	8013046 <__kernel_rem_pio2f+0x72>
 8012ff6:	f1b2 0b03 	subs.w	fp, r2, #3
 8012ffa:	bf48      	it	mi
 8012ffc:	f102 0b04 	addmi.w	fp, r2, #4
 8013000:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8013004:	1c45      	adds	r5, r0, #1
 8013006:	00ec      	lsls	r4, r5, #3
 8013008:	1a47      	subs	r7, r0, r1
 801300a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80132e0 <__kernel_rem_pio2f+0x30c>
 801300e:	9403      	str	r4, [sp, #12]
 8013010:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8013014:	eb0a 0c01 	add.w	ip, sl, r1
 8013018:	ae1c      	add	r6, sp, #112	; 0x70
 801301a:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 801301e:	2400      	movs	r4, #0
 8013020:	4564      	cmp	r4, ip
 8013022:	dd12      	ble.n	801304a <__kernel_rem_pio2f+0x76>
 8013024:	9b01      	ldr	r3, [sp, #4]
 8013026:	ac1c      	add	r4, sp, #112	; 0x70
 8013028:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801302c:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8013030:	f04f 0c00 	mov.w	ip, #0
 8013034:	45d4      	cmp	ip, sl
 8013036:	dc27      	bgt.n	8013088 <__kernel_rem_pio2f+0xb4>
 8013038:	f8dd 9008 	ldr.w	r9, [sp, #8]
 801303c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80132e0 <__kernel_rem_pio2f+0x30c>
 8013040:	4627      	mov	r7, r4
 8013042:	2600      	movs	r6, #0
 8013044:	e016      	b.n	8013074 <__kernel_rem_pio2f+0xa0>
 8013046:	2000      	movs	r0, #0
 8013048:	e7dc      	b.n	8013004 <__kernel_rem_pio2f+0x30>
 801304a:	42e7      	cmn	r7, r4
 801304c:	bf5d      	ittte	pl
 801304e:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8013052:	ee07 3a90 	vmovpl	s15, r3
 8013056:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801305a:	eef0 7a47 	vmovmi.f32	s15, s14
 801305e:	ece6 7a01 	vstmia	r6!, {s15}
 8013062:	3401      	adds	r4, #1
 8013064:	e7dc      	b.n	8013020 <__kernel_rem_pio2f+0x4c>
 8013066:	ecf9 6a01 	vldmia	r9!, {s13}
 801306a:	ed97 7a00 	vldr	s14, [r7]
 801306e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013072:	3601      	adds	r6, #1
 8013074:	428e      	cmp	r6, r1
 8013076:	f1a7 0704 	sub.w	r7, r7, #4
 801307a:	ddf4      	ble.n	8013066 <__kernel_rem_pio2f+0x92>
 801307c:	eceb 7a01 	vstmia	fp!, {s15}
 8013080:	f10c 0c01 	add.w	ip, ip, #1
 8013084:	3404      	adds	r4, #4
 8013086:	e7d5      	b.n	8013034 <__kernel_rem_pio2f+0x60>
 8013088:	ab08      	add	r3, sp, #32
 801308a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801308e:	eddf 8a93 	vldr	s17, [pc, #588]	; 80132dc <__kernel_rem_pio2f+0x308>
 8013092:	ed9f 9a91 	vldr	s18, [pc, #580]	; 80132d8 <__kernel_rem_pio2f+0x304>
 8013096:	9304      	str	r3, [sp, #16]
 8013098:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 801309c:	4656      	mov	r6, sl
 801309e:	00b3      	lsls	r3, r6, #2
 80130a0:	9305      	str	r3, [sp, #20]
 80130a2:	ab58      	add	r3, sp, #352	; 0x160
 80130a4:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80130a8:	ac08      	add	r4, sp, #32
 80130aa:	ab44      	add	r3, sp, #272	; 0x110
 80130ac:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80130b0:	46a4      	mov	ip, r4
 80130b2:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80130b6:	4637      	mov	r7, r6
 80130b8:	2f00      	cmp	r7, #0
 80130ba:	f1a0 0004 	sub.w	r0, r0, #4
 80130be:	dc4f      	bgt.n	8013160 <__kernel_rem_pio2f+0x18c>
 80130c0:	4628      	mov	r0, r5
 80130c2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80130c6:	f000 fda5 	bl	8013c14 <scalbnf>
 80130ca:	eeb0 8a40 	vmov.f32	s16, s0
 80130ce:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80130d2:	ee28 0a00 	vmul.f32	s0, s16, s0
 80130d6:	f7fd f9ff 	bl	80104d8 <floorf>
 80130da:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80130de:	eea0 8a67 	vfms.f32	s16, s0, s15
 80130e2:	2d00      	cmp	r5, #0
 80130e4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80130e8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80130ec:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80130f0:	ee17 9a90 	vmov	r9, s15
 80130f4:	ee38 8a40 	vsub.f32	s16, s16, s0
 80130f8:	dd44      	ble.n	8013184 <__kernel_rem_pio2f+0x1b0>
 80130fa:	f106 3cff 	add.w	ip, r6, #4294967295
 80130fe:	ab08      	add	r3, sp, #32
 8013100:	f1c5 0e08 	rsb	lr, r5, #8
 8013104:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8013108:	fa47 f00e 	asr.w	r0, r7, lr
 801310c:	4481      	add	r9, r0
 801310e:	fa00 f00e 	lsl.w	r0, r0, lr
 8013112:	1a3f      	subs	r7, r7, r0
 8013114:	f1c5 0007 	rsb	r0, r5, #7
 8013118:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801311c:	4107      	asrs	r7, r0
 801311e:	2f00      	cmp	r7, #0
 8013120:	dd3f      	ble.n	80131a2 <__kernel_rem_pio2f+0x1ce>
 8013122:	f04f 0e00 	mov.w	lr, #0
 8013126:	f109 0901 	add.w	r9, r9, #1
 801312a:	4673      	mov	r3, lr
 801312c:	4576      	cmp	r6, lr
 801312e:	dc6b      	bgt.n	8013208 <__kernel_rem_pio2f+0x234>
 8013130:	2d00      	cmp	r5, #0
 8013132:	dd04      	ble.n	801313e <__kernel_rem_pio2f+0x16a>
 8013134:	2d01      	cmp	r5, #1
 8013136:	d078      	beq.n	801322a <__kernel_rem_pio2f+0x256>
 8013138:	2d02      	cmp	r5, #2
 801313a:	f000 8081 	beq.w	8013240 <__kernel_rem_pio2f+0x26c>
 801313e:	2f02      	cmp	r7, #2
 8013140:	d12f      	bne.n	80131a2 <__kernel_rem_pio2f+0x1ce>
 8013142:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013146:	ee30 8a48 	vsub.f32	s16, s0, s16
 801314a:	b353      	cbz	r3, 80131a2 <__kernel_rem_pio2f+0x1ce>
 801314c:	4628      	mov	r0, r5
 801314e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8013152:	f000 fd5f 	bl	8013c14 <scalbnf>
 8013156:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801315a:	ee38 8a40 	vsub.f32	s16, s16, s0
 801315e:	e020      	b.n	80131a2 <__kernel_rem_pio2f+0x1ce>
 8013160:	ee60 7a28 	vmul.f32	s15, s0, s17
 8013164:	3f01      	subs	r7, #1
 8013166:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801316a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801316e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8013172:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013176:	ecac 0a01 	vstmia	ip!, {s0}
 801317a:	ed90 0a00 	vldr	s0, [r0]
 801317e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013182:	e799      	b.n	80130b8 <__kernel_rem_pio2f+0xe4>
 8013184:	d105      	bne.n	8013192 <__kernel_rem_pio2f+0x1be>
 8013186:	1e70      	subs	r0, r6, #1
 8013188:	ab08      	add	r3, sp, #32
 801318a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801318e:	11ff      	asrs	r7, r7, #7
 8013190:	e7c5      	b.n	801311e <__kernel_rem_pio2f+0x14a>
 8013192:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013196:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801319a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801319e:	da31      	bge.n	8013204 <__kernel_rem_pio2f+0x230>
 80131a0:	2700      	movs	r7, #0
 80131a2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80131a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131aa:	f040 809b 	bne.w	80132e4 <__kernel_rem_pio2f+0x310>
 80131ae:	1e74      	subs	r4, r6, #1
 80131b0:	46a4      	mov	ip, r4
 80131b2:	2000      	movs	r0, #0
 80131b4:	45d4      	cmp	ip, sl
 80131b6:	da4a      	bge.n	801324e <__kernel_rem_pio2f+0x27a>
 80131b8:	2800      	cmp	r0, #0
 80131ba:	d07a      	beq.n	80132b2 <__kernel_rem_pio2f+0x2de>
 80131bc:	ab08      	add	r3, sp, #32
 80131be:	3d08      	subs	r5, #8
 80131c0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	f000 8081 	beq.w	80132cc <__kernel_rem_pio2f+0x2f8>
 80131ca:	4628      	mov	r0, r5
 80131cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80131d0:	00a5      	lsls	r5, r4, #2
 80131d2:	f000 fd1f 	bl	8013c14 <scalbnf>
 80131d6:	aa44      	add	r2, sp, #272	; 0x110
 80131d8:	1d2b      	adds	r3, r5, #4
 80131da:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80132dc <__kernel_rem_pio2f+0x308>
 80131de:	18d1      	adds	r1, r2, r3
 80131e0:	4622      	mov	r2, r4
 80131e2:	2a00      	cmp	r2, #0
 80131e4:	f280 80ae 	bge.w	8013344 <__kernel_rem_pio2f+0x370>
 80131e8:	4622      	mov	r2, r4
 80131ea:	2a00      	cmp	r2, #0
 80131ec:	f2c0 80cc 	blt.w	8013388 <__kernel_rem_pio2f+0x3b4>
 80131f0:	a944      	add	r1, sp, #272	; 0x110
 80131f2:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 80131f6:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80132d4 <__kernel_rem_pio2f+0x300>
 80131fa:	eddf 7a39 	vldr	s15, [pc, #228]	; 80132e0 <__kernel_rem_pio2f+0x30c>
 80131fe:	2000      	movs	r0, #0
 8013200:	1aa1      	subs	r1, r4, r2
 8013202:	e0b6      	b.n	8013372 <__kernel_rem_pio2f+0x39e>
 8013204:	2702      	movs	r7, #2
 8013206:	e78c      	b.n	8013122 <__kernel_rem_pio2f+0x14e>
 8013208:	6820      	ldr	r0, [r4, #0]
 801320a:	b94b      	cbnz	r3, 8013220 <__kernel_rem_pio2f+0x24c>
 801320c:	b118      	cbz	r0, 8013216 <__kernel_rem_pio2f+0x242>
 801320e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8013212:	6020      	str	r0, [r4, #0]
 8013214:	2001      	movs	r0, #1
 8013216:	f10e 0e01 	add.w	lr, lr, #1
 801321a:	3404      	adds	r4, #4
 801321c:	4603      	mov	r3, r0
 801321e:	e785      	b.n	801312c <__kernel_rem_pio2f+0x158>
 8013220:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8013224:	6020      	str	r0, [r4, #0]
 8013226:	4618      	mov	r0, r3
 8013228:	e7f5      	b.n	8013216 <__kernel_rem_pio2f+0x242>
 801322a:	1e74      	subs	r4, r6, #1
 801322c:	a808      	add	r0, sp, #32
 801322e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013232:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8013236:	f10d 0c20 	add.w	ip, sp, #32
 801323a:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 801323e:	e77e      	b.n	801313e <__kernel_rem_pio2f+0x16a>
 8013240:	1e74      	subs	r4, r6, #1
 8013242:	a808      	add	r0, sp, #32
 8013244:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013248:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801324c:	e7f3      	b.n	8013236 <__kernel_rem_pio2f+0x262>
 801324e:	ab08      	add	r3, sp, #32
 8013250:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8013254:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013258:	4318      	orrs	r0, r3
 801325a:	e7ab      	b.n	80131b4 <__kernel_rem_pio2f+0x1e0>
 801325c:	f10c 0c01 	add.w	ip, ip, #1
 8013260:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8013264:	2c00      	cmp	r4, #0
 8013266:	d0f9      	beq.n	801325c <__kernel_rem_pio2f+0x288>
 8013268:	9b05      	ldr	r3, [sp, #20]
 801326a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801326e:	eb0d 0003 	add.w	r0, sp, r3
 8013272:	9b01      	ldr	r3, [sp, #4]
 8013274:	18f4      	adds	r4, r6, r3
 8013276:	ab1c      	add	r3, sp, #112	; 0x70
 8013278:	1c77      	adds	r7, r6, #1
 801327a:	384c      	subs	r0, #76	; 0x4c
 801327c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013280:	4466      	add	r6, ip
 8013282:	42be      	cmp	r6, r7
 8013284:	f6ff af0b 	blt.w	801309e <__kernel_rem_pio2f+0xca>
 8013288:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 801328c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8013290:	ee07 3a90 	vmov	s15, r3
 8013294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013298:	f04f 0c00 	mov.w	ip, #0
 801329c:	ece4 7a01 	vstmia	r4!, {s15}
 80132a0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80132e0 <__kernel_rem_pio2f+0x30c>
 80132a4:	46a1      	mov	r9, r4
 80132a6:	458c      	cmp	ip, r1
 80132a8:	dd07      	ble.n	80132ba <__kernel_rem_pio2f+0x2e6>
 80132aa:	ece0 7a01 	vstmia	r0!, {s15}
 80132ae:	3701      	adds	r7, #1
 80132b0:	e7e7      	b.n	8013282 <__kernel_rem_pio2f+0x2ae>
 80132b2:	9804      	ldr	r0, [sp, #16]
 80132b4:	f04f 0c01 	mov.w	ip, #1
 80132b8:	e7d2      	b.n	8013260 <__kernel_rem_pio2f+0x28c>
 80132ba:	ecfe 6a01 	vldmia	lr!, {s13}
 80132be:	ed39 7a01 	vldmdb	r9!, {s14}
 80132c2:	f10c 0c01 	add.w	ip, ip, #1
 80132c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80132ca:	e7ec      	b.n	80132a6 <__kernel_rem_pio2f+0x2d2>
 80132cc:	3c01      	subs	r4, #1
 80132ce:	e775      	b.n	80131bc <__kernel_rem_pio2f+0x1e8>
 80132d0:	0804d234 	.word	0x0804d234
 80132d4:	0804d208 	.word	0x0804d208
 80132d8:	43800000 	.word	0x43800000
 80132dc:	3b800000 	.word	0x3b800000
 80132e0:	00000000 	.word	0x00000000
 80132e4:	9b03      	ldr	r3, [sp, #12]
 80132e6:	eeb0 0a48 	vmov.f32	s0, s16
 80132ea:	1a98      	subs	r0, r3, r2
 80132ec:	f000 fc92 	bl	8013c14 <scalbnf>
 80132f0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80132d8 <__kernel_rem_pio2f+0x304>
 80132f4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80132f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132fc:	db19      	blt.n	8013332 <__kernel_rem_pio2f+0x35e>
 80132fe:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80132dc <__kernel_rem_pio2f+0x308>
 8013302:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013306:	aa08      	add	r2, sp, #32
 8013308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801330c:	1c74      	adds	r4, r6, #1
 801330e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013312:	3508      	adds	r5, #8
 8013314:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013318:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801331c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013320:	ee10 3a10 	vmov	r3, s0
 8013324:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8013328:	ee17 3a90 	vmov	r3, s15
 801332c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013330:	e74b      	b.n	80131ca <__kernel_rem_pio2f+0x1f6>
 8013332:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013336:	aa08      	add	r2, sp, #32
 8013338:	ee10 3a10 	vmov	r3, s0
 801333c:	4634      	mov	r4, r6
 801333e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8013342:	e742      	b.n	80131ca <__kernel_rem_pio2f+0x1f6>
 8013344:	a808      	add	r0, sp, #32
 8013346:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801334a:	9001      	str	r0, [sp, #4]
 801334c:	ee07 0a90 	vmov	s15, r0
 8013350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013354:	3a01      	subs	r2, #1
 8013356:	ee67 7a80 	vmul.f32	s15, s15, s0
 801335a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801335e:	ed61 7a01 	vstmdb	r1!, {s15}
 8013362:	e73e      	b.n	80131e2 <__kernel_rem_pio2f+0x20e>
 8013364:	ecfc 6a01 	vldmia	ip!, {s13}
 8013368:	ecb6 7a01 	vldmia	r6!, {s14}
 801336c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013370:	3001      	adds	r0, #1
 8013372:	4550      	cmp	r0, sl
 8013374:	dc01      	bgt.n	801337a <__kernel_rem_pio2f+0x3a6>
 8013376:	4288      	cmp	r0, r1
 8013378:	ddf4      	ble.n	8013364 <__kernel_rem_pio2f+0x390>
 801337a:	a858      	add	r0, sp, #352	; 0x160
 801337c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013380:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8013384:	3a01      	subs	r2, #1
 8013386:	e730      	b.n	80131ea <__kernel_rem_pio2f+0x216>
 8013388:	9a66      	ldr	r2, [sp, #408]	; 0x198
 801338a:	2a02      	cmp	r2, #2
 801338c:	dc09      	bgt.n	80133a2 <__kernel_rem_pio2f+0x3ce>
 801338e:	2a00      	cmp	r2, #0
 8013390:	dc2a      	bgt.n	80133e8 <__kernel_rem_pio2f+0x414>
 8013392:	d043      	beq.n	801341c <__kernel_rem_pio2f+0x448>
 8013394:	f009 0007 	and.w	r0, r9, #7
 8013398:	b059      	add	sp, #356	; 0x164
 801339a:	ecbd 8b04 	vpop	{d8-d9}
 801339e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133a2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80133a4:	2b03      	cmp	r3, #3
 80133a6:	d1f5      	bne.n	8013394 <__kernel_rem_pio2f+0x3c0>
 80133a8:	ab30      	add	r3, sp, #192	; 0xc0
 80133aa:	442b      	add	r3, r5
 80133ac:	461a      	mov	r2, r3
 80133ae:	4619      	mov	r1, r3
 80133b0:	4620      	mov	r0, r4
 80133b2:	2800      	cmp	r0, #0
 80133b4:	f1a1 0104 	sub.w	r1, r1, #4
 80133b8:	dc51      	bgt.n	801345e <__kernel_rem_pio2f+0x48a>
 80133ba:	4621      	mov	r1, r4
 80133bc:	2901      	cmp	r1, #1
 80133be:	f1a2 0204 	sub.w	r2, r2, #4
 80133c2:	dc5c      	bgt.n	801347e <__kernel_rem_pio2f+0x4aa>
 80133c4:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80132e0 <__kernel_rem_pio2f+0x30c>
 80133c8:	3304      	adds	r3, #4
 80133ca:	2c01      	cmp	r4, #1
 80133cc:	dc67      	bgt.n	801349e <__kernel_rem_pio2f+0x4ca>
 80133ce:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80133d2:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80133d6:	2f00      	cmp	r7, #0
 80133d8:	d167      	bne.n	80134aa <__kernel_rem_pio2f+0x4d6>
 80133da:	edc8 6a00 	vstr	s13, [r8]
 80133de:	ed88 7a01 	vstr	s14, [r8, #4]
 80133e2:	edc8 7a02 	vstr	s15, [r8, #8]
 80133e6:	e7d5      	b.n	8013394 <__kernel_rem_pio2f+0x3c0>
 80133e8:	aa30      	add	r2, sp, #192	; 0xc0
 80133ea:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 80132e0 <__kernel_rem_pio2f+0x30c>
 80133ee:	4413      	add	r3, r2
 80133f0:	4622      	mov	r2, r4
 80133f2:	2a00      	cmp	r2, #0
 80133f4:	da24      	bge.n	8013440 <__kernel_rem_pio2f+0x46c>
 80133f6:	b34f      	cbz	r7, 801344c <__kernel_rem_pio2f+0x478>
 80133f8:	eef1 7a47 	vneg.f32	s15, s14
 80133fc:	edc8 7a00 	vstr	s15, [r8]
 8013400:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8013404:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013408:	aa31      	add	r2, sp, #196	; 0xc4
 801340a:	2301      	movs	r3, #1
 801340c:	429c      	cmp	r4, r3
 801340e:	da20      	bge.n	8013452 <__kernel_rem_pio2f+0x47e>
 8013410:	b10f      	cbz	r7, 8013416 <__kernel_rem_pio2f+0x442>
 8013412:	eef1 7a67 	vneg.f32	s15, s15
 8013416:	edc8 7a01 	vstr	s15, [r8, #4]
 801341a:	e7bb      	b.n	8013394 <__kernel_rem_pio2f+0x3c0>
 801341c:	aa30      	add	r2, sp, #192	; 0xc0
 801341e:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 80132e0 <__kernel_rem_pio2f+0x30c>
 8013422:	4413      	add	r3, r2
 8013424:	2c00      	cmp	r4, #0
 8013426:	da05      	bge.n	8013434 <__kernel_rem_pio2f+0x460>
 8013428:	b10f      	cbz	r7, 801342e <__kernel_rem_pio2f+0x45a>
 801342a:	eef1 7a67 	vneg.f32	s15, s15
 801342e:	edc8 7a00 	vstr	s15, [r8]
 8013432:	e7af      	b.n	8013394 <__kernel_rem_pio2f+0x3c0>
 8013434:	ed33 7a01 	vldmdb	r3!, {s14}
 8013438:	3c01      	subs	r4, #1
 801343a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801343e:	e7f1      	b.n	8013424 <__kernel_rem_pio2f+0x450>
 8013440:	ed73 7a01 	vldmdb	r3!, {s15}
 8013444:	3a01      	subs	r2, #1
 8013446:	ee37 7a27 	vadd.f32	s14, s14, s15
 801344a:	e7d2      	b.n	80133f2 <__kernel_rem_pio2f+0x41e>
 801344c:	eef0 7a47 	vmov.f32	s15, s14
 8013450:	e7d4      	b.n	80133fc <__kernel_rem_pio2f+0x428>
 8013452:	ecb2 7a01 	vldmia	r2!, {s14}
 8013456:	3301      	adds	r3, #1
 8013458:	ee77 7a87 	vadd.f32	s15, s15, s14
 801345c:	e7d6      	b.n	801340c <__kernel_rem_pio2f+0x438>
 801345e:	edd1 7a00 	vldr	s15, [r1]
 8013462:	edd1 6a01 	vldr	s13, [r1, #4]
 8013466:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801346a:	3801      	subs	r0, #1
 801346c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013470:	ed81 7a00 	vstr	s14, [r1]
 8013474:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013478:	edc1 7a01 	vstr	s15, [r1, #4]
 801347c:	e799      	b.n	80133b2 <__kernel_rem_pio2f+0x3de>
 801347e:	edd2 7a00 	vldr	s15, [r2]
 8013482:	edd2 6a01 	vldr	s13, [r2, #4]
 8013486:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801348a:	3901      	subs	r1, #1
 801348c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013490:	ed82 7a00 	vstr	s14, [r2]
 8013494:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013498:	edc2 7a01 	vstr	s15, [r2, #4]
 801349c:	e78e      	b.n	80133bc <__kernel_rem_pio2f+0x3e8>
 801349e:	ed33 7a01 	vldmdb	r3!, {s14}
 80134a2:	3c01      	subs	r4, #1
 80134a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80134a8:	e78f      	b.n	80133ca <__kernel_rem_pio2f+0x3f6>
 80134aa:	eef1 6a66 	vneg.f32	s13, s13
 80134ae:	eeb1 7a47 	vneg.f32	s14, s14
 80134b2:	edc8 6a00 	vstr	s13, [r8]
 80134b6:	ed88 7a01 	vstr	s14, [r8, #4]
 80134ba:	eef1 7a67 	vneg.f32	s15, s15
 80134be:	e790      	b.n	80133e2 <__kernel_rem_pio2f+0x40e>

080134c0 <__kernel_sinf>:
 80134c0:	ee10 3a10 	vmov	r3, s0
 80134c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80134c8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80134cc:	da04      	bge.n	80134d8 <__kernel_sinf+0x18>
 80134ce:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80134d2:	ee17 3a90 	vmov	r3, s15
 80134d6:	b35b      	cbz	r3, 8013530 <__kernel_sinf+0x70>
 80134d8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80134dc:	eddf 7a15 	vldr	s15, [pc, #84]	; 8013534 <__kernel_sinf+0x74>
 80134e0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8013538 <__kernel_sinf+0x78>
 80134e4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80134e8:	eddf 7a14 	vldr	s15, [pc, #80]	; 801353c <__kernel_sinf+0x7c>
 80134ec:	eee6 7a07 	vfma.f32	s15, s12, s14
 80134f0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8013540 <__kernel_sinf+0x80>
 80134f4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80134f8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8013544 <__kernel_sinf+0x84>
 80134fc:	ee60 6a07 	vmul.f32	s13, s0, s14
 8013500:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013504:	b930      	cbnz	r0, 8013514 <__kernel_sinf+0x54>
 8013506:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8013548 <__kernel_sinf+0x88>
 801350a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801350e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8013512:	4770      	bx	lr
 8013514:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8013518:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801351c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8013520:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8013524:	eddf 7a09 	vldr	s15, [pc, #36]	; 801354c <__kernel_sinf+0x8c>
 8013528:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801352c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8013530:	4770      	bx	lr
 8013532:	bf00      	nop
 8013534:	2f2ec9d3 	.word	0x2f2ec9d3
 8013538:	b2d72f34 	.word	0xb2d72f34
 801353c:	3638ef1b 	.word	0x3638ef1b
 8013540:	b9500d01 	.word	0xb9500d01
 8013544:	3c088889 	.word	0x3c088889
 8013548:	be2aaaab 	.word	0xbe2aaaab
 801354c:	3e2aaaab 	.word	0x3e2aaaab

08013550 <__kernel_tanf>:
 8013550:	b508      	push	{r3, lr}
 8013552:	ee10 3a10 	vmov	r3, s0
 8013556:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801355a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801355e:	eef0 7a40 	vmov.f32	s15, s0
 8013562:	da17      	bge.n	8013594 <__kernel_tanf+0x44>
 8013564:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8013568:	ee17 1a10 	vmov	r1, s14
 801356c:	bb41      	cbnz	r1, 80135c0 <__kernel_tanf+0x70>
 801356e:	1c43      	adds	r3, r0, #1
 8013570:	4313      	orrs	r3, r2
 8013572:	d108      	bne.n	8013586 <__kernel_tanf+0x36>
 8013574:	f7fc ffa8 	bl	80104c8 <fabsf>
 8013578:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801357c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013580:	eeb0 0a67 	vmov.f32	s0, s15
 8013584:	bd08      	pop	{r3, pc}
 8013586:	2801      	cmp	r0, #1
 8013588:	d0fa      	beq.n	8013580 <__kernel_tanf+0x30>
 801358a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801358e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013592:	e7f5      	b.n	8013580 <__kernel_tanf+0x30>
 8013594:	494c      	ldr	r1, [pc, #304]	; (80136c8 <__kernel_tanf+0x178>)
 8013596:	428a      	cmp	r2, r1
 8013598:	db12      	blt.n	80135c0 <__kernel_tanf+0x70>
 801359a:	2b00      	cmp	r3, #0
 801359c:	bfb8      	it	lt
 801359e:	eef1 7a40 	vneglt.f32	s15, s0
 80135a2:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 80136cc <__kernel_tanf+0x17c>
 80135a6:	ee70 7a67 	vsub.f32	s15, s0, s15
 80135aa:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80136d0 <__kernel_tanf+0x180>
 80135ae:	bfb8      	it	lt
 80135b0:	eef1 0a60 	vneglt.f32	s1, s1
 80135b4:	ee70 0a60 	vsub.f32	s1, s0, s1
 80135b8:	ee70 7aa7 	vadd.f32	s15, s1, s15
 80135bc:	eddf 0a45 	vldr	s1, [pc, #276]	; 80136d4 <__kernel_tanf+0x184>
 80135c0:	eddf 5a45 	vldr	s11, [pc, #276]	; 80136d8 <__kernel_tanf+0x188>
 80135c4:	ed9f 6a45 	vldr	s12, [pc, #276]	; 80136dc <__kernel_tanf+0x18c>
 80135c8:	ed9f 5a45 	vldr	s10, [pc, #276]	; 80136e0 <__kernel_tanf+0x190>
 80135cc:	493e      	ldr	r1, [pc, #248]	; (80136c8 <__kernel_tanf+0x178>)
 80135ce:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80135d2:	428a      	cmp	r2, r1
 80135d4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80135d8:	eea7 6a25 	vfma.f32	s12, s14, s11
 80135dc:	eddf 5a41 	vldr	s11, [pc, #260]	; 80136e4 <__kernel_tanf+0x194>
 80135e0:	eee6 5a07 	vfma.f32	s11, s12, s14
 80135e4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80136e8 <__kernel_tanf+0x198>
 80135e8:	eea5 6a87 	vfma.f32	s12, s11, s14
 80135ec:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80136ec <__kernel_tanf+0x19c>
 80135f0:	eee6 5a07 	vfma.f32	s11, s12, s14
 80135f4:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 80136f0 <__kernel_tanf+0x1a0>
 80135f8:	eea5 6a87 	vfma.f32	s12, s11, s14
 80135fc:	eddf 5a3d 	vldr	s11, [pc, #244]	; 80136f4 <__kernel_tanf+0x1a4>
 8013600:	eee7 5a05 	vfma.f32	s11, s14, s10
 8013604:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80136f8 <__kernel_tanf+0x1a8>
 8013608:	eea5 5a87 	vfma.f32	s10, s11, s14
 801360c:	eddf 5a3b 	vldr	s11, [pc, #236]	; 80136fc <__kernel_tanf+0x1ac>
 8013610:	eee5 5a07 	vfma.f32	s11, s10, s14
 8013614:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8013700 <__kernel_tanf+0x1b0>
 8013618:	eea5 5a87 	vfma.f32	s10, s11, s14
 801361c:	eddf 5a39 	vldr	s11, [pc, #228]	; 8013704 <__kernel_tanf+0x1b4>
 8013620:	eee5 5a07 	vfma.f32	s11, s10, s14
 8013624:	eeb0 7a46 	vmov.f32	s14, s12
 8013628:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801362c:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8013630:	eeb0 6a60 	vmov.f32	s12, s1
 8013634:	eea7 6a05 	vfma.f32	s12, s14, s10
 8013638:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8013708 <__kernel_tanf+0x1b8>
 801363c:	eee6 0a26 	vfma.f32	s1, s12, s13
 8013640:	eee5 0a07 	vfma.f32	s1, s10, s14
 8013644:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8013648:	db1d      	blt.n	8013686 <__kernel_tanf+0x136>
 801364a:	ee06 0a90 	vmov	s13, r0
 801364e:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8013652:	ee27 6a07 	vmul.f32	s12, s14, s14
 8013656:	ee37 7a00 	vadd.f32	s14, s14, s0
 801365a:	179b      	asrs	r3, r3, #30
 801365c:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8013660:	f003 0302 	and.w	r3, r3, #2
 8013664:	f1c3 0301 	rsb	r3, r3, #1
 8013668:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801366c:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8013670:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013674:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013678:	ee07 3a90 	vmov	s15, r3
 801367c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013680:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013684:	e77c      	b.n	8013580 <__kernel_tanf+0x30>
 8013686:	2801      	cmp	r0, #1
 8013688:	d01b      	beq.n	80136c2 <__kernel_tanf+0x172>
 801368a:	4b20      	ldr	r3, [pc, #128]	; (801370c <__kernel_tanf+0x1bc>)
 801368c:	ee17 2a10 	vmov	r2, s14
 8013690:	401a      	ands	r2, r3
 8013692:	ee06 2a10 	vmov	s12, r2
 8013696:	ee76 7a67 	vsub.f32	s15, s12, s15
 801369a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801369e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80136a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80136a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80136aa:	ee16 2a90 	vmov	r2, s13
 80136ae:	4013      	ands	r3, r2
 80136b0:	ee07 3a90 	vmov	s15, r3
 80136b4:	eea6 7a27 	vfma.f32	s14, s12, s15
 80136b8:	eea0 7aa7 	vfma.f32	s14, s1, s15
 80136bc:	eee7 7a26 	vfma.f32	s15, s14, s13
 80136c0:	e75e      	b.n	8013580 <__kernel_tanf+0x30>
 80136c2:	eef0 7a47 	vmov.f32	s15, s14
 80136c6:	e75b      	b.n	8013580 <__kernel_tanf+0x30>
 80136c8:	3f2ca140 	.word	0x3f2ca140
 80136cc:	3f490fda 	.word	0x3f490fda
 80136d0:	33222168 	.word	0x33222168
 80136d4:	00000000 	.word	0x00000000
 80136d8:	b79bae5f 	.word	0xb79bae5f
 80136dc:	38a3f445 	.word	0x38a3f445
 80136e0:	37d95384 	.word	0x37d95384
 80136e4:	3a1a26c8 	.word	0x3a1a26c8
 80136e8:	3b6b6916 	.word	0x3b6b6916
 80136ec:	3cb327a4 	.word	0x3cb327a4
 80136f0:	3e088889 	.word	0x3e088889
 80136f4:	3895c07a 	.word	0x3895c07a
 80136f8:	398137b9 	.word	0x398137b9
 80136fc:	3abede48 	.word	0x3abede48
 8013700:	3c11371f 	.word	0x3c11371f
 8013704:	3d5d0dd1 	.word	0x3d5d0dd1
 8013708:	3eaaaaab 	.word	0x3eaaaaab
 801370c:	fffff000 	.word	0xfffff000

08013710 <with_errnof>:
 8013710:	b513      	push	{r0, r1, r4, lr}
 8013712:	4604      	mov	r4, r0
 8013714:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013718:	f7f9 fb1c 	bl	800cd54 <__errno>
 801371c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8013720:	6004      	str	r4, [r0, #0]
 8013722:	b002      	add	sp, #8
 8013724:	bd10      	pop	{r4, pc}

08013726 <xflowf>:
 8013726:	b130      	cbz	r0, 8013736 <xflowf+0x10>
 8013728:	eef1 7a40 	vneg.f32	s15, s0
 801372c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013730:	2022      	movs	r0, #34	; 0x22
 8013732:	f7ff bfed 	b.w	8013710 <with_errnof>
 8013736:	eef0 7a40 	vmov.f32	s15, s0
 801373a:	e7f7      	b.n	801372c <xflowf+0x6>

0801373c <__math_uflowf>:
 801373c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013744 <__math_uflowf+0x8>
 8013740:	f7ff bff1 	b.w	8013726 <xflowf>
 8013744:	10000000 	.word	0x10000000

08013748 <__math_oflowf>:
 8013748:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013750 <__math_oflowf+0x8>
 801374c:	f7ff bfeb 	b.w	8013726 <xflowf>
 8013750:	70000000 	.word	0x70000000

08013754 <__math_divzerof>:
 8013754:	2800      	cmp	r0, #0
 8013756:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801375a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801375e:	bf08      	it	eq
 8013760:	eef0 7a40 	vmoveq.f32	s15, s0
 8013764:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8013774 <__math_divzerof+0x20>
 8013768:	2022      	movs	r0, #34	; 0x22
 801376a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801376e:	f7ff bfcf 	b.w	8013710 <with_errnof>
 8013772:	bf00      	nop
 8013774:	00000000 	.word	0x00000000

08013778 <__math_invalidf>:
 8013778:	eef0 7a40 	vmov.f32	s15, s0
 801377c:	ee30 7a40 	vsub.f32	s14, s0, s0
 8013780:	eef4 7a67 	vcmp.f32	s15, s15
 8013784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013788:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801378c:	d602      	bvs.n	8013794 <__math_invalidf+0x1c>
 801378e:	2021      	movs	r0, #33	; 0x21
 8013790:	f7ff bfbe 	b.w	8013710 <with_errnof>
 8013794:	4770      	bx	lr

08013796 <fabs>:
 8013796:	ec51 0b10 	vmov	r0, r1, d0
 801379a:	ee10 2a10 	vmov	r2, s0
 801379e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80137a2:	ec43 2b10 	vmov	d0, r2, r3
 80137a6:	4770      	bx	lr

080137a8 <floor>:
 80137a8:	ec51 0b10 	vmov	r0, r1, d0
 80137ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137b0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80137b4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80137b8:	2e13      	cmp	r6, #19
 80137ba:	ee10 5a10 	vmov	r5, s0
 80137be:	ee10 8a10 	vmov	r8, s0
 80137c2:	460c      	mov	r4, r1
 80137c4:	dc32      	bgt.n	801382c <floor+0x84>
 80137c6:	2e00      	cmp	r6, #0
 80137c8:	da14      	bge.n	80137f4 <floor+0x4c>
 80137ca:	a333      	add	r3, pc, #204	; (adr r3, 8013898 <floor+0xf0>)
 80137cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137d0:	f7f2 fdc4 	bl	800635c <__adddf3>
 80137d4:	2200      	movs	r2, #0
 80137d6:	2300      	movs	r3, #0
 80137d8:	f7f3 fa06 	bl	8006be8 <__aeabi_dcmpgt>
 80137dc:	b138      	cbz	r0, 80137ee <floor+0x46>
 80137de:	2c00      	cmp	r4, #0
 80137e0:	da57      	bge.n	8013892 <floor+0xea>
 80137e2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80137e6:	431d      	orrs	r5, r3
 80137e8:	d001      	beq.n	80137ee <floor+0x46>
 80137ea:	4c2d      	ldr	r4, [pc, #180]	; (80138a0 <floor+0xf8>)
 80137ec:	2500      	movs	r5, #0
 80137ee:	4621      	mov	r1, r4
 80137f0:	4628      	mov	r0, r5
 80137f2:	e025      	b.n	8013840 <floor+0x98>
 80137f4:	4f2b      	ldr	r7, [pc, #172]	; (80138a4 <floor+0xfc>)
 80137f6:	4137      	asrs	r7, r6
 80137f8:	ea01 0307 	and.w	r3, r1, r7
 80137fc:	4303      	orrs	r3, r0
 80137fe:	d01f      	beq.n	8013840 <floor+0x98>
 8013800:	a325      	add	r3, pc, #148	; (adr r3, 8013898 <floor+0xf0>)
 8013802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013806:	f7f2 fda9 	bl	800635c <__adddf3>
 801380a:	2200      	movs	r2, #0
 801380c:	2300      	movs	r3, #0
 801380e:	f7f3 f9eb 	bl	8006be8 <__aeabi_dcmpgt>
 8013812:	2800      	cmp	r0, #0
 8013814:	d0eb      	beq.n	80137ee <floor+0x46>
 8013816:	2c00      	cmp	r4, #0
 8013818:	bfbe      	ittt	lt
 801381a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801381e:	fa43 f606 	asrlt.w	r6, r3, r6
 8013822:	19a4      	addlt	r4, r4, r6
 8013824:	ea24 0407 	bic.w	r4, r4, r7
 8013828:	2500      	movs	r5, #0
 801382a:	e7e0      	b.n	80137ee <floor+0x46>
 801382c:	2e33      	cmp	r6, #51	; 0x33
 801382e:	dd0b      	ble.n	8013848 <floor+0xa0>
 8013830:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013834:	d104      	bne.n	8013840 <floor+0x98>
 8013836:	ee10 2a10 	vmov	r2, s0
 801383a:	460b      	mov	r3, r1
 801383c:	f7f2 fd8e 	bl	800635c <__adddf3>
 8013840:	ec41 0b10 	vmov	d0, r0, r1
 8013844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013848:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801384c:	f04f 33ff 	mov.w	r3, #4294967295
 8013850:	fa23 f707 	lsr.w	r7, r3, r7
 8013854:	4207      	tst	r7, r0
 8013856:	d0f3      	beq.n	8013840 <floor+0x98>
 8013858:	a30f      	add	r3, pc, #60	; (adr r3, 8013898 <floor+0xf0>)
 801385a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801385e:	f7f2 fd7d 	bl	800635c <__adddf3>
 8013862:	2200      	movs	r2, #0
 8013864:	2300      	movs	r3, #0
 8013866:	f7f3 f9bf 	bl	8006be8 <__aeabi_dcmpgt>
 801386a:	2800      	cmp	r0, #0
 801386c:	d0bf      	beq.n	80137ee <floor+0x46>
 801386e:	2c00      	cmp	r4, #0
 8013870:	da02      	bge.n	8013878 <floor+0xd0>
 8013872:	2e14      	cmp	r6, #20
 8013874:	d103      	bne.n	801387e <floor+0xd6>
 8013876:	3401      	adds	r4, #1
 8013878:	ea25 0507 	bic.w	r5, r5, r7
 801387c:	e7b7      	b.n	80137ee <floor+0x46>
 801387e:	2301      	movs	r3, #1
 8013880:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013884:	fa03 f606 	lsl.w	r6, r3, r6
 8013888:	4435      	add	r5, r6
 801388a:	4545      	cmp	r5, r8
 801388c:	bf38      	it	cc
 801388e:	18e4      	addcc	r4, r4, r3
 8013890:	e7f2      	b.n	8013878 <floor+0xd0>
 8013892:	2500      	movs	r5, #0
 8013894:	462c      	mov	r4, r5
 8013896:	e7aa      	b.n	80137ee <floor+0x46>
 8013898:	8800759c 	.word	0x8800759c
 801389c:	7e37e43c 	.word	0x7e37e43c
 80138a0:	bff00000 	.word	0xbff00000
 80138a4:	000fffff 	.word	0x000fffff

080138a8 <scalbn>:
 80138a8:	b570      	push	{r4, r5, r6, lr}
 80138aa:	ec55 4b10 	vmov	r4, r5, d0
 80138ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80138b2:	4606      	mov	r6, r0
 80138b4:	462b      	mov	r3, r5
 80138b6:	b99a      	cbnz	r2, 80138e0 <scalbn+0x38>
 80138b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80138bc:	4323      	orrs	r3, r4
 80138be:	d036      	beq.n	801392e <scalbn+0x86>
 80138c0:	4b39      	ldr	r3, [pc, #228]	; (80139a8 <scalbn+0x100>)
 80138c2:	4629      	mov	r1, r5
 80138c4:	ee10 0a10 	vmov	r0, s0
 80138c8:	2200      	movs	r2, #0
 80138ca:	f7f2 fefd 	bl	80066c8 <__aeabi_dmul>
 80138ce:	4b37      	ldr	r3, [pc, #220]	; (80139ac <scalbn+0x104>)
 80138d0:	429e      	cmp	r6, r3
 80138d2:	4604      	mov	r4, r0
 80138d4:	460d      	mov	r5, r1
 80138d6:	da10      	bge.n	80138fa <scalbn+0x52>
 80138d8:	a32b      	add	r3, pc, #172	; (adr r3, 8013988 <scalbn+0xe0>)
 80138da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138de:	e03a      	b.n	8013956 <scalbn+0xae>
 80138e0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80138e4:	428a      	cmp	r2, r1
 80138e6:	d10c      	bne.n	8013902 <scalbn+0x5a>
 80138e8:	ee10 2a10 	vmov	r2, s0
 80138ec:	4620      	mov	r0, r4
 80138ee:	4629      	mov	r1, r5
 80138f0:	f7f2 fd34 	bl	800635c <__adddf3>
 80138f4:	4604      	mov	r4, r0
 80138f6:	460d      	mov	r5, r1
 80138f8:	e019      	b.n	801392e <scalbn+0x86>
 80138fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80138fe:	460b      	mov	r3, r1
 8013900:	3a36      	subs	r2, #54	; 0x36
 8013902:	4432      	add	r2, r6
 8013904:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013908:	428a      	cmp	r2, r1
 801390a:	dd08      	ble.n	801391e <scalbn+0x76>
 801390c:	2d00      	cmp	r5, #0
 801390e:	a120      	add	r1, pc, #128	; (adr r1, 8013990 <scalbn+0xe8>)
 8013910:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013914:	da1c      	bge.n	8013950 <scalbn+0xa8>
 8013916:	a120      	add	r1, pc, #128	; (adr r1, 8013998 <scalbn+0xf0>)
 8013918:	e9d1 0100 	ldrd	r0, r1, [r1]
 801391c:	e018      	b.n	8013950 <scalbn+0xa8>
 801391e:	2a00      	cmp	r2, #0
 8013920:	dd08      	ble.n	8013934 <scalbn+0x8c>
 8013922:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013926:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801392a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801392e:	ec45 4b10 	vmov	d0, r4, r5
 8013932:	bd70      	pop	{r4, r5, r6, pc}
 8013934:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013938:	da19      	bge.n	801396e <scalbn+0xc6>
 801393a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801393e:	429e      	cmp	r6, r3
 8013940:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8013944:	dd0a      	ble.n	801395c <scalbn+0xb4>
 8013946:	a112      	add	r1, pc, #72	; (adr r1, 8013990 <scalbn+0xe8>)
 8013948:	e9d1 0100 	ldrd	r0, r1, [r1]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d1e2      	bne.n	8013916 <scalbn+0x6e>
 8013950:	a30f      	add	r3, pc, #60	; (adr r3, 8013990 <scalbn+0xe8>)
 8013952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013956:	f7f2 feb7 	bl	80066c8 <__aeabi_dmul>
 801395a:	e7cb      	b.n	80138f4 <scalbn+0x4c>
 801395c:	a10a      	add	r1, pc, #40	; (adr r1, 8013988 <scalbn+0xe0>)
 801395e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d0b8      	beq.n	80138d8 <scalbn+0x30>
 8013966:	a10e      	add	r1, pc, #56	; (adr r1, 80139a0 <scalbn+0xf8>)
 8013968:	e9d1 0100 	ldrd	r0, r1, [r1]
 801396c:	e7b4      	b.n	80138d8 <scalbn+0x30>
 801396e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013972:	3236      	adds	r2, #54	; 0x36
 8013974:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013978:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801397c:	4620      	mov	r0, r4
 801397e:	4b0c      	ldr	r3, [pc, #48]	; (80139b0 <scalbn+0x108>)
 8013980:	2200      	movs	r2, #0
 8013982:	e7e8      	b.n	8013956 <scalbn+0xae>
 8013984:	f3af 8000 	nop.w
 8013988:	c2f8f359 	.word	0xc2f8f359
 801398c:	01a56e1f 	.word	0x01a56e1f
 8013990:	8800759c 	.word	0x8800759c
 8013994:	7e37e43c 	.word	0x7e37e43c
 8013998:	8800759c 	.word	0x8800759c
 801399c:	fe37e43c 	.word	0xfe37e43c
 80139a0:	c2f8f359 	.word	0xc2f8f359
 80139a4:	81a56e1f 	.word	0x81a56e1f
 80139a8:	43500000 	.word	0x43500000
 80139ac:	ffff3cb0 	.word	0xffff3cb0
 80139b0:	3c900000 	.word	0x3c900000

080139b4 <expm1f>:
 80139b4:	ee10 2a10 	vmov	r2, s0
 80139b8:	497d      	ldr	r1, [pc, #500]	; (8013bb0 <expm1f+0x1fc>)
 80139ba:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80139be:	428b      	cmp	r3, r1
 80139c0:	d921      	bls.n	8013a06 <expm1f+0x52>
 80139c2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80139c6:	d902      	bls.n	80139ce <expm1f+0x1a>
 80139c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80139cc:	4770      	bx	lr
 80139ce:	d106      	bne.n	80139de <expm1f+0x2a>
 80139d0:	2a00      	cmp	r2, #0
 80139d2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80139d6:	bfb8      	it	lt
 80139d8:	eeb0 0a67 	vmovlt.f32	s0, s15
 80139dc:	4770      	bx	lr
 80139de:	2a00      	cmp	r2, #0
 80139e0:	db05      	blt.n	80139ee <expm1f+0x3a>
 80139e2:	4974      	ldr	r1, [pc, #464]	; (8013bb4 <expm1f+0x200>)
 80139e4:	428b      	cmp	r3, r1
 80139e6:	d95c      	bls.n	8013aa2 <expm1f+0xee>
 80139e8:	2000      	movs	r0, #0
 80139ea:	f7ff bead 	b.w	8013748 <__math_oflowf>
 80139ee:	eddf 7a72 	vldr	s15, [pc, #456]	; 8013bb8 <expm1f+0x204>
 80139f2:	ee70 7a27 	vadd.f32	s15, s0, s15
 80139f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80139fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139fe:	d550      	bpl.n	8013aa2 <expm1f+0xee>
 8013a00:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8013a04:	4770      	bx	lr
 8013a06:	496d      	ldr	r1, [pc, #436]	; (8013bbc <expm1f+0x208>)
 8013a08:	428b      	cmp	r3, r1
 8013a0a:	d967      	bls.n	8013adc <expm1f+0x128>
 8013a0c:	496c      	ldr	r1, [pc, #432]	; (8013bc0 <expm1f+0x20c>)
 8013a0e:	428b      	cmp	r3, r1
 8013a10:	d847      	bhi.n	8013aa2 <expm1f+0xee>
 8013a12:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8013bc4 <expm1f+0x210>
 8013a16:	2a00      	cmp	r2, #0
 8013a18:	bfa7      	ittee	ge
 8013a1a:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8013a1e:	eddf 7a6a 	vldrge	s15, [pc, #424]	; 8013bc8 <expm1f+0x214>
 8013a22:	eddf 7a6a 	vldrlt	s15, [pc, #424]	; 8013bcc <expm1f+0x218>
 8013a26:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8013a2a:	bfac      	ite	ge
 8013a2c:	2301      	movge	r3, #1
 8013a2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013a32:	ee37 0a67 	vsub.f32	s0, s14, s15
 8013a36:	ee37 7a40 	vsub.f32	s14, s14, s0
 8013a3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013a3e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8013a42:	ee20 4a25 	vmul.f32	s8, s0, s11
 8013a46:	ed9f 6a62 	vldr	s12, [pc, #392]	; 8013bd0 <expm1f+0x21c>
 8013a4a:	eddf 6a62 	vldr	s13, [pc, #392]	; 8013bd4 <expm1f+0x220>
 8013a4e:	ed9f 5a62 	vldr	s10, [pc, #392]	; 8013bd8 <expm1f+0x224>
 8013a52:	ee20 7a04 	vmul.f32	s14, s0, s8
 8013a56:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8013a5a:	eee7 6a06 	vfma.f32	s13, s14, s12
 8013a5e:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 8013bdc <expm1f+0x228>
 8013a62:	eea6 6a87 	vfma.f32	s12, s13, s14
 8013a66:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8013be0 <expm1f+0x22c>
 8013a6a:	eee6 6a07 	vfma.f32	s13, s12, s14
 8013a6e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013a72:	eea6 5a87 	vfma.f32	s10, s13, s14
 8013a76:	eef0 6a46 	vmov.f32	s13, s12
 8013a7a:	eee5 6a07 	vfma.f32	s13, s10, s14
 8013a7e:	eee4 4a66 	vfms.f32	s9, s8, s13
 8013a82:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 8013a86:	eea0 4a64 	vfms.f32	s8, s0, s9
 8013a8a:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8013a8e:	eec5 6a04 	vdiv.f32	s13, s10, s8
 8013a92:	ee66 6a87 	vmul.f32	s13, s13, s14
 8013a96:	bb7b      	cbnz	r3, 8013af8 <expm1f+0x144>
 8013a98:	eef0 7a47 	vmov.f32	s15, s14
 8013a9c:	eed0 7a26 	vfnms.f32	s15, s0, s13
 8013aa0:	e025      	b.n	8013aee <expm1f+0x13a>
 8013aa2:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8013aa6:	2a00      	cmp	r2, #0
 8013aa8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013aac:	bfb8      	it	lt
 8013aae:	eef0 7a47 	vmovlt.f32	s15, s14
 8013ab2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8013be4 <expm1f+0x230>
 8013ab6:	eddf 6a43 	vldr	s13, [pc, #268]	; 8013bc4 <expm1f+0x210>
 8013aba:	ee40 7a07 	vmla.f32	s15, s0, s14
 8013abe:	eeb0 7a40 	vmov.f32	s14, s0
 8013ac2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013ac6:	ee17 3a90 	vmov	r3, s15
 8013aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ace:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8013ad2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8013bc8 <expm1f+0x214>
 8013ad6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013ada:	e7aa      	b.n	8013a32 <expm1f+0x7e>
 8013adc:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 8013ae0:	d208      	bcs.n	8013af4 <expm1f+0x140>
 8013ae2:	eddf 7a41 	vldr	s15, [pc, #260]	; 8013be8 <expm1f+0x234>
 8013ae6:	ee70 7a27 	vadd.f32	s15, s0, s15
 8013aea:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8013aee:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013af2:	4770      	bx	lr
 8013af4:	2300      	movs	r3, #0
 8013af6:	e7a2      	b.n	8013a3e <expm1f+0x8a>
 8013af8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8013afc:	1c5a      	adds	r2, r3, #1
 8013afe:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8013b02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013b06:	d106      	bne.n	8013b16 <expm1f+0x162>
 8013b08:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013b0c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8013b10:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8013b14:	4770      	bx	lr
 8013b16:	2b01      	cmp	r3, #1
 8013b18:	d118      	bne.n	8013b4c <expm1f+0x198>
 8013b1a:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8013b1e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8013b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b26:	bf5b      	ittet	pl
 8013b28:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 8013b2c:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 8013b30:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8013b34:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 8013b38:	bf43      	ittte	mi
 8013b3a:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
 8013b3e:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 8013b42:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 8013b46:	eeb0 0a46 	vmovpl.f32	s0, s12
 8013b4a:	4770      	bx	lr
 8013b4c:	1c5a      	adds	r2, r3, #1
 8013b4e:	2a39      	cmp	r2, #57	; 0x39
 8013b50:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8013b54:	d90b      	bls.n	8013b6e <expm1f+0x1ba>
 8013b56:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013b5a:	ee36 0a40 	vsub.f32	s0, s12, s0
 8013b5e:	ee10 3a10 	vmov	r3, s0
 8013b62:	440b      	add	r3, r1
 8013b64:	ee00 3a10 	vmov	s0, r3
 8013b68:	ee30 0a46 	vsub.f32	s0, s0, s12
 8013b6c:	4770      	bx	lr
 8013b6e:	2b16      	cmp	r3, #22
 8013b70:	dc11      	bgt.n	8013b96 <expm1f+0x1e2>
 8013b72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013b76:	fa42 f303 	asr.w	r3, r2, r3
 8013b7a:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8013b7e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013b82:	ee07 3a90 	vmov	s15, r3
 8013b86:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013b8a:	ee10 3a10 	vmov	r3, s0
 8013b8e:	440b      	add	r3, r1
 8013b90:	ee00 3a10 	vmov	s0, r3
 8013b94:	4770      	bx	lr
 8013b96:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8013b9a:	05db      	lsls	r3, r3, #23
 8013b9c:	ee07 3a10 	vmov	s14, r3
 8013ba0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013ba4:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013ba8:	ee37 0a86 	vadd.f32	s0, s15, s12
 8013bac:	e7ed      	b.n	8013b8a <expm1f+0x1d6>
 8013bae:	bf00      	nop
 8013bb0:	4195b843 	.word	0x4195b843
 8013bb4:	42b17217 	.word	0x42b17217
 8013bb8:	0da24260 	.word	0x0da24260
 8013bbc:	3eb17218 	.word	0x3eb17218
 8013bc0:	3f851591 	.word	0x3f851591
 8013bc4:	3f317180 	.word	0x3f317180
 8013bc8:	3717f7d1 	.word	0x3717f7d1
 8013bcc:	b717f7d1 	.word	0xb717f7d1
 8013bd0:	b457edbb 	.word	0xb457edbb
 8013bd4:	36867e54 	.word	0x36867e54
 8013bd8:	bd088889 	.word	0xbd088889
 8013bdc:	b8a670cd 	.word	0xb8a670cd
 8013be0:	3ad00d01 	.word	0x3ad00d01
 8013be4:	3fb8aa3b 	.word	0x3fb8aa3b
 8013be8:	7149f2ca 	.word	0x7149f2ca

08013bec <finitef>:
 8013bec:	b082      	sub	sp, #8
 8013bee:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013bf2:	9801      	ldr	r0, [sp, #4]
 8013bf4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013bf8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8013bfc:	bfac      	ite	ge
 8013bfe:	2000      	movge	r0, #0
 8013c00:	2001      	movlt	r0, #1
 8013c02:	b002      	add	sp, #8
 8013c04:	4770      	bx	lr
	...

08013c08 <nanf>:
 8013c08:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013c10 <nanf+0x8>
 8013c0c:	4770      	bx	lr
 8013c0e:	bf00      	nop
 8013c10:	7fc00000 	.word	0x7fc00000

08013c14 <scalbnf>:
 8013c14:	ee10 3a10 	vmov	r3, s0
 8013c18:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8013c1c:	d025      	beq.n	8013c6a <scalbnf+0x56>
 8013c1e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8013c22:	d302      	bcc.n	8013c2a <scalbnf+0x16>
 8013c24:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013c28:	4770      	bx	lr
 8013c2a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8013c2e:	d122      	bne.n	8013c76 <scalbnf+0x62>
 8013c30:	4b2a      	ldr	r3, [pc, #168]	; (8013cdc <scalbnf+0xc8>)
 8013c32:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8013ce0 <scalbnf+0xcc>
 8013c36:	4298      	cmp	r0, r3
 8013c38:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013c3c:	db16      	blt.n	8013c6c <scalbnf+0x58>
 8013c3e:	ee10 3a10 	vmov	r3, s0
 8013c42:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013c46:	3a19      	subs	r2, #25
 8013c48:	4402      	add	r2, r0
 8013c4a:	2afe      	cmp	r2, #254	; 0xfe
 8013c4c:	dd15      	ble.n	8013c7a <scalbnf+0x66>
 8013c4e:	ee10 3a10 	vmov	r3, s0
 8013c52:	eddf 7a24 	vldr	s15, [pc, #144]	; 8013ce4 <scalbnf+0xd0>
 8013c56:	eddf 6a24 	vldr	s13, [pc, #144]	; 8013ce8 <scalbnf+0xd4>
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	eeb0 7a67 	vmov.f32	s14, s15
 8013c60:	bfb8      	it	lt
 8013c62:	eef0 7a66 	vmovlt.f32	s15, s13
 8013c66:	ee27 0a27 	vmul.f32	s0, s14, s15
 8013c6a:	4770      	bx	lr
 8013c6c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8013cec <scalbnf+0xd8>
 8013c70:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013c74:	4770      	bx	lr
 8013c76:	0dd2      	lsrs	r2, r2, #23
 8013c78:	e7e6      	b.n	8013c48 <scalbnf+0x34>
 8013c7a:	2a00      	cmp	r2, #0
 8013c7c:	dd06      	ble.n	8013c8c <scalbnf+0x78>
 8013c7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013c82:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8013c86:	ee00 3a10 	vmov	s0, r3
 8013c8a:	4770      	bx	lr
 8013c8c:	f112 0f16 	cmn.w	r2, #22
 8013c90:	da1a      	bge.n	8013cc8 <scalbnf+0xb4>
 8013c92:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013c96:	4298      	cmp	r0, r3
 8013c98:	ee10 3a10 	vmov	r3, s0
 8013c9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013ca0:	dd0a      	ble.n	8013cb8 <scalbnf+0xa4>
 8013ca2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8013ce4 <scalbnf+0xd0>
 8013ca6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8013ce8 <scalbnf+0xd4>
 8013caa:	eef0 7a40 	vmov.f32	s15, s0
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	bf18      	it	ne
 8013cb2:	eeb0 0a47 	vmovne.f32	s0, s14
 8013cb6:	e7db      	b.n	8013c70 <scalbnf+0x5c>
 8013cb8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8013cec <scalbnf+0xd8>
 8013cbc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8013cf0 <scalbnf+0xdc>
 8013cc0:	eef0 7a40 	vmov.f32	s15, s0
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	e7f3      	b.n	8013cb0 <scalbnf+0x9c>
 8013cc8:	3219      	adds	r2, #25
 8013cca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013cce:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8013cd2:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013cf4 <scalbnf+0xe0>
 8013cd6:	ee07 3a10 	vmov	s14, r3
 8013cda:	e7c4      	b.n	8013c66 <scalbnf+0x52>
 8013cdc:	ffff3cb0 	.word	0xffff3cb0
 8013ce0:	4c000000 	.word	0x4c000000
 8013ce4:	7149f2ca 	.word	0x7149f2ca
 8013ce8:	f149f2ca 	.word	0xf149f2ca
 8013cec:	0da24260 	.word	0x0da24260
 8013cf0:	8da24260 	.word	0x8da24260
 8013cf4:	33000000 	.word	0x33000000

08013cf8 <_kill>:
 8013cf8:	4b02      	ldr	r3, [pc, #8]	; (8013d04 <_kill+0xc>)
 8013cfa:	2258      	movs	r2, #88	; 0x58
 8013cfc:	601a      	str	r2, [r3, #0]
 8013cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8013d02:	4770      	bx	lr
 8013d04:	20014018 	.word	0x20014018

08013d08 <_exit>:
 8013d08:	e7fe      	b.n	8013d08 <_exit>
	...

08013d0c <_init>:
 8013d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d0e:	bf00      	nop
 8013d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d12:	bc08      	pop	{r3}
 8013d14:	469e      	mov	lr, r3
 8013d16:	4770      	bx	lr

08013d18 <_fini>:
 8013d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d1a:	bf00      	nop
 8013d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d1e:	bc08      	pop	{r3}
 8013d20:	469e      	mov	lr, r3
 8013d22:	4770      	bx	lr
