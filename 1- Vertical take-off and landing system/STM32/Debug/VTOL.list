
VTOL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f478  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000770  0800f608  0800f608  0001f608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd78  0800fd78  00020288  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd78  0800fd78  0001fd78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd80  0800fd80  00020288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd80  0800fd80  0001fd80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd84  0800fd84  0001fd84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  0800fd88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  20000288  08010010  00020288  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006dc  08010010  000206dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY
 12 .debug_info   000185db  00000000  00000000  000202b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003181  00000000  00000000  00038893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  0003ba18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001398  00000000  00000000  0003cf08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c3b  00000000  00000000  0003e2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001936d  00000000  00000000  00066edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8dcf  00000000  00000000  00080248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00179017  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073cc  00000000  00000000  00179068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00180434  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00180500  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000288 	.word	0x20000288
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f5f0 	.word	0x0800f5f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000028c 	.word	0x2000028c
 80001cc:	0800f5f0 	.word	0x0800f5f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ffc:	f002 f8f0 	bl	80031e0 <HAL_Init>


	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001000:	f000 f83a 	bl	8001078 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001004:	f000 f9b2 	bl	800136c <MX_GPIO_Init>
	MX_I2C2_Init();
 8001008:	f000 f888 	bl	800111c <MX_I2C2_Init>
	MX_USART1_UART_Init();
 800100c:	f000 f97e 	bl	800130c <MX_USART1_UART_Init>
	MX_TIM6_Init();
 8001010:	f000 f946 	bl	80012a0 <MX_TIM6_Init>
	MX_TIM2_Init();
 8001014:	f000 f8c2 	bl	800119c <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxBuffer, MAX_SIZE);
 8001018:	2264      	movs	r2, #100	; 0x64
 800101a:	4913      	ldr	r1, [pc, #76]	; (8001068 <main+0x70>)
 800101c:	4813      	ldr	r0, [pc, #76]	; (800106c <main+0x74>)
 800101e:	f007 fd6e 	bl	8008afe <HAL_UARTEx_ReceiveToIdle_IT>
	BSP_ACCELERO_Init();
 8001022:	f001 fcc5 	bl	80029b0 <BSP_ACCELERO_Init>
	BSP_GYRO_Init();
 8001026:	f001 fd19 	bl	8002a5c <BSP_GYRO_Init>
	BSP_MAGNETO_Init();
 800102a:	f001 fd71 	bl	8002b10 <BSP_MAGNETO_Init>
	TIM2->CCR1=TIM2->ARR;
 800102e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001032:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001038:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCR3=TIM2->ARR;
 800103a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800103e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001044:	63d3      	str	r3, [r2, #60]	; 0x3c

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001046:	2108      	movs	r1, #8
 8001048:	4809      	ldr	r0, [pc, #36]	; (8001070 <main+0x78>)
 800104a:	f005 f90f 	bl	800626c <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800104e:	2100      	movs	r1, #0
 8001050:	4807      	ldr	r0, [pc, #28]	; (8001070 <main+0x78>)
 8001052:	f005 f90b 	bl	800626c <HAL_TIM_PWM_Stop>

	// TIM_CHANNEL3 ytayyah el systeme
	// TIM_CHANNEL1 ytalaa el système
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001056:	2108      	movs	r1, #8
 8001058:	4805      	ldr	r0, [pc, #20]	; (8001070 <main+0x78>)
 800105a:	f005 f801 	bl	8006060 <HAL_TIM_PWM_Start>
	//	HAL_Delay(10000);
	//	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
	//	HAL_Delay(10000);
	//	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	//	HAL_Delay(10000);
	HAL_TIM_Base_Start_IT(&htim6);
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <main+0x7c>)
 8001060:	f004 ff2c 	bl	8005ebc <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001064:	e7fe      	b.n	8001064 <main+0x6c>
 8001066:	bf00      	nop
 8001068:	2000046c 	.word	0x2000046c
 800106c:	20000388 	.word	0x20000388
 8001070:	200002f0 	.word	0x200002f0
 8001074:	2000033c 	.word	0x2000033c

08001078 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b096      	sub	sp, #88	; 0x58
 800107c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	2244      	movs	r2, #68	; 0x44
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f007 fdd0 	bl	8008c2c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108c:	463b      	mov	r3, r7
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800109a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800109e:	f003 fbb5 	bl	800480c <HAL_PWREx_ControlVoltageScaling>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0x34>
	{
		Error_Handler();
 80010a8:	f001 f8e4 	bl	8002274 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80010ac:	2310      	movs	r3, #16
 80010ae:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010b0:	2301      	movs	r3, #1
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010b8:	2360      	movs	r3, #96	; 0x60
 80010ba:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010bc:	2302      	movs	r3, #2
 80010be:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010c0:	2301      	movs	r3, #1
 80010c2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80010c4:	2301      	movs	r3, #1
 80010c6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 80010c8:	2328      	movs	r3, #40	; 0x28
 80010ca:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010cc:	2307      	movs	r3, #7
 80010ce:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010d0:	2302      	movs	r3, #2
 80010d2:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 fbeb 	bl	80048b8 <HAL_RCC_OscConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0x74>
	{
		Error_Handler();
 80010e8:	f001 f8c4 	bl	8002274 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ec:	230f      	movs	r3, #15
 80010ee:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f0:	2303      	movs	r3, #3
 80010f2:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001100:	463b      	mov	r3, r7
 8001102:	2104      	movs	r1, #4
 8001104:	4618      	mov	r0, r3
 8001106:	f003 ffbf 	bl	8005088 <HAL_RCC_ClockConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8001110:	f001 f8b0 	bl	8002274 <Error_Handler>
	}
}
 8001114:	bf00      	nop
 8001116:	3758      	adds	r7, #88	; 0x58
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <MX_I2C2_Init+0x74>)
 8001122:	4a1c      	ldr	r2, [pc, #112]	; (8001194 <MX_I2C2_Init+0x78>)
 8001124:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x10909CEC;
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_I2C2_Init+0x74>)
 8001128:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <MX_I2C2_Init+0x7c>)
 800112a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <MX_I2C2_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <MX_I2C2_Init+0x74>)
 8001134:	2201      	movs	r2, #1
 8001136:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001138:	4b15      	ldr	r3, [pc, #84]	; (8001190 <MX_I2C2_Init+0x74>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 800113e:	4b14      	ldr	r3, [pc, #80]	; (8001190 <MX_I2C2_Init+0x74>)
 8001140:	2200      	movs	r2, #0
 8001142:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <MX_I2C2_Init+0x74>)
 8001146:	2200      	movs	r2, #0
 8001148:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_I2C2_Init+0x74>)
 800114c:	2200      	movs	r2, #0
 800114e:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <MX_I2C2_Init+0x74>)
 8001152:	2200      	movs	r2, #0
 8001154:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001156:	480e      	ldr	r0, [pc, #56]	; (8001190 <MX_I2C2_Init+0x74>)
 8001158:	f002 fd1f 	bl	8003b9a <HAL_I2C_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 8001162:	f001 f887 	bl	8002274 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001166:	2100      	movs	r1, #0
 8001168:	4809      	ldr	r0, [pc, #36]	; (8001190 <MX_I2C2_Init+0x74>)
 800116a:	f003 faa9 	bl	80046c0 <HAL_I2CEx_ConfigAnalogFilter>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 8001174:	f001 f87e 	bl	8002274 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001178:	2100      	movs	r1, #0
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_I2C2_Init+0x74>)
 800117c:	f003 faeb 	bl	8004756 <HAL_I2CEx_ConfigDigitalFilter>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 8001186:	f001 f875 	bl	8002274 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200002a4 	.word	0x200002a4
 8001194:	40005800 	.word	0x40005800
 8001198:	10909cec 	.word	0x10909cec

0800119c <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08e      	sub	sp, #56	; 0x38
 80011a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80011bc:	463b      	mov	r3, r7
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]
 80011ca:	615a      	str	r2, [r3, #20]
 80011cc:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80011ce:	4b33      	ldr	r3, [pc, #204]	; (800129c <MX_TIM2_Init+0x100>)
 80011d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011d4:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 10-1;
 80011d6:	4b31      	ldr	r3, [pc, #196]	; (800129c <MX_TIM2_Init+0x100>)
 80011d8:	2209      	movs	r2, #9
 80011da:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011dc:	4b2f      	ldr	r3, [pc, #188]	; (800129c <MX_TIM2_Init+0x100>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 8000-1;
 80011e2:	4b2e      	ldr	r3, [pc, #184]	; (800129c <MX_TIM2_Init+0x100>)
 80011e4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80011e8:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ea:	4b2c      	ldr	r3, [pc, #176]	; (800129c <MX_TIM2_Init+0x100>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011f0:	4b2a      	ldr	r3, [pc, #168]	; (800129c <MX_TIM2_Init+0x100>)
 80011f2:	2280      	movs	r2, #128	; 0x80
 80011f4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011f6:	4829      	ldr	r0, [pc, #164]	; (800129c <MX_TIM2_Init+0x100>)
 80011f8:	f004 fe08 	bl	8005e0c <HAL_TIM_Base_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 8001202:	f001 f837 	bl	8002274 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800120c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001210:	4619      	mov	r1, r3
 8001212:	4822      	ldr	r0, [pc, #136]	; (800129c <MX_TIM2_Init+0x100>)
 8001214:	f005 faf4 	bl	8006800 <HAL_TIM_ConfigClockSource>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM2_Init+0x86>
	{
		Error_Handler();
 800121e:	f001 f829 	bl	8002274 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001222:	481e      	ldr	r0, [pc, #120]	; (800129c <MX_TIM2_Init+0x100>)
 8001224:	f004 feba 	bl	8005f9c <HAL_TIM_PWM_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 800122e:	f001 f821 	bl	8002274 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	4619      	mov	r1, r3
 8001240:	4816      	ldr	r0, [pc, #88]	; (800129c <MX_TIM2_Init+0x100>)
 8001242:	f005 ffff 	bl	8007244 <HAL_TIMEx_MasterConfigSynchronization>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 800124c:	f001 f812 	bl	8002274 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001250:	2360      	movs	r3, #96	; 0x60
 8001252:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001260:	463b      	mov	r3, r7
 8001262:	2200      	movs	r2, #0
 8001264:	4619      	mov	r1, r3
 8001266:	480d      	ldr	r0, [pc, #52]	; (800129c <MX_TIM2_Init+0x100>)
 8001268:	f005 f9b6 	bl	80065d8 <HAL_TIM_PWM_ConfigChannel>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM2_Init+0xda>
	{
		Error_Handler();
 8001272:	f000 ffff 	bl	8002274 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001276:	463b      	mov	r3, r7
 8001278:	2208      	movs	r2, #8
 800127a:	4619      	mov	r1, r3
 800127c:	4807      	ldr	r0, [pc, #28]	; (800129c <MX_TIM2_Init+0x100>)
 800127e:	f005 f9ab 	bl	80065d8 <HAL_TIM_PWM_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM2_Init+0xf0>
	{
		Error_Handler();
 8001288:	f000 fff4 	bl	8002274 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800128c:	4803      	ldr	r0, [pc, #12]	; (800129c <MX_TIM2_Init+0x100>)
 800128e:	f001 f8d5 	bl	800243c <HAL_TIM_MspPostInit>

}
 8001292:	bf00      	nop
 8001294:	3738      	adds	r7, #56	; 0x38
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200002f0 	.word	0x200002f0

080012a0 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <MX_TIM6_Init+0x64>)
 80012b2:	4a15      	ldr	r2, [pc, #84]	; (8001308 <MX_TIM6_Init+0x68>)
 80012b4:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 10-1;
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <MX_TIM6_Init+0x64>)
 80012b8:	2209      	movs	r2, #9
 80012ba:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_TIM6_Init+0x64>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 40000-1;
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <MX_TIM6_Init+0x64>)
 80012c4:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80012c8:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <MX_TIM6_Init+0x64>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012d0:	480c      	ldr	r0, [pc, #48]	; (8001304 <MX_TIM6_Init+0x64>)
 80012d2:	f004 fd9b 	bl	8005e0c <HAL_TIM_Base_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM6_Init+0x40>
	{
		Error_Handler();
 80012dc:	f000 ffca 	bl	8002274 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e0:	2300      	movs	r3, #0
 80012e2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	; (8001304 <MX_TIM6_Init+0x64>)
 80012ee:	f005 ffa9 	bl	8007244 <HAL_TIMEx_MasterConfigSynchronization>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM6_Init+0x5c>
	{
		Error_Handler();
 80012f8:	f000 ffbc 	bl	8002274 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	2000033c 	.word	0x2000033c
 8001308:	40001000 	.word	0x40001000

0800130c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001310:	4b14      	ldr	r3, [pc, #80]	; (8001364 <MX_USART1_UART_Init+0x58>)
 8001312:	4a15      	ldr	r2, [pc, #84]	; (8001368 <MX_USART1_UART_Init+0x5c>)
 8001314:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001316:	4b13      	ldr	r3, [pc, #76]	; (8001364 <MX_USART1_UART_Init+0x58>)
 8001318:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800131c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <MX_USART1_UART_Init+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_USART1_UART_Init+0x58>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <MX_USART1_UART_Init+0x58>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <MX_USART1_UART_Init+0x58>)
 8001332:	220c      	movs	r2, #12
 8001334:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <MX_USART1_UART_Init+0x58>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800133c:	4b09      	ldr	r3, [pc, #36]	; (8001364 <MX_USART1_UART_Init+0x58>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <MX_USART1_UART_Init+0x58>)
 8001344:	2200      	movs	r2, #0
 8001346:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <MX_USART1_UART_Init+0x58>)
 800134a:	2200      	movs	r2, #0
 800134c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_USART1_UART_Init+0x58>)
 8001350:	f006 f81e 	bl	8007390 <HAL_UART_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 800135a:	f000 ff8b 	bl	8002274 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000388 	.word	0x20000388
 8001368:	40013800 	.word	0x40013800

0800136c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001382:	4b6d      	ldr	r3, [pc, #436]	; (8001538 <MX_GPIO_Init+0x1cc>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	4a6c      	ldr	r2, [pc, #432]	; (8001538 <MX_GPIO_Init+0x1cc>)
 8001388:	f043 0310 	orr.w	r3, r3, #16
 800138c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138e:	4b6a      	ldr	r3, [pc, #424]	; (8001538 <MX_GPIO_Init+0x1cc>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	f003 0310 	and.w	r3, r3, #16
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800139a:	4b67      	ldr	r3, [pc, #412]	; (8001538 <MX_GPIO_Init+0x1cc>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	4a66      	ldr	r2, [pc, #408]	; (8001538 <MX_GPIO_Init+0x1cc>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a6:	4b64      	ldr	r3, [pc, #400]	; (8001538 <MX_GPIO_Init+0x1cc>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	4b61      	ldr	r3, [pc, #388]	; (8001538 <MX_GPIO_Init+0x1cc>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	4a60      	ldr	r2, [pc, #384]	; (8001538 <MX_GPIO_Init+0x1cc>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013be:	4b5e      	ldr	r3, [pc, #376]	; (8001538 <MX_GPIO_Init+0x1cc>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013ca:	4b5b      	ldr	r3, [pc, #364]	; (8001538 <MX_GPIO_Init+0x1cc>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ce:	4a5a      	ldr	r2, [pc, #360]	; (8001538 <MX_GPIO_Init+0x1cc>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d6:	4b58      	ldr	r3, [pc, #352]	; (8001538 <MX_GPIO_Init+0x1cc>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80013e2:	4b55      	ldr	r3, [pc, #340]	; (8001538 <MX_GPIO_Init+0x1cc>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	4a54      	ldr	r2, [pc, #336]	; (8001538 <MX_GPIO_Init+0x1cc>)
 80013e8:	f043 0308 	orr.w	r3, r3, #8
 80013ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ee:	4b52      	ldr	r3, [pc, #328]	; (8001538 <MX_GPIO_Init+0x1cc>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001400:	484e      	ldr	r0, [pc, #312]	; (800153c <MX_GPIO_Init+0x1d0>)
 8001402:	f002 fb8f 	bl	8003b24 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	f241 0104 	movw	r1, #4100	; 0x1004
 800140c:	484c      	ldr	r0, [pc, #304]	; (8001540 <MX_GPIO_Init+0x1d4>)
 800140e:	f002 fb89 	bl	8003b24 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2181      	movs	r1, #129	; 0x81
 8001416:	484b      	ldr	r0, [pc, #300]	; (8001544 <MX_GPIO_Init+0x1d8>)
 8001418:	f002 fb84 	bl	8003b24 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 800141c:	2201      	movs	r2, #1
 800141e:	2120      	movs	r1, #32
 8001420:	4847      	ldr	r0, [pc, #284]	; (8001540 <MX_GPIO_Init+0x1d4>)
 8001422:	f002 fb7f 	bl	8003b24 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001426:	2201      	movs	r2, #1
 8001428:	2101      	movs	r1, #1
 800142a:	4844      	ldr	r0, [pc, #272]	; (800153c <MX_GPIO_Init+0x1d0>)
 800142c:	f002 fb7a 	bl	8003b24 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
	GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001430:	f240 1315 	movw	r3, #277	; 0x115
 8001434:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001436:	2301      	movs	r3, #1
 8001438:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	483c      	ldr	r0, [pc, #240]	; (800153c <MX_GPIO_Init+0x1d0>)
 800144a:	f002 f8cd 	bl	80035e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800144e:	234a      	movs	r3, #74	; 0x4a
 8001450:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001452:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001456:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4619      	mov	r1, r3
 8001462:	4836      	ldr	r0, [pc, #216]	; (800153c <MX_GPIO_Init+0x1d0>)
 8001464:	f002 f8c0 	bl	80035e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : BUTTON_EXTI13_Pin */
	GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001468:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800146c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800146e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001472:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	4832      	ldr	r0, [pc, #200]	; (8001548 <MX_GPIO_Init+0x1dc>)
 8001480:	f002 f8b2 	bl	80035e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC5 LSM3MDL_DRDY_EXTI8_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_5|LSM3MDL_DRDY_EXTI8_Pin;
 8001484:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001488:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800148a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800148e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4619      	mov	r1, r3
 800149a:	482b      	ldr	r0, [pc, #172]	; (8001548 <MX_GPIO_Init+0x1dc>)
 800149c:	f002 f8a4 	bl	80035e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D3_Pin */
	GPIO_InitStruct.Pin = ARD_D3_Pin;
 80014a0:	2301      	movs	r3, #1
 80014a2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014a8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4619      	mov	r1, r3
 80014b4:	4822      	ldr	r0, [pc, #136]	; (8001540 <MX_GPIO_Init+0x1d4>)
 80014b6:	f002 f897 	bl	80035e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin SPSGRF_915_SPI3_CSN_Pin */
	GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|SPSGRF_915_SPI3_CSN_Pin;
 80014ba:	f241 0324 	movw	r3, #4132	; 0x1024
 80014be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c0:	2301      	movs	r3, #1
 80014c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4619      	mov	r1, r3
 80014d2:	481b      	ldr	r0, [pc, #108]	; (8001540 <MX_GPIO_Init+0x1d4>)
 80014d4:	f002 f888 	bl	80035e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin PMOD_IRQ_EXTI12_Pin */
	GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|PMOD_IRQ_EXTI12_Pin;
 80014d8:	f640 4304 	movw	r3, #3076	; 0xc04
 80014dc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014e2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	4815      	ldr	r0, [pc, #84]	; (8001544 <MX_GPIO_Init+0x1d8>)
 80014f0:	f002 f87a 	bl	80035e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
	GPIO_InitStruct.Pin = PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80014f4:	2381      	movs	r3, #129	; 0x81
 80014f6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	480e      	ldr	r0, [pc, #56]	; (8001544 <MX_GPIO_Init+0x1d8>)
 800150c:	f002 f86c 	bl	80035e8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	2017      	movs	r0, #23
 8001516:	f001 ffb2 	bl	800347e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800151a:	2017      	movs	r0, #23
 800151c:	f001 ffcb 	bl	80034b6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001520:	2200      	movs	r2, #0
 8001522:	2100      	movs	r1, #0
 8001524:	2028      	movs	r0, #40	; 0x28
 8001526:	f001 ffaa 	bl	800347e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800152a:	2028      	movs	r0, #40	; 0x28
 800152c:	f001 ffc3 	bl	80034b6 <HAL_NVIC_EnableIRQ>

}
 8001530:	bf00      	nop
 8001532:	3728      	adds	r7, #40	; 0x28
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40021000 	.word	0x40021000
 800153c:	48001000 	.word	0x48001000
 8001540:	48000400 	.word	0x48000400
 8001544:	48000c00 	.word	0x48000c00
 8001548:	48000800 	.word	0x48000800

0800154c <kalman_filter>:

/* USER CODE BEGIN 4 */
/*############################## Kalman function ##############################*/
float kalman_filter( float ADC_Value)
{
 800154c:	b480      	push	{r7}
 800154e:	b087      	sub	sp, #28
 8001550:	af00      	add	r7, sp, #0
 8001552:	ed87 0a01 	vstr	s0, [r7, #4]
	static float Kg = 0;
	static float P_k_k1 = 1;

	float kalman_adc;
	static float kalman_adc_old=0;
	Z_k = ADC_Value;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	617b      	str	r3, [r7, #20]
	x_k1_k1 = kalman_adc_old;
 800155a:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <kalman_filter+0xb8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	613b      	str	r3, [r7, #16]

	x_k_k1 = x_k1_k1;
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	60fb      	str	r3, [r7, #12]
	P_k_k1 = P_k1_k1 + Q;
 8001564:	4b28      	ldr	r3, [pc, #160]	; (8001608 <kalman_filter+0xbc>)
 8001566:	ed93 7a00 	vldr	s14, [r3]
 800156a:	4b28      	ldr	r3, [pc, #160]	; (800160c <kalman_filter+0xc0>)
 800156c:	edd3 7a00 	vldr	s15, [r3]
 8001570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001574:	4b26      	ldr	r3, [pc, #152]	; (8001610 <kalman_filter+0xc4>)
 8001576:	edc3 7a00 	vstr	s15, [r3]

	Kg = P_k_k1/(P_k_k1 + R);
 800157a:	4b25      	ldr	r3, [pc, #148]	; (8001610 <kalman_filter+0xc4>)
 800157c:	edd3 6a00 	vldr	s13, [r3]
 8001580:	4b23      	ldr	r3, [pc, #140]	; (8001610 <kalman_filter+0xc4>)
 8001582:	ed93 7a00 	vldr	s14, [r3]
 8001586:	4b23      	ldr	r3, [pc, #140]	; (8001614 <kalman_filter+0xc8>)
 8001588:	edd3 7a00 	vldr	s15, [r3]
 800158c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001590:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001594:	4b20      	ldr	r3, [pc, #128]	; (8001618 <kalman_filter+0xcc>)
 8001596:	edc3 7a00 	vstr	s15, [r3]

	kalman_adc = x_k_k1 + Kg * (Z_k - kalman_adc_old);
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <kalman_filter+0xb8>)
 800159c:	edd3 7a00 	vldr	s15, [r3]
 80015a0:	ed97 7a05 	vldr	s14, [r7, #20]
 80015a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015a8:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <kalman_filter+0xcc>)
 80015aa:	edd3 7a00 	vldr	s15, [r3]
 80015ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80015b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ba:	edc7 7a02 	vstr	s15, [r7, #8]
	P_k1_k1 = (1 - Kg)*P_k_k1;
 80015be:	4b16      	ldr	r3, [pc, #88]	; (8001618 <kalman_filter+0xcc>)
 80015c0:	edd3 7a00 	vldr	s15, [r3]
 80015c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015cc:	4b10      	ldr	r3, [pc, #64]	; (8001610 <kalman_filter+0xc4>)
 80015ce:	edd3 7a00 	vldr	s15, [r3]
 80015d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <kalman_filter+0xbc>)
 80015d8:	edc3 7a00 	vstr	s15, [r3]
	P_k_k1 = P_k1_k1;
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <kalman_filter+0xbc>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0b      	ldr	r2, [pc, #44]	; (8001610 <kalman_filter+0xc4>)
 80015e2:	6013      	str	r3, [r2, #0]

	ADC_OLD_Value = ADC_Value;
 80015e4:	4a0d      	ldr	r2, [pc, #52]	; (800161c <kalman_filter+0xd0>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6013      	str	r3, [r2, #0]
	kalman_adc_old = kalman_adc;
 80015ea:	4a06      	ldr	r2, [pc, #24]	; (8001604 <kalman_filter+0xb8>)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	6013      	str	r3, [r2, #0]

	return kalman_adc;
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	ee07 3a90 	vmov	s15, r3
}
 80015f6:	eeb0 0a67 	vmov.f32	s0, s15
 80015fa:	371c      	adds	r7, #28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	2000065c 	.word	0x2000065c
 8001608:	20000660 	.word	0x20000660
 800160c:	20000000 	.word	0x20000000
 8001610:	20000004 	.word	0x20000004
 8001614:	20000008 	.word	0x20000008
 8001618:	20000664 	.word	0x20000664
 800161c:	20000668 	.word	0x20000668

08001620 <vNormalizeAngles>:


/*############################## Normalize angles ###############################*/

void vNormalizeAngles(float *pData)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

	float NormAccel = 0.0 ;
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
	float NormGyro = 0.0 ;
 800162e:	f04f 0300 	mov.w	r3, #0
 8001632:	613b      	str	r3, [r7, #16]
	float NormMag	= 0.0 ;
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]

	NormMag = sqrt((pData[0]*pData[0])+(pData[1]*pData[1])+(pData[2]*pData[2])) ;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	ed93 7a00 	vldr	s14, [r3]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	edd3 7a00 	vldr	s15, [r3]
 8001646:	ee27 7a27 	vmul.f32	s14, s14, s15
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3304      	adds	r3, #4
 800164e:	edd3 6a00 	vldr	s13, [r3]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	3304      	adds	r3, #4
 8001656:	edd3 7a00 	vldr	s15, [r3]
 800165a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800165e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3308      	adds	r3, #8
 8001666:	edd3 6a00 	vldr	s13, [r3]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3308      	adds	r3, #8
 800166e:	edd3 7a00 	vldr	s15, [r3]
 8001672:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800167a:	ee17 0a90 	vmov	r0, s15
 800167e:	f7fe ff63 	bl	8000548 <__aeabi_f2d>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	ec43 2b10 	vmov	d0, r2, r3
 800168a:	f00c fc2b 	bl	800dee4 <sqrt>
 800168e:	ec53 2b10 	vmov	r2, r3, d0
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	f7ff faa7 	bl	8000be8 <__aeabi_d2f>
 800169a:	4603      	mov	r3, r0
 800169c:	60fb      	str	r3, [r7, #12]
	NormGyro = sqrt((pData[3]*pData[3])+(pData[4]*pData[4])+(pData[5]*pData[5])) ;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	330c      	adds	r3, #12
 80016a2:	ed93 7a00 	vldr	s14, [r3]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	330c      	adds	r3, #12
 80016aa:	edd3 7a00 	vldr	s15, [r3]
 80016ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3310      	adds	r3, #16
 80016b6:	edd3 6a00 	vldr	s13, [r3]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3310      	adds	r3, #16
 80016be:	edd3 7a00 	vldr	s15, [r3]
 80016c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3314      	adds	r3, #20
 80016ce:	edd3 6a00 	vldr	s13, [r3]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3314      	adds	r3, #20
 80016d6:	edd3 7a00 	vldr	s15, [r3]
 80016da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e2:	ee17 0a90 	vmov	r0, s15
 80016e6:	f7fe ff2f 	bl	8000548 <__aeabi_f2d>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	ec43 2b10 	vmov	d0, r2, r3
 80016f2:	f00c fbf7 	bl	800dee4 <sqrt>
 80016f6:	ec53 2b10 	vmov	r2, r3, d0
 80016fa:	4610      	mov	r0, r2
 80016fc:	4619      	mov	r1, r3
 80016fe:	f7ff fa73 	bl	8000be8 <__aeabi_d2f>
 8001702:	4603      	mov	r3, r0
 8001704:	613b      	str	r3, [r7, #16]
	NormAccel= sqrt((pData[6]*pData[6])+(pData[7]*pData[7])+(pData[8]*pData[8])) ;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3318      	adds	r3, #24
 800170a:	ed93 7a00 	vldr	s14, [r3]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3318      	adds	r3, #24
 8001712:	edd3 7a00 	vldr	s15, [r3]
 8001716:	ee27 7a27 	vmul.f32	s14, s14, s15
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	331c      	adds	r3, #28
 800171e:	edd3 6a00 	vldr	s13, [r3]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	331c      	adds	r3, #28
 8001726:	edd3 7a00 	vldr	s15, [r3]
 800172a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800172e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3320      	adds	r3, #32
 8001736:	edd3 6a00 	vldr	s13, [r3]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3320      	adds	r3, #32
 800173e:	edd3 7a00 	vldr	s15, [r3]
 8001742:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800174a:	ee17 0a90 	vmov	r0, s15
 800174e:	f7fe fefb 	bl	8000548 <__aeabi_f2d>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	ec43 2b10 	vmov	d0, r2, r3
 800175a:	f00c fbc3 	bl	800dee4 <sqrt>
 800175e:	ec53 2b10 	vmov	r2, r3, d0
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f7ff fa3f 	bl	8000be8 <__aeabi_d2f>
 800176a:	4603      	mov	r3, r0
 800176c:	617b      	str	r3, [r7, #20]


	pData[0] = pData[0]/NormMag;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	edd3 6a00 	vldr	s13, [r3]
 8001774:	ed97 7a03 	vldr	s14, [r7, #12]
 8001778:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	edc3 7a00 	vstr	s15, [r3]
	pData[1] = pData[1]/NormMag;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3304      	adds	r3, #4
 8001786:	edd3 6a00 	vldr	s13, [r3]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3304      	adds	r3, #4
 800178e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001792:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001796:	edc3 7a00 	vstr	s15, [r3]
	pData[2] = pData[2]/NormMag;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3308      	adds	r3, #8
 800179e:	edd3 6a00 	vldr	s13, [r3]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3308      	adds	r3, #8
 80017a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80017aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ae:	edc3 7a00 	vstr	s15, [r3]

	pData[3] = pData[3]/NormGyro;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	330c      	adds	r3, #12
 80017b6:	edd3 6a00 	vldr	s13, [r3]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	330c      	adds	r3, #12
 80017be:	ed97 7a04 	vldr	s14, [r7, #16]
 80017c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017c6:	edc3 7a00 	vstr	s15, [r3]
	pData[4] = pData[4]/NormGyro;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3310      	adds	r3, #16
 80017ce:	edd3 6a00 	vldr	s13, [r3]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3310      	adds	r3, #16
 80017d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80017da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017de:	edc3 7a00 	vstr	s15, [r3]
	pData[5] = pData[5]/NormGyro;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3314      	adds	r3, #20
 80017e6:	edd3 6a00 	vldr	s13, [r3]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3314      	adds	r3, #20
 80017ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80017f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017f6:	edc3 7a00 	vstr	s15, [r3]

	pData[6] = pData[6]/NormAccel;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3318      	adds	r3, #24
 80017fe:	edd3 6a00 	vldr	s13, [r3]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3318      	adds	r3, #24
 8001806:	ed97 7a05 	vldr	s14, [r7, #20]
 800180a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800180e:	edc3 7a00 	vstr	s15, [r3]
	pData[7] = pData[7]/NormAccel;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	331c      	adds	r3, #28
 8001816:	edd3 6a00 	vldr	s13, [r3]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	331c      	adds	r3, #28
 800181e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001826:	edc3 7a00 	vstr	s15, [r3]
	pData[8] = pData[8]/NormAccel;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3320      	adds	r3, #32
 800182e:	edd3 6a00 	vldr	s13, [r3]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3320      	adds	r3, #32
 8001836:	ed97 7a05 	vldr	s14, [r7, #20]
 800183a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800183e:	edc3 7a00 	vstr	s15, [r3]

}
 8001842:	bf00      	nop
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	0000      	movs	r0, r0
 800184c:	0000      	movs	r0, r0
	...

08001850 <vConvertData>:

/*############################## Convert Data ###################################*/

void vConvertData(int16_t *pDataMag ,float *pDataGyro , int16_t *pDataAccel,float* Data_f)
{
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
 800185c:	603b      	str	r3, [r7, #0]


	Data_f[0] =(Data_Mag_i16[0]/1000.0) ;
 800185e:	4b62      	ldr	r3, [pc, #392]	; (80019e8 <vConvertData+0x198>)
 8001860:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fe5d 	bl	8000524 <__aeabi_i2d>
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	4b5f      	ldr	r3, [pc, #380]	; (80019ec <vConvertData+0x19c>)
 8001870:	f7fe ffec 	bl	800084c <__aeabi_ddiv>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	f7ff f9b4 	bl	8000be8 <__aeabi_d2f>
 8001880:	4602      	mov	r2, r0
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	601a      	str	r2, [r3, #0]
	Data_f[1] =(Data_Mag_i16[1]/1000.0);
 8001886:	4b58      	ldr	r3, [pc, #352]	; (80019e8 <vConvertData+0x198>)
 8001888:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fe49 	bl	8000524 <__aeabi_i2d>
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	4b55      	ldr	r3, [pc, #340]	; (80019ec <vConvertData+0x19c>)
 8001898:	f7fe ffd8 	bl	800084c <__aeabi_ddiv>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	1d1c      	adds	r4, r3, #4
 80018a8:	f7ff f99e 	bl	8000be8 <__aeabi_d2f>
 80018ac:	4603      	mov	r3, r0
 80018ae:	6023      	str	r3, [r4, #0]
	Data_f[2] =(Data_Mag_i16[2]/1000.0) ;
 80018b0:	4b4d      	ldr	r3, [pc, #308]	; (80019e8 <vConvertData+0x198>)
 80018b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fe34 	bl	8000524 <__aeabi_i2d>
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	4b4a      	ldr	r3, [pc, #296]	; (80019ec <vConvertData+0x19c>)
 80018c2:	f7fe ffc3 	bl	800084c <__aeabi_ddiv>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4610      	mov	r0, r2
 80018cc:	4619      	mov	r1, r3
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	f103 0408 	add.w	r4, r3, #8
 80018d4:	f7ff f988 	bl	8000be8 <__aeabi_d2f>
 80018d8:	4603      	mov	r3, r0
 80018da:	6023      	str	r3, [r4, #0]

	Data_f[3] =  Data_Gyro_f[0]/1000.0 ;
 80018dc:	4b44      	ldr	r3, [pc, #272]	; (80019f0 <vConvertData+0x1a0>)
 80018de:	ed93 7a00 	vldr	s14, [r3]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	330c      	adds	r3, #12
 80018e6:	eddf 6a43 	vldr	s13, [pc, #268]	; 80019f4 <vConvertData+0x1a4>
 80018ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ee:	edc3 7a00 	vstr	s15, [r3]
	Data_f[4] =  Data_Gyro_f[1]/1000.0 ;
 80018f2:	4b3f      	ldr	r3, [pc, #252]	; (80019f0 <vConvertData+0x1a0>)
 80018f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	3310      	adds	r3, #16
 80018fc:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80019f4 <vConvertData+0x1a4>
 8001900:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001904:	edc3 7a00 	vstr	s15, [r3]
	Data_f[5] =  Data_Gyro_f[2]/1000.0 ;
 8001908:	4b39      	ldr	r3, [pc, #228]	; (80019f0 <vConvertData+0x1a0>)
 800190a:	ed93 7a02 	vldr	s14, [r3, #8]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	3314      	adds	r3, #20
 8001912:	eddf 6a38 	vldr	s13, [pc, #224]	; 80019f4 <vConvertData+0x1a4>
 8001916:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800191a:	edc3 7a00 	vstr	s15, [r3]

	Data_f[6] = ((Data_Accel_i16[0]*9.81)/1000) ;
 800191e:	4b36      	ldr	r3, [pc, #216]	; (80019f8 <vConvertData+0x1a8>)
 8001920:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fdfd 	bl	8000524 <__aeabi_i2d>
 800192a:	a32d      	add	r3, pc, #180	; (adr r3, 80019e0 <vConvertData+0x190>)
 800192c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001930:	f7fe fe62 	bl	80005f8 <__aeabi_dmul>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4610      	mov	r0, r2
 800193a:	4619      	mov	r1, r3
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	4b2a      	ldr	r3, [pc, #168]	; (80019ec <vConvertData+0x19c>)
 8001942:	f7fe ff83 	bl	800084c <__aeabi_ddiv>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4610      	mov	r0, r2
 800194c:	4619      	mov	r1, r3
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	f103 0418 	add.w	r4, r3, #24
 8001954:	f7ff f948 	bl	8000be8 <__aeabi_d2f>
 8001958:	4603      	mov	r3, r0
 800195a:	6023      	str	r3, [r4, #0]
	Data_f[7] = ((Data_Accel_i16[1]*9.81)/1000) ;
 800195c:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <vConvertData+0x1a8>)
 800195e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fdde 	bl	8000524 <__aeabi_i2d>
 8001968:	a31d      	add	r3, pc, #116	; (adr r3, 80019e0 <vConvertData+0x190>)
 800196a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196e:	f7fe fe43 	bl	80005f8 <__aeabi_dmul>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <vConvertData+0x19c>)
 8001980:	f7fe ff64 	bl	800084c <__aeabi_ddiv>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	f103 041c 	add.w	r4, r3, #28
 8001992:	f7ff f929 	bl	8000be8 <__aeabi_d2f>
 8001996:	4603      	mov	r3, r0
 8001998:	6023      	str	r3, [r4, #0]
	Data_f[8] =((Data_Accel_i16[2]*9.81)/1000) ;
 800199a:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <vConvertData+0x1a8>)
 800199c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe fdbf 	bl	8000524 <__aeabi_i2d>
 80019a6:	a30e      	add	r3, pc, #56	; (adr r3, 80019e0 <vConvertData+0x190>)
 80019a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ac:	f7fe fe24 	bl	80005f8 <__aeabi_dmul>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <vConvertData+0x19c>)
 80019be:	f7fe ff45 	bl	800084c <__aeabi_ddiv>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	f103 0420 	add.w	r4, r3, #32
 80019d0:	f7ff f90a 	bl	8000be8 <__aeabi_d2f>
 80019d4:	4603      	mov	r3, r0
 80019d6:	6023      	str	r3, [r4, #0]

	//	return &Data_f[0] ;
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd90      	pop	{r4, r7, pc}
 80019e0:	51eb851f 	.word	0x51eb851f
 80019e4:	40239eb8 	.word	0x40239eb8
 80019e8:	2000040c 	.word	0x2000040c
 80019ec:	408f4000 	.word	0x408f4000
 80019f0:	2000041c 	.word	0x2000041c
 80019f4:	447a0000 	.word	0x447a0000
 80019f8:	20000414 	.word	0x20000414
 80019fc:	00000000 	.word	0x00000000

08001a00 <vCalculateAngles>:

/*############################## Calculate Angles #################################*/

void vCalculateAngles(float *pData,float* Angle_f)
{
 8001a00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a04:	ed2d 8b02 	vpush	{d8}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	6039      	str	r1, [r7, #0]
	Angle_f[0] =  180*atan2(Data_f[7],Data_f[8])/PI;
 8001a10:	4bad      	ldr	r3, [pc, #692]	; (8001cc8 <vCalculateAngles+0x2c8>)
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fd97 	bl	8000548 <__aeabi_f2d>
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	460d      	mov	r5, r1
 8001a1e:	4baa      	ldr	r3, [pc, #680]	; (8001cc8 <vCalculateAngles+0x2c8>)
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fd90 	bl	8000548 <__aeabi_f2d>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	ec43 2b11 	vmov	d1, r2, r3
 8001a30:	ec45 4b10 	vmov	d0, r4, r5
 8001a34:	f00c fa54 	bl	800dee0 <atan2>
 8001a38:	ec51 0b10 	vmov	r0, r1, d0
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	4ba2      	ldr	r3, [pc, #648]	; (8001ccc <vCalculateAngles+0x2cc>)
 8001a42:	f7fe fdd9 	bl	80005f8 <__aeabi_dmul>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	a39c      	add	r3, pc, #624	; (adr r3, 8001cc0 <vCalculateAngles+0x2c0>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	f7fe fefa 	bl	800084c <__aeabi_ddiv>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f7ff f8c2 	bl	8000be8 <__aeabi_d2f>
 8001a64:	4602      	mov	r2, r0
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	601a      	str	r2, [r3, #0]
	Angle_f[1] = 180*atan2(Data_f[6],Data_f[8])/PI;
 8001a6a:	4b97      	ldr	r3, [pc, #604]	; (8001cc8 <vCalculateAngles+0x2c8>)
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fd6a 	bl	8000548 <__aeabi_f2d>
 8001a74:	4604      	mov	r4, r0
 8001a76:	460d      	mov	r5, r1
 8001a78:	4b93      	ldr	r3, [pc, #588]	; (8001cc8 <vCalculateAngles+0x2c8>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fd63 	bl	8000548 <__aeabi_f2d>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	ec43 2b11 	vmov	d1, r2, r3
 8001a8a:	ec45 4b10 	vmov	d0, r4, r5
 8001a8e:	f00c fa27 	bl	800dee0 <atan2>
 8001a92:	ec51 0b10 	vmov	r0, r1, d0
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	4b8c      	ldr	r3, [pc, #560]	; (8001ccc <vCalculateAngles+0x2cc>)
 8001a9c:	f7fe fdac 	bl	80005f8 <__aeabi_dmul>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	a385      	add	r3, pc, #532	; (adr r3, 8001cc0 <vCalculateAngles+0x2c0>)
 8001aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aae:	f7fe fecd 	bl	800084c <__aeabi_ddiv>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	4619      	mov	r1, r3
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	1d1c      	adds	r4, r3, #4
 8001abe:	f7ff f893 	bl	8000be8 <__aeabi_d2f>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	6023      	str	r3, [r4, #0]
	Angle_f[2]=180*atan2((-Data_f[1]*cos(Angle_f[0])+Data_f[3]*sin(Angle_f[0])),(Data_f[0]*cos(Angle_f[1])+Data_f[1]*sin(Angle_f[1])*sin(Angle_f[0])+Data_f[2]*sin(Angle_f[1])*cos(Angle_f[0])))/PI ;
 8001ac6:	4b80      	ldr	r3, [pc, #512]	; (8001cc8 <vCalculateAngles+0x2c8>)
 8001ac8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001acc:	eef1 7a67 	vneg.f32	s15, s15
 8001ad0:	ee17 3a90 	vmov	r3, s15
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fd37 	bl	8000548 <__aeabi_f2d>
 8001ada:	4604      	mov	r4, r0
 8001adc:	460d      	mov	r5, r1
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fd30 	bl	8000548 <__aeabi_f2d>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	ec43 2b10 	vmov	d0, r2, r3
 8001af0:	f00c f94a 	bl	800dd88 <cos>
 8001af4:	ec53 2b10 	vmov	r2, r3, d0
 8001af8:	4620      	mov	r0, r4
 8001afa:	4629      	mov	r1, r5
 8001afc:	f7fe fd7c 	bl	80005f8 <__aeabi_dmul>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4690      	mov	r8, r2
 8001b06:	4699      	mov	r9, r3
 8001b08:	4b6f      	ldr	r3, [pc, #444]	; (8001cc8 <vCalculateAngles+0x2c8>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fd1b 	bl	8000548 <__aeabi_f2d>
 8001b12:	4604      	mov	r4, r0
 8001b14:	460d      	mov	r5, r1
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fd14 	bl	8000548 <__aeabi_f2d>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	ec43 2b10 	vmov	d0, r2, r3
 8001b28:	f00c f982 	bl	800de30 <sin>
 8001b2c:	ec53 2b10 	vmov	r2, r3, d0
 8001b30:	4620      	mov	r0, r4
 8001b32:	4629      	mov	r1, r5
 8001b34:	f7fe fd60 	bl	80005f8 <__aeabi_dmul>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4640      	mov	r0, r8
 8001b3e:	4649      	mov	r1, r9
 8001b40:	f7fe fba4 	bl	800028c <__adddf3>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	ec43 2b18 	vmov	d8, r2, r3
 8001b4c:	4b5e      	ldr	r3, [pc, #376]	; (8001cc8 <vCalculateAngles+0x2c8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fcf9 	bl	8000548 <__aeabi_f2d>
 8001b56:	4604      	mov	r4, r0
 8001b58:	460d      	mov	r5, r1
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fcf1 	bl	8000548 <__aeabi_f2d>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	ec43 2b10 	vmov	d0, r2, r3
 8001b6e:	f00c f90b 	bl	800dd88 <cos>
 8001b72:	ec53 2b10 	vmov	r2, r3, d0
 8001b76:	4620      	mov	r0, r4
 8001b78:	4629      	mov	r1, r5
 8001b7a:	f7fe fd3d 	bl	80005f8 <__aeabi_dmul>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4690      	mov	r8, r2
 8001b84:	4699      	mov	r9, r3
 8001b86:	4b50      	ldr	r3, [pc, #320]	; (8001cc8 <vCalculateAngles+0x2c8>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fcdc 	bl	8000548 <__aeabi_f2d>
 8001b90:	4604      	mov	r4, r0
 8001b92:	460d      	mov	r5, r1
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	3304      	adds	r3, #4
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fcd4 	bl	8000548 <__aeabi_f2d>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	ec43 2b10 	vmov	d0, r2, r3
 8001ba8:	f00c f942 	bl	800de30 <sin>
 8001bac:	ec53 2b10 	vmov	r2, r3, d0
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	4629      	mov	r1, r5
 8001bb4:	f7fe fd20 	bl	80005f8 <__aeabi_dmul>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4614      	mov	r4, r2
 8001bbe:	461d      	mov	r5, r3
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fcbf 	bl	8000548 <__aeabi_f2d>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	ec43 2b10 	vmov	d0, r2, r3
 8001bd2:	f00c f92d 	bl	800de30 <sin>
 8001bd6:	ec53 2b10 	vmov	r2, r3, d0
 8001bda:	4620      	mov	r0, r4
 8001bdc:	4629      	mov	r1, r5
 8001bde:	f7fe fd0b 	bl	80005f8 <__aeabi_dmul>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4640      	mov	r0, r8
 8001be8:	4649      	mov	r1, r9
 8001bea:	f7fe fb4f 	bl	800028c <__adddf3>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4690      	mov	r8, r2
 8001bf4:	4699      	mov	r9, r3
 8001bf6:	4b34      	ldr	r3, [pc, #208]	; (8001cc8 <vCalculateAngles+0x2c8>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fca4 	bl	8000548 <__aeabi_f2d>
 8001c00:	4604      	mov	r4, r0
 8001c02:	460d      	mov	r5, r1
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	3304      	adds	r3, #4
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fc9c 	bl	8000548 <__aeabi_f2d>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	ec43 2b10 	vmov	d0, r2, r3
 8001c18:	f00c f90a 	bl	800de30 <sin>
 8001c1c:	ec53 2b10 	vmov	r2, r3, d0
 8001c20:	4620      	mov	r0, r4
 8001c22:	4629      	mov	r1, r5
 8001c24:	f7fe fce8 	bl	80005f8 <__aeabi_dmul>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4614      	mov	r4, r2
 8001c2e:	461d      	mov	r5, r3
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fc87 	bl	8000548 <__aeabi_f2d>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	ec43 2b10 	vmov	d0, r2, r3
 8001c42:	f00c f8a1 	bl	800dd88 <cos>
 8001c46:	ec53 2b10 	vmov	r2, r3, d0
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	4629      	mov	r1, r5
 8001c4e:	f7fe fcd3 	bl	80005f8 <__aeabi_dmul>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4640      	mov	r0, r8
 8001c58:	4649      	mov	r1, r9
 8001c5a:	f7fe fb17 	bl	800028c <__adddf3>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	ec43 2b17 	vmov	d7, r2, r3
 8001c66:	eeb0 1a47 	vmov.f32	s2, s14
 8001c6a:	eef0 1a67 	vmov.f32	s3, s15
 8001c6e:	eeb0 0a48 	vmov.f32	s0, s16
 8001c72:	eef0 0a68 	vmov.f32	s1, s17
 8001c76:	f00c f933 	bl	800dee0 <atan2>
 8001c7a:	ec51 0b10 	vmov	r0, r1, d0
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <vCalculateAngles+0x2cc>)
 8001c84:	f7fe fcb8 	bl	80005f8 <__aeabi_dmul>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	a30b      	add	r3, pc, #44	; (adr r3, 8001cc0 <vCalculateAngles+0x2c0>)
 8001c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c96:	f7fe fdd9 	bl	800084c <__aeabi_ddiv>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	f103 0408 	add.w	r4, r3, #8
 8001ca8:	f7fe ff9e 	bl	8000be8 <__aeabi_d2f>
 8001cac:	4603      	mov	r3, r0
 8001cae:	6023      	str	r3, [r4, #0]

}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	ecbd 8b02 	vpop	{d8}
 8001cba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cbe:	bf00      	nop
 8001cc0:	54442eea 	.word	0x54442eea
 8001cc4:	400921fb 	.word	0x400921fb
 8001cc8:	20000428 	.word	0x20000428
 8001ccc:	40668000 	.word	0x40668000

08001cd0 <fRound>:


/*############################## Calculate Angles #################################*/
float fRound(float var)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08c      	sub	sp, #48	; 0x30
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	ed87 0a01 	vstr	s0, [r7, #4]

	char str[40];

	sprintf(str, "%.1f", var);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fc33 	bl	8000548 <__aeabi_f2d>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	f107 0008 	add.w	r0, r7, #8
 8001cea:	4909      	ldr	r1, [pc, #36]	; (8001d10 <fRound+0x40>)
 8001cec:	f007 fe26 	bl	800993c <siprintf>

	// scan string value in var
	sscanf(str, "%f", &var);
 8001cf0:	1d3a      	adds	r2, r7, #4
 8001cf2:	f107 0308 	add.w	r3, r7, #8
 8001cf6:	4907      	ldr	r1, [pc, #28]	; (8001d14 <fRound+0x44>)
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f007 fe3f 	bl	800997c <siscanf>

	return var;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	ee07 3a90 	vmov	s15, r3
}
 8001d04:	eeb0 0a67 	vmov.f32	s0, s15
 8001d08:	3730      	adds	r7, #48	; 0x30
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	0800f608 	.word	0x0800f608
 8001d14:	0800f610 	.word	0x0800f610

08001d18 <HAL_TIM_PeriodElapsedCallback>:


/*############################## Callback function ##############################*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

	BSP_MAGNETO_GetXYZ(&Data_Mag_i16[0]);
 8001d20:	487d      	ldr	r0, [pc, #500]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001d22:	f000 ff21 	bl	8002b68 <BSP_MAGNETO_GetXYZ>
	BSP_GYRO_GetXYZ(&Data_Gyro_f[0]);
 8001d26:	487d      	ldr	r0, [pc, #500]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001d28:	f000 feda 	bl	8002ae0 <BSP_GYRO_GetXYZ>
	BSP_ACCELERO_AccGetXYZ(&Data_Accel_i16[0]);
 8001d2c:	487c      	ldr	r0, [pc, #496]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001d2e:	f000 fe7d 	bl	8002a2c <BSP_ACCELERO_AccGetXYZ>

	vConvertData(&Data_Mag_i16[0],&Data_Gyro_f[0],&Data_Accel_i16[0],&Data_f[0]);
 8001d32:	4b7c      	ldr	r3, [pc, #496]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001d34:	4a7a      	ldr	r2, [pc, #488]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001d36:	4979      	ldr	r1, [pc, #484]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001d38:	4877      	ldr	r0, [pc, #476]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001d3a:	f7ff fd89 	bl	8001850 <vConvertData>

	vNormalizeAngles(&Data_f[0]);
 8001d3e:	4879      	ldr	r0, [pc, #484]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001d40:	f7ff fc6e 	bl	8001620 <vNormalizeAngles>

	vCalculateAngles(&Data_f[0],&Angle_f[0]);
 8001d44:	4978      	ldr	r1, [pc, #480]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001d46:	4877      	ldr	r0, [pc, #476]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001d48:	f7ff fe5a 	bl	8001a00 <vCalculateAngles>
	measure_f = kalman_filter(Angle_f[0]);
 8001d4c:	4b76      	ldr	r3, [pc, #472]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001d4e:	edd3 7a00 	vldr	s15, [r3]
 8001d52:	eeb0 0a67 	vmov.f32	s0, s15
 8001d56:	f7ff fbf9 	bl	800154c <kalman_filter>
 8001d5a:	eef0 7a40 	vmov.f32	s15, s0
 8001d5e:	4b73      	ldr	r3, [pc, #460]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001d60:	edc3 7a00 	vstr	s15, [r3]
	round_measure_f = fRound(measure_f);
 8001d64:	4b71      	ldr	r3, [pc, #452]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001d66:	edd3 7a00 	vldr	s15, [r3]
 8001d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d6e:	f7ff ffaf 	bl	8001cd0 <fRound>
 8001d72:	eef0 7a40 	vmov.f32	s15, s0
 8001d76:	4b6e      	ldr	r3, [pc, #440]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001d78:	edc3 7a00 	vstr	s15, [r3]
	Measured_Angle_Pred = Measured_Angle;
 8001d7c:	4b6d      	ldr	r3, [pc, #436]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a6d      	ldr	r2, [pc, #436]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001d82:	6013      	str	r3, [r2, #0]
	Measured_Angle = round_measure_f+90;
 8001d84:	4b6a      	ldr	r3, [pc, #424]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001d86:	edd3 7a00 	vldr	s15, [r3]
 8001d8a:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001f3c <HAL_TIM_PeriodElapsedCallback+0x224>
 8001d8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d92:	4b68      	ldr	r3, [pc, #416]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001d94:	edc3 7a00 	vstr	s15, [r3]
	vitesse_f = ((Measured_Angle - Measured_Angle_Pred)/5);
 8001d98:	4b66      	ldr	r3, [pc, #408]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001d9a:	ed93 7a00 	vldr	s14, [r3]
 8001d9e:	4b66      	ldr	r3, [pc, #408]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001da0:	edd3 7a00 	vldr	s15, [r3]
 8001da4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001da8:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001dac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001db0:	4b63      	ldr	r3, [pc, #396]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001db2:	edc3 7a00 	vstr	s15, [r3]
	sprintf(Buf,"%.1f\n",Measured_Angle);
 8001db6:	4b5f      	ldr	r3, [pc, #380]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fbc4 	bl	8000548 <__aeabi_f2d>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	495f      	ldr	r1, [pc, #380]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001dc6:	4860      	ldr	r0, [pc, #384]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001dc8:	f007 fdb8 	bl	800993c <siprintf>
	HAL_UART_Transmit_IT(&huart1, (uint8_t*)Buf, 5);
 8001dcc:	2205      	movs	r2, #5
 8001dce:	495e      	ldr	r1, [pc, #376]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001dd0:	485e      	ldr	r0, [pc, #376]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001dd2:	f005 fb2b 	bl	800742c <HAL_UART_Transmit_IT>


	if(Start==1)
 8001dd6:	4b5e      	ldr	r3, [pc, #376]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001dd8:	edd3 7a00 	vldr	s15, [r3]
 8001ddc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001de0:	eef4 7a47 	vcmp.f32	s15, s14
 8001de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de8:	f040 8081 	bne.w	8001eee <HAL_TIM_PeriodElapsedCallback+0x1d6>
	{
		// Lenna algo el PID

		erreur=consigne-round_measure_f;
 8001dec:	4b59      	ldr	r3, [pc, #356]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001dee:	ed93 7a00 	vldr	s14, [r3]
 8001df2:	4b4f      	ldr	r3, [pc, #316]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001df4:	edd3 7a00 	vldr	s15, [r3]
 8001df8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dfc:	4b56      	ldr	r3, [pc, #344]	; (8001f58 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001dfe:	edc3 7a00 	vstr	s15, [r3]
		P=Kp*erreur;
 8001e02:	4b56      	ldr	r3, [pc, #344]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001e04:	ed93 7a00 	vldr	s14, [r3]
 8001e08:	4b53      	ldr	r3, [pc, #332]	; (8001f58 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001e0a:	edd3 7a00 	vldr	s15, [r3]
 8001e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e12:	4b53      	ldr	r3, [pc, #332]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001e14:	edc3 7a00 	vstr	s15, [r3]
		somme=somme+erreur;
 8001e18:	4b52      	ldr	r3, [pc, #328]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001e1a:	ed93 7a00 	vldr	s14, [r3]
 8001e1e:	4b4e      	ldr	r3, [pc, #312]	; (8001f58 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001e20:	edd3 7a00 	vldr	s15, [r3]
 8001e24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e28:	4b4e      	ldr	r3, [pc, #312]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001e2a:	edc3 7a00 	vstr	s15, [r3]
		I=somme*Ki;
 8001e2e:	4b4d      	ldr	r3, [pc, #308]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001e30:	ed93 7a00 	vldr	s14, [r3]
 8001e34:	4b4c      	ldr	r3, [pc, #304]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001e36:	edd3 7a00 	vldr	s15, [r3]
 8001e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e3e:	4b4b      	ldr	r3, [pc, #300]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001e40:	edc3 7a00 	vstr	s15, [r3]
		D=(erreur-erreur_pred)*Kd;
 8001e44:	4b44      	ldr	r3, [pc, #272]	; (8001f58 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001e46:	ed93 7a00 	vldr	s14, [r3]
 8001e4a:	4b49      	ldr	r3, [pc, #292]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001e4c:	edd3 7a00 	vldr	s15, [r3]
 8001e50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e54:	4b47      	ldr	r3, [pc, #284]	; (8001f74 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001e56:	edd3 7a00 	vldr	s15, [r3]
 8001e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e5e:	4b46      	ldr	r3, [pc, #280]	; (8001f78 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001e60:	edc3 7a00 	vstr	s15, [r3]
		cons=P+I+D;
 8001e64:	4b3e      	ldr	r3, [pc, #248]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001e66:	ed93 7a00 	vldr	s14, [r3]
 8001e6a:	4b40      	ldr	r3, [pc, #256]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001e6c:	edd3 7a00 	vldr	s15, [r3]
 8001e70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e74:	4b40      	ldr	r3, [pc, #256]	; (8001f78 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001e76:	edd3 7a00 	vldr	s15, [r3]
 8001e7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e7e:	4b3f      	ldr	r3, [pc, #252]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001e80:	edc3 7a00 	vstr	s15, [r3]
		if(cons>TIM2->ARR)
 8001e84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8a:	ee07 3a90 	vmov	s15, r3
 8001e8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e92:	4b3a      	ldr	r3, [pc, #232]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001e94:	edd3 7a00 	vldr	s15, [r3]
 8001e98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea0:	d50a      	bpl.n	8001eb8 <HAL_TIM_PeriodElapsedCallback+0x1a0>
		{
			cons=TIM2->ARR;
 8001ea2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea8:	ee07 3a90 	vmov	s15, r3
 8001eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eb0:	4b32      	ldr	r3, [pc, #200]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001eb2:	edc3 7a00 	vstr	s15, [r3]
 8001eb6:	e00b      	b.n	8001ed0 <HAL_TIM_PeriodElapsedCallback+0x1b8>
		}
		else if(cons<0)
 8001eb8:	4b30      	ldr	r3, [pc, #192]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001eba:	edd3 7a00 	vldr	s15, [r3]
 8001ebe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec6:	d503      	bpl.n	8001ed0 <HAL_TIM_PeriodElapsedCallback+0x1b8>
		{
			cons=0;
 8001ec8:	4b2c      	ldr	r3, [pc, #176]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
		}
		TIM2->CCR3=cons;
 8001ed0:	4b2a      	ldr	r3, [pc, #168]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001ed2:	edd3 7a00 	vldr	s15, [r3]
 8001ed6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ede:	ee17 2a90 	vmov	r2, s15
 8001ee2:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001ee4:	2108      	movs	r1, #8
 8001ee6:	4826      	ldr	r0, [pc, #152]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001ee8:	f004 f8ba 	bl	8006060 <HAL_TIM_PWM_Start>
	}
	//	round_measure_f = (float)((int)(measure_f*10))/10.0;
	//	magx=Data_f[0] ;
	//	magy=Data_f[1] ;
	//	magz=Data_f[2] ;
}
 8001eec:	e00f      	b.n	8001f0e <HAL_TIM_PeriodElapsedCallback+0x1f6>
	else if(Start==0)
 8001eee:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001ef0:	edd3 7a00 	vldr	s15, [r3]
 8001ef4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efc:	d107      	bne.n	8001f0e <HAL_TIM_PeriodElapsedCallback+0x1f6>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001efe:	2108      	movs	r1, #8
 8001f00:	481f      	ldr	r0, [pc, #124]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001f02:	f004 f9b3 	bl	800626c <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001f06:	2100      	movs	r1, #0
 8001f08:	481d      	ldr	r0, [pc, #116]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001f0a:	f004 f9af 	bl	800626c <HAL_TIM_PWM_Stop>
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	2000040c 	.word	0x2000040c
 8001f1c:	2000041c 	.word	0x2000041c
 8001f20:	20000414 	.word	0x20000414
 8001f24:	20000428 	.word	0x20000428
 8001f28:	2000044c 	.word	0x2000044c
 8001f2c:	20000458 	.word	0x20000458
 8001f30:	2000045c 	.word	0x2000045c
 8001f34:	20000460 	.word	0x20000460
 8001f38:	20000464 	.word	0x20000464
 8001f3c:	42b40000 	.word	0x42b40000
 8001f40:	20000468 	.word	0x20000468
 8001f44:	0800f614 	.word	0x0800f614
 8001f48:	20000634 	.word	0x20000634
 8001f4c:	20000388 	.word	0x20000388
 8001f50:	2000058c 	.word	0x2000058c
 8001f54:	20000560 	.word	0x20000560
 8001f58:	20000624 	.word	0x20000624
 8001f5c:	200005b8 	.word	0x200005b8
 8001f60:	20000618 	.word	0x20000618
 8001f64:	20000628 	.word	0x20000628
 8001f68:	200005e4 	.word	0x200005e4
 8001f6c:	2000061c 	.word	0x2000061c
 8001f70:	2000062c 	.word	0x2000062c
 8001f74:	20000610 	.word	0x20000610
 8001f78:	20000620 	.word	0x20000620
 8001f7c:	20000630 	.word	0x20000630
 8001f80:	200002f0 	.word	0x200002f0

08001f84 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	807b      	strh	r3, [r7, #2]
	if(huart==&huart1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a64      	ldr	r2, [pc, #400]	; (8002124 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	f040 814e 	bne.w	8002236 <HAL_UARTEx_RxEventCallback+0x2b2>
	{
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxBuffer, MAX_SIZE);
 8001f9a:	2264      	movs	r2, #100	; 0x64
 8001f9c:	4962      	ldr	r1, [pc, #392]	; (8002128 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8001f9e:	4861      	ldr	r0, [pc, #388]	; (8002124 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8001fa0:	f006 fdad 	bl	8008afe <HAL_UARTEx_ReceiveToIdle_IT>
		//		test = (char*)RxBuffer;
		sprintf(test,"%s",RxBuffer);
 8001fa4:	4a60      	ldr	r2, [pc, #384]	; (8002128 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8001fa6:	4961      	ldr	r1, [pc, #388]	; (800212c <HAL_UARTEx_RxEventCallback+0x1a8>)
 8001fa8:	4861      	ldr	r0, [pc, #388]	; (8002130 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8001faa:	f007 fcc7 	bl	800993c <siprintf>
		i=0;
 8001fae:	4b61      	ldr	r3, [pc, #388]	; (8002134 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
		uint8_t k=0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	73fb      	strb	r3, [r7, #15]
		for(j=0;j<MAX_SIZE;j++)
 8001fb8:	4b5f      	ldr	r3, [pc, #380]	; (8002138 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
 8001fbe:	e0f6      	b.n	80021ae <HAL_UARTEx_RxEventCallback+0x22a>
		{
			if(i==0)
 8001fc0:	4b5c      	ldr	r3, [pc, #368]	; (8002134 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d128      	bne.n	800201a <HAL_UARTEx_RxEventCallback+0x96>
			{
				if(test[j]==',')
 8001fc8:	4b5b      	ldr	r3, [pc, #364]	; (8002138 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b58      	ldr	r3, [pc, #352]	; (8002130 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8001fd0:	5c9b      	ldrb	r3, [r3, r2]
 8001fd2:	2b2c      	cmp	r3, #44	; 0x2c
 8001fd4:	d105      	bne.n	8001fe2 <HAL_UARTEx_RxEventCallback+0x5e>
				{
					test[j]='.';
 8001fd6:	4b58      	ldr	r3, [pc, #352]	; (8002138 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4b54      	ldr	r3, [pc, #336]	; (8002130 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8001fde:	212e      	movs	r1, #46	; 0x2e
 8001fe0:	5499      	strb	r1, [r3, r2]
				}
				Consigne_str[k]=test[j];
 8001fe2:	4b55      	ldr	r3, [pc, #340]	; (8002138 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	4a51      	ldr	r2, [pc, #324]	; (8002130 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8001fec:	5c51      	ldrb	r1, [r2, r1]
 8001fee:	4a53      	ldr	r2, [pc, #332]	; (800213c <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001ff0:	54d1      	strb	r1, [r2, r3]
				k++;
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	73fb      	strb	r3, [r7, #15]
				if(test[j]=='\n')
 8001ff8:	4b4f      	ldr	r3, [pc, #316]	; (8002138 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b4c      	ldr	r3, [pc, #304]	; (8002130 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8002000:	5c9b      	ldrb	r3, [r3, r2]
 8002002:	2b0a      	cmp	r3, #10
 8002004:	f040 80cd 	bne.w	80021a2 <HAL_UARTEx_RxEventCallback+0x21e>
				{
					k=0;
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]
					i++;
 800200c:	4b49      	ldr	r3, [pc, #292]	; (8002134 <HAL_UARTEx_RxEventCallback+0x1b0>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	3301      	adds	r3, #1
 8002012:	b2da      	uxtb	r2, r3
 8002014:	4b47      	ldr	r3, [pc, #284]	; (8002134 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8002016:	701a      	strb	r2, [r3, #0]
 8002018:	e0c3      	b.n	80021a2 <HAL_UARTEx_RxEventCallback+0x21e>
				}
			}
			else if(i==1)
 800201a:	4b46      	ldr	r3, [pc, #280]	; (8002134 <HAL_UARTEx_RxEventCallback+0x1b0>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d128      	bne.n	8002074 <HAL_UARTEx_RxEventCallback+0xf0>
			{
				if(test[j]==',')
 8002022:	4b45      	ldr	r3, [pc, #276]	; (8002138 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	4b41      	ldr	r3, [pc, #260]	; (8002130 <HAL_UARTEx_RxEventCallback+0x1ac>)
 800202a:	5c9b      	ldrb	r3, [r3, r2]
 800202c:	2b2c      	cmp	r3, #44	; 0x2c
 800202e:	d105      	bne.n	800203c <HAL_UARTEx_RxEventCallback+0xb8>
				{
					test[j]='.';
 8002030:	4b41      	ldr	r3, [pc, #260]	; (8002138 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	461a      	mov	r2, r3
 8002036:	4b3e      	ldr	r3, [pc, #248]	; (8002130 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8002038:	212e      	movs	r1, #46	; 0x2e
 800203a:	5499      	strb	r1, [r3, r2]
				}
				Start_str[k]=test[j];
 800203c:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <HAL_UARTEx_RxEventCallback+0x1b4>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	7bfb      	ldrb	r3, [r7, #15]
 8002044:	4a3a      	ldr	r2, [pc, #232]	; (8002130 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8002046:	5c51      	ldrb	r1, [r2, r1]
 8002048:	4a3d      	ldr	r2, [pc, #244]	; (8002140 <HAL_UARTEx_RxEventCallback+0x1bc>)
 800204a:	54d1      	strb	r1, [r2, r3]
				k++;
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	3301      	adds	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]
				if(test[j]=='\n')
 8002052:	4b39      	ldr	r3, [pc, #228]	; (8002138 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	461a      	mov	r2, r3
 8002058:	4b35      	ldr	r3, [pc, #212]	; (8002130 <HAL_UARTEx_RxEventCallback+0x1ac>)
 800205a:	5c9b      	ldrb	r3, [r3, r2]
 800205c:	2b0a      	cmp	r3, #10
 800205e:	f040 80a0 	bne.w	80021a2 <HAL_UARTEx_RxEventCallback+0x21e>
				{
					k=0;
 8002062:	2300      	movs	r3, #0
 8002064:	73fb      	strb	r3, [r7, #15]
					i++;
 8002066:	4b33      	ldr	r3, [pc, #204]	; (8002134 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	3301      	adds	r3, #1
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4b31      	ldr	r3, [pc, #196]	; (8002134 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8002070:	701a      	strb	r2, [r3, #0]
 8002072:	e096      	b.n	80021a2 <HAL_UARTEx_RxEventCallback+0x21e>
				}
			}
			else if(i==2)
 8002074:	4b2f      	ldr	r3, [pc, #188]	; (8002134 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b02      	cmp	r3, #2
 800207a:	d127      	bne.n	80020cc <HAL_UARTEx_RxEventCallback+0x148>
			{
				if(test[j]==',')
 800207c:	4b2e      	ldr	r3, [pc, #184]	; (8002138 <HAL_UARTEx_RxEventCallback+0x1b4>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	461a      	mov	r2, r3
 8002082:	4b2b      	ldr	r3, [pc, #172]	; (8002130 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8002084:	5c9b      	ldrb	r3, [r3, r2]
 8002086:	2b2c      	cmp	r3, #44	; 0x2c
 8002088:	d105      	bne.n	8002096 <HAL_UARTEx_RxEventCallback+0x112>
				{
					test[j]='.';
 800208a:	4b2b      	ldr	r3, [pc, #172]	; (8002138 <HAL_UARTEx_RxEventCallback+0x1b4>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	4b27      	ldr	r3, [pc, #156]	; (8002130 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8002092:	212e      	movs	r1, #46	; 0x2e
 8002094:	5499      	strb	r1, [r3, r2]
				}
				Kp_str[k]=test[j];
 8002096:	4b28      	ldr	r3, [pc, #160]	; (8002138 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	4619      	mov	r1, r3
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	4a24      	ldr	r2, [pc, #144]	; (8002130 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80020a0:	5c51      	ldrb	r1, [r2, r1]
 80020a2:	4a28      	ldr	r2, [pc, #160]	; (8002144 <HAL_UARTEx_RxEventCallback+0x1c0>)
 80020a4:	54d1      	strb	r1, [r2, r3]
				k++;
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	3301      	adds	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
				if(test[j]=='\n')
 80020ac:	4b22      	ldr	r3, [pc, #136]	; (8002138 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	461a      	mov	r2, r3
 80020b2:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80020b4:	5c9b      	ldrb	r3, [r3, r2]
 80020b6:	2b0a      	cmp	r3, #10
 80020b8:	d173      	bne.n	80021a2 <HAL_UARTEx_RxEventCallback+0x21e>
				{
					k=0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	73fb      	strb	r3, [r7, #15]
					i++;
 80020be:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	3301      	adds	r3, #1
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80020c8:	701a      	strb	r2, [r3, #0]
 80020ca:	e06a      	b.n	80021a2 <HAL_UARTEx_RxEventCallback+0x21e>
				}
			}
			else if(i==3)
 80020cc:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	d13b      	bne.n	800214c <HAL_UARTEx_RxEventCallback+0x1c8>
			{
				if(test[j]==',')
 80020d4:	4b18      	ldr	r3, [pc, #96]	; (8002138 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	4b15      	ldr	r3, [pc, #84]	; (8002130 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80020dc:	5c9b      	ldrb	r3, [r3, r2]
 80020de:	2b2c      	cmp	r3, #44	; 0x2c
 80020e0:	d105      	bne.n	80020ee <HAL_UARTEx_RxEventCallback+0x16a>
				{
					test[j]='.';
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	4b11      	ldr	r3, [pc, #68]	; (8002130 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80020ea:	212e      	movs	r1, #46	; 0x2e
 80020ec:	5499      	strb	r1, [r3, r2]
				}
				Ki_str[k]=test[j];
 80020ee:	4b12      	ldr	r3, [pc, #72]	; (8002138 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	4619      	mov	r1, r3
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	4a0e      	ldr	r2, [pc, #56]	; (8002130 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80020f8:	5c51      	ldrb	r1, [r2, r1]
 80020fa:	4a13      	ldr	r2, [pc, #76]	; (8002148 <HAL_UARTEx_RxEventCallback+0x1c4>)
 80020fc:	54d1      	strb	r1, [r2, r3]
				k++;
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
 8002100:	3301      	adds	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
				if(test[j]=='\n')
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <HAL_UARTEx_RxEventCallback+0x1ac>)
 800210c:	5c9b      	ldrb	r3, [r3, r2]
 800210e:	2b0a      	cmp	r3, #10
 8002110:	d147      	bne.n	80021a2 <HAL_UARTEx_RxEventCallback+0x21e>
				{
					k=0;
 8002112:	2300      	movs	r3, #0
 8002114:	73fb      	strb	r3, [r7, #15]
					i++;
 8002116:	4b07      	ldr	r3, [pc, #28]	; (8002134 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	3301      	adds	r3, #1
 800211c:	b2da      	uxtb	r2, r3
 800211e:	4b05      	ldr	r3, [pc, #20]	; (8002134 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8002120:	701a      	strb	r2, [r3, #0]
 8002122:	e03e      	b.n	80021a2 <HAL_UARTEx_RxEventCallback+0x21e>
 8002124:	20000388 	.word	0x20000388
 8002128:	2000046c 	.word	0x2000046c
 800212c:	0800f61c 	.word	0x0800f61c
 8002130:	200004d4 	.word	0x200004d4
 8002134:	200004d0 	.word	0x200004d0
 8002138:	20000614 	.word	0x20000614
 800213c:	20000538 	.word	0x20000538
 8002140:	20000564 	.word	0x20000564
 8002144:	20000590 	.word	0x20000590
 8002148:	200005bc 	.word	0x200005bc
				}
			}
			else if(i==4)
 800214c:	4b3c      	ldr	r3, [pc, #240]	; (8002240 <HAL_UARTEx_RxEventCallback+0x2bc>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b04      	cmp	r3, #4
 8002152:	d126      	bne.n	80021a2 <HAL_UARTEx_RxEventCallback+0x21e>
			{
				if(test[j]==',')
 8002154:	4b3b      	ldr	r3, [pc, #236]	; (8002244 <HAL_UARTEx_RxEventCallback+0x2c0>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	461a      	mov	r2, r3
 800215a:	4b3b      	ldr	r3, [pc, #236]	; (8002248 <HAL_UARTEx_RxEventCallback+0x2c4>)
 800215c:	5c9b      	ldrb	r3, [r3, r2]
 800215e:	2b2c      	cmp	r3, #44	; 0x2c
 8002160:	d105      	bne.n	800216e <HAL_UARTEx_RxEventCallback+0x1ea>
				{
					test[j]='.';
 8002162:	4b38      	ldr	r3, [pc, #224]	; (8002244 <HAL_UARTEx_RxEventCallback+0x2c0>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	4b37      	ldr	r3, [pc, #220]	; (8002248 <HAL_UARTEx_RxEventCallback+0x2c4>)
 800216a:	212e      	movs	r1, #46	; 0x2e
 800216c:	5499      	strb	r1, [r3, r2]
				}
				Kd_str[k]=test[j];
 800216e:	4b35      	ldr	r3, [pc, #212]	; (8002244 <HAL_UARTEx_RxEventCallback+0x2c0>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	4619      	mov	r1, r3
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	4a34      	ldr	r2, [pc, #208]	; (8002248 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8002178:	5c51      	ldrb	r1, [r2, r1]
 800217a:	4a34      	ldr	r2, [pc, #208]	; (800224c <HAL_UARTEx_RxEventCallback+0x2c8>)
 800217c:	54d1      	strb	r1, [r2, r3]
				k++;
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	3301      	adds	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
				if(test[j]=='\n')
 8002184:	4b2f      	ldr	r3, [pc, #188]	; (8002244 <HAL_UARTEx_RxEventCallback+0x2c0>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	4b2f      	ldr	r3, [pc, #188]	; (8002248 <HAL_UARTEx_RxEventCallback+0x2c4>)
 800218c:	5c9b      	ldrb	r3, [r3, r2]
 800218e:	2b0a      	cmp	r3, #10
 8002190:	d107      	bne.n	80021a2 <HAL_UARTEx_RxEventCallback+0x21e>
				{
					k=0;
 8002192:	2300      	movs	r3, #0
 8002194:	73fb      	strb	r3, [r7, #15]
					i++;
 8002196:	4b2a      	ldr	r3, [pc, #168]	; (8002240 <HAL_UARTEx_RxEventCallback+0x2bc>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	3301      	adds	r3, #1
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4b28      	ldr	r3, [pc, #160]	; (8002240 <HAL_UARTEx_RxEventCallback+0x2bc>)
 80021a0:	701a      	strb	r2, [r3, #0]
		for(j=0;j<MAX_SIZE;j++)
 80021a2:	4b28      	ldr	r3, [pc, #160]	; (8002244 <HAL_UARTEx_RxEventCallback+0x2c0>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	3301      	adds	r3, #1
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4b26      	ldr	r3, [pc, #152]	; (8002244 <HAL_UARTEx_RxEventCallback+0x2c0>)
 80021ac:	701a      	strb	r2, [r3, #0]
 80021ae:	4b25      	ldr	r3, [pc, #148]	; (8002244 <HAL_UARTEx_RxEventCallback+0x2c0>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b63      	cmp	r3, #99	; 0x63
 80021b4:	f67f af04 	bls.w	8001fc0 <HAL_UARTEx_RxEventCallback+0x3c>
				}
			}
		}
		i=0;
 80021b8:	4b21      	ldr	r3, [pc, #132]	; (8002240 <HAL_UARTEx_RxEventCallback+0x2bc>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]
		//		sscanf(Consigne_str, "%f", &consigne);
		consigne = atof(Consigne_str);
 80021be:	4824      	ldr	r0, [pc, #144]	; (8002250 <HAL_UARTEx_RxEventCallback+0x2cc>)
 80021c0:	f006 fcf8 	bl	8008bb4 <atof>
 80021c4:	ec53 2b10 	vmov	r2, r3, d0
 80021c8:	4610      	mov	r0, r2
 80021ca:	4619      	mov	r1, r3
 80021cc:	f7fe fd0c 	bl	8000be8 <__aeabi_d2f>
 80021d0:	4603      	mov	r3, r0
 80021d2:	4a20      	ldr	r2, [pc, #128]	; (8002254 <HAL_UARTEx_RxEventCallback+0x2d0>)
 80021d4:	6013      	str	r3, [r2, #0]
		//		sscanf(Start_str,"%f",&Start);
		Start = atof(Start_str);
 80021d6:	4820      	ldr	r0, [pc, #128]	; (8002258 <HAL_UARTEx_RxEventCallback+0x2d4>)
 80021d8:	f006 fcec 	bl	8008bb4 <atof>
 80021dc:	ec53 2b10 	vmov	r2, r3, d0
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f7fe fd00 	bl	8000be8 <__aeabi_d2f>
 80021e8:	4603      	mov	r3, r0
 80021ea:	4a1c      	ldr	r2, [pc, #112]	; (800225c <HAL_UARTEx_RxEventCallback+0x2d8>)
 80021ec:	6013      	str	r3, [r2, #0]
		//		sscanf(Kp_str,"%f",&Kp);
		Kp = atof(Kp_str);
 80021ee:	481c      	ldr	r0, [pc, #112]	; (8002260 <HAL_UARTEx_RxEventCallback+0x2dc>)
 80021f0:	f006 fce0 	bl	8008bb4 <atof>
 80021f4:	ec53 2b10 	vmov	r2, r3, d0
 80021f8:	4610      	mov	r0, r2
 80021fa:	4619      	mov	r1, r3
 80021fc:	f7fe fcf4 	bl	8000be8 <__aeabi_d2f>
 8002200:	4603      	mov	r3, r0
 8002202:	4a18      	ldr	r2, [pc, #96]	; (8002264 <HAL_UARTEx_RxEventCallback+0x2e0>)
 8002204:	6013      	str	r3, [r2, #0]
		//		sscanf(Ki_str,"%f",&Ki);
		Ki = atof(Ki_str);
 8002206:	4818      	ldr	r0, [pc, #96]	; (8002268 <HAL_UARTEx_RxEventCallback+0x2e4>)
 8002208:	f006 fcd4 	bl	8008bb4 <atof>
 800220c:	ec53 2b10 	vmov	r2, r3, d0
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	f7fe fce8 	bl	8000be8 <__aeabi_d2f>
 8002218:	4603      	mov	r3, r0
 800221a:	4a14      	ldr	r2, [pc, #80]	; (800226c <HAL_UARTEx_RxEventCallback+0x2e8>)
 800221c:	6013      	str	r3, [r2, #0]
		//		sscanf(Kd_str,"%f",&Kd);
		Kd = atof(Kd_str);
 800221e:	480b      	ldr	r0, [pc, #44]	; (800224c <HAL_UARTEx_RxEventCallback+0x2c8>)
 8002220:	f006 fcc8 	bl	8008bb4 <atof>
 8002224:	ec53 2b10 	vmov	r2, r3, d0
 8002228:	4610      	mov	r0, r2
 800222a:	4619      	mov	r1, r3
 800222c:	f7fe fcdc 	bl	8000be8 <__aeabi_d2f>
 8002230:	4603      	mov	r3, r0
 8002232:	4a0f      	ldr	r2, [pc, #60]	; (8002270 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8002234:	6013      	str	r3, [r2, #0]
	}
}
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	200004d0 	.word	0x200004d0
 8002244:	20000614 	.word	0x20000614
 8002248:	200004d4 	.word	0x200004d4
 800224c:	200005e8 	.word	0x200005e8
 8002250:	20000538 	.word	0x20000538
 8002254:	20000560 	.word	0x20000560
 8002258:	20000564 	.word	0x20000564
 800225c:	2000058c 	.word	0x2000058c
 8002260:	20000590 	.word	0x20000590
 8002264:	200005b8 	.word	0x200005b8
 8002268:	200005bc 	.word	0x200005bc
 800226c:	200005e4 	.word	0x200005e4
 8002270:	20000610 	.word	0x20000610

08002274 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002278:	b672      	cpsid	i
}
 800227a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800227c:	e7fe      	b.n	800227c <Error_Handler+0x8>
	...

08002280 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <HAL_MspInit+0x44>)
 8002288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800228a:	4a0e      	ldr	r2, [pc, #56]	; (80022c4 <HAL_MspInit+0x44>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6613      	str	r3, [r2, #96]	; 0x60
 8002292:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <HAL_MspInit+0x44>)
 8002294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	607b      	str	r3, [r7, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800229e:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <HAL_MspInit+0x44>)
 80022a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a2:	4a08      	ldr	r2, [pc, #32]	; (80022c4 <HAL_MspInit+0x44>)
 80022a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a8:	6593      	str	r3, [r2, #88]	; 0x58
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_MspInit+0x44>)
 80022ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40021000 	.word	0x40021000

080022c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b0ac      	sub	sp, #176	; 0xb0
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	2288      	movs	r2, #136	; 0x88
 80022e6:	2100      	movs	r1, #0
 80022e8:	4618      	mov	r0, r3
 80022ea:	f006 fc9f 	bl	8008c2c <memset>
  if(hi2c->Instance==I2C2)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a21      	ldr	r2, [pc, #132]	; (8002378 <HAL_I2C_MspInit+0xb0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d13b      	bne.n	8002370 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80022fc:	2300      	movs	r3, #0
 80022fe:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	4618      	mov	r0, r3
 8002306:	f003 f8c5 	bl	8005494 <HAL_RCCEx_PeriphCLKConfig>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002310:	f7ff ffb0 	bl	8002274 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002314:	4b19      	ldr	r3, [pc, #100]	; (800237c <HAL_I2C_MspInit+0xb4>)
 8002316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002318:	4a18      	ldr	r2, [pc, #96]	; (800237c <HAL_I2C_MspInit+0xb4>)
 800231a:	f043 0302 	orr.w	r3, r3, #2
 800231e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002320:	4b16      	ldr	r3, [pc, #88]	; (800237c <HAL_I2C_MspInit+0xb4>)
 8002322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	613b      	str	r3, [r7, #16]
 800232a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800232c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002330:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002334:	2312      	movs	r3, #18
 8002336:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800233a:	2301      	movs	r3, #1
 800233c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002340:	2303      	movs	r3, #3
 8002342:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002346:	2304      	movs	r3, #4
 8002348:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800234c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002350:	4619      	mov	r1, r3
 8002352:	480b      	ldr	r0, [pc, #44]	; (8002380 <HAL_I2C_MspInit+0xb8>)
 8002354:	f001 f948 	bl	80035e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002358:	4b08      	ldr	r3, [pc, #32]	; (800237c <HAL_I2C_MspInit+0xb4>)
 800235a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235c:	4a07      	ldr	r2, [pc, #28]	; (800237c <HAL_I2C_MspInit+0xb4>)
 800235e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002362:	6593      	str	r3, [r2, #88]	; 0x58
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <HAL_I2C_MspInit+0xb4>)
 8002366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002368:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002370:	bf00      	nop
 8002372:	37b0      	adds	r7, #176	; 0xb0
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40005800 	.word	0x40005800
 800237c:	40021000 	.word	0x40021000
 8002380:	48000400 	.word	0x48000400

08002384 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a0b      	ldr	r2, [pc, #44]	; (80023c0 <HAL_I2C_MspDeInit+0x3c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d10f      	bne.n	80023b6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002396:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <HAL_I2C_MspDeInit+0x40>)
 8002398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239a:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <HAL_I2C_MspDeInit+0x40>)
 800239c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80023a0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80023a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023a6:	4808      	ldr	r0, [pc, #32]	; (80023c8 <HAL_I2C_MspDeInit+0x44>)
 80023a8:	f001 fac8 	bl	800393c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80023ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023b0:	4805      	ldr	r0, [pc, #20]	; (80023c8 <HAL_I2C_MspDeInit+0x44>)
 80023b2:	f001 fac3 	bl	800393c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40005800 	.word	0x40005800
 80023c4:	40021000 	.word	0x40021000
 80023c8:	48000400 	.word	0x48000400

080023cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023dc:	d10c      	bne.n	80023f8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023de:	4b15      	ldr	r3, [pc, #84]	; (8002434 <HAL_TIM_Base_MspInit+0x68>)
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e2:	4a14      	ldr	r2, [pc, #80]	; (8002434 <HAL_TIM_Base_MspInit+0x68>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6593      	str	r3, [r2, #88]	; 0x58
 80023ea:	4b12      	ldr	r3, [pc, #72]	; (8002434 <HAL_TIM_Base_MspInit+0x68>)
 80023ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80023f6:	e018      	b.n	800242a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a0e      	ldr	r2, [pc, #56]	; (8002438 <HAL_TIM_Base_MspInit+0x6c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d113      	bne.n	800242a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002402:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <HAL_TIM_Base_MspInit+0x68>)
 8002404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002406:	4a0b      	ldr	r2, [pc, #44]	; (8002434 <HAL_TIM_Base_MspInit+0x68>)
 8002408:	f043 0310 	orr.w	r3, r3, #16
 800240c:	6593      	str	r3, [r2, #88]	; 0x58
 800240e:	4b09      	ldr	r3, [pc, #36]	; (8002434 <HAL_TIM_Base_MspInit+0x68>)
 8002410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002412:	f003 0310 	and.w	r3, r3, #16
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800241a:	2200      	movs	r2, #0
 800241c:	2101      	movs	r1, #1
 800241e:	2036      	movs	r0, #54	; 0x36
 8002420:	f001 f82d 	bl	800347e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002424:	2036      	movs	r0, #54	; 0x36
 8002426:	f001 f846 	bl	80034b6 <HAL_NVIC_EnableIRQ>
}
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40021000 	.word	0x40021000
 8002438:	40001000 	.word	0x40001000

0800243c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002444:	f107 030c 	add.w	r3, r7, #12
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245c:	d11d      	bne.n	800249a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <HAL_TIM_MspPostInit+0x68>)
 8002460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002462:	4a10      	ldr	r2, [pc, #64]	; (80024a4 <HAL_TIM_MspPostInit+0x68>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <HAL_TIM_MspPostInit+0x68>)
 800246c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8002476:	f248 0304 	movw	r3, #32772	; 0x8004
 800247a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002484:	2300      	movs	r3, #0
 8002486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002488:	2301      	movs	r3, #1
 800248a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248c:	f107 030c 	add.w	r3, r7, #12
 8002490:	4619      	mov	r1, r3
 8002492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002496:	f001 f8a7 	bl	80035e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800249a:	bf00      	nop
 800249c:	3720      	adds	r7, #32
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40021000 	.word	0x40021000

080024a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b0ac      	sub	sp, #176	; 0xb0
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	2288      	movs	r2, #136	; 0x88
 80024c6:	2100      	movs	r1, #0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f006 fbaf 	bl	8008c2c <memset>
  if(huart->Instance==USART1)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a25      	ldr	r2, [pc, #148]	; (8002568 <HAL_UART_MspInit+0xc0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d142      	bne.n	800255e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024d8:	2301      	movs	r3, #1
 80024da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80024dc:	2300      	movs	r3, #0
 80024de:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	4618      	mov	r0, r3
 80024e6:	f002 ffd5 	bl	8005494 <HAL_RCCEx_PeriphCLKConfig>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024f0:	f7ff fec0 	bl	8002274 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024f4:	4b1d      	ldr	r3, [pc, #116]	; (800256c <HAL_UART_MspInit+0xc4>)
 80024f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f8:	4a1c      	ldr	r2, [pc, #112]	; (800256c <HAL_UART_MspInit+0xc4>)
 80024fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024fe:	6613      	str	r3, [r2, #96]	; 0x60
 8002500:	4b1a      	ldr	r3, [pc, #104]	; (800256c <HAL_UART_MspInit+0xc4>)
 8002502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800250c:	4b17      	ldr	r3, [pc, #92]	; (800256c <HAL_UART_MspInit+0xc4>)
 800250e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002510:	4a16      	ldr	r2, [pc, #88]	; (800256c <HAL_UART_MspInit+0xc4>)
 8002512:	f043 0302 	orr.w	r3, r3, #2
 8002516:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002518:	4b14      	ldr	r3, [pc, #80]	; (800256c <HAL_UART_MspInit+0xc4>)
 800251a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002524:	23c0      	movs	r3, #192	; 0xc0
 8002526:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252a:	2302      	movs	r3, #2
 800252c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002536:	2303      	movs	r3, #3
 8002538:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800253c:	2307      	movs	r3, #7
 800253e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002542:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002546:	4619      	mov	r1, r3
 8002548:	4809      	ldr	r0, [pc, #36]	; (8002570 <HAL_UART_MspInit+0xc8>)
 800254a:	f001 f84d 	bl	80035e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800254e:	2200      	movs	r2, #0
 8002550:	2100      	movs	r1, #0
 8002552:	2025      	movs	r0, #37	; 0x25
 8002554:	f000 ff93 	bl	800347e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002558:	2025      	movs	r0, #37	; 0x25
 800255a:	f000 ffac 	bl	80034b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800255e:	bf00      	nop
 8002560:	37b0      	adds	r7, #176	; 0xb0
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40013800 	.word	0x40013800
 800256c:	40021000 	.word	0x40021000
 8002570:	48000400 	.word	0x48000400

08002574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002578:	e7fe      	b.n	8002578 <NMI_Handler+0x4>

0800257a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800257e:	e7fe      	b.n	800257e <HardFault_Handler+0x4>

08002580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002584:	e7fe      	b.n	8002584 <MemManage_Handler+0x4>

08002586 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800258a:	e7fe      	b.n	800258a <BusFault_Handler+0x4>

0800258c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002590:	e7fe      	b.n	8002590 <UsageFault_Handler+0x4>

08002592 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002592:	b480      	push	{r7}
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025c0:	f000 fe62 	bl	8003288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025c4:	bf00      	nop
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80025cc:	2020      	movs	r0, #32
 80025ce:	f001 fac1 	bl	8003b54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80025d2:	2040      	movs	r0, #64	; 0x40
 80025d4:	f001 fabe 	bl	8003b54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80025d8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80025dc:	f001 faba 	bl	8003b54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80025e0:	bf00      	nop
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025e8:	4802      	ldr	r0, [pc, #8]	; (80025f4 <USART1_IRQHandler+0x10>)
 80025ea:	f004 ff8d 	bl	8007508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000388 	.word	0x20000388

080025f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80025fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002600:	f001 faa8 	bl	8003b54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002604:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002608:	f001 faa4 	bl	8003b54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800260c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002610:	f001 faa0 	bl	8003b54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002614:	bf00      	nop
 8002616:	bd80      	pop	{r7, pc}

08002618 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800261c:	4802      	ldr	r0, [pc, #8]	; (8002628 <TIM6_DAC_IRQHandler+0x10>)
 800261e:	f003 febb 	bl	8006398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	2000033c 	.word	0x2000033c

0800262c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002634:	4a14      	ldr	r2, [pc, #80]	; (8002688 <_sbrk+0x5c>)
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <_sbrk+0x60>)
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002640:	4b13      	ldr	r3, [pc, #76]	; (8002690 <_sbrk+0x64>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d102      	bne.n	800264e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <_sbrk+0x64>)
 800264a:	4a12      	ldr	r2, [pc, #72]	; (8002694 <_sbrk+0x68>)
 800264c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <_sbrk+0x64>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	429a      	cmp	r2, r3
 800265a:	d207      	bcs.n	800266c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800265c:	f006 faae 	bl	8008bbc <__errno>
 8002660:	4603      	mov	r3, r0
 8002662:	220c      	movs	r2, #12
 8002664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002666:	f04f 33ff 	mov.w	r3, #4294967295
 800266a:	e009      	b.n	8002680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800266c:	4b08      	ldr	r3, [pc, #32]	; (8002690 <_sbrk+0x64>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002672:	4b07      	ldr	r3, [pc, #28]	; (8002690 <_sbrk+0x64>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	4a05      	ldr	r2, [pc, #20]	; (8002690 <_sbrk+0x64>)
 800267c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800267e:	68fb      	ldr	r3, [r7, #12]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20018000 	.word	0x20018000
 800268c:	00000400 	.word	0x00000400
 8002690:	2000066c 	.word	0x2000066c
 8002694:	200006e0 	.word	0x200006e0

08002698 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <SystemInit+0x20>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a2:	4a05      	ldr	r2, [pc, #20]	; (80026b8 <SystemInit+0x20>)
 80026a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	e000ed00 	.word	0xe000ed00

080026bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80026bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026c0:	f7ff ffea 	bl	8002698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026c4:	480c      	ldr	r0, [pc, #48]	; (80026f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80026c6:	490d      	ldr	r1, [pc, #52]	; (80026fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80026c8:	4a0d      	ldr	r2, [pc, #52]	; (8002700 <LoopForever+0xe>)
  movs r3, #0
 80026ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026cc:	e002      	b.n	80026d4 <LoopCopyDataInit>

080026ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d2:	3304      	adds	r3, #4

080026d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d8:	d3f9      	bcc.n	80026ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026da:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026dc:	4c0a      	ldr	r4, [pc, #40]	; (8002708 <LoopForever+0x16>)
  movs r3, #0
 80026de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e0:	e001      	b.n	80026e6 <LoopFillZerobss>

080026e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e4:	3204      	adds	r2, #4

080026e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e8:	d3fb      	bcc.n	80026e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ea:	f006 fa6d 	bl	8008bc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026ee:	f7fe fc83 	bl	8000ff8 <main>

080026f2 <LoopForever>:

LoopForever:
    b LoopForever
 80026f2:	e7fe      	b.n	80026f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80026f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80026f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026fc:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 8002700:	0800fd88 	.word	0x0800fd88
  ldr r2, =_sbss
 8002704:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 8002708:	200006dc 	.word	0x200006dc

0800270c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800270c:	e7fe      	b.n	800270c <ADC1_2_IRQHandler>
	...

08002710 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08a      	sub	sp, #40	; 0x28
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002718:	4b27      	ldr	r3, [pc, #156]	; (80027b8 <I2Cx_MspInit+0xa8>)
 800271a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271c:	4a26      	ldr	r2, [pc, #152]	; (80027b8 <I2Cx_MspInit+0xa8>)
 800271e:	f043 0302 	orr.w	r3, r3, #2
 8002722:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002724:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <I2Cx_MspInit+0xa8>)
 8002726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002730:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002734:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002736:	2312      	movs	r3, #18
 8002738:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800273a:	2301      	movs	r3, #1
 800273c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800273e:	2303      	movs	r3, #3
 8002740:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002742:	2304      	movs	r3, #4
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002746:	f107 0314 	add.w	r3, r7, #20
 800274a:	4619      	mov	r1, r3
 800274c:	481b      	ldr	r0, [pc, #108]	; (80027bc <I2Cx_MspInit+0xac>)
 800274e:	f000 ff4b 	bl	80035e8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002752:	f107 0314 	add.w	r3, r7, #20
 8002756:	4619      	mov	r1, r3
 8002758:	4818      	ldr	r0, [pc, #96]	; (80027bc <I2Cx_MspInit+0xac>)
 800275a:	f000 ff45 	bl	80035e8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800275e:	4b16      	ldr	r3, [pc, #88]	; (80027b8 <I2Cx_MspInit+0xa8>)
 8002760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002762:	4a15      	ldr	r2, [pc, #84]	; (80027b8 <I2Cx_MspInit+0xa8>)
 8002764:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002768:	6593      	str	r3, [r2, #88]	; 0x58
 800276a:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <I2Cx_MspInit+0xa8>)
 800276c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002776:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <I2Cx_MspInit+0xa8>)
 8002778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277a:	4a0f      	ldr	r2, [pc, #60]	; (80027b8 <I2Cx_MspInit+0xa8>)
 800277c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002780:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002782:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <I2Cx_MspInit+0xa8>)
 8002784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002786:	4a0c      	ldr	r2, [pc, #48]	; (80027b8 <I2Cx_MspInit+0xa8>)
 8002788:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800278c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800278e:	2200      	movs	r2, #0
 8002790:	210f      	movs	r1, #15
 8002792:	2021      	movs	r0, #33	; 0x21
 8002794:	f000 fe73 	bl	800347e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002798:	2021      	movs	r0, #33	; 0x21
 800279a:	f000 fe8c 	bl	80034b6 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800279e:	2200      	movs	r2, #0
 80027a0:	210f      	movs	r1, #15
 80027a2:	2022      	movs	r0, #34	; 0x22
 80027a4:	f000 fe6b 	bl	800347e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80027a8:	2022      	movs	r0, #34	; 0x22
 80027aa:	f000 fe84 	bl	80034b6 <HAL_NVIC_EnableIRQ>
}
 80027ae:	bf00      	nop
 80027b0:	3728      	adds	r7, #40	; 0x28
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40021000 	.word	0x40021000
 80027bc:	48000400 	.word	0x48000400

080027c0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a12      	ldr	r2, [pc, #72]	; (8002814 <I2Cx_Init+0x54>)
 80027cc:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a11      	ldr	r2, [pc, #68]	; (8002818 <I2Cx_Init+0x58>)
 80027d2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff ff89 	bl	8002710 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f001 f9cb 	bl	8003b9a <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002804:	2100      	movs	r1, #0
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f001 ff5a 	bl	80046c0 <HAL_I2CEx_ConfigAnalogFilter>
}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40005800 	.word	0x40005800
 8002818:	00702681 	.word	0x00702681

0800281c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08a      	sub	sp, #40	; 0x28
 8002820:	af04      	add	r7, sp, #16
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	4608      	mov	r0, r1
 8002826:	4611      	mov	r1, r2
 8002828:	461a      	mov	r2, r3
 800282a:	4603      	mov	r3, r0
 800282c:	72fb      	strb	r3, [r7, #11]
 800282e:	460b      	mov	r3, r1
 8002830:	813b      	strh	r3, [r7, #8]
 8002832:	4613      	mov	r3, r2
 8002834:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800283a:	7afb      	ldrb	r3, [r7, #11]
 800283c:	b299      	uxth	r1, r3
 800283e:	88f8      	ldrh	r0, [r7, #6]
 8002840:	893a      	ldrh	r2, [r7, #8]
 8002842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002846:	9302      	str	r3, [sp, #8]
 8002848:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800284a:	9301      	str	r3, [sp, #4]
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	4603      	mov	r3, r0
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f001 fb74 	bl	8003f40 <HAL_I2C_Mem_Read>
 8002858:	4603      	mov	r3, r0
 800285a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800285c:	7dfb      	ldrb	r3, [r7, #23]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d004      	beq.n	800286c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002862:	7afb      	ldrb	r3, [r7, #11]
 8002864:	4619      	mov	r1, r3
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 f832 	bl	80028d0 <I2Cx_Error>
  }
  return status;
 800286c:	7dfb      	ldrb	r3, [r7, #23]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b08a      	sub	sp, #40	; 0x28
 800287a:	af04      	add	r7, sp, #16
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	4608      	mov	r0, r1
 8002880:	4611      	mov	r1, r2
 8002882:	461a      	mov	r2, r3
 8002884:	4603      	mov	r3, r0
 8002886:	72fb      	strb	r3, [r7, #11]
 8002888:	460b      	mov	r3, r1
 800288a:	813b      	strh	r3, [r7, #8]
 800288c:	4613      	mov	r3, r2
 800288e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002894:	7afb      	ldrb	r3, [r7, #11]
 8002896:	b299      	uxth	r1, r3
 8002898:	88f8      	ldrh	r0, [r7, #6]
 800289a:	893a      	ldrh	r2, [r7, #8]
 800289c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028a0:	9302      	str	r3, [sp, #8]
 80028a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028a4:	9301      	str	r3, [sp, #4]
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	4603      	mov	r3, r0
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f001 fa33 	bl	8003d18 <HAL_I2C_Mem_Write>
 80028b2:	4603      	mov	r3, r0
 80028b4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80028b6:	7dfb      	ldrb	r3, [r7, #23]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d004      	beq.n	80028c6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80028bc:	7afb      	ldrb	r3, [r7, #11]
 80028be:	4619      	mov	r1, r3
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 f805 	bl	80028d0 <I2Cx_Error>
  }
  return status;
 80028c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f001 f9eb 	bl	8003cb8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff ff6c 	bl	80027c0 <I2Cx_Init>
}
 80028e8:	bf00      	nop
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80028f4:	4802      	ldr	r0, [pc, #8]	; (8002900 <SENSOR_IO_Init+0x10>)
 80028f6:	f7ff ff63 	bl	80027c0 <I2Cx_Init>
}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000670 	.word	0x20000670

08002904 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af02      	add	r7, sp, #8
 800290a:	4603      	mov	r3, r0
 800290c:	71fb      	strb	r3, [r7, #7]
 800290e:	460b      	mov	r3, r1
 8002910:	71bb      	strb	r3, [r7, #6]
 8002912:	4613      	mov	r3, r2
 8002914:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002916:	79bb      	ldrb	r3, [r7, #6]
 8002918:	b29a      	uxth	r2, r3
 800291a:	79f9      	ldrb	r1, [r7, #7]
 800291c:	2301      	movs	r3, #1
 800291e:	9301      	str	r3, [sp, #4]
 8002920:	1d7b      	adds	r3, r7, #5
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	2301      	movs	r3, #1
 8002926:	4803      	ldr	r0, [pc, #12]	; (8002934 <SENSOR_IO_Write+0x30>)
 8002928:	f7ff ffa5 	bl	8002876 <I2Cx_WriteMultiple>
}
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	20000670 	.word	0x20000670

08002938 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af02      	add	r7, sp, #8
 800293e:	4603      	mov	r3, r0
 8002940:	460a      	mov	r2, r1
 8002942:	71fb      	strb	r3, [r7, #7]
 8002944:	4613      	mov	r3, r2
 8002946:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002948:	2300      	movs	r3, #0
 800294a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800294c:	79bb      	ldrb	r3, [r7, #6]
 800294e:	b29a      	uxth	r2, r3
 8002950:	79f9      	ldrb	r1, [r7, #7]
 8002952:	2301      	movs	r3, #1
 8002954:	9301      	str	r3, [sp, #4]
 8002956:	f107 030f 	add.w	r3, r7, #15
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	2301      	movs	r3, #1
 800295e:	4804      	ldr	r0, [pc, #16]	; (8002970 <SENSOR_IO_Read+0x38>)
 8002960:	f7ff ff5c 	bl	800281c <I2Cx_ReadMultiple>

  return read_value;
 8002964:	7bfb      	ldrb	r3, [r7, #15]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000670 	.word	0x20000670

08002974 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af02      	add	r7, sp, #8
 800297a:	603a      	str	r2, [r7, #0]
 800297c:	461a      	mov	r2, r3
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
 8002982:	460b      	mov	r3, r1
 8002984:	71bb      	strb	r3, [r7, #6]
 8002986:	4613      	mov	r3, r2
 8002988:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800298a:	79bb      	ldrb	r3, [r7, #6]
 800298c:	b29a      	uxth	r2, r3
 800298e:	79f9      	ldrb	r1, [r7, #7]
 8002990:	88bb      	ldrh	r3, [r7, #4]
 8002992:	9301      	str	r3, [sp, #4]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	2301      	movs	r3, #1
 800299a:	4804      	ldr	r0, [pc, #16]	; (80029ac <SENSOR_IO_ReadMultiple+0x38>)
 800299c:	f7ff ff3e 	bl	800281c <I2Cx_ReadMultiple>
 80029a0:	4603      	mov	r3, r0
 80029a2:	b29b      	uxth	r3, r3
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20000670 	.word	0x20000670

080029b0 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80029ba:	2300      	movs	r3, #0
 80029bc:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80029be:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <BSP_ACCELERO_Init+0x74>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	4798      	blx	r3
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b6a      	cmp	r3, #106	; 0x6a
 80029c8:	d002      	beq.n	80029d0 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	73fb      	strb	r3, [r7, #15]
 80029ce:	e024      	b.n	8002a1a <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80029d0:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <BSP_ACCELERO_Init+0x78>)
 80029d2:	4a14      	ldr	r2, [pc, #80]	; (8002a24 <BSP_ACCELERO_Init+0x74>)
 80029d4:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80029d6:	2330      	movs	r3, #48	; 0x30
 80029d8:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80029de:	2300      	movs	r3, #0
 80029e0:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80029e2:	2340      	movs	r3, #64	; 0x40
 80029e4:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80029ee:	797a      	ldrb	r2, [r7, #5]
 80029f0:	7abb      	ldrb	r3, [r7, #10]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80029f8:	7a3b      	ldrb	r3, [r7, #8]
 80029fa:	f043 0304 	orr.w	r3, r3, #4
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	021b      	lsls	r3, r3, #8
 8002a02:	b21a      	sxth	r2, r3
 8002a04:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	b21b      	sxth	r3, r3
 8002a0c:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002a0e:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <BSP_ACCELERO_Init+0x78>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	89ba      	ldrh	r2, [r7, #12]
 8002a16:	4610      	mov	r0, r2
 8002a18:	4798      	blx	r3
  }  

  return ret;
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20000044 	.word	0x20000044
 8002a28:	200006bc 	.word	0x200006bc

08002a2c <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8002a34:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d009      	beq.n	8002a50 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d004      	beq.n	8002a50 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8002a46:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	4798      	blx	r3
    }
  }
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	200006bc 	.word	0x200006bc

08002a5c <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002a66:	2300      	movs	r3, #0
 8002a68:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002a6a:	4b1b      	ldr	r3, [pc, #108]	; (8002ad8 <BSP_GYRO_Init+0x7c>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	4798      	blx	r3
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b6a      	cmp	r3, #106	; 0x6a
 8002a74:	d002      	beq.n	8002a7c <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	73fb      	strb	r3, [r7, #15]
 8002a7a:	e028      	b.n	8002ace <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8002a7c:	4b17      	ldr	r3, [pc, #92]	; (8002adc <BSP_GYRO_Init+0x80>)
 8002a7e:	4a16      	ldr	r2, [pc, #88]	; (8002ad8 <BSP_GYRO_Init+0x7c>)
 8002a80:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8002a86:	2330      	movs	r3, #48	; 0x30
 8002a88:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002a92:	2340      	movs	r3, #64	; 0x40
 8002a94:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8002a9a:	230c      	movs	r3, #12
 8002a9c:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8002a9e:	7aba      	ldrb	r2, [r7, #10]
 8002aa0:	797b      	ldrb	r3, [r7, #5]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002aa8:	7a3b      	ldrb	r3, [r7, #8]
 8002aaa:	f043 0304 	orr.w	r3, r3, #4
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	021b      	lsls	r3, r3, #8
 8002ab2:	b21a      	sxth	r2, r3
 8002ab4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	b21b      	sxth	r3, r3
 8002abc:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8002abe:	4b07      	ldr	r3, [pc, #28]	; (8002adc <BSP_GYRO_Init+0x80>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	89ba      	ldrh	r2, [r7, #12]
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	4798      	blx	r3
    
    ret = GYRO_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8002ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20000078 	.word	0x20000078
 8002adc:	200006c0 	.word	0x200006c0

08002ae0 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8002ae8:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <BSP_GYRO_GetXYZ+0x2c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d009      	beq.n	8002b04 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <BSP_GYRO_GetXYZ+0x2c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d004      	beq.n	8002b04 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8002afa:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <BSP_GYRO_GetXYZ+0x2c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	4798      	blx	r3
    }
  }
}
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	200006c0 	.word	0x200006c0

08002b10 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8002b1a:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <BSP_MAGNETO_Init+0x50>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	4798      	blx	r3
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b3d      	cmp	r3, #61	; 0x3d
 8002b24:	d002      	beq.n	8002b2c <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	71fb      	strb	r3, [r7, #7]
 8002b2a:	e013      	b.n	8002b54 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8002b2c:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <BSP_MAGNETO_Init+0x54>)
 8002b2e:	4a0c      	ldr	r2, [pc, #48]	; (8002b60 <BSP_MAGNETO_Init+0x50>)
 8002b30:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8002b32:	2358      	movs	r3, #88	; 0x58
 8002b34:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8002b36:	2300      	movs	r3, #0
 8002b38:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8002b3e:	2308      	movs	r3, #8
 8002b40:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8002b42:	2340      	movs	r3, #64	; 0x40
 8002b44:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8002b46:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <BSP_MAGNETO_Init+0x54>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	463a      	mov	r2, r7
 8002b4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b52:	4798      	blx	r3
  } 

  return ret;  
 8002b54:	79fb      	ldrb	r3, [r7, #7]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000010 	.word	0x20000010
 8002b64:	200006c4 	.word	0x200006c4

08002b68 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8002b70:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <BSP_MAGNETO_GetXYZ+0x2c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d009      	beq.n	8002b8c <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <BSP_MAGNETO_GetXYZ+0x2c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d004      	beq.n	8002b8c <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8002b82:	4b04      	ldr	r3, [pc, #16]	; (8002b94 <BSP_MAGNETO_GetXYZ+0x2c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	4798      	blx	r3
    }
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	200006c4 	.word	0x200006c4

08002b98 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	463b      	mov	r3, r7
 8002ba0:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8002ba4:	783b      	ldrb	r3, [r7, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	2120      	movs	r1, #32
 8002baa:	203c      	movs	r0, #60	; 0x3c
 8002bac:	f7ff feaa 	bl	8002904 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8002bb0:	787b      	ldrb	r3, [r7, #1]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	2121      	movs	r1, #33	; 0x21
 8002bb6:	203c      	movs	r0, #60	; 0x3c
 8002bb8:	f7ff fea4 	bl	8002904 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8002bbc:	78bb      	ldrb	r3, [r7, #2]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	2122      	movs	r1, #34	; 0x22
 8002bc2:	203c      	movs	r0, #60	; 0x3c
 8002bc4:	f7ff fe9e 	bl	8002904 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	2123      	movs	r1, #35	; 0x23
 8002bce:	203c      	movs	r0, #60	; 0x3c
 8002bd0:	f7ff fe98 	bl	8002904 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8002bd4:	793b      	ldrb	r3, [r7, #4]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	2124      	movs	r1, #36	; 0x24
 8002bda:	203c      	movs	r0, #60	; 0x3c
 8002bdc:	f7ff fe92 	bl	8002904 <SENSOR_IO_Write>
}
 8002be0:	bf00      	nop
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002bf2:	2122      	movs	r1, #34	; 0x22
 8002bf4:	203c      	movs	r0, #60	; 0x3c
 8002bf6:	f7ff fe9f 	bl	8002938 <SENSOR_IO_Read>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	f023 0303 	bic.w	r3, r3, #3
 8002c04:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	f043 0303 	orr.w	r3, r3, #3
 8002c0c:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	461a      	mov	r2, r3
 8002c12:	2122      	movs	r1, #34	; 0x22
 8002c14:	203c      	movs	r0, #60	; 0x3c
 8002c16:	f7ff fe75 	bl	8002904 <SENSOR_IO_Write>
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002c26:	f7ff fe63 	bl	80028f0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8002c2a:	210f      	movs	r1, #15
 8002c2c:	203c      	movs	r0, #60	; 0x3c
 8002c2e:	f7ff fe83 	bl	8002938 <SENSOR_IO_Read>
 8002c32:	4603      	mov	r3, r0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002c46:	2122      	movs	r1, #34	; 0x22
 8002c48:	203c      	movs	r0, #60	; 0x3c
 8002c4a:	f7ff fe75 	bl	8002938 <SENSOR_IO_Read>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	f023 0320 	bic.w	r3, r3, #32
 8002c58:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002c5a:	88fb      	ldrh	r3, [r7, #6]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	f043 0320 	orr.w	r3, r3, #32
 8002c66:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	2122      	movs	r1, #34	; 0x22
 8002c6e:	203c      	movs	r0, #60	; 0x3c
 8002c70:	f7ff fe48 	bl	8002904 <SENSOR_IO_Write>
}
 8002c74:	bf00      	nop
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b088      	sub	sp, #32
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8002c92:	2121      	movs	r1, #33	; 0x21
 8002c94:	203c      	movs	r0, #60	; 0x3c
 8002c96:	f7ff fe4f 	bl	8002938 <SENSOR_IO_Read>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8002c9e:	f107 0208 	add.w	r2, r7, #8
 8002ca2:	2306      	movs	r3, #6
 8002ca4:	21a8      	movs	r1, #168	; 0xa8
 8002ca6:	203c      	movs	r0, #60	; 0x3c
 8002ca8:	f7ff fe64 	bl	8002974 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002cac:	2300      	movs	r3, #0
 8002cae:	77fb      	strb	r3, [r7, #31]
 8002cb0:	e01c      	b.n	8002cec <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002cb2:	7ffb      	ldrb	r3, [r7, #31]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	3320      	adds	r3, #32
 8002cba:	443b      	add	r3, r7
 8002cbc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	021b      	lsls	r3, r3, #8
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	7ffb      	ldrb	r3, [r7, #31]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	3320      	adds	r3, #32
 8002ccc:	443b      	add	r3, r7
 8002cce:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	7ffb      	ldrb	r3, [r7, #31]
 8002cda:	b212      	sxth	r2, r2
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	3320      	adds	r3, #32
 8002ce0:	443b      	add	r3, r7
 8002ce2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002ce6:	7ffb      	ldrb	r3, [r7, #31]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	77fb      	strb	r3, [r7, #31]
 8002cec:	7ffb      	ldrb	r3, [r7, #31]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d9df      	bls.n	8002cb2 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8002cf2:	7dfb      	ldrb	r3, [r7, #23]
 8002cf4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002cf8:	2b60      	cmp	r3, #96	; 0x60
 8002cfa:	d013      	beq.n	8002d24 <LIS3MDL_MagReadXYZ+0xa8>
 8002cfc:	2b60      	cmp	r3, #96	; 0x60
 8002cfe:	dc14      	bgt.n	8002d2a <LIS3MDL_MagReadXYZ+0xae>
 8002d00:	2b40      	cmp	r3, #64	; 0x40
 8002d02:	d00c      	beq.n	8002d1e <LIS3MDL_MagReadXYZ+0xa2>
 8002d04:	2b40      	cmp	r3, #64	; 0x40
 8002d06:	dc10      	bgt.n	8002d2a <LIS3MDL_MagReadXYZ+0xae>
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d002      	beq.n	8002d12 <LIS3MDL_MagReadXYZ+0x96>
 8002d0c:	2b20      	cmp	r3, #32
 8002d0e:	d003      	beq.n	8002d18 <LIS3MDL_MagReadXYZ+0x9c>
 8002d10:	e00b      	b.n	8002d2a <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8002d12:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <LIS3MDL_MagReadXYZ+0xfc>)
 8002d14:	61bb      	str	r3, [r7, #24]
    break;
 8002d16:	e008      	b.n	8002d2a <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8002d18:	4b18      	ldr	r3, [pc, #96]	; (8002d7c <LIS3MDL_MagReadXYZ+0x100>)
 8002d1a:	61bb      	str	r3, [r7, #24]
    break;
 8002d1c:	e005      	b.n	8002d2a <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8002d1e:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <LIS3MDL_MagReadXYZ+0x104>)
 8002d20:	61bb      	str	r3, [r7, #24]
    break;
 8002d22:	e002      	b.n	8002d2a <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8002d24:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <LIS3MDL_MagReadXYZ+0x108>)
 8002d26:	61bb      	str	r3, [r7, #24]
    break;    
 8002d28:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	77fb      	strb	r3, [r7, #31]
 8002d2e:	e01a      	b.n	8002d66 <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002d30:	7ffb      	ldrb	r3, [r7, #31]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	3320      	adds	r3, #32
 8002d36:	443b      	add	r3, r7
 8002d38:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002d3c:	ee07 3a90 	vmov	s15, r3
 8002d40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d44:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d4c:	7ffb      	ldrb	r3, [r7, #31]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	4413      	add	r3, r2
 8002d54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d58:	ee17 2a90 	vmov	r2, s15
 8002d5c:	b212      	sxth	r2, r2
 8002d5e:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002d60:	7ffb      	ldrb	r3, [r7, #31]
 8002d62:	3301      	adds	r3, #1
 8002d64:	77fb      	strb	r3, [r7, #31]
 8002d66:	7ffb      	ldrb	r3, [r7, #31]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d9e1      	bls.n	8002d30 <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 8002d6c:	bf00      	nop
 8002d6e:	bf00      	nop
 8002d70:	3720      	adds	r7, #32
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	3e0f5c29 	.word	0x3e0f5c29
 8002d7c:	3e947ae1 	.word	0x3e947ae1
 8002d80:	3edc28f6 	.word	0x3edc28f6
 8002d84:	3f147ae1 	.word	0x3f147ae1

08002d88 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002d92:	2300      	movs	r3, #0
 8002d94:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002d96:	2110      	movs	r1, #16
 8002d98:	20d4      	movs	r0, #212	; 0xd4
 8002d9a:	f7ff fdcd 	bl	8002938 <SENSOR_IO_Read>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002da2:	88fb      	ldrh	r3, [r7, #6]
 8002da4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002da6:	7bbb      	ldrb	r3, [r7, #14]
 8002da8:	f003 0303 	and.w	r3, r3, #3
 8002dac:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002dae:	7bba      	ldrb	r2, [r7, #14]
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002db6:	7bbb      	ldrb	r3, [r7, #14]
 8002db8:	461a      	mov	r2, r3
 8002dba:	2110      	movs	r1, #16
 8002dbc:	20d4      	movs	r0, #212	; 0xd4
 8002dbe:	f7ff fda1 	bl	8002904 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002dc2:	2112      	movs	r1, #18
 8002dc4:	20d4      	movs	r0, #212	; 0xd4
 8002dc6:	f7ff fdb7 	bl	8002938 <SENSOR_IO_Read>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	0a1b      	lsrs	r3, r3, #8
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002dd6:	7bbb      	ldrb	r3, [r7, #14]
 8002dd8:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8002ddc:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002dde:	7bba      	ldrb	r2, [r7, #14]
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002de6:	7bbb      	ldrb	r3, [r7, #14]
 8002de8:	461a      	mov	r2, r3
 8002dea:	2112      	movs	r1, #18
 8002dec:	20d4      	movs	r0, #212	; 0xd4
 8002dee:	f7ff fd89 	bl	8002904 <SENSOR_IO_Write>
}
 8002df2:	bf00      	nop
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002e00:	2300      	movs	r3, #0
 8002e02:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002e04:	2110      	movs	r1, #16
 8002e06:	20d4      	movs	r0, #212	; 0xd4
 8002e08:	f7ff fd96 	bl	8002938 <SENSOR_IO_Read>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	2110      	movs	r1, #16
 8002e1e:	20d4      	movs	r0, #212	; 0xd4
 8002e20:	f7ff fd70 	bl	8002904 <SENSOR_IO_Write>
}
 8002e24:	bf00      	nop
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8002e30:	f7ff fd5e 	bl	80028f0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8002e34:	210f      	movs	r1, #15
 8002e36:	20d4      	movs	r0, #212	; 0xd4
 8002e38:	f7ff fd7e 	bl	8002938 <SENSOR_IO_Read>
 8002e3c:	4603      	mov	r3, r0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b084      	sub	sp, #16
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	4603      	mov	r3, r0
 8002e4a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8002e50:	2115      	movs	r1, #21
 8002e52:	20d4      	movs	r0, #212	; 0xd4
 8002e54:	f7ff fd70 	bl	8002938 <SENSOR_IO_Read>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	f023 0310 	bic.w	r3, r3, #16
 8002e62:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002e64:	88fb      	ldrh	r3, [r7, #6]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	f043 0310 	orr.w	r3, r3, #16
 8002e70:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	461a      	mov	r2, r3
 8002e76:	2115      	movs	r1, #21
 8002e78:	20d4      	movs	r0, #212	; 0xd4
 8002e7a:	f7ff fd43 	bl	8002904 <SENSOR_IO_Write>
}
 8002e7e:	bf00      	nop
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002e9e:	2110      	movs	r1, #16
 8002ea0:	20d4      	movs	r0, #212	; 0xd4
 8002ea2:	f7ff fd49 	bl	8002938 <SENSOR_IO_Read>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002eaa:	f107 0208 	add.w	r2, r7, #8
 8002eae:	2306      	movs	r3, #6
 8002eb0:	2128      	movs	r1, #40	; 0x28
 8002eb2:	20d4      	movs	r0, #212	; 0xd4
 8002eb4:	f7ff fd5e 	bl	8002974 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002eb8:	2300      	movs	r3, #0
 8002eba:	77fb      	strb	r3, [r7, #31]
 8002ebc:	e01c      	b.n	8002ef8 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002ebe:	7ffb      	ldrb	r3, [r7, #31]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	3320      	adds	r3, #32
 8002ec6:	443b      	add	r3, r7
 8002ec8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	7ffb      	ldrb	r3, [r7, #31]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	3320      	adds	r3, #32
 8002ed8:	443b      	add	r3, r7
 8002eda:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	7ffb      	ldrb	r3, [r7, #31]
 8002ee6:	b212      	sxth	r2, r2
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	3320      	adds	r3, #32
 8002eec:	443b      	add	r3, r7
 8002eee:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002ef2:	7ffb      	ldrb	r3, [r7, #31]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	77fb      	strb	r3, [r7, #31]
 8002ef8:	7ffb      	ldrb	r3, [r7, #31]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d9df      	bls.n	8002ebe <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
 8002f00:	f003 030c 	and.w	r3, r3, #12
 8002f04:	2b0c      	cmp	r3, #12
 8002f06:	d829      	bhi.n	8002f5c <LSM6DSL_AccReadXYZ+0xd4>
 8002f08:	a201      	add	r2, pc, #4	; (adr r2, 8002f10 <LSM6DSL_AccReadXYZ+0x88>)
 8002f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0e:	bf00      	nop
 8002f10:	08002f45 	.word	0x08002f45
 8002f14:	08002f5d 	.word	0x08002f5d
 8002f18:	08002f5d 	.word	0x08002f5d
 8002f1c:	08002f5d 	.word	0x08002f5d
 8002f20:	08002f57 	.word	0x08002f57
 8002f24:	08002f5d 	.word	0x08002f5d
 8002f28:	08002f5d 	.word	0x08002f5d
 8002f2c:	08002f5d 	.word	0x08002f5d
 8002f30:	08002f4b 	.word	0x08002f4b
 8002f34:	08002f5d 	.word	0x08002f5d
 8002f38:	08002f5d 	.word	0x08002f5d
 8002f3c:	08002f5d 	.word	0x08002f5d
 8002f40:	08002f51 	.word	0x08002f51
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002f44:	4b18      	ldr	r3, [pc, #96]	; (8002fa8 <LSM6DSL_AccReadXYZ+0x120>)
 8002f46:	61bb      	str	r3, [r7, #24]
    break;
 8002f48:	e008      	b.n	8002f5c <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8002f4a:	4b18      	ldr	r3, [pc, #96]	; (8002fac <LSM6DSL_AccReadXYZ+0x124>)
 8002f4c:	61bb      	str	r3, [r7, #24]
    break;
 8002f4e:	e005      	b.n	8002f5c <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8002f50:	4b17      	ldr	r3, [pc, #92]	; (8002fb0 <LSM6DSL_AccReadXYZ+0x128>)
 8002f52:	61bb      	str	r3, [r7, #24]
    break;
 8002f54:	e002      	b.n	8002f5c <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8002f56:	4b17      	ldr	r3, [pc, #92]	; (8002fb4 <LSM6DSL_AccReadXYZ+0x12c>)
 8002f58:	61bb      	str	r3, [r7, #24]
    break;    
 8002f5a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	77fb      	strb	r3, [r7, #31]
 8002f60:	e01a      	b.n	8002f98 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002f62:	7ffb      	ldrb	r3, [r7, #31]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	3320      	adds	r3, #32
 8002f68:	443b      	add	r3, r7
 8002f6a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002f6e:	ee07 3a90 	vmov	s15, r3
 8002f72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f76:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f7e:	7ffb      	ldrb	r3, [r7, #31]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	4413      	add	r3, r2
 8002f86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f8a:	ee17 2a90 	vmov	r2, s15
 8002f8e:	b212      	sxth	r2, r2
 8002f90:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002f92:	7ffb      	ldrb	r3, [r7, #31]
 8002f94:	3301      	adds	r3, #1
 8002f96:	77fb      	strb	r3, [r7, #31]
 8002f98:	7ffb      	ldrb	r3, [r7, #31]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d9e1      	bls.n	8002f62 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8002f9e:	bf00      	nop
 8002fa0:	bf00      	nop
 8002fa2:	3720      	adds	r7, #32
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	3d79db23 	.word	0x3d79db23
 8002fac:	3df9db23 	.word	0x3df9db23
 8002fb0:	3e79db23 	.word	0x3e79db23
 8002fb4:	3ef9db23 	.word	0x3ef9db23

08002fb8 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002fc6:	2111      	movs	r1, #17
 8002fc8:	20d4      	movs	r0, #212	; 0xd4
 8002fca:	f7ff fcb5 	bl	8002938 <SENSOR_IO_Read>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002fd6:	7bbb      	ldrb	r3, [r7, #14]
 8002fd8:	f003 0303 	and.w	r3, r3, #3
 8002fdc:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002fde:	7bba      	ldrb	r2, [r7, #14]
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8002fe6:	7bbb      	ldrb	r3, [r7, #14]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	2111      	movs	r1, #17
 8002fec:	20d4      	movs	r0, #212	; 0xd4
 8002fee:	f7ff fc89 	bl	8002904 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002ff2:	2112      	movs	r1, #18
 8002ff4:	20d4      	movs	r0, #212	; 0xd4
 8002ff6:	f7ff fc9f 	bl	8002938 <SENSOR_IO_Read>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	0a1b      	lsrs	r3, r3, #8
 8003002:	b29b      	uxth	r3, r3
 8003004:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8003006:	7bbb      	ldrb	r3, [r7, #14]
 8003008:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800300c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800300e:	7bba      	ldrb	r2, [r7, #14]
 8003010:	7bfb      	ldrb	r3, [r7, #15]
 8003012:	4313      	orrs	r3, r2
 8003014:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8003016:	7bbb      	ldrb	r3, [r7, #14]
 8003018:	461a      	mov	r2, r3
 800301a:	2112      	movs	r1, #18
 800301c:	20d4      	movs	r0, #212	; 0xd4
 800301e:	f7ff fc71 	bl	8002904 <SENSOR_IO_Write>
}
 8003022:	bf00      	nop
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003030:	2300      	movs	r3, #0
 8003032:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8003034:	2111      	movs	r1, #17
 8003036:	20d4      	movs	r0, #212	; 0xd4
 8003038:	f7ff fc7e 	bl	8002938 <SENSOR_IO_Read>
 800303c:	4603      	mov	r3, r0
 800303e:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	461a      	mov	r2, r3
 800304c:	2111      	movs	r1, #17
 800304e:	20d4      	movs	r0, #212	; 0xd4
 8003050:	f7ff fc58 	bl	8002904 <SENSOR_IO_Write>
}
 8003054:	bf00      	nop
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8003060:	f7ff fc46 	bl	80028f0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8003064:	210f      	movs	r1, #15
 8003066:	20d4      	movs	r0, #212	; 0xd4
 8003068:	f7ff fc66 	bl	8002938 <SENSOR_IO_Read>
 800306c:	4603      	mov	r3, r0
}
 800306e:	4618      	mov	r0, r3
 8003070:	bd80      	pop	{r7, pc}

08003072 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8003072:	b580      	push	{r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af00      	add	r7, sp, #0
 8003078:	4603      	mov	r3, r0
 800307a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800307c:	2300      	movs	r3, #0
 800307e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8003080:	2116      	movs	r1, #22
 8003082:	20d4      	movs	r0, #212	; 0xd4
 8003084:	f7ff fc58 	bl	8002938 <SENSOR_IO_Read>
 8003088:	4603      	mov	r3, r0
 800308a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003092:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 800309a:	7bfb      	ldrb	r3, [r7, #15]
 800309c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030a0:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	461a      	mov	r2, r3
 80030a6:	2116      	movs	r1, #22
 80030a8:	20d4      	movs	r0, #212	; 0xd4
 80030aa:	f7ff fc2b 	bl	8002904 <SENSOR_IO_Write>
}
 80030ae:	bf00      	nop
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b088      	sub	sp, #32
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 80030c0:	2300      	movs	r3, #0
 80030c2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80030ce:	2111      	movs	r1, #17
 80030d0:	20d4      	movs	r0, #212	; 0xd4
 80030d2:	f7ff fc31 	bl	8002938 <SENSOR_IO_Read>
 80030d6:	4603      	mov	r3, r0
 80030d8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 80030da:	f107 0208 	add.w	r2, r7, #8
 80030de:	2306      	movs	r3, #6
 80030e0:	2122      	movs	r1, #34	; 0x22
 80030e2:	20d4      	movs	r0, #212	; 0xd4
 80030e4:	f7ff fc46 	bl	8002974 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80030e8:	2300      	movs	r3, #0
 80030ea:	77fb      	strb	r3, [r7, #31]
 80030ec:	e01c      	b.n	8003128 <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80030ee:	7ffb      	ldrb	r3, [r7, #31]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	3301      	adds	r3, #1
 80030f4:	3320      	adds	r3, #32
 80030f6:	443b      	add	r3, r7
 80030f8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	021b      	lsls	r3, r3, #8
 8003100:	b29a      	uxth	r2, r3
 8003102:	7ffb      	ldrb	r3, [r7, #31]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	3320      	adds	r3, #32
 8003108:	443b      	add	r3, r7
 800310a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800310e:	b29b      	uxth	r3, r3
 8003110:	4413      	add	r3, r2
 8003112:	b29a      	uxth	r2, r3
 8003114:	7ffb      	ldrb	r3, [r7, #31]
 8003116:	b212      	sxth	r2, r2
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	3320      	adds	r3, #32
 800311c:	443b      	add	r3, r7
 800311e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003122:	7ffb      	ldrb	r3, [r7, #31]
 8003124:	3301      	adds	r3, #1
 8003126:	77fb      	strb	r3, [r7, #31]
 8003128:	7ffb      	ldrb	r3, [r7, #31]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d9df      	bls.n	80030ee <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 800312e:	7dfb      	ldrb	r3, [r7, #23]
 8003130:	f003 030c 	and.w	r3, r3, #12
 8003134:	2b0c      	cmp	r3, #12
 8003136:	d829      	bhi.n	800318c <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8003138:	a201      	add	r2, pc, #4	; (adr r2, 8003140 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 800313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313e:	bf00      	nop
 8003140:	08003175 	.word	0x08003175
 8003144:	0800318d 	.word	0x0800318d
 8003148:	0800318d 	.word	0x0800318d
 800314c:	0800318d 	.word	0x0800318d
 8003150:	0800317b 	.word	0x0800317b
 8003154:	0800318d 	.word	0x0800318d
 8003158:	0800318d 	.word	0x0800318d
 800315c:	0800318d 	.word	0x0800318d
 8003160:	08003181 	.word	0x08003181
 8003164:	0800318d 	.word	0x0800318d
 8003168:	0800318d 	.word	0x0800318d
 800316c:	0800318d 	.word	0x0800318d
 8003170:	08003187 	.word	0x08003187
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8003174:	4b16      	ldr	r3, [pc, #88]	; (80031d0 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8003176:	61bb      	str	r3, [r7, #24]
    break;
 8003178:	e008      	b.n	800318c <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 800317a:	4b16      	ldr	r3, [pc, #88]	; (80031d4 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 800317c:	61bb      	str	r3, [r7, #24]
    break;
 800317e:	e005      	b.n	800318c <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8003180:	4b15      	ldr	r3, [pc, #84]	; (80031d8 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8003182:	61bb      	str	r3, [r7, #24]
    break;
 8003184:	e002      	b.n	800318c <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8003186:	4b15      	ldr	r3, [pc, #84]	; (80031dc <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8003188:	61bb      	str	r3, [r7, #24]
    break;    
 800318a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800318c:	2300      	movs	r3, #0
 800318e:	77fb      	strb	r3, [r7, #31]
 8003190:	e016      	b.n	80031c0 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8003192:	7ffb      	ldrb	r3, [r7, #31]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	3320      	adds	r3, #32
 8003198:	443b      	add	r3, r7
 800319a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800319e:	ee07 3a90 	vmov	s15, r3
 80031a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031a6:	7ffb      	ldrb	r3, [r7, #31]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	4413      	add	r3, r2
 80031ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80031b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b6:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80031ba:	7ffb      	ldrb	r3, [r7, #31]
 80031bc:	3301      	adds	r3, #1
 80031be:	77fb      	strb	r3, [r7, #31]
 80031c0:	7ffb      	ldrb	r3, [r7, #31]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d9e5      	bls.n	8003192 <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 80031c6:	bf00      	nop
 80031c8:	bf00      	nop
 80031ca:	3720      	adds	r7, #32
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	410c0000 	.word	0x410c0000
 80031d4:	418c0000 	.word	0x418c0000
 80031d8:	420c0000 	.word	0x420c0000
 80031dc:	428c0000 	.word	0x428c0000

080031e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031ea:	2003      	movs	r0, #3
 80031ec:	f000 f93c 	bl	8003468 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031f0:	2000      	movs	r0, #0
 80031f2:	f000 f80d 	bl	8003210 <HAL_InitTick>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	71fb      	strb	r3, [r7, #7]
 8003200:	e001      	b.n	8003206 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003202:	f7ff f83d 	bl	8002280 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003206:	79fb      	ldrb	r3, [r7, #7]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800321c:	4b17      	ldr	r3, [pc, #92]	; (800327c <HAL_InitTick+0x6c>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d023      	beq.n	800326c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003224:	4b16      	ldr	r3, [pc, #88]	; (8003280 <HAL_InitTick+0x70>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4b14      	ldr	r3, [pc, #80]	; (800327c <HAL_InitTick+0x6c>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	4619      	mov	r1, r3
 800322e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003232:	fbb3 f3f1 	udiv	r3, r3, r1
 8003236:	fbb2 f3f3 	udiv	r3, r2, r3
 800323a:	4618      	mov	r0, r3
 800323c:	f000 f949 	bl	80034d2 <HAL_SYSTICK_Config>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10f      	bne.n	8003266 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b0f      	cmp	r3, #15
 800324a:	d809      	bhi.n	8003260 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800324c:	2200      	movs	r2, #0
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	f04f 30ff 	mov.w	r0, #4294967295
 8003254:	f000 f913 	bl	800347e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003258:	4a0a      	ldr	r2, [pc, #40]	; (8003284 <HAL_InitTick+0x74>)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	e007      	b.n	8003270 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
 8003264:	e004      	b.n	8003270 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	73fb      	strb	r3, [r7, #15]
 800326a:	e001      	b.n	8003270 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003270:	7bfb      	ldrb	r3, [r7, #15]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	200000b0 	.word	0x200000b0
 8003280:	2000000c 	.word	0x2000000c
 8003284:	200000ac 	.word	0x200000ac

08003288 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800328c:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_IncTick+0x20>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	461a      	mov	r2, r3
 8003292:	4b06      	ldr	r3, [pc, #24]	; (80032ac <HAL_IncTick+0x24>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4413      	add	r3, r2
 8003298:	4a04      	ldr	r2, [pc, #16]	; (80032ac <HAL_IncTick+0x24>)
 800329a:	6013      	str	r3, [r2, #0]
}
 800329c:	bf00      	nop
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	200000b0 	.word	0x200000b0
 80032ac:	200006c8 	.word	0x200006c8

080032b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  return uwTick;
 80032b4:	4b03      	ldr	r3, [pc, #12]	; (80032c4 <HAL_GetTick+0x14>)
 80032b6:	681b      	ldr	r3, [r3, #0]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	200006c8 	.word	0x200006c8

080032c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032d8:	4b0c      	ldr	r3, [pc, #48]	; (800330c <__NVIC_SetPriorityGrouping+0x44>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032e4:	4013      	ands	r3, r2
 80032e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032fa:	4a04      	ldr	r2, [pc, #16]	; (800330c <__NVIC_SetPriorityGrouping+0x44>)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	60d3      	str	r3, [r2, #12]
}
 8003300:	bf00      	nop
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	e000ed00 	.word	0xe000ed00

08003310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003314:	4b04      	ldr	r3, [pc, #16]	; (8003328 <__NVIC_GetPriorityGrouping+0x18>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	0a1b      	lsrs	r3, r3, #8
 800331a:	f003 0307 	and.w	r3, r3, #7
}
 800331e:	4618      	mov	r0, r3
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	e000ed00 	.word	0xe000ed00

0800332c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333a:	2b00      	cmp	r3, #0
 800333c:	db0b      	blt.n	8003356 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800333e:	79fb      	ldrb	r3, [r7, #7]
 8003340:	f003 021f 	and.w	r2, r3, #31
 8003344:	4907      	ldr	r1, [pc, #28]	; (8003364 <__NVIC_EnableIRQ+0x38>)
 8003346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	2001      	movs	r0, #1
 800334e:	fa00 f202 	lsl.w	r2, r0, r2
 8003352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	e000e100 	.word	0xe000e100

08003368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	6039      	str	r1, [r7, #0]
 8003372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003378:	2b00      	cmp	r3, #0
 800337a:	db0a      	blt.n	8003392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	b2da      	uxtb	r2, r3
 8003380:	490c      	ldr	r1, [pc, #48]	; (80033b4 <__NVIC_SetPriority+0x4c>)
 8003382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003386:	0112      	lsls	r2, r2, #4
 8003388:	b2d2      	uxtb	r2, r2
 800338a:	440b      	add	r3, r1
 800338c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003390:	e00a      	b.n	80033a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	b2da      	uxtb	r2, r3
 8003396:	4908      	ldr	r1, [pc, #32]	; (80033b8 <__NVIC_SetPriority+0x50>)
 8003398:	79fb      	ldrb	r3, [r7, #7]
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	3b04      	subs	r3, #4
 80033a0:	0112      	lsls	r2, r2, #4
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	440b      	add	r3, r1
 80033a6:	761a      	strb	r2, [r3, #24]
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	e000e100 	.word	0xe000e100
 80033b8:	e000ed00 	.word	0xe000ed00

080033bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033bc:	b480      	push	{r7}
 80033be:	b089      	sub	sp, #36	; 0x24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f1c3 0307 	rsb	r3, r3, #7
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	bf28      	it	cs
 80033da:	2304      	movcs	r3, #4
 80033dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	3304      	adds	r3, #4
 80033e2:	2b06      	cmp	r3, #6
 80033e4:	d902      	bls.n	80033ec <NVIC_EncodePriority+0x30>
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	3b03      	subs	r3, #3
 80033ea:	e000      	b.n	80033ee <NVIC_EncodePriority+0x32>
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f0:	f04f 32ff 	mov.w	r2, #4294967295
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43da      	mvns	r2, r3
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	401a      	ands	r2, r3
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003404:	f04f 31ff 	mov.w	r1, #4294967295
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	fa01 f303 	lsl.w	r3, r1, r3
 800340e:	43d9      	mvns	r1, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003414:	4313      	orrs	r3, r2
         );
}
 8003416:	4618      	mov	r0, r3
 8003418:	3724      	adds	r7, #36	; 0x24
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
	...

08003424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3b01      	subs	r3, #1
 8003430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003434:	d301      	bcc.n	800343a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003436:	2301      	movs	r3, #1
 8003438:	e00f      	b.n	800345a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800343a:	4a0a      	ldr	r2, [pc, #40]	; (8003464 <SysTick_Config+0x40>)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3b01      	subs	r3, #1
 8003440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003442:	210f      	movs	r1, #15
 8003444:	f04f 30ff 	mov.w	r0, #4294967295
 8003448:	f7ff ff8e 	bl	8003368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800344c:	4b05      	ldr	r3, [pc, #20]	; (8003464 <SysTick_Config+0x40>)
 800344e:	2200      	movs	r2, #0
 8003450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003452:	4b04      	ldr	r3, [pc, #16]	; (8003464 <SysTick_Config+0x40>)
 8003454:	2207      	movs	r2, #7
 8003456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	e000e010 	.word	0xe000e010

08003468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7ff ff29 	bl	80032c8 <__NVIC_SetPriorityGrouping>
}
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b086      	sub	sp, #24
 8003482:	af00      	add	r7, sp, #0
 8003484:	4603      	mov	r3, r0
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	607a      	str	r2, [r7, #4]
 800348a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003490:	f7ff ff3e 	bl	8003310 <__NVIC_GetPriorityGrouping>
 8003494:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	68b9      	ldr	r1, [r7, #8]
 800349a:	6978      	ldr	r0, [r7, #20]
 800349c:	f7ff ff8e 	bl	80033bc <NVIC_EncodePriority>
 80034a0:	4602      	mov	r2, r0
 80034a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034a6:	4611      	mov	r1, r2
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff ff5d 	bl	8003368 <__NVIC_SetPriority>
}
 80034ae:	bf00      	nop
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	4603      	mov	r3, r0
 80034be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff ff31 	bl	800332c <__NVIC_EnableIRQ>
}
 80034ca:	bf00      	nop
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff ffa2 	bl	8003424 <SysTick_Config>
 80034e0:	4603      	mov	r3, r0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b085      	sub	sp, #20
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034f2:	2300      	movs	r3, #0
 80034f4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d008      	beq.n	8003514 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2204      	movs	r2, #4
 8003506:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e022      	b.n	800355a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 020e 	bic.w	r2, r2, #14
 8003522:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0201 	bic.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003538:	f003 021c 	and.w	r2, r3, #28
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	2101      	movs	r1, #1
 8003542:	fa01 f202 	lsl.w	r2, r1, r2
 8003546:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003558:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800355a:	4618      	mov	r0, r3
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b084      	sub	sp, #16
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d005      	beq.n	800358a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2204      	movs	r2, #4
 8003582:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
 8003588:	e029      	b.n	80035de <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 020e 	bic.w	r2, r2, #14
 8003598:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0201 	bic.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	f003 021c 	and.w	r2, r3, #28
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	2101      	movs	r1, #1
 80035b8:	fa01 f202 	lsl.w	r2, r1, r2
 80035bc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	4798      	blx	r3
    }
  }
  return status;
 80035de:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035f2:	2300      	movs	r3, #0
 80035f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035f6:	e17f      	b.n	80038f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	2101      	movs	r1, #1
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	fa01 f303 	lsl.w	r3, r1, r3
 8003604:	4013      	ands	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 8171 	beq.w	80038f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	2b01      	cmp	r3, #1
 800361a:	d005      	beq.n	8003628 <HAL_GPIO_Init+0x40>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d130      	bne.n	800368a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	2203      	movs	r2, #3
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4013      	ands	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800365e:	2201      	movs	r2, #1
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43db      	mvns	r3, r3
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4013      	ands	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	091b      	lsrs	r3, r3, #4
 8003674:	f003 0201 	and.w	r2, r3, #1
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	2b03      	cmp	r3, #3
 8003694:	d118      	bne.n	80036c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800369c:	2201      	movs	r2, #1
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	43db      	mvns	r3, r3
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	4013      	ands	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	08db      	lsrs	r3, r3, #3
 80036b2:	f003 0201 	and.w	r2, r3, #1
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4313      	orrs	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 0303 	and.w	r3, r3, #3
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d017      	beq.n	8003704 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	2203      	movs	r2, #3
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	43db      	mvns	r3, r3
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4013      	ands	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 0303 	and.w	r3, r3, #3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d123      	bne.n	8003758 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	08da      	lsrs	r2, r3, #3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3208      	adds	r2, #8
 8003718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800371c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	220f      	movs	r2, #15
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	43db      	mvns	r3, r3
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4013      	ands	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	4313      	orrs	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	08da      	lsrs	r2, r3, #3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3208      	adds	r2, #8
 8003752:	6939      	ldr	r1, [r7, #16]
 8003754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	2203      	movs	r2, #3
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	43db      	mvns	r3, r3
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4013      	ands	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 0203 	and.w	r2, r3, #3
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 80ac 	beq.w	80038f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800379a:	4b5f      	ldr	r3, [pc, #380]	; (8003918 <HAL_GPIO_Init+0x330>)
 800379c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800379e:	4a5e      	ldr	r2, [pc, #376]	; (8003918 <HAL_GPIO_Init+0x330>)
 80037a0:	f043 0301 	orr.w	r3, r3, #1
 80037a4:	6613      	str	r3, [r2, #96]	; 0x60
 80037a6:	4b5c      	ldr	r3, [pc, #368]	; (8003918 <HAL_GPIO_Init+0x330>)
 80037a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	60bb      	str	r3, [r7, #8]
 80037b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037b2:	4a5a      	ldr	r2, [pc, #360]	; (800391c <HAL_GPIO_Init+0x334>)
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	089b      	lsrs	r3, r3, #2
 80037b8:	3302      	adds	r3, #2
 80037ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	220f      	movs	r2, #15
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	43db      	mvns	r3, r3
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	4013      	ands	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037dc:	d025      	beq.n	800382a <HAL_GPIO_Init+0x242>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a4f      	ldr	r2, [pc, #316]	; (8003920 <HAL_GPIO_Init+0x338>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d01f      	beq.n	8003826 <HAL_GPIO_Init+0x23e>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a4e      	ldr	r2, [pc, #312]	; (8003924 <HAL_GPIO_Init+0x33c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d019      	beq.n	8003822 <HAL_GPIO_Init+0x23a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a4d      	ldr	r2, [pc, #308]	; (8003928 <HAL_GPIO_Init+0x340>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d013      	beq.n	800381e <HAL_GPIO_Init+0x236>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a4c      	ldr	r2, [pc, #304]	; (800392c <HAL_GPIO_Init+0x344>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00d      	beq.n	800381a <HAL_GPIO_Init+0x232>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a4b      	ldr	r2, [pc, #300]	; (8003930 <HAL_GPIO_Init+0x348>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d007      	beq.n	8003816 <HAL_GPIO_Init+0x22e>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a4a      	ldr	r2, [pc, #296]	; (8003934 <HAL_GPIO_Init+0x34c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d101      	bne.n	8003812 <HAL_GPIO_Init+0x22a>
 800380e:	2306      	movs	r3, #6
 8003810:	e00c      	b.n	800382c <HAL_GPIO_Init+0x244>
 8003812:	2307      	movs	r3, #7
 8003814:	e00a      	b.n	800382c <HAL_GPIO_Init+0x244>
 8003816:	2305      	movs	r3, #5
 8003818:	e008      	b.n	800382c <HAL_GPIO_Init+0x244>
 800381a:	2304      	movs	r3, #4
 800381c:	e006      	b.n	800382c <HAL_GPIO_Init+0x244>
 800381e:	2303      	movs	r3, #3
 8003820:	e004      	b.n	800382c <HAL_GPIO_Init+0x244>
 8003822:	2302      	movs	r3, #2
 8003824:	e002      	b.n	800382c <HAL_GPIO_Init+0x244>
 8003826:	2301      	movs	r3, #1
 8003828:	e000      	b.n	800382c <HAL_GPIO_Init+0x244>
 800382a:	2300      	movs	r3, #0
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	f002 0203 	and.w	r2, r2, #3
 8003832:	0092      	lsls	r2, r2, #2
 8003834:	4093      	lsls	r3, r2
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800383c:	4937      	ldr	r1, [pc, #220]	; (800391c <HAL_GPIO_Init+0x334>)
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	089b      	lsrs	r3, r3, #2
 8003842:	3302      	adds	r3, #2
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800384a:	4b3b      	ldr	r3, [pc, #236]	; (8003938 <HAL_GPIO_Init+0x350>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	43db      	mvns	r3, r3
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4013      	ands	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800386e:	4a32      	ldr	r2, [pc, #200]	; (8003938 <HAL_GPIO_Init+0x350>)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003874:	4b30      	ldr	r3, [pc, #192]	; (8003938 <HAL_GPIO_Init+0x350>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	43db      	mvns	r3, r3
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4013      	ands	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003898:	4a27      	ldr	r2, [pc, #156]	; (8003938 <HAL_GPIO_Init+0x350>)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800389e:	4b26      	ldr	r3, [pc, #152]	; (8003938 <HAL_GPIO_Init+0x350>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	43db      	mvns	r3, r3
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4013      	ands	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038c2:	4a1d      	ldr	r2, [pc, #116]	; (8003938 <HAL_GPIO_Init+0x350>)
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80038c8:	4b1b      	ldr	r3, [pc, #108]	; (8003938 <HAL_GPIO_Init+0x350>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	43db      	mvns	r3, r3
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4013      	ands	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038ec:	4a12      	ldr	r2, [pc, #72]	; (8003938 <HAL_GPIO_Init+0x350>)
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	3301      	adds	r3, #1
 80038f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	f47f ae78 	bne.w	80035f8 <HAL_GPIO_Init+0x10>
  }
}
 8003908:	bf00      	nop
 800390a:	bf00      	nop
 800390c:	371c      	adds	r7, #28
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40021000 	.word	0x40021000
 800391c:	40010000 	.word	0x40010000
 8003920:	48000400 	.word	0x48000400
 8003924:	48000800 	.word	0x48000800
 8003928:	48000c00 	.word	0x48000c00
 800392c:	48001000 	.word	0x48001000
 8003930:	48001400 	.word	0x48001400
 8003934:	48001800 	.word	0x48001800
 8003938:	40010400 	.word	0x40010400

0800393c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800394a:	e0cd      	b.n	8003ae8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800394c:	2201      	movs	r2, #1
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	4013      	ands	r3, r2
 8003958:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 80c0 	beq.w	8003ae2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003962:	4a68      	ldr	r2, [pc, #416]	; (8003b04 <HAL_GPIO_DeInit+0x1c8>)
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	089b      	lsrs	r3, r3, #2
 8003968:	3302      	adds	r3, #2
 800396a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800396e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	220f      	movs	r2, #15
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4013      	ands	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800398a:	d025      	beq.n	80039d8 <HAL_GPIO_DeInit+0x9c>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a5e      	ldr	r2, [pc, #376]	; (8003b08 <HAL_GPIO_DeInit+0x1cc>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d01f      	beq.n	80039d4 <HAL_GPIO_DeInit+0x98>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a5d      	ldr	r2, [pc, #372]	; (8003b0c <HAL_GPIO_DeInit+0x1d0>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d019      	beq.n	80039d0 <HAL_GPIO_DeInit+0x94>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a5c      	ldr	r2, [pc, #368]	; (8003b10 <HAL_GPIO_DeInit+0x1d4>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d013      	beq.n	80039cc <HAL_GPIO_DeInit+0x90>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a5b      	ldr	r2, [pc, #364]	; (8003b14 <HAL_GPIO_DeInit+0x1d8>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d00d      	beq.n	80039c8 <HAL_GPIO_DeInit+0x8c>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a5a      	ldr	r2, [pc, #360]	; (8003b18 <HAL_GPIO_DeInit+0x1dc>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d007      	beq.n	80039c4 <HAL_GPIO_DeInit+0x88>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a59      	ldr	r2, [pc, #356]	; (8003b1c <HAL_GPIO_DeInit+0x1e0>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d101      	bne.n	80039c0 <HAL_GPIO_DeInit+0x84>
 80039bc:	2306      	movs	r3, #6
 80039be:	e00c      	b.n	80039da <HAL_GPIO_DeInit+0x9e>
 80039c0:	2307      	movs	r3, #7
 80039c2:	e00a      	b.n	80039da <HAL_GPIO_DeInit+0x9e>
 80039c4:	2305      	movs	r3, #5
 80039c6:	e008      	b.n	80039da <HAL_GPIO_DeInit+0x9e>
 80039c8:	2304      	movs	r3, #4
 80039ca:	e006      	b.n	80039da <HAL_GPIO_DeInit+0x9e>
 80039cc:	2303      	movs	r3, #3
 80039ce:	e004      	b.n	80039da <HAL_GPIO_DeInit+0x9e>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e002      	b.n	80039da <HAL_GPIO_DeInit+0x9e>
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <HAL_GPIO_DeInit+0x9e>
 80039d8:	2300      	movs	r3, #0
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	f002 0203 	and.w	r2, r2, #3
 80039e0:	0092      	lsls	r2, r2, #2
 80039e2:	4093      	lsls	r3, r2
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d132      	bne.n	8003a50 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80039ea:	4b4d      	ldr	r3, [pc, #308]	; (8003b20 <HAL_GPIO_DeInit+0x1e4>)
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	43db      	mvns	r3, r3
 80039f2:	494b      	ldr	r1, [pc, #300]	; (8003b20 <HAL_GPIO_DeInit+0x1e4>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80039f8:	4b49      	ldr	r3, [pc, #292]	; (8003b20 <HAL_GPIO_DeInit+0x1e4>)
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	43db      	mvns	r3, r3
 8003a00:	4947      	ldr	r1, [pc, #284]	; (8003b20 <HAL_GPIO_DeInit+0x1e4>)
 8003a02:	4013      	ands	r3, r2
 8003a04:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003a06:	4b46      	ldr	r3, [pc, #280]	; (8003b20 <HAL_GPIO_DeInit+0x1e4>)
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	4944      	ldr	r1, [pc, #272]	; (8003b20 <HAL_GPIO_DeInit+0x1e4>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003a14:	4b42      	ldr	r3, [pc, #264]	; (8003b20 <HAL_GPIO_DeInit+0x1e4>)
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	4940      	ldr	r1, [pc, #256]	; (8003b20 <HAL_GPIO_DeInit+0x1e4>)
 8003a1e:	4013      	ands	r3, r2
 8003a20:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	220f      	movs	r2, #15
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003a32:	4a34      	ldr	r2, [pc, #208]	; (8003b04 <HAL_GPIO_DeInit+0x1c8>)
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	089b      	lsrs	r3, r3, #2
 8003a38:	3302      	adds	r3, #2
 8003a3a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	43da      	mvns	r2, r3
 8003a42:	4830      	ldr	r0, [pc, #192]	; (8003b04 <HAL_GPIO_DeInit+0x1c8>)
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	089b      	lsrs	r3, r3, #2
 8003a48:	400a      	ands	r2, r1
 8003a4a:	3302      	adds	r3, #2
 8003a4c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	2103      	movs	r1, #3
 8003a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	08da      	lsrs	r2, r3, #3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3208      	adds	r2, #8
 8003a6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	220f      	movs	r2, #15
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	08d2      	lsrs	r2, r2, #3
 8003a84:	4019      	ands	r1, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	3208      	adds	r2, #8
 8003a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	2103      	movs	r1, #3
 8003a98:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	401a      	ands	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	401a      	ands	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	2103      	movs	r1, #3
 8003ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	401a      	ands	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ada:	43db      	mvns	r3, r3
 8003adc:	401a      	ands	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	fa22 f303 	lsr.w	r3, r2, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f47f af2b 	bne.w	800394c <HAL_GPIO_DeInit+0x10>
  }
}
 8003af6:	bf00      	nop
 8003af8:	bf00      	nop
 8003afa:	371c      	adds	r7, #28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	40010000 	.word	0x40010000
 8003b08:	48000400 	.word	0x48000400
 8003b0c:	48000800 	.word	0x48000800
 8003b10:	48000c00 	.word	0x48000c00
 8003b14:	48001000 	.word	0x48001000
 8003b18:	48001400 	.word	0x48001400
 8003b1c:	48001800 	.word	0x48001800
 8003b20:	40010400 	.word	0x40010400

08003b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	807b      	strh	r3, [r7, #2]
 8003b30:	4613      	mov	r3, r2
 8003b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b34:	787b      	ldrb	r3, [r7, #1]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b3a:	887a      	ldrh	r2, [r7, #2]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b40:	e002      	b.n	8003b48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b42:	887a      	ldrh	r2, [r7, #2]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b5e:	4b08      	ldr	r3, [pc, #32]	; (8003b80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b60:	695a      	ldr	r2, [r3, #20]
 8003b62:	88fb      	ldrh	r3, [r7, #6]
 8003b64:	4013      	ands	r3, r2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d006      	beq.n	8003b78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b6a:	4a05      	ldr	r2, [pc, #20]	; (8003b80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b6c:	88fb      	ldrh	r3, [r7, #6]
 8003b6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 f806 	bl	8003b84 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b78:	bf00      	nop
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40010400 	.word	0x40010400

08003b84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b082      	sub	sp, #8
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e081      	b.n	8003cb0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d106      	bne.n	8003bc6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7fe fb81 	bl	80022c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2224      	movs	r2, #36	; 0x24
 8003bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0201 	bic.w	r2, r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bfa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d107      	bne.n	8003c14 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c10:	609a      	str	r2, [r3, #8]
 8003c12:	e006      	b.n	8003c22 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003c20:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d104      	bne.n	8003c34 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c32:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6812      	ldr	r2, [r2, #0]
 8003c3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c46:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c56:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69d9      	ldr	r1, [r3, #28]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1a      	ldr	r2, [r3, #32]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f042 0201 	orr.w	r2, r2, #1
 8003c90:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e021      	b.n	8003d0e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2224      	movs	r2, #36	; 0x24
 8003cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0201 	bic.w	r2, r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7fe fb4e 	bl	8002384 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
	...

08003d18 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b088      	sub	sp, #32
 8003d1c:	af02      	add	r7, sp, #8
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	4608      	mov	r0, r1
 8003d22:	4611      	mov	r1, r2
 8003d24:	461a      	mov	r2, r3
 8003d26:	4603      	mov	r3, r0
 8003d28:	817b      	strh	r3, [r7, #10]
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	813b      	strh	r3, [r7, #8]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	f040 80f9 	bne.w	8003f32 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <HAL_I2C_Mem_Write+0x34>
 8003d46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d105      	bne.n	8003d58 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d52:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0ed      	b.n	8003f34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_I2C_Mem_Write+0x4e>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e0e6      	b.n	8003f34 <HAL_I2C_Mem_Write+0x21c>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d6e:	f7ff fa9f 	bl	80032b0 <HAL_GetTick>
 8003d72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	2319      	movs	r3, #25
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 fac3 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e0d1      	b.n	8003f34 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2221      	movs	r2, #33	; 0x21
 8003d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2240      	movs	r2, #64	; 0x40
 8003d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a3a      	ldr	r2, [r7, #32]
 8003daa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003db0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003db8:	88f8      	ldrh	r0, [r7, #6]
 8003dba:	893a      	ldrh	r2, [r7, #8]
 8003dbc:	8979      	ldrh	r1, [r7, #10]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	9301      	str	r3, [sp, #4]
 8003dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 f9d3 	bl	8004174 <I2C_RequestMemoryWrite>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d005      	beq.n	8003de0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e0a9      	b.n	8003f34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2bff      	cmp	r3, #255	; 0xff
 8003de8:	d90e      	bls.n	8003e08 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	22ff      	movs	r2, #255	; 0xff
 8003dee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	8979      	ldrh	r1, [r7, #10]
 8003df8:	2300      	movs	r3, #0
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 fc2b 	bl	800465c <I2C_TransferConfig>
 8003e06:	e00f      	b.n	8003e28 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	8979      	ldrh	r1, [r7, #10]
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 fc1a 	bl	800465c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 faad 	bl	800438c <I2C_WaitOnTXISFlagUntilTimeout>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e07b      	b.n	8003f34 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	781a      	ldrb	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d034      	beq.n	8003ee0 <HAL_I2C_Mem_Write+0x1c8>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d130      	bne.n	8003ee0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e84:	2200      	movs	r2, #0
 8003e86:	2180      	movs	r1, #128	; 0x80
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f000 fa3f 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e04d      	b.n	8003f34 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2bff      	cmp	r3, #255	; 0xff
 8003ea0:	d90e      	bls.n	8003ec0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	22ff      	movs	r2, #255	; 0xff
 8003ea6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	8979      	ldrh	r1, [r7, #10]
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 fbcf 	bl	800465c <I2C_TransferConfig>
 8003ebe:	e00f      	b.n	8003ee0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	8979      	ldrh	r1, [r7, #10]
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 fbbe 	bl	800465c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d19e      	bne.n	8003e28 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 fa8c 	bl	800440c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e01a      	b.n	8003f34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2220      	movs	r2, #32
 8003f04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6859      	ldr	r1, [r3, #4]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <HAL_I2C_Mem_Write+0x224>)
 8003f12:	400b      	ands	r3, r1
 8003f14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	e000      	b.n	8003f34 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003f32:	2302      	movs	r3, #2
  }
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	fe00e800 	.word	0xfe00e800

08003f40 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b088      	sub	sp, #32
 8003f44:	af02      	add	r7, sp, #8
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	4608      	mov	r0, r1
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4603      	mov	r3, r0
 8003f50:	817b      	strh	r3, [r7, #10]
 8003f52:	460b      	mov	r3, r1
 8003f54:	813b      	strh	r3, [r7, #8]
 8003f56:	4613      	mov	r3, r2
 8003f58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b20      	cmp	r3, #32
 8003f64:	f040 80fd 	bne.w	8004162 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <HAL_I2C_Mem_Read+0x34>
 8003f6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d105      	bne.n	8003f80 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f7a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e0f1      	b.n	8004164 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_I2C_Mem_Read+0x4e>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e0ea      	b.n	8004164 <HAL_I2C_Mem_Read+0x224>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f96:	f7ff f98b 	bl	80032b0 <HAL_GetTick>
 8003f9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	2319      	movs	r3, #25
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 f9af 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0d5      	b.n	8004164 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2222      	movs	r2, #34	; 0x22
 8003fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2240      	movs	r2, #64	; 0x40
 8003fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a3a      	ldr	r2, [r7, #32]
 8003fd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fe0:	88f8      	ldrh	r0, [r7, #6]
 8003fe2:	893a      	ldrh	r2, [r7, #8]
 8003fe4:	8979      	ldrh	r1, [r7, #10]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	9301      	str	r3, [sp, #4]
 8003fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	4603      	mov	r3, r0
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 f913 	bl	800421c <I2C_RequestMemoryRead>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d005      	beq.n	8004008 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0ad      	b.n	8004164 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400c:	b29b      	uxth	r3, r3
 800400e:	2bff      	cmp	r3, #255	; 0xff
 8004010:	d90e      	bls.n	8004030 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	22ff      	movs	r2, #255	; 0xff
 8004016:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401c:	b2da      	uxtb	r2, r3
 800401e:	8979      	ldrh	r1, [r7, #10]
 8004020:	4b52      	ldr	r3, [pc, #328]	; (800416c <HAL_I2C_Mem_Read+0x22c>)
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 fb17 	bl	800465c <I2C_TransferConfig>
 800402e:	e00f      	b.n	8004050 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403e:	b2da      	uxtb	r2, r3
 8004040:	8979      	ldrh	r1, [r7, #10]
 8004042:	4b4a      	ldr	r3, [pc, #296]	; (800416c <HAL_I2C_Mem_Read+0x22c>)
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 fb06 	bl	800465c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004056:	2200      	movs	r2, #0
 8004058:	2104      	movs	r1, #4
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 f956 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e07c      	b.n	8004164 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	b2d2      	uxtb	r2, r2
 8004076:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004092:	b29b      	uxth	r3, r3
 8004094:	3b01      	subs	r3, #1
 8004096:	b29a      	uxth	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d034      	beq.n	8004110 <HAL_I2C_Mem_Read+0x1d0>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d130      	bne.n	8004110 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b4:	2200      	movs	r2, #0
 80040b6:	2180      	movs	r1, #128	; 0x80
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 f927 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e04d      	b.n	8004164 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2bff      	cmp	r3, #255	; 0xff
 80040d0:	d90e      	bls.n	80040f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	22ff      	movs	r2, #255	; 0xff
 80040d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	8979      	ldrh	r1, [r7, #10]
 80040e0:	2300      	movs	r3, #0
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 fab7 	bl	800465c <I2C_TransferConfig>
 80040ee:	e00f      	b.n	8004110 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	8979      	ldrh	r1, [r7, #10]
 8004102:	2300      	movs	r3, #0
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 faa6 	bl	800465c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d19a      	bne.n	8004050 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f974 	bl	800440c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e01a      	b.n	8004164 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2220      	movs	r2, #32
 8004134:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6859      	ldr	r1, [r3, #4]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <HAL_I2C_Mem_Read+0x230>)
 8004142:	400b      	ands	r3, r1
 8004144:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2220      	movs	r2, #32
 800414a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	e000      	b.n	8004164 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004162:	2302      	movs	r3, #2
  }
}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	80002400 	.word	0x80002400
 8004170:	fe00e800 	.word	0xfe00e800

08004174 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af02      	add	r7, sp, #8
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	4608      	mov	r0, r1
 800417e:	4611      	mov	r1, r2
 8004180:	461a      	mov	r2, r3
 8004182:	4603      	mov	r3, r0
 8004184:	817b      	strh	r3, [r7, #10]
 8004186:	460b      	mov	r3, r1
 8004188:	813b      	strh	r3, [r7, #8]
 800418a:	4613      	mov	r3, r2
 800418c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800418e:	88fb      	ldrh	r3, [r7, #6]
 8004190:	b2da      	uxtb	r2, r3
 8004192:	8979      	ldrh	r1, [r7, #10]
 8004194:	4b20      	ldr	r3, [pc, #128]	; (8004218 <I2C_RequestMemoryWrite+0xa4>)
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 fa5d 	bl	800465c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041a2:	69fa      	ldr	r2, [r7, #28]
 80041a4:	69b9      	ldr	r1, [r7, #24]
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 f8f0 	bl	800438c <I2C_WaitOnTXISFlagUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e02c      	b.n	8004210 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041b6:	88fb      	ldrh	r3, [r7, #6]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d105      	bne.n	80041c8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041bc:	893b      	ldrh	r3, [r7, #8]
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	629a      	str	r2, [r3, #40]	; 0x28
 80041c6:	e015      	b.n	80041f4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041c8:	893b      	ldrh	r3, [r7, #8]
 80041ca:	0a1b      	lsrs	r3, r3, #8
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041d6:	69fa      	ldr	r2, [r7, #28]
 80041d8:	69b9      	ldr	r1, [r7, #24]
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 f8d6 	bl	800438c <I2C_WaitOnTXISFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e012      	b.n	8004210 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041ea:	893b      	ldrh	r3, [r7, #8]
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	2200      	movs	r2, #0
 80041fc:	2180      	movs	r1, #128	; 0x80
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 f884 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e000      	b.n	8004210 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	80002000 	.word	0x80002000

0800421c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af02      	add	r7, sp, #8
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	4608      	mov	r0, r1
 8004226:	4611      	mov	r1, r2
 8004228:	461a      	mov	r2, r3
 800422a:	4603      	mov	r3, r0
 800422c:	817b      	strh	r3, [r7, #10]
 800422e:	460b      	mov	r3, r1
 8004230:	813b      	strh	r3, [r7, #8]
 8004232:	4613      	mov	r3, r2
 8004234:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004236:	88fb      	ldrh	r3, [r7, #6]
 8004238:	b2da      	uxtb	r2, r3
 800423a:	8979      	ldrh	r1, [r7, #10]
 800423c:	4b20      	ldr	r3, [pc, #128]	; (80042c0 <I2C_RequestMemoryRead+0xa4>)
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	2300      	movs	r3, #0
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 fa0a 	bl	800465c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004248:	69fa      	ldr	r2, [r7, #28]
 800424a:	69b9      	ldr	r1, [r7, #24]
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 f89d 	bl	800438c <I2C_WaitOnTXISFlagUntilTimeout>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e02c      	b.n	80042b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800425c:	88fb      	ldrh	r3, [r7, #6]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d105      	bne.n	800426e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004262:	893b      	ldrh	r3, [r7, #8]
 8004264:	b2da      	uxtb	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	629a      	str	r2, [r3, #40]	; 0x28
 800426c:	e015      	b.n	800429a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800426e:	893b      	ldrh	r3, [r7, #8]
 8004270:	0a1b      	lsrs	r3, r3, #8
 8004272:	b29b      	uxth	r3, r3
 8004274:	b2da      	uxtb	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800427c:	69fa      	ldr	r2, [r7, #28]
 800427e:	69b9      	ldr	r1, [r7, #24]
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 f883 	bl	800438c <I2C_WaitOnTXISFlagUntilTimeout>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e012      	b.n	80042b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004290:	893b      	ldrh	r3, [r7, #8]
 8004292:	b2da      	uxtb	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	2200      	movs	r2, #0
 80042a2:	2140      	movs	r1, #64	; 0x40
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 f831 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e000      	b.n	80042b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	80002000 	.word	0x80002000

080042c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d103      	bne.n	80042e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2200      	movs	r2, #0
 80042e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d007      	beq.n	8004300 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	699a      	ldr	r2, [r3, #24]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0201 	orr.w	r2, r2, #1
 80042fe:	619a      	str	r2, [r3, #24]
  }
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	4613      	mov	r3, r2
 800431a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800431c:	e022      	b.n	8004364 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004324:	d01e      	beq.n	8004364 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004326:	f7fe ffc3 	bl	80032b0 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d302      	bcc.n	800433c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d113      	bne.n	8004364 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004340:	f043 0220 	orr.w	r2, r3, #32
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2220      	movs	r2, #32
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e00f      	b.n	8004384 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	699a      	ldr	r2, [r3, #24]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	4013      	ands	r3, r2
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	429a      	cmp	r2, r3
 8004372:	bf0c      	ite	eq
 8004374:	2301      	moveq	r3, #1
 8004376:	2300      	movne	r3, #0
 8004378:	b2db      	uxtb	r3, r3
 800437a:	461a      	mov	r2, r3
 800437c:	79fb      	ldrb	r3, [r7, #7]
 800437e:	429a      	cmp	r2, r3
 8004380:	d0cd      	beq.n	800431e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004398:	e02c      	b.n	80043f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	68b9      	ldr	r1, [r7, #8]
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 f870 	bl	8004484 <I2C_IsErrorOccurred>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e02a      	b.n	8004404 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b4:	d01e      	beq.n	80043f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b6:	f7fe ff7b 	bl	80032b0 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d302      	bcc.n	80043cc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d113      	bne.n	80043f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d0:	f043 0220 	orr.w	r2, r3, #32
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e007      	b.n	8004404 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d1cb      	bne.n	800439a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004418:	e028      	b.n	800446c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	68b9      	ldr	r1, [r7, #8]
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 f830 	bl	8004484 <I2C_IsErrorOccurred>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e026      	b.n	800447c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442e:	f7fe ff3f 	bl	80032b0 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	429a      	cmp	r2, r3
 800443c:	d302      	bcc.n	8004444 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d113      	bne.n	800446c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004448:	f043 0220 	orr.w	r2, r3, #32
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e007      	b.n	800447c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	f003 0320 	and.w	r3, r3, #32
 8004476:	2b20      	cmp	r3, #32
 8004478:	d1cf      	bne.n	800441a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08a      	sub	sp, #40	; 0x28
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800449e:	2300      	movs	r3, #0
 80044a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	f003 0310 	and.w	r3, r3, #16
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d075      	beq.n	800459c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2210      	movs	r2, #16
 80044b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044b8:	e056      	b.n	8004568 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c0:	d052      	beq.n	8004568 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044c2:	f7fe fef5 	bl	80032b0 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d302      	bcc.n	80044d8 <I2C_IsErrorOccurred+0x54>
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d147      	bne.n	8004568 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044fa:	d12e      	bne.n	800455a <I2C_IsErrorOccurred+0xd6>
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004502:	d02a      	beq.n	800455a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004504:	7cfb      	ldrb	r3, [r7, #19]
 8004506:	2b20      	cmp	r3, #32
 8004508:	d027      	beq.n	800455a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004518:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800451a:	f7fe fec9 	bl	80032b0 <HAL_GetTick>
 800451e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004520:	e01b      	b.n	800455a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004522:	f7fe fec5 	bl	80032b0 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b19      	cmp	r3, #25
 800452e:	d914      	bls.n	800455a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004534:	f043 0220 	orr.w	r2, r3, #32
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2220      	movs	r2, #32
 8004540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b20      	cmp	r3, #32
 8004566:	d1dc      	bne.n	8004522 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	2b20      	cmp	r3, #32
 8004574:	d003      	beq.n	800457e <I2C_IsErrorOccurred+0xfa>
 8004576:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800457a:	2b00      	cmp	r3, #0
 800457c:	d09d      	beq.n	80044ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800457e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004582:	2b00      	cmp	r3, #0
 8004584:	d103      	bne.n	800458e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2220      	movs	r2, #32
 800458c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	f043 0304 	orr.w	r3, r3, #4
 8004594:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00b      	beq.n	80045c6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	f043 0301 	orr.w	r3, r3, #1
 80045b4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00b      	beq.n	80045e8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	f043 0308 	orr.w	r3, r3, #8
 80045d6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00b      	beq.n	800460a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	f043 0302 	orr.w	r3, r3, #2
 80045f8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004602:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800460a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800460e:	2b00      	cmp	r3, #0
 8004610:	d01c      	beq.n	800464c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f7ff fe56 	bl	80042c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6859      	ldr	r1, [r3, #4]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	4b0d      	ldr	r3, [pc, #52]	; (8004658 <I2C_IsErrorOccurred+0x1d4>)
 8004624:	400b      	ands	r3, r1
 8004626:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	431a      	orrs	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800464c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004650:	4618      	mov	r0, r3
 8004652:	3728      	adds	r7, #40	; 0x28
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	fe00e800 	.word	0xfe00e800

0800465c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800465c:	b480      	push	{r7}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	607b      	str	r3, [r7, #4]
 8004666:	460b      	mov	r3, r1
 8004668:	817b      	strh	r3, [r7, #10]
 800466a:	4613      	mov	r3, r2
 800466c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800466e:	897b      	ldrh	r3, [r7, #10]
 8004670:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004674:	7a7b      	ldrb	r3, [r7, #9]
 8004676:	041b      	lsls	r3, r3, #16
 8004678:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800467c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	4313      	orrs	r3, r2
 8004686:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800468a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	0d5b      	lsrs	r3, r3, #21
 8004696:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800469a:	4b08      	ldr	r3, [pc, #32]	; (80046bc <I2C_TransferConfig+0x60>)
 800469c:	430b      	orrs	r3, r1
 800469e:	43db      	mvns	r3, r3
 80046a0:	ea02 0103 	and.w	r1, r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80046ae:	bf00      	nop
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	03ff63ff 	.word	0x03ff63ff

080046c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b20      	cmp	r3, #32
 80046d4:	d138      	bne.n	8004748 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d101      	bne.n	80046e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046e0:	2302      	movs	r3, #2
 80046e2:	e032      	b.n	800474a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2224      	movs	r2, #36	; 0x24
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0201 	bic.w	r2, r2, #1
 8004702:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004712:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6819      	ldr	r1, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0201 	orr.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	e000      	b.n	800474a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004748:	2302      	movs	r3, #2
  }
}
 800474a:	4618      	mov	r0, r3
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004756:	b480      	push	{r7}
 8004758:	b085      	sub	sp, #20
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b20      	cmp	r3, #32
 800476a:	d139      	bne.n	80047e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004772:	2b01      	cmp	r3, #1
 8004774:	d101      	bne.n	800477a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004776:	2302      	movs	r3, #2
 8004778:	e033      	b.n	80047e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2224      	movs	r2, #36	; 0x24
 8004786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0201 	bic.w	r2, r2, #1
 8004798:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80047a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	021b      	lsls	r3, r3, #8
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0201 	orr.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047dc:	2300      	movs	r3, #0
 80047de:	e000      	b.n	80047e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047e0:	2302      	movs	r3, #2
  }
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
	...

080047f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80047f4:	4b04      	ldr	r3, [pc, #16]	; (8004808 <HAL_PWREx_GetVoltageRange+0x18>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	40007000 	.word	0x40007000

0800480c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800481a:	d130      	bne.n	800487e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800481c:	4b23      	ldr	r3, [pc, #140]	; (80048ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004828:	d038      	beq.n	800489c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800482a:	4b20      	ldr	r3, [pc, #128]	; (80048ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004832:	4a1e      	ldr	r2, [pc, #120]	; (80048ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004834:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004838:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800483a:	4b1d      	ldr	r3, [pc, #116]	; (80048b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2232      	movs	r2, #50	; 0x32
 8004840:	fb02 f303 	mul.w	r3, r2, r3
 8004844:	4a1b      	ldr	r2, [pc, #108]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004846:	fba2 2303 	umull	r2, r3, r2, r3
 800484a:	0c9b      	lsrs	r3, r3, #18
 800484c:	3301      	adds	r3, #1
 800484e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004850:	e002      	b.n	8004858 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	3b01      	subs	r3, #1
 8004856:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004858:	4b14      	ldr	r3, [pc, #80]	; (80048ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004864:	d102      	bne.n	800486c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1f2      	bne.n	8004852 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800486c:	4b0f      	ldr	r3, [pc, #60]	; (80048ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004878:	d110      	bne.n	800489c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e00f      	b.n	800489e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800487e:	4b0b      	ldr	r3, [pc, #44]	; (80048ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800488a:	d007      	beq.n	800489c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800488c:	4b07      	ldr	r3, [pc, #28]	; (80048ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004894:	4a05      	ldr	r2, [pc, #20]	; (80048ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800489a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	40007000 	.word	0x40007000
 80048b0:	2000000c 	.word	0x2000000c
 80048b4:	431bde83 	.word	0x431bde83

080048b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b088      	sub	sp, #32
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e3d8      	b.n	800507c <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048ca:	4b97      	ldr	r3, [pc, #604]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 030c 	and.w	r3, r3, #12
 80048d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048d4:	4b94      	ldr	r3, [pc, #592]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	f003 0303 	and.w	r3, r3, #3
 80048dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0310 	and.w	r3, r3, #16
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 80e4 	beq.w	8004ab4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d007      	beq.n	8004902 <HAL_RCC_OscConfig+0x4a>
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	2b0c      	cmp	r3, #12
 80048f6:	f040 808b 	bne.w	8004a10 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	f040 8087 	bne.w	8004a10 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004902:	4b89      	ldr	r3, [pc, #548]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d005      	beq.n	800491a <HAL_RCC_OscConfig+0x62>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e3b0      	b.n	800507c <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1a      	ldr	r2, [r3, #32]
 800491e:	4b82      	ldr	r3, [pc, #520]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0308 	and.w	r3, r3, #8
 8004926:	2b00      	cmp	r3, #0
 8004928:	d004      	beq.n	8004934 <HAL_RCC_OscConfig+0x7c>
 800492a:	4b7f      	ldr	r3, [pc, #508]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004932:	e005      	b.n	8004940 <HAL_RCC_OscConfig+0x88>
 8004934:	4b7c      	ldr	r3, [pc, #496]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800493a:	091b      	lsrs	r3, r3, #4
 800493c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004940:	4293      	cmp	r3, r2
 8004942:	d223      	bcs.n	800498c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	4618      	mov	r0, r3
 800494a:	f000 fd43 	bl	80053d4 <RCC_SetFlashLatencyFromMSIRange>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e391      	b.n	800507c <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004958:	4b73      	ldr	r3, [pc, #460]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a72      	ldr	r2, [pc, #456]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 800495e:	f043 0308 	orr.w	r3, r3, #8
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	4b70      	ldr	r3, [pc, #448]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	496d      	ldr	r1, [pc, #436]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004972:	4313      	orrs	r3, r2
 8004974:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004976:	4b6c      	ldr	r3, [pc, #432]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	021b      	lsls	r3, r3, #8
 8004984:	4968      	ldr	r1, [pc, #416]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004986:	4313      	orrs	r3, r2
 8004988:	604b      	str	r3, [r1, #4]
 800498a:	e025      	b.n	80049d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800498c:	4b66      	ldr	r3, [pc, #408]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a65      	ldr	r2, [pc, #404]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004992:	f043 0308 	orr.w	r3, r3, #8
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	4b63      	ldr	r3, [pc, #396]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	4960      	ldr	r1, [pc, #384]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049aa:	4b5f      	ldr	r3, [pc, #380]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	021b      	lsls	r3, r3, #8
 80049b8:	495b      	ldr	r1, [pc, #364]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d109      	bne.n	80049d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 fd03 	bl	80053d4 <RCC_SetFlashLatencyFromMSIRange>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e351      	b.n	800507c <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049d8:	f000 fc38 	bl	800524c <HAL_RCC_GetSysClockFreq>
 80049dc:	4602      	mov	r2, r0
 80049de:	4b52      	ldr	r3, [pc, #328]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	091b      	lsrs	r3, r3, #4
 80049e4:	f003 030f 	and.w	r3, r3, #15
 80049e8:	4950      	ldr	r1, [pc, #320]	; (8004b2c <HAL_RCC_OscConfig+0x274>)
 80049ea:	5ccb      	ldrb	r3, [r1, r3]
 80049ec:	f003 031f 	and.w	r3, r3, #31
 80049f0:	fa22 f303 	lsr.w	r3, r2, r3
 80049f4:	4a4e      	ldr	r2, [pc, #312]	; (8004b30 <HAL_RCC_OscConfig+0x278>)
 80049f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80049f8:	4b4e      	ldr	r3, [pc, #312]	; (8004b34 <HAL_RCC_OscConfig+0x27c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7fe fc07 	bl	8003210 <HAL_InitTick>
 8004a02:	4603      	mov	r3, r0
 8004a04:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004a06:	7bfb      	ldrb	r3, [r7, #15]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d052      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
 8004a0e:	e335      	b.n	800507c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d032      	beq.n	8004a7e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a18:	4b43      	ldr	r3, [pc, #268]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a42      	ldr	r2, [pc, #264]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a1e:	f043 0301 	orr.w	r3, r3, #1
 8004a22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a24:	f7fe fc44 	bl	80032b0 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a2c:	f7fe fc40 	bl	80032b0 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e31e      	b.n	800507c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a3e:	4b3a      	ldr	r3, [pc, #232]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0f0      	beq.n	8004a2c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a4a:	4b37      	ldr	r3, [pc, #220]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a36      	ldr	r2, [pc, #216]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a50:	f043 0308 	orr.w	r3, r3, #8
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	4b34      	ldr	r3, [pc, #208]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	4931      	ldr	r1, [pc, #196]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a68:	4b2f      	ldr	r3, [pc, #188]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	69db      	ldr	r3, [r3, #28]
 8004a74:	021b      	lsls	r3, r3, #8
 8004a76:	492c      	ldr	r1, [pc, #176]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	604b      	str	r3, [r1, #4]
 8004a7c:	e01a      	b.n	8004ab4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a7e:	4b2a      	ldr	r3, [pc, #168]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a29      	ldr	r2, [pc, #164]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004a84:	f023 0301 	bic.w	r3, r3, #1
 8004a88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a8a:	f7fe fc11 	bl	80032b0 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a92:	f7fe fc0d 	bl	80032b0 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e2eb      	b.n	800507c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004aa4:	4b20      	ldr	r3, [pc, #128]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1f0      	bne.n	8004a92 <HAL_RCC_OscConfig+0x1da>
 8004ab0:	e000      	b.n	8004ab4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ab2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d074      	beq.n	8004baa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	2b08      	cmp	r3, #8
 8004ac4:	d005      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x21a>
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	2b0c      	cmp	r3, #12
 8004aca:	d10e      	bne.n	8004aea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d10b      	bne.n	8004aea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad2:	4b15      	ldr	r3, [pc, #84]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d064      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x2f0>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d160      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e2c8      	b.n	800507c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af2:	d106      	bne.n	8004b02 <HAL_RCC_OscConfig+0x24a>
 8004af4:	4b0c      	ldr	r3, [pc, #48]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a0b      	ldr	r2, [pc, #44]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004afe:	6013      	str	r3, [r2, #0]
 8004b00:	e026      	b.n	8004b50 <HAL_RCC_OscConfig+0x298>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b0a:	d115      	bne.n	8004b38 <HAL_RCC_OscConfig+0x280>
 8004b0c:	4b06      	ldr	r3, [pc, #24]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a05      	ldr	r2, [pc, #20]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004b12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	4b03      	ldr	r3, [pc, #12]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a02      	ldr	r2, [pc, #8]	; (8004b28 <HAL_RCC_OscConfig+0x270>)
 8004b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b22:	6013      	str	r3, [r2, #0]
 8004b24:	e014      	b.n	8004b50 <HAL_RCC_OscConfig+0x298>
 8004b26:	bf00      	nop
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	0800f62c 	.word	0x0800f62c
 8004b30:	2000000c 	.word	0x2000000c
 8004b34:	200000ac 	.word	0x200000ac
 8004b38:	4ba0      	ldr	r3, [pc, #640]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a9f      	ldr	r2, [pc, #636]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b42:	6013      	str	r3, [r2, #0]
 8004b44:	4b9d      	ldr	r3, [pc, #628]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a9c      	ldr	r2, [pc, #624]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d013      	beq.n	8004b80 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b58:	f7fe fbaa 	bl	80032b0 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b60:	f7fe fba6 	bl	80032b0 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b64      	cmp	r3, #100	; 0x64
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e284      	b.n	800507c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b72:	4b92      	ldr	r3, [pc, #584]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0f0      	beq.n	8004b60 <HAL_RCC_OscConfig+0x2a8>
 8004b7e:	e014      	b.n	8004baa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b80:	f7fe fb96 	bl	80032b0 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b88:	f7fe fb92 	bl	80032b0 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b64      	cmp	r3, #100	; 0x64
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e270      	b.n	800507c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b9a:	4b88      	ldr	r3, [pc, #544]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1f0      	bne.n	8004b88 <HAL_RCC_OscConfig+0x2d0>
 8004ba6:	e000      	b.n	8004baa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d060      	beq.n	8004c78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d005      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x310>
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	2b0c      	cmp	r3, #12
 8004bc0:	d119      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d116      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bc8:	4b7c      	ldr	r3, [pc, #496]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d005      	beq.n	8004be0 <HAL_RCC_OscConfig+0x328>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e24d      	b.n	800507c <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be0:	4b76      	ldr	r3, [pc, #472]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	061b      	lsls	r3, r3, #24
 8004bee:	4973      	ldr	r1, [pc, #460]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bf4:	e040      	b.n	8004c78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d023      	beq.n	8004c46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bfe:	4b6f      	ldr	r3, [pc, #444]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a6e      	ldr	r2, [pc, #440]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0a:	f7fe fb51 	bl	80032b0 <HAL_GetTick>
 8004c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c10:	e008      	b.n	8004c24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c12:	f7fe fb4d 	bl	80032b0 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e22b      	b.n	800507c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c24:	4b65      	ldr	r3, [pc, #404]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0f0      	beq.n	8004c12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c30:	4b62      	ldr	r3, [pc, #392]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	061b      	lsls	r3, r3, #24
 8004c3e:	495f      	ldr	r1, [pc, #380]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	604b      	str	r3, [r1, #4]
 8004c44:	e018      	b.n	8004c78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c46:	4b5d      	ldr	r3, [pc, #372]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a5c      	ldr	r2, [pc, #368]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c52:	f7fe fb2d 	bl	80032b0 <HAL_GetTick>
 8004c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c58:	e008      	b.n	8004c6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c5a:	f7fe fb29 	bl	80032b0 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e207      	b.n	800507c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c6c:	4b53      	ldr	r3, [pc, #332]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1f0      	bne.n	8004c5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d03c      	beq.n	8004cfe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d01c      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c8c:	4b4b      	ldr	r3, [pc, #300]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c92:	4a4a      	ldr	r2, [pc, #296]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004c94:	f043 0301 	orr.w	r3, r3, #1
 8004c98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9c:	f7fe fb08 	bl	80032b0 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ca4:	f7fe fb04 	bl	80032b0 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e1e2      	b.n	800507c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cb6:	4b41      	ldr	r3, [pc, #260]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0ef      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x3ec>
 8004cc4:	e01b      	b.n	8004cfe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cc6:	4b3d      	ldr	r3, [pc, #244]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ccc:	4a3b      	ldr	r2, [pc, #236]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004cce:	f023 0301 	bic.w	r3, r3, #1
 8004cd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd6:	f7fe faeb 	bl	80032b0 <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cde:	f7fe fae7 	bl	80032b0 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e1c5      	b.n	800507c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cf0:	4b32      	ldr	r3, [pc, #200]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1ef      	bne.n	8004cde <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0304 	and.w	r3, r3, #4
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 80a6 	beq.w	8004e58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d10:	4b2a      	ldr	r3, [pc, #168]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10d      	bne.n	8004d38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d1c:	4b27      	ldr	r3, [pc, #156]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d20:	4a26      	ldr	r2, [pc, #152]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d26:	6593      	str	r3, [r2, #88]	; 0x58
 8004d28:	4b24      	ldr	r3, [pc, #144]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d30:	60bb      	str	r3, [r7, #8]
 8004d32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d34:	2301      	movs	r3, #1
 8004d36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d38:	4b21      	ldr	r3, [pc, #132]	; (8004dc0 <HAL_RCC_OscConfig+0x508>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d118      	bne.n	8004d76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d44:	4b1e      	ldr	r3, [pc, #120]	; (8004dc0 <HAL_RCC_OscConfig+0x508>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a1d      	ldr	r2, [pc, #116]	; (8004dc0 <HAL_RCC_OscConfig+0x508>)
 8004d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d50:	f7fe faae 	bl	80032b0 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d58:	f7fe faaa 	bl	80032b0 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e188      	b.n	800507c <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d6a:	4b15      	ldr	r3, [pc, #84]	; (8004dc0 <HAL_RCC_OscConfig+0x508>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0f0      	beq.n	8004d58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d108      	bne.n	8004d90 <HAL_RCC_OscConfig+0x4d8>
 8004d7e:	4b0f      	ldr	r3, [pc, #60]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d84:	4a0d      	ldr	r2, [pc, #52]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004d86:	f043 0301 	orr.w	r3, r3, #1
 8004d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d8e:	e029      	b.n	8004de4 <HAL_RCC_OscConfig+0x52c>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	2b05      	cmp	r3, #5
 8004d96:	d115      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x50c>
 8004d98:	4b08      	ldr	r3, [pc, #32]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9e:	4a07      	ldr	r2, [pc, #28]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004da0:	f043 0304 	orr.w	r3, r3, #4
 8004da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004da8:	4b04      	ldr	r3, [pc, #16]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dae:	4a03      	ldr	r2, [pc, #12]	; (8004dbc <HAL_RCC_OscConfig+0x504>)
 8004db0:	f043 0301 	orr.w	r3, r3, #1
 8004db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004db8:	e014      	b.n	8004de4 <HAL_RCC_OscConfig+0x52c>
 8004dba:	bf00      	nop
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	40007000 	.word	0x40007000
 8004dc4:	4b91      	ldr	r3, [pc, #580]	; (800500c <HAL_RCC_OscConfig+0x754>)
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dca:	4a90      	ldr	r2, [pc, #576]	; (800500c <HAL_RCC_OscConfig+0x754>)
 8004dcc:	f023 0301 	bic.w	r3, r3, #1
 8004dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004dd4:	4b8d      	ldr	r3, [pc, #564]	; (800500c <HAL_RCC_OscConfig+0x754>)
 8004dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dda:	4a8c      	ldr	r2, [pc, #560]	; (800500c <HAL_RCC_OscConfig+0x754>)
 8004ddc:	f023 0304 	bic.w	r3, r3, #4
 8004de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d016      	beq.n	8004e1a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dec:	f7fe fa60 	bl	80032b0 <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004df2:	e00a      	b.n	8004e0a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df4:	f7fe fa5c 	bl	80032b0 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e138      	b.n	800507c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e0a:	4b80      	ldr	r3, [pc, #512]	; (800500c <HAL_RCC_OscConfig+0x754>)
 8004e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0ed      	beq.n	8004df4 <HAL_RCC_OscConfig+0x53c>
 8004e18:	e015      	b.n	8004e46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1a:	f7fe fa49 	bl	80032b0 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e20:	e00a      	b.n	8004e38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e22:	f7fe fa45 	bl	80032b0 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e121      	b.n	800507c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e38:	4b74      	ldr	r3, [pc, #464]	; (800500c <HAL_RCC_OscConfig+0x754>)
 8004e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1ed      	bne.n	8004e22 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e46:	7ffb      	ldrb	r3, [r7, #31]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d105      	bne.n	8004e58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e4c:	4b6f      	ldr	r3, [pc, #444]	; (800500c <HAL_RCC_OscConfig+0x754>)
 8004e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e50:	4a6e      	ldr	r2, [pc, #440]	; (800500c <HAL_RCC_OscConfig+0x754>)
 8004e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e56:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 810c 	beq.w	800507a <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	f040 80d4 	bne.w	8005014 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e6c:	4b67      	ldr	r3, [pc, #412]	; (800500c <HAL_RCC_OscConfig+0x754>)
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f003 0203 	and.w	r2, r3, #3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d130      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d127      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d11f      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004eac:	2a07      	cmp	r2, #7
 8004eae:	bf14      	ite	ne
 8004eb0:	2201      	movne	r2, #1
 8004eb2:	2200      	moveq	r2, #0
 8004eb4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d113      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec4:	085b      	lsrs	r3, r3, #1
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d109      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	085b      	lsrs	r3, r3, #1
 8004eda:	3b01      	subs	r3, #1
 8004edc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d06e      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	2b0c      	cmp	r3, #12
 8004ee6:	d069      	beq.n	8004fbc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ee8:	4b48      	ldr	r3, [pc, #288]	; (800500c <HAL_RCC_OscConfig+0x754>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d105      	bne.n	8004f00 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004ef4:	4b45      	ldr	r3, [pc, #276]	; (800500c <HAL_RCC_OscConfig+0x754>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e0bb      	b.n	800507c <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f04:	4b41      	ldr	r3, [pc, #260]	; (800500c <HAL_RCC_OscConfig+0x754>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a40      	ldr	r2, [pc, #256]	; (800500c <HAL_RCC_OscConfig+0x754>)
 8004f0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f0e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f10:	f7fe f9ce 	bl	80032b0 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f18:	f7fe f9ca 	bl	80032b0 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e0a8      	b.n	800507c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f2a:	4b38      	ldr	r3, [pc, #224]	; (800500c <HAL_RCC_OscConfig+0x754>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1f0      	bne.n	8004f18 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f36:	4b35      	ldr	r3, [pc, #212]	; (800500c <HAL_RCC_OscConfig+0x754>)
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	4b35      	ldr	r3, [pc, #212]	; (8005010 <HAL_RCC_OscConfig+0x758>)
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f46:	3a01      	subs	r2, #1
 8004f48:	0112      	lsls	r2, r2, #4
 8004f4a:	4311      	orrs	r1, r2
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f50:	0212      	lsls	r2, r2, #8
 8004f52:	4311      	orrs	r1, r2
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f58:	0852      	lsrs	r2, r2, #1
 8004f5a:	3a01      	subs	r2, #1
 8004f5c:	0552      	lsls	r2, r2, #21
 8004f5e:	4311      	orrs	r1, r2
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f64:	0852      	lsrs	r2, r2, #1
 8004f66:	3a01      	subs	r2, #1
 8004f68:	0652      	lsls	r2, r2, #25
 8004f6a:	4311      	orrs	r1, r2
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f70:	0912      	lsrs	r2, r2, #4
 8004f72:	0452      	lsls	r2, r2, #17
 8004f74:	430a      	orrs	r2, r1
 8004f76:	4925      	ldr	r1, [pc, #148]	; (800500c <HAL_RCC_OscConfig+0x754>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f7c:	4b23      	ldr	r3, [pc, #140]	; (800500c <HAL_RCC_OscConfig+0x754>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a22      	ldr	r2, [pc, #136]	; (800500c <HAL_RCC_OscConfig+0x754>)
 8004f82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f88:	4b20      	ldr	r3, [pc, #128]	; (800500c <HAL_RCC_OscConfig+0x754>)
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	4a1f      	ldr	r2, [pc, #124]	; (800500c <HAL_RCC_OscConfig+0x754>)
 8004f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f94:	f7fe f98c 	bl	80032b0 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f9c:	f7fe f988 	bl	80032b0 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e066      	b.n	800507c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fae:	4b17      	ldr	r3, [pc, #92]	; (800500c <HAL_RCC_OscConfig+0x754>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0f0      	beq.n	8004f9c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fba:	e05e      	b.n	800507a <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e05d      	b.n	800507c <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fc0:	4b12      	ldr	r3, [pc, #72]	; (800500c <HAL_RCC_OscConfig+0x754>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d156      	bne.n	800507a <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004fcc:	4b0f      	ldr	r3, [pc, #60]	; (800500c <HAL_RCC_OscConfig+0x754>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a0e      	ldr	r2, [pc, #56]	; (800500c <HAL_RCC_OscConfig+0x754>)
 8004fd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fd8:	4b0c      	ldr	r3, [pc, #48]	; (800500c <HAL_RCC_OscConfig+0x754>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	4a0b      	ldr	r2, [pc, #44]	; (800500c <HAL_RCC_OscConfig+0x754>)
 8004fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fe2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004fe4:	f7fe f964 	bl	80032b0 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fec:	f7fe f960 	bl	80032b0 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e03e      	b.n	800507c <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ffe:	4b03      	ldr	r3, [pc, #12]	; (800500c <HAL_RCC_OscConfig+0x754>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0f0      	beq.n	8004fec <HAL_RCC_OscConfig+0x734>
 800500a:	e036      	b.n	800507a <HAL_RCC_OscConfig+0x7c2>
 800500c:	40021000 	.word	0x40021000
 8005010:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	2b0c      	cmp	r3, #12
 8005018:	d02d      	beq.n	8005076 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800501a:	4b1a      	ldr	r3, [pc, #104]	; (8005084 <HAL_RCC_OscConfig+0x7cc>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a19      	ldr	r2, [pc, #100]	; (8005084 <HAL_RCC_OscConfig+0x7cc>)
 8005020:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005024:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005026:	4b17      	ldr	r3, [pc, #92]	; (8005084 <HAL_RCC_OscConfig+0x7cc>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d105      	bne.n	800503e <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005032:	4b14      	ldr	r3, [pc, #80]	; (8005084 <HAL_RCC_OscConfig+0x7cc>)
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	4a13      	ldr	r2, [pc, #76]	; (8005084 <HAL_RCC_OscConfig+0x7cc>)
 8005038:	f023 0303 	bic.w	r3, r3, #3
 800503c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800503e:	4b11      	ldr	r3, [pc, #68]	; (8005084 <HAL_RCC_OscConfig+0x7cc>)
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	4a10      	ldr	r2, [pc, #64]	; (8005084 <HAL_RCC_OscConfig+0x7cc>)
 8005044:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800504c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504e:	f7fe f92f 	bl	80032b0 <HAL_GetTick>
 8005052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005054:	e008      	b.n	8005068 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005056:	f7fe f92b 	bl	80032b0 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	2b02      	cmp	r3, #2
 8005062:	d901      	bls.n	8005068 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e009      	b.n	800507c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005068:	4b06      	ldr	r3, [pc, #24]	; (8005084 <HAL_RCC_OscConfig+0x7cc>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1f0      	bne.n	8005056 <HAL_RCC_OscConfig+0x79e>
 8005074:	e001      	b.n	800507a <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e000      	b.n	800507c <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3720      	adds	r7, #32
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40021000 	.word	0x40021000

08005088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e0c8      	b.n	800522e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800509c:	4b66      	ldr	r3, [pc, #408]	; (8005238 <HAL_RCC_ClockConfig+0x1b0>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d910      	bls.n	80050cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050aa:	4b63      	ldr	r3, [pc, #396]	; (8005238 <HAL_RCC_ClockConfig+0x1b0>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f023 0207 	bic.w	r2, r3, #7
 80050b2:	4961      	ldr	r1, [pc, #388]	; (8005238 <HAL_RCC_ClockConfig+0x1b0>)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ba:	4b5f      	ldr	r3, [pc, #380]	; (8005238 <HAL_RCC_ClockConfig+0x1b0>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d001      	beq.n	80050cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e0b0      	b.n	800522e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d04c      	beq.n	8005172 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	2b03      	cmp	r3, #3
 80050de:	d107      	bne.n	80050f0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050e0:	4b56      	ldr	r3, [pc, #344]	; (800523c <HAL_RCC_ClockConfig+0x1b4>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d121      	bne.n	8005130 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e09e      	b.n	800522e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d107      	bne.n	8005108 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050f8:	4b50      	ldr	r3, [pc, #320]	; (800523c <HAL_RCC_ClockConfig+0x1b4>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d115      	bne.n	8005130 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e092      	b.n	800522e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d107      	bne.n	8005120 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005110:	4b4a      	ldr	r3, [pc, #296]	; (800523c <HAL_RCC_ClockConfig+0x1b4>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d109      	bne.n	8005130 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e086      	b.n	800522e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005120:	4b46      	ldr	r3, [pc, #280]	; (800523c <HAL_RCC_ClockConfig+0x1b4>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e07e      	b.n	800522e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005130:	4b42      	ldr	r3, [pc, #264]	; (800523c <HAL_RCC_ClockConfig+0x1b4>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f023 0203 	bic.w	r2, r3, #3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	493f      	ldr	r1, [pc, #252]	; (800523c <HAL_RCC_ClockConfig+0x1b4>)
 800513e:	4313      	orrs	r3, r2
 8005140:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005142:	f7fe f8b5 	bl	80032b0 <HAL_GetTick>
 8005146:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005148:	e00a      	b.n	8005160 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800514a:	f7fe f8b1 	bl	80032b0 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	f241 3288 	movw	r2, #5000	; 0x1388
 8005158:	4293      	cmp	r3, r2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e066      	b.n	800522e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005160:	4b36      	ldr	r3, [pc, #216]	; (800523c <HAL_RCC_ClockConfig+0x1b4>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 020c 	and.w	r2, r3, #12
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	429a      	cmp	r2, r3
 8005170:	d1eb      	bne.n	800514a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d008      	beq.n	8005190 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800517e:	4b2f      	ldr	r3, [pc, #188]	; (800523c <HAL_RCC_ClockConfig+0x1b4>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	492c      	ldr	r1, [pc, #176]	; (800523c <HAL_RCC_ClockConfig+0x1b4>)
 800518c:	4313      	orrs	r3, r2
 800518e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005190:	4b29      	ldr	r3, [pc, #164]	; (8005238 <HAL_RCC_ClockConfig+0x1b0>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d210      	bcs.n	80051c0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519e:	4b26      	ldr	r3, [pc, #152]	; (8005238 <HAL_RCC_ClockConfig+0x1b0>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f023 0207 	bic.w	r2, r3, #7
 80051a6:	4924      	ldr	r1, [pc, #144]	; (8005238 <HAL_RCC_ClockConfig+0x1b0>)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ae:	4b22      	ldr	r3, [pc, #136]	; (8005238 <HAL_RCC_ClockConfig+0x1b0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d001      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e036      	b.n	800522e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d008      	beq.n	80051de <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051cc:	4b1b      	ldr	r3, [pc, #108]	; (800523c <HAL_RCC_ClockConfig+0x1b4>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	4918      	ldr	r1, [pc, #96]	; (800523c <HAL_RCC_ClockConfig+0x1b4>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0308 	and.w	r3, r3, #8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d009      	beq.n	80051fe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051ea:	4b14      	ldr	r3, [pc, #80]	; (800523c <HAL_RCC_ClockConfig+0x1b4>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	4910      	ldr	r1, [pc, #64]	; (800523c <HAL_RCC_ClockConfig+0x1b4>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051fe:	f000 f825 	bl	800524c <HAL_RCC_GetSysClockFreq>
 8005202:	4602      	mov	r2, r0
 8005204:	4b0d      	ldr	r3, [pc, #52]	; (800523c <HAL_RCC_ClockConfig+0x1b4>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	091b      	lsrs	r3, r3, #4
 800520a:	f003 030f 	and.w	r3, r3, #15
 800520e:	490c      	ldr	r1, [pc, #48]	; (8005240 <HAL_RCC_ClockConfig+0x1b8>)
 8005210:	5ccb      	ldrb	r3, [r1, r3]
 8005212:	f003 031f 	and.w	r3, r3, #31
 8005216:	fa22 f303 	lsr.w	r3, r2, r3
 800521a:	4a0a      	ldr	r2, [pc, #40]	; (8005244 <HAL_RCC_ClockConfig+0x1bc>)
 800521c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800521e:	4b0a      	ldr	r3, [pc, #40]	; (8005248 <HAL_RCC_ClockConfig+0x1c0>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f7fd fff4 	bl	8003210 <HAL_InitTick>
 8005228:	4603      	mov	r3, r0
 800522a:	72fb      	strb	r3, [r7, #11]

  return status;
 800522c:	7afb      	ldrb	r3, [r7, #11]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40022000 	.word	0x40022000
 800523c:	40021000 	.word	0x40021000
 8005240:	0800f62c 	.word	0x0800f62c
 8005244:	2000000c 	.word	0x2000000c
 8005248:	200000ac 	.word	0x200000ac

0800524c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800524c:	b480      	push	{r7}
 800524e:	b089      	sub	sp, #36	; 0x24
 8005250:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005252:	2300      	movs	r3, #0
 8005254:	61fb      	str	r3, [r7, #28]
 8005256:	2300      	movs	r3, #0
 8005258:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800525a:	4b3e      	ldr	r3, [pc, #248]	; (8005354 <HAL_RCC_GetSysClockFreq+0x108>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f003 030c 	and.w	r3, r3, #12
 8005262:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005264:	4b3b      	ldr	r3, [pc, #236]	; (8005354 <HAL_RCC_GetSysClockFreq+0x108>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f003 0303 	and.w	r3, r3, #3
 800526c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d005      	beq.n	8005280 <HAL_RCC_GetSysClockFreq+0x34>
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	2b0c      	cmp	r3, #12
 8005278:	d121      	bne.n	80052be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d11e      	bne.n	80052be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005280:	4b34      	ldr	r3, [pc, #208]	; (8005354 <HAL_RCC_GetSysClockFreq+0x108>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b00      	cmp	r3, #0
 800528a:	d107      	bne.n	800529c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800528c:	4b31      	ldr	r3, [pc, #196]	; (8005354 <HAL_RCC_GetSysClockFreq+0x108>)
 800528e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005292:	0a1b      	lsrs	r3, r3, #8
 8005294:	f003 030f 	and.w	r3, r3, #15
 8005298:	61fb      	str	r3, [r7, #28]
 800529a:	e005      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800529c:	4b2d      	ldr	r3, [pc, #180]	; (8005354 <HAL_RCC_GetSysClockFreq+0x108>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	091b      	lsrs	r3, r3, #4
 80052a2:	f003 030f 	and.w	r3, r3, #15
 80052a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052a8:	4a2b      	ldr	r2, [pc, #172]	; (8005358 <HAL_RCC_GetSysClockFreq+0x10c>)
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10d      	bne.n	80052d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052bc:	e00a      	b.n	80052d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d102      	bne.n	80052ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052c4:	4b25      	ldr	r3, [pc, #148]	; (800535c <HAL_RCC_GetSysClockFreq+0x110>)
 80052c6:	61bb      	str	r3, [r7, #24]
 80052c8:	e004      	b.n	80052d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d101      	bne.n	80052d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052d0:	4b23      	ldr	r3, [pc, #140]	; (8005360 <HAL_RCC_GetSysClockFreq+0x114>)
 80052d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	2b0c      	cmp	r3, #12
 80052d8:	d134      	bne.n	8005344 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052da:	4b1e      	ldr	r3, [pc, #120]	; (8005354 <HAL_RCC_GetSysClockFreq+0x108>)
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f003 0303 	and.w	r3, r3, #3
 80052e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d003      	beq.n	80052f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2b03      	cmp	r3, #3
 80052ee:	d003      	beq.n	80052f8 <HAL_RCC_GetSysClockFreq+0xac>
 80052f0:	e005      	b.n	80052fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80052f2:	4b1a      	ldr	r3, [pc, #104]	; (800535c <HAL_RCC_GetSysClockFreq+0x110>)
 80052f4:	617b      	str	r3, [r7, #20]
      break;
 80052f6:	e005      	b.n	8005304 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80052f8:	4b19      	ldr	r3, [pc, #100]	; (8005360 <HAL_RCC_GetSysClockFreq+0x114>)
 80052fa:	617b      	str	r3, [r7, #20]
      break;
 80052fc:	e002      	b.n	8005304 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	617b      	str	r3, [r7, #20]
      break;
 8005302:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005304:	4b13      	ldr	r3, [pc, #76]	; (8005354 <HAL_RCC_GetSysClockFreq+0x108>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	091b      	lsrs	r3, r3, #4
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	3301      	adds	r3, #1
 8005310:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005312:	4b10      	ldr	r3, [pc, #64]	; (8005354 <HAL_RCC_GetSysClockFreq+0x108>)
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	0a1b      	lsrs	r3, r3, #8
 8005318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	fb03 f202 	mul.w	r2, r3, r2
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	fbb2 f3f3 	udiv	r3, r2, r3
 8005328:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800532a:	4b0a      	ldr	r3, [pc, #40]	; (8005354 <HAL_RCC_GetSysClockFreq+0x108>)
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	0e5b      	lsrs	r3, r3, #25
 8005330:	f003 0303 	and.w	r3, r3, #3
 8005334:	3301      	adds	r3, #1
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005342:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005344:	69bb      	ldr	r3, [r7, #24]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3724      	adds	r7, #36	; 0x24
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	40021000 	.word	0x40021000
 8005358:	0800f644 	.word	0x0800f644
 800535c:	00f42400 	.word	0x00f42400
 8005360:	007a1200 	.word	0x007a1200

08005364 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005368:	4b03      	ldr	r3, [pc, #12]	; (8005378 <HAL_RCC_GetHCLKFreq+0x14>)
 800536a:	681b      	ldr	r3, [r3, #0]
}
 800536c:	4618      	mov	r0, r3
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	2000000c 	.word	0x2000000c

0800537c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005380:	f7ff fff0 	bl	8005364 <HAL_RCC_GetHCLKFreq>
 8005384:	4602      	mov	r2, r0
 8005386:	4b06      	ldr	r3, [pc, #24]	; (80053a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	0a1b      	lsrs	r3, r3, #8
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	4904      	ldr	r1, [pc, #16]	; (80053a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005392:	5ccb      	ldrb	r3, [r1, r3]
 8005394:	f003 031f 	and.w	r3, r3, #31
 8005398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800539c:	4618      	mov	r0, r3
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	40021000 	.word	0x40021000
 80053a4:	0800f63c 	.word	0x0800f63c

080053a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053ac:	f7ff ffda 	bl	8005364 <HAL_RCC_GetHCLKFreq>
 80053b0:	4602      	mov	r2, r0
 80053b2:	4b06      	ldr	r3, [pc, #24]	; (80053cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	0adb      	lsrs	r3, r3, #11
 80053b8:	f003 0307 	and.w	r3, r3, #7
 80053bc:	4904      	ldr	r1, [pc, #16]	; (80053d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053be:	5ccb      	ldrb	r3, [r1, r3]
 80053c0:	f003 031f 	and.w	r3, r3, #31
 80053c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40021000 	.word	0x40021000
 80053d0:	0800f63c 	.word	0x0800f63c

080053d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053dc:	2300      	movs	r3, #0
 80053de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053e0:	4b2a      	ldr	r3, [pc, #168]	; (800548c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d003      	beq.n	80053f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053ec:	f7ff fa00 	bl	80047f0 <HAL_PWREx_GetVoltageRange>
 80053f0:	6178      	str	r0, [r7, #20]
 80053f2:	e014      	b.n	800541e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053f4:	4b25      	ldr	r3, [pc, #148]	; (800548c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f8:	4a24      	ldr	r2, [pc, #144]	; (800548c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053fe:	6593      	str	r3, [r2, #88]	; 0x58
 8005400:	4b22      	ldr	r3, [pc, #136]	; (800548c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800540c:	f7ff f9f0 	bl	80047f0 <HAL_PWREx_GetVoltageRange>
 8005410:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005412:	4b1e      	ldr	r3, [pc, #120]	; (800548c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005416:	4a1d      	ldr	r2, [pc, #116]	; (800548c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800541c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005424:	d10b      	bne.n	800543e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b80      	cmp	r3, #128	; 0x80
 800542a:	d919      	bls.n	8005460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2ba0      	cmp	r3, #160	; 0xa0
 8005430:	d902      	bls.n	8005438 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005432:	2302      	movs	r3, #2
 8005434:	613b      	str	r3, [r7, #16]
 8005436:	e013      	b.n	8005460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005438:	2301      	movs	r3, #1
 800543a:	613b      	str	r3, [r7, #16]
 800543c:	e010      	b.n	8005460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b80      	cmp	r3, #128	; 0x80
 8005442:	d902      	bls.n	800544a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005444:	2303      	movs	r3, #3
 8005446:	613b      	str	r3, [r7, #16]
 8005448:	e00a      	b.n	8005460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b80      	cmp	r3, #128	; 0x80
 800544e:	d102      	bne.n	8005456 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005450:	2302      	movs	r3, #2
 8005452:	613b      	str	r3, [r7, #16]
 8005454:	e004      	b.n	8005460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b70      	cmp	r3, #112	; 0x70
 800545a:	d101      	bne.n	8005460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800545c:	2301      	movs	r3, #1
 800545e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005460:	4b0b      	ldr	r3, [pc, #44]	; (8005490 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f023 0207 	bic.w	r2, r3, #7
 8005468:	4909      	ldr	r1, [pc, #36]	; (8005490 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	4313      	orrs	r3, r2
 800546e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005470:	4b07      	ldr	r3, [pc, #28]	; (8005490 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	429a      	cmp	r2, r3
 800547c:	d001      	beq.n	8005482 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e000      	b.n	8005484 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40021000 	.word	0x40021000
 8005490:	40022000 	.word	0x40022000

08005494 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800549c:	2300      	movs	r3, #0
 800549e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054a0:	2300      	movs	r3, #0
 80054a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d041      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054b8:	d02a      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80054ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054be:	d824      	bhi.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80054c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054c4:	d008      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80054c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054ca:	d81e      	bhi.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00a      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80054d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054d4:	d010      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80054d6:	e018      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054d8:	4b86      	ldr	r3, [pc, #536]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	4a85      	ldr	r2, [pc, #532]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054e4:	e015      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	3304      	adds	r3, #4
 80054ea:	2100      	movs	r1, #0
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 fabb 	bl	8005a68 <RCCEx_PLLSAI1_Config>
 80054f2:	4603      	mov	r3, r0
 80054f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054f6:	e00c      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	3320      	adds	r3, #32
 80054fc:	2100      	movs	r1, #0
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 fba6 	bl	8005c50 <RCCEx_PLLSAI2_Config>
 8005504:	4603      	mov	r3, r0
 8005506:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005508:	e003      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	74fb      	strb	r3, [r7, #19]
      break;
 800550e:	e000      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005510:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005512:	7cfb      	ldrb	r3, [r7, #19]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10b      	bne.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005518:	4b76      	ldr	r3, [pc, #472]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800551a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005526:	4973      	ldr	r1, [pc, #460]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005528:	4313      	orrs	r3, r2
 800552a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800552e:	e001      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005530:	7cfb      	ldrb	r3, [r7, #19]
 8005532:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d041      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005544:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005548:	d02a      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800554a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800554e:	d824      	bhi.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005550:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005554:	d008      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005556:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800555a:	d81e      	bhi.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00a      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005564:	d010      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005566:	e018      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005568:	4b62      	ldr	r3, [pc, #392]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	4a61      	ldr	r2, [pc, #388]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800556e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005572:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005574:	e015      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	3304      	adds	r3, #4
 800557a:	2100      	movs	r1, #0
 800557c:	4618      	mov	r0, r3
 800557e:	f000 fa73 	bl	8005a68 <RCCEx_PLLSAI1_Config>
 8005582:	4603      	mov	r3, r0
 8005584:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005586:	e00c      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	3320      	adds	r3, #32
 800558c:	2100      	movs	r1, #0
 800558e:	4618      	mov	r0, r3
 8005590:	f000 fb5e 	bl	8005c50 <RCCEx_PLLSAI2_Config>
 8005594:	4603      	mov	r3, r0
 8005596:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005598:	e003      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	74fb      	strb	r3, [r7, #19]
      break;
 800559e:	e000      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80055a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055a2:	7cfb      	ldrb	r3, [r7, #19]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10b      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80055a8:	4b52      	ldr	r3, [pc, #328]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055b6:	494f      	ldr	r1, [pc, #316]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80055be:	e001      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c0:	7cfb      	ldrb	r3, [r7, #19]
 80055c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 80a0 	beq.w	8005712 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055d2:	2300      	movs	r3, #0
 80055d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055d6:	4b47      	ldr	r3, [pc, #284]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80055e2:	2301      	movs	r3, #1
 80055e4:	e000      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80055e6:	2300      	movs	r3, #0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00d      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ec:	4b41      	ldr	r3, [pc, #260]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f0:	4a40      	ldr	r2, [pc, #256]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055f6:	6593      	str	r3, [r2, #88]	; 0x58
 80055f8:	4b3e      	ldr	r3, [pc, #248]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005600:	60bb      	str	r3, [r7, #8]
 8005602:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005604:	2301      	movs	r3, #1
 8005606:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005608:	4b3b      	ldr	r3, [pc, #236]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a3a      	ldr	r2, [pc, #232]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800560e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005612:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005614:	f7fd fe4c 	bl	80032b0 <HAL_GetTick>
 8005618:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800561a:	e009      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800561c:	f7fd fe48 	bl	80032b0 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d902      	bls.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	74fb      	strb	r3, [r7, #19]
        break;
 800562e:	e005      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005630:	4b31      	ldr	r3, [pc, #196]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005638:	2b00      	cmp	r3, #0
 800563a:	d0ef      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800563c:	7cfb      	ldrb	r3, [r7, #19]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d15c      	bne.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005642:	4b2c      	ldr	r3, [pc, #176]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005648:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800564c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d01f      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	429a      	cmp	r2, r3
 800565e:	d019      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005660:	4b24      	ldr	r3, [pc, #144]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800566a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800566c:	4b21      	ldr	r3, [pc, #132]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800566e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005672:	4a20      	ldr	r2, [pc, #128]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800567c:	4b1d      	ldr	r3, [pc, #116]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800567e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005682:	4a1c      	ldr	r2, [pc, #112]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800568c:	4a19      	ldr	r2, [pc, #100]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	d016      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569e:	f7fd fe07 	bl	80032b0 <HAL_GetTick>
 80056a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056a4:	e00b      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a6:	f7fd fe03 	bl	80032b0 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d902      	bls.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	74fb      	strb	r3, [r7, #19]
            break;
 80056bc:	e006      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056be:	4b0d      	ldr	r3, [pc, #52]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0ec      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80056cc:	7cfb      	ldrb	r3, [r7, #19]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10c      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056d2:	4b08      	ldr	r3, [pc, #32]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056e2:	4904      	ldr	r1, [pc, #16]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80056ea:	e009      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056ec:	7cfb      	ldrb	r3, [r7, #19]
 80056ee:	74bb      	strb	r3, [r7, #18]
 80056f0:	e006      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80056f2:	bf00      	nop
 80056f4:	40021000 	.word	0x40021000
 80056f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056fc:	7cfb      	ldrb	r3, [r7, #19]
 80056fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005700:	7c7b      	ldrb	r3, [r7, #17]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d105      	bne.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005706:	4b9e      	ldr	r3, [pc, #632]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800570a:	4a9d      	ldr	r2, [pc, #628]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800570c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005710:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00a      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800571e:	4b98      	ldr	r3, [pc, #608]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005724:	f023 0203 	bic.w	r2, r3, #3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572c:	4994      	ldr	r1, [pc, #592]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800572e:	4313      	orrs	r3, r2
 8005730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00a      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005740:	4b8f      	ldr	r3, [pc, #572]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005746:	f023 020c 	bic.w	r2, r3, #12
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800574e:	498c      	ldr	r1, [pc, #560]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005750:	4313      	orrs	r3, r2
 8005752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0304 	and.w	r3, r3, #4
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00a      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005762:	4b87      	ldr	r3, [pc, #540]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005768:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005770:	4983      	ldr	r1, [pc, #524]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005772:	4313      	orrs	r3, r2
 8005774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0308 	and.w	r3, r3, #8
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00a      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005784:	4b7e      	ldr	r3, [pc, #504]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005792:	497b      	ldr	r1, [pc, #492]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005794:	4313      	orrs	r3, r2
 8005796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0310 	and.w	r3, r3, #16
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00a      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80057a6:	4b76      	ldr	r3, [pc, #472]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057b4:	4972      	ldr	r1, [pc, #456]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0320 	and.w	r3, r3, #32
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00a      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057c8:	4b6d      	ldr	r3, [pc, #436]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d6:	496a      	ldr	r1, [pc, #424]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00a      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057ea:	4b65      	ldr	r3, [pc, #404]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f8:	4961      	ldr	r1, [pc, #388]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00a      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800580c:	4b5c      	ldr	r3, [pc, #368]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800580e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005812:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800581a:	4959      	ldr	r1, [pc, #356]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800581c:	4313      	orrs	r3, r2
 800581e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800582e:	4b54      	ldr	r3, [pc, #336]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005834:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800583c:	4950      	ldr	r1, [pc, #320]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800583e:	4313      	orrs	r3, r2
 8005840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00a      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005850:	4b4b      	ldr	r3, [pc, #300]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005856:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585e:	4948      	ldr	r1, [pc, #288]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005860:	4313      	orrs	r3, r2
 8005862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005872:	4b43      	ldr	r3, [pc, #268]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005878:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005880:	493f      	ldr	r1, [pc, #252]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005882:	4313      	orrs	r3, r2
 8005884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d028      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005894:	4b3a      	ldr	r3, [pc, #232]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058a2:	4937      	ldr	r1, [pc, #220]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058b2:	d106      	bne.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058b4:	4b32      	ldr	r3, [pc, #200]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	4a31      	ldr	r2, [pc, #196]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058be:	60d3      	str	r3, [r2, #12]
 80058c0:	e011      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058ca:	d10c      	bne.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3304      	adds	r3, #4
 80058d0:	2101      	movs	r1, #1
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 f8c8 	bl	8005a68 <RCCEx_PLLSAI1_Config>
 80058d8:	4603      	mov	r3, r0
 80058da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80058dc:	7cfb      	ldrb	r3, [r7, #19]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80058e2:	7cfb      	ldrb	r3, [r7, #19]
 80058e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d028      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80058f2:	4b23      	ldr	r3, [pc, #140]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005900:	491f      	ldr	r1, [pc, #124]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005902:	4313      	orrs	r3, r2
 8005904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005910:	d106      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005912:	4b1b      	ldr	r3, [pc, #108]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	4a1a      	ldr	r2, [pc, #104]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005918:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800591c:	60d3      	str	r3, [r2, #12]
 800591e:	e011      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005924:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005928:	d10c      	bne.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	3304      	adds	r3, #4
 800592e:	2101      	movs	r1, #1
 8005930:	4618      	mov	r0, r3
 8005932:	f000 f899 	bl	8005a68 <RCCEx_PLLSAI1_Config>
 8005936:	4603      	mov	r3, r0
 8005938:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800593a:	7cfb      	ldrb	r3, [r7, #19]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d001      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005940:	7cfb      	ldrb	r3, [r7, #19]
 8005942:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d02b      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005950:	4b0b      	ldr	r3, [pc, #44]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005956:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800595e:	4908      	ldr	r1, [pc, #32]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005960:	4313      	orrs	r3, r2
 8005962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800596a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800596e:	d109      	bne.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005970:	4b03      	ldr	r3, [pc, #12]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	4a02      	ldr	r2, [pc, #8]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005976:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800597a:	60d3      	str	r3, [r2, #12]
 800597c:	e014      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800597e:	bf00      	nop
 8005980:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005988:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800598c:	d10c      	bne.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	3304      	adds	r3, #4
 8005992:	2101      	movs	r1, #1
 8005994:	4618      	mov	r0, r3
 8005996:	f000 f867 	bl	8005a68 <RCCEx_PLLSAI1_Config>
 800599a:	4603      	mov	r3, r0
 800599c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800599e:	7cfb      	ldrb	r3, [r7, #19]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80059a4:	7cfb      	ldrb	r3, [r7, #19]
 80059a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d02f      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059b4:	4b2b      	ldr	r3, [pc, #172]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80059b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059c2:	4928      	ldr	r1, [pc, #160]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059d2:	d10d      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3304      	adds	r3, #4
 80059d8:	2102      	movs	r1, #2
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 f844 	bl	8005a68 <RCCEx_PLLSAI1_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059e4:	7cfb      	ldrb	r3, [r7, #19]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d014      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80059ea:	7cfb      	ldrb	r3, [r7, #19]
 80059ec:	74bb      	strb	r3, [r7, #18]
 80059ee:	e011      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059f8:	d10c      	bne.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	3320      	adds	r3, #32
 80059fe:	2102      	movs	r1, #2
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 f925 	bl	8005c50 <RCCEx_PLLSAI2_Config>
 8005a06:	4603      	mov	r3, r0
 8005a08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a0a:	7cfb      	ldrb	r3, [r7, #19]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005a10:	7cfb      	ldrb	r3, [r7, #19]
 8005a12:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00a      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a20:	4b10      	ldr	r3, [pc, #64]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a26:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a2e:	490d      	ldr	r1, [pc, #52]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00b      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a42:	4b08      	ldr	r3, [pc, #32]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a52:	4904      	ldr	r1, [pc, #16]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005a5a:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3718      	adds	r7, #24
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	40021000 	.word	0x40021000

08005a68 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a72:	2300      	movs	r3, #0
 8005a74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a76:	4b75      	ldr	r3, [pc, #468]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d018      	beq.n	8005ab4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005a82:	4b72      	ldr	r3, [pc, #456]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	f003 0203 	and.w	r2, r3, #3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d10d      	bne.n	8005aae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
       ||
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d009      	beq.n	8005aae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005a9a:	4b6c      	ldr	r3, [pc, #432]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	091b      	lsrs	r3, r3, #4
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
       ||
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d047      	beq.n	8005b3e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	73fb      	strb	r3, [r7, #15]
 8005ab2:	e044      	b.n	8005b3e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b03      	cmp	r3, #3
 8005aba:	d018      	beq.n	8005aee <RCCEx_PLLSAI1_Config+0x86>
 8005abc:	2b03      	cmp	r3, #3
 8005abe:	d825      	bhi.n	8005b0c <RCCEx_PLLSAI1_Config+0xa4>
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d002      	beq.n	8005aca <RCCEx_PLLSAI1_Config+0x62>
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d009      	beq.n	8005adc <RCCEx_PLLSAI1_Config+0x74>
 8005ac8:	e020      	b.n	8005b0c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005aca:	4b60      	ldr	r3, [pc, #384]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d11d      	bne.n	8005b12 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ada:	e01a      	b.n	8005b12 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005adc:	4b5b      	ldr	r3, [pc, #364]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d116      	bne.n	8005b16 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005aec:	e013      	b.n	8005b16 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005aee:	4b57      	ldr	r3, [pc, #348]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10f      	bne.n	8005b1a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005afa:	4b54      	ldr	r3, [pc, #336]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d109      	bne.n	8005b1a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b0a:	e006      	b.n	8005b1a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b10:	e004      	b.n	8005b1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b12:	bf00      	nop
 8005b14:	e002      	b.n	8005b1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b16:	bf00      	nop
 8005b18:	e000      	b.n	8005b1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10d      	bne.n	8005b3e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b22:	4b4a      	ldr	r3, [pc, #296]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6819      	ldr	r1, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	3b01      	subs	r3, #1
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	430b      	orrs	r3, r1
 8005b38:	4944      	ldr	r1, [pc, #272]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b3e:	7bfb      	ldrb	r3, [r7, #15]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d17d      	bne.n	8005c40 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005b44:	4b41      	ldr	r3, [pc, #260]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a40      	ldr	r2, [pc, #256]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b50:	f7fd fbae 	bl	80032b0 <HAL_GetTick>
 8005b54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b56:	e009      	b.n	8005b6c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b58:	f7fd fbaa 	bl	80032b0 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d902      	bls.n	8005b6c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	73fb      	strb	r3, [r7, #15]
        break;
 8005b6a:	e005      	b.n	8005b78 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b6c:	4b37      	ldr	r3, [pc, #220]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1ef      	bne.n	8005b58 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005b78:	7bfb      	ldrb	r3, [r7, #15]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d160      	bne.n	8005c40 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d111      	bne.n	8005ba8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b84:	4b31      	ldr	r3, [pc, #196]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	6892      	ldr	r2, [r2, #8]
 8005b94:	0211      	lsls	r1, r2, #8
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	68d2      	ldr	r2, [r2, #12]
 8005b9a:	0912      	lsrs	r2, r2, #4
 8005b9c:	0452      	lsls	r2, r2, #17
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	492a      	ldr	r1, [pc, #168]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	610b      	str	r3, [r1, #16]
 8005ba6:	e027      	b.n	8005bf8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d112      	bne.n	8005bd4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bae:	4b27      	ldr	r3, [pc, #156]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005bb6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	6892      	ldr	r2, [r2, #8]
 8005bbe:	0211      	lsls	r1, r2, #8
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6912      	ldr	r2, [r2, #16]
 8005bc4:	0852      	lsrs	r2, r2, #1
 8005bc6:	3a01      	subs	r2, #1
 8005bc8:	0552      	lsls	r2, r2, #21
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	491f      	ldr	r1, [pc, #124]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	610b      	str	r3, [r1, #16]
 8005bd2:	e011      	b.n	8005bf8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bd4:	4b1d      	ldr	r3, [pc, #116]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005bdc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6892      	ldr	r2, [r2, #8]
 8005be4:	0211      	lsls	r1, r2, #8
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	6952      	ldr	r2, [r2, #20]
 8005bea:	0852      	lsrs	r2, r2, #1
 8005bec:	3a01      	subs	r2, #1
 8005bee:	0652      	lsls	r2, r2, #25
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	4916      	ldr	r1, [pc, #88]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005bf8:	4b14      	ldr	r3, [pc, #80]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a13      	ldr	r2, [pc, #76]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bfe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c04:	f7fd fb54 	bl	80032b0 <HAL_GetTick>
 8005c08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c0a:	e009      	b.n	8005c20 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c0c:	f7fd fb50 	bl	80032b0 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d902      	bls.n	8005c20 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	73fb      	strb	r3, [r7, #15]
          break;
 8005c1e:	e005      	b.n	8005c2c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c20:	4b0a      	ldr	r3, [pc, #40]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d0ef      	beq.n	8005c0c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d106      	bne.n	8005c40 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005c32:	4b06      	ldr	r3, [pc, #24]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c34:	691a      	ldr	r2, [r3, #16]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	4904      	ldr	r1, [pc, #16]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	40021000 	.word	0x40021000

08005c50 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c5e:	4b6a      	ldr	r3, [pc, #424]	; (8005e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d018      	beq.n	8005c9c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005c6a:	4b67      	ldr	r3, [pc, #412]	; (8005e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	f003 0203 	and.w	r2, r3, #3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d10d      	bne.n	8005c96 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
       ||
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d009      	beq.n	8005c96 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005c82:	4b61      	ldr	r3, [pc, #388]	; (8005e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	091b      	lsrs	r3, r3, #4
 8005c88:	f003 0307 	and.w	r3, r3, #7
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
       ||
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d047      	beq.n	8005d26 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	73fb      	strb	r3, [r7, #15]
 8005c9a:	e044      	b.n	8005d26 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b03      	cmp	r3, #3
 8005ca2:	d018      	beq.n	8005cd6 <RCCEx_PLLSAI2_Config+0x86>
 8005ca4:	2b03      	cmp	r3, #3
 8005ca6:	d825      	bhi.n	8005cf4 <RCCEx_PLLSAI2_Config+0xa4>
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d002      	beq.n	8005cb2 <RCCEx_PLLSAI2_Config+0x62>
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d009      	beq.n	8005cc4 <RCCEx_PLLSAI2_Config+0x74>
 8005cb0:	e020      	b.n	8005cf4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005cb2:	4b55      	ldr	r3, [pc, #340]	; (8005e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d11d      	bne.n	8005cfa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cc2:	e01a      	b.n	8005cfa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005cc4:	4b50      	ldr	r3, [pc, #320]	; (8005e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d116      	bne.n	8005cfe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cd4:	e013      	b.n	8005cfe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005cd6:	4b4c      	ldr	r3, [pc, #304]	; (8005e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10f      	bne.n	8005d02 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ce2:	4b49      	ldr	r3, [pc, #292]	; (8005e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d109      	bne.n	8005d02 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005cf2:	e006      	b.n	8005d02 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8005cf8:	e004      	b.n	8005d04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005cfa:	bf00      	nop
 8005cfc:	e002      	b.n	8005d04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005cfe:	bf00      	nop
 8005d00:	e000      	b.n	8005d04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005d02:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d04:	7bfb      	ldrb	r3, [r7, #15]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10d      	bne.n	8005d26 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d0a:	4b3f      	ldr	r3, [pc, #252]	; (8005e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6819      	ldr	r1, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	011b      	lsls	r3, r3, #4
 8005d1e:	430b      	orrs	r3, r1
 8005d20:	4939      	ldr	r1, [pc, #228]	; (8005e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d26:	7bfb      	ldrb	r3, [r7, #15]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d167      	bne.n	8005dfc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005d2c:	4b36      	ldr	r3, [pc, #216]	; (8005e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a35      	ldr	r2, [pc, #212]	; (8005e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d38:	f7fd faba 	bl	80032b0 <HAL_GetTick>
 8005d3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d3e:	e009      	b.n	8005d54 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d40:	f7fd fab6 	bl	80032b0 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d902      	bls.n	8005d54 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	73fb      	strb	r3, [r7, #15]
        break;
 8005d52:	e005      	b.n	8005d60 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d54:	4b2c      	ldr	r3, [pc, #176]	; (8005e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1ef      	bne.n	8005d40 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d14a      	bne.n	8005dfc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d111      	bne.n	8005d90 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d6c:	4b26      	ldr	r3, [pc, #152]	; (8005e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6892      	ldr	r2, [r2, #8]
 8005d7c:	0211      	lsls	r1, r2, #8
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	68d2      	ldr	r2, [r2, #12]
 8005d82:	0912      	lsrs	r2, r2, #4
 8005d84:	0452      	lsls	r2, r2, #17
 8005d86:	430a      	orrs	r2, r1
 8005d88:	491f      	ldr	r1, [pc, #124]	; (8005e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	614b      	str	r3, [r1, #20]
 8005d8e:	e011      	b.n	8005db4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d90:	4b1d      	ldr	r3, [pc, #116]	; (8005e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005d98:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6892      	ldr	r2, [r2, #8]
 8005da0:	0211      	lsls	r1, r2, #8
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	6912      	ldr	r2, [r2, #16]
 8005da6:	0852      	lsrs	r2, r2, #1
 8005da8:	3a01      	subs	r2, #1
 8005daa:	0652      	lsls	r2, r2, #25
 8005dac:	430a      	orrs	r2, r1
 8005dae:	4916      	ldr	r1, [pc, #88]	; (8005e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005db4:	4b14      	ldr	r3, [pc, #80]	; (8005e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a13      	ldr	r2, [pc, #76]	; (8005e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dbe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc0:	f7fd fa76 	bl	80032b0 <HAL_GetTick>
 8005dc4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005dc6:	e009      	b.n	8005ddc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005dc8:	f7fd fa72 	bl	80032b0 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d902      	bls.n	8005ddc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	73fb      	strb	r3, [r7, #15]
          break;
 8005dda:	e005      	b.n	8005de8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ddc:	4b0a      	ldr	r3, [pc, #40]	; (8005e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d0ef      	beq.n	8005dc8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005de8:	7bfb      	ldrb	r3, [r7, #15]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d106      	bne.n	8005dfc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005dee:	4b06      	ldr	r3, [pc, #24]	; (8005e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005df0:	695a      	ldr	r2, [r3, #20]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	4904      	ldr	r1, [pc, #16]	; (8005e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	40021000 	.word	0x40021000

08005e0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e049      	b.n	8005eb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d106      	bne.n	8005e38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7fc faca 	bl	80023cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	3304      	adds	r3, #4
 8005e48:	4619      	mov	r1, r3
 8005e4a:	4610      	mov	r0, r2
 8005e4c:	f000 fdca 	bl	80069e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
	...

08005ebc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d001      	beq.n	8005ed4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e04f      	b.n	8005f74 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68da      	ldr	r2, [r3, #12]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f042 0201 	orr.w	r2, r2, #1
 8005eea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a23      	ldr	r2, [pc, #140]	; (8005f80 <HAL_TIM_Base_Start_IT+0xc4>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d01d      	beq.n	8005f32 <HAL_TIM_Base_Start_IT+0x76>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005efe:	d018      	beq.n	8005f32 <HAL_TIM_Base_Start_IT+0x76>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a1f      	ldr	r2, [pc, #124]	; (8005f84 <HAL_TIM_Base_Start_IT+0xc8>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d013      	beq.n	8005f32 <HAL_TIM_Base_Start_IT+0x76>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a1e      	ldr	r2, [pc, #120]	; (8005f88 <HAL_TIM_Base_Start_IT+0xcc>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d00e      	beq.n	8005f32 <HAL_TIM_Base_Start_IT+0x76>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a1c      	ldr	r2, [pc, #112]	; (8005f8c <HAL_TIM_Base_Start_IT+0xd0>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d009      	beq.n	8005f32 <HAL_TIM_Base_Start_IT+0x76>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a1b      	ldr	r2, [pc, #108]	; (8005f90 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d004      	beq.n	8005f32 <HAL_TIM_Base_Start_IT+0x76>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a19      	ldr	r2, [pc, #100]	; (8005f94 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d115      	bne.n	8005f5e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689a      	ldr	r2, [r3, #8]
 8005f38:	4b17      	ldr	r3, [pc, #92]	; (8005f98 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2b06      	cmp	r3, #6
 8005f42:	d015      	beq.n	8005f70 <HAL_TIM_Base_Start_IT+0xb4>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f4a:	d011      	beq.n	8005f70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0201 	orr.w	r2, r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f5c:	e008      	b.n	8005f70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f042 0201 	orr.w	r2, r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]
 8005f6e:	e000      	b.n	8005f72 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	40012c00 	.word	0x40012c00
 8005f84:	40000400 	.word	0x40000400
 8005f88:	40000800 	.word	0x40000800
 8005f8c:	40000c00 	.word	0x40000c00
 8005f90:	40013400 	.word	0x40013400
 8005f94:	40014000 	.word	0x40014000
 8005f98:	00010007 	.word	0x00010007

08005f9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e049      	b.n	8006042 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d106      	bne.n	8005fc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f841 	bl	800604a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	3304      	adds	r3, #4
 8005fd8:	4619      	mov	r1, r3
 8005fda:	4610      	mov	r0, r2
 8005fdc:	f000 fd02 	bl	80069e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800604a:	b480      	push	{r7}
 800604c:	b083      	sub	sp, #12
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006052:	bf00      	nop
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
	...

08006060 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d109      	bne.n	8006084 <HAL_TIM_PWM_Start+0x24>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b01      	cmp	r3, #1
 800607a:	bf14      	ite	ne
 800607c:	2301      	movne	r3, #1
 800607e:	2300      	moveq	r3, #0
 8006080:	b2db      	uxtb	r3, r3
 8006082:	e03c      	b.n	80060fe <HAL_TIM_PWM_Start+0x9e>
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	2b04      	cmp	r3, #4
 8006088:	d109      	bne.n	800609e <HAL_TIM_PWM_Start+0x3e>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b01      	cmp	r3, #1
 8006094:	bf14      	ite	ne
 8006096:	2301      	movne	r3, #1
 8006098:	2300      	moveq	r3, #0
 800609a:	b2db      	uxtb	r3, r3
 800609c:	e02f      	b.n	80060fe <HAL_TIM_PWM_Start+0x9e>
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	2b08      	cmp	r3, #8
 80060a2:	d109      	bne.n	80060b8 <HAL_TIM_PWM_Start+0x58>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	bf14      	ite	ne
 80060b0:	2301      	movne	r3, #1
 80060b2:	2300      	moveq	r3, #0
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	e022      	b.n	80060fe <HAL_TIM_PWM_Start+0x9e>
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	2b0c      	cmp	r3, #12
 80060bc:	d109      	bne.n	80060d2 <HAL_TIM_PWM_Start+0x72>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	bf14      	ite	ne
 80060ca:	2301      	movne	r3, #1
 80060cc:	2300      	moveq	r3, #0
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	e015      	b.n	80060fe <HAL_TIM_PWM_Start+0x9e>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b10      	cmp	r3, #16
 80060d6:	d109      	bne.n	80060ec <HAL_TIM_PWM_Start+0x8c>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	bf14      	ite	ne
 80060e4:	2301      	movne	r3, #1
 80060e6:	2300      	moveq	r3, #0
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	e008      	b.n	80060fe <HAL_TIM_PWM_Start+0x9e>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	bf14      	ite	ne
 80060f8:	2301      	movne	r3, #1
 80060fa:	2300      	moveq	r3, #0
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e09c      	b.n	8006240 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d104      	bne.n	8006116 <HAL_TIM_PWM_Start+0xb6>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2202      	movs	r2, #2
 8006110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006114:	e023      	b.n	800615e <HAL_TIM_PWM_Start+0xfe>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b04      	cmp	r3, #4
 800611a:	d104      	bne.n	8006126 <HAL_TIM_PWM_Start+0xc6>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2202      	movs	r2, #2
 8006120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006124:	e01b      	b.n	800615e <HAL_TIM_PWM_Start+0xfe>
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b08      	cmp	r3, #8
 800612a:	d104      	bne.n	8006136 <HAL_TIM_PWM_Start+0xd6>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006134:	e013      	b.n	800615e <HAL_TIM_PWM_Start+0xfe>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b0c      	cmp	r3, #12
 800613a:	d104      	bne.n	8006146 <HAL_TIM_PWM_Start+0xe6>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2202      	movs	r2, #2
 8006140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006144:	e00b      	b.n	800615e <HAL_TIM_PWM_Start+0xfe>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b10      	cmp	r3, #16
 800614a:	d104      	bne.n	8006156 <HAL_TIM_PWM_Start+0xf6>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2202      	movs	r2, #2
 8006150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006154:	e003      	b.n	800615e <HAL_TIM_PWM_Start+0xfe>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2202      	movs	r2, #2
 800615a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2201      	movs	r2, #1
 8006164:	6839      	ldr	r1, [r7, #0]
 8006166:	4618      	mov	r0, r3
 8006168:	f001 f846 	bl	80071f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a35      	ldr	r2, [pc, #212]	; (8006248 <HAL_TIM_PWM_Start+0x1e8>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d013      	beq.n	800619e <HAL_TIM_PWM_Start+0x13e>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a34      	ldr	r2, [pc, #208]	; (800624c <HAL_TIM_PWM_Start+0x1ec>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d00e      	beq.n	800619e <HAL_TIM_PWM_Start+0x13e>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a32      	ldr	r2, [pc, #200]	; (8006250 <HAL_TIM_PWM_Start+0x1f0>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d009      	beq.n	800619e <HAL_TIM_PWM_Start+0x13e>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a31      	ldr	r2, [pc, #196]	; (8006254 <HAL_TIM_PWM_Start+0x1f4>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d004      	beq.n	800619e <HAL_TIM_PWM_Start+0x13e>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a2f      	ldr	r2, [pc, #188]	; (8006258 <HAL_TIM_PWM_Start+0x1f8>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d101      	bne.n	80061a2 <HAL_TIM_PWM_Start+0x142>
 800619e:	2301      	movs	r3, #1
 80061a0:	e000      	b.n	80061a4 <HAL_TIM_PWM_Start+0x144>
 80061a2:	2300      	movs	r3, #0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d007      	beq.n	80061b8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061b6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a22      	ldr	r2, [pc, #136]	; (8006248 <HAL_TIM_PWM_Start+0x1e8>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d01d      	beq.n	80061fe <HAL_TIM_PWM_Start+0x19e>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ca:	d018      	beq.n	80061fe <HAL_TIM_PWM_Start+0x19e>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a22      	ldr	r2, [pc, #136]	; (800625c <HAL_TIM_PWM_Start+0x1fc>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d013      	beq.n	80061fe <HAL_TIM_PWM_Start+0x19e>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a21      	ldr	r2, [pc, #132]	; (8006260 <HAL_TIM_PWM_Start+0x200>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d00e      	beq.n	80061fe <HAL_TIM_PWM_Start+0x19e>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a1f      	ldr	r2, [pc, #124]	; (8006264 <HAL_TIM_PWM_Start+0x204>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d009      	beq.n	80061fe <HAL_TIM_PWM_Start+0x19e>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a17      	ldr	r2, [pc, #92]	; (800624c <HAL_TIM_PWM_Start+0x1ec>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d004      	beq.n	80061fe <HAL_TIM_PWM_Start+0x19e>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a15      	ldr	r2, [pc, #84]	; (8006250 <HAL_TIM_PWM_Start+0x1f0>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d115      	bne.n	800622a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	4b18      	ldr	r3, [pc, #96]	; (8006268 <HAL_TIM_PWM_Start+0x208>)
 8006206:	4013      	ands	r3, r2
 8006208:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b06      	cmp	r3, #6
 800620e:	d015      	beq.n	800623c <HAL_TIM_PWM_Start+0x1dc>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006216:	d011      	beq.n	800623c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 0201 	orr.w	r2, r2, #1
 8006226:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006228:	e008      	b.n	800623c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f042 0201 	orr.w	r2, r2, #1
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	e000      	b.n	800623e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800623c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	40012c00 	.word	0x40012c00
 800624c:	40013400 	.word	0x40013400
 8006250:	40014000 	.word	0x40014000
 8006254:	40014400 	.word	0x40014400
 8006258:	40014800 	.word	0x40014800
 800625c:	40000400 	.word	0x40000400
 8006260:	40000800 	.word	0x40000800
 8006264:	40000c00 	.word	0x40000c00
 8006268:	00010007 	.word	0x00010007

0800626c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2200      	movs	r2, #0
 800627c:	6839      	ldr	r1, [r7, #0]
 800627e:	4618      	mov	r0, r3
 8006280:	f000 ffba 	bl	80071f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a3e      	ldr	r2, [pc, #248]	; (8006384 <HAL_TIM_PWM_Stop+0x118>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d013      	beq.n	80062b6 <HAL_TIM_PWM_Stop+0x4a>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a3d      	ldr	r2, [pc, #244]	; (8006388 <HAL_TIM_PWM_Stop+0x11c>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d00e      	beq.n	80062b6 <HAL_TIM_PWM_Stop+0x4a>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a3b      	ldr	r2, [pc, #236]	; (800638c <HAL_TIM_PWM_Stop+0x120>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d009      	beq.n	80062b6 <HAL_TIM_PWM_Stop+0x4a>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a3a      	ldr	r2, [pc, #232]	; (8006390 <HAL_TIM_PWM_Stop+0x124>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d004      	beq.n	80062b6 <HAL_TIM_PWM_Stop+0x4a>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a38      	ldr	r2, [pc, #224]	; (8006394 <HAL_TIM_PWM_Stop+0x128>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d101      	bne.n	80062ba <HAL_TIM_PWM_Stop+0x4e>
 80062b6:	2301      	movs	r3, #1
 80062b8:	e000      	b.n	80062bc <HAL_TIM_PWM_Stop+0x50>
 80062ba:	2300      	movs	r3, #0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d017      	beq.n	80062f0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6a1a      	ldr	r2, [r3, #32]
 80062c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80062ca:	4013      	ands	r3, r2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10f      	bne.n	80062f0 <HAL_TIM_PWM_Stop+0x84>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6a1a      	ldr	r2, [r3, #32]
 80062d6:	f240 4344 	movw	r3, #1092	; 0x444
 80062da:	4013      	ands	r3, r2
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d107      	bne.n	80062f0 <HAL_TIM_PWM_Stop+0x84>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6a1a      	ldr	r2, [r3, #32]
 80062f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80062fa:	4013      	ands	r3, r2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10f      	bne.n	8006320 <HAL_TIM_PWM_Stop+0xb4>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6a1a      	ldr	r2, [r3, #32]
 8006306:	f240 4344 	movw	r3, #1092	; 0x444
 800630a:	4013      	ands	r3, r2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d107      	bne.n	8006320 <HAL_TIM_PWM_Stop+0xb4>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 0201 	bic.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d104      	bne.n	8006330 <HAL_TIM_PWM_Stop+0xc4>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800632e:	e023      	b.n	8006378 <HAL_TIM_PWM_Stop+0x10c>
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	2b04      	cmp	r3, #4
 8006334:	d104      	bne.n	8006340 <HAL_TIM_PWM_Stop+0xd4>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800633e:	e01b      	b.n	8006378 <HAL_TIM_PWM_Stop+0x10c>
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	2b08      	cmp	r3, #8
 8006344:	d104      	bne.n	8006350 <HAL_TIM_PWM_Stop+0xe4>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800634e:	e013      	b.n	8006378 <HAL_TIM_PWM_Stop+0x10c>
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2b0c      	cmp	r3, #12
 8006354:	d104      	bne.n	8006360 <HAL_TIM_PWM_Stop+0xf4>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800635e:	e00b      	b.n	8006378 <HAL_TIM_PWM_Stop+0x10c>
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2b10      	cmp	r3, #16
 8006364:	d104      	bne.n	8006370 <HAL_TIM_PWM_Stop+0x104>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800636e:	e003      	b.n	8006378 <HAL_TIM_PWM_Stop+0x10c>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	40012c00 	.word	0x40012c00
 8006388:	40013400 	.word	0x40013400
 800638c:	40014000 	.word	0x40014000
 8006390:	40014400 	.word	0x40014400
 8006394:	40014800 	.word	0x40014800

08006398 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d122      	bne.n	80063f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d11b      	bne.n	80063f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f06f 0202 	mvn.w	r2, #2
 80063c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	f003 0303 	and.w	r3, r3, #3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d003      	beq.n	80063e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fae3 	bl	80069a6 <HAL_TIM_IC_CaptureCallback>
 80063e0:	e005      	b.n	80063ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fad5 	bl	8006992 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fae6 	bl	80069ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	f003 0304 	and.w	r3, r3, #4
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d122      	bne.n	8006448 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	2b04      	cmp	r3, #4
 800640e:	d11b      	bne.n	8006448 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f06f 0204 	mvn.w	r2, #4
 8006418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2202      	movs	r2, #2
 800641e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fab9 	bl	80069a6 <HAL_TIM_IC_CaptureCallback>
 8006434:	e005      	b.n	8006442 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 faab 	bl	8006992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fabc 	bl	80069ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f003 0308 	and.w	r3, r3, #8
 8006452:	2b08      	cmp	r3, #8
 8006454:	d122      	bne.n	800649c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f003 0308 	and.w	r3, r3, #8
 8006460:	2b08      	cmp	r3, #8
 8006462:	d11b      	bne.n	800649c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f06f 0208 	mvn.w	r2, #8
 800646c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2204      	movs	r2, #4
 8006472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	f003 0303 	and.w	r3, r3, #3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fa8f 	bl	80069a6 <HAL_TIM_IC_CaptureCallback>
 8006488:	e005      	b.n	8006496 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fa81 	bl	8006992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 fa92 	bl	80069ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f003 0310 	and.w	r3, r3, #16
 80064a6:	2b10      	cmp	r3, #16
 80064a8:	d122      	bne.n	80064f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f003 0310 	and.w	r3, r3, #16
 80064b4:	2b10      	cmp	r3, #16
 80064b6:	d11b      	bne.n	80064f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f06f 0210 	mvn.w	r2, #16
 80064c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2208      	movs	r2, #8
 80064c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	69db      	ldr	r3, [r3, #28]
 80064ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fa65 	bl	80069a6 <HAL_TIM_IC_CaptureCallback>
 80064dc:	e005      	b.n	80064ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fa57 	bl	8006992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fa68 	bl	80069ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d10e      	bne.n	800651c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	2b01      	cmp	r3, #1
 800650a:	d107      	bne.n	800651c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f06f 0201 	mvn.w	r2, #1
 8006514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7fb fbfe 	bl	8001d18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006526:	2b80      	cmp	r3, #128	; 0x80
 8006528:	d10e      	bne.n	8006548 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006534:	2b80      	cmp	r3, #128	; 0x80
 8006536:	d107      	bne.n	8006548 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 ff10 	bl	8007368 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006556:	d10e      	bne.n	8006576 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006562:	2b80      	cmp	r3, #128	; 0x80
 8006564:	d107      	bne.n	8006576 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800656e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 ff03 	bl	800737c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006580:	2b40      	cmp	r3, #64	; 0x40
 8006582:	d10e      	bne.n	80065a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658e:	2b40      	cmp	r3, #64	; 0x40
 8006590:	d107      	bne.n	80065a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800659a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fa16 	bl	80069ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	f003 0320 	and.w	r3, r3, #32
 80065ac:	2b20      	cmp	r3, #32
 80065ae:	d10e      	bne.n	80065ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	f003 0320 	and.w	r3, r3, #32
 80065ba:	2b20      	cmp	r3, #32
 80065bc:	d107      	bne.n	80065ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f06f 0220 	mvn.w	r2, #32
 80065c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fec3 	bl	8007354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065ce:	bf00      	nop
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
	...

080065d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d101      	bne.n	80065f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065f2:	2302      	movs	r3, #2
 80065f4:	e0ff      	b.n	80067f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b14      	cmp	r3, #20
 8006602:	f200 80f0 	bhi.w	80067e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006606:	a201      	add	r2, pc, #4	; (adr r2, 800660c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660c:	08006661 	.word	0x08006661
 8006610:	080067e7 	.word	0x080067e7
 8006614:	080067e7 	.word	0x080067e7
 8006618:	080067e7 	.word	0x080067e7
 800661c:	080066a1 	.word	0x080066a1
 8006620:	080067e7 	.word	0x080067e7
 8006624:	080067e7 	.word	0x080067e7
 8006628:	080067e7 	.word	0x080067e7
 800662c:	080066e3 	.word	0x080066e3
 8006630:	080067e7 	.word	0x080067e7
 8006634:	080067e7 	.word	0x080067e7
 8006638:	080067e7 	.word	0x080067e7
 800663c:	08006723 	.word	0x08006723
 8006640:	080067e7 	.word	0x080067e7
 8006644:	080067e7 	.word	0x080067e7
 8006648:	080067e7 	.word	0x080067e7
 800664c:	08006765 	.word	0x08006765
 8006650:	080067e7 	.word	0x080067e7
 8006654:	080067e7 	.word	0x080067e7
 8006658:	080067e7 	.word	0x080067e7
 800665c:	080067a5 	.word	0x080067a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68b9      	ldr	r1, [r7, #8]
 8006666:	4618      	mov	r0, r3
 8006668:	f000 fa56 	bl	8006b18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	699a      	ldr	r2, [r3, #24]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 0208 	orr.w	r2, r2, #8
 800667a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	699a      	ldr	r2, [r3, #24]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f022 0204 	bic.w	r2, r2, #4
 800668a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6999      	ldr	r1, [r3, #24]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	691a      	ldr	r2, [r3, #16]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	619a      	str	r2, [r3, #24]
      break;
 800669e:	e0a5      	b.n	80067ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68b9      	ldr	r1, [r7, #8]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 fac6 	bl	8006c38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	699a      	ldr	r2, [r3, #24]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	699a      	ldr	r2, [r3, #24]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6999      	ldr	r1, [r3, #24]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	021a      	lsls	r2, r3, #8
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	430a      	orrs	r2, r1
 80066de:	619a      	str	r2, [r3, #24]
      break;
 80066e0:	e084      	b.n	80067ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68b9      	ldr	r1, [r7, #8]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 fb2f 	bl	8006d4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	69da      	ldr	r2, [r3, #28]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f042 0208 	orr.w	r2, r2, #8
 80066fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	69da      	ldr	r2, [r3, #28]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f022 0204 	bic.w	r2, r2, #4
 800670c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69d9      	ldr	r1, [r3, #28]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	691a      	ldr	r2, [r3, #16]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	430a      	orrs	r2, r1
 800671e:	61da      	str	r2, [r3, #28]
      break;
 8006720:	e064      	b.n	80067ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68b9      	ldr	r1, [r7, #8]
 8006728:	4618      	mov	r0, r3
 800672a:	f000 fb97 	bl	8006e5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	69da      	ldr	r2, [r3, #28]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800673c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	69da      	ldr	r2, [r3, #28]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800674c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69d9      	ldr	r1, [r3, #28]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	021a      	lsls	r2, r3, #8
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	430a      	orrs	r2, r1
 8006760:	61da      	str	r2, [r3, #28]
      break;
 8006762:	e043      	b.n	80067ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68b9      	ldr	r1, [r7, #8]
 800676a:	4618      	mov	r0, r3
 800676c:	f000 fbe0 	bl	8006f30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0208 	orr.w	r2, r2, #8
 800677e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f022 0204 	bic.w	r2, r2, #4
 800678e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	691a      	ldr	r2, [r3, #16]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	430a      	orrs	r2, r1
 80067a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067a2:	e023      	b.n	80067ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68b9      	ldr	r1, [r7, #8]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f000 fc24 	bl	8006ff8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	021a      	lsls	r2, r3, #8
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067e4:	e002      	b.n	80067ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	75fb      	strb	r3, [r7, #23]
      break;
 80067ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3718      	adds	r7, #24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop

08006800 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800680a:	2300      	movs	r3, #0
 800680c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006814:	2b01      	cmp	r3, #1
 8006816:	d101      	bne.n	800681c <HAL_TIM_ConfigClockSource+0x1c>
 8006818:	2302      	movs	r3, #2
 800681a:	e0b6      	b.n	800698a <HAL_TIM_ConfigClockSource+0x18a>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2202      	movs	r2, #2
 8006828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800683a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800683e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006846:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68ba      	ldr	r2, [r7, #8]
 800684e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006858:	d03e      	beq.n	80068d8 <HAL_TIM_ConfigClockSource+0xd8>
 800685a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800685e:	f200 8087 	bhi.w	8006970 <HAL_TIM_ConfigClockSource+0x170>
 8006862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006866:	f000 8086 	beq.w	8006976 <HAL_TIM_ConfigClockSource+0x176>
 800686a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800686e:	d87f      	bhi.n	8006970 <HAL_TIM_ConfigClockSource+0x170>
 8006870:	2b70      	cmp	r3, #112	; 0x70
 8006872:	d01a      	beq.n	80068aa <HAL_TIM_ConfigClockSource+0xaa>
 8006874:	2b70      	cmp	r3, #112	; 0x70
 8006876:	d87b      	bhi.n	8006970 <HAL_TIM_ConfigClockSource+0x170>
 8006878:	2b60      	cmp	r3, #96	; 0x60
 800687a:	d050      	beq.n	800691e <HAL_TIM_ConfigClockSource+0x11e>
 800687c:	2b60      	cmp	r3, #96	; 0x60
 800687e:	d877      	bhi.n	8006970 <HAL_TIM_ConfigClockSource+0x170>
 8006880:	2b50      	cmp	r3, #80	; 0x50
 8006882:	d03c      	beq.n	80068fe <HAL_TIM_ConfigClockSource+0xfe>
 8006884:	2b50      	cmp	r3, #80	; 0x50
 8006886:	d873      	bhi.n	8006970 <HAL_TIM_ConfigClockSource+0x170>
 8006888:	2b40      	cmp	r3, #64	; 0x40
 800688a:	d058      	beq.n	800693e <HAL_TIM_ConfigClockSource+0x13e>
 800688c:	2b40      	cmp	r3, #64	; 0x40
 800688e:	d86f      	bhi.n	8006970 <HAL_TIM_ConfigClockSource+0x170>
 8006890:	2b30      	cmp	r3, #48	; 0x30
 8006892:	d064      	beq.n	800695e <HAL_TIM_ConfigClockSource+0x15e>
 8006894:	2b30      	cmp	r3, #48	; 0x30
 8006896:	d86b      	bhi.n	8006970 <HAL_TIM_ConfigClockSource+0x170>
 8006898:	2b20      	cmp	r3, #32
 800689a:	d060      	beq.n	800695e <HAL_TIM_ConfigClockSource+0x15e>
 800689c:	2b20      	cmp	r3, #32
 800689e:	d867      	bhi.n	8006970 <HAL_TIM_ConfigClockSource+0x170>
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d05c      	beq.n	800695e <HAL_TIM_ConfigClockSource+0x15e>
 80068a4:	2b10      	cmp	r3, #16
 80068a6:	d05a      	beq.n	800695e <HAL_TIM_ConfigClockSource+0x15e>
 80068a8:	e062      	b.n	8006970 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6818      	ldr	r0, [r3, #0]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	6899      	ldr	r1, [r3, #8]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	685a      	ldr	r2, [r3, #4]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	f000 fc7d 	bl	80071b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	609a      	str	r2, [r3, #8]
      break;
 80068d6:	e04f      	b.n	8006978 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6818      	ldr	r0, [r3, #0]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	6899      	ldr	r1, [r3, #8]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f000 fc66 	bl	80071b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689a      	ldr	r2, [r3, #8]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068fa:	609a      	str	r2, [r3, #8]
      break;
 80068fc:	e03c      	b.n	8006978 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6818      	ldr	r0, [r3, #0]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	6859      	ldr	r1, [r3, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	461a      	mov	r2, r3
 800690c:	f000 fbda 	bl	80070c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2150      	movs	r1, #80	; 0x50
 8006916:	4618      	mov	r0, r3
 8006918:	f000 fc33 	bl	8007182 <TIM_ITRx_SetConfig>
      break;
 800691c:	e02c      	b.n	8006978 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6818      	ldr	r0, [r3, #0]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	6859      	ldr	r1, [r3, #4]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	461a      	mov	r2, r3
 800692c:	f000 fbf9 	bl	8007122 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2160      	movs	r1, #96	; 0x60
 8006936:	4618      	mov	r0, r3
 8006938:	f000 fc23 	bl	8007182 <TIM_ITRx_SetConfig>
      break;
 800693c:	e01c      	b.n	8006978 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6818      	ldr	r0, [r3, #0]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	6859      	ldr	r1, [r3, #4]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	461a      	mov	r2, r3
 800694c:	f000 fbba 	bl	80070c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2140      	movs	r1, #64	; 0x40
 8006956:	4618      	mov	r0, r3
 8006958:	f000 fc13 	bl	8007182 <TIM_ITRx_SetConfig>
      break;
 800695c:	e00c      	b.n	8006978 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4619      	mov	r1, r3
 8006968:	4610      	mov	r0, r2
 800696a:	f000 fc0a 	bl	8007182 <TIM_ITRx_SetConfig>
      break;
 800696e:	e003      	b.n	8006978 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	73fb      	strb	r3, [r7, #15]
      break;
 8006974:	e000      	b.n	8006978 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006976:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006988:	7bfb      	ldrb	r3, [r7, #15]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800699a:	bf00      	nop
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b083      	sub	sp, #12
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069ae:	bf00      	nop
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069ba:	b480      	push	{r7}
 80069bc:	b083      	sub	sp, #12
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069c2:	bf00      	nop
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b083      	sub	sp, #12
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069d6:	bf00      	nop
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
	...

080069e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a40      	ldr	r2, [pc, #256]	; (8006af8 <TIM_Base_SetConfig+0x114>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d013      	beq.n	8006a24 <TIM_Base_SetConfig+0x40>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a02:	d00f      	beq.n	8006a24 <TIM_Base_SetConfig+0x40>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a3d      	ldr	r2, [pc, #244]	; (8006afc <TIM_Base_SetConfig+0x118>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d00b      	beq.n	8006a24 <TIM_Base_SetConfig+0x40>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a3c      	ldr	r2, [pc, #240]	; (8006b00 <TIM_Base_SetConfig+0x11c>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d007      	beq.n	8006a24 <TIM_Base_SetConfig+0x40>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a3b      	ldr	r2, [pc, #236]	; (8006b04 <TIM_Base_SetConfig+0x120>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d003      	beq.n	8006a24 <TIM_Base_SetConfig+0x40>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a3a      	ldr	r2, [pc, #232]	; (8006b08 <TIM_Base_SetConfig+0x124>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d108      	bne.n	8006a36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a2f      	ldr	r2, [pc, #188]	; (8006af8 <TIM_Base_SetConfig+0x114>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d01f      	beq.n	8006a7e <TIM_Base_SetConfig+0x9a>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a44:	d01b      	beq.n	8006a7e <TIM_Base_SetConfig+0x9a>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a2c      	ldr	r2, [pc, #176]	; (8006afc <TIM_Base_SetConfig+0x118>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d017      	beq.n	8006a7e <TIM_Base_SetConfig+0x9a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a2b      	ldr	r2, [pc, #172]	; (8006b00 <TIM_Base_SetConfig+0x11c>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d013      	beq.n	8006a7e <TIM_Base_SetConfig+0x9a>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a2a      	ldr	r2, [pc, #168]	; (8006b04 <TIM_Base_SetConfig+0x120>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d00f      	beq.n	8006a7e <TIM_Base_SetConfig+0x9a>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a29      	ldr	r2, [pc, #164]	; (8006b08 <TIM_Base_SetConfig+0x124>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d00b      	beq.n	8006a7e <TIM_Base_SetConfig+0x9a>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a28      	ldr	r2, [pc, #160]	; (8006b0c <TIM_Base_SetConfig+0x128>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d007      	beq.n	8006a7e <TIM_Base_SetConfig+0x9a>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a27      	ldr	r2, [pc, #156]	; (8006b10 <TIM_Base_SetConfig+0x12c>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d003      	beq.n	8006a7e <TIM_Base_SetConfig+0x9a>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a26      	ldr	r2, [pc, #152]	; (8006b14 <TIM_Base_SetConfig+0x130>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d108      	bne.n	8006a90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	695b      	ldr	r3, [r3, #20]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	689a      	ldr	r2, [r3, #8]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a10      	ldr	r2, [pc, #64]	; (8006af8 <TIM_Base_SetConfig+0x114>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d00f      	beq.n	8006adc <TIM_Base_SetConfig+0xf8>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a12      	ldr	r2, [pc, #72]	; (8006b08 <TIM_Base_SetConfig+0x124>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d00b      	beq.n	8006adc <TIM_Base_SetConfig+0xf8>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a11      	ldr	r2, [pc, #68]	; (8006b0c <TIM_Base_SetConfig+0x128>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d007      	beq.n	8006adc <TIM_Base_SetConfig+0xf8>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a10      	ldr	r2, [pc, #64]	; (8006b10 <TIM_Base_SetConfig+0x12c>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d003      	beq.n	8006adc <TIM_Base_SetConfig+0xf8>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a0f      	ldr	r2, [pc, #60]	; (8006b14 <TIM_Base_SetConfig+0x130>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d103      	bne.n	8006ae4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	691a      	ldr	r2, [r3, #16]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	615a      	str	r2, [r3, #20]
}
 8006aea:	bf00      	nop
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	40012c00 	.word	0x40012c00
 8006afc:	40000400 	.word	0x40000400
 8006b00:	40000800 	.word	0x40000800
 8006b04:	40000c00 	.word	0x40000c00
 8006b08:	40013400 	.word	0x40013400
 8006b0c:	40014000 	.word	0x40014000
 8006b10:	40014400 	.word	0x40014400
 8006b14:	40014800 	.word	0x40014800

08006b18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	f023 0201 	bic.w	r2, r3, #1
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f023 0303 	bic.w	r3, r3, #3
 8006b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f023 0302 	bic.w	r3, r3, #2
 8006b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a2c      	ldr	r2, [pc, #176]	; (8006c24 <TIM_OC1_SetConfig+0x10c>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d00f      	beq.n	8006b98 <TIM_OC1_SetConfig+0x80>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a2b      	ldr	r2, [pc, #172]	; (8006c28 <TIM_OC1_SetConfig+0x110>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d00b      	beq.n	8006b98 <TIM_OC1_SetConfig+0x80>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a2a      	ldr	r2, [pc, #168]	; (8006c2c <TIM_OC1_SetConfig+0x114>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d007      	beq.n	8006b98 <TIM_OC1_SetConfig+0x80>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a29      	ldr	r2, [pc, #164]	; (8006c30 <TIM_OC1_SetConfig+0x118>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d003      	beq.n	8006b98 <TIM_OC1_SetConfig+0x80>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a28      	ldr	r2, [pc, #160]	; (8006c34 <TIM_OC1_SetConfig+0x11c>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d10c      	bne.n	8006bb2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f023 0308 	bic.w	r3, r3, #8
 8006b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	f023 0304 	bic.w	r3, r3, #4
 8006bb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a1b      	ldr	r2, [pc, #108]	; (8006c24 <TIM_OC1_SetConfig+0x10c>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d00f      	beq.n	8006bda <TIM_OC1_SetConfig+0xc2>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a1a      	ldr	r2, [pc, #104]	; (8006c28 <TIM_OC1_SetConfig+0x110>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d00b      	beq.n	8006bda <TIM_OC1_SetConfig+0xc2>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a19      	ldr	r2, [pc, #100]	; (8006c2c <TIM_OC1_SetConfig+0x114>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d007      	beq.n	8006bda <TIM_OC1_SetConfig+0xc2>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a18      	ldr	r2, [pc, #96]	; (8006c30 <TIM_OC1_SetConfig+0x118>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d003      	beq.n	8006bda <TIM_OC1_SetConfig+0xc2>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a17      	ldr	r2, [pc, #92]	; (8006c34 <TIM_OC1_SetConfig+0x11c>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d111      	bne.n	8006bfe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	621a      	str	r2, [r3, #32]
}
 8006c18:	bf00      	nop
 8006c1a:	371c      	adds	r7, #28
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	40012c00 	.word	0x40012c00
 8006c28:	40013400 	.word	0x40013400
 8006c2c:	40014000 	.word	0x40014000
 8006c30:	40014400 	.word	0x40014400
 8006c34:	40014800 	.word	0x40014800

08006c38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	f023 0210 	bic.w	r2, r3, #16
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	021b      	lsls	r3, r3, #8
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f023 0320 	bic.w	r3, r3, #32
 8006c86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	011b      	lsls	r3, r3, #4
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a28      	ldr	r2, [pc, #160]	; (8006d38 <TIM_OC2_SetConfig+0x100>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d003      	beq.n	8006ca4 <TIM_OC2_SetConfig+0x6c>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a27      	ldr	r2, [pc, #156]	; (8006d3c <TIM_OC2_SetConfig+0x104>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d10d      	bne.n	8006cc0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006caa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	011b      	lsls	r3, r3, #4
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a1d      	ldr	r2, [pc, #116]	; (8006d38 <TIM_OC2_SetConfig+0x100>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d00f      	beq.n	8006ce8 <TIM_OC2_SetConfig+0xb0>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a1c      	ldr	r2, [pc, #112]	; (8006d3c <TIM_OC2_SetConfig+0x104>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d00b      	beq.n	8006ce8 <TIM_OC2_SetConfig+0xb0>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a1b      	ldr	r2, [pc, #108]	; (8006d40 <TIM_OC2_SetConfig+0x108>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d007      	beq.n	8006ce8 <TIM_OC2_SetConfig+0xb0>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a1a      	ldr	r2, [pc, #104]	; (8006d44 <TIM_OC2_SetConfig+0x10c>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d003      	beq.n	8006ce8 <TIM_OC2_SetConfig+0xb0>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a19      	ldr	r2, [pc, #100]	; (8006d48 <TIM_OC2_SetConfig+0x110>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d113      	bne.n	8006d10 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	621a      	str	r2, [r3, #32]
}
 8006d2a:	bf00      	nop
 8006d2c:	371c      	adds	r7, #28
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	40012c00 	.word	0x40012c00
 8006d3c:	40013400 	.word	0x40013400
 8006d40:	40014000 	.word	0x40014000
 8006d44:	40014400 	.word	0x40014400
 8006d48:	40014800 	.word	0x40014800

08006d4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b087      	sub	sp, #28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f023 0303 	bic.w	r3, r3, #3
 8006d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	021b      	lsls	r3, r3, #8
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a27      	ldr	r2, [pc, #156]	; (8006e48 <TIM_OC3_SetConfig+0xfc>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d003      	beq.n	8006db6 <TIM_OC3_SetConfig+0x6a>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a26      	ldr	r2, [pc, #152]	; (8006e4c <TIM_OC3_SetConfig+0x100>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d10d      	bne.n	8006dd2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	021b      	lsls	r3, r3, #8
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a1c      	ldr	r2, [pc, #112]	; (8006e48 <TIM_OC3_SetConfig+0xfc>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d00f      	beq.n	8006dfa <TIM_OC3_SetConfig+0xae>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a1b      	ldr	r2, [pc, #108]	; (8006e4c <TIM_OC3_SetConfig+0x100>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d00b      	beq.n	8006dfa <TIM_OC3_SetConfig+0xae>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a1a      	ldr	r2, [pc, #104]	; (8006e50 <TIM_OC3_SetConfig+0x104>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d007      	beq.n	8006dfa <TIM_OC3_SetConfig+0xae>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a19      	ldr	r2, [pc, #100]	; (8006e54 <TIM_OC3_SetConfig+0x108>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d003      	beq.n	8006dfa <TIM_OC3_SetConfig+0xae>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a18      	ldr	r2, [pc, #96]	; (8006e58 <TIM_OC3_SetConfig+0x10c>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d113      	bne.n	8006e22 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	011b      	lsls	r3, r3, #4
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	011b      	lsls	r3, r3, #4
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	621a      	str	r2, [r3, #32]
}
 8006e3c:	bf00      	nop
 8006e3e:	371c      	adds	r7, #28
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	40012c00 	.word	0x40012c00
 8006e4c:	40013400 	.word	0x40013400
 8006e50:	40014000 	.word	0x40014000
 8006e54:	40014400 	.word	0x40014400
 8006e58:	40014800 	.word	0x40014800

08006e5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	021b      	lsls	r3, r3, #8
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006eaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	031b      	lsls	r3, r3, #12
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a18      	ldr	r2, [pc, #96]	; (8006f1c <TIM_OC4_SetConfig+0xc0>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d00f      	beq.n	8006ee0 <TIM_OC4_SetConfig+0x84>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a17      	ldr	r2, [pc, #92]	; (8006f20 <TIM_OC4_SetConfig+0xc4>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d00b      	beq.n	8006ee0 <TIM_OC4_SetConfig+0x84>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a16      	ldr	r2, [pc, #88]	; (8006f24 <TIM_OC4_SetConfig+0xc8>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d007      	beq.n	8006ee0 <TIM_OC4_SetConfig+0x84>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a15      	ldr	r2, [pc, #84]	; (8006f28 <TIM_OC4_SetConfig+0xcc>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d003      	beq.n	8006ee0 <TIM_OC4_SetConfig+0x84>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a14      	ldr	r2, [pc, #80]	; (8006f2c <TIM_OC4_SetConfig+0xd0>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d109      	bne.n	8006ef4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ee6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	019b      	lsls	r3, r3, #6
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	621a      	str	r2, [r3, #32]
}
 8006f0e:	bf00      	nop
 8006f10:	371c      	adds	r7, #28
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	40012c00 	.word	0x40012c00
 8006f20:	40013400 	.word	0x40013400
 8006f24:	40014000 	.word	0x40014000
 8006f28:	40014400 	.word	0x40014400
 8006f2c:	40014800 	.word	0x40014800

08006f30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006f74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	041b      	lsls	r3, r3, #16
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a17      	ldr	r2, [pc, #92]	; (8006fe4 <TIM_OC5_SetConfig+0xb4>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d00f      	beq.n	8006faa <TIM_OC5_SetConfig+0x7a>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a16      	ldr	r2, [pc, #88]	; (8006fe8 <TIM_OC5_SetConfig+0xb8>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d00b      	beq.n	8006faa <TIM_OC5_SetConfig+0x7a>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a15      	ldr	r2, [pc, #84]	; (8006fec <TIM_OC5_SetConfig+0xbc>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d007      	beq.n	8006faa <TIM_OC5_SetConfig+0x7a>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a14      	ldr	r2, [pc, #80]	; (8006ff0 <TIM_OC5_SetConfig+0xc0>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d003      	beq.n	8006faa <TIM_OC5_SetConfig+0x7a>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a13      	ldr	r2, [pc, #76]	; (8006ff4 <TIM_OC5_SetConfig+0xc4>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d109      	bne.n	8006fbe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	021b      	lsls	r3, r3, #8
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	685a      	ldr	r2, [r3, #4]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	621a      	str	r2, [r3, #32]
}
 8006fd8:	bf00      	nop
 8006fda:	371c      	adds	r7, #28
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr
 8006fe4:	40012c00 	.word	0x40012c00
 8006fe8:	40013400 	.word	0x40013400
 8006fec:	40014000 	.word	0x40014000
 8006ff0:	40014400 	.word	0x40014400
 8006ff4:	40014800 	.word	0x40014800

08006ff8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800701e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800702a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	021b      	lsls	r3, r3, #8
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	4313      	orrs	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800703e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	051b      	lsls	r3, r3, #20
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	4313      	orrs	r3, r2
 800704a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a18      	ldr	r2, [pc, #96]	; (80070b0 <TIM_OC6_SetConfig+0xb8>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d00f      	beq.n	8007074 <TIM_OC6_SetConfig+0x7c>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a17      	ldr	r2, [pc, #92]	; (80070b4 <TIM_OC6_SetConfig+0xbc>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d00b      	beq.n	8007074 <TIM_OC6_SetConfig+0x7c>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a16      	ldr	r2, [pc, #88]	; (80070b8 <TIM_OC6_SetConfig+0xc0>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d007      	beq.n	8007074 <TIM_OC6_SetConfig+0x7c>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a15      	ldr	r2, [pc, #84]	; (80070bc <TIM_OC6_SetConfig+0xc4>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d003      	beq.n	8007074 <TIM_OC6_SetConfig+0x7c>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a14      	ldr	r2, [pc, #80]	; (80070c0 <TIM_OC6_SetConfig+0xc8>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d109      	bne.n	8007088 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800707a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	695b      	ldr	r3, [r3, #20]
 8007080:	029b      	lsls	r3, r3, #10
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	4313      	orrs	r3, r2
 8007086:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	621a      	str	r2, [r3, #32]
}
 80070a2:	bf00      	nop
 80070a4:	371c      	adds	r7, #28
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	40012c00 	.word	0x40012c00
 80070b4:	40013400 	.word	0x40013400
 80070b8:	40014000 	.word	0x40014000
 80070bc:	40014400 	.word	0x40014400
 80070c0:	40014800 	.word	0x40014800

080070c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b087      	sub	sp, #28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	f023 0201 	bic.w	r2, r3, #1
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	011b      	lsls	r3, r3, #4
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f023 030a 	bic.w	r3, r3, #10
 8007100:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	4313      	orrs	r3, r2
 8007108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	621a      	str	r2, [r3, #32]
}
 8007116:	bf00      	nop
 8007118:	371c      	adds	r7, #28
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007122:	b480      	push	{r7}
 8007124:	b087      	sub	sp, #28
 8007126:	af00      	add	r7, sp, #0
 8007128:	60f8      	str	r0, [r7, #12]
 800712a:	60b9      	str	r1, [r7, #8]
 800712c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	f023 0210 	bic.w	r2, r3, #16
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6a1b      	ldr	r3, [r3, #32]
 8007144:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800714c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	031b      	lsls	r3, r3, #12
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	4313      	orrs	r3, r2
 8007156:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800715e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	011b      	lsls	r3, r3, #4
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	4313      	orrs	r3, r2
 8007168:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	621a      	str	r2, [r3, #32]
}
 8007176:	bf00      	nop
 8007178:	371c      	adds	r7, #28
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007182:	b480      	push	{r7}
 8007184:	b085      	sub	sp, #20
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
 800718a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007198:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4313      	orrs	r3, r2
 80071a0:	f043 0307 	orr.w	r3, r3, #7
 80071a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	609a      	str	r2, [r3, #8]
}
 80071ac:	bf00      	nop
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b087      	sub	sp, #28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
 80071c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	021a      	lsls	r2, r3, #8
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	431a      	orrs	r2, r3
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	4313      	orrs	r3, r2
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	609a      	str	r2, [r3, #8]
}
 80071ec:	bf00      	nop
 80071ee:	371c      	adds	r7, #28
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	f003 031f 	and.w	r3, r3, #31
 800720a:	2201      	movs	r2, #1
 800720c:	fa02 f303 	lsl.w	r3, r2, r3
 8007210:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6a1a      	ldr	r2, [r3, #32]
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	43db      	mvns	r3, r3
 800721a:	401a      	ands	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6a1a      	ldr	r2, [r3, #32]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	f003 031f 	and.w	r3, r3, #31
 800722a:	6879      	ldr	r1, [r7, #4]
 800722c:	fa01 f303 	lsl.w	r3, r1, r3
 8007230:	431a      	orrs	r2, r3
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	621a      	str	r2, [r3, #32]
}
 8007236:	bf00      	nop
 8007238:	371c      	adds	r7, #28
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
	...

08007244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007254:	2b01      	cmp	r3, #1
 8007256:	d101      	bne.n	800725c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007258:	2302      	movs	r3, #2
 800725a:	e068      	b.n	800732e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2202      	movs	r2, #2
 8007268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a2e      	ldr	r2, [pc, #184]	; (800733c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d004      	beq.n	8007290 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a2d      	ldr	r2, [pc, #180]	; (8007340 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d108      	bne.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007296:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	4313      	orrs	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a1e      	ldr	r2, [pc, #120]	; (800733c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d01d      	beq.n	8007302 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ce:	d018      	beq.n	8007302 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a1b      	ldr	r2, [pc, #108]	; (8007344 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d013      	beq.n	8007302 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a1a      	ldr	r2, [pc, #104]	; (8007348 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d00e      	beq.n	8007302 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a18      	ldr	r2, [pc, #96]	; (800734c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d009      	beq.n	8007302 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a13      	ldr	r2, [pc, #76]	; (8007340 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d004      	beq.n	8007302 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a14      	ldr	r2, [pc, #80]	; (8007350 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d10c      	bne.n	800731c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007308:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	4313      	orrs	r3, r2
 8007312:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	40012c00 	.word	0x40012c00
 8007340:	40013400 	.word	0x40013400
 8007344:	40000400 	.word	0x40000400
 8007348:	40000800 	.word	0x40000800
 800734c:	40000c00 	.word	0x40000c00
 8007350:	40014000 	.word	0x40014000

08007354 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e040      	b.n	8007424 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d106      	bne.n	80073b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7fb f878 	bl	80024a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2224      	movs	r2, #36	; 0x24
 80073bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f022 0201 	bic.w	r2, r2, #1
 80073cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fb9a 	bl	8007b08 <UART_SetConfig>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d101      	bne.n	80073de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e022      	b.n	8007424 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d002      	beq.n	80073ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 fe46 	bl	8008078 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689a      	ldr	r2, [r3, #8]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800740a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f042 0201 	orr.w	r2, r2, #1
 800741a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fecd 	bl	80081bc <UART_CheckIdleState>
 8007422:	4603      	mov	r3, r0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800742c:	b480      	push	{r7}
 800742e:	b08b      	sub	sp, #44	; 0x2c
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	4613      	mov	r3, r2
 8007438:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800743e:	2b20      	cmp	r3, #32
 8007440:	d156      	bne.n	80074f0 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d002      	beq.n	800744e <HAL_UART_Transmit_IT+0x22>
 8007448:	88fb      	ldrh	r3, [r7, #6]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d101      	bne.n	8007452 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e04f      	b.n	80074f2 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007458:	2b01      	cmp	r3, #1
 800745a:	d101      	bne.n	8007460 <HAL_UART_Transmit_IT+0x34>
 800745c:	2302      	movs	r3, #2
 800745e:	e048      	b.n	80074f2 <HAL_UART_Transmit_IT+0xc6>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	68ba      	ldr	r2, [r7, #8]
 800746c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	88fa      	ldrh	r2, [r7, #6]
 8007472:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	88fa      	ldrh	r2, [r7, #6]
 800747a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2221      	movs	r2, #33	; 0x21
 8007490:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800749a:	d107      	bne.n	80074ac <HAL_UART_Transmit_IT+0x80>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d103      	bne.n	80074ac <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4a16      	ldr	r2, [pc, #88]	; (8007500 <HAL_UART_Transmit_IT+0xd4>)
 80074a8:	669a      	str	r2, [r3, #104]	; 0x68
 80074aa:	e002      	b.n	80074b2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	4a15      	ldr	r2, [pc, #84]	; (8007504 <HAL_UART_Transmit_IT+0xd8>)
 80074b0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	e853 3f00 	ldrex	r3, [r3]
 80074c6:	613b      	str	r3, [r7, #16]
   return(result);
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ce:	627b      	str	r3, [r7, #36]	; 0x24
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	461a      	mov	r2, r3
 80074d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d8:	623b      	str	r3, [r7, #32]
 80074da:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074dc:	69f9      	ldr	r1, [r7, #28]
 80074de:	6a3a      	ldr	r2, [r7, #32]
 80074e0:	e841 2300 	strex	r3, r2, [r1]
 80074e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1e6      	bne.n	80074ba <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80074ec:	2300      	movs	r3, #0
 80074ee:	e000      	b.n	80074f2 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80074f0:	2302      	movs	r3, #2
  }
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	372c      	adds	r7, #44	; 0x2c
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	08008717 	.word	0x08008717
 8007504:	0800865f 	.word	0x0800865f

08007508 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b0ba      	sub	sp, #232	; 0xe8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	69db      	ldr	r3, [r3, #28]
 8007516:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800752e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007532:	f640 030f 	movw	r3, #2063	; 0x80f
 8007536:	4013      	ands	r3, r2
 8007538:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800753c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007540:	2b00      	cmp	r3, #0
 8007542:	d115      	bne.n	8007570 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007548:	f003 0320 	and.w	r3, r3, #32
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00f      	beq.n	8007570 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007554:	f003 0320 	and.w	r3, r3, #32
 8007558:	2b00      	cmp	r3, #0
 800755a:	d009      	beq.n	8007570 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 82a6 	beq.w	8007ab2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	4798      	blx	r3
      }
      return;
 800756e:	e2a0      	b.n	8007ab2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007570:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 8117 	beq.w	80077a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800757a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	2b00      	cmp	r3, #0
 8007584:	d106      	bne.n	8007594 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007586:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800758a:	4b85      	ldr	r3, [pc, #532]	; (80077a0 <HAL_UART_IRQHandler+0x298>)
 800758c:	4013      	ands	r3, r2
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 810a 	beq.w	80077a8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	2b00      	cmp	r3, #0
 800759e:	d011      	beq.n	80075c4 <HAL_UART_IRQHandler+0xbc>
 80075a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00b      	beq.n	80075c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2201      	movs	r2, #1
 80075b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075ba:	f043 0201 	orr.w	r2, r3, #1
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075c8:	f003 0302 	and.w	r3, r3, #2
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d011      	beq.n	80075f4 <HAL_UART_IRQHandler+0xec>
 80075d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00b      	beq.n	80075f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2202      	movs	r2, #2
 80075e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075ea:	f043 0204 	orr.w	r2, r3, #4
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075f8:	f003 0304 	and.w	r3, r3, #4
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d011      	beq.n	8007624 <HAL_UART_IRQHandler+0x11c>
 8007600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007604:	f003 0301 	and.w	r3, r3, #1
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00b      	beq.n	8007624 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2204      	movs	r2, #4
 8007612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800761a:	f043 0202 	orr.w	r2, r3, #2
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007628:	f003 0308 	and.w	r3, r3, #8
 800762c:	2b00      	cmp	r3, #0
 800762e:	d017      	beq.n	8007660 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007634:	f003 0320 	and.w	r3, r3, #32
 8007638:	2b00      	cmp	r3, #0
 800763a:	d105      	bne.n	8007648 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800763c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007640:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00b      	beq.n	8007660 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2208      	movs	r2, #8
 800764e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007656:	f043 0208 	orr.w	r2, r3, #8
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007668:	2b00      	cmp	r3, #0
 800766a:	d012      	beq.n	8007692 <HAL_UART_IRQHandler+0x18a>
 800766c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007670:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00c      	beq.n	8007692 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007680:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007688:	f043 0220 	orr.w	r2, r3, #32
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 820c 	beq.w	8007ab6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800769e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076a2:	f003 0320 	and.w	r3, r3, #32
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00d      	beq.n	80076c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80076aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076ae:	f003 0320 	and.w	r3, r3, #32
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d007      	beq.n	80076c6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d003      	beq.n	80076c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076da:	2b40      	cmp	r3, #64	; 0x40
 80076dc:	d005      	beq.n	80076ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80076de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d04f      	beq.n	800778a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 ff3e 	bl	800856c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076fa:	2b40      	cmp	r3, #64	; 0x40
 80076fc:	d141      	bne.n	8007782 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3308      	adds	r3, #8
 8007704:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007708:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800770c:	e853 3f00 	ldrex	r3, [r3]
 8007710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007714:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800771c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3308      	adds	r3, #8
 8007726:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800772a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800772e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007732:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007736:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800773a:	e841 2300 	strex	r3, r2, [r1]
 800773e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007742:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1d9      	bne.n	80076fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800774e:	2b00      	cmp	r3, #0
 8007750:	d013      	beq.n	800777a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007756:	4a13      	ldr	r2, [pc, #76]	; (80077a4 <HAL_UART_IRQHandler+0x29c>)
 8007758:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800775e:	4618      	mov	r0, r3
 8007760:	f7fb ff01 	bl	8003566 <HAL_DMA_Abort_IT>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d017      	beq.n	800779a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800776e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007774:	4610      	mov	r0, r2
 8007776:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007778:	e00f      	b.n	800779a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f9ba 	bl	8007af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007780:	e00b      	b.n	800779a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f9b6 	bl	8007af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007788:	e007      	b.n	800779a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f9b2 	bl	8007af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007798:	e18d      	b.n	8007ab6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800779a:	bf00      	nop
    return;
 800779c:	e18b      	b.n	8007ab6 <HAL_UART_IRQHandler+0x5ae>
 800779e:	bf00      	nop
 80077a0:	04000120 	.word	0x04000120
 80077a4:	08008633 	.word	0x08008633

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	f040 8146 	bne.w	8007a3e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80077b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077b6:	f003 0310 	and.w	r3, r3, #16
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f000 813f 	beq.w	8007a3e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80077c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077c4:	f003 0310 	and.w	r3, r3, #16
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 8138 	beq.w	8007a3e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2210      	movs	r2, #16
 80077d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e0:	2b40      	cmp	r3, #64	; 0x40
 80077e2:	f040 80b4 	bne.w	800794e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f000 815f 	beq.w	8007aba <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007802:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007806:	429a      	cmp	r2, r3
 8007808:	f080 8157 	bcs.w	8007aba <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007812:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0320 	and.w	r3, r3, #32
 8007822:	2b00      	cmp	r3, #0
 8007824:	f040 8085 	bne.w	8007932 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007830:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007834:	e853 3f00 	ldrex	r3, [r3]
 8007838:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800783c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007844:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	461a      	mov	r2, r3
 800784e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007852:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007856:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800785e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007862:	e841 2300 	strex	r3, r2, [r1]
 8007866:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800786a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1da      	bne.n	8007828 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3308      	adds	r3, #8
 8007878:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800787c:	e853 3f00 	ldrex	r3, [r3]
 8007880:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007882:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007884:	f023 0301 	bic.w	r3, r3, #1
 8007888:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3308      	adds	r3, #8
 8007892:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007896:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800789a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800789e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80078a2:	e841 2300 	strex	r3, r2, [r1]
 80078a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80078a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1e1      	bne.n	8007872 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3308      	adds	r3, #8
 80078b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078b8:	e853 3f00 	ldrex	r3, [r3]
 80078bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80078be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	3308      	adds	r3, #8
 80078ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80078d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078da:	e841 2300 	strex	r3, r2, [r1]
 80078de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1e3      	bne.n	80078ae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2220      	movs	r2, #32
 80078ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078fa:	e853 3f00 	ldrex	r3, [r3]
 80078fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007902:	f023 0310 	bic.w	r3, r3, #16
 8007906:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	461a      	mov	r2, r3
 8007910:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007914:	65bb      	str	r3, [r7, #88]	; 0x58
 8007916:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007918:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800791a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800791c:	e841 2300 	strex	r3, r2, [r1]
 8007920:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1e4      	bne.n	80078f2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800792c:	4618      	mov	r0, r3
 800792e:	f7fb fddc 	bl	80034ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800793e:	b29b      	uxth	r3, r3
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	b29b      	uxth	r3, r3
 8007944:	4619      	mov	r1, r3
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7fa fb1c 	bl	8001f84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800794c:	e0b5      	b.n	8007aba <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800795a:	b29b      	uxth	r3, r3
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007968:	b29b      	uxth	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	f000 80a7 	beq.w	8007abe <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007970:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007974:	2b00      	cmp	r3, #0
 8007976:	f000 80a2 	beq.w	8007abe <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007982:	e853 3f00 	ldrex	r3, [r3]
 8007986:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800798a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800798e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	461a      	mov	r2, r3
 8007998:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800799c:	647b      	str	r3, [r7, #68]	; 0x44
 800799e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079a4:	e841 2300 	strex	r3, r2, [r1]
 80079a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1e4      	bne.n	800797a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3308      	adds	r3, #8
 80079b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ba:	e853 3f00 	ldrex	r3, [r3]
 80079be:	623b      	str	r3, [r7, #32]
   return(result);
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	f023 0301 	bic.w	r3, r3, #1
 80079c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	3308      	adds	r3, #8
 80079d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80079d4:	633a      	str	r2, [r7, #48]	; 0x30
 80079d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079dc:	e841 2300 	strex	r3, r2, [r1]
 80079e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1e3      	bne.n	80079b0 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2220      	movs	r2, #32
 80079ec:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	e853 3f00 	ldrex	r3, [r3]
 8007a06:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f023 0310 	bic.w	r3, r3, #16
 8007a0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	461a      	mov	r2, r3
 8007a18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a1c:	61fb      	str	r3, [r7, #28]
 8007a1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a20:	69b9      	ldr	r1, [r7, #24]
 8007a22:	69fa      	ldr	r2, [r7, #28]
 8007a24:	e841 2300 	strex	r3, r2, [r1]
 8007a28:	617b      	str	r3, [r7, #20]
   return(result);
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1e4      	bne.n	80079fa <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a34:	4619      	mov	r1, r3
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7fa faa4 	bl	8001f84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a3c:	e03f      	b.n	8007abe <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00e      	beq.n	8007a68 <HAL_UART_IRQHandler+0x560>
 8007a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d008      	beq.n	8007a68 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f001 f842 	bl	8008aea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a66:	e02d      	b.n	8007ac4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00e      	beq.n	8007a92 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d008      	beq.n	8007a92 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d01c      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	4798      	blx	r3
    }
    return;
 8007a90:	e017      	b.n	8007ac2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d012      	beq.n	8007ac4 <HAL_UART_IRQHandler+0x5bc>
 8007a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00c      	beq.n	8007ac4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fe93 	bl	80087d6 <UART_EndTransmit_IT>
    return;
 8007ab0:	e008      	b.n	8007ac4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007ab2:	bf00      	nop
 8007ab4:	e006      	b.n	8007ac4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007ab6:	bf00      	nop
 8007ab8:	e004      	b.n	8007ac4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007aba:	bf00      	nop
 8007abc:	e002      	b.n	8007ac4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007abe:	bf00      	nop
 8007ac0:	e000      	b.n	8007ac4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007ac2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007ac4:	37e8      	adds	r7, #232	; 0xe8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop

08007acc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007ae8:	bf00      	nop
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b0c:	b08a      	sub	sp, #40	; 0x28
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b12:	2300      	movs	r3, #0
 8007b14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	689a      	ldr	r2, [r3, #8]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	431a      	orrs	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	431a      	orrs	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	69db      	ldr	r3, [r3, #28]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	4ba4      	ldr	r3, [pc, #656]	; (8007dc8 <UART_SetConfig+0x2c0>)
 8007b38:	4013      	ands	r3, r2
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	6812      	ldr	r2, [r2, #0]
 8007b3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b40:	430b      	orrs	r3, r1
 8007b42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	68da      	ldr	r2, [r3, #12]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	430a      	orrs	r2, r1
 8007b58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a99      	ldr	r2, [pc, #612]	; (8007dcc <UART_SetConfig+0x2c4>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d004      	beq.n	8007b74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b70:	4313      	orrs	r3, r2
 8007b72:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b84:	430a      	orrs	r2, r1
 8007b86:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a90      	ldr	r2, [pc, #576]	; (8007dd0 <UART_SetConfig+0x2c8>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d126      	bne.n	8007be0 <UART_SetConfig+0xd8>
 8007b92:	4b90      	ldr	r3, [pc, #576]	; (8007dd4 <UART_SetConfig+0x2cc>)
 8007b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b98:	f003 0303 	and.w	r3, r3, #3
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d81b      	bhi.n	8007bd8 <UART_SetConfig+0xd0>
 8007ba0:	a201      	add	r2, pc, #4	; (adr r2, 8007ba8 <UART_SetConfig+0xa0>)
 8007ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba6:	bf00      	nop
 8007ba8:	08007bb9 	.word	0x08007bb9
 8007bac:	08007bc9 	.word	0x08007bc9
 8007bb0:	08007bc1 	.word	0x08007bc1
 8007bb4:	08007bd1 	.word	0x08007bd1
 8007bb8:	2301      	movs	r3, #1
 8007bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bbe:	e116      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bc6:	e112      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007bc8:	2304      	movs	r3, #4
 8007bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bce:	e10e      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007bd0:	2308      	movs	r3, #8
 8007bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bd6:	e10a      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007bd8:	2310      	movs	r3, #16
 8007bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bde:	e106      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a7c      	ldr	r2, [pc, #496]	; (8007dd8 <UART_SetConfig+0x2d0>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d138      	bne.n	8007c5c <UART_SetConfig+0x154>
 8007bea:	4b7a      	ldr	r3, [pc, #488]	; (8007dd4 <UART_SetConfig+0x2cc>)
 8007bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bf0:	f003 030c 	and.w	r3, r3, #12
 8007bf4:	2b0c      	cmp	r3, #12
 8007bf6:	d82d      	bhi.n	8007c54 <UART_SetConfig+0x14c>
 8007bf8:	a201      	add	r2, pc, #4	; (adr r2, 8007c00 <UART_SetConfig+0xf8>)
 8007bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfe:	bf00      	nop
 8007c00:	08007c35 	.word	0x08007c35
 8007c04:	08007c55 	.word	0x08007c55
 8007c08:	08007c55 	.word	0x08007c55
 8007c0c:	08007c55 	.word	0x08007c55
 8007c10:	08007c45 	.word	0x08007c45
 8007c14:	08007c55 	.word	0x08007c55
 8007c18:	08007c55 	.word	0x08007c55
 8007c1c:	08007c55 	.word	0x08007c55
 8007c20:	08007c3d 	.word	0x08007c3d
 8007c24:	08007c55 	.word	0x08007c55
 8007c28:	08007c55 	.word	0x08007c55
 8007c2c:	08007c55 	.word	0x08007c55
 8007c30:	08007c4d 	.word	0x08007c4d
 8007c34:	2300      	movs	r3, #0
 8007c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c3a:	e0d8      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c42:	e0d4      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007c44:	2304      	movs	r3, #4
 8007c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c4a:	e0d0      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007c4c:	2308      	movs	r3, #8
 8007c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c52:	e0cc      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007c54:	2310      	movs	r3, #16
 8007c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c5a:	e0c8      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a5e      	ldr	r2, [pc, #376]	; (8007ddc <UART_SetConfig+0x2d4>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d125      	bne.n	8007cb2 <UART_SetConfig+0x1aa>
 8007c66:	4b5b      	ldr	r3, [pc, #364]	; (8007dd4 <UART_SetConfig+0x2cc>)
 8007c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c70:	2b30      	cmp	r3, #48	; 0x30
 8007c72:	d016      	beq.n	8007ca2 <UART_SetConfig+0x19a>
 8007c74:	2b30      	cmp	r3, #48	; 0x30
 8007c76:	d818      	bhi.n	8007caa <UART_SetConfig+0x1a2>
 8007c78:	2b20      	cmp	r3, #32
 8007c7a:	d00a      	beq.n	8007c92 <UART_SetConfig+0x18a>
 8007c7c:	2b20      	cmp	r3, #32
 8007c7e:	d814      	bhi.n	8007caa <UART_SetConfig+0x1a2>
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d002      	beq.n	8007c8a <UART_SetConfig+0x182>
 8007c84:	2b10      	cmp	r3, #16
 8007c86:	d008      	beq.n	8007c9a <UART_SetConfig+0x192>
 8007c88:	e00f      	b.n	8007caa <UART_SetConfig+0x1a2>
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c90:	e0ad      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007c92:	2302      	movs	r3, #2
 8007c94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c98:	e0a9      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007c9a:	2304      	movs	r3, #4
 8007c9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ca0:	e0a5      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007ca2:	2308      	movs	r3, #8
 8007ca4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ca8:	e0a1      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007caa:	2310      	movs	r3, #16
 8007cac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cb0:	e09d      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a4a      	ldr	r2, [pc, #296]	; (8007de0 <UART_SetConfig+0x2d8>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d125      	bne.n	8007d08 <UART_SetConfig+0x200>
 8007cbc:	4b45      	ldr	r3, [pc, #276]	; (8007dd4 <UART_SetConfig+0x2cc>)
 8007cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007cc6:	2bc0      	cmp	r3, #192	; 0xc0
 8007cc8:	d016      	beq.n	8007cf8 <UART_SetConfig+0x1f0>
 8007cca:	2bc0      	cmp	r3, #192	; 0xc0
 8007ccc:	d818      	bhi.n	8007d00 <UART_SetConfig+0x1f8>
 8007cce:	2b80      	cmp	r3, #128	; 0x80
 8007cd0:	d00a      	beq.n	8007ce8 <UART_SetConfig+0x1e0>
 8007cd2:	2b80      	cmp	r3, #128	; 0x80
 8007cd4:	d814      	bhi.n	8007d00 <UART_SetConfig+0x1f8>
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d002      	beq.n	8007ce0 <UART_SetConfig+0x1d8>
 8007cda:	2b40      	cmp	r3, #64	; 0x40
 8007cdc:	d008      	beq.n	8007cf0 <UART_SetConfig+0x1e8>
 8007cde:	e00f      	b.n	8007d00 <UART_SetConfig+0x1f8>
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ce6:	e082      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007ce8:	2302      	movs	r3, #2
 8007cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cee:	e07e      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007cf0:	2304      	movs	r3, #4
 8007cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cf6:	e07a      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007cf8:	2308      	movs	r3, #8
 8007cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cfe:	e076      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007d00:	2310      	movs	r3, #16
 8007d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d06:	e072      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a35      	ldr	r2, [pc, #212]	; (8007de4 <UART_SetConfig+0x2dc>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d12a      	bne.n	8007d68 <UART_SetConfig+0x260>
 8007d12:	4b30      	ldr	r3, [pc, #192]	; (8007dd4 <UART_SetConfig+0x2cc>)
 8007d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d20:	d01a      	beq.n	8007d58 <UART_SetConfig+0x250>
 8007d22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d26:	d81b      	bhi.n	8007d60 <UART_SetConfig+0x258>
 8007d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d2c:	d00c      	beq.n	8007d48 <UART_SetConfig+0x240>
 8007d2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d32:	d815      	bhi.n	8007d60 <UART_SetConfig+0x258>
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d003      	beq.n	8007d40 <UART_SetConfig+0x238>
 8007d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d3c:	d008      	beq.n	8007d50 <UART_SetConfig+0x248>
 8007d3e:	e00f      	b.n	8007d60 <UART_SetConfig+0x258>
 8007d40:	2300      	movs	r3, #0
 8007d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d46:	e052      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007d48:	2302      	movs	r3, #2
 8007d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d4e:	e04e      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007d50:	2304      	movs	r3, #4
 8007d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d56:	e04a      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007d58:	2308      	movs	r3, #8
 8007d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d5e:	e046      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007d60:	2310      	movs	r3, #16
 8007d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d66:	e042      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a17      	ldr	r2, [pc, #92]	; (8007dcc <UART_SetConfig+0x2c4>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d13a      	bne.n	8007de8 <UART_SetConfig+0x2e0>
 8007d72:	4b18      	ldr	r3, [pc, #96]	; (8007dd4 <UART_SetConfig+0x2cc>)
 8007d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d80:	d01a      	beq.n	8007db8 <UART_SetConfig+0x2b0>
 8007d82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d86:	d81b      	bhi.n	8007dc0 <UART_SetConfig+0x2b8>
 8007d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d8c:	d00c      	beq.n	8007da8 <UART_SetConfig+0x2a0>
 8007d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d92:	d815      	bhi.n	8007dc0 <UART_SetConfig+0x2b8>
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d003      	beq.n	8007da0 <UART_SetConfig+0x298>
 8007d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d9c:	d008      	beq.n	8007db0 <UART_SetConfig+0x2a8>
 8007d9e:	e00f      	b.n	8007dc0 <UART_SetConfig+0x2b8>
 8007da0:	2300      	movs	r3, #0
 8007da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007da6:	e022      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007da8:	2302      	movs	r3, #2
 8007daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dae:	e01e      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007db0:	2304      	movs	r3, #4
 8007db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007db6:	e01a      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007db8:	2308      	movs	r3, #8
 8007dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dbe:	e016      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007dc0:	2310      	movs	r3, #16
 8007dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dc6:	e012      	b.n	8007dee <UART_SetConfig+0x2e6>
 8007dc8:	efff69f3 	.word	0xefff69f3
 8007dcc:	40008000 	.word	0x40008000
 8007dd0:	40013800 	.word	0x40013800
 8007dd4:	40021000 	.word	0x40021000
 8007dd8:	40004400 	.word	0x40004400
 8007ddc:	40004800 	.word	0x40004800
 8007de0:	40004c00 	.word	0x40004c00
 8007de4:	40005000 	.word	0x40005000
 8007de8:	2310      	movs	r3, #16
 8007dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a9f      	ldr	r2, [pc, #636]	; (8008070 <UART_SetConfig+0x568>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d17a      	bne.n	8007eee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007df8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007dfc:	2b08      	cmp	r3, #8
 8007dfe:	d824      	bhi.n	8007e4a <UART_SetConfig+0x342>
 8007e00:	a201      	add	r2, pc, #4	; (adr r2, 8007e08 <UART_SetConfig+0x300>)
 8007e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e06:	bf00      	nop
 8007e08:	08007e2d 	.word	0x08007e2d
 8007e0c:	08007e4b 	.word	0x08007e4b
 8007e10:	08007e35 	.word	0x08007e35
 8007e14:	08007e4b 	.word	0x08007e4b
 8007e18:	08007e3b 	.word	0x08007e3b
 8007e1c:	08007e4b 	.word	0x08007e4b
 8007e20:	08007e4b 	.word	0x08007e4b
 8007e24:	08007e4b 	.word	0x08007e4b
 8007e28:	08007e43 	.word	0x08007e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e2c:	f7fd faa6 	bl	800537c <HAL_RCC_GetPCLK1Freq>
 8007e30:	61f8      	str	r0, [r7, #28]
        break;
 8007e32:	e010      	b.n	8007e56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e34:	4b8f      	ldr	r3, [pc, #572]	; (8008074 <UART_SetConfig+0x56c>)
 8007e36:	61fb      	str	r3, [r7, #28]
        break;
 8007e38:	e00d      	b.n	8007e56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e3a:	f7fd fa07 	bl	800524c <HAL_RCC_GetSysClockFreq>
 8007e3e:	61f8      	str	r0, [r7, #28]
        break;
 8007e40:	e009      	b.n	8007e56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e46:	61fb      	str	r3, [r7, #28]
        break;
 8007e48:	e005      	b.n	8007e56 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007e54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f000 80fb 	beq.w	8008054 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	685a      	ldr	r2, [r3, #4]
 8007e62:	4613      	mov	r3, r2
 8007e64:	005b      	lsls	r3, r3, #1
 8007e66:	4413      	add	r3, r2
 8007e68:	69fa      	ldr	r2, [r7, #28]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d305      	bcc.n	8007e7a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007e74:	69fa      	ldr	r2, [r7, #28]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d903      	bls.n	8007e82 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007e80:	e0e8      	b.n	8008054 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	2200      	movs	r2, #0
 8007e86:	461c      	mov	r4, r3
 8007e88:	4615      	mov	r5, r2
 8007e8a:	f04f 0200 	mov.w	r2, #0
 8007e8e:	f04f 0300 	mov.w	r3, #0
 8007e92:	022b      	lsls	r3, r5, #8
 8007e94:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007e98:	0222      	lsls	r2, r4, #8
 8007e9a:	68f9      	ldr	r1, [r7, #12]
 8007e9c:	6849      	ldr	r1, [r1, #4]
 8007e9e:	0849      	lsrs	r1, r1, #1
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	4688      	mov	r8, r1
 8007ea4:	4681      	mov	r9, r0
 8007ea6:	eb12 0a08 	adds.w	sl, r2, r8
 8007eaa:	eb43 0b09 	adc.w	fp, r3, r9
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	603b      	str	r3, [r7, #0]
 8007eb6:	607a      	str	r2, [r7, #4]
 8007eb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ebc:	4650      	mov	r0, sl
 8007ebe:	4659      	mov	r1, fp
 8007ec0:	f7f8 fee2 	bl	8000c88 <__aeabi_uldivmod>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	4613      	mov	r3, r2
 8007eca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ed2:	d308      	bcc.n	8007ee6 <UART_SetConfig+0x3de>
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eda:	d204      	bcs.n	8007ee6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	69ba      	ldr	r2, [r7, #24]
 8007ee2:	60da      	str	r2, [r3, #12]
 8007ee4:	e0b6      	b.n	8008054 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007eec:	e0b2      	b.n	8008054 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	69db      	ldr	r3, [r3, #28]
 8007ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ef6:	d15e      	bne.n	8007fb6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007ef8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007efc:	2b08      	cmp	r3, #8
 8007efe:	d828      	bhi.n	8007f52 <UART_SetConfig+0x44a>
 8007f00:	a201      	add	r2, pc, #4	; (adr r2, 8007f08 <UART_SetConfig+0x400>)
 8007f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f06:	bf00      	nop
 8007f08:	08007f2d 	.word	0x08007f2d
 8007f0c:	08007f35 	.word	0x08007f35
 8007f10:	08007f3d 	.word	0x08007f3d
 8007f14:	08007f53 	.word	0x08007f53
 8007f18:	08007f43 	.word	0x08007f43
 8007f1c:	08007f53 	.word	0x08007f53
 8007f20:	08007f53 	.word	0x08007f53
 8007f24:	08007f53 	.word	0x08007f53
 8007f28:	08007f4b 	.word	0x08007f4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f2c:	f7fd fa26 	bl	800537c <HAL_RCC_GetPCLK1Freq>
 8007f30:	61f8      	str	r0, [r7, #28]
        break;
 8007f32:	e014      	b.n	8007f5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f34:	f7fd fa38 	bl	80053a8 <HAL_RCC_GetPCLK2Freq>
 8007f38:	61f8      	str	r0, [r7, #28]
        break;
 8007f3a:	e010      	b.n	8007f5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f3c:	4b4d      	ldr	r3, [pc, #308]	; (8008074 <UART_SetConfig+0x56c>)
 8007f3e:	61fb      	str	r3, [r7, #28]
        break;
 8007f40:	e00d      	b.n	8007f5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f42:	f7fd f983 	bl	800524c <HAL_RCC_GetSysClockFreq>
 8007f46:	61f8      	str	r0, [r7, #28]
        break;
 8007f48:	e009      	b.n	8007f5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f4e:	61fb      	str	r3, [r7, #28]
        break;
 8007f50:	e005      	b.n	8007f5e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007f52:	2300      	movs	r3, #0
 8007f54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007f5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d077      	beq.n	8008054 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	005a      	lsls	r2, r3, #1
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	085b      	lsrs	r3, r3, #1
 8007f6e:	441a      	add	r2, r3
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f78:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	2b0f      	cmp	r3, #15
 8007f7e:	d916      	bls.n	8007fae <UART_SetConfig+0x4a6>
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f86:	d212      	bcs.n	8007fae <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	f023 030f 	bic.w	r3, r3, #15
 8007f90:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	085b      	lsrs	r3, r3, #1
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	f003 0307 	and.w	r3, r3, #7
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	8afb      	ldrh	r3, [r7, #22]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	8afa      	ldrh	r2, [r7, #22]
 8007faa:	60da      	str	r2, [r3, #12]
 8007fac:	e052      	b.n	8008054 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007fb4:	e04e      	b.n	8008054 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007fb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fba:	2b08      	cmp	r3, #8
 8007fbc:	d827      	bhi.n	800800e <UART_SetConfig+0x506>
 8007fbe:	a201      	add	r2, pc, #4	; (adr r2, 8007fc4 <UART_SetConfig+0x4bc>)
 8007fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc4:	08007fe9 	.word	0x08007fe9
 8007fc8:	08007ff1 	.word	0x08007ff1
 8007fcc:	08007ff9 	.word	0x08007ff9
 8007fd0:	0800800f 	.word	0x0800800f
 8007fd4:	08007fff 	.word	0x08007fff
 8007fd8:	0800800f 	.word	0x0800800f
 8007fdc:	0800800f 	.word	0x0800800f
 8007fe0:	0800800f 	.word	0x0800800f
 8007fe4:	08008007 	.word	0x08008007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fe8:	f7fd f9c8 	bl	800537c <HAL_RCC_GetPCLK1Freq>
 8007fec:	61f8      	str	r0, [r7, #28]
        break;
 8007fee:	e014      	b.n	800801a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ff0:	f7fd f9da 	bl	80053a8 <HAL_RCC_GetPCLK2Freq>
 8007ff4:	61f8      	str	r0, [r7, #28]
        break;
 8007ff6:	e010      	b.n	800801a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ff8:	4b1e      	ldr	r3, [pc, #120]	; (8008074 <UART_SetConfig+0x56c>)
 8007ffa:	61fb      	str	r3, [r7, #28]
        break;
 8007ffc:	e00d      	b.n	800801a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ffe:	f7fd f925 	bl	800524c <HAL_RCC_GetSysClockFreq>
 8008002:	61f8      	str	r0, [r7, #28]
        break;
 8008004:	e009      	b.n	800801a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800800a:	61fb      	str	r3, [r7, #28]
        break;
 800800c:	e005      	b.n	800801a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800800e:	2300      	movs	r3, #0
 8008010:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008018:	bf00      	nop
    }

    if (pclk != 0U)
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d019      	beq.n	8008054 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	085a      	lsrs	r2, r3, #1
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	441a      	add	r2, r3
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008032:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	2b0f      	cmp	r3, #15
 8008038:	d909      	bls.n	800804e <UART_SetConfig+0x546>
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008040:	d205      	bcs.n	800804e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	b29a      	uxth	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	60da      	str	r2, [r3, #12]
 800804c:	e002      	b.n	8008054 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2200      	movs	r2, #0
 8008058:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008060:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008064:	4618      	mov	r0, r3
 8008066:	3728      	adds	r7, #40	; 0x28
 8008068:	46bd      	mov	sp, r7
 800806a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800806e:	bf00      	nop
 8008070:	40008000 	.word	0x40008000
 8008074:	00f42400 	.word	0x00f42400

08008078 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008084:	f003 0301 	and.w	r3, r3, #1
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00a      	beq.n	80080a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	430a      	orrs	r2, r1
 80080a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a6:	f003 0302 	and.w	r3, r3, #2
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00a      	beq.n	80080c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	430a      	orrs	r2, r1
 80080c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c8:	f003 0304 	and.w	r3, r3, #4
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00a      	beq.n	80080e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	430a      	orrs	r2, r1
 80080e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ea:	f003 0308 	and.w	r3, r3, #8
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d00a      	beq.n	8008108 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	430a      	orrs	r2, r1
 8008106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810c:	f003 0310 	and.w	r3, r3, #16
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00a      	beq.n	800812a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	430a      	orrs	r2, r1
 8008128:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812e:	f003 0320 	and.w	r3, r3, #32
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00a      	beq.n	800814c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	430a      	orrs	r2, r1
 800814a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008154:	2b00      	cmp	r3, #0
 8008156:	d01a      	beq.n	800818e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	430a      	orrs	r2, r1
 800816c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008176:	d10a      	bne.n	800818e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	430a      	orrs	r2, r1
 800818c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00a      	beq.n	80081b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	430a      	orrs	r2, r1
 80081ae:	605a      	str	r2, [r3, #4]
  }
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af02      	add	r7, sp, #8
 80081c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081cc:	f7fb f870 	bl	80032b0 <HAL_GetTick>
 80081d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0308 	and.w	r3, r3, #8
 80081dc:	2b08      	cmp	r3, #8
 80081de:	d10e      	bne.n	80081fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f82d 	bl	800824e <UART_WaitOnFlagUntilTimeout>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d001      	beq.n	80081fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e023      	b.n	8008246 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 0304 	and.w	r3, r3, #4
 8008208:	2b04      	cmp	r3, #4
 800820a:	d10e      	bne.n	800822a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800820c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 f817 	bl	800824e <UART_WaitOnFlagUntilTimeout>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d001      	beq.n	800822a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e00d      	b.n	8008246 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2220      	movs	r2, #32
 800822e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2220      	movs	r2, #32
 8008234:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b09c      	sub	sp, #112	; 0x70
 8008252:	af00      	add	r7, sp, #0
 8008254:	60f8      	str	r0, [r7, #12]
 8008256:	60b9      	str	r1, [r7, #8]
 8008258:	603b      	str	r3, [r7, #0]
 800825a:	4613      	mov	r3, r2
 800825c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800825e:	e0a5      	b.n	80083ac <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008260:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008266:	f000 80a1 	beq.w	80083ac <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800826a:	f7fb f821 	bl	80032b0 <HAL_GetTick>
 800826e:	4602      	mov	r2, r0
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008276:	429a      	cmp	r2, r3
 8008278:	d302      	bcc.n	8008280 <UART_WaitOnFlagUntilTimeout+0x32>
 800827a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800827c:	2b00      	cmp	r3, #0
 800827e:	d13e      	bne.n	80082fe <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008288:	e853 3f00 	ldrex	r3, [r3]
 800828c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800828e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008290:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008294:	667b      	str	r3, [r7, #100]	; 0x64
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	461a      	mov	r2, r3
 800829c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800829e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082a0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80082a6:	e841 2300 	strex	r3, r2, [r1]
 80082aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80082ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1e6      	bne.n	8008280 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	3308      	adds	r3, #8
 80082b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082bc:	e853 3f00 	ldrex	r3, [r3]
 80082c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c4:	f023 0301 	bic.w	r3, r3, #1
 80082c8:	663b      	str	r3, [r7, #96]	; 0x60
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	3308      	adds	r3, #8
 80082d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80082d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80082d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082da:	e841 2300 	strex	r3, r2, [r1]
 80082de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80082e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1e5      	bne.n	80082b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2220      	movs	r2, #32
 80082ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2220      	movs	r2, #32
 80082f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e067      	b.n	80083ce <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0304 	and.w	r3, r3, #4
 8008308:	2b00      	cmp	r3, #0
 800830a:	d04f      	beq.n	80083ac <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	69db      	ldr	r3, [r3, #28]
 8008312:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800831a:	d147      	bne.n	80083ac <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008324:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832e:	e853 3f00 	ldrex	r3, [r3]
 8008332:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008336:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800833a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	461a      	mov	r2, r3
 8008342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008344:	637b      	str	r3, [r7, #52]	; 0x34
 8008346:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008348:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800834a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800834c:	e841 2300 	strex	r3, r2, [r1]
 8008350:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1e6      	bne.n	8008326 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	3308      	adds	r3, #8
 800835e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	e853 3f00 	ldrex	r3, [r3]
 8008366:	613b      	str	r3, [r7, #16]
   return(result);
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	f023 0301 	bic.w	r3, r3, #1
 800836e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3308      	adds	r3, #8
 8008376:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008378:	623a      	str	r2, [r7, #32]
 800837a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837c:	69f9      	ldr	r1, [r7, #28]
 800837e:	6a3a      	ldr	r2, [r7, #32]
 8008380:	e841 2300 	strex	r3, r2, [r1]
 8008384:	61bb      	str	r3, [r7, #24]
   return(result);
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d1e5      	bne.n	8008358 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2220      	movs	r2, #32
 8008390:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2220      	movs	r2, #32
 8008396:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2220      	movs	r2, #32
 800839c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80083a8:	2303      	movs	r3, #3
 80083aa:	e010      	b.n	80083ce <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	69da      	ldr	r2, [r3, #28]
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	4013      	ands	r3, r2
 80083b6:	68ba      	ldr	r2, [r7, #8]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	bf0c      	ite	eq
 80083bc:	2301      	moveq	r3, #1
 80083be:	2300      	movne	r3, #0
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	461a      	mov	r2, r3
 80083c4:	79fb      	ldrb	r3, [r7, #7]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	f43f af4a 	beq.w	8008260 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3770      	adds	r7, #112	; 0x70
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
	...

080083d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083d8:	b480      	push	{r7}
 80083da:	b097      	sub	sp, #92	; 0x5c
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	4613      	mov	r3, r2
 80083e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	68ba      	ldr	r2, [r7, #8]
 80083ea:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	88fa      	ldrh	r2, [r7, #6]
 80083f0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	88fa      	ldrh	r2, [r7, #6]
 80083f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800840a:	d10e      	bne.n	800842a <UART_Start_Receive_IT+0x52>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d105      	bne.n	8008420 <UART_Start_Receive_IT+0x48>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f240 12ff 	movw	r2, #511	; 0x1ff
 800841a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800841e:	e02d      	b.n	800847c <UART_Start_Receive_IT+0xa4>
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	22ff      	movs	r2, #255	; 0xff
 8008424:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008428:	e028      	b.n	800847c <UART_Start_Receive_IT+0xa4>
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d10d      	bne.n	800844e <UART_Start_Receive_IT+0x76>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d104      	bne.n	8008444 <UART_Start_Receive_IT+0x6c>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	22ff      	movs	r2, #255	; 0xff
 800843e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008442:	e01b      	b.n	800847c <UART_Start_Receive_IT+0xa4>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	227f      	movs	r2, #127	; 0x7f
 8008448:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800844c:	e016      	b.n	800847c <UART_Start_Receive_IT+0xa4>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008456:	d10d      	bne.n	8008474 <UART_Start_Receive_IT+0x9c>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d104      	bne.n	800846a <UART_Start_Receive_IT+0x92>
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	227f      	movs	r2, #127	; 0x7f
 8008464:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008468:	e008      	b.n	800847c <UART_Start_Receive_IT+0xa4>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	223f      	movs	r2, #63	; 0x3f
 800846e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008472:	e003      	b.n	800847c <UART_Start_Receive_IT+0xa4>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2222      	movs	r2, #34	; 0x22
 8008488:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	3308      	adds	r3, #8
 8008490:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008494:	e853 3f00 	ldrex	r3, [r3]
 8008498:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800849a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849c:	f043 0301 	orr.w	r3, r3, #1
 80084a0:	657b      	str	r3, [r7, #84]	; 0x54
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	3308      	adds	r3, #8
 80084a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80084aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80084ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80084b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084b2:	e841 2300 	strex	r3, r2, [r1]
 80084b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80084b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1e5      	bne.n	800848a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084c6:	d107      	bne.n	80084d8 <UART_Start_Receive_IT+0x100>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d103      	bne.n	80084d8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	4a24      	ldr	r2, [pc, #144]	; (8008564 <UART_Start_Receive_IT+0x18c>)
 80084d4:	665a      	str	r2, [r3, #100]	; 0x64
 80084d6:	e002      	b.n	80084de <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	4a23      	ldr	r2, [pc, #140]	; (8008568 <UART_Start_Receive_IT+0x190>)
 80084dc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d019      	beq.n	8008522 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f6:	e853 3f00 	ldrex	r3, [r3]
 80084fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	461a      	mov	r2, r3
 800850a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800850c:	637b      	str	r3, [r7, #52]	; 0x34
 800850e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008510:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008514:	e841 2300 	strex	r3, r2, [r1]
 8008518:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800851a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851c:	2b00      	cmp	r3, #0
 800851e:	d1e6      	bne.n	80084ee <UART_Start_Receive_IT+0x116>
 8008520:	e018      	b.n	8008554 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	e853 3f00 	ldrex	r3, [r3]
 800852e:	613b      	str	r3, [r7, #16]
   return(result);
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	f043 0320 	orr.w	r3, r3, #32
 8008536:	653b      	str	r3, [r7, #80]	; 0x50
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	461a      	mov	r2, r3
 800853e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008540:	623b      	str	r3, [r7, #32]
 8008542:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008544:	69f9      	ldr	r1, [r7, #28]
 8008546:	6a3a      	ldr	r2, [r7, #32]
 8008548:	e841 2300 	strex	r3, r2, [r1]
 800854c:	61bb      	str	r3, [r7, #24]
   return(result);
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1e6      	bne.n	8008522 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	375c      	adds	r7, #92	; 0x5c
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	0800898b 	.word	0x0800898b
 8008568:	0800882b 	.word	0x0800882b

0800856c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800856c:	b480      	push	{r7}
 800856e:	b095      	sub	sp, #84	; 0x54
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800857c:	e853 3f00 	ldrex	r3, [r3]
 8008580:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008584:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008588:	64fb      	str	r3, [r7, #76]	; 0x4c
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	461a      	mov	r2, r3
 8008590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008592:	643b      	str	r3, [r7, #64]	; 0x40
 8008594:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008596:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008598:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800859a:	e841 2300 	strex	r3, r2, [r1]
 800859e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1e6      	bne.n	8008574 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	3308      	adds	r3, #8
 80085ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ae:	6a3b      	ldr	r3, [r7, #32]
 80085b0:	e853 3f00 	ldrex	r3, [r3]
 80085b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	f023 0301 	bic.w	r3, r3, #1
 80085bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	3308      	adds	r3, #8
 80085c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085ce:	e841 2300 	strex	r3, r2, [r1]
 80085d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1e5      	bne.n	80085a6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d118      	bne.n	8008614 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	e853 3f00 	ldrex	r3, [r3]
 80085ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	f023 0310 	bic.w	r3, r3, #16
 80085f6:	647b      	str	r3, [r7, #68]	; 0x44
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	461a      	mov	r2, r3
 80085fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008600:	61bb      	str	r3, [r7, #24]
 8008602:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008604:	6979      	ldr	r1, [r7, #20]
 8008606:	69ba      	ldr	r2, [r7, #24]
 8008608:	e841 2300 	strex	r3, r2, [r1]
 800860c:	613b      	str	r3, [r7, #16]
   return(result);
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1e6      	bne.n	80085e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2220      	movs	r2, #32
 8008618:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008626:	bf00      	nop
 8008628:	3754      	adds	r7, #84	; 0x54
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b084      	sub	sp, #16
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2200      	movs	r2, #0
 8008644:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f7ff fa4f 	bl	8007af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008656:	bf00      	nop
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800865e:	b480      	push	{r7}
 8008660:	b08f      	sub	sp, #60	; 0x3c
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800866a:	2b21      	cmp	r3, #33	; 0x21
 800866c:	d14d      	bne.n	800870a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008674:	b29b      	uxth	r3, r3
 8008676:	2b00      	cmp	r3, #0
 8008678:	d132      	bne.n	80086e0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008680:	6a3b      	ldr	r3, [r7, #32]
 8008682:	e853 3f00 	ldrex	r3, [r3]
 8008686:	61fb      	str	r3, [r7, #28]
   return(result);
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800868e:	637b      	str	r3, [r7, #52]	; 0x34
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	461a      	mov	r2, r3
 8008696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800869a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800869e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086a0:	e841 2300 	strex	r3, r2, [r1]
 80086a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1e6      	bne.n	800867a <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	e853 3f00 	ldrex	r3, [r3]
 80086b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086c0:	633b      	str	r3, [r7, #48]	; 0x30
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	461a      	mov	r2, r3
 80086c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ca:	61bb      	str	r3, [r7, #24]
 80086cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ce:	6979      	ldr	r1, [r7, #20]
 80086d0:	69ba      	ldr	r2, [r7, #24]
 80086d2:	e841 2300 	strex	r3, r2, [r1]
 80086d6:	613b      	str	r3, [r7, #16]
   return(result);
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1e6      	bne.n	80086ac <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80086de:	e014      	b.n	800870a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086e4:	781a      	ldrb	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	b292      	uxth	r2, r2
 80086ec:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086f2:	1c5a      	adds	r2, r3, #1
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80086fe:	b29b      	uxth	r3, r3
 8008700:	3b01      	subs	r3, #1
 8008702:	b29a      	uxth	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800870a:	bf00      	nop
 800870c:	373c      	adds	r7, #60	; 0x3c
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008716:	b480      	push	{r7}
 8008718:	b091      	sub	sp, #68	; 0x44
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008722:	2b21      	cmp	r3, #33	; 0x21
 8008724:	d151      	bne.n	80087ca <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800872c:	b29b      	uxth	r3, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	d132      	bne.n	8008798 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	e853 3f00 	ldrex	r3, [r3]
 800873e:	623b      	str	r3, [r7, #32]
   return(result);
 8008740:	6a3b      	ldr	r3, [r7, #32]
 8008742:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008746:	63bb      	str	r3, [r7, #56]	; 0x38
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	461a      	mov	r2, r3
 800874e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008750:	633b      	str	r3, [r7, #48]	; 0x30
 8008752:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008754:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008758:	e841 2300 	strex	r3, r2, [r1]
 800875c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800875e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1e6      	bne.n	8008732 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	e853 3f00 	ldrex	r3, [r3]
 8008770:	60fb      	str	r3, [r7, #12]
   return(result);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008778:	637b      	str	r3, [r7, #52]	; 0x34
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	461a      	mov	r2, r3
 8008780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008782:	61fb      	str	r3, [r7, #28]
 8008784:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008786:	69b9      	ldr	r1, [r7, #24]
 8008788:	69fa      	ldr	r2, [r7, #28]
 800878a:	e841 2300 	strex	r3, r2, [r1]
 800878e:	617b      	str	r3, [r7, #20]
   return(result);
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d1e6      	bne.n	8008764 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008796:	e018      	b.n	80087ca <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800879c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800879e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087a0:	881a      	ldrh	r2, [r3, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087aa:	b292      	uxth	r2, r2
 80087ac:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087b2:	1c9a      	adds	r2, r3, #2
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80087be:	b29b      	uxth	r3, r3
 80087c0:	3b01      	subs	r3, #1
 80087c2:	b29a      	uxth	r2, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80087ca:	bf00      	nop
 80087cc:	3744      	adds	r7, #68	; 0x44
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr

080087d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b088      	sub	sp, #32
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	e853 3f00 	ldrex	r3, [r3]
 80087ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087f2:	61fb      	str	r3, [r7, #28]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	461a      	mov	r2, r3
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	61bb      	str	r3, [r7, #24]
 80087fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008800:	6979      	ldr	r1, [r7, #20]
 8008802:	69ba      	ldr	r2, [r7, #24]
 8008804:	e841 2300 	strex	r3, r2, [r1]
 8008808:	613b      	str	r3, [r7, #16]
   return(result);
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1e6      	bne.n	80087de <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2220      	movs	r2, #32
 8008814:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f7ff f955 	bl	8007acc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008822:	bf00      	nop
 8008824:	3720      	adds	r7, #32
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b096      	sub	sp, #88	; 0x58
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008838:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008840:	2b22      	cmp	r3, #34	; 0x22
 8008842:	f040 8094 	bne.w	800896e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800884c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008850:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008854:	b2d9      	uxtb	r1, r3
 8008856:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800885a:	b2da      	uxtb	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008860:	400a      	ands	r2, r1
 8008862:	b2d2      	uxtb	r2, r2
 8008864:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800886a:	1c5a      	adds	r2, r3, #1
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008876:	b29b      	uxth	r3, r3
 8008878:	3b01      	subs	r3, #1
 800887a:	b29a      	uxth	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008888:	b29b      	uxth	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d179      	bne.n	8008982 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008896:	e853 3f00 	ldrex	r3, [r3]
 800889a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800889c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088a2:	653b      	str	r3, [r7, #80]	; 0x50
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	461a      	mov	r2, r3
 80088aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088ac:	647b      	str	r3, [r7, #68]	; 0x44
 80088ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088b4:	e841 2300 	strex	r3, r2, [r1]
 80088b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d1e6      	bne.n	800888e <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	3308      	adds	r3, #8
 80088c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ca:	e853 3f00 	ldrex	r3, [r3]
 80088ce:	623b      	str	r3, [r7, #32]
   return(result);
 80088d0:	6a3b      	ldr	r3, [r7, #32]
 80088d2:	f023 0301 	bic.w	r3, r3, #1
 80088d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	3308      	adds	r3, #8
 80088de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088e0:	633a      	str	r2, [r7, #48]	; 0x30
 80088e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088e8:	e841 2300 	strex	r3, r2, [r1]
 80088ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1e5      	bne.n	80088c0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2220      	movs	r2, #32
 80088f8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008904:	2b01      	cmp	r3, #1
 8008906:	d12e      	bne.n	8008966 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	e853 3f00 	ldrex	r3, [r3]
 800891a:	60fb      	str	r3, [r7, #12]
   return(result);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f023 0310 	bic.w	r3, r3, #16
 8008922:	64bb      	str	r3, [r7, #72]	; 0x48
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	461a      	mov	r2, r3
 800892a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800892c:	61fb      	str	r3, [r7, #28]
 800892e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008930:	69b9      	ldr	r1, [r7, #24]
 8008932:	69fa      	ldr	r2, [r7, #28]
 8008934:	e841 2300 	strex	r3, r2, [r1]
 8008938:	617b      	str	r3, [r7, #20]
   return(result);
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d1e6      	bne.n	800890e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	69db      	ldr	r3, [r3, #28]
 8008946:	f003 0310 	and.w	r3, r3, #16
 800894a:	2b10      	cmp	r3, #16
 800894c:	d103      	bne.n	8008956 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2210      	movs	r2, #16
 8008954:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800895c:	4619      	mov	r1, r3
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f7f9 fb10 	bl	8001f84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008964:	e00d      	b.n	8008982 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7ff f8ba 	bl	8007ae0 <HAL_UART_RxCpltCallback>
}
 800896c:	e009      	b.n	8008982 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	8b1b      	ldrh	r3, [r3, #24]
 8008974:	b29a      	uxth	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f042 0208 	orr.w	r2, r2, #8
 800897e:	b292      	uxth	r2, r2
 8008980:	831a      	strh	r2, [r3, #24]
}
 8008982:	bf00      	nop
 8008984:	3758      	adds	r7, #88	; 0x58
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b096      	sub	sp, #88	; 0x58
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008998:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089a0:	2b22      	cmp	r3, #34	; 0x22
 80089a2:	f040 8094 	bne.w	8008ace <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80089ac:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80089b6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80089ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80089be:	4013      	ands	r3, r2
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ca:	1c9a      	adds	r2, r3, #2
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	3b01      	subs	r3, #1
 80089da:	b29a      	uxth	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d179      	bne.n	8008ae2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f6:	e853 3f00 	ldrex	r3, [r3]
 80089fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80089fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	461a      	mov	r2, r3
 8008a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a0c:	643b      	str	r3, [r7, #64]	; 0x40
 8008a0e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a14:	e841 2300 	strex	r3, r2, [r1]
 8008a18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d1e6      	bne.n	80089ee <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	3308      	adds	r3, #8
 8008a26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a28:	6a3b      	ldr	r3, [r7, #32]
 8008a2a:	e853 3f00 	ldrex	r3, [r3]
 8008a2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	f023 0301 	bic.w	r3, r3, #1
 8008a36:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	3308      	adds	r3, #8
 8008a3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a48:	e841 2300 	strex	r3, r2, [r1]
 8008a4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1e5      	bne.n	8008a20 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2220      	movs	r2, #32
 8008a58:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d12e      	bne.n	8008ac6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	e853 3f00 	ldrex	r3, [r3]
 8008a7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	f023 0310 	bic.w	r3, r3, #16
 8008a82:	647b      	str	r3, [r7, #68]	; 0x44
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	461a      	mov	r2, r3
 8008a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a8c:	61bb      	str	r3, [r7, #24]
 8008a8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a90:	6979      	ldr	r1, [r7, #20]
 8008a92:	69ba      	ldr	r2, [r7, #24]
 8008a94:	e841 2300 	strex	r3, r2, [r1]
 8008a98:	613b      	str	r3, [r7, #16]
   return(result);
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1e6      	bne.n	8008a6e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	69db      	ldr	r3, [r3, #28]
 8008aa6:	f003 0310 	and.w	r3, r3, #16
 8008aaa:	2b10      	cmp	r3, #16
 8008aac:	d103      	bne.n	8008ab6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2210      	movs	r2, #16
 8008ab4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008abc:	4619      	mov	r1, r3
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7f9 fa60 	bl	8001f84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ac4:	e00d      	b.n	8008ae2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f7ff f80a 	bl	8007ae0 <HAL_UART_RxCpltCallback>
}
 8008acc:	e009      	b.n	8008ae2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	8b1b      	ldrh	r3, [r3, #24]
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f042 0208 	orr.w	r2, r2, #8
 8008ade:	b292      	uxth	r2, r2
 8008ae0:	831a      	strh	r2, [r3, #24]
}
 8008ae2:	bf00      	nop
 8008ae4:	3758      	adds	r7, #88	; 0x58
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b083      	sub	sp, #12
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008af2:	bf00      	nop
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b08c      	sub	sp, #48	; 0x30
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	60f8      	str	r0, [r7, #12]
 8008b06:	60b9      	str	r1, [r7, #8]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b10:	2b20      	cmp	r3, #32
 8008b12:	d14a      	bne.n	8008baa <HAL_UARTEx_ReceiveToIdle_IT+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d002      	beq.n	8008b20 <HAL_UARTEx_ReceiveToIdle_IT+0x22>
 8008b1a:	88fb      	ldrh	r3, [r7, #6]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d101      	bne.n	8008b24 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
    {
      return HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	e043      	b.n	8008bac <HAL_UARTEx_ReceiveToIdle_IT+0xae>
    }

    __HAL_LOCK(huart);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d101      	bne.n	8008b32 <HAL_UARTEx_ReceiveToIdle_IT+0x34>
 8008b2e:	2302      	movs	r3, #2
 8008b30:	e03c      	b.n	8008bac <HAL_UARTEx_ReceiveToIdle_IT+0xae>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2201      	movs	r2, #1
 8008b36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8008b40:	88fb      	ldrh	r3, [r7, #6]
 8008b42:	461a      	mov	r2, r3
 8008b44:	68b9      	ldr	r1, [r7, #8]
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f7ff fc46 	bl	80083d8 <UART_Start_Receive_IT>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008b52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d124      	bne.n	8008ba4 <HAL_UARTEx_ReceiveToIdle_IT+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d11d      	bne.n	8008b9e <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2210      	movs	r2, #16
 8008b68:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	e853 3f00 	ldrex	r3, [r3]
 8008b76:	617b      	str	r3, [r7, #20]
   return(result);
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	f043 0310 	orr.w	r3, r3, #16
 8008b7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	461a      	mov	r2, r3
 8008b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b88:	627b      	str	r3, [r7, #36]	; 0x24
 8008b8a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8c:	6a39      	ldr	r1, [r7, #32]
 8008b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b90:	e841 2300 	strex	r3, r2, [r1]
 8008b94:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d1e6      	bne.n	8008b6a <HAL_UARTEx_ReceiveToIdle_IT+0x6c>
 8008b9c:	e002      	b.n	8008ba4 <HAL_UARTEx_ReceiveToIdle_IT+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008ba4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ba8:	e000      	b.n	8008bac <HAL_UARTEx_ReceiveToIdle_IT+0xae>
  }
  else
  {
    return HAL_BUSY;
 8008baa:	2302      	movs	r3, #2
  }
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3730      	adds	r7, #48	; 0x30
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <atof>:
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	f001 bd7b 	b.w	800a6b0 <strtod>
	...

08008bbc <__errno>:
 8008bbc:	4b01      	ldr	r3, [pc, #4]	; (8008bc4 <__errno+0x8>)
 8008bbe:	6818      	ldr	r0, [r3, #0]
 8008bc0:	4770      	bx	lr
 8008bc2:	bf00      	nop
 8008bc4:	200000b4 	.word	0x200000b4

08008bc8 <__libc_init_array>:
 8008bc8:	b570      	push	{r4, r5, r6, lr}
 8008bca:	4d0d      	ldr	r5, [pc, #52]	; (8008c00 <__libc_init_array+0x38>)
 8008bcc:	4c0d      	ldr	r4, [pc, #52]	; (8008c04 <__libc_init_array+0x3c>)
 8008bce:	1b64      	subs	r4, r4, r5
 8008bd0:	10a4      	asrs	r4, r4, #2
 8008bd2:	2600      	movs	r6, #0
 8008bd4:	42a6      	cmp	r6, r4
 8008bd6:	d109      	bne.n	8008bec <__libc_init_array+0x24>
 8008bd8:	4d0b      	ldr	r5, [pc, #44]	; (8008c08 <__libc_init_array+0x40>)
 8008bda:	4c0c      	ldr	r4, [pc, #48]	; (8008c0c <__libc_init_array+0x44>)
 8008bdc:	f006 fd08 	bl	800f5f0 <_init>
 8008be0:	1b64      	subs	r4, r4, r5
 8008be2:	10a4      	asrs	r4, r4, #2
 8008be4:	2600      	movs	r6, #0
 8008be6:	42a6      	cmp	r6, r4
 8008be8:	d105      	bne.n	8008bf6 <__libc_init_array+0x2e>
 8008bea:	bd70      	pop	{r4, r5, r6, pc}
 8008bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bf0:	4798      	blx	r3
 8008bf2:	3601      	adds	r6, #1
 8008bf4:	e7ee      	b.n	8008bd4 <__libc_init_array+0xc>
 8008bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bfa:	4798      	blx	r3
 8008bfc:	3601      	adds	r6, #1
 8008bfe:	e7f2      	b.n	8008be6 <__libc_init_array+0x1e>
 8008c00:	0800fd80 	.word	0x0800fd80
 8008c04:	0800fd80 	.word	0x0800fd80
 8008c08:	0800fd80 	.word	0x0800fd80
 8008c0c:	0800fd84 	.word	0x0800fd84

08008c10 <memcpy>:
 8008c10:	440a      	add	r2, r1
 8008c12:	4291      	cmp	r1, r2
 8008c14:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c18:	d100      	bne.n	8008c1c <memcpy+0xc>
 8008c1a:	4770      	bx	lr
 8008c1c:	b510      	push	{r4, lr}
 8008c1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c26:	4291      	cmp	r1, r2
 8008c28:	d1f9      	bne.n	8008c1e <memcpy+0xe>
 8008c2a:	bd10      	pop	{r4, pc}

08008c2c <memset>:
 8008c2c:	4402      	add	r2, r0
 8008c2e:	4603      	mov	r3, r0
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d100      	bne.n	8008c36 <memset+0xa>
 8008c34:	4770      	bx	lr
 8008c36:	f803 1b01 	strb.w	r1, [r3], #1
 8008c3a:	e7f9      	b.n	8008c30 <memset+0x4>

08008c3c <__cvt>:
 8008c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c40:	ec55 4b10 	vmov	r4, r5, d0
 8008c44:	2d00      	cmp	r5, #0
 8008c46:	460e      	mov	r6, r1
 8008c48:	4619      	mov	r1, r3
 8008c4a:	462b      	mov	r3, r5
 8008c4c:	bfbb      	ittet	lt
 8008c4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008c52:	461d      	movlt	r5, r3
 8008c54:	2300      	movge	r3, #0
 8008c56:	232d      	movlt	r3, #45	; 0x2d
 8008c58:	700b      	strb	r3, [r1, #0]
 8008c5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008c60:	4691      	mov	r9, r2
 8008c62:	f023 0820 	bic.w	r8, r3, #32
 8008c66:	bfbc      	itt	lt
 8008c68:	4622      	movlt	r2, r4
 8008c6a:	4614      	movlt	r4, r2
 8008c6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008c70:	d005      	beq.n	8008c7e <__cvt+0x42>
 8008c72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008c76:	d100      	bne.n	8008c7a <__cvt+0x3e>
 8008c78:	3601      	adds	r6, #1
 8008c7a:	2102      	movs	r1, #2
 8008c7c:	e000      	b.n	8008c80 <__cvt+0x44>
 8008c7e:	2103      	movs	r1, #3
 8008c80:	ab03      	add	r3, sp, #12
 8008c82:	9301      	str	r3, [sp, #4]
 8008c84:	ab02      	add	r3, sp, #8
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	ec45 4b10 	vmov	d0, r4, r5
 8008c8c:	4653      	mov	r3, sl
 8008c8e:	4632      	mov	r2, r6
 8008c90:	f001 fe4e 	bl	800a930 <_dtoa_r>
 8008c94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008c98:	4607      	mov	r7, r0
 8008c9a:	d102      	bne.n	8008ca2 <__cvt+0x66>
 8008c9c:	f019 0f01 	tst.w	r9, #1
 8008ca0:	d022      	beq.n	8008ce8 <__cvt+0xac>
 8008ca2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ca6:	eb07 0906 	add.w	r9, r7, r6
 8008caa:	d110      	bne.n	8008cce <__cvt+0x92>
 8008cac:	783b      	ldrb	r3, [r7, #0]
 8008cae:	2b30      	cmp	r3, #48	; 0x30
 8008cb0:	d10a      	bne.n	8008cc8 <__cvt+0x8c>
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	4629      	mov	r1, r5
 8008cba:	f7f7 ff05 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cbe:	b918      	cbnz	r0, 8008cc8 <__cvt+0x8c>
 8008cc0:	f1c6 0601 	rsb	r6, r6, #1
 8008cc4:	f8ca 6000 	str.w	r6, [sl]
 8008cc8:	f8da 3000 	ldr.w	r3, [sl]
 8008ccc:	4499      	add	r9, r3
 8008cce:	2200      	movs	r2, #0
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	4629      	mov	r1, r5
 8008cd6:	f7f7 fef7 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cda:	b108      	cbz	r0, 8008ce0 <__cvt+0xa4>
 8008cdc:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ce0:	2230      	movs	r2, #48	; 0x30
 8008ce2:	9b03      	ldr	r3, [sp, #12]
 8008ce4:	454b      	cmp	r3, r9
 8008ce6:	d307      	bcc.n	8008cf8 <__cvt+0xbc>
 8008ce8:	9b03      	ldr	r3, [sp, #12]
 8008cea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cec:	1bdb      	subs	r3, r3, r7
 8008cee:	4638      	mov	r0, r7
 8008cf0:	6013      	str	r3, [r2, #0]
 8008cf2:	b004      	add	sp, #16
 8008cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cf8:	1c59      	adds	r1, r3, #1
 8008cfa:	9103      	str	r1, [sp, #12]
 8008cfc:	701a      	strb	r2, [r3, #0]
 8008cfe:	e7f0      	b.n	8008ce2 <__cvt+0xa6>

08008d00 <__exponent>:
 8008d00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d02:	4603      	mov	r3, r0
 8008d04:	2900      	cmp	r1, #0
 8008d06:	bfb8      	it	lt
 8008d08:	4249      	neglt	r1, r1
 8008d0a:	f803 2b02 	strb.w	r2, [r3], #2
 8008d0e:	bfb4      	ite	lt
 8008d10:	222d      	movlt	r2, #45	; 0x2d
 8008d12:	222b      	movge	r2, #43	; 0x2b
 8008d14:	2909      	cmp	r1, #9
 8008d16:	7042      	strb	r2, [r0, #1]
 8008d18:	dd2a      	ble.n	8008d70 <__exponent+0x70>
 8008d1a:	f10d 0407 	add.w	r4, sp, #7
 8008d1e:	46a4      	mov	ip, r4
 8008d20:	270a      	movs	r7, #10
 8008d22:	46a6      	mov	lr, r4
 8008d24:	460a      	mov	r2, r1
 8008d26:	fb91 f6f7 	sdiv	r6, r1, r7
 8008d2a:	fb07 1516 	mls	r5, r7, r6, r1
 8008d2e:	3530      	adds	r5, #48	; 0x30
 8008d30:	2a63      	cmp	r2, #99	; 0x63
 8008d32:	f104 34ff 	add.w	r4, r4, #4294967295
 8008d36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008d3a:	4631      	mov	r1, r6
 8008d3c:	dcf1      	bgt.n	8008d22 <__exponent+0x22>
 8008d3e:	3130      	adds	r1, #48	; 0x30
 8008d40:	f1ae 0502 	sub.w	r5, lr, #2
 8008d44:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008d48:	1c44      	adds	r4, r0, #1
 8008d4a:	4629      	mov	r1, r5
 8008d4c:	4561      	cmp	r1, ip
 8008d4e:	d30a      	bcc.n	8008d66 <__exponent+0x66>
 8008d50:	f10d 0209 	add.w	r2, sp, #9
 8008d54:	eba2 020e 	sub.w	r2, r2, lr
 8008d58:	4565      	cmp	r5, ip
 8008d5a:	bf88      	it	hi
 8008d5c:	2200      	movhi	r2, #0
 8008d5e:	4413      	add	r3, r2
 8008d60:	1a18      	subs	r0, r3, r0
 8008d62:	b003      	add	sp, #12
 8008d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008d6e:	e7ed      	b.n	8008d4c <__exponent+0x4c>
 8008d70:	2330      	movs	r3, #48	; 0x30
 8008d72:	3130      	adds	r1, #48	; 0x30
 8008d74:	7083      	strb	r3, [r0, #2]
 8008d76:	70c1      	strb	r1, [r0, #3]
 8008d78:	1d03      	adds	r3, r0, #4
 8008d7a:	e7f1      	b.n	8008d60 <__exponent+0x60>

08008d7c <_printf_float>:
 8008d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d80:	ed2d 8b02 	vpush	{d8}
 8008d84:	b08d      	sub	sp, #52	; 0x34
 8008d86:	460c      	mov	r4, r1
 8008d88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008d8c:	4616      	mov	r6, r2
 8008d8e:	461f      	mov	r7, r3
 8008d90:	4605      	mov	r5, r0
 8008d92:	f002 ff2b 	bl	800bbec <_localeconv_r>
 8008d96:	f8d0 a000 	ldr.w	sl, [r0]
 8008d9a:	4650      	mov	r0, sl
 8008d9c:	f7f7 fa18 	bl	80001d0 <strlen>
 8008da0:	2300      	movs	r3, #0
 8008da2:	930a      	str	r3, [sp, #40]	; 0x28
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	9305      	str	r3, [sp, #20]
 8008da8:	f8d8 3000 	ldr.w	r3, [r8]
 8008dac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008db0:	3307      	adds	r3, #7
 8008db2:	f023 0307 	bic.w	r3, r3, #7
 8008db6:	f103 0208 	add.w	r2, r3, #8
 8008dba:	f8c8 2000 	str.w	r2, [r8]
 8008dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008dc6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008dca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008dce:	9307      	str	r3, [sp, #28]
 8008dd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8008dd4:	ee08 0a10 	vmov	s16, r0
 8008dd8:	4b9f      	ldr	r3, [pc, #636]	; (8009058 <_printf_float+0x2dc>)
 8008dda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008dde:	f04f 32ff 	mov.w	r2, #4294967295
 8008de2:	f7f7 fea3 	bl	8000b2c <__aeabi_dcmpun>
 8008de6:	bb88      	cbnz	r0, 8008e4c <_printf_float+0xd0>
 8008de8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008dec:	4b9a      	ldr	r3, [pc, #616]	; (8009058 <_printf_float+0x2dc>)
 8008dee:	f04f 32ff 	mov.w	r2, #4294967295
 8008df2:	f7f7 fe7d 	bl	8000af0 <__aeabi_dcmple>
 8008df6:	bb48      	cbnz	r0, 8008e4c <_printf_float+0xd0>
 8008df8:	2200      	movs	r2, #0
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	4640      	mov	r0, r8
 8008dfe:	4649      	mov	r1, r9
 8008e00:	f7f7 fe6c 	bl	8000adc <__aeabi_dcmplt>
 8008e04:	b110      	cbz	r0, 8008e0c <_printf_float+0x90>
 8008e06:	232d      	movs	r3, #45	; 0x2d
 8008e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e0c:	4b93      	ldr	r3, [pc, #588]	; (800905c <_printf_float+0x2e0>)
 8008e0e:	4894      	ldr	r0, [pc, #592]	; (8009060 <_printf_float+0x2e4>)
 8008e10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008e14:	bf94      	ite	ls
 8008e16:	4698      	movls	r8, r3
 8008e18:	4680      	movhi	r8, r0
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	6123      	str	r3, [r4, #16]
 8008e1e:	9b05      	ldr	r3, [sp, #20]
 8008e20:	f023 0204 	bic.w	r2, r3, #4
 8008e24:	6022      	str	r2, [r4, #0]
 8008e26:	f04f 0900 	mov.w	r9, #0
 8008e2a:	9700      	str	r7, [sp, #0]
 8008e2c:	4633      	mov	r3, r6
 8008e2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008e30:	4621      	mov	r1, r4
 8008e32:	4628      	mov	r0, r5
 8008e34:	f000 f9d8 	bl	80091e8 <_printf_common>
 8008e38:	3001      	adds	r0, #1
 8008e3a:	f040 8090 	bne.w	8008f5e <_printf_float+0x1e2>
 8008e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e42:	b00d      	add	sp, #52	; 0x34
 8008e44:	ecbd 8b02 	vpop	{d8}
 8008e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e4c:	4642      	mov	r2, r8
 8008e4e:	464b      	mov	r3, r9
 8008e50:	4640      	mov	r0, r8
 8008e52:	4649      	mov	r1, r9
 8008e54:	f7f7 fe6a 	bl	8000b2c <__aeabi_dcmpun>
 8008e58:	b140      	cbz	r0, 8008e6c <_printf_float+0xf0>
 8008e5a:	464b      	mov	r3, r9
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	bfbc      	itt	lt
 8008e60:	232d      	movlt	r3, #45	; 0x2d
 8008e62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008e66:	487f      	ldr	r0, [pc, #508]	; (8009064 <_printf_float+0x2e8>)
 8008e68:	4b7f      	ldr	r3, [pc, #508]	; (8009068 <_printf_float+0x2ec>)
 8008e6a:	e7d1      	b.n	8008e10 <_printf_float+0x94>
 8008e6c:	6863      	ldr	r3, [r4, #4]
 8008e6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008e72:	9206      	str	r2, [sp, #24]
 8008e74:	1c5a      	adds	r2, r3, #1
 8008e76:	d13f      	bne.n	8008ef8 <_printf_float+0x17c>
 8008e78:	2306      	movs	r3, #6
 8008e7a:	6063      	str	r3, [r4, #4]
 8008e7c:	9b05      	ldr	r3, [sp, #20]
 8008e7e:	6861      	ldr	r1, [r4, #4]
 8008e80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008e84:	2300      	movs	r3, #0
 8008e86:	9303      	str	r3, [sp, #12]
 8008e88:	ab0a      	add	r3, sp, #40	; 0x28
 8008e8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008e8e:	ab09      	add	r3, sp, #36	; 0x24
 8008e90:	ec49 8b10 	vmov	d0, r8, r9
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	6022      	str	r2, [r4, #0]
 8008e98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	f7ff fecd 	bl	8008c3c <__cvt>
 8008ea2:	9b06      	ldr	r3, [sp, #24]
 8008ea4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ea6:	2b47      	cmp	r3, #71	; 0x47
 8008ea8:	4680      	mov	r8, r0
 8008eaa:	d108      	bne.n	8008ebe <_printf_float+0x142>
 8008eac:	1cc8      	adds	r0, r1, #3
 8008eae:	db02      	blt.n	8008eb6 <_printf_float+0x13a>
 8008eb0:	6863      	ldr	r3, [r4, #4]
 8008eb2:	4299      	cmp	r1, r3
 8008eb4:	dd41      	ble.n	8008f3a <_printf_float+0x1be>
 8008eb6:	f1ab 0b02 	sub.w	fp, fp, #2
 8008eba:	fa5f fb8b 	uxtb.w	fp, fp
 8008ebe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008ec2:	d820      	bhi.n	8008f06 <_printf_float+0x18a>
 8008ec4:	3901      	subs	r1, #1
 8008ec6:	465a      	mov	r2, fp
 8008ec8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008ecc:	9109      	str	r1, [sp, #36]	; 0x24
 8008ece:	f7ff ff17 	bl	8008d00 <__exponent>
 8008ed2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ed4:	1813      	adds	r3, r2, r0
 8008ed6:	2a01      	cmp	r2, #1
 8008ed8:	4681      	mov	r9, r0
 8008eda:	6123      	str	r3, [r4, #16]
 8008edc:	dc02      	bgt.n	8008ee4 <_printf_float+0x168>
 8008ede:	6822      	ldr	r2, [r4, #0]
 8008ee0:	07d2      	lsls	r2, r2, #31
 8008ee2:	d501      	bpl.n	8008ee8 <_printf_float+0x16c>
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	6123      	str	r3, [r4, #16]
 8008ee8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d09c      	beq.n	8008e2a <_printf_float+0xae>
 8008ef0:	232d      	movs	r3, #45	; 0x2d
 8008ef2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ef6:	e798      	b.n	8008e2a <_printf_float+0xae>
 8008ef8:	9a06      	ldr	r2, [sp, #24]
 8008efa:	2a47      	cmp	r2, #71	; 0x47
 8008efc:	d1be      	bne.n	8008e7c <_printf_float+0x100>
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1bc      	bne.n	8008e7c <_printf_float+0x100>
 8008f02:	2301      	movs	r3, #1
 8008f04:	e7b9      	b.n	8008e7a <_printf_float+0xfe>
 8008f06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008f0a:	d118      	bne.n	8008f3e <_printf_float+0x1c2>
 8008f0c:	2900      	cmp	r1, #0
 8008f0e:	6863      	ldr	r3, [r4, #4]
 8008f10:	dd0b      	ble.n	8008f2a <_printf_float+0x1ae>
 8008f12:	6121      	str	r1, [r4, #16]
 8008f14:	b913      	cbnz	r3, 8008f1c <_printf_float+0x1a0>
 8008f16:	6822      	ldr	r2, [r4, #0]
 8008f18:	07d0      	lsls	r0, r2, #31
 8008f1a:	d502      	bpl.n	8008f22 <_printf_float+0x1a6>
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	440b      	add	r3, r1
 8008f20:	6123      	str	r3, [r4, #16]
 8008f22:	65a1      	str	r1, [r4, #88]	; 0x58
 8008f24:	f04f 0900 	mov.w	r9, #0
 8008f28:	e7de      	b.n	8008ee8 <_printf_float+0x16c>
 8008f2a:	b913      	cbnz	r3, 8008f32 <_printf_float+0x1b6>
 8008f2c:	6822      	ldr	r2, [r4, #0]
 8008f2e:	07d2      	lsls	r2, r2, #31
 8008f30:	d501      	bpl.n	8008f36 <_printf_float+0x1ba>
 8008f32:	3302      	adds	r3, #2
 8008f34:	e7f4      	b.n	8008f20 <_printf_float+0x1a4>
 8008f36:	2301      	movs	r3, #1
 8008f38:	e7f2      	b.n	8008f20 <_printf_float+0x1a4>
 8008f3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f40:	4299      	cmp	r1, r3
 8008f42:	db05      	blt.n	8008f50 <_printf_float+0x1d4>
 8008f44:	6823      	ldr	r3, [r4, #0]
 8008f46:	6121      	str	r1, [r4, #16]
 8008f48:	07d8      	lsls	r0, r3, #31
 8008f4a:	d5ea      	bpl.n	8008f22 <_printf_float+0x1a6>
 8008f4c:	1c4b      	adds	r3, r1, #1
 8008f4e:	e7e7      	b.n	8008f20 <_printf_float+0x1a4>
 8008f50:	2900      	cmp	r1, #0
 8008f52:	bfd4      	ite	le
 8008f54:	f1c1 0202 	rsble	r2, r1, #2
 8008f58:	2201      	movgt	r2, #1
 8008f5a:	4413      	add	r3, r2
 8008f5c:	e7e0      	b.n	8008f20 <_printf_float+0x1a4>
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	055a      	lsls	r2, r3, #21
 8008f62:	d407      	bmi.n	8008f74 <_printf_float+0x1f8>
 8008f64:	6923      	ldr	r3, [r4, #16]
 8008f66:	4642      	mov	r2, r8
 8008f68:	4631      	mov	r1, r6
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	47b8      	blx	r7
 8008f6e:	3001      	adds	r0, #1
 8008f70:	d12c      	bne.n	8008fcc <_printf_float+0x250>
 8008f72:	e764      	b.n	8008e3e <_printf_float+0xc2>
 8008f74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f78:	f240 80e0 	bls.w	800913c <_printf_float+0x3c0>
 8008f7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f80:	2200      	movs	r2, #0
 8008f82:	2300      	movs	r3, #0
 8008f84:	f7f7 fda0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	d034      	beq.n	8008ff6 <_printf_float+0x27a>
 8008f8c:	4a37      	ldr	r2, [pc, #220]	; (800906c <_printf_float+0x2f0>)
 8008f8e:	2301      	movs	r3, #1
 8008f90:	4631      	mov	r1, r6
 8008f92:	4628      	mov	r0, r5
 8008f94:	47b8      	blx	r7
 8008f96:	3001      	adds	r0, #1
 8008f98:	f43f af51 	beq.w	8008e3e <_printf_float+0xc2>
 8008f9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	db02      	blt.n	8008faa <_printf_float+0x22e>
 8008fa4:	6823      	ldr	r3, [r4, #0]
 8008fa6:	07d8      	lsls	r0, r3, #31
 8008fa8:	d510      	bpl.n	8008fcc <_printf_float+0x250>
 8008faa:	ee18 3a10 	vmov	r3, s16
 8008fae:	4652      	mov	r2, sl
 8008fb0:	4631      	mov	r1, r6
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	47b8      	blx	r7
 8008fb6:	3001      	adds	r0, #1
 8008fb8:	f43f af41 	beq.w	8008e3e <_printf_float+0xc2>
 8008fbc:	f04f 0800 	mov.w	r8, #0
 8008fc0:	f104 091a 	add.w	r9, r4, #26
 8008fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	4543      	cmp	r3, r8
 8008fca:	dc09      	bgt.n	8008fe0 <_printf_float+0x264>
 8008fcc:	6823      	ldr	r3, [r4, #0]
 8008fce:	079b      	lsls	r3, r3, #30
 8008fd0:	f100 8105 	bmi.w	80091de <_printf_float+0x462>
 8008fd4:	68e0      	ldr	r0, [r4, #12]
 8008fd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fd8:	4298      	cmp	r0, r3
 8008fda:	bfb8      	it	lt
 8008fdc:	4618      	movlt	r0, r3
 8008fde:	e730      	b.n	8008e42 <_printf_float+0xc6>
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	464a      	mov	r2, r9
 8008fe4:	4631      	mov	r1, r6
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	47b8      	blx	r7
 8008fea:	3001      	adds	r0, #1
 8008fec:	f43f af27 	beq.w	8008e3e <_printf_float+0xc2>
 8008ff0:	f108 0801 	add.w	r8, r8, #1
 8008ff4:	e7e6      	b.n	8008fc4 <_printf_float+0x248>
 8008ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	dc39      	bgt.n	8009070 <_printf_float+0x2f4>
 8008ffc:	4a1b      	ldr	r2, [pc, #108]	; (800906c <_printf_float+0x2f0>)
 8008ffe:	2301      	movs	r3, #1
 8009000:	4631      	mov	r1, r6
 8009002:	4628      	mov	r0, r5
 8009004:	47b8      	blx	r7
 8009006:	3001      	adds	r0, #1
 8009008:	f43f af19 	beq.w	8008e3e <_printf_float+0xc2>
 800900c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009010:	4313      	orrs	r3, r2
 8009012:	d102      	bne.n	800901a <_printf_float+0x29e>
 8009014:	6823      	ldr	r3, [r4, #0]
 8009016:	07d9      	lsls	r1, r3, #31
 8009018:	d5d8      	bpl.n	8008fcc <_printf_float+0x250>
 800901a:	ee18 3a10 	vmov	r3, s16
 800901e:	4652      	mov	r2, sl
 8009020:	4631      	mov	r1, r6
 8009022:	4628      	mov	r0, r5
 8009024:	47b8      	blx	r7
 8009026:	3001      	adds	r0, #1
 8009028:	f43f af09 	beq.w	8008e3e <_printf_float+0xc2>
 800902c:	f04f 0900 	mov.w	r9, #0
 8009030:	f104 0a1a 	add.w	sl, r4, #26
 8009034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009036:	425b      	negs	r3, r3
 8009038:	454b      	cmp	r3, r9
 800903a:	dc01      	bgt.n	8009040 <_printf_float+0x2c4>
 800903c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800903e:	e792      	b.n	8008f66 <_printf_float+0x1ea>
 8009040:	2301      	movs	r3, #1
 8009042:	4652      	mov	r2, sl
 8009044:	4631      	mov	r1, r6
 8009046:	4628      	mov	r0, r5
 8009048:	47b8      	blx	r7
 800904a:	3001      	adds	r0, #1
 800904c:	f43f aef7 	beq.w	8008e3e <_printf_float+0xc2>
 8009050:	f109 0901 	add.w	r9, r9, #1
 8009054:	e7ee      	b.n	8009034 <_printf_float+0x2b8>
 8009056:	bf00      	nop
 8009058:	7fefffff 	.word	0x7fefffff
 800905c:	0800f678 	.word	0x0800f678
 8009060:	0800f67c 	.word	0x0800f67c
 8009064:	0800f684 	.word	0x0800f684
 8009068:	0800f680 	.word	0x0800f680
 800906c:	0800fa79 	.word	0x0800fa79
 8009070:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009072:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009074:	429a      	cmp	r2, r3
 8009076:	bfa8      	it	ge
 8009078:	461a      	movge	r2, r3
 800907a:	2a00      	cmp	r2, #0
 800907c:	4691      	mov	r9, r2
 800907e:	dc37      	bgt.n	80090f0 <_printf_float+0x374>
 8009080:	f04f 0b00 	mov.w	fp, #0
 8009084:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009088:	f104 021a 	add.w	r2, r4, #26
 800908c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800908e:	9305      	str	r3, [sp, #20]
 8009090:	eba3 0309 	sub.w	r3, r3, r9
 8009094:	455b      	cmp	r3, fp
 8009096:	dc33      	bgt.n	8009100 <_printf_float+0x384>
 8009098:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800909c:	429a      	cmp	r2, r3
 800909e:	db3b      	blt.n	8009118 <_printf_float+0x39c>
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	07da      	lsls	r2, r3, #31
 80090a4:	d438      	bmi.n	8009118 <_printf_float+0x39c>
 80090a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090a8:	9a05      	ldr	r2, [sp, #20]
 80090aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090ac:	1a9a      	subs	r2, r3, r2
 80090ae:	eba3 0901 	sub.w	r9, r3, r1
 80090b2:	4591      	cmp	r9, r2
 80090b4:	bfa8      	it	ge
 80090b6:	4691      	movge	r9, r2
 80090b8:	f1b9 0f00 	cmp.w	r9, #0
 80090bc:	dc35      	bgt.n	800912a <_printf_float+0x3ae>
 80090be:	f04f 0800 	mov.w	r8, #0
 80090c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090c6:	f104 0a1a 	add.w	sl, r4, #26
 80090ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090ce:	1a9b      	subs	r3, r3, r2
 80090d0:	eba3 0309 	sub.w	r3, r3, r9
 80090d4:	4543      	cmp	r3, r8
 80090d6:	f77f af79 	ble.w	8008fcc <_printf_float+0x250>
 80090da:	2301      	movs	r3, #1
 80090dc:	4652      	mov	r2, sl
 80090de:	4631      	mov	r1, r6
 80090e0:	4628      	mov	r0, r5
 80090e2:	47b8      	blx	r7
 80090e4:	3001      	adds	r0, #1
 80090e6:	f43f aeaa 	beq.w	8008e3e <_printf_float+0xc2>
 80090ea:	f108 0801 	add.w	r8, r8, #1
 80090ee:	e7ec      	b.n	80090ca <_printf_float+0x34e>
 80090f0:	4613      	mov	r3, r2
 80090f2:	4631      	mov	r1, r6
 80090f4:	4642      	mov	r2, r8
 80090f6:	4628      	mov	r0, r5
 80090f8:	47b8      	blx	r7
 80090fa:	3001      	adds	r0, #1
 80090fc:	d1c0      	bne.n	8009080 <_printf_float+0x304>
 80090fe:	e69e      	b.n	8008e3e <_printf_float+0xc2>
 8009100:	2301      	movs	r3, #1
 8009102:	4631      	mov	r1, r6
 8009104:	4628      	mov	r0, r5
 8009106:	9205      	str	r2, [sp, #20]
 8009108:	47b8      	blx	r7
 800910a:	3001      	adds	r0, #1
 800910c:	f43f ae97 	beq.w	8008e3e <_printf_float+0xc2>
 8009110:	9a05      	ldr	r2, [sp, #20]
 8009112:	f10b 0b01 	add.w	fp, fp, #1
 8009116:	e7b9      	b.n	800908c <_printf_float+0x310>
 8009118:	ee18 3a10 	vmov	r3, s16
 800911c:	4652      	mov	r2, sl
 800911e:	4631      	mov	r1, r6
 8009120:	4628      	mov	r0, r5
 8009122:	47b8      	blx	r7
 8009124:	3001      	adds	r0, #1
 8009126:	d1be      	bne.n	80090a6 <_printf_float+0x32a>
 8009128:	e689      	b.n	8008e3e <_printf_float+0xc2>
 800912a:	9a05      	ldr	r2, [sp, #20]
 800912c:	464b      	mov	r3, r9
 800912e:	4442      	add	r2, r8
 8009130:	4631      	mov	r1, r6
 8009132:	4628      	mov	r0, r5
 8009134:	47b8      	blx	r7
 8009136:	3001      	adds	r0, #1
 8009138:	d1c1      	bne.n	80090be <_printf_float+0x342>
 800913a:	e680      	b.n	8008e3e <_printf_float+0xc2>
 800913c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800913e:	2a01      	cmp	r2, #1
 8009140:	dc01      	bgt.n	8009146 <_printf_float+0x3ca>
 8009142:	07db      	lsls	r3, r3, #31
 8009144:	d538      	bpl.n	80091b8 <_printf_float+0x43c>
 8009146:	2301      	movs	r3, #1
 8009148:	4642      	mov	r2, r8
 800914a:	4631      	mov	r1, r6
 800914c:	4628      	mov	r0, r5
 800914e:	47b8      	blx	r7
 8009150:	3001      	adds	r0, #1
 8009152:	f43f ae74 	beq.w	8008e3e <_printf_float+0xc2>
 8009156:	ee18 3a10 	vmov	r3, s16
 800915a:	4652      	mov	r2, sl
 800915c:	4631      	mov	r1, r6
 800915e:	4628      	mov	r0, r5
 8009160:	47b8      	blx	r7
 8009162:	3001      	adds	r0, #1
 8009164:	f43f ae6b 	beq.w	8008e3e <_printf_float+0xc2>
 8009168:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800916c:	2200      	movs	r2, #0
 800916e:	2300      	movs	r3, #0
 8009170:	f7f7 fcaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8009174:	b9d8      	cbnz	r0, 80091ae <_printf_float+0x432>
 8009176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009178:	f108 0201 	add.w	r2, r8, #1
 800917c:	3b01      	subs	r3, #1
 800917e:	4631      	mov	r1, r6
 8009180:	4628      	mov	r0, r5
 8009182:	47b8      	blx	r7
 8009184:	3001      	adds	r0, #1
 8009186:	d10e      	bne.n	80091a6 <_printf_float+0x42a>
 8009188:	e659      	b.n	8008e3e <_printf_float+0xc2>
 800918a:	2301      	movs	r3, #1
 800918c:	4652      	mov	r2, sl
 800918e:	4631      	mov	r1, r6
 8009190:	4628      	mov	r0, r5
 8009192:	47b8      	blx	r7
 8009194:	3001      	adds	r0, #1
 8009196:	f43f ae52 	beq.w	8008e3e <_printf_float+0xc2>
 800919a:	f108 0801 	add.w	r8, r8, #1
 800919e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091a0:	3b01      	subs	r3, #1
 80091a2:	4543      	cmp	r3, r8
 80091a4:	dcf1      	bgt.n	800918a <_printf_float+0x40e>
 80091a6:	464b      	mov	r3, r9
 80091a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80091ac:	e6dc      	b.n	8008f68 <_printf_float+0x1ec>
 80091ae:	f04f 0800 	mov.w	r8, #0
 80091b2:	f104 0a1a 	add.w	sl, r4, #26
 80091b6:	e7f2      	b.n	800919e <_printf_float+0x422>
 80091b8:	2301      	movs	r3, #1
 80091ba:	4642      	mov	r2, r8
 80091bc:	e7df      	b.n	800917e <_printf_float+0x402>
 80091be:	2301      	movs	r3, #1
 80091c0:	464a      	mov	r2, r9
 80091c2:	4631      	mov	r1, r6
 80091c4:	4628      	mov	r0, r5
 80091c6:	47b8      	blx	r7
 80091c8:	3001      	adds	r0, #1
 80091ca:	f43f ae38 	beq.w	8008e3e <_printf_float+0xc2>
 80091ce:	f108 0801 	add.w	r8, r8, #1
 80091d2:	68e3      	ldr	r3, [r4, #12]
 80091d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80091d6:	1a5b      	subs	r3, r3, r1
 80091d8:	4543      	cmp	r3, r8
 80091da:	dcf0      	bgt.n	80091be <_printf_float+0x442>
 80091dc:	e6fa      	b.n	8008fd4 <_printf_float+0x258>
 80091de:	f04f 0800 	mov.w	r8, #0
 80091e2:	f104 0919 	add.w	r9, r4, #25
 80091e6:	e7f4      	b.n	80091d2 <_printf_float+0x456>

080091e8 <_printf_common>:
 80091e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091ec:	4616      	mov	r6, r2
 80091ee:	4699      	mov	r9, r3
 80091f0:	688a      	ldr	r2, [r1, #8]
 80091f2:	690b      	ldr	r3, [r1, #16]
 80091f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091f8:	4293      	cmp	r3, r2
 80091fa:	bfb8      	it	lt
 80091fc:	4613      	movlt	r3, r2
 80091fe:	6033      	str	r3, [r6, #0]
 8009200:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009204:	4607      	mov	r7, r0
 8009206:	460c      	mov	r4, r1
 8009208:	b10a      	cbz	r2, 800920e <_printf_common+0x26>
 800920a:	3301      	adds	r3, #1
 800920c:	6033      	str	r3, [r6, #0]
 800920e:	6823      	ldr	r3, [r4, #0]
 8009210:	0699      	lsls	r1, r3, #26
 8009212:	bf42      	ittt	mi
 8009214:	6833      	ldrmi	r3, [r6, #0]
 8009216:	3302      	addmi	r3, #2
 8009218:	6033      	strmi	r3, [r6, #0]
 800921a:	6825      	ldr	r5, [r4, #0]
 800921c:	f015 0506 	ands.w	r5, r5, #6
 8009220:	d106      	bne.n	8009230 <_printf_common+0x48>
 8009222:	f104 0a19 	add.w	sl, r4, #25
 8009226:	68e3      	ldr	r3, [r4, #12]
 8009228:	6832      	ldr	r2, [r6, #0]
 800922a:	1a9b      	subs	r3, r3, r2
 800922c:	42ab      	cmp	r3, r5
 800922e:	dc26      	bgt.n	800927e <_printf_common+0x96>
 8009230:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009234:	1e13      	subs	r3, r2, #0
 8009236:	6822      	ldr	r2, [r4, #0]
 8009238:	bf18      	it	ne
 800923a:	2301      	movne	r3, #1
 800923c:	0692      	lsls	r2, r2, #26
 800923e:	d42b      	bmi.n	8009298 <_printf_common+0xb0>
 8009240:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009244:	4649      	mov	r1, r9
 8009246:	4638      	mov	r0, r7
 8009248:	47c0      	blx	r8
 800924a:	3001      	adds	r0, #1
 800924c:	d01e      	beq.n	800928c <_printf_common+0xa4>
 800924e:	6823      	ldr	r3, [r4, #0]
 8009250:	68e5      	ldr	r5, [r4, #12]
 8009252:	6832      	ldr	r2, [r6, #0]
 8009254:	f003 0306 	and.w	r3, r3, #6
 8009258:	2b04      	cmp	r3, #4
 800925a:	bf08      	it	eq
 800925c:	1aad      	subeq	r5, r5, r2
 800925e:	68a3      	ldr	r3, [r4, #8]
 8009260:	6922      	ldr	r2, [r4, #16]
 8009262:	bf0c      	ite	eq
 8009264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009268:	2500      	movne	r5, #0
 800926a:	4293      	cmp	r3, r2
 800926c:	bfc4      	itt	gt
 800926e:	1a9b      	subgt	r3, r3, r2
 8009270:	18ed      	addgt	r5, r5, r3
 8009272:	2600      	movs	r6, #0
 8009274:	341a      	adds	r4, #26
 8009276:	42b5      	cmp	r5, r6
 8009278:	d11a      	bne.n	80092b0 <_printf_common+0xc8>
 800927a:	2000      	movs	r0, #0
 800927c:	e008      	b.n	8009290 <_printf_common+0xa8>
 800927e:	2301      	movs	r3, #1
 8009280:	4652      	mov	r2, sl
 8009282:	4649      	mov	r1, r9
 8009284:	4638      	mov	r0, r7
 8009286:	47c0      	blx	r8
 8009288:	3001      	adds	r0, #1
 800928a:	d103      	bne.n	8009294 <_printf_common+0xac>
 800928c:	f04f 30ff 	mov.w	r0, #4294967295
 8009290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009294:	3501      	adds	r5, #1
 8009296:	e7c6      	b.n	8009226 <_printf_common+0x3e>
 8009298:	18e1      	adds	r1, r4, r3
 800929a:	1c5a      	adds	r2, r3, #1
 800929c:	2030      	movs	r0, #48	; 0x30
 800929e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092a2:	4422      	add	r2, r4
 80092a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092ac:	3302      	adds	r3, #2
 80092ae:	e7c7      	b.n	8009240 <_printf_common+0x58>
 80092b0:	2301      	movs	r3, #1
 80092b2:	4622      	mov	r2, r4
 80092b4:	4649      	mov	r1, r9
 80092b6:	4638      	mov	r0, r7
 80092b8:	47c0      	blx	r8
 80092ba:	3001      	adds	r0, #1
 80092bc:	d0e6      	beq.n	800928c <_printf_common+0xa4>
 80092be:	3601      	adds	r6, #1
 80092c0:	e7d9      	b.n	8009276 <_printf_common+0x8e>
	...

080092c4 <_printf_i>:
 80092c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092c8:	7e0f      	ldrb	r7, [r1, #24]
 80092ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092cc:	2f78      	cmp	r7, #120	; 0x78
 80092ce:	4691      	mov	r9, r2
 80092d0:	4680      	mov	r8, r0
 80092d2:	460c      	mov	r4, r1
 80092d4:	469a      	mov	sl, r3
 80092d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80092da:	d807      	bhi.n	80092ec <_printf_i+0x28>
 80092dc:	2f62      	cmp	r7, #98	; 0x62
 80092de:	d80a      	bhi.n	80092f6 <_printf_i+0x32>
 80092e0:	2f00      	cmp	r7, #0
 80092e2:	f000 80d8 	beq.w	8009496 <_printf_i+0x1d2>
 80092e6:	2f58      	cmp	r7, #88	; 0x58
 80092e8:	f000 80a3 	beq.w	8009432 <_printf_i+0x16e>
 80092ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80092f4:	e03a      	b.n	800936c <_printf_i+0xa8>
 80092f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80092fa:	2b15      	cmp	r3, #21
 80092fc:	d8f6      	bhi.n	80092ec <_printf_i+0x28>
 80092fe:	a101      	add	r1, pc, #4	; (adr r1, 8009304 <_printf_i+0x40>)
 8009300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009304:	0800935d 	.word	0x0800935d
 8009308:	08009371 	.word	0x08009371
 800930c:	080092ed 	.word	0x080092ed
 8009310:	080092ed 	.word	0x080092ed
 8009314:	080092ed 	.word	0x080092ed
 8009318:	080092ed 	.word	0x080092ed
 800931c:	08009371 	.word	0x08009371
 8009320:	080092ed 	.word	0x080092ed
 8009324:	080092ed 	.word	0x080092ed
 8009328:	080092ed 	.word	0x080092ed
 800932c:	080092ed 	.word	0x080092ed
 8009330:	0800947d 	.word	0x0800947d
 8009334:	080093a1 	.word	0x080093a1
 8009338:	0800945f 	.word	0x0800945f
 800933c:	080092ed 	.word	0x080092ed
 8009340:	080092ed 	.word	0x080092ed
 8009344:	0800949f 	.word	0x0800949f
 8009348:	080092ed 	.word	0x080092ed
 800934c:	080093a1 	.word	0x080093a1
 8009350:	080092ed 	.word	0x080092ed
 8009354:	080092ed 	.word	0x080092ed
 8009358:	08009467 	.word	0x08009467
 800935c:	682b      	ldr	r3, [r5, #0]
 800935e:	1d1a      	adds	r2, r3, #4
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	602a      	str	r2, [r5, #0]
 8009364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800936c:	2301      	movs	r3, #1
 800936e:	e0a3      	b.n	80094b8 <_printf_i+0x1f4>
 8009370:	6820      	ldr	r0, [r4, #0]
 8009372:	6829      	ldr	r1, [r5, #0]
 8009374:	0606      	lsls	r6, r0, #24
 8009376:	f101 0304 	add.w	r3, r1, #4
 800937a:	d50a      	bpl.n	8009392 <_printf_i+0xce>
 800937c:	680e      	ldr	r6, [r1, #0]
 800937e:	602b      	str	r3, [r5, #0]
 8009380:	2e00      	cmp	r6, #0
 8009382:	da03      	bge.n	800938c <_printf_i+0xc8>
 8009384:	232d      	movs	r3, #45	; 0x2d
 8009386:	4276      	negs	r6, r6
 8009388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800938c:	485e      	ldr	r0, [pc, #376]	; (8009508 <_printf_i+0x244>)
 800938e:	230a      	movs	r3, #10
 8009390:	e019      	b.n	80093c6 <_printf_i+0x102>
 8009392:	680e      	ldr	r6, [r1, #0]
 8009394:	602b      	str	r3, [r5, #0]
 8009396:	f010 0f40 	tst.w	r0, #64	; 0x40
 800939a:	bf18      	it	ne
 800939c:	b236      	sxthne	r6, r6
 800939e:	e7ef      	b.n	8009380 <_printf_i+0xbc>
 80093a0:	682b      	ldr	r3, [r5, #0]
 80093a2:	6820      	ldr	r0, [r4, #0]
 80093a4:	1d19      	adds	r1, r3, #4
 80093a6:	6029      	str	r1, [r5, #0]
 80093a8:	0601      	lsls	r1, r0, #24
 80093aa:	d501      	bpl.n	80093b0 <_printf_i+0xec>
 80093ac:	681e      	ldr	r6, [r3, #0]
 80093ae:	e002      	b.n	80093b6 <_printf_i+0xf2>
 80093b0:	0646      	lsls	r6, r0, #25
 80093b2:	d5fb      	bpl.n	80093ac <_printf_i+0xe8>
 80093b4:	881e      	ldrh	r6, [r3, #0]
 80093b6:	4854      	ldr	r0, [pc, #336]	; (8009508 <_printf_i+0x244>)
 80093b8:	2f6f      	cmp	r7, #111	; 0x6f
 80093ba:	bf0c      	ite	eq
 80093bc:	2308      	moveq	r3, #8
 80093be:	230a      	movne	r3, #10
 80093c0:	2100      	movs	r1, #0
 80093c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093c6:	6865      	ldr	r5, [r4, #4]
 80093c8:	60a5      	str	r5, [r4, #8]
 80093ca:	2d00      	cmp	r5, #0
 80093cc:	bfa2      	ittt	ge
 80093ce:	6821      	ldrge	r1, [r4, #0]
 80093d0:	f021 0104 	bicge.w	r1, r1, #4
 80093d4:	6021      	strge	r1, [r4, #0]
 80093d6:	b90e      	cbnz	r6, 80093dc <_printf_i+0x118>
 80093d8:	2d00      	cmp	r5, #0
 80093da:	d04d      	beq.n	8009478 <_printf_i+0x1b4>
 80093dc:	4615      	mov	r5, r2
 80093de:	fbb6 f1f3 	udiv	r1, r6, r3
 80093e2:	fb03 6711 	mls	r7, r3, r1, r6
 80093e6:	5dc7      	ldrb	r7, [r0, r7]
 80093e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80093ec:	4637      	mov	r7, r6
 80093ee:	42bb      	cmp	r3, r7
 80093f0:	460e      	mov	r6, r1
 80093f2:	d9f4      	bls.n	80093de <_printf_i+0x11a>
 80093f4:	2b08      	cmp	r3, #8
 80093f6:	d10b      	bne.n	8009410 <_printf_i+0x14c>
 80093f8:	6823      	ldr	r3, [r4, #0]
 80093fa:	07de      	lsls	r6, r3, #31
 80093fc:	d508      	bpl.n	8009410 <_printf_i+0x14c>
 80093fe:	6923      	ldr	r3, [r4, #16]
 8009400:	6861      	ldr	r1, [r4, #4]
 8009402:	4299      	cmp	r1, r3
 8009404:	bfde      	ittt	le
 8009406:	2330      	movle	r3, #48	; 0x30
 8009408:	f805 3c01 	strble.w	r3, [r5, #-1]
 800940c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009410:	1b52      	subs	r2, r2, r5
 8009412:	6122      	str	r2, [r4, #16]
 8009414:	f8cd a000 	str.w	sl, [sp]
 8009418:	464b      	mov	r3, r9
 800941a:	aa03      	add	r2, sp, #12
 800941c:	4621      	mov	r1, r4
 800941e:	4640      	mov	r0, r8
 8009420:	f7ff fee2 	bl	80091e8 <_printf_common>
 8009424:	3001      	adds	r0, #1
 8009426:	d14c      	bne.n	80094c2 <_printf_i+0x1fe>
 8009428:	f04f 30ff 	mov.w	r0, #4294967295
 800942c:	b004      	add	sp, #16
 800942e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009432:	4835      	ldr	r0, [pc, #212]	; (8009508 <_printf_i+0x244>)
 8009434:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009438:	6829      	ldr	r1, [r5, #0]
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009440:	6029      	str	r1, [r5, #0]
 8009442:	061d      	lsls	r5, r3, #24
 8009444:	d514      	bpl.n	8009470 <_printf_i+0x1ac>
 8009446:	07df      	lsls	r7, r3, #31
 8009448:	bf44      	itt	mi
 800944a:	f043 0320 	orrmi.w	r3, r3, #32
 800944e:	6023      	strmi	r3, [r4, #0]
 8009450:	b91e      	cbnz	r6, 800945a <_printf_i+0x196>
 8009452:	6823      	ldr	r3, [r4, #0]
 8009454:	f023 0320 	bic.w	r3, r3, #32
 8009458:	6023      	str	r3, [r4, #0]
 800945a:	2310      	movs	r3, #16
 800945c:	e7b0      	b.n	80093c0 <_printf_i+0xfc>
 800945e:	6823      	ldr	r3, [r4, #0]
 8009460:	f043 0320 	orr.w	r3, r3, #32
 8009464:	6023      	str	r3, [r4, #0]
 8009466:	2378      	movs	r3, #120	; 0x78
 8009468:	4828      	ldr	r0, [pc, #160]	; (800950c <_printf_i+0x248>)
 800946a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800946e:	e7e3      	b.n	8009438 <_printf_i+0x174>
 8009470:	0659      	lsls	r1, r3, #25
 8009472:	bf48      	it	mi
 8009474:	b2b6      	uxthmi	r6, r6
 8009476:	e7e6      	b.n	8009446 <_printf_i+0x182>
 8009478:	4615      	mov	r5, r2
 800947a:	e7bb      	b.n	80093f4 <_printf_i+0x130>
 800947c:	682b      	ldr	r3, [r5, #0]
 800947e:	6826      	ldr	r6, [r4, #0]
 8009480:	6961      	ldr	r1, [r4, #20]
 8009482:	1d18      	adds	r0, r3, #4
 8009484:	6028      	str	r0, [r5, #0]
 8009486:	0635      	lsls	r5, r6, #24
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	d501      	bpl.n	8009490 <_printf_i+0x1cc>
 800948c:	6019      	str	r1, [r3, #0]
 800948e:	e002      	b.n	8009496 <_printf_i+0x1d2>
 8009490:	0670      	lsls	r0, r6, #25
 8009492:	d5fb      	bpl.n	800948c <_printf_i+0x1c8>
 8009494:	8019      	strh	r1, [r3, #0]
 8009496:	2300      	movs	r3, #0
 8009498:	6123      	str	r3, [r4, #16]
 800949a:	4615      	mov	r5, r2
 800949c:	e7ba      	b.n	8009414 <_printf_i+0x150>
 800949e:	682b      	ldr	r3, [r5, #0]
 80094a0:	1d1a      	adds	r2, r3, #4
 80094a2:	602a      	str	r2, [r5, #0]
 80094a4:	681d      	ldr	r5, [r3, #0]
 80094a6:	6862      	ldr	r2, [r4, #4]
 80094a8:	2100      	movs	r1, #0
 80094aa:	4628      	mov	r0, r5
 80094ac:	f7f6 fe98 	bl	80001e0 <memchr>
 80094b0:	b108      	cbz	r0, 80094b6 <_printf_i+0x1f2>
 80094b2:	1b40      	subs	r0, r0, r5
 80094b4:	6060      	str	r0, [r4, #4]
 80094b6:	6863      	ldr	r3, [r4, #4]
 80094b8:	6123      	str	r3, [r4, #16]
 80094ba:	2300      	movs	r3, #0
 80094bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094c0:	e7a8      	b.n	8009414 <_printf_i+0x150>
 80094c2:	6923      	ldr	r3, [r4, #16]
 80094c4:	462a      	mov	r2, r5
 80094c6:	4649      	mov	r1, r9
 80094c8:	4640      	mov	r0, r8
 80094ca:	47d0      	blx	sl
 80094cc:	3001      	adds	r0, #1
 80094ce:	d0ab      	beq.n	8009428 <_printf_i+0x164>
 80094d0:	6823      	ldr	r3, [r4, #0]
 80094d2:	079b      	lsls	r3, r3, #30
 80094d4:	d413      	bmi.n	80094fe <_printf_i+0x23a>
 80094d6:	68e0      	ldr	r0, [r4, #12]
 80094d8:	9b03      	ldr	r3, [sp, #12]
 80094da:	4298      	cmp	r0, r3
 80094dc:	bfb8      	it	lt
 80094de:	4618      	movlt	r0, r3
 80094e0:	e7a4      	b.n	800942c <_printf_i+0x168>
 80094e2:	2301      	movs	r3, #1
 80094e4:	4632      	mov	r2, r6
 80094e6:	4649      	mov	r1, r9
 80094e8:	4640      	mov	r0, r8
 80094ea:	47d0      	blx	sl
 80094ec:	3001      	adds	r0, #1
 80094ee:	d09b      	beq.n	8009428 <_printf_i+0x164>
 80094f0:	3501      	adds	r5, #1
 80094f2:	68e3      	ldr	r3, [r4, #12]
 80094f4:	9903      	ldr	r1, [sp, #12]
 80094f6:	1a5b      	subs	r3, r3, r1
 80094f8:	42ab      	cmp	r3, r5
 80094fa:	dcf2      	bgt.n	80094e2 <_printf_i+0x21e>
 80094fc:	e7eb      	b.n	80094d6 <_printf_i+0x212>
 80094fe:	2500      	movs	r5, #0
 8009500:	f104 0619 	add.w	r6, r4, #25
 8009504:	e7f5      	b.n	80094f2 <_printf_i+0x22e>
 8009506:	bf00      	nop
 8009508:	0800f688 	.word	0x0800f688
 800950c:	0800f699 	.word	0x0800f699

08009510 <_scanf_float>:
 8009510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009514:	b087      	sub	sp, #28
 8009516:	4617      	mov	r7, r2
 8009518:	9303      	str	r3, [sp, #12]
 800951a:	688b      	ldr	r3, [r1, #8]
 800951c:	1e5a      	subs	r2, r3, #1
 800951e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009522:	bf83      	ittte	hi
 8009524:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009528:	195b      	addhi	r3, r3, r5
 800952a:	9302      	strhi	r3, [sp, #8]
 800952c:	2300      	movls	r3, #0
 800952e:	bf86      	itte	hi
 8009530:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009534:	608b      	strhi	r3, [r1, #8]
 8009536:	9302      	strls	r3, [sp, #8]
 8009538:	680b      	ldr	r3, [r1, #0]
 800953a:	468b      	mov	fp, r1
 800953c:	2500      	movs	r5, #0
 800953e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009542:	f84b 3b1c 	str.w	r3, [fp], #28
 8009546:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800954a:	4680      	mov	r8, r0
 800954c:	460c      	mov	r4, r1
 800954e:	465e      	mov	r6, fp
 8009550:	46aa      	mov	sl, r5
 8009552:	46a9      	mov	r9, r5
 8009554:	9501      	str	r5, [sp, #4]
 8009556:	68a2      	ldr	r2, [r4, #8]
 8009558:	b152      	cbz	r2, 8009570 <_scanf_float+0x60>
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	2b4e      	cmp	r3, #78	; 0x4e
 8009560:	d864      	bhi.n	800962c <_scanf_float+0x11c>
 8009562:	2b40      	cmp	r3, #64	; 0x40
 8009564:	d83c      	bhi.n	80095e0 <_scanf_float+0xd0>
 8009566:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800956a:	b2c8      	uxtb	r0, r1
 800956c:	280e      	cmp	r0, #14
 800956e:	d93a      	bls.n	80095e6 <_scanf_float+0xd6>
 8009570:	f1b9 0f00 	cmp.w	r9, #0
 8009574:	d003      	beq.n	800957e <_scanf_float+0x6e>
 8009576:	6823      	ldr	r3, [r4, #0]
 8009578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800957c:	6023      	str	r3, [r4, #0]
 800957e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009582:	f1ba 0f01 	cmp.w	sl, #1
 8009586:	f200 8113 	bhi.w	80097b0 <_scanf_float+0x2a0>
 800958a:	455e      	cmp	r6, fp
 800958c:	f200 8105 	bhi.w	800979a <_scanf_float+0x28a>
 8009590:	2501      	movs	r5, #1
 8009592:	4628      	mov	r0, r5
 8009594:	b007      	add	sp, #28
 8009596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800959a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800959e:	2a0d      	cmp	r2, #13
 80095a0:	d8e6      	bhi.n	8009570 <_scanf_float+0x60>
 80095a2:	a101      	add	r1, pc, #4	; (adr r1, 80095a8 <_scanf_float+0x98>)
 80095a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80095a8:	080096e7 	.word	0x080096e7
 80095ac:	08009571 	.word	0x08009571
 80095b0:	08009571 	.word	0x08009571
 80095b4:	08009571 	.word	0x08009571
 80095b8:	08009747 	.word	0x08009747
 80095bc:	0800971f 	.word	0x0800971f
 80095c0:	08009571 	.word	0x08009571
 80095c4:	08009571 	.word	0x08009571
 80095c8:	080096f5 	.word	0x080096f5
 80095cc:	08009571 	.word	0x08009571
 80095d0:	08009571 	.word	0x08009571
 80095d4:	08009571 	.word	0x08009571
 80095d8:	08009571 	.word	0x08009571
 80095dc:	080096ad 	.word	0x080096ad
 80095e0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80095e4:	e7db      	b.n	800959e <_scanf_float+0x8e>
 80095e6:	290e      	cmp	r1, #14
 80095e8:	d8c2      	bhi.n	8009570 <_scanf_float+0x60>
 80095ea:	a001      	add	r0, pc, #4	; (adr r0, 80095f0 <_scanf_float+0xe0>)
 80095ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80095f0:	0800969f 	.word	0x0800969f
 80095f4:	08009571 	.word	0x08009571
 80095f8:	0800969f 	.word	0x0800969f
 80095fc:	08009733 	.word	0x08009733
 8009600:	08009571 	.word	0x08009571
 8009604:	0800964d 	.word	0x0800964d
 8009608:	08009689 	.word	0x08009689
 800960c:	08009689 	.word	0x08009689
 8009610:	08009689 	.word	0x08009689
 8009614:	08009689 	.word	0x08009689
 8009618:	08009689 	.word	0x08009689
 800961c:	08009689 	.word	0x08009689
 8009620:	08009689 	.word	0x08009689
 8009624:	08009689 	.word	0x08009689
 8009628:	08009689 	.word	0x08009689
 800962c:	2b6e      	cmp	r3, #110	; 0x6e
 800962e:	d809      	bhi.n	8009644 <_scanf_float+0x134>
 8009630:	2b60      	cmp	r3, #96	; 0x60
 8009632:	d8b2      	bhi.n	800959a <_scanf_float+0x8a>
 8009634:	2b54      	cmp	r3, #84	; 0x54
 8009636:	d077      	beq.n	8009728 <_scanf_float+0x218>
 8009638:	2b59      	cmp	r3, #89	; 0x59
 800963a:	d199      	bne.n	8009570 <_scanf_float+0x60>
 800963c:	2d07      	cmp	r5, #7
 800963e:	d197      	bne.n	8009570 <_scanf_float+0x60>
 8009640:	2508      	movs	r5, #8
 8009642:	e029      	b.n	8009698 <_scanf_float+0x188>
 8009644:	2b74      	cmp	r3, #116	; 0x74
 8009646:	d06f      	beq.n	8009728 <_scanf_float+0x218>
 8009648:	2b79      	cmp	r3, #121	; 0x79
 800964a:	e7f6      	b.n	800963a <_scanf_float+0x12a>
 800964c:	6821      	ldr	r1, [r4, #0]
 800964e:	05c8      	lsls	r0, r1, #23
 8009650:	d51a      	bpl.n	8009688 <_scanf_float+0x178>
 8009652:	9b02      	ldr	r3, [sp, #8]
 8009654:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009658:	6021      	str	r1, [r4, #0]
 800965a:	f109 0901 	add.w	r9, r9, #1
 800965e:	b11b      	cbz	r3, 8009668 <_scanf_float+0x158>
 8009660:	3b01      	subs	r3, #1
 8009662:	3201      	adds	r2, #1
 8009664:	9302      	str	r3, [sp, #8]
 8009666:	60a2      	str	r2, [r4, #8]
 8009668:	68a3      	ldr	r3, [r4, #8]
 800966a:	3b01      	subs	r3, #1
 800966c:	60a3      	str	r3, [r4, #8]
 800966e:	6923      	ldr	r3, [r4, #16]
 8009670:	3301      	adds	r3, #1
 8009672:	6123      	str	r3, [r4, #16]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	3b01      	subs	r3, #1
 8009678:	2b00      	cmp	r3, #0
 800967a:	607b      	str	r3, [r7, #4]
 800967c:	f340 8084 	ble.w	8009788 <_scanf_float+0x278>
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	3301      	adds	r3, #1
 8009684:	603b      	str	r3, [r7, #0]
 8009686:	e766      	b.n	8009556 <_scanf_float+0x46>
 8009688:	eb1a 0f05 	cmn.w	sl, r5
 800968c:	f47f af70 	bne.w	8009570 <_scanf_float+0x60>
 8009690:	6822      	ldr	r2, [r4, #0]
 8009692:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009696:	6022      	str	r2, [r4, #0]
 8009698:	f806 3b01 	strb.w	r3, [r6], #1
 800969c:	e7e4      	b.n	8009668 <_scanf_float+0x158>
 800969e:	6822      	ldr	r2, [r4, #0]
 80096a0:	0610      	lsls	r0, r2, #24
 80096a2:	f57f af65 	bpl.w	8009570 <_scanf_float+0x60>
 80096a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096aa:	e7f4      	b.n	8009696 <_scanf_float+0x186>
 80096ac:	f1ba 0f00 	cmp.w	sl, #0
 80096b0:	d10e      	bne.n	80096d0 <_scanf_float+0x1c0>
 80096b2:	f1b9 0f00 	cmp.w	r9, #0
 80096b6:	d10e      	bne.n	80096d6 <_scanf_float+0x1c6>
 80096b8:	6822      	ldr	r2, [r4, #0]
 80096ba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80096be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80096c2:	d108      	bne.n	80096d6 <_scanf_float+0x1c6>
 80096c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80096c8:	6022      	str	r2, [r4, #0]
 80096ca:	f04f 0a01 	mov.w	sl, #1
 80096ce:	e7e3      	b.n	8009698 <_scanf_float+0x188>
 80096d0:	f1ba 0f02 	cmp.w	sl, #2
 80096d4:	d055      	beq.n	8009782 <_scanf_float+0x272>
 80096d6:	2d01      	cmp	r5, #1
 80096d8:	d002      	beq.n	80096e0 <_scanf_float+0x1d0>
 80096da:	2d04      	cmp	r5, #4
 80096dc:	f47f af48 	bne.w	8009570 <_scanf_float+0x60>
 80096e0:	3501      	adds	r5, #1
 80096e2:	b2ed      	uxtb	r5, r5
 80096e4:	e7d8      	b.n	8009698 <_scanf_float+0x188>
 80096e6:	f1ba 0f01 	cmp.w	sl, #1
 80096ea:	f47f af41 	bne.w	8009570 <_scanf_float+0x60>
 80096ee:	f04f 0a02 	mov.w	sl, #2
 80096f2:	e7d1      	b.n	8009698 <_scanf_float+0x188>
 80096f4:	b97d      	cbnz	r5, 8009716 <_scanf_float+0x206>
 80096f6:	f1b9 0f00 	cmp.w	r9, #0
 80096fa:	f47f af3c 	bne.w	8009576 <_scanf_float+0x66>
 80096fe:	6822      	ldr	r2, [r4, #0]
 8009700:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009704:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009708:	f47f af39 	bne.w	800957e <_scanf_float+0x6e>
 800970c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009710:	6022      	str	r2, [r4, #0]
 8009712:	2501      	movs	r5, #1
 8009714:	e7c0      	b.n	8009698 <_scanf_float+0x188>
 8009716:	2d03      	cmp	r5, #3
 8009718:	d0e2      	beq.n	80096e0 <_scanf_float+0x1d0>
 800971a:	2d05      	cmp	r5, #5
 800971c:	e7de      	b.n	80096dc <_scanf_float+0x1cc>
 800971e:	2d02      	cmp	r5, #2
 8009720:	f47f af26 	bne.w	8009570 <_scanf_float+0x60>
 8009724:	2503      	movs	r5, #3
 8009726:	e7b7      	b.n	8009698 <_scanf_float+0x188>
 8009728:	2d06      	cmp	r5, #6
 800972a:	f47f af21 	bne.w	8009570 <_scanf_float+0x60>
 800972e:	2507      	movs	r5, #7
 8009730:	e7b2      	b.n	8009698 <_scanf_float+0x188>
 8009732:	6822      	ldr	r2, [r4, #0]
 8009734:	0591      	lsls	r1, r2, #22
 8009736:	f57f af1b 	bpl.w	8009570 <_scanf_float+0x60>
 800973a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800973e:	6022      	str	r2, [r4, #0]
 8009740:	f8cd 9004 	str.w	r9, [sp, #4]
 8009744:	e7a8      	b.n	8009698 <_scanf_float+0x188>
 8009746:	6822      	ldr	r2, [r4, #0]
 8009748:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800974c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009750:	d006      	beq.n	8009760 <_scanf_float+0x250>
 8009752:	0550      	lsls	r0, r2, #21
 8009754:	f57f af0c 	bpl.w	8009570 <_scanf_float+0x60>
 8009758:	f1b9 0f00 	cmp.w	r9, #0
 800975c:	f43f af0f 	beq.w	800957e <_scanf_float+0x6e>
 8009760:	0591      	lsls	r1, r2, #22
 8009762:	bf58      	it	pl
 8009764:	9901      	ldrpl	r1, [sp, #4]
 8009766:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800976a:	bf58      	it	pl
 800976c:	eba9 0101 	subpl.w	r1, r9, r1
 8009770:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009774:	bf58      	it	pl
 8009776:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800977a:	6022      	str	r2, [r4, #0]
 800977c:	f04f 0900 	mov.w	r9, #0
 8009780:	e78a      	b.n	8009698 <_scanf_float+0x188>
 8009782:	f04f 0a03 	mov.w	sl, #3
 8009786:	e787      	b.n	8009698 <_scanf_float+0x188>
 8009788:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800978c:	4639      	mov	r1, r7
 800978e:	4640      	mov	r0, r8
 8009790:	4798      	blx	r3
 8009792:	2800      	cmp	r0, #0
 8009794:	f43f aedf 	beq.w	8009556 <_scanf_float+0x46>
 8009798:	e6ea      	b.n	8009570 <_scanf_float+0x60>
 800979a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800979e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80097a2:	463a      	mov	r2, r7
 80097a4:	4640      	mov	r0, r8
 80097a6:	4798      	blx	r3
 80097a8:	6923      	ldr	r3, [r4, #16]
 80097aa:	3b01      	subs	r3, #1
 80097ac:	6123      	str	r3, [r4, #16]
 80097ae:	e6ec      	b.n	800958a <_scanf_float+0x7a>
 80097b0:	1e6b      	subs	r3, r5, #1
 80097b2:	2b06      	cmp	r3, #6
 80097b4:	d825      	bhi.n	8009802 <_scanf_float+0x2f2>
 80097b6:	2d02      	cmp	r5, #2
 80097b8:	d836      	bhi.n	8009828 <_scanf_float+0x318>
 80097ba:	455e      	cmp	r6, fp
 80097bc:	f67f aee8 	bls.w	8009590 <_scanf_float+0x80>
 80097c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80097c8:	463a      	mov	r2, r7
 80097ca:	4640      	mov	r0, r8
 80097cc:	4798      	blx	r3
 80097ce:	6923      	ldr	r3, [r4, #16]
 80097d0:	3b01      	subs	r3, #1
 80097d2:	6123      	str	r3, [r4, #16]
 80097d4:	e7f1      	b.n	80097ba <_scanf_float+0x2aa>
 80097d6:	9802      	ldr	r0, [sp, #8]
 80097d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097dc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80097e0:	9002      	str	r0, [sp, #8]
 80097e2:	463a      	mov	r2, r7
 80097e4:	4640      	mov	r0, r8
 80097e6:	4798      	blx	r3
 80097e8:	6923      	ldr	r3, [r4, #16]
 80097ea:	3b01      	subs	r3, #1
 80097ec:	6123      	str	r3, [r4, #16]
 80097ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80097f2:	fa5f fa8a 	uxtb.w	sl, sl
 80097f6:	f1ba 0f02 	cmp.w	sl, #2
 80097fa:	d1ec      	bne.n	80097d6 <_scanf_float+0x2c6>
 80097fc:	3d03      	subs	r5, #3
 80097fe:	b2ed      	uxtb	r5, r5
 8009800:	1b76      	subs	r6, r6, r5
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	05da      	lsls	r2, r3, #23
 8009806:	d52f      	bpl.n	8009868 <_scanf_float+0x358>
 8009808:	055b      	lsls	r3, r3, #21
 800980a:	d510      	bpl.n	800982e <_scanf_float+0x31e>
 800980c:	455e      	cmp	r6, fp
 800980e:	f67f aebf 	bls.w	8009590 <_scanf_float+0x80>
 8009812:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009816:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800981a:	463a      	mov	r2, r7
 800981c:	4640      	mov	r0, r8
 800981e:	4798      	blx	r3
 8009820:	6923      	ldr	r3, [r4, #16]
 8009822:	3b01      	subs	r3, #1
 8009824:	6123      	str	r3, [r4, #16]
 8009826:	e7f1      	b.n	800980c <_scanf_float+0x2fc>
 8009828:	46aa      	mov	sl, r5
 800982a:	9602      	str	r6, [sp, #8]
 800982c:	e7df      	b.n	80097ee <_scanf_float+0x2de>
 800982e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009832:	6923      	ldr	r3, [r4, #16]
 8009834:	2965      	cmp	r1, #101	; 0x65
 8009836:	f103 33ff 	add.w	r3, r3, #4294967295
 800983a:	f106 35ff 	add.w	r5, r6, #4294967295
 800983e:	6123      	str	r3, [r4, #16]
 8009840:	d00c      	beq.n	800985c <_scanf_float+0x34c>
 8009842:	2945      	cmp	r1, #69	; 0x45
 8009844:	d00a      	beq.n	800985c <_scanf_float+0x34c>
 8009846:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800984a:	463a      	mov	r2, r7
 800984c:	4640      	mov	r0, r8
 800984e:	4798      	blx	r3
 8009850:	6923      	ldr	r3, [r4, #16]
 8009852:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009856:	3b01      	subs	r3, #1
 8009858:	1eb5      	subs	r5, r6, #2
 800985a:	6123      	str	r3, [r4, #16]
 800985c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009860:	463a      	mov	r2, r7
 8009862:	4640      	mov	r0, r8
 8009864:	4798      	blx	r3
 8009866:	462e      	mov	r6, r5
 8009868:	6825      	ldr	r5, [r4, #0]
 800986a:	f015 0510 	ands.w	r5, r5, #16
 800986e:	d159      	bne.n	8009924 <_scanf_float+0x414>
 8009870:	7035      	strb	r5, [r6, #0]
 8009872:	6823      	ldr	r3, [r4, #0]
 8009874:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800987c:	d11b      	bne.n	80098b6 <_scanf_float+0x3a6>
 800987e:	9b01      	ldr	r3, [sp, #4]
 8009880:	454b      	cmp	r3, r9
 8009882:	eba3 0209 	sub.w	r2, r3, r9
 8009886:	d123      	bne.n	80098d0 <_scanf_float+0x3c0>
 8009888:	2200      	movs	r2, #0
 800988a:	4659      	mov	r1, fp
 800988c:	4640      	mov	r0, r8
 800988e:	f000 ff09 	bl	800a6a4 <_strtod_r>
 8009892:	6822      	ldr	r2, [r4, #0]
 8009894:	9b03      	ldr	r3, [sp, #12]
 8009896:	f012 0f02 	tst.w	r2, #2
 800989a:	ec57 6b10 	vmov	r6, r7, d0
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	d021      	beq.n	80098e6 <_scanf_float+0x3d6>
 80098a2:	9903      	ldr	r1, [sp, #12]
 80098a4:	1d1a      	adds	r2, r3, #4
 80098a6:	600a      	str	r2, [r1, #0]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	e9c3 6700 	strd	r6, r7, [r3]
 80098ae:	68e3      	ldr	r3, [r4, #12]
 80098b0:	3301      	adds	r3, #1
 80098b2:	60e3      	str	r3, [r4, #12]
 80098b4:	e66d      	b.n	8009592 <_scanf_float+0x82>
 80098b6:	9b04      	ldr	r3, [sp, #16]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d0e5      	beq.n	8009888 <_scanf_float+0x378>
 80098bc:	9905      	ldr	r1, [sp, #20]
 80098be:	230a      	movs	r3, #10
 80098c0:	462a      	mov	r2, r5
 80098c2:	3101      	adds	r1, #1
 80098c4:	4640      	mov	r0, r8
 80098c6:	f000 ff81 	bl	800a7cc <_strtol_r>
 80098ca:	9b04      	ldr	r3, [sp, #16]
 80098cc:	9e05      	ldr	r6, [sp, #20]
 80098ce:	1ac2      	subs	r2, r0, r3
 80098d0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80098d4:	429e      	cmp	r6, r3
 80098d6:	bf28      	it	cs
 80098d8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80098dc:	4912      	ldr	r1, [pc, #72]	; (8009928 <_scanf_float+0x418>)
 80098de:	4630      	mov	r0, r6
 80098e0:	f000 f82c 	bl	800993c <siprintf>
 80098e4:	e7d0      	b.n	8009888 <_scanf_float+0x378>
 80098e6:	9903      	ldr	r1, [sp, #12]
 80098e8:	f012 0f04 	tst.w	r2, #4
 80098ec:	f103 0204 	add.w	r2, r3, #4
 80098f0:	600a      	str	r2, [r1, #0]
 80098f2:	d1d9      	bne.n	80098a8 <_scanf_float+0x398>
 80098f4:	f8d3 8000 	ldr.w	r8, [r3]
 80098f8:	ee10 2a10 	vmov	r2, s0
 80098fc:	ee10 0a10 	vmov	r0, s0
 8009900:	463b      	mov	r3, r7
 8009902:	4639      	mov	r1, r7
 8009904:	f7f7 f912 	bl	8000b2c <__aeabi_dcmpun>
 8009908:	b128      	cbz	r0, 8009916 <_scanf_float+0x406>
 800990a:	4808      	ldr	r0, [pc, #32]	; (800992c <_scanf_float+0x41c>)
 800990c:	f000 f810 	bl	8009930 <nanf>
 8009910:	ed88 0a00 	vstr	s0, [r8]
 8009914:	e7cb      	b.n	80098ae <_scanf_float+0x39e>
 8009916:	4630      	mov	r0, r6
 8009918:	4639      	mov	r1, r7
 800991a:	f7f7 f965 	bl	8000be8 <__aeabi_d2f>
 800991e:	f8c8 0000 	str.w	r0, [r8]
 8009922:	e7c4      	b.n	80098ae <_scanf_float+0x39e>
 8009924:	2500      	movs	r5, #0
 8009926:	e634      	b.n	8009592 <_scanf_float+0x82>
 8009928:	0800f6aa 	.word	0x0800f6aa
 800992c:	0800facb 	.word	0x0800facb

08009930 <nanf>:
 8009930:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009938 <nanf+0x8>
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop
 8009938:	7fc00000 	.word	0x7fc00000

0800993c <siprintf>:
 800993c:	b40e      	push	{r1, r2, r3}
 800993e:	b500      	push	{lr}
 8009940:	b09c      	sub	sp, #112	; 0x70
 8009942:	ab1d      	add	r3, sp, #116	; 0x74
 8009944:	9002      	str	r0, [sp, #8]
 8009946:	9006      	str	r0, [sp, #24]
 8009948:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800994c:	4809      	ldr	r0, [pc, #36]	; (8009974 <siprintf+0x38>)
 800994e:	9107      	str	r1, [sp, #28]
 8009950:	9104      	str	r1, [sp, #16]
 8009952:	4909      	ldr	r1, [pc, #36]	; (8009978 <siprintf+0x3c>)
 8009954:	f853 2b04 	ldr.w	r2, [r3], #4
 8009958:	9105      	str	r1, [sp, #20]
 800995a:	6800      	ldr	r0, [r0, #0]
 800995c:	9301      	str	r3, [sp, #4]
 800995e:	a902      	add	r1, sp, #8
 8009960:	f002 ff88 	bl	800c874 <_svfiprintf_r>
 8009964:	9b02      	ldr	r3, [sp, #8]
 8009966:	2200      	movs	r2, #0
 8009968:	701a      	strb	r2, [r3, #0]
 800996a:	b01c      	add	sp, #112	; 0x70
 800996c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009970:	b003      	add	sp, #12
 8009972:	4770      	bx	lr
 8009974:	200000b4 	.word	0x200000b4
 8009978:	ffff0208 	.word	0xffff0208

0800997c <siscanf>:
 800997c:	b40e      	push	{r1, r2, r3}
 800997e:	b510      	push	{r4, lr}
 8009980:	b09f      	sub	sp, #124	; 0x7c
 8009982:	ac21      	add	r4, sp, #132	; 0x84
 8009984:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009988:	f854 2b04 	ldr.w	r2, [r4], #4
 800998c:	9201      	str	r2, [sp, #4]
 800998e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009992:	9004      	str	r0, [sp, #16]
 8009994:	9008      	str	r0, [sp, #32]
 8009996:	f7f6 fc1b 	bl	80001d0 <strlen>
 800999a:	4b0c      	ldr	r3, [pc, #48]	; (80099cc <siscanf+0x50>)
 800999c:	9005      	str	r0, [sp, #20]
 800999e:	9009      	str	r0, [sp, #36]	; 0x24
 80099a0:	930d      	str	r3, [sp, #52]	; 0x34
 80099a2:	480b      	ldr	r0, [pc, #44]	; (80099d0 <siscanf+0x54>)
 80099a4:	9a01      	ldr	r2, [sp, #4]
 80099a6:	6800      	ldr	r0, [r0, #0]
 80099a8:	9403      	str	r4, [sp, #12]
 80099aa:	2300      	movs	r3, #0
 80099ac:	9311      	str	r3, [sp, #68]	; 0x44
 80099ae:	9316      	str	r3, [sp, #88]	; 0x58
 80099b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80099b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80099b8:	a904      	add	r1, sp, #16
 80099ba:	4623      	mov	r3, r4
 80099bc:	f003 f8b4 	bl	800cb28 <__ssvfiscanf_r>
 80099c0:	b01f      	add	sp, #124	; 0x7c
 80099c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099c6:	b003      	add	sp, #12
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	080099f7 	.word	0x080099f7
 80099d0:	200000b4 	.word	0x200000b4

080099d4 <__sread>:
 80099d4:	b510      	push	{r4, lr}
 80099d6:	460c      	mov	r4, r1
 80099d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099dc:	f003 fb6e 	bl	800d0bc <_read_r>
 80099e0:	2800      	cmp	r0, #0
 80099e2:	bfab      	itete	ge
 80099e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80099e6:	89a3      	ldrhlt	r3, [r4, #12]
 80099e8:	181b      	addge	r3, r3, r0
 80099ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80099ee:	bfac      	ite	ge
 80099f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80099f2:	81a3      	strhlt	r3, [r4, #12]
 80099f4:	bd10      	pop	{r4, pc}

080099f6 <__seofread>:
 80099f6:	2000      	movs	r0, #0
 80099f8:	4770      	bx	lr

080099fa <__swrite>:
 80099fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099fe:	461f      	mov	r7, r3
 8009a00:	898b      	ldrh	r3, [r1, #12]
 8009a02:	05db      	lsls	r3, r3, #23
 8009a04:	4605      	mov	r5, r0
 8009a06:	460c      	mov	r4, r1
 8009a08:	4616      	mov	r6, r2
 8009a0a:	d505      	bpl.n	8009a18 <__swrite+0x1e>
 8009a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a10:	2302      	movs	r3, #2
 8009a12:	2200      	movs	r2, #0
 8009a14:	f002 f8ee 	bl	800bbf4 <_lseek_r>
 8009a18:	89a3      	ldrh	r3, [r4, #12]
 8009a1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a22:	81a3      	strh	r3, [r4, #12]
 8009a24:	4632      	mov	r2, r6
 8009a26:	463b      	mov	r3, r7
 8009a28:	4628      	mov	r0, r5
 8009a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a2e:	f000 becf 	b.w	800a7d0 <_write_r>

08009a32 <__sseek>:
 8009a32:	b510      	push	{r4, lr}
 8009a34:	460c      	mov	r4, r1
 8009a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a3a:	f002 f8db 	bl	800bbf4 <_lseek_r>
 8009a3e:	1c43      	adds	r3, r0, #1
 8009a40:	89a3      	ldrh	r3, [r4, #12]
 8009a42:	bf15      	itete	ne
 8009a44:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a4e:	81a3      	strheq	r3, [r4, #12]
 8009a50:	bf18      	it	ne
 8009a52:	81a3      	strhne	r3, [r4, #12]
 8009a54:	bd10      	pop	{r4, pc}

08009a56 <__sclose>:
 8009a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a5a:	f000 becb 	b.w	800a7f4 <_close_r>

08009a5e <sulp>:
 8009a5e:	b570      	push	{r4, r5, r6, lr}
 8009a60:	4604      	mov	r4, r0
 8009a62:	460d      	mov	r5, r1
 8009a64:	ec45 4b10 	vmov	d0, r4, r5
 8009a68:	4616      	mov	r6, r2
 8009a6a:	f002 fc61 	bl	800c330 <__ulp>
 8009a6e:	ec51 0b10 	vmov	r0, r1, d0
 8009a72:	b17e      	cbz	r6, 8009a94 <sulp+0x36>
 8009a74:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009a78:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	dd09      	ble.n	8009a94 <sulp+0x36>
 8009a80:	051b      	lsls	r3, r3, #20
 8009a82:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009a86:	2400      	movs	r4, #0
 8009a88:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009a8c:	4622      	mov	r2, r4
 8009a8e:	462b      	mov	r3, r5
 8009a90:	f7f6 fdb2 	bl	80005f8 <__aeabi_dmul>
 8009a94:	bd70      	pop	{r4, r5, r6, pc}
	...

08009a98 <_strtod_l>:
 8009a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a9c:	ed2d 8b02 	vpush	{d8}
 8009aa0:	b09d      	sub	sp, #116	; 0x74
 8009aa2:	461f      	mov	r7, r3
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	9318      	str	r3, [sp, #96]	; 0x60
 8009aa8:	4ba2      	ldr	r3, [pc, #648]	; (8009d34 <_strtod_l+0x29c>)
 8009aaa:	9213      	str	r2, [sp, #76]	; 0x4c
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	9305      	str	r3, [sp, #20]
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	4688      	mov	r8, r1
 8009ab6:	f7f6 fb8b 	bl	80001d0 <strlen>
 8009aba:	f04f 0a00 	mov.w	sl, #0
 8009abe:	4605      	mov	r5, r0
 8009ac0:	f04f 0b00 	mov.w	fp, #0
 8009ac4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009ac8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009aca:	781a      	ldrb	r2, [r3, #0]
 8009acc:	2a2b      	cmp	r2, #43	; 0x2b
 8009ace:	d04e      	beq.n	8009b6e <_strtod_l+0xd6>
 8009ad0:	d83b      	bhi.n	8009b4a <_strtod_l+0xb2>
 8009ad2:	2a0d      	cmp	r2, #13
 8009ad4:	d834      	bhi.n	8009b40 <_strtod_l+0xa8>
 8009ad6:	2a08      	cmp	r2, #8
 8009ad8:	d834      	bhi.n	8009b44 <_strtod_l+0xac>
 8009ada:	2a00      	cmp	r2, #0
 8009adc:	d03e      	beq.n	8009b5c <_strtod_l+0xc4>
 8009ade:	2300      	movs	r3, #0
 8009ae0:	930a      	str	r3, [sp, #40]	; 0x28
 8009ae2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009ae4:	7833      	ldrb	r3, [r6, #0]
 8009ae6:	2b30      	cmp	r3, #48	; 0x30
 8009ae8:	f040 80b0 	bne.w	8009c4c <_strtod_l+0x1b4>
 8009aec:	7873      	ldrb	r3, [r6, #1]
 8009aee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009af2:	2b58      	cmp	r3, #88	; 0x58
 8009af4:	d168      	bne.n	8009bc8 <_strtod_l+0x130>
 8009af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009af8:	9301      	str	r3, [sp, #4]
 8009afa:	ab18      	add	r3, sp, #96	; 0x60
 8009afc:	9702      	str	r7, [sp, #8]
 8009afe:	9300      	str	r3, [sp, #0]
 8009b00:	4a8d      	ldr	r2, [pc, #564]	; (8009d38 <_strtod_l+0x2a0>)
 8009b02:	ab19      	add	r3, sp, #100	; 0x64
 8009b04:	a917      	add	r1, sp, #92	; 0x5c
 8009b06:	4620      	mov	r0, r4
 8009b08:	f001 fd68 	bl	800b5dc <__gethex>
 8009b0c:	f010 0707 	ands.w	r7, r0, #7
 8009b10:	4605      	mov	r5, r0
 8009b12:	d005      	beq.n	8009b20 <_strtod_l+0x88>
 8009b14:	2f06      	cmp	r7, #6
 8009b16:	d12c      	bne.n	8009b72 <_strtod_l+0xda>
 8009b18:	3601      	adds	r6, #1
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	9617      	str	r6, [sp, #92]	; 0x5c
 8009b1e:	930a      	str	r3, [sp, #40]	; 0x28
 8009b20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	f040 8590 	bne.w	800a648 <_strtod_l+0xbb0>
 8009b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b2a:	b1eb      	cbz	r3, 8009b68 <_strtod_l+0xd0>
 8009b2c:	4652      	mov	r2, sl
 8009b2e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009b32:	ec43 2b10 	vmov	d0, r2, r3
 8009b36:	b01d      	add	sp, #116	; 0x74
 8009b38:	ecbd 8b02 	vpop	{d8}
 8009b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b40:	2a20      	cmp	r2, #32
 8009b42:	d1cc      	bne.n	8009ade <_strtod_l+0x46>
 8009b44:	3301      	adds	r3, #1
 8009b46:	9317      	str	r3, [sp, #92]	; 0x5c
 8009b48:	e7be      	b.n	8009ac8 <_strtod_l+0x30>
 8009b4a:	2a2d      	cmp	r2, #45	; 0x2d
 8009b4c:	d1c7      	bne.n	8009ade <_strtod_l+0x46>
 8009b4e:	2201      	movs	r2, #1
 8009b50:	920a      	str	r2, [sp, #40]	; 0x28
 8009b52:	1c5a      	adds	r2, r3, #1
 8009b54:	9217      	str	r2, [sp, #92]	; 0x5c
 8009b56:	785b      	ldrb	r3, [r3, #1]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1c2      	bne.n	8009ae2 <_strtod_l+0x4a>
 8009b5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b5e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f040 856e 	bne.w	800a644 <_strtod_l+0xbac>
 8009b68:	4652      	mov	r2, sl
 8009b6a:	465b      	mov	r3, fp
 8009b6c:	e7e1      	b.n	8009b32 <_strtod_l+0x9a>
 8009b6e:	2200      	movs	r2, #0
 8009b70:	e7ee      	b.n	8009b50 <_strtod_l+0xb8>
 8009b72:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009b74:	b13a      	cbz	r2, 8009b86 <_strtod_l+0xee>
 8009b76:	2135      	movs	r1, #53	; 0x35
 8009b78:	a81a      	add	r0, sp, #104	; 0x68
 8009b7a:	f002 fce4 	bl	800c546 <__copybits>
 8009b7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009b80:	4620      	mov	r0, r4
 8009b82:	f002 f8a3 	bl	800bccc <_Bfree>
 8009b86:	3f01      	subs	r7, #1
 8009b88:	2f04      	cmp	r7, #4
 8009b8a:	d806      	bhi.n	8009b9a <_strtod_l+0x102>
 8009b8c:	e8df f007 	tbb	[pc, r7]
 8009b90:	1714030a 	.word	0x1714030a
 8009b94:	0a          	.byte	0x0a
 8009b95:	00          	.byte	0x00
 8009b96:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009b9a:	0728      	lsls	r0, r5, #28
 8009b9c:	d5c0      	bpl.n	8009b20 <_strtod_l+0x88>
 8009b9e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009ba2:	e7bd      	b.n	8009b20 <_strtod_l+0x88>
 8009ba4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009ba8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009baa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009bae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009bb2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009bb6:	e7f0      	b.n	8009b9a <_strtod_l+0x102>
 8009bb8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009d3c <_strtod_l+0x2a4>
 8009bbc:	e7ed      	b.n	8009b9a <_strtod_l+0x102>
 8009bbe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009bc2:	f04f 3aff 	mov.w	sl, #4294967295
 8009bc6:	e7e8      	b.n	8009b9a <_strtod_l+0x102>
 8009bc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bca:	1c5a      	adds	r2, r3, #1
 8009bcc:	9217      	str	r2, [sp, #92]	; 0x5c
 8009bce:	785b      	ldrb	r3, [r3, #1]
 8009bd0:	2b30      	cmp	r3, #48	; 0x30
 8009bd2:	d0f9      	beq.n	8009bc8 <_strtod_l+0x130>
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d0a3      	beq.n	8009b20 <_strtod_l+0x88>
 8009bd8:	2301      	movs	r3, #1
 8009bda:	f04f 0900 	mov.w	r9, #0
 8009bde:	9304      	str	r3, [sp, #16]
 8009be0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009be2:	9308      	str	r3, [sp, #32]
 8009be4:	f8cd 901c 	str.w	r9, [sp, #28]
 8009be8:	464f      	mov	r7, r9
 8009bea:	220a      	movs	r2, #10
 8009bec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009bee:	7806      	ldrb	r6, [r0, #0]
 8009bf0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009bf4:	b2d9      	uxtb	r1, r3
 8009bf6:	2909      	cmp	r1, #9
 8009bf8:	d92a      	bls.n	8009c50 <_strtod_l+0x1b8>
 8009bfa:	9905      	ldr	r1, [sp, #20]
 8009bfc:	462a      	mov	r2, r5
 8009bfe:	f003 fabf 	bl	800d180 <strncmp>
 8009c02:	b398      	cbz	r0, 8009c6c <_strtod_l+0x1d4>
 8009c04:	2000      	movs	r0, #0
 8009c06:	4632      	mov	r2, r6
 8009c08:	463d      	mov	r5, r7
 8009c0a:	9005      	str	r0, [sp, #20]
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2a65      	cmp	r2, #101	; 0x65
 8009c10:	d001      	beq.n	8009c16 <_strtod_l+0x17e>
 8009c12:	2a45      	cmp	r2, #69	; 0x45
 8009c14:	d118      	bne.n	8009c48 <_strtod_l+0x1b0>
 8009c16:	b91d      	cbnz	r5, 8009c20 <_strtod_l+0x188>
 8009c18:	9a04      	ldr	r2, [sp, #16]
 8009c1a:	4302      	orrs	r2, r0
 8009c1c:	d09e      	beq.n	8009b5c <_strtod_l+0xc4>
 8009c1e:	2500      	movs	r5, #0
 8009c20:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009c24:	f108 0201 	add.w	r2, r8, #1
 8009c28:	9217      	str	r2, [sp, #92]	; 0x5c
 8009c2a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009c2e:	2a2b      	cmp	r2, #43	; 0x2b
 8009c30:	d075      	beq.n	8009d1e <_strtod_l+0x286>
 8009c32:	2a2d      	cmp	r2, #45	; 0x2d
 8009c34:	d07b      	beq.n	8009d2e <_strtod_l+0x296>
 8009c36:	f04f 0c00 	mov.w	ip, #0
 8009c3a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009c3e:	2909      	cmp	r1, #9
 8009c40:	f240 8082 	bls.w	8009d48 <_strtod_l+0x2b0>
 8009c44:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009c48:	2600      	movs	r6, #0
 8009c4a:	e09d      	b.n	8009d88 <_strtod_l+0x2f0>
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	e7c4      	b.n	8009bda <_strtod_l+0x142>
 8009c50:	2f08      	cmp	r7, #8
 8009c52:	bfd8      	it	le
 8009c54:	9907      	ldrle	r1, [sp, #28]
 8009c56:	f100 0001 	add.w	r0, r0, #1
 8009c5a:	bfda      	itte	le
 8009c5c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009c60:	9307      	strle	r3, [sp, #28]
 8009c62:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009c66:	3701      	adds	r7, #1
 8009c68:	9017      	str	r0, [sp, #92]	; 0x5c
 8009c6a:	e7bf      	b.n	8009bec <_strtod_l+0x154>
 8009c6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c6e:	195a      	adds	r2, r3, r5
 8009c70:	9217      	str	r2, [sp, #92]	; 0x5c
 8009c72:	5d5a      	ldrb	r2, [r3, r5]
 8009c74:	2f00      	cmp	r7, #0
 8009c76:	d037      	beq.n	8009ce8 <_strtod_l+0x250>
 8009c78:	9005      	str	r0, [sp, #20]
 8009c7a:	463d      	mov	r5, r7
 8009c7c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009c80:	2b09      	cmp	r3, #9
 8009c82:	d912      	bls.n	8009caa <_strtod_l+0x212>
 8009c84:	2301      	movs	r3, #1
 8009c86:	e7c2      	b.n	8009c0e <_strtod_l+0x176>
 8009c88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c8a:	1c5a      	adds	r2, r3, #1
 8009c8c:	9217      	str	r2, [sp, #92]	; 0x5c
 8009c8e:	785a      	ldrb	r2, [r3, #1]
 8009c90:	3001      	adds	r0, #1
 8009c92:	2a30      	cmp	r2, #48	; 0x30
 8009c94:	d0f8      	beq.n	8009c88 <_strtod_l+0x1f0>
 8009c96:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009c9a:	2b08      	cmp	r3, #8
 8009c9c:	f200 84d9 	bhi.w	800a652 <_strtod_l+0xbba>
 8009ca0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ca2:	9005      	str	r0, [sp, #20]
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	9308      	str	r3, [sp, #32]
 8009ca8:	4605      	mov	r5, r0
 8009caa:	3a30      	subs	r2, #48	; 0x30
 8009cac:	f100 0301 	add.w	r3, r0, #1
 8009cb0:	d014      	beq.n	8009cdc <_strtod_l+0x244>
 8009cb2:	9905      	ldr	r1, [sp, #20]
 8009cb4:	4419      	add	r1, r3
 8009cb6:	9105      	str	r1, [sp, #20]
 8009cb8:	462b      	mov	r3, r5
 8009cba:	eb00 0e05 	add.w	lr, r0, r5
 8009cbe:	210a      	movs	r1, #10
 8009cc0:	4573      	cmp	r3, lr
 8009cc2:	d113      	bne.n	8009cec <_strtod_l+0x254>
 8009cc4:	182b      	adds	r3, r5, r0
 8009cc6:	2b08      	cmp	r3, #8
 8009cc8:	f105 0501 	add.w	r5, r5, #1
 8009ccc:	4405      	add	r5, r0
 8009cce:	dc1c      	bgt.n	8009d0a <_strtod_l+0x272>
 8009cd0:	9907      	ldr	r1, [sp, #28]
 8009cd2:	230a      	movs	r3, #10
 8009cd4:	fb03 2301 	mla	r3, r3, r1, r2
 8009cd8:	9307      	str	r3, [sp, #28]
 8009cda:	2300      	movs	r3, #0
 8009cdc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009cde:	1c51      	adds	r1, r2, #1
 8009ce0:	9117      	str	r1, [sp, #92]	; 0x5c
 8009ce2:	7852      	ldrb	r2, [r2, #1]
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	e7c9      	b.n	8009c7c <_strtod_l+0x1e4>
 8009ce8:	4638      	mov	r0, r7
 8009cea:	e7d2      	b.n	8009c92 <_strtod_l+0x1fa>
 8009cec:	2b08      	cmp	r3, #8
 8009cee:	dc04      	bgt.n	8009cfa <_strtod_l+0x262>
 8009cf0:	9e07      	ldr	r6, [sp, #28]
 8009cf2:	434e      	muls	r6, r1
 8009cf4:	9607      	str	r6, [sp, #28]
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	e7e2      	b.n	8009cc0 <_strtod_l+0x228>
 8009cfa:	f103 0c01 	add.w	ip, r3, #1
 8009cfe:	f1bc 0f10 	cmp.w	ip, #16
 8009d02:	bfd8      	it	le
 8009d04:	fb01 f909 	mulle.w	r9, r1, r9
 8009d08:	e7f5      	b.n	8009cf6 <_strtod_l+0x25e>
 8009d0a:	2d10      	cmp	r5, #16
 8009d0c:	bfdc      	itt	le
 8009d0e:	230a      	movle	r3, #10
 8009d10:	fb03 2909 	mlale	r9, r3, r9, r2
 8009d14:	e7e1      	b.n	8009cda <_strtod_l+0x242>
 8009d16:	2300      	movs	r3, #0
 8009d18:	9305      	str	r3, [sp, #20]
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	e77c      	b.n	8009c18 <_strtod_l+0x180>
 8009d1e:	f04f 0c00 	mov.w	ip, #0
 8009d22:	f108 0202 	add.w	r2, r8, #2
 8009d26:	9217      	str	r2, [sp, #92]	; 0x5c
 8009d28:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009d2c:	e785      	b.n	8009c3a <_strtod_l+0x1a2>
 8009d2e:	f04f 0c01 	mov.w	ip, #1
 8009d32:	e7f6      	b.n	8009d22 <_strtod_l+0x28a>
 8009d34:	0800f8f8 	.word	0x0800f8f8
 8009d38:	0800f6b0 	.word	0x0800f6b0
 8009d3c:	7ff00000 	.word	0x7ff00000
 8009d40:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d42:	1c51      	adds	r1, r2, #1
 8009d44:	9117      	str	r1, [sp, #92]	; 0x5c
 8009d46:	7852      	ldrb	r2, [r2, #1]
 8009d48:	2a30      	cmp	r2, #48	; 0x30
 8009d4a:	d0f9      	beq.n	8009d40 <_strtod_l+0x2a8>
 8009d4c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009d50:	2908      	cmp	r1, #8
 8009d52:	f63f af79 	bhi.w	8009c48 <_strtod_l+0x1b0>
 8009d56:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009d5a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d5c:	9206      	str	r2, [sp, #24]
 8009d5e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d60:	1c51      	adds	r1, r2, #1
 8009d62:	9117      	str	r1, [sp, #92]	; 0x5c
 8009d64:	7852      	ldrb	r2, [r2, #1]
 8009d66:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009d6a:	2e09      	cmp	r6, #9
 8009d6c:	d937      	bls.n	8009dde <_strtod_l+0x346>
 8009d6e:	9e06      	ldr	r6, [sp, #24]
 8009d70:	1b89      	subs	r1, r1, r6
 8009d72:	2908      	cmp	r1, #8
 8009d74:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009d78:	dc02      	bgt.n	8009d80 <_strtod_l+0x2e8>
 8009d7a:	4576      	cmp	r6, lr
 8009d7c:	bfa8      	it	ge
 8009d7e:	4676      	movge	r6, lr
 8009d80:	f1bc 0f00 	cmp.w	ip, #0
 8009d84:	d000      	beq.n	8009d88 <_strtod_l+0x2f0>
 8009d86:	4276      	negs	r6, r6
 8009d88:	2d00      	cmp	r5, #0
 8009d8a:	d14d      	bne.n	8009e28 <_strtod_l+0x390>
 8009d8c:	9904      	ldr	r1, [sp, #16]
 8009d8e:	4301      	orrs	r1, r0
 8009d90:	f47f aec6 	bne.w	8009b20 <_strtod_l+0x88>
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	f47f aee1 	bne.w	8009b5c <_strtod_l+0xc4>
 8009d9a:	2a69      	cmp	r2, #105	; 0x69
 8009d9c:	d027      	beq.n	8009dee <_strtod_l+0x356>
 8009d9e:	dc24      	bgt.n	8009dea <_strtod_l+0x352>
 8009da0:	2a49      	cmp	r2, #73	; 0x49
 8009da2:	d024      	beq.n	8009dee <_strtod_l+0x356>
 8009da4:	2a4e      	cmp	r2, #78	; 0x4e
 8009da6:	f47f aed9 	bne.w	8009b5c <_strtod_l+0xc4>
 8009daa:	499f      	ldr	r1, [pc, #636]	; (800a028 <_strtod_l+0x590>)
 8009dac:	a817      	add	r0, sp, #92	; 0x5c
 8009dae:	f001 fe6d 	bl	800ba8c <__match>
 8009db2:	2800      	cmp	r0, #0
 8009db4:	f43f aed2 	beq.w	8009b5c <_strtod_l+0xc4>
 8009db8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	2b28      	cmp	r3, #40	; 0x28
 8009dbe:	d12d      	bne.n	8009e1c <_strtod_l+0x384>
 8009dc0:	499a      	ldr	r1, [pc, #616]	; (800a02c <_strtod_l+0x594>)
 8009dc2:	aa1a      	add	r2, sp, #104	; 0x68
 8009dc4:	a817      	add	r0, sp, #92	; 0x5c
 8009dc6:	f001 fe75 	bl	800bab4 <__hexnan>
 8009dca:	2805      	cmp	r0, #5
 8009dcc:	d126      	bne.n	8009e1c <_strtod_l+0x384>
 8009dce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009dd0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009dd4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009dd8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009ddc:	e6a0      	b.n	8009b20 <_strtod_l+0x88>
 8009dde:	210a      	movs	r1, #10
 8009de0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009de4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009de8:	e7b9      	b.n	8009d5e <_strtod_l+0x2c6>
 8009dea:	2a6e      	cmp	r2, #110	; 0x6e
 8009dec:	e7db      	b.n	8009da6 <_strtod_l+0x30e>
 8009dee:	4990      	ldr	r1, [pc, #576]	; (800a030 <_strtod_l+0x598>)
 8009df0:	a817      	add	r0, sp, #92	; 0x5c
 8009df2:	f001 fe4b 	bl	800ba8c <__match>
 8009df6:	2800      	cmp	r0, #0
 8009df8:	f43f aeb0 	beq.w	8009b5c <_strtod_l+0xc4>
 8009dfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009dfe:	498d      	ldr	r1, [pc, #564]	; (800a034 <_strtod_l+0x59c>)
 8009e00:	3b01      	subs	r3, #1
 8009e02:	a817      	add	r0, sp, #92	; 0x5c
 8009e04:	9317      	str	r3, [sp, #92]	; 0x5c
 8009e06:	f001 fe41 	bl	800ba8c <__match>
 8009e0a:	b910      	cbnz	r0, 8009e12 <_strtod_l+0x37a>
 8009e0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e0e:	3301      	adds	r3, #1
 8009e10:	9317      	str	r3, [sp, #92]	; 0x5c
 8009e12:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a044 <_strtod_l+0x5ac>
 8009e16:	f04f 0a00 	mov.w	sl, #0
 8009e1a:	e681      	b.n	8009b20 <_strtod_l+0x88>
 8009e1c:	4886      	ldr	r0, [pc, #536]	; (800a038 <_strtod_l+0x5a0>)
 8009e1e:	f003 f95f 	bl	800d0e0 <nan>
 8009e22:	ec5b ab10 	vmov	sl, fp, d0
 8009e26:	e67b      	b.n	8009b20 <_strtod_l+0x88>
 8009e28:	9b05      	ldr	r3, [sp, #20]
 8009e2a:	9807      	ldr	r0, [sp, #28]
 8009e2c:	1af3      	subs	r3, r6, r3
 8009e2e:	2f00      	cmp	r7, #0
 8009e30:	bf08      	it	eq
 8009e32:	462f      	moveq	r7, r5
 8009e34:	2d10      	cmp	r5, #16
 8009e36:	9306      	str	r3, [sp, #24]
 8009e38:	46a8      	mov	r8, r5
 8009e3a:	bfa8      	it	ge
 8009e3c:	f04f 0810 	movge.w	r8, #16
 8009e40:	f7f6 fb60 	bl	8000504 <__aeabi_ui2d>
 8009e44:	2d09      	cmp	r5, #9
 8009e46:	4682      	mov	sl, r0
 8009e48:	468b      	mov	fp, r1
 8009e4a:	dd13      	ble.n	8009e74 <_strtod_l+0x3dc>
 8009e4c:	4b7b      	ldr	r3, [pc, #492]	; (800a03c <_strtod_l+0x5a4>)
 8009e4e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009e52:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009e56:	f7f6 fbcf 	bl	80005f8 <__aeabi_dmul>
 8009e5a:	4682      	mov	sl, r0
 8009e5c:	4648      	mov	r0, r9
 8009e5e:	468b      	mov	fp, r1
 8009e60:	f7f6 fb50 	bl	8000504 <__aeabi_ui2d>
 8009e64:	4602      	mov	r2, r0
 8009e66:	460b      	mov	r3, r1
 8009e68:	4650      	mov	r0, sl
 8009e6a:	4659      	mov	r1, fp
 8009e6c:	f7f6 fa0e 	bl	800028c <__adddf3>
 8009e70:	4682      	mov	sl, r0
 8009e72:	468b      	mov	fp, r1
 8009e74:	2d0f      	cmp	r5, #15
 8009e76:	dc38      	bgt.n	8009eea <_strtod_l+0x452>
 8009e78:	9b06      	ldr	r3, [sp, #24]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f43f ae50 	beq.w	8009b20 <_strtod_l+0x88>
 8009e80:	dd24      	ble.n	8009ecc <_strtod_l+0x434>
 8009e82:	2b16      	cmp	r3, #22
 8009e84:	dc0b      	bgt.n	8009e9e <_strtod_l+0x406>
 8009e86:	496d      	ldr	r1, [pc, #436]	; (800a03c <_strtod_l+0x5a4>)
 8009e88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e90:	4652      	mov	r2, sl
 8009e92:	465b      	mov	r3, fp
 8009e94:	f7f6 fbb0 	bl	80005f8 <__aeabi_dmul>
 8009e98:	4682      	mov	sl, r0
 8009e9a:	468b      	mov	fp, r1
 8009e9c:	e640      	b.n	8009b20 <_strtod_l+0x88>
 8009e9e:	9a06      	ldr	r2, [sp, #24]
 8009ea0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	db20      	blt.n	8009eea <_strtod_l+0x452>
 8009ea8:	4c64      	ldr	r4, [pc, #400]	; (800a03c <_strtod_l+0x5a4>)
 8009eaa:	f1c5 050f 	rsb	r5, r5, #15
 8009eae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009eb2:	4652      	mov	r2, sl
 8009eb4:	465b      	mov	r3, fp
 8009eb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eba:	f7f6 fb9d 	bl	80005f8 <__aeabi_dmul>
 8009ebe:	9b06      	ldr	r3, [sp, #24]
 8009ec0:	1b5d      	subs	r5, r3, r5
 8009ec2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009ec6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009eca:	e7e3      	b.n	8009e94 <_strtod_l+0x3fc>
 8009ecc:	9b06      	ldr	r3, [sp, #24]
 8009ece:	3316      	adds	r3, #22
 8009ed0:	db0b      	blt.n	8009eea <_strtod_l+0x452>
 8009ed2:	9b05      	ldr	r3, [sp, #20]
 8009ed4:	1b9e      	subs	r6, r3, r6
 8009ed6:	4b59      	ldr	r3, [pc, #356]	; (800a03c <_strtod_l+0x5a4>)
 8009ed8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009edc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ee0:	4650      	mov	r0, sl
 8009ee2:	4659      	mov	r1, fp
 8009ee4:	f7f6 fcb2 	bl	800084c <__aeabi_ddiv>
 8009ee8:	e7d6      	b.n	8009e98 <_strtod_l+0x400>
 8009eea:	9b06      	ldr	r3, [sp, #24]
 8009eec:	eba5 0808 	sub.w	r8, r5, r8
 8009ef0:	4498      	add	r8, r3
 8009ef2:	f1b8 0f00 	cmp.w	r8, #0
 8009ef6:	dd74      	ble.n	8009fe2 <_strtod_l+0x54a>
 8009ef8:	f018 030f 	ands.w	r3, r8, #15
 8009efc:	d00a      	beq.n	8009f14 <_strtod_l+0x47c>
 8009efe:	494f      	ldr	r1, [pc, #316]	; (800a03c <_strtod_l+0x5a4>)
 8009f00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009f04:	4652      	mov	r2, sl
 8009f06:	465b      	mov	r3, fp
 8009f08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f0c:	f7f6 fb74 	bl	80005f8 <__aeabi_dmul>
 8009f10:	4682      	mov	sl, r0
 8009f12:	468b      	mov	fp, r1
 8009f14:	f038 080f 	bics.w	r8, r8, #15
 8009f18:	d04f      	beq.n	8009fba <_strtod_l+0x522>
 8009f1a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009f1e:	dd22      	ble.n	8009f66 <_strtod_l+0x4ce>
 8009f20:	2500      	movs	r5, #0
 8009f22:	462e      	mov	r6, r5
 8009f24:	9507      	str	r5, [sp, #28]
 8009f26:	9505      	str	r5, [sp, #20]
 8009f28:	2322      	movs	r3, #34	; 0x22
 8009f2a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a044 <_strtod_l+0x5ac>
 8009f2e:	6023      	str	r3, [r4, #0]
 8009f30:	f04f 0a00 	mov.w	sl, #0
 8009f34:	9b07      	ldr	r3, [sp, #28]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	f43f adf2 	beq.w	8009b20 <_strtod_l+0x88>
 8009f3c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009f3e:	4620      	mov	r0, r4
 8009f40:	f001 fec4 	bl	800bccc <_Bfree>
 8009f44:	9905      	ldr	r1, [sp, #20]
 8009f46:	4620      	mov	r0, r4
 8009f48:	f001 fec0 	bl	800bccc <_Bfree>
 8009f4c:	4631      	mov	r1, r6
 8009f4e:	4620      	mov	r0, r4
 8009f50:	f001 febc 	bl	800bccc <_Bfree>
 8009f54:	9907      	ldr	r1, [sp, #28]
 8009f56:	4620      	mov	r0, r4
 8009f58:	f001 feb8 	bl	800bccc <_Bfree>
 8009f5c:	4629      	mov	r1, r5
 8009f5e:	4620      	mov	r0, r4
 8009f60:	f001 feb4 	bl	800bccc <_Bfree>
 8009f64:	e5dc      	b.n	8009b20 <_strtod_l+0x88>
 8009f66:	4b36      	ldr	r3, [pc, #216]	; (800a040 <_strtod_l+0x5a8>)
 8009f68:	9304      	str	r3, [sp, #16]
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009f70:	4650      	mov	r0, sl
 8009f72:	4659      	mov	r1, fp
 8009f74:	4699      	mov	r9, r3
 8009f76:	f1b8 0f01 	cmp.w	r8, #1
 8009f7a:	dc21      	bgt.n	8009fc0 <_strtod_l+0x528>
 8009f7c:	b10b      	cbz	r3, 8009f82 <_strtod_l+0x4ea>
 8009f7e:	4682      	mov	sl, r0
 8009f80:	468b      	mov	fp, r1
 8009f82:	4b2f      	ldr	r3, [pc, #188]	; (800a040 <_strtod_l+0x5a8>)
 8009f84:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009f88:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009f8c:	4652      	mov	r2, sl
 8009f8e:	465b      	mov	r3, fp
 8009f90:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009f94:	f7f6 fb30 	bl	80005f8 <__aeabi_dmul>
 8009f98:	4b2a      	ldr	r3, [pc, #168]	; (800a044 <_strtod_l+0x5ac>)
 8009f9a:	460a      	mov	r2, r1
 8009f9c:	400b      	ands	r3, r1
 8009f9e:	492a      	ldr	r1, [pc, #168]	; (800a048 <_strtod_l+0x5b0>)
 8009fa0:	428b      	cmp	r3, r1
 8009fa2:	4682      	mov	sl, r0
 8009fa4:	d8bc      	bhi.n	8009f20 <_strtod_l+0x488>
 8009fa6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009faa:	428b      	cmp	r3, r1
 8009fac:	bf86      	itte	hi
 8009fae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a04c <_strtod_l+0x5b4>
 8009fb2:	f04f 3aff 	movhi.w	sl, #4294967295
 8009fb6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009fba:	2300      	movs	r3, #0
 8009fbc:	9304      	str	r3, [sp, #16]
 8009fbe:	e084      	b.n	800a0ca <_strtod_l+0x632>
 8009fc0:	f018 0f01 	tst.w	r8, #1
 8009fc4:	d005      	beq.n	8009fd2 <_strtod_l+0x53a>
 8009fc6:	9b04      	ldr	r3, [sp, #16]
 8009fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fcc:	f7f6 fb14 	bl	80005f8 <__aeabi_dmul>
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	9a04      	ldr	r2, [sp, #16]
 8009fd4:	3208      	adds	r2, #8
 8009fd6:	f109 0901 	add.w	r9, r9, #1
 8009fda:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009fde:	9204      	str	r2, [sp, #16]
 8009fe0:	e7c9      	b.n	8009f76 <_strtod_l+0x4de>
 8009fe2:	d0ea      	beq.n	8009fba <_strtod_l+0x522>
 8009fe4:	f1c8 0800 	rsb	r8, r8, #0
 8009fe8:	f018 020f 	ands.w	r2, r8, #15
 8009fec:	d00a      	beq.n	800a004 <_strtod_l+0x56c>
 8009fee:	4b13      	ldr	r3, [pc, #76]	; (800a03c <_strtod_l+0x5a4>)
 8009ff0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ff4:	4650      	mov	r0, sl
 8009ff6:	4659      	mov	r1, fp
 8009ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffc:	f7f6 fc26 	bl	800084c <__aeabi_ddiv>
 800a000:	4682      	mov	sl, r0
 800a002:	468b      	mov	fp, r1
 800a004:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a008:	d0d7      	beq.n	8009fba <_strtod_l+0x522>
 800a00a:	f1b8 0f1f 	cmp.w	r8, #31
 800a00e:	dd1f      	ble.n	800a050 <_strtod_l+0x5b8>
 800a010:	2500      	movs	r5, #0
 800a012:	462e      	mov	r6, r5
 800a014:	9507      	str	r5, [sp, #28]
 800a016:	9505      	str	r5, [sp, #20]
 800a018:	2322      	movs	r3, #34	; 0x22
 800a01a:	f04f 0a00 	mov.w	sl, #0
 800a01e:	f04f 0b00 	mov.w	fp, #0
 800a022:	6023      	str	r3, [r4, #0]
 800a024:	e786      	b.n	8009f34 <_strtod_l+0x49c>
 800a026:	bf00      	nop
 800a028:	0800f685 	.word	0x0800f685
 800a02c:	0800f6c4 	.word	0x0800f6c4
 800a030:	0800f67d 	.word	0x0800f67d
 800a034:	0800f804 	.word	0x0800f804
 800a038:	0800facb 	.word	0x0800facb
 800a03c:	0800f990 	.word	0x0800f990
 800a040:	0800f968 	.word	0x0800f968
 800a044:	7ff00000 	.word	0x7ff00000
 800a048:	7ca00000 	.word	0x7ca00000
 800a04c:	7fefffff 	.word	0x7fefffff
 800a050:	f018 0310 	ands.w	r3, r8, #16
 800a054:	bf18      	it	ne
 800a056:	236a      	movne	r3, #106	; 0x6a
 800a058:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a408 <_strtod_l+0x970>
 800a05c:	9304      	str	r3, [sp, #16]
 800a05e:	4650      	mov	r0, sl
 800a060:	4659      	mov	r1, fp
 800a062:	2300      	movs	r3, #0
 800a064:	f018 0f01 	tst.w	r8, #1
 800a068:	d004      	beq.n	800a074 <_strtod_l+0x5dc>
 800a06a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a06e:	f7f6 fac3 	bl	80005f8 <__aeabi_dmul>
 800a072:	2301      	movs	r3, #1
 800a074:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a078:	f109 0908 	add.w	r9, r9, #8
 800a07c:	d1f2      	bne.n	800a064 <_strtod_l+0x5cc>
 800a07e:	b10b      	cbz	r3, 800a084 <_strtod_l+0x5ec>
 800a080:	4682      	mov	sl, r0
 800a082:	468b      	mov	fp, r1
 800a084:	9b04      	ldr	r3, [sp, #16]
 800a086:	b1c3      	cbz	r3, 800a0ba <_strtod_l+0x622>
 800a088:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a08c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a090:	2b00      	cmp	r3, #0
 800a092:	4659      	mov	r1, fp
 800a094:	dd11      	ble.n	800a0ba <_strtod_l+0x622>
 800a096:	2b1f      	cmp	r3, #31
 800a098:	f340 8124 	ble.w	800a2e4 <_strtod_l+0x84c>
 800a09c:	2b34      	cmp	r3, #52	; 0x34
 800a09e:	bfde      	ittt	le
 800a0a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a0a4:	f04f 33ff 	movle.w	r3, #4294967295
 800a0a8:	fa03 f202 	lslle.w	r2, r3, r2
 800a0ac:	f04f 0a00 	mov.w	sl, #0
 800a0b0:	bfcc      	ite	gt
 800a0b2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a0b6:	ea02 0b01 	andle.w	fp, r2, r1
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	2300      	movs	r3, #0
 800a0be:	4650      	mov	r0, sl
 800a0c0:	4659      	mov	r1, fp
 800a0c2:	f7f6 fd01 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	d1a2      	bne.n	800a010 <_strtod_l+0x578>
 800a0ca:	9b07      	ldr	r3, [sp, #28]
 800a0cc:	9300      	str	r3, [sp, #0]
 800a0ce:	9908      	ldr	r1, [sp, #32]
 800a0d0:	462b      	mov	r3, r5
 800a0d2:	463a      	mov	r2, r7
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	f001 fe61 	bl	800bd9c <__s2b>
 800a0da:	9007      	str	r0, [sp, #28]
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	f43f af1f 	beq.w	8009f20 <_strtod_l+0x488>
 800a0e2:	9b05      	ldr	r3, [sp, #20]
 800a0e4:	1b9e      	subs	r6, r3, r6
 800a0e6:	9b06      	ldr	r3, [sp, #24]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	bfb4      	ite	lt
 800a0ec:	4633      	movlt	r3, r6
 800a0ee:	2300      	movge	r3, #0
 800a0f0:	930c      	str	r3, [sp, #48]	; 0x30
 800a0f2:	9b06      	ldr	r3, [sp, #24]
 800a0f4:	2500      	movs	r5, #0
 800a0f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a0fa:	9312      	str	r3, [sp, #72]	; 0x48
 800a0fc:	462e      	mov	r6, r5
 800a0fe:	9b07      	ldr	r3, [sp, #28]
 800a100:	4620      	mov	r0, r4
 800a102:	6859      	ldr	r1, [r3, #4]
 800a104:	f001 fda2 	bl	800bc4c <_Balloc>
 800a108:	9005      	str	r0, [sp, #20]
 800a10a:	2800      	cmp	r0, #0
 800a10c:	f43f af0c 	beq.w	8009f28 <_strtod_l+0x490>
 800a110:	9b07      	ldr	r3, [sp, #28]
 800a112:	691a      	ldr	r2, [r3, #16]
 800a114:	3202      	adds	r2, #2
 800a116:	f103 010c 	add.w	r1, r3, #12
 800a11a:	0092      	lsls	r2, r2, #2
 800a11c:	300c      	adds	r0, #12
 800a11e:	f7fe fd77 	bl	8008c10 <memcpy>
 800a122:	ec4b ab10 	vmov	d0, sl, fp
 800a126:	aa1a      	add	r2, sp, #104	; 0x68
 800a128:	a919      	add	r1, sp, #100	; 0x64
 800a12a:	4620      	mov	r0, r4
 800a12c:	f002 f97c 	bl	800c428 <__d2b>
 800a130:	ec4b ab18 	vmov	d8, sl, fp
 800a134:	9018      	str	r0, [sp, #96]	; 0x60
 800a136:	2800      	cmp	r0, #0
 800a138:	f43f aef6 	beq.w	8009f28 <_strtod_l+0x490>
 800a13c:	2101      	movs	r1, #1
 800a13e:	4620      	mov	r0, r4
 800a140:	f001 fec6 	bl	800bed0 <__i2b>
 800a144:	4606      	mov	r6, r0
 800a146:	2800      	cmp	r0, #0
 800a148:	f43f aeee 	beq.w	8009f28 <_strtod_l+0x490>
 800a14c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a14e:	9904      	ldr	r1, [sp, #16]
 800a150:	2b00      	cmp	r3, #0
 800a152:	bfab      	itete	ge
 800a154:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a156:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a158:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a15a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a15e:	bfac      	ite	ge
 800a160:	eb03 0902 	addge.w	r9, r3, r2
 800a164:	1ad7      	sublt	r7, r2, r3
 800a166:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a168:	eba3 0801 	sub.w	r8, r3, r1
 800a16c:	4490      	add	r8, r2
 800a16e:	4ba1      	ldr	r3, [pc, #644]	; (800a3f4 <_strtod_l+0x95c>)
 800a170:	f108 38ff 	add.w	r8, r8, #4294967295
 800a174:	4598      	cmp	r8, r3
 800a176:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a17a:	f280 80c7 	bge.w	800a30c <_strtod_l+0x874>
 800a17e:	eba3 0308 	sub.w	r3, r3, r8
 800a182:	2b1f      	cmp	r3, #31
 800a184:	eba2 0203 	sub.w	r2, r2, r3
 800a188:	f04f 0101 	mov.w	r1, #1
 800a18c:	f300 80b1 	bgt.w	800a2f2 <_strtod_l+0x85a>
 800a190:	fa01 f303 	lsl.w	r3, r1, r3
 800a194:	930d      	str	r3, [sp, #52]	; 0x34
 800a196:	2300      	movs	r3, #0
 800a198:	9308      	str	r3, [sp, #32]
 800a19a:	eb09 0802 	add.w	r8, r9, r2
 800a19e:	9b04      	ldr	r3, [sp, #16]
 800a1a0:	45c1      	cmp	r9, r8
 800a1a2:	4417      	add	r7, r2
 800a1a4:	441f      	add	r7, r3
 800a1a6:	464b      	mov	r3, r9
 800a1a8:	bfa8      	it	ge
 800a1aa:	4643      	movge	r3, r8
 800a1ac:	42bb      	cmp	r3, r7
 800a1ae:	bfa8      	it	ge
 800a1b0:	463b      	movge	r3, r7
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	bfc2      	ittt	gt
 800a1b6:	eba8 0803 	subgt.w	r8, r8, r3
 800a1ba:	1aff      	subgt	r7, r7, r3
 800a1bc:	eba9 0903 	subgt.w	r9, r9, r3
 800a1c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	dd17      	ble.n	800a1f6 <_strtod_l+0x75e>
 800a1c6:	4631      	mov	r1, r6
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	f001 ff40 	bl	800c050 <__pow5mult>
 800a1d0:	4606      	mov	r6, r0
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	f43f aea8 	beq.w	8009f28 <_strtod_l+0x490>
 800a1d8:	4601      	mov	r1, r0
 800a1da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a1dc:	4620      	mov	r0, r4
 800a1de:	f001 fe8d 	bl	800befc <__multiply>
 800a1e2:	900b      	str	r0, [sp, #44]	; 0x2c
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	f43f ae9f 	beq.w	8009f28 <_strtod_l+0x490>
 800a1ea:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f001 fd6d 	bl	800bccc <_Bfree>
 800a1f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1f4:	9318      	str	r3, [sp, #96]	; 0x60
 800a1f6:	f1b8 0f00 	cmp.w	r8, #0
 800a1fa:	f300 808c 	bgt.w	800a316 <_strtod_l+0x87e>
 800a1fe:	9b06      	ldr	r3, [sp, #24]
 800a200:	2b00      	cmp	r3, #0
 800a202:	dd08      	ble.n	800a216 <_strtod_l+0x77e>
 800a204:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a206:	9905      	ldr	r1, [sp, #20]
 800a208:	4620      	mov	r0, r4
 800a20a:	f001 ff21 	bl	800c050 <__pow5mult>
 800a20e:	9005      	str	r0, [sp, #20]
 800a210:	2800      	cmp	r0, #0
 800a212:	f43f ae89 	beq.w	8009f28 <_strtod_l+0x490>
 800a216:	2f00      	cmp	r7, #0
 800a218:	dd08      	ble.n	800a22c <_strtod_l+0x794>
 800a21a:	9905      	ldr	r1, [sp, #20]
 800a21c:	463a      	mov	r2, r7
 800a21e:	4620      	mov	r0, r4
 800a220:	f001 ff70 	bl	800c104 <__lshift>
 800a224:	9005      	str	r0, [sp, #20]
 800a226:	2800      	cmp	r0, #0
 800a228:	f43f ae7e 	beq.w	8009f28 <_strtod_l+0x490>
 800a22c:	f1b9 0f00 	cmp.w	r9, #0
 800a230:	dd08      	ble.n	800a244 <_strtod_l+0x7ac>
 800a232:	4631      	mov	r1, r6
 800a234:	464a      	mov	r2, r9
 800a236:	4620      	mov	r0, r4
 800a238:	f001 ff64 	bl	800c104 <__lshift>
 800a23c:	4606      	mov	r6, r0
 800a23e:	2800      	cmp	r0, #0
 800a240:	f43f ae72 	beq.w	8009f28 <_strtod_l+0x490>
 800a244:	9a05      	ldr	r2, [sp, #20]
 800a246:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a248:	4620      	mov	r0, r4
 800a24a:	f001 ffe7 	bl	800c21c <__mdiff>
 800a24e:	4605      	mov	r5, r0
 800a250:	2800      	cmp	r0, #0
 800a252:	f43f ae69 	beq.w	8009f28 <_strtod_l+0x490>
 800a256:	68c3      	ldr	r3, [r0, #12]
 800a258:	930b      	str	r3, [sp, #44]	; 0x2c
 800a25a:	2300      	movs	r3, #0
 800a25c:	60c3      	str	r3, [r0, #12]
 800a25e:	4631      	mov	r1, r6
 800a260:	f001 ffc0 	bl	800c1e4 <__mcmp>
 800a264:	2800      	cmp	r0, #0
 800a266:	da60      	bge.n	800a32a <_strtod_l+0x892>
 800a268:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a26a:	ea53 030a 	orrs.w	r3, r3, sl
 800a26e:	f040 8082 	bne.w	800a376 <_strtod_l+0x8de>
 800a272:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a276:	2b00      	cmp	r3, #0
 800a278:	d17d      	bne.n	800a376 <_strtod_l+0x8de>
 800a27a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a27e:	0d1b      	lsrs	r3, r3, #20
 800a280:	051b      	lsls	r3, r3, #20
 800a282:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a286:	d976      	bls.n	800a376 <_strtod_l+0x8de>
 800a288:	696b      	ldr	r3, [r5, #20]
 800a28a:	b913      	cbnz	r3, 800a292 <_strtod_l+0x7fa>
 800a28c:	692b      	ldr	r3, [r5, #16]
 800a28e:	2b01      	cmp	r3, #1
 800a290:	dd71      	ble.n	800a376 <_strtod_l+0x8de>
 800a292:	4629      	mov	r1, r5
 800a294:	2201      	movs	r2, #1
 800a296:	4620      	mov	r0, r4
 800a298:	f001 ff34 	bl	800c104 <__lshift>
 800a29c:	4631      	mov	r1, r6
 800a29e:	4605      	mov	r5, r0
 800a2a0:	f001 ffa0 	bl	800c1e4 <__mcmp>
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	dd66      	ble.n	800a376 <_strtod_l+0x8de>
 800a2a8:	9904      	ldr	r1, [sp, #16]
 800a2aa:	4a53      	ldr	r2, [pc, #332]	; (800a3f8 <_strtod_l+0x960>)
 800a2ac:	465b      	mov	r3, fp
 800a2ae:	2900      	cmp	r1, #0
 800a2b0:	f000 8081 	beq.w	800a3b6 <_strtod_l+0x91e>
 800a2b4:	ea02 010b 	and.w	r1, r2, fp
 800a2b8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a2bc:	dc7b      	bgt.n	800a3b6 <_strtod_l+0x91e>
 800a2be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a2c2:	f77f aea9 	ble.w	800a018 <_strtod_l+0x580>
 800a2c6:	4b4d      	ldr	r3, [pc, #308]	; (800a3fc <_strtod_l+0x964>)
 800a2c8:	4650      	mov	r0, sl
 800a2ca:	4659      	mov	r1, fp
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f7f6 f993 	bl	80005f8 <__aeabi_dmul>
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	4303      	orrs	r3, r0
 800a2d6:	bf08      	it	eq
 800a2d8:	2322      	moveq	r3, #34	; 0x22
 800a2da:	4682      	mov	sl, r0
 800a2dc:	468b      	mov	fp, r1
 800a2de:	bf08      	it	eq
 800a2e0:	6023      	streq	r3, [r4, #0]
 800a2e2:	e62b      	b.n	8009f3c <_strtod_l+0x4a4>
 800a2e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ec:	ea03 0a0a 	and.w	sl, r3, sl
 800a2f0:	e6e3      	b.n	800a0ba <_strtod_l+0x622>
 800a2f2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a2f6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a2fa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a2fe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a302:	fa01 f308 	lsl.w	r3, r1, r8
 800a306:	9308      	str	r3, [sp, #32]
 800a308:	910d      	str	r1, [sp, #52]	; 0x34
 800a30a:	e746      	b.n	800a19a <_strtod_l+0x702>
 800a30c:	2300      	movs	r3, #0
 800a30e:	9308      	str	r3, [sp, #32]
 800a310:	2301      	movs	r3, #1
 800a312:	930d      	str	r3, [sp, #52]	; 0x34
 800a314:	e741      	b.n	800a19a <_strtod_l+0x702>
 800a316:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a318:	4642      	mov	r2, r8
 800a31a:	4620      	mov	r0, r4
 800a31c:	f001 fef2 	bl	800c104 <__lshift>
 800a320:	9018      	str	r0, [sp, #96]	; 0x60
 800a322:	2800      	cmp	r0, #0
 800a324:	f47f af6b 	bne.w	800a1fe <_strtod_l+0x766>
 800a328:	e5fe      	b.n	8009f28 <_strtod_l+0x490>
 800a32a:	465f      	mov	r7, fp
 800a32c:	d16e      	bne.n	800a40c <_strtod_l+0x974>
 800a32e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a330:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a334:	b342      	cbz	r2, 800a388 <_strtod_l+0x8f0>
 800a336:	4a32      	ldr	r2, [pc, #200]	; (800a400 <_strtod_l+0x968>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d128      	bne.n	800a38e <_strtod_l+0x8f6>
 800a33c:	9b04      	ldr	r3, [sp, #16]
 800a33e:	4651      	mov	r1, sl
 800a340:	b1eb      	cbz	r3, 800a37e <_strtod_l+0x8e6>
 800a342:	4b2d      	ldr	r3, [pc, #180]	; (800a3f8 <_strtod_l+0x960>)
 800a344:	403b      	ands	r3, r7
 800a346:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a34a:	f04f 32ff 	mov.w	r2, #4294967295
 800a34e:	d819      	bhi.n	800a384 <_strtod_l+0x8ec>
 800a350:	0d1b      	lsrs	r3, r3, #20
 800a352:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a356:	fa02 f303 	lsl.w	r3, r2, r3
 800a35a:	4299      	cmp	r1, r3
 800a35c:	d117      	bne.n	800a38e <_strtod_l+0x8f6>
 800a35e:	4b29      	ldr	r3, [pc, #164]	; (800a404 <_strtod_l+0x96c>)
 800a360:	429f      	cmp	r7, r3
 800a362:	d102      	bne.n	800a36a <_strtod_l+0x8d2>
 800a364:	3101      	adds	r1, #1
 800a366:	f43f addf 	beq.w	8009f28 <_strtod_l+0x490>
 800a36a:	4b23      	ldr	r3, [pc, #140]	; (800a3f8 <_strtod_l+0x960>)
 800a36c:	403b      	ands	r3, r7
 800a36e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a372:	f04f 0a00 	mov.w	sl, #0
 800a376:	9b04      	ldr	r3, [sp, #16]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d1a4      	bne.n	800a2c6 <_strtod_l+0x82e>
 800a37c:	e5de      	b.n	8009f3c <_strtod_l+0x4a4>
 800a37e:	f04f 33ff 	mov.w	r3, #4294967295
 800a382:	e7ea      	b.n	800a35a <_strtod_l+0x8c2>
 800a384:	4613      	mov	r3, r2
 800a386:	e7e8      	b.n	800a35a <_strtod_l+0x8c2>
 800a388:	ea53 030a 	orrs.w	r3, r3, sl
 800a38c:	d08c      	beq.n	800a2a8 <_strtod_l+0x810>
 800a38e:	9b08      	ldr	r3, [sp, #32]
 800a390:	b1db      	cbz	r3, 800a3ca <_strtod_l+0x932>
 800a392:	423b      	tst	r3, r7
 800a394:	d0ef      	beq.n	800a376 <_strtod_l+0x8de>
 800a396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a398:	9a04      	ldr	r2, [sp, #16]
 800a39a:	4650      	mov	r0, sl
 800a39c:	4659      	mov	r1, fp
 800a39e:	b1c3      	cbz	r3, 800a3d2 <_strtod_l+0x93a>
 800a3a0:	f7ff fb5d 	bl	8009a5e <sulp>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	ec51 0b18 	vmov	r0, r1, d8
 800a3ac:	f7f5 ff6e 	bl	800028c <__adddf3>
 800a3b0:	4682      	mov	sl, r0
 800a3b2:	468b      	mov	fp, r1
 800a3b4:	e7df      	b.n	800a376 <_strtod_l+0x8de>
 800a3b6:	4013      	ands	r3, r2
 800a3b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a3bc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a3c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a3c4:	f04f 3aff 	mov.w	sl, #4294967295
 800a3c8:	e7d5      	b.n	800a376 <_strtod_l+0x8de>
 800a3ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3cc:	ea13 0f0a 	tst.w	r3, sl
 800a3d0:	e7e0      	b.n	800a394 <_strtod_l+0x8fc>
 800a3d2:	f7ff fb44 	bl	8009a5e <sulp>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	460b      	mov	r3, r1
 800a3da:	ec51 0b18 	vmov	r0, r1, d8
 800a3de:	f7f5 ff53 	bl	8000288 <__aeabi_dsub>
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	4682      	mov	sl, r0
 800a3e8:	468b      	mov	fp, r1
 800a3ea:	f7f6 fb6d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3ee:	2800      	cmp	r0, #0
 800a3f0:	d0c1      	beq.n	800a376 <_strtod_l+0x8de>
 800a3f2:	e611      	b.n	800a018 <_strtod_l+0x580>
 800a3f4:	fffffc02 	.word	0xfffffc02
 800a3f8:	7ff00000 	.word	0x7ff00000
 800a3fc:	39500000 	.word	0x39500000
 800a400:	000fffff 	.word	0x000fffff
 800a404:	7fefffff 	.word	0x7fefffff
 800a408:	0800f6d8 	.word	0x0800f6d8
 800a40c:	4631      	mov	r1, r6
 800a40e:	4628      	mov	r0, r5
 800a410:	f002 f866 	bl	800c4e0 <__ratio>
 800a414:	ec59 8b10 	vmov	r8, r9, d0
 800a418:	ee10 0a10 	vmov	r0, s0
 800a41c:	2200      	movs	r2, #0
 800a41e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a422:	4649      	mov	r1, r9
 800a424:	f7f6 fb64 	bl	8000af0 <__aeabi_dcmple>
 800a428:	2800      	cmp	r0, #0
 800a42a:	d07a      	beq.n	800a522 <_strtod_l+0xa8a>
 800a42c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d04a      	beq.n	800a4c8 <_strtod_l+0xa30>
 800a432:	4b95      	ldr	r3, [pc, #596]	; (800a688 <_strtod_l+0xbf0>)
 800a434:	2200      	movs	r2, #0
 800a436:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a43a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a688 <_strtod_l+0xbf0>
 800a43e:	f04f 0800 	mov.w	r8, #0
 800a442:	4b92      	ldr	r3, [pc, #584]	; (800a68c <_strtod_l+0xbf4>)
 800a444:	403b      	ands	r3, r7
 800a446:	930d      	str	r3, [sp, #52]	; 0x34
 800a448:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a44a:	4b91      	ldr	r3, [pc, #580]	; (800a690 <_strtod_l+0xbf8>)
 800a44c:	429a      	cmp	r2, r3
 800a44e:	f040 80b0 	bne.w	800a5b2 <_strtod_l+0xb1a>
 800a452:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a456:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a45a:	ec4b ab10 	vmov	d0, sl, fp
 800a45e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a462:	f001 ff65 	bl	800c330 <__ulp>
 800a466:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a46a:	ec53 2b10 	vmov	r2, r3, d0
 800a46e:	f7f6 f8c3 	bl	80005f8 <__aeabi_dmul>
 800a472:	4652      	mov	r2, sl
 800a474:	465b      	mov	r3, fp
 800a476:	f7f5 ff09 	bl	800028c <__adddf3>
 800a47a:	460b      	mov	r3, r1
 800a47c:	4983      	ldr	r1, [pc, #524]	; (800a68c <_strtod_l+0xbf4>)
 800a47e:	4a85      	ldr	r2, [pc, #532]	; (800a694 <_strtod_l+0xbfc>)
 800a480:	4019      	ands	r1, r3
 800a482:	4291      	cmp	r1, r2
 800a484:	4682      	mov	sl, r0
 800a486:	d960      	bls.n	800a54a <_strtod_l+0xab2>
 800a488:	ee18 3a90 	vmov	r3, s17
 800a48c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a490:	4293      	cmp	r3, r2
 800a492:	d104      	bne.n	800a49e <_strtod_l+0xa06>
 800a494:	ee18 3a10 	vmov	r3, s16
 800a498:	3301      	adds	r3, #1
 800a49a:	f43f ad45 	beq.w	8009f28 <_strtod_l+0x490>
 800a49e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a6a0 <_strtod_l+0xc08>
 800a4a2:	f04f 3aff 	mov.w	sl, #4294967295
 800a4a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	f001 fc0f 	bl	800bccc <_Bfree>
 800a4ae:	9905      	ldr	r1, [sp, #20]
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f001 fc0b 	bl	800bccc <_Bfree>
 800a4b6:	4631      	mov	r1, r6
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	f001 fc07 	bl	800bccc <_Bfree>
 800a4be:	4629      	mov	r1, r5
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f001 fc03 	bl	800bccc <_Bfree>
 800a4c6:	e61a      	b.n	800a0fe <_strtod_l+0x666>
 800a4c8:	f1ba 0f00 	cmp.w	sl, #0
 800a4cc:	d11b      	bne.n	800a506 <_strtod_l+0xa6e>
 800a4ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4d2:	b9f3      	cbnz	r3, 800a512 <_strtod_l+0xa7a>
 800a4d4:	4b6c      	ldr	r3, [pc, #432]	; (800a688 <_strtod_l+0xbf0>)
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	4640      	mov	r0, r8
 800a4da:	4649      	mov	r1, r9
 800a4dc:	f7f6 fafe 	bl	8000adc <__aeabi_dcmplt>
 800a4e0:	b9d0      	cbnz	r0, 800a518 <_strtod_l+0xa80>
 800a4e2:	4640      	mov	r0, r8
 800a4e4:	4649      	mov	r1, r9
 800a4e6:	4b6c      	ldr	r3, [pc, #432]	; (800a698 <_strtod_l+0xc00>)
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f7f6 f885 	bl	80005f8 <__aeabi_dmul>
 800a4ee:	4680      	mov	r8, r0
 800a4f0:	4689      	mov	r9, r1
 800a4f2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a4f6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a4fa:	9315      	str	r3, [sp, #84]	; 0x54
 800a4fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a500:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a504:	e79d      	b.n	800a442 <_strtod_l+0x9aa>
 800a506:	f1ba 0f01 	cmp.w	sl, #1
 800a50a:	d102      	bne.n	800a512 <_strtod_l+0xa7a>
 800a50c:	2f00      	cmp	r7, #0
 800a50e:	f43f ad83 	beq.w	800a018 <_strtod_l+0x580>
 800a512:	4b62      	ldr	r3, [pc, #392]	; (800a69c <_strtod_l+0xc04>)
 800a514:	2200      	movs	r2, #0
 800a516:	e78e      	b.n	800a436 <_strtod_l+0x99e>
 800a518:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a698 <_strtod_l+0xc00>
 800a51c:	f04f 0800 	mov.w	r8, #0
 800a520:	e7e7      	b.n	800a4f2 <_strtod_l+0xa5a>
 800a522:	4b5d      	ldr	r3, [pc, #372]	; (800a698 <_strtod_l+0xc00>)
 800a524:	4640      	mov	r0, r8
 800a526:	4649      	mov	r1, r9
 800a528:	2200      	movs	r2, #0
 800a52a:	f7f6 f865 	bl	80005f8 <__aeabi_dmul>
 800a52e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a530:	4680      	mov	r8, r0
 800a532:	4689      	mov	r9, r1
 800a534:	b933      	cbnz	r3, 800a544 <_strtod_l+0xaac>
 800a536:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a53a:	900e      	str	r0, [sp, #56]	; 0x38
 800a53c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a53e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a542:	e7dd      	b.n	800a500 <_strtod_l+0xa68>
 800a544:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a548:	e7f9      	b.n	800a53e <_strtod_l+0xaa6>
 800a54a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a54e:	9b04      	ldr	r3, [sp, #16]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d1a8      	bne.n	800a4a6 <_strtod_l+0xa0e>
 800a554:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a558:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a55a:	0d1b      	lsrs	r3, r3, #20
 800a55c:	051b      	lsls	r3, r3, #20
 800a55e:	429a      	cmp	r2, r3
 800a560:	d1a1      	bne.n	800a4a6 <_strtod_l+0xa0e>
 800a562:	4640      	mov	r0, r8
 800a564:	4649      	mov	r1, r9
 800a566:	f7f6 fba7 	bl	8000cb8 <__aeabi_d2lz>
 800a56a:	f7f6 f817 	bl	800059c <__aeabi_l2d>
 800a56e:	4602      	mov	r2, r0
 800a570:	460b      	mov	r3, r1
 800a572:	4640      	mov	r0, r8
 800a574:	4649      	mov	r1, r9
 800a576:	f7f5 fe87 	bl	8000288 <__aeabi_dsub>
 800a57a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a57c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a580:	ea43 030a 	orr.w	r3, r3, sl
 800a584:	4313      	orrs	r3, r2
 800a586:	4680      	mov	r8, r0
 800a588:	4689      	mov	r9, r1
 800a58a:	d055      	beq.n	800a638 <_strtod_l+0xba0>
 800a58c:	a336      	add	r3, pc, #216	; (adr r3, 800a668 <_strtod_l+0xbd0>)
 800a58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a592:	f7f6 faa3 	bl	8000adc <__aeabi_dcmplt>
 800a596:	2800      	cmp	r0, #0
 800a598:	f47f acd0 	bne.w	8009f3c <_strtod_l+0x4a4>
 800a59c:	a334      	add	r3, pc, #208	; (adr r3, 800a670 <_strtod_l+0xbd8>)
 800a59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a2:	4640      	mov	r0, r8
 800a5a4:	4649      	mov	r1, r9
 800a5a6:	f7f6 fab7 	bl	8000b18 <__aeabi_dcmpgt>
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	f43f af7b 	beq.w	800a4a6 <_strtod_l+0xa0e>
 800a5b0:	e4c4      	b.n	8009f3c <_strtod_l+0x4a4>
 800a5b2:	9b04      	ldr	r3, [sp, #16]
 800a5b4:	b333      	cbz	r3, 800a604 <_strtod_l+0xb6c>
 800a5b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5b8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a5bc:	d822      	bhi.n	800a604 <_strtod_l+0xb6c>
 800a5be:	a32e      	add	r3, pc, #184	; (adr r3, 800a678 <_strtod_l+0xbe0>)
 800a5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c4:	4640      	mov	r0, r8
 800a5c6:	4649      	mov	r1, r9
 800a5c8:	f7f6 fa92 	bl	8000af0 <__aeabi_dcmple>
 800a5cc:	b1a0      	cbz	r0, 800a5f8 <_strtod_l+0xb60>
 800a5ce:	4649      	mov	r1, r9
 800a5d0:	4640      	mov	r0, r8
 800a5d2:	f7f6 fae9 	bl	8000ba8 <__aeabi_d2uiz>
 800a5d6:	2801      	cmp	r0, #1
 800a5d8:	bf38      	it	cc
 800a5da:	2001      	movcc	r0, #1
 800a5dc:	f7f5 ff92 	bl	8000504 <__aeabi_ui2d>
 800a5e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5e2:	4680      	mov	r8, r0
 800a5e4:	4689      	mov	r9, r1
 800a5e6:	bb23      	cbnz	r3, 800a632 <_strtod_l+0xb9a>
 800a5e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5ec:	9010      	str	r0, [sp, #64]	; 0x40
 800a5ee:	9311      	str	r3, [sp, #68]	; 0x44
 800a5f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a5f4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a5f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a5fc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a600:	1a9b      	subs	r3, r3, r2
 800a602:	9309      	str	r3, [sp, #36]	; 0x24
 800a604:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a608:	eeb0 0a48 	vmov.f32	s0, s16
 800a60c:	eef0 0a68 	vmov.f32	s1, s17
 800a610:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a614:	f001 fe8c 	bl	800c330 <__ulp>
 800a618:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a61c:	ec53 2b10 	vmov	r2, r3, d0
 800a620:	f7f5 ffea 	bl	80005f8 <__aeabi_dmul>
 800a624:	ec53 2b18 	vmov	r2, r3, d8
 800a628:	f7f5 fe30 	bl	800028c <__adddf3>
 800a62c:	4682      	mov	sl, r0
 800a62e:	468b      	mov	fp, r1
 800a630:	e78d      	b.n	800a54e <_strtod_l+0xab6>
 800a632:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a636:	e7db      	b.n	800a5f0 <_strtod_l+0xb58>
 800a638:	a311      	add	r3, pc, #68	; (adr r3, 800a680 <_strtod_l+0xbe8>)
 800a63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a63e:	f7f6 fa4d 	bl	8000adc <__aeabi_dcmplt>
 800a642:	e7b2      	b.n	800a5aa <_strtod_l+0xb12>
 800a644:	2300      	movs	r3, #0
 800a646:	930a      	str	r3, [sp, #40]	; 0x28
 800a648:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a64a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a64c:	6013      	str	r3, [r2, #0]
 800a64e:	f7ff ba6b 	b.w	8009b28 <_strtod_l+0x90>
 800a652:	2a65      	cmp	r2, #101	; 0x65
 800a654:	f43f ab5f 	beq.w	8009d16 <_strtod_l+0x27e>
 800a658:	2a45      	cmp	r2, #69	; 0x45
 800a65a:	f43f ab5c 	beq.w	8009d16 <_strtod_l+0x27e>
 800a65e:	2301      	movs	r3, #1
 800a660:	f7ff bb94 	b.w	8009d8c <_strtod_l+0x2f4>
 800a664:	f3af 8000 	nop.w
 800a668:	94a03595 	.word	0x94a03595
 800a66c:	3fdfffff 	.word	0x3fdfffff
 800a670:	35afe535 	.word	0x35afe535
 800a674:	3fe00000 	.word	0x3fe00000
 800a678:	ffc00000 	.word	0xffc00000
 800a67c:	41dfffff 	.word	0x41dfffff
 800a680:	94a03595 	.word	0x94a03595
 800a684:	3fcfffff 	.word	0x3fcfffff
 800a688:	3ff00000 	.word	0x3ff00000
 800a68c:	7ff00000 	.word	0x7ff00000
 800a690:	7fe00000 	.word	0x7fe00000
 800a694:	7c9fffff 	.word	0x7c9fffff
 800a698:	3fe00000 	.word	0x3fe00000
 800a69c:	bff00000 	.word	0xbff00000
 800a6a0:	7fefffff 	.word	0x7fefffff

0800a6a4 <_strtod_r>:
 800a6a4:	4b01      	ldr	r3, [pc, #4]	; (800a6ac <_strtod_r+0x8>)
 800a6a6:	f7ff b9f7 	b.w	8009a98 <_strtod_l>
 800a6aa:	bf00      	nop
 800a6ac:	2000011c 	.word	0x2000011c

0800a6b0 <strtod>:
 800a6b0:	460a      	mov	r2, r1
 800a6b2:	4601      	mov	r1, r0
 800a6b4:	4802      	ldr	r0, [pc, #8]	; (800a6c0 <strtod+0x10>)
 800a6b6:	4b03      	ldr	r3, [pc, #12]	; (800a6c4 <strtod+0x14>)
 800a6b8:	6800      	ldr	r0, [r0, #0]
 800a6ba:	f7ff b9ed 	b.w	8009a98 <_strtod_l>
 800a6be:	bf00      	nop
 800a6c0:	200000b4 	.word	0x200000b4
 800a6c4:	2000011c 	.word	0x2000011c

0800a6c8 <_strtol_l.constprop.0>:
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6ce:	d001      	beq.n	800a6d4 <_strtol_l.constprop.0+0xc>
 800a6d0:	2b24      	cmp	r3, #36	; 0x24
 800a6d2:	d906      	bls.n	800a6e2 <_strtol_l.constprop.0+0x1a>
 800a6d4:	f7fe fa72 	bl	8008bbc <__errno>
 800a6d8:	2316      	movs	r3, #22
 800a6da:	6003      	str	r3, [r0, #0]
 800a6dc:	2000      	movs	r0, #0
 800a6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a7c8 <_strtol_l.constprop.0+0x100>
 800a6e6:	460d      	mov	r5, r1
 800a6e8:	462e      	mov	r6, r5
 800a6ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a6f2:	f017 0708 	ands.w	r7, r7, #8
 800a6f6:	d1f7      	bne.n	800a6e8 <_strtol_l.constprop.0+0x20>
 800a6f8:	2c2d      	cmp	r4, #45	; 0x2d
 800a6fa:	d132      	bne.n	800a762 <_strtol_l.constprop.0+0x9a>
 800a6fc:	782c      	ldrb	r4, [r5, #0]
 800a6fe:	2701      	movs	r7, #1
 800a700:	1cb5      	adds	r5, r6, #2
 800a702:	2b00      	cmp	r3, #0
 800a704:	d05b      	beq.n	800a7be <_strtol_l.constprop.0+0xf6>
 800a706:	2b10      	cmp	r3, #16
 800a708:	d109      	bne.n	800a71e <_strtol_l.constprop.0+0x56>
 800a70a:	2c30      	cmp	r4, #48	; 0x30
 800a70c:	d107      	bne.n	800a71e <_strtol_l.constprop.0+0x56>
 800a70e:	782c      	ldrb	r4, [r5, #0]
 800a710:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a714:	2c58      	cmp	r4, #88	; 0x58
 800a716:	d14d      	bne.n	800a7b4 <_strtol_l.constprop.0+0xec>
 800a718:	786c      	ldrb	r4, [r5, #1]
 800a71a:	2310      	movs	r3, #16
 800a71c:	3502      	adds	r5, #2
 800a71e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a722:	f108 38ff 	add.w	r8, r8, #4294967295
 800a726:	f04f 0c00 	mov.w	ip, #0
 800a72a:	fbb8 f9f3 	udiv	r9, r8, r3
 800a72e:	4666      	mov	r6, ip
 800a730:	fb03 8a19 	mls	sl, r3, r9, r8
 800a734:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a738:	f1be 0f09 	cmp.w	lr, #9
 800a73c:	d816      	bhi.n	800a76c <_strtol_l.constprop.0+0xa4>
 800a73e:	4674      	mov	r4, lr
 800a740:	42a3      	cmp	r3, r4
 800a742:	dd24      	ble.n	800a78e <_strtol_l.constprop.0+0xc6>
 800a744:	f1bc 0f00 	cmp.w	ip, #0
 800a748:	db1e      	blt.n	800a788 <_strtol_l.constprop.0+0xc0>
 800a74a:	45b1      	cmp	r9, r6
 800a74c:	d31c      	bcc.n	800a788 <_strtol_l.constprop.0+0xc0>
 800a74e:	d101      	bne.n	800a754 <_strtol_l.constprop.0+0x8c>
 800a750:	45a2      	cmp	sl, r4
 800a752:	db19      	blt.n	800a788 <_strtol_l.constprop.0+0xc0>
 800a754:	fb06 4603 	mla	r6, r6, r3, r4
 800a758:	f04f 0c01 	mov.w	ip, #1
 800a75c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a760:	e7e8      	b.n	800a734 <_strtol_l.constprop.0+0x6c>
 800a762:	2c2b      	cmp	r4, #43	; 0x2b
 800a764:	bf04      	itt	eq
 800a766:	782c      	ldrbeq	r4, [r5, #0]
 800a768:	1cb5      	addeq	r5, r6, #2
 800a76a:	e7ca      	b.n	800a702 <_strtol_l.constprop.0+0x3a>
 800a76c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a770:	f1be 0f19 	cmp.w	lr, #25
 800a774:	d801      	bhi.n	800a77a <_strtol_l.constprop.0+0xb2>
 800a776:	3c37      	subs	r4, #55	; 0x37
 800a778:	e7e2      	b.n	800a740 <_strtol_l.constprop.0+0x78>
 800a77a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a77e:	f1be 0f19 	cmp.w	lr, #25
 800a782:	d804      	bhi.n	800a78e <_strtol_l.constprop.0+0xc6>
 800a784:	3c57      	subs	r4, #87	; 0x57
 800a786:	e7db      	b.n	800a740 <_strtol_l.constprop.0+0x78>
 800a788:	f04f 3cff 	mov.w	ip, #4294967295
 800a78c:	e7e6      	b.n	800a75c <_strtol_l.constprop.0+0x94>
 800a78e:	f1bc 0f00 	cmp.w	ip, #0
 800a792:	da05      	bge.n	800a7a0 <_strtol_l.constprop.0+0xd8>
 800a794:	2322      	movs	r3, #34	; 0x22
 800a796:	6003      	str	r3, [r0, #0]
 800a798:	4646      	mov	r6, r8
 800a79a:	b942      	cbnz	r2, 800a7ae <_strtol_l.constprop.0+0xe6>
 800a79c:	4630      	mov	r0, r6
 800a79e:	e79e      	b.n	800a6de <_strtol_l.constprop.0+0x16>
 800a7a0:	b107      	cbz	r7, 800a7a4 <_strtol_l.constprop.0+0xdc>
 800a7a2:	4276      	negs	r6, r6
 800a7a4:	2a00      	cmp	r2, #0
 800a7a6:	d0f9      	beq.n	800a79c <_strtol_l.constprop.0+0xd4>
 800a7a8:	f1bc 0f00 	cmp.w	ip, #0
 800a7ac:	d000      	beq.n	800a7b0 <_strtol_l.constprop.0+0xe8>
 800a7ae:	1e69      	subs	r1, r5, #1
 800a7b0:	6011      	str	r1, [r2, #0]
 800a7b2:	e7f3      	b.n	800a79c <_strtol_l.constprop.0+0xd4>
 800a7b4:	2430      	movs	r4, #48	; 0x30
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d1b1      	bne.n	800a71e <_strtol_l.constprop.0+0x56>
 800a7ba:	2308      	movs	r3, #8
 800a7bc:	e7af      	b.n	800a71e <_strtol_l.constprop.0+0x56>
 800a7be:	2c30      	cmp	r4, #48	; 0x30
 800a7c0:	d0a5      	beq.n	800a70e <_strtol_l.constprop.0+0x46>
 800a7c2:	230a      	movs	r3, #10
 800a7c4:	e7ab      	b.n	800a71e <_strtol_l.constprop.0+0x56>
 800a7c6:	bf00      	nop
 800a7c8:	0800f701 	.word	0x0800f701

0800a7cc <_strtol_r>:
 800a7cc:	f7ff bf7c 	b.w	800a6c8 <_strtol_l.constprop.0>

0800a7d0 <_write_r>:
 800a7d0:	b538      	push	{r3, r4, r5, lr}
 800a7d2:	4d07      	ldr	r5, [pc, #28]	; (800a7f0 <_write_r+0x20>)
 800a7d4:	4604      	mov	r4, r0
 800a7d6:	4608      	mov	r0, r1
 800a7d8:	4611      	mov	r1, r2
 800a7da:	2200      	movs	r2, #0
 800a7dc:	602a      	str	r2, [r5, #0]
 800a7de:	461a      	mov	r2, r3
 800a7e0:	f004 fefc 	bl	800f5dc <_write>
 800a7e4:	1c43      	adds	r3, r0, #1
 800a7e6:	d102      	bne.n	800a7ee <_write_r+0x1e>
 800a7e8:	682b      	ldr	r3, [r5, #0]
 800a7ea:	b103      	cbz	r3, 800a7ee <_write_r+0x1e>
 800a7ec:	6023      	str	r3, [r4, #0]
 800a7ee:	bd38      	pop	{r3, r4, r5, pc}
 800a7f0:	200006d4 	.word	0x200006d4

0800a7f4 <_close_r>:
 800a7f4:	b538      	push	{r3, r4, r5, lr}
 800a7f6:	4d06      	ldr	r5, [pc, #24]	; (800a810 <_close_r+0x1c>)
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	4604      	mov	r4, r0
 800a7fc:	4608      	mov	r0, r1
 800a7fe:	602b      	str	r3, [r5, #0]
 800a800:	f004 feb4 	bl	800f56c <_close>
 800a804:	1c43      	adds	r3, r0, #1
 800a806:	d102      	bne.n	800a80e <_close_r+0x1a>
 800a808:	682b      	ldr	r3, [r5, #0]
 800a80a:	b103      	cbz	r3, 800a80e <_close_r+0x1a>
 800a80c:	6023      	str	r3, [r4, #0]
 800a80e:	bd38      	pop	{r3, r4, r5, pc}
 800a810:	200006d4 	.word	0x200006d4

0800a814 <quorem>:
 800a814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a818:	6903      	ldr	r3, [r0, #16]
 800a81a:	690c      	ldr	r4, [r1, #16]
 800a81c:	42a3      	cmp	r3, r4
 800a81e:	4607      	mov	r7, r0
 800a820:	f2c0 8081 	blt.w	800a926 <quorem+0x112>
 800a824:	3c01      	subs	r4, #1
 800a826:	f101 0814 	add.w	r8, r1, #20
 800a82a:	f100 0514 	add.w	r5, r0, #20
 800a82e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a832:	9301      	str	r3, [sp, #4]
 800a834:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a838:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a83c:	3301      	adds	r3, #1
 800a83e:	429a      	cmp	r2, r3
 800a840:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a844:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a848:	fbb2 f6f3 	udiv	r6, r2, r3
 800a84c:	d331      	bcc.n	800a8b2 <quorem+0x9e>
 800a84e:	f04f 0e00 	mov.w	lr, #0
 800a852:	4640      	mov	r0, r8
 800a854:	46ac      	mov	ip, r5
 800a856:	46f2      	mov	sl, lr
 800a858:	f850 2b04 	ldr.w	r2, [r0], #4
 800a85c:	b293      	uxth	r3, r2
 800a85e:	fb06 e303 	mla	r3, r6, r3, lr
 800a862:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a866:	b29b      	uxth	r3, r3
 800a868:	ebaa 0303 	sub.w	r3, sl, r3
 800a86c:	f8dc a000 	ldr.w	sl, [ip]
 800a870:	0c12      	lsrs	r2, r2, #16
 800a872:	fa13 f38a 	uxtah	r3, r3, sl
 800a876:	fb06 e202 	mla	r2, r6, r2, lr
 800a87a:	9300      	str	r3, [sp, #0]
 800a87c:	9b00      	ldr	r3, [sp, #0]
 800a87e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a882:	b292      	uxth	r2, r2
 800a884:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a888:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a88c:	f8bd 3000 	ldrh.w	r3, [sp]
 800a890:	4581      	cmp	r9, r0
 800a892:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a896:	f84c 3b04 	str.w	r3, [ip], #4
 800a89a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a89e:	d2db      	bcs.n	800a858 <quorem+0x44>
 800a8a0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a8a4:	b92b      	cbnz	r3, 800a8b2 <quorem+0x9e>
 800a8a6:	9b01      	ldr	r3, [sp, #4]
 800a8a8:	3b04      	subs	r3, #4
 800a8aa:	429d      	cmp	r5, r3
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	d32e      	bcc.n	800a90e <quorem+0xfa>
 800a8b0:	613c      	str	r4, [r7, #16]
 800a8b2:	4638      	mov	r0, r7
 800a8b4:	f001 fc96 	bl	800c1e4 <__mcmp>
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	db24      	blt.n	800a906 <quorem+0xf2>
 800a8bc:	3601      	adds	r6, #1
 800a8be:	4628      	mov	r0, r5
 800a8c0:	f04f 0c00 	mov.w	ip, #0
 800a8c4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a8c8:	f8d0 e000 	ldr.w	lr, [r0]
 800a8cc:	b293      	uxth	r3, r2
 800a8ce:	ebac 0303 	sub.w	r3, ip, r3
 800a8d2:	0c12      	lsrs	r2, r2, #16
 800a8d4:	fa13 f38e 	uxtah	r3, r3, lr
 800a8d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a8dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8e6:	45c1      	cmp	r9, r8
 800a8e8:	f840 3b04 	str.w	r3, [r0], #4
 800a8ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a8f0:	d2e8      	bcs.n	800a8c4 <quorem+0xb0>
 800a8f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8fa:	b922      	cbnz	r2, 800a906 <quorem+0xf2>
 800a8fc:	3b04      	subs	r3, #4
 800a8fe:	429d      	cmp	r5, r3
 800a900:	461a      	mov	r2, r3
 800a902:	d30a      	bcc.n	800a91a <quorem+0x106>
 800a904:	613c      	str	r4, [r7, #16]
 800a906:	4630      	mov	r0, r6
 800a908:	b003      	add	sp, #12
 800a90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a90e:	6812      	ldr	r2, [r2, #0]
 800a910:	3b04      	subs	r3, #4
 800a912:	2a00      	cmp	r2, #0
 800a914:	d1cc      	bne.n	800a8b0 <quorem+0x9c>
 800a916:	3c01      	subs	r4, #1
 800a918:	e7c7      	b.n	800a8aa <quorem+0x96>
 800a91a:	6812      	ldr	r2, [r2, #0]
 800a91c:	3b04      	subs	r3, #4
 800a91e:	2a00      	cmp	r2, #0
 800a920:	d1f0      	bne.n	800a904 <quorem+0xf0>
 800a922:	3c01      	subs	r4, #1
 800a924:	e7eb      	b.n	800a8fe <quorem+0xea>
 800a926:	2000      	movs	r0, #0
 800a928:	e7ee      	b.n	800a908 <quorem+0xf4>
 800a92a:	0000      	movs	r0, r0
 800a92c:	0000      	movs	r0, r0
	...

0800a930 <_dtoa_r>:
 800a930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a934:	ed2d 8b04 	vpush	{d8-d9}
 800a938:	ec57 6b10 	vmov	r6, r7, d0
 800a93c:	b093      	sub	sp, #76	; 0x4c
 800a93e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a940:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a944:	9106      	str	r1, [sp, #24]
 800a946:	ee10 aa10 	vmov	sl, s0
 800a94a:	4604      	mov	r4, r0
 800a94c:	9209      	str	r2, [sp, #36]	; 0x24
 800a94e:	930c      	str	r3, [sp, #48]	; 0x30
 800a950:	46bb      	mov	fp, r7
 800a952:	b975      	cbnz	r5, 800a972 <_dtoa_r+0x42>
 800a954:	2010      	movs	r0, #16
 800a956:	f001 f95f 	bl	800bc18 <malloc>
 800a95a:	4602      	mov	r2, r0
 800a95c:	6260      	str	r0, [r4, #36]	; 0x24
 800a95e:	b920      	cbnz	r0, 800a96a <_dtoa_r+0x3a>
 800a960:	4ba7      	ldr	r3, [pc, #668]	; (800ac00 <_dtoa_r+0x2d0>)
 800a962:	21ea      	movs	r1, #234	; 0xea
 800a964:	48a7      	ldr	r0, [pc, #668]	; (800ac04 <_dtoa_r+0x2d4>)
 800a966:	f002 fcdb 	bl	800d320 <__assert_func>
 800a96a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a96e:	6005      	str	r5, [r0, #0]
 800a970:	60c5      	str	r5, [r0, #12]
 800a972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a974:	6819      	ldr	r1, [r3, #0]
 800a976:	b151      	cbz	r1, 800a98e <_dtoa_r+0x5e>
 800a978:	685a      	ldr	r2, [r3, #4]
 800a97a:	604a      	str	r2, [r1, #4]
 800a97c:	2301      	movs	r3, #1
 800a97e:	4093      	lsls	r3, r2
 800a980:	608b      	str	r3, [r1, #8]
 800a982:	4620      	mov	r0, r4
 800a984:	f001 f9a2 	bl	800bccc <_Bfree>
 800a988:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a98a:	2200      	movs	r2, #0
 800a98c:	601a      	str	r2, [r3, #0]
 800a98e:	1e3b      	subs	r3, r7, #0
 800a990:	bfaa      	itet	ge
 800a992:	2300      	movge	r3, #0
 800a994:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a998:	f8c8 3000 	strge.w	r3, [r8]
 800a99c:	4b9a      	ldr	r3, [pc, #616]	; (800ac08 <_dtoa_r+0x2d8>)
 800a99e:	bfbc      	itt	lt
 800a9a0:	2201      	movlt	r2, #1
 800a9a2:	f8c8 2000 	strlt.w	r2, [r8]
 800a9a6:	ea33 030b 	bics.w	r3, r3, fp
 800a9aa:	d11b      	bne.n	800a9e4 <_dtoa_r+0xb4>
 800a9ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9ae:	f242 730f 	movw	r3, #9999	; 0x270f
 800a9b2:	6013      	str	r3, [r2, #0]
 800a9b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a9b8:	4333      	orrs	r3, r6
 800a9ba:	f000 8592 	beq.w	800b4e2 <_dtoa_r+0xbb2>
 800a9be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9c0:	b963      	cbnz	r3, 800a9dc <_dtoa_r+0xac>
 800a9c2:	4b92      	ldr	r3, [pc, #584]	; (800ac0c <_dtoa_r+0x2dc>)
 800a9c4:	e022      	b.n	800aa0c <_dtoa_r+0xdc>
 800a9c6:	4b92      	ldr	r3, [pc, #584]	; (800ac10 <_dtoa_r+0x2e0>)
 800a9c8:	9301      	str	r3, [sp, #4]
 800a9ca:	3308      	adds	r3, #8
 800a9cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a9ce:	6013      	str	r3, [r2, #0]
 800a9d0:	9801      	ldr	r0, [sp, #4]
 800a9d2:	b013      	add	sp, #76	; 0x4c
 800a9d4:	ecbd 8b04 	vpop	{d8-d9}
 800a9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9dc:	4b8b      	ldr	r3, [pc, #556]	; (800ac0c <_dtoa_r+0x2dc>)
 800a9de:	9301      	str	r3, [sp, #4]
 800a9e0:	3303      	adds	r3, #3
 800a9e2:	e7f3      	b.n	800a9cc <_dtoa_r+0x9c>
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	4650      	mov	r0, sl
 800a9ea:	4659      	mov	r1, fp
 800a9ec:	f7f6 f86c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9f0:	ec4b ab19 	vmov	d9, sl, fp
 800a9f4:	4680      	mov	r8, r0
 800a9f6:	b158      	cbz	r0, 800aa10 <_dtoa_r+0xe0>
 800a9f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	6013      	str	r3, [r2, #0]
 800a9fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	f000 856b 	beq.w	800b4dc <_dtoa_r+0xbac>
 800aa06:	4883      	ldr	r0, [pc, #524]	; (800ac14 <_dtoa_r+0x2e4>)
 800aa08:	6018      	str	r0, [r3, #0]
 800aa0a:	1e43      	subs	r3, r0, #1
 800aa0c:	9301      	str	r3, [sp, #4]
 800aa0e:	e7df      	b.n	800a9d0 <_dtoa_r+0xa0>
 800aa10:	ec4b ab10 	vmov	d0, sl, fp
 800aa14:	aa10      	add	r2, sp, #64	; 0x40
 800aa16:	a911      	add	r1, sp, #68	; 0x44
 800aa18:	4620      	mov	r0, r4
 800aa1a:	f001 fd05 	bl	800c428 <__d2b>
 800aa1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800aa22:	ee08 0a10 	vmov	s16, r0
 800aa26:	2d00      	cmp	r5, #0
 800aa28:	f000 8084 	beq.w	800ab34 <_dtoa_r+0x204>
 800aa2c:	ee19 3a90 	vmov	r3, s19
 800aa30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800aa38:	4656      	mov	r6, sl
 800aa3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800aa3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aa42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800aa46:	4b74      	ldr	r3, [pc, #464]	; (800ac18 <_dtoa_r+0x2e8>)
 800aa48:	2200      	movs	r2, #0
 800aa4a:	4630      	mov	r0, r6
 800aa4c:	4639      	mov	r1, r7
 800aa4e:	f7f5 fc1b 	bl	8000288 <__aeabi_dsub>
 800aa52:	a365      	add	r3, pc, #404	; (adr r3, 800abe8 <_dtoa_r+0x2b8>)
 800aa54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa58:	f7f5 fdce 	bl	80005f8 <__aeabi_dmul>
 800aa5c:	a364      	add	r3, pc, #400	; (adr r3, 800abf0 <_dtoa_r+0x2c0>)
 800aa5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa62:	f7f5 fc13 	bl	800028c <__adddf3>
 800aa66:	4606      	mov	r6, r0
 800aa68:	4628      	mov	r0, r5
 800aa6a:	460f      	mov	r7, r1
 800aa6c:	f7f5 fd5a 	bl	8000524 <__aeabi_i2d>
 800aa70:	a361      	add	r3, pc, #388	; (adr r3, 800abf8 <_dtoa_r+0x2c8>)
 800aa72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa76:	f7f5 fdbf 	bl	80005f8 <__aeabi_dmul>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	4630      	mov	r0, r6
 800aa80:	4639      	mov	r1, r7
 800aa82:	f7f5 fc03 	bl	800028c <__adddf3>
 800aa86:	4606      	mov	r6, r0
 800aa88:	460f      	mov	r7, r1
 800aa8a:	f7f6 f865 	bl	8000b58 <__aeabi_d2iz>
 800aa8e:	2200      	movs	r2, #0
 800aa90:	9000      	str	r0, [sp, #0]
 800aa92:	2300      	movs	r3, #0
 800aa94:	4630      	mov	r0, r6
 800aa96:	4639      	mov	r1, r7
 800aa98:	f7f6 f820 	bl	8000adc <__aeabi_dcmplt>
 800aa9c:	b150      	cbz	r0, 800aab4 <_dtoa_r+0x184>
 800aa9e:	9800      	ldr	r0, [sp, #0]
 800aaa0:	f7f5 fd40 	bl	8000524 <__aeabi_i2d>
 800aaa4:	4632      	mov	r2, r6
 800aaa6:	463b      	mov	r3, r7
 800aaa8:	f7f6 f80e 	bl	8000ac8 <__aeabi_dcmpeq>
 800aaac:	b910      	cbnz	r0, 800aab4 <_dtoa_r+0x184>
 800aaae:	9b00      	ldr	r3, [sp, #0]
 800aab0:	3b01      	subs	r3, #1
 800aab2:	9300      	str	r3, [sp, #0]
 800aab4:	9b00      	ldr	r3, [sp, #0]
 800aab6:	2b16      	cmp	r3, #22
 800aab8:	d85a      	bhi.n	800ab70 <_dtoa_r+0x240>
 800aaba:	9a00      	ldr	r2, [sp, #0]
 800aabc:	4b57      	ldr	r3, [pc, #348]	; (800ac1c <_dtoa_r+0x2ec>)
 800aabe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac6:	ec51 0b19 	vmov	r0, r1, d9
 800aaca:	f7f6 f807 	bl	8000adc <__aeabi_dcmplt>
 800aace:	2800      	cmp	r0, #0
 800aad0:	d050      	beq.n	800ab74 <_dtoa_r+0x244>
 800aad2:	9b00      	ldr	r3, [sp, #0]
 800aad4:	3b01      	subs	r3, #1
 800aad6:	9300      	str	r3, [sp, #0]
 800aad8:	2300      	movs	r3, #0
 800aada:	930b      	str	r3, [sp, #44]	; 0x2c
 800aadc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aade:	1b5d      	subs	r5, r3, r5
 800aae0:	1e6b      	subs	r3, r5, #1
 800aae2:	9305      	str	r3, [sp, #20]
 800aae4:	bf45      	ittet	mi
 800aae6:	f1c5 0301 	rsbmi	r3, r5, #1
 800aaea:	9304      	strmi	r3, [sp, #16]
 800aaec:	2300      	movpl	r3, #0
 800aaee:	2300      	movmi	r3, #0
 800aaf0:	bf4c      	ite	mi
 800aaf2:	9305      	strmi	r3, [sp, #20]
 800aaf4:	9304      	strpl	r3, [sp, #16]
 800aaf6:	9b00      	ldr	r3, [sp, #0]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	db3d      	blt.n	800ab78 <_dtoa_r+0x248>
 800aafc:	9b05      	ldr	r3, [sp, #20]
 800aafe:	9a00      	ldr	r2, [sp, #0]
 800ab00:	920a      	str	r2, [sp, #40]	; 0x28
 800ab02:	4413      	add	r3, r2
 800ab04:	9305      	str	r3, [sp, #20]
 800ab06:	2300      	movs	r3, #0
 800ab08:	9307      	str	r3, [sp, #28]
 800ab0a:	9b06      	ldr	r3, [sp, #24]
 800ab0c:	2b09      	cmp	r3, #9
 800ab0e:	f200 8089 	bhi.w	800ac24 <_dtoa_r+0x2f4>
 800ab12:	2b05      	cmp	r3, #5
 800ab14:	bfc4      	itt	gt
 800ab16:	3b04      	subgt	r3, #4
 800ab18:	9306      	strgt	r3, [sp, #24]
 800ab1a:	9b06      	ldr	r3, [sp, #24]
 800ab1c:	f1a3 0302 	sub.w	r3, r3, #2
 800ab20:	bfcc      	ite	gt
 800ab22:	2500      	movgt	r5, #0
 800ab24:	2501      	movle	r5, #1
 800ab26:	2b03      	cmp	r3, #3
 800ab28:	f200 8087 	bhi.w	800ac3a <_dtoa_r+0x30a>
 800ab2c:	e8df f003 	tbb	[pc, r3]
 800ab30:	59383a2d 	.word	0x59383a2d
 800ab34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ab38:	441d      	add	r5, r3
 800ab3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ab3e:	2b20      	cmp	r3, #32
 800ab40:	bfc1      	itttt	gt
 800ab42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ab46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ab4a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ab4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ab52:	bfda      	itte	le
 800ab54:	f1c3 0320 	rsble	r3, r3, #32
 800ab58:	fa06 f003 	lslle.w	r0, r6, r3
 800ab5c:	4318      	orrgt	r0, r3
 800ab5e:	f7f5 fcd1 	bl	8000504 <__aeabi_ui2d>
 800ab62:	2301      	movs	r3, #1
 800ab64:	4606      	mov	r6, r0
 800ab66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ab6a:	3d01      	subs	r5, #1
 800ab6c:	930e      	str	r3, [sp, #56]	; 0x38
 800ab6e:	e76a      	b.n	800aa46 <_dtoa_r+0x116>
 800ab70:	2301      	movs	r3, #1
 800ab72:	e7b2      	b.n	800aada <_dtoa_r+0x1aa>
 800ab74:	900b      	str	r0, [sp, #44]	; 0x2c
 800ab76:	e7b1      	b.n	800aadc <_dtoa_r+0x1ac>
 800ab78:	9b04      	ldr	r3, [sp, #16]
 800ab7a:	9a00      	ldr	r2, [sp, #0]
 800ab7c:	1a9b      	subs	r3, r3, r2
 800ab7e:	9304      	str	r3, [sp, #16]
 800ab80:	4253      	negs	r3, r2
 800ab82:	9307      	str	r3, [sp, #28]
 800ab84:	2300      	movs	r3, #0
 800ab86:	930a      	str	r3, [sp, #40]	; 0x28
 800ab88:	e7bf      	b.n	800ab0a <_dtoa_r+0x1da>
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	9308      	str	r3, [sp, #32]
 800ab8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	dc55      	bgt.n	800ac40 <_dtoa_r+0x310>
 800ab94:	2301      	movs	r3, #1
 800ab96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	9209      	str	r2, [sp, #36]	; 0x24
 800ab9e:	e00c      	b.n	800abba <_dtoa_r+0x28a>
 800aba0:	2301      	movs	r3, #1
 800aba2:	e7f3      	b.n	800ab8c <_dtoa_r+0x25c>
 800aba4:	2300      	movs	r3, #0
 800aba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aba8:	9308      	str	r3, [sp, #32]
 800abaa:	9b00      	ldr	r3, [sp, #0]
 800abac:	4413      	add	r3, r2
 800abae:	9302      	str	r3, [sp, #8]
 800abb0:	3301      	adds	r3, #1
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	9303      	str	r3, [sp, #12]
 800abb6:	bfb8      	it	lt
 800abb8:	2301      	movlt	r3, #1
 800abba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800abbc:	2200      	movs	r2, #0
 800abbe:	6042      	str	r2, [r0, #4]
 800abc0:	2204      	movs	r2, #4
 800abc2:	f102 0614 	add.w	r6, r2, #20
 800abc6:	429e      	cmp	r6, r3
 800abc8:	6841      	ldr	r1, [r0, #4]
 800abca:	d93d      	bls.n	800ac48 <_dtoa_r+0x318>
 800abcc:	4620      	mov	r0, r4
 800abce:	f001 f83d 	bl	800bc4c <_Balloc>
 800abd2:	9001      	str	r0, [sp, #4]
 800abd4:	2800      	cmp	r0, #0
 800abd6:	d13b      	bne.n	800ac50 <_dtoa_r+0x320>
 800abd8:	4b11      	ldr	r3, [pc, #68]	; (800ac20 <_dtoa_r+0x2f0>)
 800abda:	4602      	mov	r2, r0
 800abdc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800abe0:	e6c0      	b.n	800a964 <_dtoa_r+0x34>
 800abe2:	2301      	movs	r3, #1
 800abe4:	e7df      	b.n	800aba6 <_dtoa_r+0x276>
 800abe6:	bf00      	nop
 800abe8:	636f4361 	.word	0x636f4361
 800abec:	3fd287a7 	.word	0x3fd287a7
 800abf0:	8b60c8b3 	.word	0x8b60c8b3
 800abf4:	3fc68a28 	.word	0x3fc68a28
 800abf8:	509f79fb 	.word	0x509f79fb
 800abfc:	3fd34413 	.word	0x3fd34413
 800ac00:	0800f80e 	.word	0x0800f80e
 800ac04:	0800f825 	.word	0x0800f825
 800ac08:	7ff00000 	.word	0x7ff00000
 800ac0c:	0800f80a 	.word	0x0800f80a
 800ac10:	0800f801 	.word	0x0800f801
 800ac14:	0800fa7a 	.word	0x0800fa7a
 800ac18:	3ff80000 	.word	0x3ff80000
 800ac1c:	0800f990 	.word	0x0800f990
 800ac20:	0800f880 	.word	0x0800f880
 800ac24:	2501      	movs	r5, #1
 800ac26:	2300      	movs	r3, #0
 800ac28:	9306      	str	r3, [sp, #24]
 800ac2a:	9508      	str	r5, [sp, #32]
 800ac2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ac34:	2200      	movs	r2, #0
 800ac36:	2312      	movs	r3, #18
 800ac38:	e7b0      	b.n	800ab9c <_dtoa_r+0x26c>
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	9308      	str	r3, [sp, #32]
 800ac3e:	e7f5      	b.n	800ac2c <_dtoa_r+0x2fc>
 800ac40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ac46:	e7b8      	b.n	800abba <_dtoa_r+0x28a>
 800ac48:	3101      	adds	r1, #1
 800ac4a:	6041      	str	r1, [r0, #4]
 800ac4c:	0052      	lsls	r2, r2, #1
 800ac4e:	e7b8      	b.n	800abc2 <_dtoa_r+0x292>
 800ac50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac52:	9a01      	ldr	r2, [sp, #4]
 800ac54:	601a      	str	r2, [r3, #0]
 800ac56:	9b03      	ldr	r3, [sp, #12]
 800ac58:	2b0e      	cmp	r3, #14
 800ac5a:	f200 809d 	bhi.w	800ad98 <_dtoa_r+0x468>
 800ac5e:	2d00      	cmp	r5, #0
 800ac60:	f000 809a 	beq.w	800ad98 <_dtoa_r+0x468>
 800ac64:	9b00      	ldr	r3, [sp, #0]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	dd32      	ble.n	800acd0 <_dtoa_r+0x3a0>
 800ac6a:	4ab7      	ldr	r2, [pc, #732]	; (800af48 <_dtoa_r+0x618>)
 800ac6c:	f003 030f 	and.w	r3, r3, #15
 800ac70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ac74:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac78:	9b00      	ldr	r3, [sp, #0]
 800ac7a:	05d8      	lsls	r0, r3, #23
 800ac7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ac80:	d516      	bpl.n	800acb0 <_dtoa_r+0x380>
 800ac82:	4bb2      	ldr	r3, [pc, #712]	; (800af4c <_dtoa_r+0x61c>)
 800ac84:	ec51 0b19 	vmov	r0, r1, d9
 800ac88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac8c:	f7f5 fdde 	bl	800084c <__aeabi_ddiv>
 800ac90:	f007 070f 	and.w	r7, r7, #15
 800ac94:	4682      	mov	sl, r0
 800ac96:	468b      	mov	fp, r1
 800ac98:	2503      	movs	r5, #3
 800ac9a:	4eac      	ldr	r6, [pc, #688]	; (800af4c <_dtoa_r+0x61c>)
 800ac9c:	b957      	cbnz	r7, 800acb4 <_dtoa_r+0x384>
 800ac9e:	4642      	mov	r2, r8
 800aca0:	464b      	mov	r3, r9
 800aca2:	4650      	mov	r0, sl
 800aca4:	4659      	mov	r1, fp
 800aca6:	f7f5 fdd1 	bl	800084c <__aeabi_ddiv>
 800acaa:	4682      	mov	sl, r0
 800acac:	468b      	mov	fp, r1
 800acae:	e028      	b.n	800ad02 <_dtoa_r+0x3d2>
 800acb0:	2502      	movs	r5, #2
 800acb2:	e7f2      	b.n	800ac9a <_dtoa_r+0x36a>
 800acb4:	07f9      	lsls	r1, r7, #31
 800acb6:	d508      	bpl.n	800acca <_dtoa_r+0x39a>
 800acb8:	4640      	mov	r0, r8
 800acba:	4649      	mov	r1, r9
 800acbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800acc0:	f7f5 fc9a 	bl	80005f8 <__aeabi_dmul>
 800acc4:	3501      	adds	r5, #1
 800acc6:	4680      	mov	r8, r0
 800acc8:	4689      	mov	r9, r1
 800acca:	107f      	asrs	r7, r7, #1
 800accc:	3608      	adds	r6, #8
 800acce:	e7e5      	b.n	800ac9c <_dtoa_r+0x36c>
 800acd0:	f000 809b 	beq.w	800ae0a <_dtoa_r+0x4da>
 800acd4:	9b00      	ldr	r3, [sp, #0]
 800acd6:	4f9d      	ldr	r7, [pc, #628]	; (800af4c <_dtoa_r+0x61c>)
 800acd8:	425e      	negs	r6, r3
 800acda:	4b9b      	ldr	r3, [pc, #620]	; (800af48 <_dtoa_r+0x618>)
 800acdc:	f006 020f 	and.w	r2, r6, #15
 800ace0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ace4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace8:	ec51 0b19 	vmov	r0, r1, d9
 800acec:	f7f5 fc84 	bl	80005f8 <__aeabi_dmul>
 800acf0:	1136      	asrs	r6, r6, #4
 800acf2:	4682      	mov	sl, r0
 800acf4:	468b      	mov	fp, r1
 800acf6:	2300      	movs	r3, #0
 800acf8:	2502      	movs	r5, #2
 800acfa:	2e00      	cmp	r6, #0
 800acfc:	d17a      	bne.n	800adf4 <_dtoa_r+0x4c4>
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d1d3      	bne.n	800acaa <_dtoa_r+0x37a>
 800ad02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f000 8082 	beq.w	800ae0e <_dtoa_r+0x4de>
 800ad0a:	4b91      	ldr	r3, [pc, #580]	; (800af50 <_dtoa_r+0x620>)
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	4650      	mov	r0, sl
 800ad10:	4659      	mov	r1, fp
 800ad12:	f7f5 fee3 	bl	8000adc <__aeabi_dcmplt>
 800ad16:	2800      	cmp	r0, #0
 800ad18:	d079      	beq.n	800ae0e <_dtoa_r+0x4de>
 800ad1a:	9b03      	ldr	r3, [sp, #12]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d076      	beq.n	800ae0e <_dtoa_r+0x4de>
 800ad20:	9b02      	ldr	r3, [sp, #8]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	dd36      	ble.n	800ad94 <_dtoa_r+0x464>
 800ad26:	9b00      	ldr	r3, [sp, #0]
 800ad28:	4650      	mov	r0, sl
 800ad2a:	4659      	mov	r1, fp
 800ad2c:	1e5f      	subs	r7, r3, #1
 800ad2e:	2200      	movs	r2, #0
 800ad30:	4b88      	ldr	r3, [pc, #544]	; (800af54 <_dtoa_r+0x624>)
 800ad32:	f7f5 fc61 	bl	80005f8 <__aeabi_dmul>
 800ad36:	9e02      	ldr	r6, [sp, #8]
 800ad38:	4682      	mov	sl, r0
 800ad3a:	468b      	mov	fp, r1
 800ad3c:	3501      	adds	r5, #1
 800ad3e:	4628      	mov	r0, r5
 800ad40:	f7f5 fbf0 	bl	8000524 <__aeabi_i2d>
 800ad44:	4652      	mov	r2, sl
 800ad46:	465b      	mov	r3, fp
 800ad48:	f7f5 fc56 	bl	80005f8 <__aeabi_dmul>
 800ad4c:	4b82      	ldr	r3, [pc, #520]	; (800af58 <_dtoa_r+0x628>)
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f7f5 fa9c 	bl	800028c <__adddf3>
 800ad54:	46d0      	mov	r8, sl
 800ad56:	46d9      	mov	r9, fp
 800ad58:	4682      	mov	sl, r0
 800ad5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ad5e:	2e00      	cmp	r6, #0
 800ad60:	d158      	bne.n	800ae14 <_dtoa_r+0x4e4>
 800ad62:	4b7e      	ldr	r3, [pc, #504]	; (800af5c <_dtoa_r+0x62c>)
 800ad64:	2200      	movs	r2, #0
 800ad66:	4640      	mov	r0, r8
 800ad68:	4649      	mov	r1, r9
 800ad6a:	f7f5 fa8d 	bl	8000288 <__aeabi_dsub>
 800ad6e:	4652      	mov	r2, sl
 800ad70:	465b      	mov	r3, fp
 800ad72:	4680      	mov	r8, r0
 800ad74:	4689      	mov	r9, r1
 800ad76:	f7f5 fecf 	bl	8000b18 <__aeabi_dcmpgt>
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	f040 8295 	bne.w	800b2aa <_dtoa_r+0x97a>
 800ad80:	4652      	mov	r2, sl
 800ad82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ad86:	4640      	mov	r0, r8
 800ad88:	4649      	mov	r1, r9
 800ad8a:	f7f5 fea7 	bl	8000adc <__aeabi_dcmplt>
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	f040 8289 	bne.w	800b2a6 <_dtoa_r+0x976>
 800ad94:	ec5b ab19 	vmov	sl, fp, d9
 800ad98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	f2c0 8148 	blt.w	800b030 <_dtoa_r+0x700>
 800ada0:	9a00      	ldr	r2, [sp, #0]
 800ada2:	2a0e      	cmp	r2, #14
 800ada4:	f300 8144 	bgt.w	800b030 <_dtoa_r+0x700>
 800ada8:	4b67      	ldr	r3, [pc, #412]	; (800af48 <_dtoa_r+0x618>)
 800adaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800adae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800adb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f280 80d5 	bge.w	800af64 <_dtoa_r+0x634>
 800adba:	9b03      	ldr	r3, [sp, #12]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	f300 80d1 	bgt.w	800af64 <_dtoa_r+0x634>
 800adc2:	f040 826f 	bne.w	800b2a4 <_dtoa_r+0x974>
 800adc6:	4b65      	ldr	r3, [pc, #404]	; (800af5c <_dtoa_r+0x62c>)
 800adc8:	2200      	movs	r2, #0
 800adca:	4640      	mov	r0, r8
 800adcc:	4649      	mov	r1, r9
 800adce:	f7f5 fc13 	bl	80005f8 <__aeabi_dmul>
 800add2:	4652      	mov	r2, sl
 800add4:	465b      	mov	r3, fp
 800add6:	f7f5 fe95 	bl	8000b04 <__aeabi_dcmpge>
 800adda:	9e03      	ldr	r6, [sp, #12]
 800addc:	4637      	mov	r7, r6
 800adde:	2800      	cmp	r0, #0
 800ade0:	f040 8245 	bne.w	800b26e <_dtoa_r+0x93e>
 800ade4:	9d01      	ldr	r5, [sp, #4]
 800ade6:	2331      	movs	r3, #49	; 0x31
 800ade8:	f805 3b01 	strb.w	r3, [r5], #1
 800adec:	9b00      	ldr	r3, [sp, #0]
 800adee:	3301      	adds	r3, #1
 800adf0:	9300      	str	r3, [sp, #0]
 800adf2:	e240      	b.n	800b276 <_dtoa_r+0x946>
 800adf4:	07f2      	lsls	r2, r6, #31
 800adf6:	d505      	bpl.n	800ae04 <_dtoa_r+0x4d4>
 800adf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adfc:	f7f5 fbfc 	bl	80005f8 <__aeabi_dmul>
 800ae00:	3501      	adds	r5, #1
 800ae02:	2301      	movs	r3, #1
 800ae04:	1076      	asrs	r6, r6, #1
 800ae06:	3708      	adds	r7, #8
 800ae08:	e777      	b.n	800acfa <_dtoa_r+0x3ca>
 800ae0a:	2502      	movs	r5, #2
 800ae0c:	e779      	b.n	800ad02 <_dtoa_r+0x3d2>
 800ae0e:	9f00      	ldr	r7, [sp, #0]
 800ae10:	9e03      	ldr	r6, [sp, #12]
 800ae12:	e794      	b.n	800ad3e <_dtoa_r+0x40e>
 800ae14:	9901      	ldr	r1, [sp, #4]
 800ae16:	4b4c      	ldr	r3, [pc, #304]	; (800af48 <_dtoa_r+0x618>)
 800ae18:	4431      	add	r1, r6
 800ae1a:	910d      	str	r1, [sp, #52]	; 0x34
 800ae1c:	9908      	ldr	r1, [sp, #32]
 800ae1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ae22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ae26:	2900      	cmp	r1, #0
 800ae28:	d043      	beq.n	800aeb2 <_dtoa_r+0x582>
 800ae2a:	494d      	ldr	r1, [pc, #308]	; (800af60 <_dtoa_r+0x630>)
 800ae2c:	2000      	movs	r0, #0
 800ae2e:	f7f5 fd0d 	bl	800084c <__aeabi_ddiv>
 800ae32:	4652      	mov	r2, sl
 800ae34:	465b      	mov	r3, fp
 800ae36:	f7f5 fa27 	bl	8000288 <__aeabi_dsub>
 800ae3a:	9d01      	ldr	r5, [sp, #4]
 800ae3c:	4682      	mov	sl, r0
 800ae3e:	468b      	mov	fp, r1
 800ae40:	4649      	mov	r1, r9
 800ae42:	4640      	mov	r0, r8
 800ae44:	f7f5 fe88 	bl	8000b58 <__aeabi_d2iz>
 800ae48:	4606      	mov	r6, r0
 800ae4a:	f7f5 fb6b 	bl	8000524 <__aeabi_i2d>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	460b      	mov	r3, r1
 800ae52:	4640      	mov	r0, r8
 800ae54:	4649      	mov	r1, r9
 800ae56:	f7f5 fa17 	bl	8000288 <__aeabi_dsub>
 800ae5a:	3630      	adds	r6, #48	; 0x30
 800ae5c:	f805 6b01 	strb.w	r6, [r5], #1
 800ae60:	4652      	mov	r2, sl
 800ae62:	465b      	mov	r3, fp
 800ae64:	4680      	mov	r8, r0
 800ae66:	4689      	mov	r9, r1
 800ae68:	f7f5 fe38 	bl	8000adc <__aeabi_dcmplt>
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	d163      	bne.n	800af38 <_dtoa_r+0x608>
 800ae70:	4642      	mov	r2, r8
 800ae72:	464b      	mov	r3, r9
 800ae74:	4936      	ldr	r1, [pc, #216]	; (800af50 <_dtoa_r+0x620>)
 800ae76:	2000      	movs	r0, #0
 800ae78:	f7f5 fa06 	bl	8000288 <__aeabi_dsub>
 800ae7c:	4652      	mov	r2, sl
 800ae7e:	465b      	mov	r3, fp
 800ae80:	f7f5 fe2c 	bl	8000adc <__aeabi_dcmplt>
 800ae84:	2800      	cmp	r0, #0
 800ae86:	f040 80b5 	bne.w	800aff4 <_dtoa_r+0x6c4>
 800ae8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae8c:	429d      	cmp	r5, r3
 800ae8e:	d081      	beq.n	800ad94 <_dtoa_r+0x464>
 800ae90:	4b30      	ldr	r3, [pc, #192]	; (800af54 <_dtoa_r+0x624>)
 800ae92:	2200      	movs	r2, #0
 800ae94:	4650      	mov	r0, sl
 800ae96:	4659      	mov	r1, fp
 800ae98:	f7f5 fbae 	bl	80005f8 <__aeabi_dmul>
 800ae9c:	4b2d      	ldr	r3, [pc, #180]	; (800af54 <_dtoa_r+0x624>)
 800ae9e:	4682      	mov	sl, r0
 800aea0:	468b      	mov	fp, r1
 800aea2:	4640      	mov	r0, r8
 800aea4:	4649      	mov	r1, r9
 800aea6:	2200      	movs	r2, #0
 800aea8:	f7f5 fba6 	bl	80005f8 <__aeabi_dmul>
 800aeac:	4680      	mov	r8, r0
 800aeae:	4689      	mov	r9, r1
 800aeb0:	e7c6      	b.n	800ae40 <_dtoa_r+0x510>
 800aeb2:	4650      	mov	r0, sl
 800aeb4:	4659      	mov	r1, fp
 800aeb6:	f7f5 fb9f 	bl	80005f8 <__aeabi_dmul>
 800aeba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aebc:	9d01      	ldr	r5, [sp, #4]
 800aebe:	930f      	str	r3, [sp, #60]	; 0x3c
 800aec0:	4682      	mov	sl, r0
 800aec2:	468b      	mov	fp, r1
 800aec4:	4649      	mov	r1, r9
 800aec6:	4640      	mov	r0, r8
 800aec8:	f7f5 fe46 	bl	8000b58 <__aeabi_d2iz>
 800aecc:	4606      	mov	r6, r0
 800aece:	f7f5 fb29 	bl	8000524 <__aeabi_i2d>
 800aed2:	3630      	adds	r6, #48	; 0x30
 800aed4:	4602      	mov	r2, r0
 800aed6:	460b      	mov	r3, r1
 800aed8:	4640      	mov	r0, r8
 800aeda:	4649      	mov	r1, r9
 800aedc:	f7f5 f9d4 	bl	8000288 <__aeabi_dsub>
 800aee0:	f805 6b01 	strb.w	r6, [r5], #1
 800aee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aee6:	429d      	cmp	r5, r3
 800aee8:	4680      	mov	r8, r0
 800aeea:	4689      	mov	r9, r1
 800aeec:	f04f 0200 	mov.w	r2, #0
 800aef0:	d124      	bne.n	800af3c <_dtoa_r+0x60c>
 800aef2:	4b1b      	ldr	r3, [pc, #108]	; (800af60 <_dtoa_r+0x630>)
 800aef4:	4650      	mov	r0, sl
 800aef6:	4659      	mov	r1, fp
 800aef8:	f7f5 f9c8 	bl	800028c <__adddf3>
 800aefc:	4602      	mov	r2, r0
 800aefe:	460b      	mov	r3, r1
 800af00:	4640      	mov	r0, r8
 800af02:	4649      	mov	r1, r9
 800af04:	f7f5 fe08 	bl	8000b18 <__aeabi_dcmpgt>
 800af08:	2800      	cmp	r0, #0
 800af0a:	d173      	bne.n	800aff4 <_dtoa_r+0x6c4>
 800af0c:	4652      	mov	r2, sl
 800af0e:	465b      	mov	r3, fp
 800af10:	4913      	ldr	r1, [pc, #76]	; (800af60 <_dtoa_r+0x630>)
 800af12:	2000      	movs	r0, #0
 800af14:	f7f5 f9b8 	bl	8000288 <__aeabi_dsub>
 800af18:	4602      	mov	r2, r0
 800af1a:	460b      	mov	r3, r1
 800af1c:	4640      	mov	r0, r8
 800af1e:	4649      	mov	r1, r9
 800af20:	f7f5 fddc 	bl	8000adc <__aeabi_dcmplt>
 800af24:	2800      	cmp	r0, #0
 800af26:	f43f af35 	beq.w	800ad94 <_dtoa_r+0x464>
 800af2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800af2c:	1e6b      	subs	r3, r5, #1
 800af2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800af30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800af34:	2b30      	cmp	r3, #48	; 0x30
 800af36:	d0f8      	beq.n	800af2a <_dtoa_r+0x5fa>
 800af38:	9700      	str	r7, [sp, #0]
 800af3a:	e049      	b.n	800afd0 <_dtoa_r+0x6a0>
 800af3c:	4b05      	ldr	r3, [pc, #20]	; (800af54 <_dtoa_r+0x624>)
 800af3e:	f7f5 fb5b 	bl	80005f8 <__aeabi_dmul>
 800af42:	4680      	mov	r8, r0
 800af44:	4689      	mov	r9, r1
 800af46:	e7bd      	b.n	800aec4 <_dtoa_r+0x594>
 800af48:	0800f990 	.word	0x0800f990
 800af4c:	0800f968 	.word	0x0800f968
 800af50:	3ff00000 	.word	0x3ff00000
 800af54:	40240000 	.word	0x40240000
 800af58:	401c0000 	.word	0x401c0000
 800af5c:	40140000 	.word	0x40140000
 800af60:	3fe00000 	.word	0x3fe00000
 800af64:	9d01      	ldr	r5, [sp, #4]
 800af66:	4656      	mov	r6, sl
 800af68:	465f      	mov	r7, fp
 800af6a:	4642      	mov	r2, r8
 800af6c:	464b      	mov	r3, r9
 800af6e:	4630      	mov	r0, r6
 800af70:	4639      	mov	r1, r7
 800af72:	f7f5 fc6b 	bl	800084c <__aeabi_ddiv>
 800af76:	f7f5 fdef 	bl	8000b58 <__aeabi_d2iz>
 800af7a:	4682      	mov	sl, r0
 800af7c:	f7f5 fad2 	bl	8000524 <__aeabi_i2d>
 800af80:	4642      	mov	r2, r8
 800af82:	464b      	mov	r3, r9
 800af84:	f7f5 fb38 	bl	80005f8 <__aeabi_dmul>
 800af88:	4602      	mov	r2, r0
 800af8a:	460b      	mov	r3, r1
 800af8c:	4630      	mov	r0, r6
 800af8e:	4639      	mov	r1, r7
 800af90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800af94:	f7f5 f978 	bl	8000288 <__aeabi_dsub>
 800af98:	f805 6b01 	strb.w	r6, [r5], #1
 800af9c:	9e01      	ldr	r6, [sp, #4]
 800af9e:	9f03      	ldr	r7, [sp, #12]
 800afa0:	1bae      	subs	r6, r5, r6
 800afa2:	42b7      	cmp	r7, r6
 800afa4:	4602      	mov	r2, r0
 800afa6:	460b      	mov	r3, r1
 800afa8:	d135      	bne.n	800b016 <_dtoa_r+0x6e6>
 800afaa:	f7f5 f96f 	bl	800028c <__adddf3>
 800afae:	4642      	mov	r2, r8
 800afb0:	464b      	mov	r3, r9
 800afb2:	4606      	mov	r6, r0
 800afb4:	460f      	mov	r7, r1
 800afb6:	f7f5 fdaf 	bl	8000b18 <__aeabi_dcmpgt>
 800afba:	b9d0      	cbnz	r0, 800aff2 <_dtoa_r+0x6c2>
 800afbc:	4642      	mov	r2, r8
 800afbe:	464b      	mov	r3, r9
 800afc0:	4630      	mov	r0, r6
 800afc2:	4639      	mov	r1, r7
 800afc4:	f7f5 fd80 	bl	8000ac8 <__aeabi_dcmpeq>
 800afc8:	b110      	cbz	r0, 800afd0 <_dtoa_r+0x6a0>
 800afca:	f01a 0f01 	tst.w	sl, #1
 800afce:	d110      	bne.n	800aff2 <_dtoa_r+0x6c2>
 800afd0:	4620      	mov	r0, r4
 800afd2:	ee18 1a10 	vmov	r1, s16
 800afd6:	f000 fe79 	bl	800bccc <_Bfree>
 800afda:	2300      	movs	r3, #0
 800afdc:	9800      	ldr	r0, [sp, #0]
 800afde:	702b      	strb	r3, [r5, #0]
 800afe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afe2:	3001      	adds	r0, #1
 800afe4:	6018      	str	r0, [r3, #0]
 800afe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afe8:	2b00      	cmp	r3, #0
 800afea:	f43f acf1 	beq.w	800a9d0 <_dtoa_r+0xa0>
 800afee:	601d      	str	r5, [r3, #0]
 800aff0:	e4ee      	b.n	800a9d0 <_dtoa_r+0xa0>
 800aff2:	9f00      	ldr	r7, [sp, #0]
 800aff4:	462b      	mov	r3, r5
 800aff6:	461d      	mov	r5, r3
 800aff8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800affc:	2a39      	cmp	r2, #57	; 0x39
 800affe:	d106      	bne.n	800b00e <_dtoa_r+0x6de>
 800b000:	9a01      	ldr	r2, [sp, #4]
 800b002:	429a      	cmp	r2, r3
 800b004:	d1f7      	bne.n	800aff6 <_dtoa_r+0x6c6>
 800b006:	9901      	ldr	r1, [sp, #4]
 800b008:	2230      	movs	r2, #48	; 0x30
 800b00a:	3701      	adds	r7, #1
 800b00c:	700a      	strb	r2, [r1, #0]
 800b00e:	781a      	ldrb	r2, [r3, #0]
 800b010:	3201      	adds	r2, #1
 800b012:	701a      	strb	r2, [r3, #0]
 800b014:	e790      	b.n	800af38 <_dtoa_r+0x608>
 800b016:	4ba6      	ldr	r3, [pc, #664]	; (800b2b0 <_dtoa_r+0x980>)
 800b018:	2200      	movs	r2, #0
 800b01a:	f7f5 faed 	bl	80005f8 <__aeabi_dmul>
 800b01e:	2200      	movs	r2, #0
 800b020:	2300      	movs	r3, #0
 800b022:	4606      	mov	r6, r0
 800b024:	460f      	mov	r7, r1
 800b026:	f7f5 fd4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b02a:	2800      	cmp	r0, #0
 800b02c:	d09d      	beq.n	800af6a <_dtoa_r+0x63a>
 800b02e:	e7cf      	b.n	800afd0 <_dtoa_r+0x6a0>
 800b030:	9a08      	ldr	r2, [sp, #32]
 800b032:	2a00      	cmp	r2, #0
 800b034:	f000 80d7 	beq.w	800b1e6 <_dtoa_r+0x8b6>
 800b038:	9a06      	ldr	r2, [sp, #24]
 800b03a:	2a01      	cmp	r2, #1
 800b03c:	f300 80ba 	bgt.w	800b1b4 <_dtoa_r+0x884>
 800b040:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b042:	2a00      	cmp	r2, #0
 800b044:	f000 80b2 	beq.w	800b1ac <_dtoa_r+0x87c>
 800b048:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b04c:	9e07      	ldr	r6, [sp, #28]
 800b04e:	9d04      	ldr	r5, [sp, #16]
 800b050:	9a04      	ldr	r2, [sp, #16]
 800b052:	441a      	add	r2, r3
 800b054:	9204      	str	r2, [sp, #16]
 800b056:	9a05      	ldr	r2, [sp, #20]
 800b058:	2101      	movs	r1, #1
 800b05a:	441a      	add	r2, r3
 800b05c:	4620      	mov	r0, r4
 800b05e:	9205      	str	r2, [sp, #20]
 800b060:	f000 ff36 	bl	800bed0 <__i2b>
 800b064:	4607      	mov	r7, r0
 800b066:	2d00      	cmp	r5, #0
 800b068:	dd0c      	ble.n	800b084 <_dtoa_r+0x754>
 800b06a:	9b05      	ldr	r3, [sp, #20]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	dd09      	ble.n	800b084 <_dtoa_r+0x754>
 800b070:	42ab      	cmp	r3, r5
 800b072:	9a04      	ldr	r2, [sp, #16]
 800b074:	bfa8      	it	ge
 800b076:	462b      	movge	r3, r5
 800b078:	1ad2      	subs	r2, r2, r3
 800b07a:	9204      	str	r2, [sp, #16]
 800b07c:	9a05      	ldr	r2, [sp, #20]
 800b07e:	1aed      	subs	r5, r5, r3
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	9305      	str	r3, [sp, #20]
 800b084:	9b07      	ldr	r3, [sp, #28]
 800b086:	b31b      	cbz	r3, 800b0d0 <_dtoa_r+0x7a0>
 800b088:	9b08      	ldr	r3, [sp, #32]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	f000 80af 	beq.w	800b1ee <_dtoa_r+0x8be>
 800b090:	2e00      	cmp	r6, #0
 800b092:	dd13      	ble.n	800b0bc <_dtoa_r+0x78c>
 800b094:	4639      	mov	r1, r7
 800b096:	4632      	mov	r2, r6
 800b098:	4620      	mov	r0, r4
 800b09a:	f000 ffd9 	bl	800c050 <__pow5mult>
 800b09e:	ee18 2a10 	vmov	r2, s16
 800b0a2:	4601      	mov	r1, r0
 800b0a4:	4607      	mov	r7, r0
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f000 ff28 	bl	800befc <__multiply>
 800b0ac:	ee18 1a10 	vmov	r1, s16
 800b0b0:	4680      	mov	r8, r0
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	f000 fe0a 	bl	800bccc <_Bfree>
 800b0b8:	ee08 8a10 	vmov	s16, r8
 800b0bc:	9b07      	ldr	r3, [sp, #28]
 800b0be:	1b9a      	subs	r2, r3, r6
 800b0c0:	d006      	beq.n	800b0d0 <_dtoa_r+0x7a0>
 800b0c2:	ee18 1a10 	vmov	r1, s16
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	f000 ffc2 	bl	800c050 <__pow5mult>
 800b0cc:	ee08 0a10 	vmov	s16, r0
 800b0d0:	2101      	movs	r1, #1
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f000 fefc 	bl	800bed0 <__i2b>
 800b0d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	4606      	mov	r6, r0
 800b0de:	f340 8088 	ble.w	800b1f2 <_dtoa_r+0x8c2>
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	4601      	mov	r1, r0
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	f000 ffb2 	bl	800c050 <__pow5mult>
 800b0ec:	9b06      	ldr	r3, [sp, #24]
 800b0ee:	2b01      	cmp	r3, #1
 800b0f0:	4606      	mov	r6, r0
 800b0f2:	f340 8081 	ble.w	800b1f8 <_dtoa_r+0x8c8>
 800b0f6:	f04f 0800 	mov.w	r8, #0
 800b0fa:	6933      	ldr	r3, [r6, #16]
 800b0fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b100:	6918      	ldr	r0, [r3, #16]
 800b102:	f000 fe95 	bl	800be30 <__hi0bits>
 800b106:	f1c0 0020 	rsb	r0, r0, #32
 800b10a:	9b05      	ldr	r3, [sp, #20]
 800b10c:	4418      	add	r0, r3
 800b10e:	f010 001f 	ands.w	r0, r0, #31
 800b112:	f000 8092 	beq.w	800b23a <_dtoa_r+0x90a>
 800b116:	f1c0 0320 	rsb	r3, r0, #32
 800b11a:	2b04      	cmp	r3, #4
 800b11c:	f340 808a 	ble.w	800b234 <_dtoa_r+0x904>
 800b120:	f1c0 001c 	rsb	r0, r0, #28
 800b124:	9b04      	ldr	r3, [sp, #16]
 800b126:	4403      	add	r3, r0
 800b128:	9304      	str	r3, [sp, #16]
 800b12a:	9b05      	ldr	r3, [sp, #20]
 800b12c:	4403      	add	r3, r0
 800b12e:	4405      	add	r5, r0
 800b130:	9305      	str	r3, [sp, #20]
 800b132:	9b04      	ldr	r3, [sp, #16]
 800b134:	2b00      	cmp	r3, #0
 800b136:	dd07      	ble.n	800b148 <_dtoa_r+0x818>
 800b138:	ee18 1a10 	vmov	r1, s16
 800b13c:	461a      	mov	r2, r3
 800b13e:	4620      	mov	r0, r4
 800b140:	f000 ffe0 	bl	800c104 <__lshift>
 800b144:	ee08 0a10 	vmov	s16, r0
 800b148:	9b05      	ldr	r3, [sp, #20]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	dd05      	ble.n	800b15a <_dtoa_r+0x82a>
 800b14e:	4631      	mov	r1, r6
 800b150:	461a      	mov	r2, r3
 800b152:	4620      	mov	r0, r4
 800b154:	f000 ffd6 	bl	800c104 <__lshift>
 800b158:	4606      	mov	r6, r0
 800b15a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d06e      	beq.n	800b23e <_dtoa_r+0x90e>
 800b160:	ee18 0a10 	vmov	r0, s16
 800b164:	4631      	mov	r1, r6
 800b166:	f001 f83d 	bl	800c1e4 <__mcmp>
 800b16a:	2800      	cmp	r0, #0
 800b16c:	da67      	bge.n	800b23e <_dtoa_r+0x90e>
 800b16e:	9b00      	ldr	r3, [sp, #0]
 800b170:	3b01      	subs	r3, #1
 800b172:	ee18 1a10 	vmov	r1, s16
 800b176:	9300      	str	r3, [sp, #0]
 800b178:	220a      	movs	r2, #10
 800b17a:	2300      	movs	r3, #0
 800b17c:	4620      	mov	r0, r4
 800b17e:	f000 fdc7 	bl	800bd10 <__multadd>
 800b182:	9b08      	ldr	r3, [sp, #32]
 800b184:	ee08 0a10 	vmov	s16, r0
 800b188:	2b00      	cmp	r3, #0
 800b18a:	f000 81b1 	beq.w	800b4f0 <_dtoa_r+0xbc0>
 800b18e:	2300      	movs	r3, #0
 800b190:	4639      	mov	r1, r7
 800b192:	220a      	movs	r2, #10
 800b194:	4620      	mov	r0, r4
 800b196:	f000 fdbb 	bl	800bd10 <__multadd>
 800b19a:	9b02      	ldr	r3, [sp, #8]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	4607      	mov	r7, r0
 800b1a0:	f300 808e 	bgt.w	800b2c0 <_dtoa_r+0x990>
 800b1a4:	9b06      	ldr	r3, [sp, #24]
 800b1a6:	2b02      	cmp	r3, #2
 800b1a8:	dc51      	bgt.n	800b24e <_dtoa_r+0x91e>
 800b1aa:	e089      	b.n	800b2c0 <_dtoa_r+0x990>
 800b1ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b1b2:	e74b      	b.n	800b04c <_dtoa_r+0x71c>
 800b1b4:	9b03      	ldr	r3, [sp, #12]
 800b1b6:	1e5e      	subs	r6, r3, #1
 800b1b8:	9b07      	ldr	r3, [sp, #28]
 800b1ba:	42b3      	cmp	r3, r6
 800b1bc:	bfbf      	itttt	lt
 800b1be:	9b07      	ldrlt	r3, [sp, #28]
 800b1c0:	9607      	strlt	r6, [sp, #28]
 800b1c2:	1af2      	sublt	r2, r6, r3
 800b1c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b1c6:	bfb6      	itet	lt
 800b1c8:	189b      	addlt	r3, r3, r2
 800b1ca:	1b9e      	subge	r6, r3, r6
 800b1cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b1ce:	9b03      	ldr	r3, [sp, #12]
 800b1d0:	bfb8      	it	lt
 800b1d2:	2600      	movlt	r6, #0
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	bfb7      	itett	lt
 800b1d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b1dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b1e0:	1a9d      	sublt	r5, r3, r2
 800b1e2:	2300      	movlt	r3, #0
 800b1e4:	e734      	b.n	800b050 <_dtoa_r+0x720>
 800b1e6:	9e07      	ldr	r6, [sp, #28]
 800b1e8:	9d04      	ldr	r5, [sp, #16]
 800b1ea:	9f08      	ldr	r7, [sp, #32]
 800b1ec:	e73b      	b.n	800b066 <_dtoa_r+0x736>
 800b1ee:	9a07      	ldr	r2, [sp, #28]
 800b1f0:	e767      	b.n	800b0c2 <_dtoa_r+0x792>
 800b1f2:	9b06      	ldr	r3, [sp, #24]
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	dc18      	bgt.n	800b22a <_dtoa_r+0x8fa>
 800b1f8:	f1ba 0f00 	cmp.w	sl, #0
 800b1fc:	d115      	bne.n	800b22a <_dtoa_r+0x8fa>
 800b1fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b202:	b993      	cbnz	r3, 800b22a <_dtoa_r+0x8fa>
 800b204:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b208:	0d1b      	lsrs	r3, r3, #20
 800b20a:	051b      	lsls	r3, r3, #20
 800b20c:	b183      	cbz	r3, 800b230 <_dtoa_r+0x900>
 800b20e:	9b04      	ldr	r3, [sp, #16]
 800b210:	3301      	adds	r3, #1
 800b212:	9304      	str	r3, [sp, #16]
 800b214:	9b05      	ldr	r3, [sp, #20]
 800b216:	3301      	adds	r3, #1
 800b218:	9305      	str	r3, [sp, #20]
 800b21a:	f04f 0801 	mov.w	r8, #1
 800b21e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b220:	2b00      	cmp	r3, #0
 800b222:	f47f af6a 	bne.w	800b0fa <_dtoa_r+0x7ca>
 800b226:	2001      	movs	r0, #1
 800b228:	e76f      	b.n	800b10a <_dtoa_r+0x7da>
 800b22a:	f04f 0800 	mov.w	r8, #0
 800b22e:	e7f6      	b.n	800b21e <_dtoa_r+0x8ee>
 800b230:	4698      	mov	r8, r3
 800b232:	e7f4      	b.n	800b21e <_dtoa_r+0x8ee>
 800b234:	f43f af7d 	beq.w	800b132 <_dtoa_r+0x802>
 800b238:	4618      	mov	r0, r3
 800b23a:	301c      	adds	r0, #28
 800b23c:	e772      	b.n	800b124 <_dtoa_r+0x7f4>
 800b23e:	9b03      	ldr	r3, [sp, #12]
 800b240:	2b00      	cmp	r3, #0
 800b242:	dc37      	bgt.n	800b2b4 <_dtoa_r+0x984>
 800b244:	9b06      	ldr	r3, [sp, #24]
 800b246:	2b02      	cmp	r3, #2
 800b248:	dd34      	ble.n	800b2b4 <_dtoa_r+0x984>
 800b24a:	9b03      	ldr	r3, [sp, #12]
 800b24c:	9302      	str	r3, [sp, #8]
 800b24e:	9b02      	ldr	r3, [sp, #8]
 800b250:	b96b      	cbnz	r3, 800b26e <_dtoa_r+0x93e>
 800b252:	4631      	mov	r1, r6
 800b254:	2205      	movs	r2, #5
 800b256:	4620      	mov	r0, r4
 800b258:	f000 fd5a 	bl	800bd10 <__multadd>
 800b25c:	4601      	mov	r1, r0
 800b25e:	4606      	mov	r6, r0
 800b260:	ee18 0a10 	vmov	r0, s16
 800b264:	f000 ffbe 	bl	800c1e4 <__mcmp>
 800b268:	2800      	cmp	r0, #0
 800b26a:	f73f adbb 	bgt.w	800ade4 <_dtoa_r+0x4b4>
 800b26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b270:	9d01      	ldr	r5, [sp, #4]
 800b272:	43db      	mvns	r3, r3
 800b274:	9300      	str	r3, [sp, #0]
 800b276:	f04f 0800 	mov.w	r8, #0
 800b27a:	4631      	mov	r1, r6
 800b27c:	4620      	mov	r0, r4
 800b27e:	f000 fd25 	bl	800bccc <_Bfree>
 800b282:	2f00      	cmp	r7, #0
 800b284:	f43f aea4 	beq.w	800afd0 <_dtoa_r+0x6a0>
 800b288:	f1b8 0f00 	cmp.w	r8, #0
 800b28c:	d005      	beq.n	800b29a <_dtoa_r+0x96a>
 800b28e:	45b8      	cmp	r8, r7
 800b290:	d003      	beq.n	800b29a <_dtoa_r+0x96a>
 800b292:	4641      	mov	r1, r8
 800b294:	4620      	mov	r0, r4
 800b296:	f000 fd19 	bl	800bccc <_Bfree>
 800b29a:	4639      	mov	r1, r7
 800b29c:	4620      	mov	r0, r4
 800b29e:	f000 fd15 	bl	800bccc <_Bfree>
 800b2a2:	e695      	b.n	800afd0 <_dtoa_r+0x6a0>
 800b2a4:	2600      	movs	r6, #0
 800b2a6:	4637      	mov	r7, r6
 800b2a8:	e7e1      	b.n	800b26e <_dtoa_r+0x93e>
 800b2aa:	9700      	str	r7, [sp, #0]
 800b2ac:	4637      	mov	r7, r6
 800b2ae:	e599      	b.n	800ade4 <_dtoa_r+0x4b4>
 800b2b0:	40240000 	.word	0x40240000
 800b2b4:	9b08      	ldr	r3, [sp, #32]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	f000 80ca 	beq.w	800b450 <_dtoa_r+0xb20>
 800b2bc:	9b03      	ldr	r3, [sp, #12]
 800b2be:	9302      	str	r3, [sp, #8]
 800b2c0:	2d00      	cmp	r5, #0
 800b2c2:	dd05      	ble.n	800b2d0 <_dtoa_r+0x9a0>
 800b2c4:	4639      	mov	r1, r7
 800b2c6:	462a      	mov	r2, r5
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	f000 ff1b 	bl	800c104 <__lshift>
 800b2ce:	4607      	mov	r7, r0
 800b2d0:	f1b8 0f00 	cmp.w	r8, #0
 800b2d4:	d05b      	beq.n	800b38e <_dtoa_r+0xa5e>
 800b2d6:	6879      	ldr	r1, [r7, #4]
 800b2d8:	4620      	mov	r0, r4
 800b2da:	f000 fcb7 	bl	800bc4c <_Balloc>
 800b2de:	4605      	mov	r5, r0
 800b2e0:	b928      	cbnz	r0, 800b2ee <_dtoa_r+0x9be>
 800b2e2:	4b87      	ldr	r3, [pc, #540]	; (800b500 <_dtoa_r+0xbd0>)
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b2ea:	f7ff bb3b 	b.w	800a964 <_dtoa_r+0x34>
 800b2ee:	693a      	ldr	r2, [r7, #16]
 800b2f0:	3202      	adds	r2, #2
 800b2f2:	0092      	lsls	r2, r2, #2
 800b2f4:	f107 010c 	add.w	r1, r7, #12
 800b2f8:	300c      	adds	r0, #12
 800b2fa:	f7fd fc89 	bl	8008c10 <memcpy>
 800b2fe:	2201      	movs	r2, #1
 800b300:	4629      	mov	r1, r5
 800b302:	4620      	mov	r0, r4
 800b304:	f000 fefe 	bl	800c104 <__lshift>
 800b308:	9b01      	ldr	r3, [sp, #4]
 800b30a:	f103 0901 	add.w	r9, r3, #1
 800b30e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b312:	4413      	add	r3, r2
 800b314:	9305      	str	r3, [sp, #20]
 800b316:	f00a 0301 	and.w	r3, sl, #1
 800b31a:	46b8      	mov	r8, r7
 800b31c:	9304      	str	r3, [sp, #16]
 800b31e:	4607      	mov	r7, r0
 800b320:	4631      	mov	r1, r6
 800b322:	ee18 0a10 	vmov	r0, s16
 800b326:	f7ff fa75 	bl	800a814 <quorem>
 800b32a:	4641      	mov	r1, r8
 800b32c:	9002      	str	r0, [sp, #8]
 800b32e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b332:	ee18 0a10 	vmov	r0, s16
 800b336:	f000 ff55 	bl	800c1e4 <__mcmp>
 800b33a:	463a      	mov	r2, r7
 800b33c:	9003      	str	r0, [sp, #12]
 800b33e:	4631      	mov	r1, r6
 800b340:	4620      	mov	r0, r4
 800b342:	f000 ff6b 	bl	800c21c <__mdiff>
 800b346:	68c2      	ldr	r2, [r0, #12]
 800b348:	f109 3bff 	add.w	fp, r9, #4294967295
 800b34c:	4605      	mov	r5, r0
 800b34e:	bb02      	cbnz	r2, 800b392 <_dtoa_r+0xa62>
 800b350:	4601      	mov	r1, r0
 800b352:	ee18 0a10 	vmov	r0, s16
 800b356:	f000 ff45 	bl	800c1e4 <__mcmp>
 800b35a:	4602      	mov	r2, r0
 800b35c:	4629      	mov	r1, r5
 800b35e:	4620      	mov	r0, r4
 800b360:	9207      	str	r2, [sp, #28]
 800b362:	f000 fcb3 	bl	800bccc <_Bfree>
 800b366:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b36a:	ea43 0102 	orr.w	r1, r3, r2
 800b36e:	9b04      	ldr	r3, [sp, #16]
 800b370:	430b      	orrs	r3, r1
 800b372:	464d      	mov	r5, r9
 800b374:	d10f      	bne.n	800b396 <_dtoa_r+0xa66>
 800b376:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b37a:	d02a      	beq.n	800b3d2 <_dtoa_r+0xaa2>
 800b37c:	9b03      	ldr	r3, [sp, #12]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	dd02      	ble.n	800b388 <_dtoa_r+0xa58>
 800b382:	9b02      	ldr	r3, [sp, #8]
 800b384:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b388:	f88b a000 	strb.w	sl, [fp]
 800b38c:	e775      	b.n	800b27a <_dtoa_r+0x94a>
 800b38e:	4638      	mov	r0, r7
 800b390:	e7ba      	b.n	800b308 <_dtoa_r+0x9d8>
 800b392:	2201      	movs	r2, #1
 800b394:	e7e2      	b.n	800b35c <_dtoa_r+0xa2c>
 800b396:	9b03      	ldr	r3, [sp, #12]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	db04      	blt.n	800b3a6 <_dtoa_r+0xa76>
 800b39c:	9906      	ldr	r1, [sp, #24]
 800b39e:	430b      	orrs	r3, r1
 800b3a0:	9904      	ldr	r1, [sp, #16]
 800b3a2:	430b      	orrs	r3, r1
 800b3a4:	d122      	bne.n	800b3ec <_dtoa_r+0xabc>
 800b3a6:	2a00      	cmp	r2, #0
 800b3a8:	ddee      	ble.n	800b388 <_dtoa_r+0xa58>
 800b3aa:	ee18 1a10 	vmov	r1, s16
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	f000 fea7 	bl	800c104 <__lshift>
 800b3b6:	4631      	mov	r1, r6
 800b3b8:	ee08 0a10 	vmov	s16, r0
 800b3bc:	f000 ff12 	bl	800c1e4 <__mcmp>
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	dc03      	bgt.n	800b3cc <_dtoa_r+0xa9c>
 800b3c4:	d1e0      	bne.n	800b388 <_dtoa_r+0xa58>
 800b3c6:	f01a 0f01 	tst.w	sl, #1
 800b3ca:	d0dd      	beq.n	800b388 <_dtoa_r+0xa58>
 800b3cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b3d0:	d1d7      	bne.n	800b382 <_dtoa_r+0xa52>
 800b3d2:	2339      	movs	r3, #57	; 0x39
 800b3d4:	f88b 3000 	strb.w	r3, [fp]
 800b3d8:	462b      	mov	r3, r5
 800b3da:	461d      	mov	r5, r3
 800b3dc:	3b01      	subs	r3, #1
 800b3de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b3e2:	2a39      	cmp	r2, #57	; 0x39
 800b3e4:	d071      	beq.n	800b4ca <_dtoa_r+0xb9a>
 800b3e6:	3201      	adds	r2, #1
 800b3e8:	701a      	strb	r2, [r3, #0]
 800b3ea:	e746      	b.n	800b27a <_dtoa_r+0x94a>
 800b3ec:	2a00      	cmp	r2, #0
 800b3ee:	dd07      	ble.n	800b400 <_dtoa_r+0xad0>
 800b3f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b3f4:	d0ed      	beq.n	800b3d2 <_dtoa_r+0xaa2>
 800b3f6:	f10a 0301 	add.w	r3, sl, #1
 800b3fa:	f88b 3000 	strb.w	r3, [fp]
 800b3fe:	e73c      	b.n	800b27a <_dtoa_r+0x94a>
 800b400:	9b05      	ldr	r3, [sp, #20]
 800b402:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b406:	4599      	cmp	r9, r3
 800b408:	d047      	beq.n	800b49a <_dtoa_r+0xb6a>
 800b40a:	ee18 1a10 	vmov	r1, s16
 800b40e:	2300      	movs	r3, #0
 800b410:	220a      	movs	r2, #10
 800b412:	4620      	mov	r0, r4
 800b414:	f000 fc7c 	bl	800bd10 <__multadd>
 800b418:	45b8      	cmp	r8, r7
 800b41a:	ee08 0a10 	vmov	s16, r0
 800b41e:	f04f 0300 	mov.w	r3, #0
 800b422:	f04f 020a 	mov.w	r2, #10
 800b426:	4641      	mov	r1, r8
 800b428:	4620      	mov	r0, r4
 800b42a:	d106      	bne.n	800b43a <_dtoa_r+0xb0a>
 800b42c:	f000 fc70 	bl	800bd10 <__multadd>
 800b430:	4680      	mov	r8, r0
 800b432:	4607      	mov	r7, r0
 800b434:	f109 0901 	add.w	r9, r9, #1
 800b438:	e772      	b.n	800b320 <_dtoa_r+0x9f0>
 800b43a:	f000 fc69 	bl	800bd10 <__multadd>
 800b43e:	4639      	mov	r1, r7
 800b440:	4680      	mov	r8, r0
 800b442:	2300      	movs	r3, #0
 800b444:	220a      	movs	r2, #10
 800b446:	4620      	mov	r0, r4
 800b448:	f000 fc62 	bl	800bd10 <__multadd>
 800b44c:	4607      	mov	r7, r0
 800b44e:	e7f1      	b.n	800b434 <_dtoa_r+0xb04>
 800b450:	9b03      	ldr	r3, [sp, #12]
 800b452:	9302      	str	r3, [sp, #8]
 800b454:	9d01      	ldr	r5, [sp, #4]
 800b456:	ee18 0a10 	vmov	r0, s16
 800b45a:	4631      	mov	r1, r6
 800b45c:	f7ff f9da 	bl	800a814 <quorem>
 800b460:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b464:	9b01      	ldr	r3, [sp, #4]
 800b466:	f805 ab01 	strb.w	sl, [r5], #1
 800b46a:	1aea      	subs	r2, r5, r3
 800b46c:	9b02      	ldr	r3, [sp, #8]
 800b46e:	4293      	cmp	r3, r2
 800b470:	dd09      	ble.n	800b486 <_dtoa_r+0xb56>
 800b472:	ee18 1a10 	vmov	r1, s16
 800b476:	2300      	movs	r3, #0
 800b478:	220a      	movs	r2, #10
 800b47a:	4620      	mov	r0, r4
 800b47c:	f000 fc48 	bl	800bd10 <__multadd>
 800b480:	ee08 0a10 	vmov	s16, r0
 800b484:	e7e7      	b.n	800b456 <_dtoa_r+0xb26>
 800b486:	9b02      	ldr	r3, [sp, #8]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	bfc8      	it	gt
 800b48c:	461d      	movgt	r5, r3
 800b48e:	9b01      	ldr	r3, [sp, #4]
 800b490:	bfd8      	it	le
 800b492:	2501      	movle	r5, #1
 800b494:	441d      	add	r5, r3
 800b496:	f04f 0800 	mov.w	r8, #0
 800b49a:	ee18 1a10 	vmov	r1, s16
 800b49e:	2201      	movs	r2, #1
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	f000 fe2f 	bl	800c104 <__lshift>
 800b4a6:	4631      	mov	r1, r6
 800b4a8:	ee08 0a10 	vmov	s16, r0
 800b4ac:	f000 fe9a 	bl	800c1e4 <__mcmp>
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	dc91      	bgt.n	800b3d8 <_dtoa_r+0xaa8>
 800b4b4:	d102      	bne.n	800b4bc <_dtoa_r+0xb8c>
 800b4b6:	f01a 0f01 	tst.w	sl, #1
 800b4ba:	d18d      	bne.n	800b3d8 <_dtoa_r+0xaa8>
 800b4bc:	462b      	mov	r3, r5
 800b4be:	461d      	mov	r5, r3
 800b4c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4c4:	2a30      	cmp	r2, #48	; 0x30
 800b4c6:	d0fa      	beq.n	800b4be <_dtoa_r+0xb8e>
 800b4c8:	e6d7      	b.n	800b27a <_dtoa_r+0x94a>
 800b4ca:	9a01      	ldr	r2, [sp, #4]
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d184      	bne.n	800b3da <_dtoa_r+0xaaa>
 800b4d0:	9b00      	ldr	r3, [sp, #0]
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	9300      	str	r3, [sp, #0]
 800b4d6:	2331      	movs	r3, #49	; 0x31
 800b4d8:	7013      	strb	r3, [r2, #0]
 800b4da:	e6ce      	b.n	800b27a <_dtoa_r+0x94a>
 800b4dc:	4b09      	ldr	r3, [pc, #36]	; (800b504 <_dtoa_r+0xbd4>)
 800b4de:	f7ff ba95 	b.w	800aa0c <_dtoa_r+0xdc>
 800b4e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	f47f aa6e 	bne.w	800a9c6 <_dtoa_r+0x96>
 800b4ea:	4b07      	ldr	r3, [pc, #28]	; (800b508 <_dtoa_r+0xbd8>)
 800b4ec:	f7ff ba8e 	b.w	800aa0c <_dtoa_r+0xdc>
 800b4f0:	9b02      	ldr	r3, [sp, #8]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	dcae      	bgt.n	800b454 <_dtoa_r+0xb24>
 800b4f6:	9b06      	ldr	r3, [sp, #24]
 800b4f8:	2b02      	cmp	r3, #2
 800b4fa:	f73f aea8 	bgt.w	800b24e <_dtoa_r+0x91e>
 800b4fe:	e7a9      	b.n	800b454 <_dtoa_r+0xb24>
 800b500:	0800f880 	.word	0x0800f880
 800b504:	0800fa79 	.word	0x0800fa79
 800b508:	0800f801 	.word	0x0800f801

0800b50c <rshift>:
 800b50c:	6903      	ldr	r3, [r0, #16]
 800b50e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b512:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b516:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b51a:	f100 0414 	add.w	r4, r0, #20
 800b51e:	dd45      	ble.n	800b5ac <rshift+0xa0>
 800b520:	f011 011f 	ands.w	r1, r1, #31
 800b524:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b528:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b52c:	d10c      	bne.n	800b548 <rshift+0x3c>
 800b52e:	f100 0710 	add.w	r7, r0, #16
 800b532:	4629      	mov	r1, r5
 800b534:	42b1      	cmp	r1, r6
 800b536:	d334      	bcc.n	800b5a2 <rshift+0x96>
 800b538:	1a9b      	subs	r3, r3, r2
 800b53a:	009b      	lsls	r3, r3, #2
 800b53c:	1eea      	subs	r2, r5, #3
 800b53e:	4296      	cmp	r6, r2
 800b540:	bf38      	it	cc
 800b542:	2300      	movcc	r3, #0
 800b544:	4423      	add	r3, r4
 800b546:	e015      	b.n	800b574 <rshift+0x68>
 800b548:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b54c:	f1c1 0820 	rsb	r8, r1, #32
 800b550:	40cf      	lsrs	r7, r1
 800b552:	f105 0e04 	add.w	lr, r5, #4
 800b556:	46a1      	mov	r9, r4
 800b558:	4576      	cmp	r6, lr
 800b55a:	46f4      	mov	ip, lr
 800b55c:	d815      	bhi.n	800b58a <rshift+0x7e>
 800b55e:	1a9a      	subs	r2, r3, r2
 800b560:	0092      	lsls	r2, r2, #2
 800b562:	3a04      	subs	r2, #4
 800b564:	3501      	adds	r5, #1
 800b566:	42ae      	cmp	r6, r5
 800b568:	bf38      	it	cc
 800b56a:	2200      	movcc	r2, #0
 800b56c:	18a3      	adds	r3, r4, r2
 800b56e:	50a7      	str	r7, [r4, r2]
 800b570:	b107      	cbz	r7, 800b574 <rshift+0x68>
 800b572:	3304      	adds	r3, #4
 800b574:	1b1a      	subs	r2, r3, r4
 800b576:	42a3      	cmp	r3, r4
 800b578:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b57c:	bf08      	it	eq
 800b57e:	2300      	moveq	r3, #0
 800b580:	6102      	str	r2, [r0, #16]
 800b582:	bf08      	it	eq
 800b584:	6143      	streq	r3, [r0, #20]
 800b586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b58a:	f8dc c000 	ldr.w	ip, [ip]
 800b58e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b592:	ea4c 0707 	orr.w	r7, ip, r7
 800b596:	f849 7b04 	str.w	r7, [r9], #4
 800b59a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b59e:	40cf      	lsrs	r7, r1
 800b5a0:	e7da      	b.n	800b558 <rshift+0x4c>
 800b5a2:	f851 cb04 	ldr.w	ip, [r1], #4
 800b5a6:	f847 cf04 	str.w	ip, [r7, #4]!
 800b5aa:	e7c3      	b.n	800b534 <rshift+0x28>
 800b5ac:	4623      	mov	r3, r4
 800b5ae:	e7e1      	b.n	800b574 <rshift+0x68>

0800b5b0 <__hexdig_fun>:
 800b5b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b5b4:	2b09      	cmp	r3, #9
 800b5b6:	d802      	bhi.n	800b5be <__hexdig_fun+0xe>
 800b5b8:	3820      	subs	r0, #32
 800b5ba:	b2c0      	uxtb	r0, r0
 800b5bc:	4770      	bx	lr
 800b5be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b5c2:	2b05      	cmp	r3, #5
 800b5c4:	d801      	bhi.n	800b5ca <__hexdig_fun+0x1a>
 800b5c6:	3847      	subs	r0, #71	; 0x47
 800b5c8:	e7f7      	b.n	800b5ba <__hexdig_fun+0xa>
 800b5ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b5ce:	2b05      	cmp	r3, #5
 800b5d0:	d801      	bhi.n	800b5d6 <__hexdig_fun+0x26>
 800b5d2:	3827      	subs	r0, #39	; 0x27
 800b5d4:	e7f1      	b.n	800b5ba <__hexdig_fun+0xa>
 800b5d6:	2000      	movs	r0, #0
 800b5d8:	4770      	bx	lr
	...

0800b5dc <__gethex>:
 800b5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e0:	ed2d 8b02 	vpush	{d8}
 800b5e4:	b089      	sub	sp, #36	; 0x24
 800b5e6:	ee08 0a10 	vmov	s16, r0
 800b5ea:	9304      	str	r3, [sp, #16]
 800b5ec:	4bb4      	ldr	r3, [pc, #720]	; (800b8c0 <__gethex+0x2e4>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	9301      	str	r3, [sp, #4]
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	468b      	mov	fp, r1
 800b5f6:	4690      	mov	r8, r2
 800b5f8:	f7f4 fdea 	bl	80001d0 <strlen>
 800b5fc:	9b01      	ldr	r3, [sp, #4]
 800b5fe:	f8db 2000 	ldr.w	r2, [fp]
 800b602:	4403      	add	r3, r0
 800b604:	4682      	mov	sl, r0
 800b606:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b60a:	9305      	str	r3, [sp, #20]
 800b60c:	1c93      	adds	r3, r2, #2
 800b60e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b612:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b616:	32fe      	adds	r2, #254	; 0xfe
 800b618:	18d1      	adds	r1, r2, r3
 800b61a:	461f      	mov	r7, r3
 800b61c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b620:	9100      	str	r1, [sp, #0]
 800b622:	2830      	cmp	r0, #48	; 0x30
 800b624:	d0f8      	beq.n	800b618 <__gethex+0x3c>
 800b626:	f7ff ffc3 	bl	800b5b0 <__hexdig_fun>
 800b62a:	4604      	mov	r4, r0
 800b62c:	2800      	cmp	r0, #0
 800b62e:	d13a      	bne.n	800b6a6 <__gethex+0xca>
 800b630:	9901      	ldr	r1, [sp, #4]
 800b632:	4652      	mov	r2, sl
 800b634:	4638      	mov	r0, r7
 800b636:	f001 fda3 	bl	800d180 <strncmp>
 800b63a:	4605      	mov	r5, r0
 800b63c:	2800      	cmp	r0, #0
 800b63e:	d168      	bne.n	800b712 <__gethex+0x136>
 800b640:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b644:	eb07 060a 	add.w	r6, r7, sl
 800b648:	f7ff ffb2 	bl	800b5b0 <__hexdig_fun>
 800b64c:	2800      	cmp	r0, #0
 800b64e:	d062      	beq.n	800b716 <__gethex+0x13a>
 800b650:	4633      	mov	r3, r6
 800b652:	7818      	ldrb	r0, [r3, #0]
 800b654:	2830      	cmp	r0, #48	; 0x30
 800b656:	461f      	mov	r7, r3
 800b658:	f103 0301 	add.w	r3, r3, #1
 800b65c:	d0f9      	beq.n	800b652 <__gethex+0x76>
 800b65e:	f7ff ffa7 	bl	800b5b0 <__hexdig_fun>
 800b662:	2301      	movs	r3, #1
 800b664:	fab0 f480 	clz	r4, r0
 800b668:	0964      	lsrs	r4, r4, #5
 800b66a:	4635      	mov	r5, r6
 800b66c:	9300      	str	r3, [sp, #0]
 800b66e:	463a      	mov	r2, r7
 800b670:	4616      	mov	r6, r2
 800b672:	3201      	adds	r2, #1
 800b674:	7830      	ldrb	r0, [r6, #0]
 800b676:	f7ff ff9b 	bl	800b5b0 <__hexdig_fun>
 800b67a:	2800      	cmp	r0, #0
 800b67c:	d1f8      	bne.n	800b670 <__gethex+0x94>
 800b67e:	9901      	ldr	r1, [sp, #4]
 800b680:	4652      	mov	r2, sl
 800b682:	4630      	mov	r0, r6
 800b684:	f001 fd7c 	bl	800d180 <strncmp>
 800b688:	b980      	cbnz	r0, 800b6ac <__gethex+0xd0>
 800b68a:	b94d      	cbnz	r5, 800b6a0 <__gethex+0xc4>
 800b68c:	eb06 050a 	add.w	r5, r6, sl
 800b690:	462a      	mov	r2, r5
 800b692:	4616      	mov	r6, r2
 800b694:	3201      	adds	r2, #1
 800b696:	7830      	ldrb	r0, [r6, #0]
 800b698:	f7ff ff8a 	bl	800b5b0 <__hexdig_fun>
 800b69c:	2800      	cmp	r0, #0
 800b69e:	d1f8      	bne.n	800b692 <__gethex+0xb6>
 800b6a0:	1bad      	subs	r5, r5, r6
 800b6a2:	00ad      	lsls	r5, r5, #2
 800b6a4:	e004      	b.n	800b6b0 <__gethex+0xd4>
 800b6a6:	2400      	movs	r4, #0
 800b6a8:	4625      	mov	r5, r4
 800b6aa:	e7e0      	b.n	800b66e <__gethex+0x92>
 800b6ac:	2d00      	cmp	r5, #0
 800b6ae:	d1f7      	bne.n	800b6a0 <__gethex+0xc4>
 800b6b0:	7833      	ldrb	r3, [r6, #0]
 800b6b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b6b6:	2b50      	cmp	r3, #80	; 0x50
 800b6b8:	d13b      	bne.n	800b732 <__gethex+0x156>
 800b6ba:	7873      	ldrb	r3, [r6, #1]
 800b6bc:	2b2b      	cmp	r3, #43	; 0x2b
 800b6be:	d02c      	beq.n	800b71a <__gethex+0x13e>
 800b6c0:	2b2d      	cmp	r3, #45	; 0x2d
 800b6c2:	d02e      	beq.n	800b722 <__gethex+0x146>
 800b6c4:	1c71      	adds	r1, r6, #1
 800b6c6:	f04f 0900 	mov.w	r9, #0
 800b6ca:	7808      	ldrb	r0, [r1, #0]
 800b6cc:	f7ff ff70 	bl	800b5b0 <__hexdig_fun>
 800b6d0:	1e43      	subs	r3, r0, #1
 800b6d2:	b2db      	uxtb	r3, r3
 800b6d4:	2b18      	cmp	r3, #24
 800b6d6:	d82c      	bhi.n	800b732 <__gethex+0x156>
 800b6d8:	f1a0 0210 	sub.w	r2, r0, #16
 800b6dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b6e0:	f7ff ff66 	bl	800b5b0 <__hexdig_fun>
 800b6e4:	1e43      	subs	r3, r0, #1
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	2b18      	cmp	r3, #24
 800b6ea:	d91d      	bls.n	800b728 <__gethex+0x14c>
 800b6ec:	f1b9 0f00 	cmp.w	r9, #0
 800b6f0:	d000      	beq.n	800b6f4 <__gethex+0x118>
 800b6f2:	4252      	negs	r2, r2
 800b6f4:	4415      	add	r5, r2
 800b6f6:	f8cb 1000 	str.w	r1, [fp]
 800b6fa:	b1e4      	cbz	r4, 800b736 <__gethex+0x15a>
 800b6fc:	9b00      	ldr	r3, [sp, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	bf14      	ite	ne
 800b702:	2700      	movne	r7, #0
 800b704:	2706      	moveq	r7, #6
 800b706:	4638      	mov	r0, r7
 800b708:	b009      	add	sp, #36	; 0x24
 800b70a:	ecbd 8b02 	vpop	{d8}
 800b70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b712:	463e      	mov	r6, r7
 800b714:	4625      	mov	r5, r4
 800b716:	2401      	movs	r4, #1
 800b718:	e7ca      	b.n	800b6b0 <__gethex+0xd4>
 800b71a:	f04f 0900 	mov.w	r9, #0
 800b71e:	1cb1      	adds	r1, r6, #2
 800b720:	e7d3      	b.n	800b6ca <__gethex+0xee>
 800b722:	f04f 0901 	mov.w	r9, #1
 800b726:	e7fa      	b.n	800b71e <__gethex+0x142>
 800b728:	230a      	movs	r3, #10
 800b72a:	fb03 0202 	mla	r2, r3, r2, r0
 800b72e:	3a10      	subs	r2, #16
 800b730:	e7d4      	b.n	800b6dc <__gethex+0x100>
 800b732:	4631      	mov	r1, r6
 800b734:	e7df      	b.n	800b6f6 <__gethex+0x11a>
 800b736:	1bf3      	subs	r3, r6, r7
 800b738:	3b01      	subs	r3, #1
 800b73a:	4621      	mov	r1, r4
 800b73c:	2b07      	cmp	r3, #7
 800b73e:	dc0b      	bgt.n	800b758 <__gethex+0x17c>
 800b740:	ee18 0a10 	vmov	r0, s16
 800b744:	f000 fa82 	bl	800bc4c <_Balloc>
 800b748:	4604      	mov	r4, r0
 800b74a:	b940      	cbnz	r0, 800b75e <__gethex+0x182>
 800b74c:	4b5d      	ldr	r3, [pc, #372]	; (800b8c4 <__gethex+0x2e8>)
 800b74e:	4602      	mov	r2, r0
 800b750:	21de      	movs	r1, #222	; 0xde
 800b752:	485d      	ldr	r0, [pc, #372]	; (800b8c8 <__gethex+0x2ec>)
 800b754:	f001 fde4 	bl	800d320 <__assert_func>
 800b758:	3101      	adds	r1, #1
 800b75a:	105b      	asrs	r3, r3, #1
 800b75c:	e7ee      	b.n	800b73c <__gethex+0x160>
 800b75e:	f100 0914 	add.w	r9, r0, #20
 800b762:	f04f 0b00 	mov.w	fp, #0
 800b766:	f1ca 0301 	rsb	r3, sl, #1
 800b76a:	f8cd 9008 	str.w	r9, [sp, #8]
 800b76e:	f8cd b000 	str.w	fp, [sp]
 800b772:	9306      	str	r3, [sp, #24]
 800b774:	42b7      	cmp	r7, r6
 800b776:	d340      	bcc.n	800b7fa <__gethex+0x21e>
 800b778:	9802      	ldr	r0, [sp, #8]
 800b77a:	9b00      	ldr	r3, [sp, #0]
 800b77c:	f840 3b04 	str.w	r3, [r0], #4
 800b780:	eba0 0009 	sub.w	r0, r0, r9
 800b784:	1080      	asrs	r0, r0, #2
 800b786:	0146      	lsls	r6, r0, #5
 800b788:	6120      	str	r0, [r4, #16]
 800b78a:	4618      	mov	r0, r3
 800b78c:	f000 fb50 	bl	800be30 <__hi0bits>
 800b790:	1a30      	subs	r0, r6, r0
 800b792:	f8d8 6000 	ldr.w	r6, [r8]
 800b796:	42b0      	cmp	r0, r6
 800b798:	dd63      	ble.n	800b862 <__gethex+0x286>
 800b79a:	1b87      	subs	r7, r0, r6
 800b79c:	4639      	mov	r1, r7
 800b79e:	4620      	mov	r0, r4
 800b7a0:	f000 fef4 	bl	800c58c <__any_on>
 800b7a4:	4682      	mov	sl, r0
 800b7a6:	b1a8      	cbz	r0, 800b7d4 <__gethex+0x1f8>
 800b7a8:	1e7b      	subs	r3, r7, #1
 800b7aa:	1159      	asrs	r1, r3, #5
 800b7ac:	f003 021f 	and.w	r2, r3, #31
 800b7b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b7b4:	f04f 0a01 	mov.w	sl, #1
 800b7b8:	fa0a f202 	lsl.w	r2, sl, r2
 800b7bc:	420a      	tst	r2, r1
 800b7be:	d009      	beq.n	800b7d4 <__gethex+0x1f8>
 800b7c0:	4553      	cmp	r3, sl
 800b7c2:	dd05      	ble.n	800b7d0 <__gethex+0x1f4>
 800b7c4:	1eb9      	subs	r1, r7, #2
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f000 fee0 	bl	800c58c <__any_on>
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	d145      	bne.n	800b85c <__gethex+0x280>
 800b7d0:	f04f 0a02 	mov.w	sl, #2
 800b7d4:	4639      	mov	r1, r7
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	f7ff fe98 	bl	800b50c <rshift>
 800b7dc:	443d      	add	r5, r7
 800b7de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b7e2:	42ab      	cmp	r3, r5
 800b7e4:	da4c      	bge.n	800b880 <__gethex+0x2a4>
 800b7e6:	ee18 0a10 	vmov	r0, s16
 800b7ea:	4621      	mov	r1, r4
 800b7ec:	f000 fa6e 	bl	800bccc <_Bfree>
 800b7f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	6013      	str	r3, [r2, #0]
 800b7f6:	27a3      	movs	r7, #163	; 0xa3
 800b7f8:	e785      	b.n	800b706 <__gethex+0x12a>
 800b7fa:	1e73      	subs	r3, r6, #1
 800b7fc:	9a05      	ldr	r2, [sp, #20]
 800b7fe:	9303      	str	r3, [sp, #12]
 800b800:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b804:	4293      	cmp	r3, r2
 800b806:	d019      	beq.n	800b83c <__gethex+0x260>
 800b808:	f1bb 0f20 	cmp.w	fp, #32
 800b80c:	d107      	bne.n	800b81e <__gethex+0x242>
 800b80e:	9b02      	ldr	r3, [sp, #8]
 800b810:	9a00      	ldr	r2, [sp, #0]
 800b812:	f843 2b04 	str.w	r2, [r3], #4
 800b816:	9302      	str	r3, [sp, #8]
 800b818:	2300      	movs	r3, #0
 800b81a:	9300      	str	r3, [sp, #0]
 800b81c:	469b      	mov	fp, r3
 800b81e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b822:	f7ff fec5 	bl	800b5b0 <__hexdig_fun>
 800b826:	9b00      	ldr	r3, [sp, #0]
 800b828:	f000 000f 	and.w	r0, r0, #15
 800b82c:	fa00 f00b 	lsl.w	r0, r0, fp
 800b830:	4303      	orrs	r3, r0
 800b832:	9300      	str	r3, [sp, #0]
 800b834:	f10b 0b04 	add.w	fp, fp, #4
 800b838:	9b03      	ldr	r3, [sp, #12]
 800b83a:	e00d      	b.n	800b858 <__gethex+0x27c>
 800b83c:	9b03      	ldr	r3, [sp, #12]
 800b83e:	9a06      	ldr	r2, [sp, #24]
 800b840:	4413      	add	r3, r2
 800b842:	42bb      	cmp	r3, r7
 800b844:	d3e0      	bcc.n	800b808 <__gethex+0x22c>
 800b846:	4618      	mov	r0, r3
 800b848:	9901      	ldr	r1, [sp, #4]
 800b84a:	9307      	str	r3, [sp, #28]
 800b84c:	4652      	mov	r2, sl
 800b84e:	f001 fc97 	bl	800d180 <strncmp>
 800b852:	9b07      	ldr	r3, [sp, #28]
 800b854:	2800      	cmp	r0, #0
 800b856:	d1d7      	bne.n	800b808 <__gethex+0x22c>
 800b858:	461e      	mov	r6, r3
 800b85a:	e78b      	b.n	800b774 <__gethex+0x198>
 800b85c:	f04f 0a03 	mov.w	sl, #3
 800b860:	e7b8      	b.n	800b7d4 <__gethex+0x1f8>
 800b862:	da0a      	bge.n	800b87a <__gethex+0x29e>
 800b864:	1a37      	subs	r7, r6, r0
 800b866:	4621      	mov	r1, r4
 800b868:	ee18 0a10 	vmov	r0, s16
 800b86c:	463a      	mov	r2, r7
 800b86e:	f000 fc49 	bl	800c104 <__lshift>
 800b872:	1bed      	subs	r5, r5, r7
 800b874:	4604      	mov	r4, r0
 800b876:	f100 0914 	add.w	r9, r0, #20
 800b87a:	f04f 0a00 	mov.w	sl, #0
 800b87e:	e7ae      	b.n	800b7de <__gethex+0x202>
 800b880:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b884:	42a8      	cmp	r0, r5
 800b886:	dd72      	ble.n	800b96e <__gethex+0x392>
 800b888:	1b45      	subs	r5, r0, r5
 800b88a:	42ae      	cmp	r6, r5
 800b88c:	dc36      	bgt.n	800b8fc <__gethex+0x320>
 800b88e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b892:	2b02      	cmp	r3, #2
 800b894:	d02a      	beq.n	800b8ec <__gethex+0x310>
 800b896:	2b03      	cmp	r3, #3
 800b898:	d02c      	beq.n	800b8f4 <__gethex+0x318>
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d11c      	bne.n	800b8d8 <__gethex+0x2fc>
 800b89e:	42ae      	cmp	r6, r5
 800b8a0:	d11a      	bne.n	800b8d8 <__gethex+0x2fc>
 800b8a2:	2e01      	cmp	r6, #1
 800b8a4:	d112      	bne.n	800b8cc <__gethex+0x2f0>
 800b8a6:	9a04      	ldr	r2, [sp, #16]
 800b8a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b8ac:	6013      	str	r3, [r2, #0]
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	6123      	str	r3, [r4, #16]
 800b8b2:	f8c9 3000 	str.w	r3, [r9]
 800b8b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b8b8:	2762      	movs	r7, #98	; 0x62
 800b8ba:	601c      	str	r4, [r3, #0]
 800b8bc:	e723      	b.n	800b706 <__gethex+0x12a>
 800b8be:	bf00      	nop
 800b8c0:	0800f8f8 	.word	0x0800f8f8
 800b8c4:	0800f880 	.word	0x0800f880
 800b8c8:	0800f891 	.word	0x0800f891
 800b8cc:	1e71      	subs	r1, r6, #1
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f000 fe5c 	bl	800c58c <__any_on>
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	d1e6      	bne.n	800b8a6 <__gethex+0x2ca>
 800b8d8:	ee18 0a10 	vmov	r0, s16
 800b8dc:	4621      	mov	r1, r4
 800b8de:	f000 f9f5 	bl	800bccc <_Bfree>
 800b8e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	6013      	str	r3, [r2, #0]
 800b8e8:	2750      	movs	r7, #80	; 0x50
 800b8ea:	e70c      	b.n	800b706 <__gethex+0x12a>
 800b8ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d1f2      	bne.n	800b8d8 <__gethex+0x2fc>
 800b8f2:	e7d8      	b.n	800b8a6 <__gethex+0x2ca>
 800b8f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d1d5      	bne.n	800b8a6 <__gethex+0x2ca>
 800b8fa:	e7ed      	b.n	800b8d8 <__gethex+0x2fc>
 800b8fc:	1e6f      	subs	r7, r5, #1
 800b8fe:	f1ba 0f00 	cmp.w	sl, #0
 800b902:	d131      	bne.n	800b968 <__gethex+0x38c>
 800b904:	b127      	cbz	r7, 800b910 <__gethex+0x334>
 800b906:	4639      	mov	r1, r7
 800b908:	4620      	mov	r0, r4
 800b90a:	f000 fe3f 	bl	800c58c <__any_on>
 800b90e:	4682      	mov	sl, r0
 800b910:	117b      	asrs	r3, r7, #5
 800b912:	2101      	movs	r1, #1
 800b914:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b918:	f007 071f 	and.w	r7, r7, #31
 800b91c:	fa01 f707 	lsl.w	r7, r1, r7
 800b920:	421f      	tst	r7, r3
 800b922:	4629      	mov	r1, r5
 800b924:	4620      	mov	r0, r4
 800b926:	bf18      	it	ne
 800b928:	f04a 0a02 	orrne.w	sl, sl, #2
 800b92c:	1b76      	subs	r6, r6, r5
 800b92e:	f7ff fded 	bl	800b50c <rshift>
 800b932:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b936:	2702      	movs	r7, #2
 800b938:	f1ba 0f00 	cmp.w	sl, #0
 800b93c:	d048      	beq.n	800b9d0 <__gethex+0x3f4>
 800b93e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b942:	2b02      	cmp	r3, #2
 800b944:	d015      	beq.n	800b972 <__gethex+0x396>
 800b946:	2b03      	cmp	r3, #3
 800b948:	d017      	beq.n	800b97a <__gethex+0x39e>
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d109      	bne.n	800b962 <__gethex+0x386>
 800b94e:	f01a 0f02 	tst.w	sl, #2
 800b952:	d006      	beq.n	800b962 <__gethex+0x386>
 800b954:	f8d9 0000 	ldr.w	r0, [r9]
 800b958:	ea4a 0a00 	orr.w	sl, sl, r0
 800b95c:	f01a 0f01 	tst.w	sl, #1
 800b960:	d10e      	bne.n	800b980 <__gethex+0x3a4>
 800b962:	f047 0710 	orr.w	r7, r7, #16
 800b966:	e033      	b.n	800b9d0 <__gethex+0x3f4>
 800b968:	f04f 0a01 	mov.w	sl, #1
 800b96c:	e7d0      	b.n	800b910 <__gethex+0x334>
 800b96e:	2701      	movs	r7, #1
 800b970:	e7e2      	b.n	800b938 <__gethex+0x35c>
 800b972:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b974:	f1c3 0301 	rsb	r3, r3, #1
 800b978:	9315      	str	r3, [sp, #84]	; 0x54
 800b97a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d0f0      	beq.n	800b962 <__gethex+0x386>
 800b980:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b984:	f104 0314 	add.w	r3, r4, #20
 800b988:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b98c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b990:	f04f 0c00 	mov.w	ip, #0
 800b994:	4618      	mov	r0, r3
 800b996:	f853 2b04 	ldr.w	r2, [r3], #4
 800b99a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b99e:	d01c      	beq.n	800b9da <__gethex+0x3fe>
 800b9a0:	3201      	adds	r2, #1
 800b9a2:	6002      	str	r2, [r0, #0]
 800b9a4:	2f02      	cmp	r7, #2
 800b9a6:	f104 0314 	add.w	r3, r4, #20
 800b9aa:	d13f      	bne.n	800ba2c <__gethex+0x450>
 800b9ac:	f8d8 2000 	ldr.w	r2, [r8]
 800b9b0:	3a01      	subs	r2, #1
 800b9b2:	42b2      	cmp	r2, r6
 800b9b4:	d10a      	bne.n	800b9cc <__gethex+0x3f0>
 800b9b6:	1171      	asrs	r1, r6, #5
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b9be:	f006 061f 	and.w	r6, r6, #31
 800b9c2:	fa02 f606 	lsl.w	r6, r2, r6
 800b9c6:	421e      	tst	r6, r3
 800b9c8:	bf18      	it	ne
 800b9ca:	4617      	movne	r7, r2
 800b9cc:	f047 0720 	orr.w	r7, r7, #32
 800b9d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b9d2:	601c      	str	r4, [r3, #0]
 800b9d4:	9b04      	ldr	r3, [sp, #16]
 800b9d6:	601d      	str	r5, [r3, #0]
 800b9d8:	e695      	b.n	800b706 <__gethex+0x12a>
 800b9da:	4299      	cmp	r1, r3
 800b9dc:	f843 cc04 	str.w	ip, [r3, #-4]
 800b9e0:	d8d8      	bhi.n	800b994 <__gethex+0x3b8>
 800b9e2:	68a3      	ldr	r3, [r4, #8]
 800b9e4:	459b      	cmp	fp, r3
 800b9e6:	db19      	blt.n	800ba1c <__gethex+0x440>
 800b9e8:	6861      	ldr	r1, [r4, #4]
 800b9ea:	ee18 0a10 	vmov	r0, s16
 800b9ee:	3101      	adds	r1, #1
 800b9f0:	f000 f92c 	bl	800bc4c <_Balloc>
 800b9f4:	4681      	mov	r9, r0
 800b9f6:	b918      	cbnz	r0, 800ba00 <__gethex+0x424>
 800b9f8:	4b1a      	ldr	r3, [pc, #104]	; (800ba64 <__gethex+0x488>)
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	2184      	movs	r1, #132	; 0x84
 800b9fe:	e6a8      	b.n	800b752 <__gethex+0x176>
 800ba00:	6922      	ldr	r2, [r4, #16]
 800ba02:	3202      	adds	r2, #2
 800ba04:	f104 010c 	add.w	r1, r4, #12
 800ba08:	0092      	lsls	r2, r2, #2
 800ba0a:	300c      	adds	r0, #12
 800ba0c:	f7fd f900 	bl	8008c10 <memcpy>
 800ba10:	4621      	mov	r1, r4
 800ba12:	ee18 0a10 	vmov	r0, s16
 800ba16:	f000 f959 	bl	800bccc <_Bfree>
 800ba1a:	464c      	mov	r4, r9
 800ba1c:	6923      	ldr	r3, [r4, #16]
 800ba1e:	1c5a      	adds	r2, r3, #1
 800ba20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ba24:	6122      	str	r2, [r4, #16]
 800ba26:	2201      	movs	r2, #1
 800ba28:	615a      	str	r2, [r3, #20]
 800ba2a:	e7bb      	b.n	800b9a4 <__gethex+0x3c8>
 800ba2c:	6922      	ldr	r2, [r4, #16]
 800ba2e:	455a      	cmp	r2, fp
 800ba30:	dd0b      	ble.n	800ba4a <__gethex+0x46e>
 800ba32:	2101      	movs	r1, #1
 800ba34:	4620      	mov	r0, r4
 800ba36:	f7ff fd69 	bl	800b50c <rshift>
 800ba3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ba3e:	3501      	adds	r5, #1
 800ba40:	42ab      	cmp	r3, r5
 800ba42:	f6ff aed0 	blt.w	800b7e6 <__gethex+0x20a>
 800ba46:	2701      	movs	r7, #1
 800ba48:	e7c0      	b.n	800b9cc <__gethex+0x3f0>
 800ba4a:	f016 061f 	ands.w	r6, r6, #31
 800ba4e:	d0fa      	beq.n	800ba46 <__gethex+0x46a>
 800ba50:	4453      	add	r3, sl
 800ba52:	f1c6 0620 	rsb	r6, r6, #32
 800ba56:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ba5a:	f000 f9e9 	bl	800be30 <__hi0bits>
 800ba5e:	42b0      	cmp	r0, r6
 800ba60:	dbe7      	blt.n	800ba32 <__gethex+0x456>
 800ba62:	e7f0      	b.n	800ba46 <__gethex+0x46a>
 800ba64:	0800f880 	.word	0x0800f880

0800ba68 <L_shift>:
 800ba68:	f1c2 0208 	rsb	r2, r2, #8
 800ba6c:	0092      	lsls	r2, r2, #2
 800ba6e:	b570      	push	{r4, r5, r6, lr}
 800ba70:	f1c2 0620 	rsb	r6, r2, #32
 800ba74:	6843      	ldr	r3, [r0, #4]
 800ba76:	6804      	ldr	r4, [r0, #0]
 800ba78:	fa03 f506 	lsl.w	r5, r3, r6
 800ba7c:	432c      	orrs	r4, r5
 800ba7e:	40d3      	lsrs	r3, r2
 800ba80:	6004      	str	r4, [r0, #0]
 800ba82:	f840 3f04 	str.w	r3, [r0, #4]!
 800ba86:	4288      	cmp	r0, r1
 800ba88:	d3f4      	bcc.n	800ba74 <L_shift+0xc>
 800ba8a:	bd70      	pop	{r4, r5, r6, pc}

0800ba8c <__match>:
 800ba8c:	b530      	push	{r4, r5, lr}
 800ba8e:	6803      	ldr	r3, [r0, #0]
 800ba90:	3301      	adds	r3, #1
 800ba92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba96:	b914      	cbnz	r4, 800ba9e <__match+0x12>
 800ba98:	6003      	str	r3, [r0, #0]
 800ba9a:	2001      	movs	r0, #1
 800ba9c:	bd30      	pop	{r4, r5, pc}
 800ba9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800baa2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800baa6:	2d19      	cmp	r5, #25
 800baa8:	bf98      	it	ls
 800baaa:	3220      	addls	r2, #32
 800baac:	42a2      	cmp	r2, r4
 800baae:	d0f0      	beq.n	800ba92 <__match+0x6>
 800bab0:	2000      	movs	r0, #0
 800bab2:	e7f3      	b.n	800ba9c <__match+0x10>

0800bab4 <__hexnan>:
 800bab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab8:	680b      	ldr	r3, [r1, #0]
 800baba:	115e      	asrs	r6, r3, #5
 800babc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bac0:	f013 031f 	ands.w	r3, r3, #31
 800bac4:	b087      	sub	sp, #28
 800bac6:	bf18      	it	ne
 800bac8:	3604      	addne	r6, #4
 800baca:	2500      	movs	r5, #0
 800bacc:	1f37      	subs	r7, r6, #4
 800bace:	4690      	mov	r8, r2
 800bad0:	6802      	ldr	r2, [r0, #0]
 800bad2:	9301      	str	r3, [sp, #4]
 800bad4:	4682      	mov	sl, r0
 800bad6:	f846 5c04 	str.w	r5, [r6, #-4]
 800bada:	46b9      	mov	r9, r7
 800badc:	463c      	mov	r4, r7
 800bade:	9502      	str	r5, [sp, #8]
 800bae0:	46ab      	mov	fp, r5
 800bae2:	7851      	ldrb	r1, [r2, #1]
 800bae4:	1c53      	adds	r3, r2, #1
 800bae6:	9303      	str	r3, [sp, #12]
 800bae8:	b341      	cbz	r1, 800bb3c <__hexnan+0x88>
 800baea:	4608      	mov	r0, r1
 800baec:	9205      	str	r2, [sp, #20]
 800baee:	9104      	str	r1, [sp, #16]
 800baf0:	f7ff fd5e 	bl	800b5b0 <__hexdig_fun>
 800baf4:	2800      	cmp	r0, #0
 800baf6:	d14f      	bne.n	800bb98 <__hexnan+0xe4>
 800baf8:	9904      	ldr	r1, [sp, #16]
 800bafa:	9a05      	ldr	r2, [sp, #20]
 800bafc:	2920      	cmp	r1, #32
 800bafe:	d818      	bhi.n	800bb32 <__hexnan+0x7e>
 800bb00:	9b02      	ldr	r3, [sp, #8]
 800bb02:	459b      	cmp	fp, r3
 800bb04:	dd13      	ble.n	800bb2e <__hexnan+0x7a>
 800bb06:	454c      	cmp	r4, r9
 800bb08:	d206      	bcs.n	800bb18 <__hexnan+0x64>
 800bb0a:	2d07      	cmp	r5, #7
 800bb0c:	dc04      	bgt.n	800bb18 <__hexnan+0x64>
 800bb0e:	462a      	mov	r2, r5
 800bb10:	4649      	mov	r1, r9
 800bb12:	4620      	mov	r0, r4
 800bb14:	f7ff ffa8 	bl	800ba68 <L_shift>
 800bb18:	4544      	cmp	r4, r8
 800bb1a:	d950      	bls.n	800bbbe <__hexnan+0x10a>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	f1a4 0904 	sub.w	r9, r4, #4
 800bb22:	f844 3c04 	str.w	r3, [r4, #-4]
 800bb26:	f8cd b008 	str.w	fp, [sp, #8]
 800bb2a:	464c      	mov	r4, r9
 800bb2c:	461d      	mov	r5, r3
 800bb2e:	9a03      	ldr	r2, [sp, #12]
 800bb30:	e7d7      	b.n	800bae2 <__hexnan+0x2e>
 800bb32:	2929      	cmp	r1, #41	; 0x29
 800bb34:	d156      	bne.n	800bbe4 <__hexnan+0x130>
 800bb36:	3202      	adds	r2, #2
 800bb38:	f8ca 2000 	str.w	r2, [sl]
 800bb3c:	f1bb 0f00 	cmp.w	fp, #0
 800bb40:	d050      	beq.n	800bbe4 <__hexnan+0x130>
 800bb42:	454c      	cmp	r4, r9
 800bb44:	d206      	bcs.n	800bb54 <__hexnan+0xa0>
 800bb46:	2d07      	cmp	r5, #7
 800bb48:	dc04      	bgt.n	800bb54 <__hexnan+0xa0>
 800bb4a:	462a      	mov	r2, r5
 800bb4c:	4649      	mov	r1, r9
 800bb4e:	4620      	mov	r0, r4
 800bb50:	f7ff ff8a 	bl	800ba68 <L_shift>
 800bb54:	4544      	cmp	r4, r8
 800bb56:	d934      	bls.n	800bbc2 <__hexnan+0x10e>
 800bb58:	f1a8 0204 	sub.w	r2, r8, #4
 800bb5c:	4623      	mov	r3, r4
 800bb5e:	f853 1b04 	ldr.w	r1, [r3], #4
 800bb62:	f842 1f04 	str.w	r1, [r2, #4]!
 800bb66:	429f      	cmp	r7, r3
 800bb68:	d2f9      	bcs.n	800bb5e <__hexnan+0xaa>
 800bb6a:	1b3b      	subs	r3, r7, r4
 800bb6c:	f023 0303 	bic.w	r3, r3, #3
 800bb70:	3304      	adds	r3, #4
 800bb72:	3401      	adds	r4, #1
 800bb74:	3e03      	subs	r6, #3
 800bb76:	42b4      	cmp	r4, r6
 800bb78:	bf88      	it	hi
 800bb7a:	2304      	movhi	r3, #4
 800bb7c:	4443      	add	r3, r8
 800bb7e:	2200      	movs	r2, #0
 800bb80:	f843 2b04 	str.w	r2, [r3], #4
 800bb84:	429f      	cmp	r7, r3
 800bb86:	d2fb      	bcs.n	800bb80 <__hexnan+0xcc>
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	b91b      	cbnz	r3, 800bb94 <__hexnan+0xe0>
 800bb8c:	4547      	cmp	r7, r8
 800bb8e:	d127      	bne.n	800bbe0 <__hexnan+0x12c>
 800bb90:	2301      	movs	r3, #1
 800bb92:	603b      	str	r3, [r7, #0]
 800bb94:	2005      	movs	r0, #5
 800bb96:	e026      	b.n	800bbe6 <__hexnan+0x132>
 800bb98:	3501      	adds	r5, #1
 800bb9a:	2d08      	cmp	r5, #8
 800bb9c:	f10b 0b01 	add.w	fp, fp, #1
 800bba0:	dd06      	ble.n	800bbb0 <__hexnan+0xfc>
 800bba2:	4544      	cmp	r4, r8
 800bba4:	d9c3      	bls.n	800bb2e <__hexnan+0x7a>
 800bba6:	2300      	movs	r3, #0
 800bba8:	f844 3c04 	str.w	r3, [r4, #-4]
 800bbac:	2501      	movs	r5, #1
 800bbae:	3c04      	subs	r4, #4
 800bbb0:	6822      	ldr	r2, [r4, #0]
 800bbb2:	f000 000f 	and.w	r0, r0, #15
 800bbb6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bbba:	6022      	str	r2, [r4, #0]
 800bbbc:	e7b7      	b.n	800bb2e <__hexnan+0x7a>
 800bbbe:	2508      	movs	r5, #8
 800bbc0:	e7b5      	b.n	800bb2e <__hexnan+0x7a>
 800bbc2:	9b01      	ldr	r3, [sp, #4]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d0df      	beq.n	800bb88 <__hexnan+0xd4>
 800bbc8:	f04f 32ff 	mov.w	r2, #4294967295
 800bbcc:	f1c3 0320 	rsb	r3, r3, #32
 800bbd0:	fa22 f303 	lsr.w	r3, r2, r3
 800bbd4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bbd8:	401a      	ands	r2, r3
 800bbda:	f846 2c04 	str.w	r2, [r6, #-4]
 800bbde:	e7d3      	b.n	800bb88 <__hexnan+0xd4>
 800bbe0:	3f04      	subs	r7, #4
 800bbe2:	e7d1      	b.n	800bb88 <__hexnan+0xd4>
 800bbe4:	2004      	movs	r0, #4
 800bbe6:	b007      	add	sp, #28
 800bbe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bbec <_localeconv_r>:
 800bbec:	4800      	ldr	r0, [pc, #0]	; (800bbf0 <_localeconv_r+0x4>)
 800bbee:	4770      	bx	lr
 800bbf0:	2000020c 	.word	0x2000020c

0800bbf4 <_lseek_r>:
 800bbf4:	b538      	push	{r3, r4, r5, lr}
 800bbf6:	4d07      	ldr	r5, [pc, #28]	; (800bc14 <_lseek_r+0x20>)
 800bbf8:	4604      	mov	r4, r0
 800bbfa:	4608      	mov	r0, r1
 800bbfc:	4611      	mov	r1, r2
 800bbfe:	2200      	movs	r2, #0
 800bc00:	602a      	str	r2, [r5, #0]
 800bc02:	461a      	mov	r2, r3
 800bc04:	f003 fcda 	bl	800f5bc <_lseek>
 800bc08:	1c43      	adds	r3, r0, #1
 800bc0a:	d102      	bne.n	800bc12 <_lseek_r+0x1e>
 800bc0c:	682b      	ldr	r3, [r5, #0]
 800bc0e:	b103      	cbz	r3, 800bc12 <_lseek_r+0x1e>
 800bc10:	6023      	str	r3, [r4, #0]
 800bc12:	bd38      	pop	{r3, r4, r5, pc}
 800bc14:	200006d4 	.word	0x200006d4

0800bc18 <malloc>:
 800bc18:	4b02      	ldr	r3, [pc, #8]	; (800bc24 <malloc+0xc>)
 800bc1a:	4601      	mov	r1, r0
 800bc1c:	6818      	ldr	r0, [r3, #0]
 800bc1e:	f000 bd59 	b.w	800c6d4 <_malloc_r>
 800bc22:	bf00      	nop
 800bc24:	200000b4 	.word	0x200000b4

0800bc28 <__ascii_mbtowc>:
 800bc28:	b082      	sub	sp, #8
 800bc2a:	b901      	cbnz	r1, 800bc2e <__ascii_mbtowc+0x6>
 800bc2c:	a901      	add	r1, sp, #4
 800bc2e:	b142      	cbz	r2, 800bc42 <__ascii_mbtowc+0x1a>
 800bc30:	b14b      	cbz	r3, 800bc46 <__ascii_mbtowc+0x1e>
 800bc32:	7813      	ldrb	r3, [r2, #0]
 800bc34:	600b      	str	r3, [r1, #0]
 800bc36:	7812      	ldrb	r2, [r2, #0]
 800bc38:	1e10      	subs	r0, r2, #0
 800bc3a:	bf18      	it	ne
 800bc3c:	2001      	movne	r0, #1
 800bc3e:	b002      	add	sp, #8
 800bc40:	4770      	bx	lr
 800bc42:	4610      	mov	r0, r2
 800bc44:	e7fb      	b.n	800bc3e <__ascii_mbtowc+0x16>
 800bc46:	f06f 0001 	mvn.w	r0, #1
 800bc4a:	e7f8      	b.n	800bc3e <__ascii_mbtowc+0x16>

0800bc4c <_Balloc>:
 800bc4c:	b570      	push	{r4, r5, r6, lr}
 800bc4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bc50:	4604      	mov	r4, r0
 800bc52:	460d      	mov	r5, r1
 800bc54:	b976      	cbnz	r6, 800bc74 <_Balloc+0x28>
 800bc56:	2010      	movs	r0, #16
 800bc58:	f7ff ffde 	bl	800bc18 <malloc>
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	6260      	str	r0, [r4, #36]	; 0x24
 800bc60:	b920      	cbnz	r0, 800bc6c <_Balloc+0x20>
 800bc62:	4b18      	ldr	r3, [pc, #96]	; (800bcc4 <_Balloc+0x78>)
 800bc64:	4818      	ldr	r0, [pc, #96]	; (800bcc8 <_Balloc+0x7c>)
 800bc66:	2166      	movs	r1, #102	; 0x66
 800bc68:	f001 fb5a 	bl	800d320 <__assert_func>
 800bc6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc70:	6006      	str	r6, [r0, #0]
 800bc72:	60c6      	str	r6, [r0, #12]
 800bc74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bc76:	68f3      	ldr	r3, [r6, #12]
 800bc78:	b183      	cbz	r3, 800bc9c <_Balloc+0x50>
 800bc7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc7c:	68db      	ldr	r3, [r3, #12]
 800bc7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc82:	b9b8      	cbnz	r0, 800bcb4 <_Balloc+0x68>
 800bc84:	2101      	movs	r1, #1
 800bc86:	fa01 f605 	lsl.w	r6, r1, r5
 800bc8a:	1d72      	adds	r2, r6, #5
 800bc8c:	0092      	lsls	r2, r2, #2
 800bc8e:	4620      	mov	r0, r4
 800bc90:	f000 fc9d 	bl	800c5ce <_calloc_r>
 800bc94:	b160      	cbz	r0, 800bcb0 <_Balloc+0x64>
 800bc96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bc9a:	e00e      	b.n	800bcba <_Balloc+0x6e>
 800bc9c:	2221      	movs	r2, #33	; 0x21
 800bc9e:	2104      	movs	r1, #4
 800bca0:	4620      	mov	r0, r4
 800bca2:	f000 fc94 	bl	800c5ce <_calloc_r>
 800bca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bca8:	60f0      	str	r0, [r6, #12]
 800bcaa:	68db      	ldr	r3, [r3, #12]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d1e4      	bne.n	800bc7a <_Balloc+0x2e>
 800bcb0:	2000      	movs	r0, #0
 800bcb2:	bd70      	pop	{r4, r5, r6, pc}
 800bcb4:	6802      	ldr	r2, [r0, #0]
 800bcb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bcba:	2300      	movs	r3, #0
 800bcbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bcc0:	e7f7      	b.n	800bcb2 <_Balloc+0x66>
 800bcc2:	bf00      	nop
 800bcc4:	0800f80e 	.word	0x0800f80e
 800bcc8:	0800f90c 	.word	0x0800f90c

0800bccc <_Bfree>:
 800bccc:	b570      	push	{r4, r5, r6, lr}
 800bcce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bcd0:	4605      	mov	r5, r0
 800bcd2:	460c      	mov	r4, r1
 800bcd4:	b976      	cbnz	r6, 800bcf4 <_Bfree+0x28>
 800bcd6:	2010      	movs	r0, #16
 800bcd8:	f7ff ff9e 	bl	800bc18 <malloc>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	6268      	str	r0, [r5, #36]	; 0x24
 800bce0:	b920      	cbnz	r0, 800bcec <_Bfree+0x20>
 800bce2:	4b09      	ldr	r3, [pc, #36]	; (800bd08 <_Bfree+0x3c>)
 800bce4:	4809      	ldr	r0, [pc, #36]	; (800bd0c <_Bfree+0x40>)
 800bce6:	218a      	movs	r1, #138	; 0x8a
 800bce8:	f001 fb1a 	bl	800d320 <__assert_func>
 800bcec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bcf0:	6006      	str	r6, [r0, #0]
 800bcf2:	60c6      	str	r6, [r0, #12]
 800bcf4:	b13c      	cbz	r4, 800bd06 <_Bfree+0x3a>
 800bcf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bcf8:	6862      	ldr	r2, [r4, #4]
 800bcfa:	68db      	ldr	r3, [r3, #12]
 800bcfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd00:	6021      	str	r1, [r4, #0]
 800bd02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bd06:	bd70      	pop	{r4, r5, r6, pc}
 800bd08:	0800f80e 	.word	0x0800f80e
 800bd0c:	0800f90c 	.word	0x0800f90c

0800bd10 <__multadd>:
 800bd10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd14:	690d      	ldr	r5, [r1, #16]
 800bd16:	4607      	mov	r7, r0
 800bd18:	460c      	mov	r4, r1
 800bd1a:	461e      	mov	r6, r3
 800bd1c:	f101 0c14 	add.w	ip, r1, #20
 800bd20:	2000      	movs	r0, #0
 800bd22:	f8dc 3000 	ldr.w	r3, [ip]
 800bd26:	b299      	uxth	r1, r3
 800bd28:	fb02 6101 	mla	r1, r2, r1, r6
 800bd2c:	0c1e      	lsrs	r6, r3, #16
 800bd2e:	0c0b      	lsrs	r3, r1, #16
 800bd30:	fb02 3306 	mla	r3, r2, r6, r3
 800bd34:	b289      	uxth	r1, r1
 800bd36:	3001      	adds	r0, #1
 800bd38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bd3c:	4285      	cmp	r5, r0
 800bd3e:	f84c 1b04 	str.w	r1, [ip], #4
 800bd42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bd46:	dcec      	bgt.n	800bd22 <__multadd+0x12>
 800bd48:	b30e      	cbz	r6, 800bd8e <__multadd+0x7e>
 800bd4a:	68a3      	ldr	r3, [r4, #8]
 800bd4c:	42ab      	cmp	r3, r5
 800bd4e:	dc19      	bgt.n	800bd84 <__multadd+0x74>
 800bd50:	6861      	ldr	r1, [r4, #4]
 800bd52:	4638      	mov	r0, r7
 800bd54:	3101      	adds	r1, #1
 800bd56:	f7ff ff79 	bl	800bc4c <_Balloc>
 800bd5a:	4680      	mov	r8, r0
 800bd5c:	b928      	cbnz	r0, 800bd6a <__multadd+0x5a>
 800bd5e:	4602      	mov	r2, r0
 800bd60:	4b0c      	ldr	r3, [pc, #48]	; (800bd94 <__multadd+0x84>)
 800bd62:	480d      	ldr	r0, [pc, #52]	; (800bd98 <__multadd+0x88>)
 800bd64:	21b5      	movs	r1, #181	; 0xb5
 800bd66:	f001 fadb 	bl	800d320 <__assert_func>
 800bd6a:	6922      	ldr	r2, [r4, #16]
 800bd6c:	3202      	adds	r2, #2
 800bd6e:	f104 010c 	add.w	r1, r4, #12
 800bd72:	0092      	lsls	r2, r2, #2
 800bd74:	300c      	adds	r0, #12
 800bd76:	f7fc ff4b 	bl	8008c10 <memcpy>
 800bd7a:	4621      	mov	r1, r4
 800bd7c:	4638      	mov	r0, r7
 800bd7e:	f7ff ffa5 	bl	800bccc <_Bfree>
 800bd82:	4644      	mov	r4, r8
 800bd84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bd88:	3501      	adds	r5, #1
 800bd8a:	615e      	str	r6, [r3, #20]
 800bd8c:	6125      	str	r5, [r4, #16]
 800bd8e:	4620      	mov	r0, r4
 800bd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd94:	0800f880 	.word	0x0800f880
 800bd98:	0800f90c 	.word	0x0800f90c

0800bd9c <__s2b>:
 800bd9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bda0:	460c      	mov	r4, r1
 800bda2:	4615      	mov	r5, r2
 800bda4:	461f      	mov	r7, r3
 800bda6:	2209      	movs	r2, #9
 800bda8:	3308      	adds	r3, #8
 800bdaa:	4606      	mov	r6, r0
 800bdac:	fb93 f3f2 	sdiv	r3, r3, r2
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	db09      	blt.n	800bdcc <__s2b+0x30>
 800bdb8:	4630      	mov	r0, r6
 800bdba:	f7ff ff47 	bl	800bc4c <_Balloc>
 800bdbe:	b940      	cbnz	r0, 800bdd2 <__s2b+0x36>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	4b19      	ldr	r3, [pc, #100]	; (800be28 <__s2b+0x8c>)
 800bdc4:	4819      	ldr	r0, [pc, #100]	; (800be2c <__s2b+0x90>)
 800bdc6:	21ce      	movs	r1, #206	; 0xce
 800bdc8:	f001 faaa 	bl	800d320 <__assert_func>
 800bdcc:	0052      	lsls	r2, r2, #1
 800bdce:	3101      	adds	r1, #1
 800bdd0:	e7f0      	b.n	800bdb4 <__s2b+0x18>
 800bdd2:	9b08      	ldr	r3, [sp, #32]
 800bdd4:	6143      	str	r3, [r0, #20]
 800bdd6:	2d09      	cmp	r5, #9
 800bdd8:	f04f 0301 	mov.w	r3, #1
 800bddc:	6103      	str	r3, [r0, #16]
 800bdde:	dd16      	ble.n	800be0e <__s2b+0x72>
 800bde0:	f104 0909 	add.w	r9, r4, #9
 800bde4:	46c8      	mov	r8, r9
 800bde6:	442c      	add	r4, r5
 800bde8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bdec:	4601      	mov	r1, r0
 800bdee:	3b30      	subs	r3, #48	; 0x30
 800bdf0:	220a      	movs	r2, #10
 800bdf2:	4630      	mov	r0, r6
 800bdf4:	f7ff ff8c 	bl	800bd10 <__multadd>
 800bdf8:	45a0      	cmp	r8, r4
 800bdfa:	d1f5      	bne.n	800bde8 <__s2b+0x4c>
 800bdfc:	f1a5 0408 	sub.w	r4, r5, #8
 800be00:	444c      	add	r4, r9
 800be02:	1b2d      	subs	r5, r5, r4
 800be04:	1963      	adds	r3, r4, r5
 800be06:	42bb      	cmp	r3, r7
 800be08:	db04      	blt.n	800be14 <__s2b+0x78>
 800be0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be0e:	340a      	adds	r4, #10
 800be10:	2509      	movs	r5, #9
 800be12:	e7f6      	b.n	800be02 <__s2b+0x66>
 800be14:	f814 3b01 	ldrb.w	r3, [r4], #1
 800be18:	4601      	mov	r1, r0
 800be1a:	3b30      	subs	r3, #48	; 0x30
 800be1c:	220a      	movs	r2, #10
 800be1e:	4630      	mov	r0, r6
 800be20:	f7ff ff76 	bl	800bd10 <__multadd>
 800be24:	e7ee      	b.n	800be04 <__s2b+0x68>
 800be26:	bf00      	nop
 800be28:	0800f880 	.word	0x0800f880
 800be2c:	0800f90c 	.word	0x0800f90c

0800be30 <__hi0bits>:
 800be30:	0c03      	lsrs	r3, r0, #16
 800be32:	041b      	lsls	r3, r3, #16
 800be34:	b9d3      	cbnz	r3, 800be6c <__hi0bits+0x3c>
 800be36:	0400      	lsls	r0, r0, #16
 800be38:	2310      	movs	r3, #16
 800be3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800be3e:	bf04      	itt	eq
 800be40:	0200      	lsleq	r0, r0, #8
 800be42:	3308      	addeq	r3, #8
 800be44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800be48:	bf04      	itt	eq
 800be4a:	0100      	lsleq	r0, r0, #4
 800be4c:	3304      	addeq	r3, #4
 800be4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800be52:	bf04      	itt	eq
 800be54:	0080      	lsleq	r0, r0, #2
 800be56:	3302      	addeq	r3, #2
 800be58:	2800      	cmp	r0, #0
 800be5a:	db05      	blt.n	800be68 <__hi0bits+0x38>
 800be5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800be60:	f103 0301 	add.w	r3, r3, #1
 800be64:	bf08      	it	eq
 800be66:	2320      	moveq	r3, #32
 800be68:	4618      	mov	r0, r3
 800be6a:	4770      	bx	lr
 800be6c:	2300      	movs	r3, #0
 800be6e:	e7e4      	b.n	800be3a <__hi0bits+0xa>

0800be70 <__lo0bits>:
 800be70:	6803      	ldr	r3, [r0, #0]
 800be72:	f013 0207 	ands.w	r2, r3, #7
 800be76:	4601      	mov	r1, r0
 800be78:	d00b      	beq.n	800be92 <__lo0bits+0x22>
 800be7a:	07da      	lsls	r2, r3, #31
 800be7c:	d423      	bmi.n	800bec6 <__lo0bits+0x56>
 800be7e:	0798      	lsls	r0, r3, #30
 800be80:	bf49      	itett	mi
 800be82:	085b      	lsrmi	r3, r3, #1
 800be84:	089b      	lsrpl	r3, r3, #2
 800be86:	2001      	movmi	r0, #1
 800be88:	600b      	strmi	r3, [r1, #0]
 800be8a:	bf5c      	itt	pl
 800be8c:	600b      	strpl	r3, [r1, #0]
 800be8e:	2002      	movpl	r0, #2
 800be90:	4770      	bx	lr
 800be92:	b298      	uxth	r0, r3
 800be94:	b9a8      	cbnz	r0, 800bec2 <__lo0bits+0x52>
 800be96:	0c1b      	lsrs	r3, r3, #16
 800be98:	2010      	movs	r0, #16
 800be9a:	b2da      	uxtb	r2, r3
 800be9c:	b90a      	cbnz	r2, 800bea2 <__lo0bits+0x32>
 800be9e:	3008      	adds	r0, #8
 800bea0:	0a1b      	lsrs	r3, r3, #8
 800bea2:	071a      	lsls	r2, r3, #28
 800bea4:	bf04      	itt	eq
 800bea6:	091b      	lsreq	r3, r3, #4
 800bea8:	3004      	addeq	r0, #4
 800beaa:	079a      	lsls	r2, r3, #30
 800beac:	bf04      	itt	eq
 800beae:	089b      	lsreq	r3, r3, #2
 800beb0:	3002      	addeq	r0, #2
 800beb2:	07da      	lsls	r2, r3, #31
 800beb4:	d403      	bmi.n	800bebe <__lo0bits+0x4e>
 800beb6:	085b      	lsrs	r3, r3, #1
 800beb8:	f100 0001 	add.w	r0, r0, #1
 800bebc:	d005      	beq.n	800beca <__lo0bits+0x5a>
 800bebe:	600b      	str	r3, [r1, #0]
 800bec0:	4770      	bx	lr
 800bec2:	4610      	mov	r0, r2
 800bec4:	e7e9      	b.n	800be9a <__lo0bits+0x2a>
 800bec6:	2000      	movs	r0, #0
 800bec8:	4770      	bx	lr
 800beca:	2020      	movs	r0, #32
 800becc:	4770      	bx	lr
	...

0800bed0 <__i2b>:
 800bed0:	b510      	push	{r4, lr}
 800bed2:	460c      	mov	r4, r1
 800bed4:	2101      	movs	r1, #1
 800bed6:	f7ff feb9 	bl	800bc4c <_Balloc>
 800beda:	4602      	mov	r2, r0
 800bedc:	b928      	cbnz	r0, 800beea <__i2b+0x1a>
 800bede:	4b05      	ldr	r3, [pc, #20]	; (800bef4 <__i2b+0x24>)
 800bee0:	4805      	ldr	r0, [pc, #20]	; (800bef8 <__i2b+0x28>)
 800bee2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bee6:	f001 fa1b 	bl	800d320 <__assert_func>
 800beea:	2301      	movs	r3, #1
 800beec:	6144      	str	r4, [r0, #20]
 800beee:	6103      	str	r3, [r0, #16]
 800bef0:	bd10      	pop	{r4, pc}
 800bef2:	bf00      	nop
 800bef4:	0800f880 	.word	0x0800f880
 800bef8:	0800f90c 	.word	0x0800f90c

0800befc <__multiply>:
 800befc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf00:	4691      	mov	r9, r2
 800bf02:	690a      	ldr	r2, [r1, #16]
 800bf04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	bfb8      	it	lt
 800bf0c:	460b      	movlt	r3, r1
 800bf0e:	460c      	mov	r4, r1
 800bf10:	bfbc      	itt	lt
 800bf12:	464c      	movlt	r4, r9
 800bf14:	4699      	movlt	r9, r3
 800bf16:	6927      	ldr	r7, [r4, #16]
 800bf18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bf1c:	68a3      	ldr	r3, [r4, #8]
 800bf1e:	6861      	ldr	r1, [r4, #4]
 800bf20:	eb07 060a 	add.w	r6, r7, sl
 800bf24:	42b3      	cmp	r3, r6
 800bf26:	b085      	sub	sp, #20
 800bf28:	bfb8      	it	lt
 800bf2a:	3101      	addlt	r1, #1
 800bf2c:	f7ff fe8e 	bl	800bc4c <_Balloc>
 800bf30:	b930      	cbnz	r0, 800bf40 <__multiply+0x44>
 800bf32:	4602      	mov	r2, r0
 800bf34:	4b44      	ldr	r3, [pc, #272]	; (800c048 <__multiply+0x14c>)
 800bf36:	4845      	ldr	r0, [pc, #276]	; (800c04c <__multiply+0x150>)
 800bf38:	f240 115d 	movw	r1, #349	; 0x15d
 800bf3c:	f001 f9f0 	bl	800d320 <__assert_func>
 800bf40:	f100 0514 	add.w	r5, r0, #20
 800bf44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bf48:	462b      	mov	r3, r5
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	4543      	cmp	r3, r8
 800bf4e:	d321      	bcc.n	800bf94 <__multiply+0x98>
 800bf50:	f104 0314 	add.w	r3, r4, #20
 800bf54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bf58:	f109 0314 	add.w	r3, r9, #20
 800bf5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bf60:	9202      	str	r2, [sp, #8]
 800bf62:	1b3a      	subs	r2, r7, r4
 800bf64:	3a15      	subs	r2, #21
 800bf66:	f022 0203 	bic.w	r2, r2, #3
 800bf6a:	3204      	adds	r2, #4
 800bf6c:	f104 0115 	add.w	r1, r4, #21
 800bf70:	428f      	cmp	r7, r1
 800bf72:	bf38      	it	cc
 800bf74:	2204      	movcc	r2, #4
 800bf76:	9201      	str	r2, [sp, #4]
 800bf78:	9a02      	ldr	r2, [sp, #8]
 800bf7a:	9303      	str	r3, [sp, #12]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d80c      	bhi.n	800bf9a <__multiply+0x9e>
 800bf80:	2e00      	cmp	r6, #0
 800bf82:	dd03      	ble.n	800bf8c <__multiply+0x90>
 800bf84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d05a      	beq.n	800c042 <__multiply+0x146>
 800bf8c:	6106      	str	r6, [r0, #16]
 800bf8e:	b005      	add	sp, #20
 800bf90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf94:	f843 2b04 	str.w	r2, [r3], #4
 800bf98:	e7d8      	b.n	800bf4c <__multiply+0x50>
 800bf9a:	f8b3 a000 	ldrh.w	sl, [r3]
 800bf9e:	f1ba 0f00 	cmp.w	sl, #0
 800bfa2:	d024      	beq.n	800bfee <__multiply+0xf2>
 800bfa4:	f104 0e14 	add.w	lr, r4, #20
 800bfa8:	46a9      	mov	r9, r5
 800bfaa:	f04f 0c00 	mov.w	ip, #0
 800bfae:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bfb2:	f8d9 1000 	ldr.w	r1, [r9]
 800bfb6:	fa1f fb82 	uxth.w	fp, r2
 800bfba:	b289      	uxth	r1, r1
 800bfbc:	fb0a 110b 	mla	r1, sl, fp, r1
 800bfc0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bfc4:	f8d9 2000 	ldr.w	r2, [r9]
 800bfc8:	4461      	add	r1, ip
 800bfca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bfce:	fb0a c20b 	mla	r2, sl, fp, ip
 800bfd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bfd6:	b289      	uxth	r1, r1
 800bfd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bfdc:	4577      	cmp	r7, lr
 800bfde:	f849 1b04 	str.w	r1, [r9], #4
 800bfe2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bfe6:	d8e2      	bhi.n	800bfae <__multiply+0xb2>
 800bfe8:	9a01      	ldr	r2, [sp, #4]
 800bfea:	f845 c002 	str.w	ip, [r5, r2]
 800bfee:	9a03      	ldr	r2, [sp, #12]
 800bff0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bff4:	3304      	adds	r3, #4
 800bff6:	f1b9 0f00 	cmp.w	r9, #0
 800bffa:	d020      	beq.n	800c03e <__multiply+0x142>
 800bffc:	6829      	ldr	r1, [r5, #0]
 800bffe:	f104 0c14 	add.w	ip, r4, #20
 800c002:	46ae      	mov	lr, r5
 800c004:	f04f 0a00 	mov.w	sl, #0
 800c008:	f8bc b000 	ldrh.w	fp, [ip]
 800c00c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c010:	fb09 220b 	mla	r2, r9, fp, r2
 800c014:	4492      	add	sl, r2
 800c016:	b289      	uxth	r1, r1
 800c018:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c01c:	f84e 1b04 	str.w	r1, [lr], #4
 800c020:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c024:	f8be 1000 	ldrh.w	r1, [lr]
 800c028:	0c12      	lsrs	r2, r2, #16
 800c02a:	fb09 1102 	mla	r1, r9, r2, r1
 800c02e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c032:	4567      	cmp	r7, ip
 800c034:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c038:	d8e6      	bhi.n	800c008 <__multiply+0x10c>
 800c03a:	9a01      	ldr	r2, [sp, #4]
 800c03c:	50a9      	str	r1, [r5, r2]
 800c03e:	3504      	adds	r5, #4
 800c040:	e79a      	b.n	800bf78 <__multiply+0x7c>
 800c042:	3e01      	subs	r6, #1
 800c044:	e79c      	b.n	800bf80 <__multiply+0x84>
 800c046:	bf00      	nop
 800c048:	0800f880 	.word	0x0800f880
 800c04c:	0800f90c 	.word	0x0800f90c

0800c050 <__pow5mult>:
 800c050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c054:	4615      	mov	r5, r2
 800c056:	f012 0203 	ands.w	r2, r2, #3
 800c05a:	4606      	mov	r6, r0
 800c05c:	460f      	mov	r7, r1
 800c05e:	d007      	beq.n	800c070 <__pow5mult+0x20>
 800c060:	4c25      	ldr	r4, [pc, #148]	; (800c0f8 <__pow5mult+0xa8>)
 800c062:	3a01      	subs	r2, #1
 800c064:	2300      	movs	r3, #0
 800c066:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c06a:	f7ff fe51 	bl	800bd10 <__multadd>
 800c06e:	4607      	mov	r7, r0
 800c070:	10ad      	asrs	r5, r5, #2
 800c072:	d03d      	beq.n	800c0f0 <__pow5mult+0xa0>
 800c074:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c076:	b97c      	cbnz	r4, 800c098 <__pow5mult+0x48>
 800c078:	2010      	movs	r0, #16
 800c07a:	f7ff fdcd 	bl	800bc18 <malloc>
 800c07e:	4602      	mov	r2, r0
 800c080:	6270      	str	r0, [r6, #36]	; 0x24
 800c082:	b928      	cbnz	r0, 800c090 <__pow5mult+0x40>
 800c084:	4b1d      	ldr	r3, [pc, #116]	; (800c0fc <__pow5mult+0xac>)
 800c086:	481e      	ldr	r0, [pc, #120]	; (800c100 <__pow5mult+0xb0>)
 800c088:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c08c:	f001 f948 	bl	800d320 <__assert_func>
 800c090:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c094:	6004      	str	r4, [r0, #0]
 800c096:	60c4      	str	r4, [r0, #12]
 800c098:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c09c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c0a0:	b94c      	cbnz	r4, 800c0b6 <__pow5mult+0x66>
 800c0a2:	f240 2171 	movw	r1, #625	; 0x271
 800c0a6:	4630      	mov	r0, r6
 800c0a8:	f7ff ff12 	bl	800bed0 <__i2b>
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800c0b2:	4604      	mov	r4, r0
 800c0b4:	6003      	str	r3, [r0, #0]
 800c0b6:	f04f 0900 	mov.w	r9, #0
 800c0ba:	07eb      	lsls	r3, r5, #31
 800c0bc:	d50a      	bpl.n	800c0d4 <__pow5mult+0x84>
 800c0be:	4639      	mov	r1, r7
 800c0c0:	4622      	mov	r2, r4
 800c0c2:	4630      	mov	r0, r6
 800c0c4:	f7ff ff1a 	bl	800befc <__multiply>
 800c0c8:	4639      	mov	r1, r7
 800c0ca:	4680      	mov	r8, r0
 800c0cc:	4630      	mov	r0, r6
 800c0ce:	f7ff fdfd 	bl	800bccc <_Bfree>
 800c0d2:	4647      	mov	r7, r8
 800c0d4:	106d      	asrs	r5, r5, #1
 800c0d6:	d00b      	beq.n	800c0f0 <__pow5mult+0xa0>
 800c0d8:	6820      	ldr	r0, [r4, #0]
 800c0da:	b938      	cbnz	r0, 800c0ec <__pow5mult+0x9c>
 800c0dc:	4622      	mov	r2, r4
 800c0de:	4621      	mov	r1, r4
 800c0e0:	4630      	mov	r0, r6
 800c0e2:	f7ff ff0b 	bl	800befc <__multiply>
 800c0e6:	6020      	str	r0, [r4, #0]
 800c0e8:	f8c0 9000 	str.w	r9, [r0]
 800c0ec:	4604      	mov	r4, r0
 800c0ee:	e7e4      	b.n	800c0ba <__pow5mult+0x6a>
 800c0f0:	4638      	mov	r0, r7
 800c0f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0f6:	bf00      	nop
 800c0f8:	0800fa58 	.word	0x0800fa58
 800c0fc:	0800f80e 	.word	0x0800f80e
 800c100:	0800f90c 	.word	0x0800f90c

0800c104 <__lshift>:
 800c104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c108:	460c      	mov	r4, r1
 800c10a:	6849      	ldr	r1, [r1, #4]
 800c10c:	6923      	ldr	r3, [r4, #16]
 800c10e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c112:	68a3      	ldr	r3, [r4, #8]
 800c114:	4607      	mov	r7, r0
 800c116:	4691      	mov	r9, r2
 800c118:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c11c:	f108 0601 	add.w	r6, r8, #1
 800c120:	42b3      	cmp	r3, r6
 800c122:	db0b      	blt.n	800c13c <__lshift+0x38>
 800c124:	4638      	mov	r0, r7
 800c126:	f7ff fd91 	bl	800bc4c <_Balloc>
 800c12a:	4605      	mov	r5, r0
 800c12c:	b948      	cbnz	r0, 800c142 <__lshift+0x3e>
 800c12e:	4602      	mov	r2, r0
 800c130:	4b2a      	ldr	r3, [pc, #168]	; (800c1dc <__lshift+0xd8>)
 800c132:	482b      	ldr	r0, [pc, #172]	; (800c1e0 <__lshift+0xdc>)
 800c134:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c138:	f001 f8f2 	bl	800d320 <__assert_func>
 800c13c:	3101      	adds	r1, #1
 800c13e:	005b      	lsls	r3, r3, #1
 800c140:	e7ee      	b.n	800c120 <__lshift+0x1c>
 800c142:	2300      	movs	r3, #0
 800c144:	f100 0114 	add.w	r1, r0, #20
 800c148:	f100 0210 	add.w	r2, r0, #16
 800c14c:	4618      	mov	r0, r3
 800c14e:	4553      	cmp	r3, sl
 800c150:	db37      	blt.n	800c1c2 <__lshift+0xbe>
 800c152:	6920      	ldr	r0, [r4, #16]
 800c154:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c158:	f104 0314 	add.w	r3, r4, #20
 800c15c:	f019 091f 	ands.w	r9, r9, #31
 800c160:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c164:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c168:	d02f      	beq.n	800c1ca <__lshift+0xc6>
 800c16a:	f1c9 0e20 	rsb	lr, r9, #32
 800c16e:	468a      	mov	sl, r1
 800c170:	f04f 0c00 	mov.w	ip, #0
 800c174:	681a      	ldr	r2, [r3, #0]
 800c176:	fa02 f209 	lsl.w	r2, r2, r9
 800c17a:	ea42 020c 	orr.w	r2, r2, ip
 800c17e:	f84a 2b04 	str.w	r2, [sl], #4
 800c182:	f853 2b04 	ldr.w	r2, [r3], #4
 800c186:	4298      	cmp	r0, r3
 800c188:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c18c:	d8f2      	bhi.n	800c174 <__lshift+0x70>
 800c18e:	1b03      	subs	r3, r0, r4
 800c190:	3b15      	subs	r3, #21
 800c192:	f023 0303 	bic.w	r3, r3, #3
 800c196:	3304      	adds	r3, #4
 800c198:	f104 0215 	add.w	r2, r4, #21
 800c19c:	4290      	cmp	r0, r2
 800c19e:	bf38      	it	cc
 800c1a0:	2304      	movcc	r3, #4
 800c1a2:	f841 c003 	str.w	ip, [r1, r3]
 800c1a6:	f1bc 0f00 	cmp.w	ip, #0
 800c1aa:	d001      	beq.n	800c1b0 <__lshift+0xac>
 800c1ac:	f108 0602 	add.w	r6, r8, #2
 800c1b0:	3e01      	subs	r6, #1
 800c1b2:	4638      	mov	r0, r7
 800c1b4:	612e      	str	r6, [r5, #16]
 800c1b6:	4621      	mov	r1, r4
 800c1b8:	f7ff fd88 	bl	800bccc <_Bfree>
 800c1bc:	4628      	mov	r0, r5
 800c1be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1c2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	e7c1      	b.n	800c14e <__lshift+0x4a>
 800c1ca:	3904      	subs	r1, #4
 800c1cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1d0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c1d4:	4298      	cmp	r0, r3
 800c1d6:	d8f9      	bhi.n	800c1cc <__lshift+0xc8>
 800c1d8:	e7ea      	b.n	800c1b0 <__lshift+0xac>
 800c1da:	bf00      	nop
 800c1dc:	0800f880 	.word	0x0800f880
 800c1e0:	0800f90c 	.word	0x0800f90c

0800c1e4 <__mcmp>:
 800c1e4:	b530      	push	{r4, r5, lr}
 800c1e6:	6902      	ldr	r2, [r0, #16]
 800c1e8:	690c      	ldr	r4, [r1, #16]
 800c1ea:	1b12      	subs	r2, r2, r4
 800c1ec:	d10e      	bne.n	800c20c <__mcmp+0x28>
 800c1ee:	f100 0314 	add.w	r3, r0, #20
 800c1f2:	3114      	adds	r1, #20
 800c1f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c1f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c1fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c200:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c204:	42a5      	cmp	r5, r4
 800c206:	d003      	beq.n	800c210 <__mcmp+0x2c>
 800c208:	d305      	bcc.n	800c216 <__mcmp+0x32>
 800c20a:	2201      	movs	r2, #1
 800c20c:	4610      	mov	r0, r2
 800c20e:	bd30      	pop	{r4, r5, pc}
 800c210:	4283      	cmp	r3, r0
 800c212:	d3f3      	bcc.n	800c1fc <__mcmp+0x18>
 800c214:	e7fa      	b.n	800c20c <__mcmp+0x28>
 800c216:	f04f 32ff 	mov.w	r2, #4294967295
 800c21a:	e7f7      	b.n	800c20c <__mcmp+0x28>

0800c21c <__mdiff>:
 800c21c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c220:	460c      	mov	r4, r1
 800c222:	4606      	mov	r6, r0
 800c224:	4611      	mov	r1, r2
 800c226:	4620      	mov	r0, r4
 800c228:	4690      	mov	r8, r2
 800c22a:	f7ff ffdb 	bl	800c1e4 <__mcmp>
 800c22e:	1e05      	subs	r5, r0, #0
 800c230:	d110      	bne.n	800c254 <__mdiff+0x38>
 800c232:	4629      	mov	r1, r5
 800c234:	4630      	mov	r0, r6
 800c236:	f7ff fd09 	bl	800bc4c <_Balloc>
 800c23a:	b930      	cbnz	r0, 800c24a <__mdiff+0x2e>
 800c23c:	4b3a      	ldr	r3, [pc, #232]	; (800c328 <__mdiff+0x10c>)
 800c23e:	4602      	mov	r2, r0
 800c240:	f240 2132 	movw	r1, #562	; 0x232
 800c244:	4839      	ldr	r0, [pc, #228]	; (800c32c <__mdiff+0x110>)
 800c246:	f001 f86b 	bl	800d320 <__assert_func>
 800c24a:	2301      	movs	r3, #1
 800c24c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c250:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c254:	bfa4      	itt	ge
 800c256:	4643      	movge	r3, r8
 800c258:	46a0      	movge	r8, r4
 800c25a:	4630      	mov	r0, r6
 800c25c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c260:	bfa6      	itte	ge
 800c262:	461c      	movge	r4, r3
 800c264:	2500      	movge	r5, #0
 800c266:	2501      	movlt	r5, #1
 800c268:	f7ff fcf0 	bl	800bc4c <_Balloc>
 800c26c:	b920      	cbnz	r0, 800c278 <__mdiff+0x5c>
 800c26e:	4b2e      	ldr	r3, [pc, #184]	; (800c328 <__mdiff+0x10c>)
 800c270:	4602      	mov	r2, r0
 800c272:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c276:	e7e5      	b.n	800c244 <__mdiff+0x28>
 800c278:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c27c:	6926      	ldr	r6, [r4, #16]
 800c27e:	60c5      	str	r5, [r0, #12]
 800c280:	f104 0914 	add.w	r9, r4, #20
 800c284:	f108 0514 	add.w	r5, r8, #20
 800c288:	f100 0e14 	add.w	lr, r0, #20
 800c28c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c290:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c294:	f108 0210 	add.w	r2, r8, #16
 800c298:	46f2      	mov	sl, lr
 800c29a:	2100      	movs	r1, #0
 800c29c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c2a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c2a4:	fa1f f883 	uxth.w	r8, r3
 800c2a8:	fa11 f18b 	uxtah	r1, r1, fp
 800c2ac:	0c1b      	lsrs	r3, r3, #16
 800c2ae:	eba1 0808 	sub.w	r8, r1, r8
 800c2b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c2b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c2ba:	fa1f f888 	uxth.w	r8, r8
 800c2be:	1419      	asrs	r1, r3, #16
 800c2c0:	454e      	cmp	r6, r9
 800c2c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c2c6:	f84a 3b04 	str.w	r3, [sl], #4
 800c2ca:	d8e7      	bhi.n	800c29c <__mdiff+0x80>
 800c2cc:	1b33      	subs	r3, r6, r4
 800c2ce:	3b15      	subs	r3, #21
 800c2d0:	f023 0303 	bic.w	r3, r3, #3
 800c2d4:	3304      	adds	r3, #4
 800c2d6:	3415      	adds	r4, #21
 800c2d8:	42a6      	cmp	r6, r4
 800c2da:	bf38      	it	cc
 800c2dc:	2304      	movcc	r3, #4
 800c2de:	441d      	add	r5, r3
 800c2e0:	4473      	add	r3, lr
 800c2e2:	469e      	mov	lr, r3
 800c2e4:	462e      	mov	r6, r5
 800c2e6:	4566      	cmp	r6, ip
 800c2e8:	d30e      	bcc.n	800c308 <__mdiff+0xec>
 800c2ea:	f10c 0203 	add.w	r2, ip, #3
 800c2ee:	1b52      	subs	r2, r2, r5
 800c2f0:	f022 0203 	bic.w	r2, r2, #3
 800c2f4:	3d03      	subs	r5, #3
 800c2f6:	45ac      	cmp	ip, r5
 800c2f8:	bf38      	it	cc
 800c2fa:	2200      	movcc	r2, #0
 800c2fc:	441a      	add	r2, r3
 800c2fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c302:	b17b      	cbz	r3, 800c324 <__mdiff+0x108>
 800c304:	6107      	str	r7, [r0, #16]
 800c306:	e7a3      	b.n	800c250 <__mdiff+0x34>
 800c308:	f856 8b04 	ldr.w	r8, [r6], #4
 800c30c:	fa11 f288 	uxtah	r2, r1, r8
 800c310:	1414      	asrs	r4, r2, #16
 800c312:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c316:	b292      	uxth	r2, r2
 800c318:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c31c:	f84e 2b04 	str.w	r2, [lr], #4
 800c320:	1421      	asrs	r1, r4, #16
 800c322:	e7e0      	b.n	800c2e6 <__mdiff+0xca>
 800c324:	3f01      	subs	r7, #1
 800c326:	e7ea      	b.n	800c2fe <__mdiff+0xe2>
 800c328:	0800f880 	.word	0x0800f880
 800c32c:	0800f90c 	.word	0x0800f90c

0800c330 <__ulp>:
 800c330:	b082      	sub	sp, #8
 800c332:	ed8d 0b00 	vstr	d0, [sp]
 800c336:	9b01      	ldr	r3, [sp, #4]
 800c338:	4912      	ldr	r1, [pc, #72]	; (800c384 <__ulp+0x54>)
 800c33a:	4019      	ands	r1, r3
 800c33c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c340:	2900      	cmp	r1, #0
 800c342:	dd05      	ble.n	800c350 <__ulp+0x20>
 800c344:	2200      	movs	r2, #0
 800c346:	460b      	mov	r3, r1
 800c348:	ec43 2b10 	vmov	d0, r2, r3
 800c34c:	b002      	add	sp, #8
 800c34e:	4770      	bx	lr
 800c350:	4249      	negs	r1, r1
 800c352:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c356:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c35a:	f04f 0200 	mov.w	r2, #0
 800c35e:	f04f 0300 	mov.w	r3, #0
 800c362:	da04      	bge.n	800c36e <__ulp+0x3e>
 800c364:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c368:	fa41 f300 	asr.w	r3, r1, r0
 800c36c:	e7ec      	b.n	800c348 <__ulp+0x18>
 800c36e:	f1a0 0114 	sub.w	r1, r0, #20
 800c372:	291e      	cmp	r1, #30
 800c374:	bfda      	itte	le
 800c376:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c37a:	fa20 f101 	lsrle.w	r1, r0, r1
 800c37e:	2101      	movgt	r1, #1
 800c380:	460a      	mov	r2, r1
 800c382:	e7e1      	b.n	800c348 <__ulp+0x18>
 800c384:	7ff00000 	.word	0x7ff00000

0800c388 <__b2d>:
 800c388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c38a:	6905      	ldr	r5, [r0, #16]
 800c38c:	f100 0714 	add.w	r7, r0, #20
 800c390:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c394:	1f2e      	subs	r6, r5, #4
 800c396:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c39a:	4620      	mov	r0, r4
 800c39c:	f7ff fd48 	bl	800be30 <__hi0bits>
 800c3a0:	f1c0 0320 	rsb	r3, r0, #32
 800c3a4:	280a      	cmp	r0, #10
 800c3a6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c424 <__b2d+0x9c>
 800c3aa:	600b      	str	r3, [r1, #0]
 800c3ac:	dc14      	bgt.n	800c3d8 <__b2d+0x50>
 800c3ae:	f1c0 0e0b 	rsb	lr, r0, #11
 800c3b2:	fa24 f10e 	lsr.w	r1, r4, lr
 800c3b6:	42b7      	cmp	r7, r6
 800c3b8:	ea41 030c 	orr.w	r3, r1, ip
 800c3bc:	bf34      	ite	cc
 800c3be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c3c2:	2100      	movcs	r1, #0
 800c3c4:	3015      	adds	r0, #21
 800c3c6:	fa04 f000 	lsl.w	r0, r4, r0
 800c3ca:	fa21 f10e 	lsr.w	r1, r1, lr
 800c3ce:	ea40 0201 	orr.w	r2, r0, r1
 800c3d2:	ec43 2b10 	vmov	d0, r2, r3
 800c3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3d8:	42b7      	cmp	r7, r6
 800c3da:	bf3a      	itte	cc
 800c3dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c3e0:	f1a5 0608 	subcc.w	r6, r5, #8
 800c3e4:	2100      	movcs	r1, #0
 800c3e6:	380b      	subs	r0, #11
 800c3e8:	d017      	beq.n	800c41a <__b2d+0x92>
 800c3ea:	f1c0 0c20 	rsb	ip, r0, #32
 800c3ee:	fa04 f500 	lsl.w	r5, r4, r0
 800c3f2:	42be      	cmp	r6, r7
 800c3f4:	fa21 f40c 	lsr.w	r4, r1, ip
 800c3f8:	ea45 0504 	orr.w	r5, r5, r4
 800c3fc:	bf8c      	ite	hi
 800c3fe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c402:	2400      	movls	r4, #0
 800c404:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c408:	fa01 f000 	lsl.w	r0, r1, r0
 800c40c:	fa24 f40c 	lsr.w	r4, r4, ip
 800c410:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c414:	ea40 0204 	orr.w	r2, r0, r4
 800c418:	e7db      	b.n	800c3d2 <__b2d+0x4a>
 800c41a:	ea44 030c 	orr.w	r3, r4, ip
 800c41e:	460a      	mov	r2, r1
 800c420:	e7d7      	b.n	800c3d2 <__b2d+0x4a>
 800c422:	bf00      	nop
 800c424:	3ff00000 	.word	0x3ff00000

0800c428 <__d2b>:
 800c428:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c42c:	4689      	mov	r9, r1
 800c42e:	2101      	movs	r1, #1
 800c430:	ec57 6b10 	vmov	r6, r7, d0
 800c434:	4690      	mov	r8, r2
 800c436:	f7ff fc09 	bl	800bc4c <_Balloc>
 800c43a:	4604      	mov	r4, r0
 800c43c:	b930      	cbnz	r0, 800c44c <__d2b+0x24>
 800c43e:	4602      	mov	r2, r0
 800c440:	4b25      	ldr	r3, [pc, #148]	; (800c4d8 <__d2b+0xb0>)
 800c442:	4826      	ldr	r0, [pc, #152]	; (800c4dc <__d2b+0xb4>)
 800c444:	f240 310a 	movw	r1, #778	; 0x30a
 800c448:	f000 ff6a 	bl	800d320 <__assert_func>
 800c44c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c450:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c454:	bb35      	cbnz	r5, 800c4a4 <__d2b+0x7c>
 800c456:	2e00      	cmp	r6, #0
 800c458:	9301      	str	r3, [sp, #4]
 800c45a:	d028      	beq.n	800c4ae <__d2b+0x86>
 800c45c:	4668      	mov	r0, sp
 800c45e:	9600      	str	r6, [sp, #0]
 800c460:	f7ff fd06 	bl	800be70 <__lo0bits>
 800c464:	9900      	ldr	r1, [sp, #0]
 800c466:	b300      	cbz	r0, 800c4aa <__d2b+0x82>
 800c468:	9a01      	ldr	r2, [sp, #4]
 800c46a:	f1c0 0320 	rsb	r3, r0, #32
 800c46e:	fa02 f303 	lsl.w	r3, r2, r3
 800c472:	430b      	orrs	r3, r1
 800c474:	40c2      	lsrs	r2, r0
 800c476:	6163      	str	r3, [r4, #20]
 800c478:	9201      	str	r2, [sp, #4]
 800c47a:	9b01      	ldr	r3, [sp, #4]
 800c47c:	61a3      	str	r3, [r4, #24]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	bf14      	ite	ne
 800c482:	2202      	movne	r2, #2
 800c484:	2201      	moveq	r2, #1
 800c486:	6122      	str	r2, [r4, #16]
 800c488:	b1d5      	cbz	r5, 800c4c0 <__d2b+0x98>
 800c48a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c48e:	4405      	add	r5, r0
 800c490:	f8c9 5000 	str.w	r5, [r9]
 800c494:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c498:	f8c8 0000 	str.w	r0, [r8]
 800c49c:	4620      	mov	r0, r4
 800c49e:	b003      	add	sp, #12
 800c4a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c4a8:	e7d5      	b.n	800c456 <__d2b+0x2e>
 800c4aa:	6161      	str	r1, [r4, #20]
 800c4ac:	e7e5      	b.n	800c47a <__d2b+0x52>
 800c4ae:	a801      	add	r0, sp, #4
 800c4b0:	f7ff fcde 	bl	800be70 <__lo0bits>
 800c4b4:	9b01      	ldr	r3, [sp, #4]
 800c4b6:	6163      	str	r3, [r4, #20]
 800c4b8:	2201      	movs	r2, #1
 800c4ba:	6122      	str	r2, [r4, #16]
 800c4bc:	3020      	adds	r0, #32
 800c4be:	e7e3      	b.n	800c488 <__d2b+0x60>
 800c4c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c4c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c4c8:	f8c9 0000 	str.w	r0, [r9]
 800c4cc:	6918      	ldr	r0, [r3, #16]
 800c4ce:	f7ff fcaf 	bl	800be30 <__hi0bits>
 800c4d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c4d6:	e7df      	b.n	800c498 <__d2b+0x70>
 800c4d8:	0800f880 	.word	0x0800f880
 800c4dc:	0800f90c 	.word	0x0800f90c

0800c4e0 <__ratio>:
 800c4e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e4:	4688      	mov	r8, r1
 800c4e6:	4669      	mov	r1, sp
 800c4e8:	4681      	mov	r9, r0
 800c4ea:	f7ff ff4d 	bl	800c388 <__b2d>
 800c4ee:	a901      	add	r1, sp, #4
 800c4f0:	4640      	mov	r0, r8
 800c4f2:	ec55 4b10 	vmov	r4, r5, d0
 800c4f6:	f7ff ff47 	bl	800c388 <__b2d>
 800c4fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c4fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c502:	eba3 0c02 	sub.w	ip, r3, r2
 800c506:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c50a:	1a9b      	subs	r3, r3, r2
 800c50c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c510:	ec51 0b10 	vmov	r0, r1, d0
 800c514:	2b00      	cmp	r3, #0
 800c516:	bfd6      	itet	le
 800c518:	460a      	movle	r2, r1
 800c51a:	462a      	movgt	r2, r5
 800c51c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c520:	468b      	mov	fp, r1
 800c522:	462f      	mov	r7, r5
 800c524:	bfd4      	ite	le
 800c526:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c52a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c52e:	4620      	mov	r0, r4
 800c530:	ee10 2a10 	vmov	r2, s0
 800c534:	465b      	mov	r3, fp
 800c536:	4639      	mov	r1, r7
 800c538:	f7f4 f988 	bl	800084c <__aeabi_ddiv>
 800c53c:	ec41 0b10 	vmov	d0, r0, r1
 800c540:	b003      	add	sp, #12
 800c542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c546 <__copybits>:
 800c546:	3901      	subs	r1, #1
 800c548:	b570      	push	{r4, r5, r6, lr}
 800c54a:	1149      	asrs	r1, r1, #5
 800c54c:	6914      	ldr	r4, [r2, #16]
 800c54e:	3101      	adds	r1, #1
 800c550:	f102 0314 	add.w	r3, r2, #20
 800c554:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c558:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c55c:	1f05      	subs	r5, r0, #4
 800c55e:	42a3      	cmp	r3, r4
 800c560:	d30c      	bcc.n	800c57c <__copybits+0x36>
 800c562:	1aa3      	subs	r3, r4, r2
 800c564:	3b11      	subs	r3, #17
 800c566:	f023 0303 	bic.w	r3, r3, #3
 800c56a:	3211      	adds	r2, #17
 800c56c:	42a2      	cmp	r2, r4
 800c56e:	bf88      	it	hi
 800c570:	2300      	movhi	r3, #0
 800c572:	4418      	add	r0, r3
 800c574:	2300      	movs	r3, #0
 800c576:	4288      	cmp	r0, r1
 800c578:	d305      	bcc.n	800c586 <__copybits+0x40>
 800c57a:	bd70      	pop	{r4, r5, r6, pc}
 800c57c:	f853 6b04 	ldr.w	r6, [r3], #4
 800c580:	f845 6f04 	str.w	r6, [r5, #4]!
 800c584:	e7eb      	b.n	800c55e <__copybits+0x18>
 800c586:	f840 3b04 	str.w	r3, [r0], #4
 800c58a:	e7f4      	b.n	800c576 <__copybits+0x30>

0800c58c <__any_on>:
 800c58c:	f100 0214 	add.w	r2, r0, #20
 800c590:	6900      	ldr	r0, [r0, #16]
 800c592:	114b      	asrs	r3, r1, #5
 800c594:	4298      	cmp	r0, r3
 800c596:	b510      	push	{r4, lr}
 800c598:	db11      	blt.n	800c5be <__any_on+0x32>
 800c59a:	dd0a      	ble.n	800c5b2 <__any_on+0x26>
 800c59c:	f011 011f 	ands.w	r1, r1, #31
 800c5a0:	d007      	beq.n	800c5b2 <__any_on+0x26>
 800c5a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c5a6:	fa24 f001 	lsr.w	r0, r4, r1
 800c5aa:	fa00 f101 	lsl.w	r1, r0, r1
 800c5ae:	428c      	cmp	r4, r1
 800c5b0:	d10b      	bne.n	800c5ca <__any_on+0x3e>
 800c5b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d803      	bhi.n	800c5c2 <__any_on+0x36>
 800c5ba:	2000      	movs	r0, #0
 800c5bc:	bd10      	pop	{r4, pc}
 800c5be:	4603      	mov	r3, r0
 800c5c0:	e7f7      	b.n	800c5b2 <__any_on+0x26>
 800c5c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c5c6:	2900      	cmp	r1, #0
 800c5c8:	d0f5      	beq.n	800c5b6 <__any_on+0x2a>
 800c5ca:	2001      	movs	r0, #1
 800c5cc:	e7f6      	b.n	800c5bc <__any_on+0x30>

0800c5ce <_calloc_r>:
 800c5ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5d0:	fba1 2402 	umull	r2, r4, r1, r2
 800c5d4:	b94c      	cbnz	r4, 800c5ea <_calloc_r+0x1c>
 800c5d6:	4611      	mov	r1, r2
 800c5d8:	9201      	str	r2, [sp, #4]
 800c5da:	f000 f87b 	bl	800c6d4 <_malloc_r>
 800c5de:	9a01      	ldr	r2, [sp, #4]
 800c5e0:	4605      	mov	r5, r0
 800c5e2:	b930      	cbnz	r0, 800c5f2 <_calloc_r+0x24>
 800c5e4:	4628      	mov	r0, r5
 800c5e6:	b003      	add	sp, #12
 800c5e8:	bd30      	pop	{r4, r5, pc}
 800c5ea:	220c      	movs	r2, #12
 800c5ec:	6002      	str	r2, [r0, #0]
 800c5ee:	2500      	movs	r5, #0
 800c5f0:	e7f8      	b.n	800c5e4 <_calloc_r+0x16>
 800c5f2:	4621      	mov	r1, r4
 800c5f4:	f7fc fb1a 	bl	8008c2c <memset>
 800c5f8:	e7f4      	b.n	800c5e4 <_calloc_r+0x16>
	...

0800c5fc <_free_r>:
 800c5fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5fe:	2900      	cmp	r1, #0
 800c600:	d044      	beq.n	800c68c <_free_r+0x90>
 800c602:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c606:	9001      	str	r0, [sp, #4]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	f1a1 0404 	sub.w	r4, r1, #4
 800c60e:	bfb8      	it	lt
 800c610:	18e4      	addlt	r4, r4, r3
 800c612:	f001 f889 	bl	800d728 <__malloc_lock>
 800c616:	4a1e      	ldr	r2, [pc, #120]	; (800c690 <_free_r+0x94>)
 800c618:	9801      	ldr	r0, [sp, #4]
 800c61a:	6813      	ldr	r3, [r2, #0]
 800c61c:	b933      	cbnz	r3, 800c62c <_free_r+0x30>
 800c61e:	6063      	str	r3, [r4, #4]
 800c620:	6014      	str	r4, [r2, #0]
 800c622:	b003      	add	sp, #12
 800c624:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c628:	f001 b884 	b.w	800d734 <__malloc_unlock>
 800c62c:	42a3      	cmp	r3, r4
 800c62e:	d908      	bls.n	800c642 <_free_r+0x46>
 800c630:	6825      	ldr	r5, [r4, #0]
 800c632:	1961      	adds	r1, r4, r5
 800c634:	428b      	cmp	r3, r1
 800c636:	bf01      	itttt	eq
 800c638:	6819      	ldreq	r1, [r3, #0]
 800c63a:	685b      	ldreq	r3, [r3, #4]
 800c63c:	1949      	addeq	r1, r1, r5
 800c63e:	6021      	streq	r1, [r4, #0]
 800c640:	e7ed      	b.n	800c61e <_free_r+0x22>
 800c642:	461a      	mov	r2, r3
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	b10b      	cbz	r3, 800c64c <_free_r+0x50>
 800c648:	42a3      	cmp	r3, r4
 800c64a:	d9fa      	bls.n	800c642 <_free_r+0x46>
 800c64c:	6811      	ldr	r1, [r2, #0]
 800c64e:	1855      	adds	r5, r2, r1
 800c650:	42a5      	cmp	r5, r4
 800c652:	d10b      	bne.n	800c66c <_free_r+0x70>
 800c654:	6824      	ldr	r4, [r4, #0]
 800c656:	4421      	add	r1, r4
 800c658:	1854      	adds	r4, r2, r1
 800c65a:	42a3      	cmp	r3, r4
 800c65c:	6011      	str	r1, [r2, #0]
 800c65e:	d1e0      	bne.n	800c622 <_free_r+0x26>
 800c660:	681c      	ldr	r4, [r3, #0]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	6053      	str	r3, [r2, #4]
 800c666:	4421      	add	r1, r4
 800c668:	6011      	str	r1, [r2, #0]
 800c66a:	e7da      	b.n	800c622 <_free_r+0x26>
 800c66c:	d902      	bls.n	800c674 <_free_r+0x78>
 800c66e:	230c      	movs	r3, #12
 800c670:	6003      	str	r3, [r0, #0]
 800c672:	e7d6      	b.n	800c622 <_free_r+0x26>
 800c674:	6825      	ldr	r5, [r4, #0]
 800c676:	1961      	adds	r1, r4, r5
 800c678:	428b      	cmp	r3, r1
 800c67a:	bf04      	itt	eq
 800c67c:	6819      	ldreq	r1, [r3, #0]
 800c67e:	685b      	ldreq	r3, [r3, #4]
 800c680:	6063      	str	r3, [r4, #4]
 800c682:	bf04      	itt	eq
 800c684:	1949      	addeq	r1, r1, r5
 800c686:	6021      	streq	r1, [r4, #0]
 800c688:	6054      	str	r4, [r2, #4]
 800c68a:	e7ca      	b.n	800c622 <_free_r+0x26>
 800c68c:	b003      	add	sp, #12
 800c68e:	bd30      	pop	{r4, r5, pc}
 800c690:	200006cc 	.word	0x200006cc

0800c694 <sbrk_aligned>:
 800c694:	b570      	push	{r4, r5, r6, lr}
 800c696:	4e0e      	ldr	r6, [pc, #56]	; (800c6d0 <sbrk_aligned+0x3c>)
 800c698:	460c      	mov	r4, r1
 800c69a:	6831      	ldr	r1, [r6, #0]
 800c69c:	4605      	mov	r5, r0
 800c69e:	b911      	cbnz	r1, 800c6a6 <sbrk_aligned+0x12>
 800c6a0:	f000 fd26 	bl	800d0f0 <_sbrk_r>
 800c6a4:	6030      	str	r0, [r6, #0]
 800c6a6:	4621      	mov	r1, r4
 800c6a8:	4628      	mov	r0, r5
 800c6aa:	f000 fd21 	bl	800d0f0 <_sbrk_r>
 800c6ae:	1c43      	adds	r3, r0, #1
 800c6b0:	d00a      	beq.n	800c6c8 <sbrk_aligned+0x34>
 800c6b2:	1cc4      	adds	r4, r0, #3
 800c6b4:	f024 0403 	bic.w	r4, r4, #3
 800c6b8:	42a0      	cmp	r0, r4
 800c6ba:	d007      	beq.n	800c6cc <sbrk_aligned+0x38>
 800c6bc:	1a21      	subs	r1, r4, r0
 800c6be:	4628      	mov	r0, r5
 800c6c0:	f000 fd16 	bl	800d0f0 <_sbrk_r>
 800c6c4:	3001      	adds	r0, #1
 800c6c6:	d101      	bne.n	800c6cc <sbrk_aligned+0x38>
 800c6c8:	f04f 34ff 	mov.w	r4, #4294967295
 800c6cc:	4620      	mov	r0, r4
 800c6ce:	bd70      	pop	{r4, r5, r6, pc}
 800c6d0:	200006d0 	.word	0x200006d0

0800c6d4 <_malloc_r>:
 800c6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6d8:	1ccd      	adds	r5, r1, #3
 800c6da:	f025 0503 	bic.w	r5, r5, #3
 800c6de:	3508      	adds	r5, #8
 800c6e0:	2d0c      	cmp	r5, #12
 800c6e2:	bf38      	it	cc
 800c6e4:	250c      	movcc	r5, #12
 800c6e6:	2d00      	cmp	r5, #0
 800c6e8:	4607      	mov	r7, r0
 800c6ea:	db01      	blt.n	800c6f0 <_malloc_r+0x1c>
 800c6ec:	42a9      	cmp	r1, r5
 800c6ee:	d905      	bls.n	800c6fc <_malloc_r+0x28>
 800c6f0:	230c      	movs	r3, #12
 800c6f2:	603b      	str	r3, [r7, #0]
 800c6f4:	2600      	movs	r6, #0
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6fc:	4e2e      	ldr	r6, [pc, #184]	; (800c7b8 <_malloc_r+0xe4>)
 800c6fe:	f001 f813 	bl	800d728 <__malloc_lock>
 800c702:	6833      	ldr	r3, [r6, #0]
 800c704:	461c      	mov	r4, r3
 800c706:	bb34      	cbnz	r4, 800c756 <_malloc_r+0x82>
 800c708:	4629      	mov	r1, r5
 800c70a:	4638      	mov	r0, r7
 800c70c:	f7ff ffc2 	bl	800c694 <sbrk_aligned>
 800c710:	1c43      	adds	r3, r0, #1
 800c712:	4604      	mov	r4, r0
 800c714:	d14d      	bne.n	800c7b2 <_malloc_r+0xde>
 800c716:	6834      	ldr	r4, [r6, #0]
 800c718:	4626      	mov	r6, r4
 800c71a:	2e00      	cmp	r6, #0
 800c71c:	d140      	bne.n	800c7a0 <_malloc_r+0xcc>
 800c71e:	6823      	ldr	r3, [r4, #0]
 800c720:	4631      	mov	r1, r6
 800c722:	4638      	mov	r0, r7
 800c724:	eb04 0803 	add.w	r8, r4, r3
 800c728:	f000 fce2 	bl	800d0f0 <_sbrk_r>
 800c72c:	4580      	cmp	r8, r0
 800c72e:	d13a      	bne.n	800c7a6 <_malloc_r+0xd2>
 800c730:	6821      	ldr	r1, [r4, #0]
 800c732:	3503      	adds	r5, #3
 800c734:	1a6d      	subs	r5, r5, r1
 800c736:	f025 0503 	bic.w	r5, r5, #3
 800c73a:	3508      	adds	r5, #8
 800c73c:	2d0c      	cmp	r5, #12
 800c73e:	bf38      	it	cc
 800c740:	250c      	movcc	r5, #12
 800c742:	4629      	mov	r1, r5
 800c744:	4638      	mov	r0, r7
 800c746:	f7ff ffa5 	bl	800c694 <sbrk_aligned>
 800c74a:	3001      	adds	r0, #1
 800c74c:	d02b      	beq.n	800c7a6 <_malloc_r+0xd2>
 800c74e:	6823      	ldr	r3, [r4, #0]
 800c750:	442b      	add	r3, r5
 800c752:	6023      	str	r3, [r4, #0]
 800c754:	e00e      	b.n	800c774 <_malloc_r+0xa0>
 800c756:	6822      	ldr	r2, [r4, #0]
 800c758:	1b52      	subs	r2, r2, r5
 800c75a:	d41e      	bmi.n	800c79a <_malloc_r+0xc6>
 800c75c:	2a0b      	cmp	r2, #11
 800c75e:	d916      	bls.n	800c78e <_malloc_r+0xba>
 800c760:	1961      	adds	r1, r4, r5
 800c762:	42a3      	cmp	r3, r4
 800c764:	6025      	str	r5, [r4, #0]
 800c766:	bf18      	it	ne
 800c768:	6059      	strne	r1, [r3, #4]
 800c76a:	6863      	ldr	r3, [r4, #4]
 800c76c:	bf08      	it	eq
 800c76e:	6031      	streq	r1, [r6, #0]
 800c770:	5162      	str	r2, [r4, r5]
 800c772:	604b      	str	r3, [r1, #4]
 800c774:	4638      	mov	r0, r7
 800c776:	f104 060b 	add.w	r6, r4, #11
 800c77a:	f000 ffdb 	bl	800d734 <__malloc_unlock>
 800c77e:	f026 0607 	bic.w	r6, r6, #7
 800c782:	1d23      	adds	r3, r4, #4
 800c784:	1af2      	subs	r2, r6, r3
 800c786:	d0b6      	beq.n	800c6f6 <_malloc_r+0x22>
 800c788:	1b9b      	subs	r3, r3, r6
 800c78a:	50a3      	str	r3, [r4, r2]
 800c78c:	e7b3      	b.n	800c6f6 <_malloc_r+0x22>
 800c78e:	6862      	ldr	r2, [r4, #4]
 800c790:	42a3      	cmp	r3, r4
 800c792:	bf0c      	ite	eq
 800c794:	6032      	streq	r2, [r6, #0]
 800c796:	605a      	strne	r2, [r3, #4]
 800c798:	e7ec      	b.n	800c774 <_malloc_r+0xa0>
 800c79a:	4623      	mov	r3, r4
 800c79c:	6864      	ldr	r4, [r4, #4]
 800c79e:	e7b2      	b.n	800c706 <_malloc_r+0x32>
 800c7a0:	4634      	mov	r4, r6
 800c7a2:	6876      	ldr	r6, [r6, #4]
 800c7a4:	e7b9      	b.n	800c71a <_malloc_r+0x46>
 800c7a6:	230c      	movs	r3, #12
 800c7a8:	603b      	str	r3, [r7, #0]
 800c7aa:	4638      	mov	r0, r7
 800c7ac:	f000 ffc2 	bl	800d734 <__malloc_unlock>
 800c7b0:	e7a1      	b.n	800c6f6 <_malloc_r+0x22>
 800c7b2:	6025      	str	r5, [r4, #0]
 800c7b4:	e7de      	b.n	800c774 <_malloc_r+0xa0>
 800c7b6:	bf00      	nop
 800c7b8:	200006cc 	.word	0x200006cc

0800c7bc <__ssputs_r>:
 800c7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7c0:	688e      	ldr	r6, [r1, #8]
 800c7c2:	429e      	cmp	r6, r3
 800c7c4:	4682      	mov	sl, r0
 800c7c6:	460c      	mov	r4, r1
 800c7c8:	4690      	mov	r8, r2
 800c7ca:	461f      	mov	r7, r3
 800c7cc:	d838      	bhi.n	800c840 <__ssputs_r+0x84>
 800c7ce:	898a      	ldrh	r2, [r1, #12]
 800c7d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c7d4:	d032      	beq.n	800c83c <__ssputs_r+0x80>
 800c7d6:	6825      	ldr	r5, [r4, #0]
 800c7d8:	6909      	ldr	r1, [r1, #16]
 800c7da:	eba5 0901 	sub.w	r9, r5, r1
 800c7de:	6965      	ldr	r5, [r4, #20]
 800c7e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c7e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c7e8:	3301      	adds	r3, #1
 800c7ea:	444b      	add	r3, r9
 800c7ec:	106d      	asrs	r5, r5, #1
 800c7ee:	429d      	cmp	r5, r3
 800c7f0:	bf38      	it	cc
 800c7f2:	461d      	movcc	r5, r3
 800c7f4:	0553      	lsls	r3, r2, #21
 800c7f6:	d531      	bpl.n	800c85c <__ssputs_r+0xa0>
 800c7f8:	4629      	mov	r1, r5
 800c7fa:	f7ff ff6b 	bl	800c6d4 <_malloc_r>
 800c7fe:	4606      	mov	r6, r0
 800c800:	b950      	cbnz	r0, 800c818 <__ssputs_r+0x5c>
 800c802:	230c      	movs	r3, #12
 800c804:	f8ca 3000 	str.w	r3, [sl]
 800c808:	89a3      	ldrh	r3, [r4, #12]
 800c80a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c80e:	81a3      	strh	r3, [r4, #12]
 800c810:	f04f 30ff 	mov.w	r0, #4294967295
 800c814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c818:	6921      	ldr	r1, [r4, #16]
 800c81a:	464a      	mov	r2, r9
 800c81c:	f7fc f9f8 	bl	8008c10 <memcpy>
 800c820:	89a3      	ldrh	r3, [r4, #12]
 800c822:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c82a:	81a3      	strh	r3, [r4, #12]
 800c82c:	6126      	str	r6, [r4, #16]
 800c82e:	6165      	str	r5, [r4, #20]
 800c830:	444e      	add	r6, r9
 800c832:	eba5 0509 	sub.w	r5, r5, r9
 800c836:	6026      	str	r6, [r4, #0]
 800c838:	60a5      	str	r5, [r4, #8]
 800c83a:	463e      	mov	r6, r7
 800c83c:	42be      	cmp	r6, r7
 800c83e:	d900      	bls.n	800c842 <__ssputs_r+0x86>
 800c840:	463e      	mov	r6, r7
 800c842:	6820      	ldr	r0, [r4, #0]
 800c844:	4632      	mov	r2, r6
 800c846:	4641      	mov	r1, r8
 800c848:	f000 ff54 	bl	800d6f4 <memmove>
 800c84c:	68a3      	ldr	r3, [r4, #8]
 800c84e:	1b9b      	subs	r3, r3, r6
 800c850:	60a3      	str	r3, [r4, #8]
 800c852:	6823      	ldr	r3, [r4, #0]
 800c854:	4433      	add	r3, r6
 800c856:	6023      	str	r3, [r4, #0]
 800c858:	2000      	movs	r0, #0
 800c85a:	e7db      	b.n	800c814 <__ssputs_r+0x58>
 800c85c:	462a      	mov	r2, r5
 800c85e:	f000 ff6f 	bl	800d740 <_realloc_r>
 800c862:	4606      	mov	r6, r0
 800c864:	2800      	cmp	r0, #0
 800c866:	d1e1      	bne.n	800c82c <__ssputs_r+0x70>
 800c868:	6921      	ldr	r1, [r4, #16]
 800c86a:	4650      	mov	r0, sl
 800c86c:	f7ff fec6 	bl	800c5fc <_free_r>
 800c870:	e7c7      	b.n	800c802 <__ssputs_r+0x46>
	...

0800c874 <_svfiprintf_r>:
 800c874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c878:	4698      	mov	r8, r3
 800c87a:	898b      	ldrh	r3, [r1, #12]
 800c87c:	061b      	lsls	r3, r3, #24
 800c87e:	b09d      	sub	sp, #116	; 0x74
 800c880:	4607      	mov	r7, r0
 800c882:	460d      	mov	r5, r1
 800c884:	4614      	mov	r4, r2
 800c886:	d50e      	bpl.n	800c8a6 <_svfiprintf_r+0x32>
 800c888:	690b      	ldr	r3, [r1, #16]
 800c88a:	b963      	cbnz	r3, 800c8a6 <_svfiprintf_r+0x32>
 800c88c:	2140      	movs	r1, #64	; 0x40
 800c88e:	f7ff ff21 	bl	800c6d4 <_malloc_r>
 800c892:	6028      	str	r0, [r5, #0]
 800c894:	6128      	str	r0, [r5, #16]
 800c896:	b920      	cbnz	r0, 800c8a2 <_svfiprintf_r+0x2e>
 800c898:	230c      	movs	r3, #12
 800c89a:	603b      	str	r3, [r7, #0]
 800c89c:	f04f 30ff 	mov.w	r0, #4294967295
 800c8a0:	e0d1      	b.n	800ca46 <_svfiprintf_r+0x1d2>
 800c8a2:	2340      	movs	r3, #64	; 0x40
 800c8a4:	616b      	str	r3, [r5, #20]
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	9309      	str	r3, [sp, #36]	; 0x24
 800c8aa:	2320      	movs	r3, #32
 800c8ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8b4:	2330      	movs	r3, #48	; 0x30
 800c8b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ca60 <_svfiprintf_r+0x1ec>
 800c8ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8be:	f04f 0901 	mov.w	r9, #1
 800c8c2:	4623      	mov	r3, r4
 800c8c4:	469a      	mov	sl, r3
 800c8c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8ca:	b10a      	cbz	r2, 800c8d0 <_svfiprintf_r+0x5c>
 800c8cc:	2a25      	cmp	r2, #37	; 0x25
 800c8ce:	d1f9      	bne.n	800c8c4 <_svfiprintf_r+0x50>
 800c8d0:	ebba 0b04 	subs.w	fp, sl, r4
 800c8d4:	d00b      	beq.n	800c8ee <_svfiprintf_r+0x7a>
 800c8d6:	465b      	mov	r3, fp
 800c8d8:	4622      	mov	r2, r4
 800c8da:	4629      	mov	r1, r5
 800c8dc:	4638      	mov	r0, r7
 800c8de:	f7ff ff6d 	bl	800c7bc <__ssputs_r>
 800c8e2:	3001      	adds	r0, #1
 800c8e4:	f000 80aa 	beq.w	800ca3c <_svfiprintf_r+0x1c8>
 800c8e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8ea:	445a      	add	r2, fp
 800c8ec:	9209      	str	r2, [sp, #36]	; 0x24
 800c8ee:	f89a 3000 	ldrb.w	r3, [sl]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	f000 80a2 	beq.w	800ca3c <_svfiprintf_r+0x1c8>
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	f04f 32ff 	mov.w	r2, #4294967295
 800c8fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c902:	f10a 0a01 	add.w	sl, sl, #1
 800c906:	9304      	str	r3, [sp, #16]
 800c908:	9307      	str	r3, [sp, #28]
 800c90a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c90e:	931a      	str	r3, [sp, #104]	; 0x68
 800c910:	4654      	mov	r4, sl
 800c912:	2205      	movs	r2, #5
 800c914:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c918:	4851      	ldr	r0, [pc, #324]	; (800ca60 <_svfiprintf_r+0x1ec>)
 800c91a:	f7f3 fc61 	bl	80001e0 <memchr>
 800c91e:	9a04      	ldr	r2, [sp, #16]
 800c920:	b9d8      	cbnz	r0, 800c95a <_svfiprintf_r+0xe6>
 800c922:	06d0      	lsls	r0, r2, #27
 800c924:	bf44      	itt	mi
 800c926:	2320      	movmi	r3, #32
 800c928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c92c:	0711      	lsls	r1, r2, #28
 800c92e:	bf44      	itt	mi
 800c930:	232b      	movmi	r3, #43	; 0x2b
 800c932:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c936:	f89a 3000 	ldrb.w	r3, [sl]
 800c93a:	2b2a      	cmp	r3, #42	; 0x2a
 800c93c:	d015      	beq.n	800c96a <_svfiprintf_r+0xf6>
 800c93e:	9a07      	ldr	r2, [sp, #28]
 800c940:	4654      	mov	r4, sl
 800c942:	2000      	movs	r0, #0
 800c944:	f04f 0c0a 	mov.w	ip, #10
 800c948:	4621      	mov	r1, r4
 800c94a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c94e:	3b30      	subs	r3, #48	; 0x30
 800c950:	2b09      	cmp	r3, #9
 800c952:	d94e      	bls.n	800c9f2 <_svfiprintf_r+0x17e>
 800c954:	b1b0      	cbz	r0, 800c984 <_svfiprintf_r+0x110>
 800c956:	9207      	str	r2, [sp, #28]
 800c958:	e014      	b.n	800c984 <_svfiprintf_r+0x110>
 800c95a:	eba0 0308 	sub.w	r3, r0, r8
 800c95e:	fa09 f303 	lsl.w	r3, r9, r3
 800c962:	4313      	orrs	r3, r2
 800c964:	9304      	str	r3, [sp, #16]
 800c966:	46a2      	mov	sl, r4
 800c968:	e7d2      	b.n	800c910 <_svfiprintf_r+0x9c>
 800c96a:	9b03      	ldr	r3, [sp, #12]
 800c96c:	1d19      	adds	r1, r3, #4
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	9103      	str	r1, [sp, #12]
 800c972:	2b00      	cmp	r3, #0
 800c974:	bfbb      	ittet	lt
 800c976:	425b      	neglt	r3, r3
 800c978:	f042 0202 	orrlt.w	r2, r2, #2
 800c97c:	9307      	strge	r3, [sp, #28]
 800c97e:	9307      	strlt	r3, [sp, #28]
 800c980:	bfb8      	it	lt
 800c982:	9204      	strlt	r2, [sp, #16]
 800c984:	7823      	ldrb	r3, [r4, #0]
 800c986:	2b2e      	cmp	r3, #46	; 0x2e
 800c988:	d10c      	bne.n	800c9a4 <_svfiprintf_r+0x130>
 800c98a:	7863      	ldrb	r3, [r4, #1]
 800c98c:	2b2a      	cmp	r3, #42	; 0x2a
 800c98e:	d135      	bne.n	800c9fc <_svfiprintf_r+0x188>
 800c990:	9b03      	ldr	r3, [sp, #12]
 800c992:	1d1a      	adds	r2, r3, #4
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	9203      	str	r2, [sp, #12]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	bfb8      	it	lt
 800c99c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c9a0:	3402      	adds	r4, #2
 800c9a2:	9305      	str	r3, [sp, #20]
 800c9a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ca70 <_svfiprintf_r+0x1fc>
 800c9a8:	7821      	ldrb	r1, [r4, #0]
 800c9aa:	2203      	movs	r2, #3
 800c9ac:	4650      	mov	r0, sl
 800c9ae:	f7f3 fc17 	bl	80001e0 <memchr>
 800c9b2:	b140      	cbz	r0, 800c9c6 <_svfiprintf_r+0x152>
 800c9b4:	2340      	movs	r3, #64	; 0x40
 800c9b6:	eba0 000a 	sub.w	r0, r0, sl
 800c9ba:	fa03 f000 	lsl.w	r0, r3, r0
 800c9be:	9b04      	ldr	r3, [sp, #16]
 800c9c0:	4303      	orrs	r3, r0
 800c9c2:	3401      	adds	r4, #1
 800c9c4:	9304      	str	r3, [sp, #16]
 800c9c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9ca:	4826      	ldr	r0, [pc, #152]	; (800ca64 <_svfiprintf_r+0x1f0>)
 800c9cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9d0:	2206      	movs	r2, #6
 800c9d2:	f7f3 fc05 	bl	80001e0 <memchr>
 800c9d6:	2800      	cmp	r0, #0
 800c9d8:	d038      	beq.n	800ca4c <_svfiprintf_r+0x1d8>
 800c9da:	4b23      	ldr	r3, [pc, #140]	; (800ca68 <_svfiprintf_r+0x1f4>)
 800c9dc:	bb1b      	cbnz	r3, 800ca26 <_svfiprintf_r+0x1b2>
 800c9de:	9b03      	ldr	r3, [sp, #12]
 800c9e0:	3307      	adds	r3, #7
 800c9e2:	f023 0307 	bic.w	r3, r3, #7
 800c9e6:	3308      	adds	r3, #8
 800c9e8:	9303      	str	r3, [sp, #12]
 800c9ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9ec:	4433      	add	r3, r6
 800c9ee:	9309      	str	r3, [sp, #36]	; 0x24
 800c9f0:	e767      	b.n	800c8c2 <_svfiprintf_r+0x4e>
 800c9f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9f6:	460c      	mov	r4, r1
 800c9f8:	2001      	movs	r0, #1
 800c9fa:	e7a5      	b.n	800c948 <_svfiprintf_r+0xd4>
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	3401      	adds	r4, #1
 800ca00:	9305      	str	r3, [sp, #20]
 800ca02:	4619      	mov	r1, r3
 800ca04:	f04f 0c0a 	mov.w	ip, #10
 800ca08:	4620      	mov	r0, r4
 800ca0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca0e:	3a30      	subs	r2, #48	; 0x30
 800ca10:	2a09      	cmp	r2, #9
 800ca12:	d903      	bls.n	800ca1c <_svfiprintf_r+0x1a8>
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d0c5      	beq.n	800c9a4 <_svfiprintf_r+0x130>
 800ca18:	9105      	str	r1, [sp, #20]
 800ca1a:	e7c3      	b.n	800c9a4 <_svfiprintf_r+0x130>
 800ca1c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca20:	4604      	mov	r4, r0
 800ca22:	2301      	movs	r3, #1
 800ca24:	e7f0      	b.n	800ca08 <_svfiprintf_r+0x194>
 800ca26:	ab03      	add	r3, sp, #12
 800ca28:	9300      	str	r3, [sp, #0]
 800ca2a:	462a      	mov	r2, r5
 800ca2c:	4b0f      	ldr	r3, [pc, #60]	; (800ca6c <_svfiprintf_r+0x1f8>)
 800ca2e:	a904      	add	r1, sp, #16
 800ca30:	4638      	mov	r0, r7
 800ca32:	f7fc f9a3 	bl	8008d7c <_printf_float>
 800ca36:	1c42      	adds	r2, r0, #1
 800ca38:	4606      	mov	r6, r0
 800ca3a:	d1d6      	bne.n	800c9ea <_svfiprintf_r+0x176>
 800ca3c:	89ab      	ldrh	r3, [r5, #12]
 800ca3e:	065b      	lsls	r3, r3, #25
 800ca40:	f53f af2c 	bmi.w	800c89c <_svfiprintf_r+0x28>
 800ca44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca46:	b01d      	add	sp, #116	; 0x74
 800ca48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca4c:	ab03      	add	r3, sp, #12
 800ca4e:	9300      	str	r3, [sp, #0]
 800ca50:	462a      	mov	r2, r5
 800ca52:	4b06      	ldr	r3, [pc, #24]	; (800ca6c <_svfiprintf_r+0x1f8>)
 800ca54:	a904      	add	r1, sp, #16
 800ca56:	4638      	mov	r0, r7
 800ca58:	f7fc fc34 	bl	80092c4 <_printf_i>
 800ca5c:	e7eb      	b.n	800ca36 <_svfiprintf_r+0x1c2>
 800ca5e:	bf00      	nop
 800ca60:	0800fa64 	.word	0x0800fa64
 800ca64:	0800fa6e 	.word	0x0800fa6e
 800ca68:	08008d7d 	.word	0x08008d7d
 800ca6c:	0800c7bd 	.word	0x0800c7bd
 800ca70:	0800fa6a 	.word	0x0800fa6a

0800ca74 <_sungetc_r>:
 800ca74:	b538      	push	{r3, r4, r5, lr}
 800ca76:	1c4b      	adds	r3, r1, #1
 800ca78:	4614      	mov	r4, r2
 800ca7a:	d103      	bne.n	800ca84 <_sungetc_r+0x10>
 800ca7c:	f04f 35ff 	mov.w	r5, #4294967295
 800ca80:	4628      	mov	r0, r5
 800ca82:	bd38      	pop	{r3, r4, r5, pc}
 800ca84:	8993      	ldrh	r3, [r2, #12]
 800ca86:	f023 0320 	bic.w	r3, r3, #32
 800ca8a:	8193      	strh	r3, [r2, #12]
 800ca8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca8e:	6852      	ldr	r2, [r2, #4]
 800ca90:	b2cd      	uxtb	r5, r1
 800ca92:	b18b      	cbz	r3, 800cab8 <_sungetc_r+0x44>
 800ca94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ca96:	4293      	cmp	r3, r2
 800ca98:	dd08      	ble.n	800caac <_sungetc_r+0x38>
 800ca9a:	6823      	ldr	r3, [r4, #0]
 800ca9c:	1e5a      	subs	r2, r3, #1
 800ca9e:	6022      	str	r2, [r4, #0]
 800caa0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800caa4:	6863      	ldr	r3, [r4, #4]
 800caa6:	3301      	adds	r3, #1
 800caa8:	6063      	str	r3, [r4, #4]
 800caaa:	e7e9      	b.n	800ca80 <_sungetc_r+0xc>
 800caac:	4621      	mov	r1, r4
 800caae:	f000 fbef 	bl	800d290 <__submore>
 800cab2:	2800      	cmp	r0, #0
 800cab4:	d0f1      	beq.n	800ca9a <_sungetc_r+0x26>
 800cab6:	e7e1      	b.n	800ca7c <_sungetc_r+0x8>
 800cab8:	6921      	ldr	r1, [r4, #16]
 800caba:	6823      	ldr	r3, [r4, #0]
 800cabc:	b151      	cbz	r1, 800cad4 <_sungetc_r+0x60>
 800cabe:	4299      	cmp	r1, r3
 800cac0:	d208      	bcs.n	800cad4 <_sungetc_r+0x60>
 800cac2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800cac6:	42a9      	cmp	r1, r5
 800cac8:	d104      	bne.n	800cad4 <_sungetc_r+0x60>
 800caca:	3b01      	subs	r3, #1
 800cacc:	3201      	adds	r2, #1
 800cace:	6023      	str	r3, [r4, #0]
 800cad0:	6062      	str	r2, [r4, #4]
 800cad2:	e7d5      	b.n	800ca80 <_sungetc_r+0xc>
 800cad4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800cad8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cadc:	6363      	str	r3, [r4, #52]	; 0x34
 800cade:	2303      	movs	r3, #3
 800cae0:	63a3      	str	r3, [r4, #56]	; 0x38
 800cae2:	4623      	mov	r3, r4
 800cae4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800cae8:	6023      	str	r3, [r4, #0]
 800caea:	2301      	movs	r3, #1
 800caec:	e7dc      	b.n	800caa8 <_sungetc_r+0x34>

0800caee <__ssrefill_r>:
 800caee:	b510      	push	{r4, lr}
 800caf0:	460c      	mov	r4, r1
 800caf2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800caf4:	b169      	cbz	r1, 800cb12 <__ssrefill_r+0x24>
 800caf6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cafa:	4299      	cmp	r1, r3
 800cafc:	d001      	beq.n	800cb02 <__ssrefill_r+0x14>
 800cafe:	f7ff fd7d 	bl	800c5fc <_free_r>
 800cb02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb04:	6063      	str	r3, [r4, #4]
 800cb06:	2000      	movs	r0, #0
 800cb08:	6360      	str	r0, [r4, #52]	; 0x34
 800cb0a:	b113      	cbz	r3, 800cb12 <__ssrefill_r+0x24>
 800cb0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cb0e:	6023      	str	r3, [r4, #0]
 800cb10:	bd10      	pop	{r4, pc}
 800cb12:	6923      	ldr	r3, [r4, #16]
 800cb14:	6023      	str	r3, [r4, #0]
 800cb16:	2300      	movs	r3, #0
 800cb18:	6063      	str	r3, [r4, #4]
 800cb1a:	89a3      	ldrh	r3, [r4, #12]
 800cb1c:	f043 0320 	orr.w	r3, r3, #32
 800cb20:	81a3      	strh	r3, [r4, #12]
 800cb22:	f04f 30ff 	mov.w	r0, #4294967295
 800cb26:	e7f3      	b.n	800cb10 <__ssrefill_r+0x22>

0800cb28 <__ssvfiscanf_r>:
 800cb28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb2c:	460c      	mov	r4, r1
 800cb2e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800cb32:	2100      	movs	r1, #0
 800cb34:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800cb38:	49a6      	ldr	r1, [pc, #664]	; (800cdd4 <__ssvfiscanf_r+0x2ac>)
 800cb3a:	91a0      	str	r1, [sp, #640]	; 0x280
 800cb3c:	f10d 0804 	add.w	r8, sp, #4
 800cb40:	49a5      	ldr	r1, [pc, #660]	; (800cdd8 <__ssvfiscanf_r+0x2b0>)
 800cb42:	4fa6      	ldr	r7, [pc, #664]	; (800cddc <__ssvfiscanf_r+0x2b4>)
 800cb44:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800cde0 <__ssvfiscanf_r+0x2b8>
 800cb48:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800cb4c:	4606      	mov	r6, r0
 800cb4e:	91a1      	str	r1, [sp, #644]	; 0x284
 800cb50:	9300      	str	r3, [sp, #0]
 800cb52:	7813      	ldrb	r3, [r2, #0]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	f000 815a 	beq.w	800ce0e <__ssvfiscanf_r+0x2e6>
 800cb5a:	5dd9      	ldrb	r1, [r3, r7]
 800cb5c:	f011 0108 	ands.w	r1, r1, #8
 800cb60:	f102 0501 	add.w	r5, r2, #1
 800cb64:	d019      	beq.n	800cb9a <__ssvfiscanf_r+0x72>
 800cb66:	6863      	ldr	r3, [r4, #4]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	dd0f      	ble.n	800cb8c <__ssvfiscanf_r+0x64>
 800cb6c:	6823      	ldr	r3, [r4, #0]
 800cb6e:	781a      	ldrb	r2, [r3, #0]
 800cb70:	5cba      	ldrb	r2, [r7, r2]
 800cb72:	0712      	lsls	r2, r2, #28
 800cb74:	d401      	bmi.n	800cb7a <__ssvfiscanf_r+0x52>
 800cb76:	462a      	mov	r2, r5
 800cb78:	e7eb      	b.n	800cb52 <__ssvfiscanf_r+0x2a>
 800cb7a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cb7c:	3201      	adds	r2, #1
 800cb7e:	9245      	str	r2, [sp, #276]	; 0x114
 800cb80:	6862      	ldr	r2, [r4, #4]
 800cb82:	3301      	adds	r3, #1
 800cb84:	3a01      	subs	r2, #1
 800cb86:	6062      	str	r2, [r4, #4]
 800cb88:	6023      	str	r3, [r4, #0]
 800cb8a:	e7ec      	b.n	800cb66 <__ssvfiscanf_r+0x3e>
 800cb8c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cb8e:	4621      	mov	r1, r4
 800cb90:	4630      	mov	r0, r6
 800cb92:	4798      	blx	r3
 800cb94:	2800      	cmp	r0, #0
 800cb96:	d0e9      	beq.n	800cb6c <__ssvfiscanf_r+0x44>
 800cb98:	e7ed      	b.n	800cb76 <__ssvfiscanf_r+0x4e>
 800cb9a:	2b25      	cmp	r3, #37	; 0x25
 800cb9c:	d012      	beq.n	800cbc4 <__ssvfiscanf_r+0x9c>
 800cb9e:	469a      	mov	sl, r3
 800cba0:	6863      	ldr	r3, [r4, #4]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	f340 8091 	ble.w	800ccca <__ssvfiscanf_r+0x1a2>
 800cba8:	6822      	ldr	r2, [r4, #0]
 800cbaa:	7813      	ldrb	r3, [r2, #0]
 800cbac:	4553      	cmp	r3, sl
 800cbae:	f040 812e 	bne.w	800ce0e <__ssvfiscanf_r+0x2e6>
 800cbb2:	6863      	ldr	r3, [r4, #4]
 800cbb4:	3b01      	subs	r3, #1
 800cbb6:	6063      	str	r3, [r4, #4]
 800cbb8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800cbba:	3201      	adds	r2, #1
 800cbbc:	3301      	adds	r3, #1
 800cbbe:	6022      	str	r2, [r4, #0]
 800cbc0:	9345      	str	r3, [sp, #276]	; 0x114
 800cbc2:	e7d8      	b.n	800cb76 <__ssvfiscanf_r+0x4e>
 800cbc4:	9141      	str	r1, [sp, #260]	; 0x104
 800cbc6:	9143      	str	r1, [sp, #268]	; 0x10c
 800cbc8:	7853      	ldrb	r3, [r2, #1]
 800cbca:	2b2a      	cmp	r3, #42	; 0x2a
 800cbcc:	bf02      	ittt	eq
 800cbce:	2310      	moveq	r3, #16
 800cbd0:	1c95      	addeq	r5, r2, #2
 800cbd2:	9341      	streq	r3, [sp, #260]	; 0x104
 800cbd4:	220a      	movs	r2, #10
 800cbd6:	46aa      	mov	sl, r5
 800cbd8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800cbdc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800cbe0:	2b09      	cmp	r3, #9
 800cbe2:	d91d      	bls.n	800cc20 <__ssvfiscanf_r+0xf8>
 800cbe4:	487e      	ldr	r0, [pc, #504]	; (800cde0 <__ssvfiscanf_r+0x2b8>)
 800cbe6:	2203      	movs	r2, #3
 800cbe8:	f7f3 fafa 	bl	80001e0 <memchr>
 800cbec:	b140      	cbz	r0, 800cc00 <__ssvfiscanf_r+0xd8>
 800cbee:	2301      	movs	r3, #1
 800cbf0:	eba0 0009 	sub.w	r0, r0, r9
 800cbf4:	fa03 f000 	lsl.w	r0, r3, r0
 800cbf8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cbfa:	4318      	orrs	r0, r3
 800cbfc:	9041      	str	r0, [sp, #260]	; 0x104
 800cbfe:	4655      	mov	r5, sl
 800cc00:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cc04:	2b78      	cmp	r3, #120	; 0x78
 800cc06:	d806      	bhi.n	800cc16 <__ssvfiscanf_r+0xee>
 800cc08:	2b57      	cmp	r3, #87	; 0x57
 800cc0a:	d810      	bhi.n	800cc2e <__ssvfiscanf_r+0x106>
 800cc0c:	2b25      	cmp	r3, #37	; 0x25
 800cc0e:	d0c6      	beq.n	800cb9e <__ssvfiscanf_r+0x76>
 800cc10:	d856      	bhi.n	800ccc0 <__ssvfiscanf_r+0x198>
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d064      	beq.n	800cce0 <__ssvfiscanf_r+0x1b8>
 800cc16:	2303      	movs	r3, #3
 800cc18:	9347      	str	r3, [sp, #284]	; 0x11c
 800cc1a:	230a      	movs	r3, #10
 800cc1c:	9342      	str	r3, [sp, #264]	; 0x108
 800cc1e:	e071      	b.n	800cd04 <__ssvfiscanf_r+0x1dc>
 800cc20:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800cc22:	fb02 1103 	mla	r1, r2, r3, r1
 800cc26:	3930      	subs	r1, #48	; 0x30
 800cc28:	9143      	str	r1, [sp, #268]	; 0x10c
 800cc2a:	4655      	mov	r5, sl
 800cc2c:	e7d3      	b.n	800cbd6 <__ssvfiscanf_r+0xae>
 800cc2e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800cc32:	2a20      	cmp	r2, #32
 800cc34:	d8ef      	bhi.n	800cc16 <__ssvfiscanf_r+0xee>
 800cc36:	a101      	add	r1, pc, #4	; (adr r1, 800cc3c <__ssvfiscanf_r+0x114>)
 800cc38:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cc3c:	0800ccef 	.word	0x0800ccef
 800cc40:	0800cc17 	.word	0x0800cc17
 800cc44:	0800cc17 	.word	0x0800cc17
 800cc48:	0800cd4d 	.word	0x0800cd4d
 800cc4c:	0800cc17 	.word	0x0800cc17
 800cc50:	0800cc17 	.word	0x0800cc17
 800cc54:	0800cc17 	.word	0x0800cc17
 800cc58:	0800cc17 	.word	0x0800cc17
 800cc5c:	0800cc17 	.word	0x0800cc17
 800cc60:	0800cc17 	.word	0x0800cc17
 800cc64:	0800cc17 	.word	0x0800cc17
 800cc68:	0800cd63 	.word	0x0800cd63
 800cc6c:	0800cd39 	.word	0x0800cd39
 800cc70:	0800ccc7 	.word	0x0800ccc7
 800cc74:	0800ccc7 	.word	0x0800ccc7
 800cc78:	0800ccc7 	.word	0x0800ccc7
 800cc7c:	0800cc17 	.word	0x0800cc17
 800cc80:	0800cd3d 	.word	0x0800cd3d
 800cc84:	0800cc17 	.word	0x0800cc17
 800cc88:	0800cc17 	.word	0x0800cc17
 800cc8c:	0800cc17 	.word	0x0800cc17
 800cc90:	0800cc17 	.word	0x0800cc17
 800cc94:	0800cd73 	.word	0x0800cd73
 800cc98:	0800cd45 	.word	0x0800cd45
 800cc9c:	0800cce7 	.word	0x0800cce7
 800cca0:	0800cc17 	.word	0x0800cc17
 800cca4:	0800cc17 	.word	0x0800cc17
 800cca8:	0800cd6f 	.word	0x0800cd6f
 800ccac:	0800cc17 	.word	0x0800cc17
 800ccb0:	0800cd39 	.word	0x0800cd39
 800ccb4:	0800cc17 	.word	0x0800cc17
 800ccb8:	0800cc17 	.word	0x0800cc17
 800ccbc:	0800ccef 	.word	0x0800ccef
 800ccc0:	3b45      	subs	r3, #69	; 0x45
 800ccc2:	2b02      	cmp	r3, #2
 800ccc4:	d8a7      	bhi.n	800cc16 <__ssvfiscanf_r+0xee>
 800ccc6:	2305      	movs	r3, #5
 800ccc8:	e01b      	b.n	800cd02 <__ssvfiscanf_r+0x1da>
 800ccca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cccc:	4621      	mov	r1, r4
 800ccce:	4630      	mov	r0, r6
 800ccd0:	4798      	blx	r3
 800ccd2:	2800      	cmp	r0, #0
 800ccd4:	f43f af68 	beq.w	800cba8 <__ssvfiscanf_r+0x80>
 800ccd8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ccda:	2800      	cmp	r0, #0
 800ccdc:	f040 808d 	bne.w	800cdfa <__ssvfiscanf_r+0x2d2>
 800cce0:	f04f 30ff 	mov.w	r0, #4294967295
 800cce4:	e08f      	b.n	800ce06 <__ssvfiscanf_r+0x2de>
 800cce6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cce8:	f042 0220 	orr.w	r2, r2, #32
 800ccec:	9241      	str	r2, [sp, #260]	; 0x104
 800ccee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ccf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ccf4:	9241      	str	r2, [sp, #260]	; 0x104
 800ccf6:	2210      	movs	r2, #16
 800ccf8:	2b6f      	cmp	r3, #111	; 0x6f
 800ccfa:	9242      	str	r2, [sp, #264]	; 0x108
 800ccfc:	bf34      	ite	cc
 800ccfe:	2303      	movcc	r3, #3
 800cd00:	2304      	movcs	r3, #4
 800cd02:	9347      	str	r3, [sp, #284]	; 0x11c
 800cd04:	6863      	ldr	r3, [r4, #4]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	dd42      	ble.n	800cd90 <__ssvfiscanf_r+0x268>
 800cd0a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cd0c:	0659      	lsls	r1, r3, #25
 800cd0e:	d404      	bmi.n	800cd1a <__ssvfiscanf_r+0x1f2>
 800cd10:	6823      	ldr	r3, [r4, #0]
 800cd12:	781a      	ldrb	r2, [r3, #0]
 800cd14:	5cba      	ldrb	r2, [r7, r2]
 800cd16:	0712      	lsls	r2, r2, #28
 800cd18:	d441      	bmi.n	800cd9e <__ssvfiscanf_r+0x276>
 800cd1a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800cd1c:	2b02      	cmp	r3, #2
 800cd1e:	dc50      	bgt.n	800cdc2 <__ssvfiscanf_r+0x29a>
 800cd20:	466b      	mov	r3, sp
 800cd22:	4622      	mov	r2, r4
 800cd24:	a941      	add	r1, sp, #260	; 0x104
 800cd26:	4630      	mov	r0, r6
 800cd28:	f000 f876 	bl	800ce18 <_scanf_chars>
 800cd2c:	2801      	cmp	r0, #1
 800cd2e:	d06e      	beq.n	800ce0e <__ssvfiscanf_r+0x2e6>
 800cd30:	2802      	cmp	r0, #2
 800cd32:	f47f af20 	bne.w	800cb76 <__ssvfiscanf_r+0x4e>
 800cd36:	e7cf      	b.n	800ccd8 <__ssvfiscanf_r+0x1b0>
 800cd38:	220a      	movs	r2, #10
 800cd3a:	e7dd      	b.n	800ccf8 <__ssvfiscanf_r+0x1d0>
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	9342      	str	r3, [sp, #264]	; 0x108
 800cd40:	2303      	movs	r3, #3
 800cd42:	e7de      	b.n	800cd02 <__ssvfiscanf_r+0x1da>
 800cd44:	2308      	movs	r3, #8
 800cd46:	9342      	str	r3, [sp, #264]	; 0x108
 800cd48:	2304      	movs	r3, #4
 800cd4a:	e7da      	b.n	800cd02 <__ssvfiscanf_r+0x1da>
 800cd4c:	4629      	mov	r1, r5
 800cd4e:	4640      	mov	r0, r8
 800cd50:	f000 f9de 	bl	800d110 <__sccl>
 800cd54:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cd56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd5a:	9341      	str	r3, [sp, #260]	; 0x104
 800cd5c:	4605      	mov	r5, r0
 800cd5e:	2301      	movs	r3, #1
 800cd60:	e7cf      	b.n	800cd02 <__ssvfiscanf_r+0x1da>
 800cd62:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cd64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd68:	9341      	str	r3, [sp, #260]	; 0x104
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	e7c9      	b.n	800cd02 <__ssvfiscanf_r+0x1da>
 800cd6e:	2302      	movs	r3, #2
 800cd70:	e7c7      	b.n	800cd02 <__ssvfiscanf_r+0x1da>
 800cd72:	9841      	ldr	r0, [sp, #260]	; 0x104
 800cd74:	06c3      	lsls	r3, r0, #27
 800cd76:	f53f aefe 	bmi.w	800cb76 <__ssvfiscanf_r+0x4e>
 800cd7a:	9b00      	ldr	r3, [sp, #0]
 800cd7c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cd7e:	1d19      	adds	r1, r3, #4
 800cd80:	9100      	str	r1, [sp, #0]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f010 0f01 	tst.w	r0, #1
 800cd88:	bf14      	ite	ne
 800cd8a:	801a      	strhne	r2, [r3, #0]
 800cd8c:	601a      	streq	r2, [r3, #0]
 800cd8e:	e6f2      	b.n	800cb76 <__ssvfiscanf_r+0x4e>
 800cd90:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cd92:	4621      	mov	r1, r4
 800cd94:	4630      	mov	r0, r6
 800cd96:	4798      	blx	r3
 800cd98:	2800      	cmp	r0, #0
 800cd9a:	d0b6      	beq.n	800cd0a <__ssvfiscanf_r+0x1e2>
 800cd9c:	e79c      	b.n	800ccd8 <__ssvfiscanf_r+0x1b0>
 800cd9e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cda0:	3201      	adds	r2, #1
 800cda2:	9245      	str	r2, [sp, #276]	; 0x114
 800cda4:	6862      	ldr	r2, [r4, #4]
 800cda6:	3a01      	subs	r2, #1
 800cda8:	2a00      	cmp	r2, #0
 800cdaa:	6062      	str	r2, [r4, #4]
 800cdac:	dd02      	ble.n	800cdb4 <__ssvfiscanf_r+0x28c>
 800cdae:	3301      	adds	r3, #1
 800cdb0:	6023      	str	r3, [r4, #0]
 800cdb2:	e7ad      	b.n	800cd10 <__ssvfiscanf_r+0x1e8>
 800cdb4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cdb6:	4621      	mov	r1, r4
 800cdb8:	4630      	mov	r0, r6
 800cdba:	4798      	blx	r3
 800cdbc:	2800      	cmp	r0, #0
 800cdbe:	d0a7      	beq.n	800cd10 <__ssvfiscanf_r+0x1e8>
 800cdc0:	e78a      	b.n	800ccd8 <__ssvfiscanf_r+0x1b0>
 800cdc2:	2b04      	cmp	r3, #4
 800cdc4:	dc0e      	bgt.n	800cde4 <__ssvfiscanf_r+0x2bc>
 800cdc6:	466b      	mov	r3, sp
 800cdc8:	4622      	mov	r2, r4
 800cdca:	a941      	add	r1, sp, #260	; 0x104
 800cdcc:	4630      	mov	r0, r6
 800cdce:	f000 f87d 	bl	800cecc <_scanf_i>
 800cdd2:	e7ab      	b.n	800cd2c <__ssvfiscanf_r+0x204>
 800cdd4:	0800ca75 	.word	0x0800ca75
 800cdd8:	0800caef 	.word	0x0800caef
 800cddc:	0800f701 	.word	0x0800f701
 800cde0:	0800fa6a 	.word	0x0800fa6a
 800cde4:	4b0b      	ldr	r3, [pc, #44]	; (800ce14 <__ssvfiscanf_r+0x2ec>)
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	f43f aec5 	beq.w	800cb76 <__ssvfiscanf_r+0x4e>
 800cdec:	466b      	mov	r3, sp
 800cdee:	4622      	mov	r2, r4
 800cdf0:	a941      	add	r1, sp, #260	; 0x104
 800cdf2:	4630      	mov	r0, r6
 800cdf4:	f7fc fb8c 	bl	8009510 <_scanf_float>
 800cdf8:	e798      	b.n	800cd2c <__ssvfiscanf_r+0x204>
 800cdfa:	89a3      	ldrh	r3, [r4, #12]
 800cdfc:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ce00:	bf18      	it	ne
 800ce02:	f04f 30ff 	movne.w	r0, #4294967295
 800ce06:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800ce0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce0e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ce10:	e7f9      	b.n	800ce06 <__ssvfiscanf_r+0x2de>
 800ce12:	bf00      	nop
 800ce14:	08009511 	.word	0x08009511

0800ce18 <_scanf_chars>:
 800ce18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce1c:	4615      	mov	r5, r2
 800ce1e:	688a      	ldr	r2, [r1, #8]
 800ce20:	4680      	mov	r8, r0
 800ce22:	460c      	mov	r4, r1
 800ce24:	b932      	cbnz	r2, 800ce34 <_scanf_chars+0x1c>
 800ce26:	698a      	ldr	r2, [r1, #24]
 800ce28:	2a00      	cmp	r2, #0
 800ce2a:	bf0c      	ite	eq
 800ce2c:	2201      	moveq	r2, #1
 800ce2e:	f04f 32ff 	movne.w	r2, #4294967295
 800ce32:	608a      	str	r2, [r1, #8]
 800ce34:	6822      	ldr	r2, [r4, #0]
 800ce36:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800cec8 <_scanf_chars+0xb0>
 800ce3a:	06d1      	lsls	r1, r2, #27
 800ce3c:	bf5f      	itttt	pl
 800ce3e:	681a      	ldrpl	r2, [r3, #0]
 800ce40:	1d11      	addpl	r1, r2, #4
 800ce42:	6019      	strpl	r1, [r3, #0]
 800ce44:	6816      	ldrpl	r6, [r2, #0]
 800ce46:	2700      	movs	r7, #0
 800ce48:	69a0      	ldr	r0, [r4, #24]
 800ce4a:	b188      	cbz	r0, 800ce70 <_scanf_chars+0x58>
 800ce4c:	2801      	cmp	r0, #1
 800ce4e:	d107      	bne.n	800ce60 <_scanf_chars+0x48>
 800ce50:	682a      	ldr	r2, [r5, #0]
 800ce52:	7811      	ldrb	r1, [r2, #0]
 800ce54:	6962      	ldr	r2, [r4, #20]
 800ce56:	5c52      	ldrb	r2, [r2, r1]
 800ce58:	b952      	cbnz	r2, 800ce70 <_scanf_chars+0x58>
 800ce5a:	2f00      	cmp	r7, #0
 800ce5c:	d031      	beq.n	800cec2 <_scanf_chars+0xaa>
 800ce5e:	e022      	b.n	800cea6 <_scanf_chars+0x8e>
 800ce60:	2802      	cmp	r0, #2
 800ce62:	d120      	bne.n	800cea6 <_scanf_chars+0x8e>
 800ce64:	682b      	ldr	r3, [r5, #0]
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	f813 3009 	ldrb.w	r3, [r3, r9]
 800ce6c:	071b      	lsls	r3, r3, #28
 800ce6e:	d41a      	bmi.n	800cea6 <_scanf_chars+0x8e>
 800ce70:	6823      	ldr	r3, [r4, #0]
 800ce72:	06da      	lsls	r2, r3, #27
 800ce74:	bf5e      	ittt	pl
 800ce76:	682b      	ldrpl	r3, [r5, #0]
 800ce78:	781b      	ldrbpl	r3, [r3, #0]
 800ce7a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ce7e:	682a      	ldr	r2, [r5, #0]
 800ce80:	686b      	ldr	r3, [r5, #4]
 800ce82:	3201      	adds	r2, #1
 800ce84:	602a      	str	r2, [r5, #0]
 800ce86:	68a2      	ldr	r2, [r4, #8]
 800ce88:	3b01      	subs	r3, #1
 800ce8a:	3a01      	subs	r2, #1
 800ce8c:	606b      	str	r3, [r5, #4]
 800ce8e:	3701      	adds	r7, #1
 800ce90:	60a2      	str	r2, [r4, #8]
 800ce92:	b142      	cbz	r2, 800cea6 <_scanf_chars+0x8e>
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	dcd7      	bgt.n	800ce48 <_scanf_chars+0x30>
 800ce98:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ce9c:	4629      	mov	r1, r5
 800ce9e:	4640      	mov	r0, r8
 800cea0:	4798      	blx	r3
 800cea2:	2800      	cmp	r0, #0
 800cea4:	d0d0      	beq.n	800ce48 <_scanf_chars+0x30>
 800cea6:	6823      	ldr	r3, [r4, #0]
 800cea8:	f013 0310 	ands.w	r3, r3, #16
 800ceac:	d105      	bne.n	800ceba <_scanf_chars+0xa2>
 800ceae:	68e2      	ldr	r2, [r4, #12]
 800ceb0:	3201      	adds	r2, #1
 800ceb2:	60e2      	str	r2, [r4, #12]
 800ceb4:	69a2      	ldr	r2, [r4, #24]
 800ceb6:	b102      	cbz	r2, 800ceba <_scanf_chars+0xa2>
 800ceb8:	7033      	strb	r3, [r6, #0]
 800ceba:	6923      	ldr	r3, [r4, #16]
 800cebc:	443b      	add	r3, r7
 800cebe:	6123      	str	r3, [r4, #16]
 800cec0:	2000      	movs	r0, #0
 800cec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cec6:	bf00      	nop
 800cec8:	0800f701 	.word	0x0800f701

0800cecc <_scanf_i>:
 800cecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ced0:	4698      	mov	r8, r3
 800ced2:	4b76      	ldr	r3, [pc, #472]	; (800d0ac <_scanf_i+0x1e0>)
 800ced4:	460c      	mov	r4, r1
 800ced6:	4682      	mov	sl, r0
 800ced8:	4616      	mov	r6, r2
 800ceda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cede:	b087      	sub	sp, #28
 800cee0:	ab03      	add	r3, sp, #12
 800cee2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cee6:	4b72      	ldr	r3, [pc, #456]	; (800d0b0 <_scanf_i+0x1e4>)
 800cee8:	69a1      	ldr	r1, [r4, #24]
 800ceea:	4a72      	ldr	r2, [pc, #456]	; (800d0b4 <_scanf_i+0x1e8>)
 800ceec:	2903      	cmp	r1, #3
 800ceee:	bf18      	it	ne
 800cef0:	461a      	movne	r2, r3
 800cef2:	68a3      	ldr	r3, [r4, #8]
 800cef4:	9201      	str	r2, [sp, #4]
 800cef6:	1e5a      	subs	r2, r3, #1
 800cef8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cefc:	bf88      	it	hi
 800cefe:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cf02:	4627      	mov	r7, r4
 800cf04:	bf82      	ittt	hi
 800cf06:	eb03 0905 	addhi.w	r9, r3, r5
 800cf0a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cf0e:	60a3      	strhi	r3, [r4, #8]
 800cf10:	f857 3b1c 	ldr.w	r3, [r7], #28
 800cf14:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800cf18:	bf98      	it	ls
 800cf1a:	f04f 0900 	movls.w	r9, #0
 800cf1e:	6023      	str	r3, [r4, #0]
 800cf20:	463d      	mov	r5, r7
 800cf22:	f04f 0b00 	mov.w	fp, #0
 800cf26:	6831      	ldr	r1, [r6, #0]
 800cf28:	ab03      	add	r3, sp, #12
 800cf2a:	7809      	ldrb	r1, [r1, #0]
 800cf2c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800cf30:	2202      	movs	r2, #2
 800cf32:	f7f3 f955 	bl	80001e0 <memchr>
 800cf36:	b328      	cbz	r0, 800cf84 <_scanf_i+0xb8>
 800cf38:	f1bb 0f01 	cmp.w	fp, #1
 800cf3c:	d159      	bne.n	800cff2 <_scanf_i+0x126>
 800cf3e:	6862      	ldr	r2, [r4, #4]
 800cf40:	b92a      	cbnz	r2, 800cf4e <_scanf_i+0x82>
 800cf42:	6822      	ldr	r2, [r4, #0]
 800cf44:	2308      	movs	r3, #8
 800cf46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf4a:	6063      	str	r3, [r4, #4]
 800cf4c:	6022      	str	r2, [r4, #0]
 800cf4e:	6822      	ldr	r2, [r4, #0]
 800cf50:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800cf54:	6022      	str	r2, [r4, #0]
 800cf56:	68a2      	ldr	r2, [r4, #8]
 800cf58:	1e51      	subs	r1, r2, #1
 800cf5a:	60a1      	str	r1, [r4, #8]
 800cf5c:	b192      	cbz	r2, 800cf84 <_scanf_i+0xb8>
 800cf5e:	6832      	ldr	r2, [r6, #0]
 800cf60:	1c51      	adds	r1, r2, #1
 800cf62:	6031      	str	r1, [r6, #0]
 800cf64:	7812      	ldrb	r2, [r2, #0]
 800cf66:	f805 2b01 	strb.w	r2, [r5], #1
 800cf6a:	6872      	ldr	r2, [r6, #4]
 800cf6c:	3a01      	subs	r2, #1
 800cf6e:	2a00      	cmp	r2, #0
 800cf70:	6072      	str	r2, [r6, #4]
 800cf72:	dc07      	bgt.n	800cf84 <_scanf_i+0xb8>
 800cf74:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800cf78:	4631      	mov	r1, r6
 800cf7a:	4650      	mov	r0, sl
 800cf7c:	4790      	blx	r2
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	f040 8085 	bne.w	800d08e <_scanf_i+0x1c2>
 800cf84:	f10b 0b01 	add.w	fp, fp, #1
 800cf88:	f1bb 0f03 	cmp.w	fp, #3
 800cf8c:	d1cb      	bne.n	800cf26 <_scanf_i+0x5a>
 800cf8e:	6863      	ldr	r3, [r4, #4]
 800cf90:	b90b      	cbnz	r3, 800cf96 <_scanf_i+0xca>
 800cf92:	230a      	movs	r3, #10
 800cf94:	6063      	str	r3, [r4, #4]
 800cf96:	6863      	ldr	r3, [r4, #4]
 800cf98:	4947      	ldr	r1, [pc, #284]	; (800d0b8 <_scanf_i+0x1ec>)
 800cf9a:	6960      	ldr	r0, [r4, #20]
 800cf9c:	1ac9      	subs	r1, r1, r3
 800cf9e:	f000 f8b7 	bl	800d110 <__sccl>
 800cfa2:	f04f 0b00 	mov.w	fp, #0
 800cfa6:	68a3      	ldr	r3, [r4, #8]
 800cfa8:	6822      	ldr	r2, [r4, #0]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d03d      	beq.n	800d02a <_scanf_i+0x15e>
 800cfae:	6831      	ldr	r1, [r6, #0]
 800cfb0:	6960      	ldr	r0, [r4, #20]
 800cfb2:	f891 c000 	ldrb.w	ip, [r1]
 800cfb6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cfba:	2800      	cmp	r0, #0
 800cfbc:	d035      	beq.n	800d02a <_scanf_i+0x15e>
 800cfbe:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800cfc2:	d124      	bne.n	800d00e <_scanf_i+0x142>
 800cfc4:	0510      	lsls	r0, r2, #20
 800cfc6:	d522      	bpl.n	800d00e <_scanf_i+0x142>
 800cfc8:	f10b 0b01 	add.w	fp, fp, #1
 800cfcc:	f1b9 0f00 	cmp.w	r9, #0
 800cfd0:	d003      	beq.n	800cfda <_scanf_i+0x10e>
 800cfd2:	3301      	adds	r3, #1
 800cfd4:	f109 39ff 	add.w	r9, r9, #4294967295
 800cfd8:	60a3      	str	r3, [r4, #8]
 800cfda:	6873      	ldr	r3, [r6, #4]
 800cfdc:	3b01      	subs	r3, #1
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	6073      	str	r3, [r6, #4]
 800cfe2:	dd1b      	ble.n	800d01c <_scanf_i+0x150>
 800cfe4:	6833      	ldr	r3, [r6, #0]
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	6033      	str	r3, [r6, #0]
 800cfea:	68a3      	ldr	r3, [r4, #8]
 800cfec:	3b01      	subs	r3, #1
 800cfee:	60a3      	str	r3, [r4, #8]
 800cff0:	e7d9      	b.n	800cfa6 <_scanf_i+0xda>
 800cff2:	f1bb 0f02 	cmp.w	fp, #2
 800cff6:	d1ae      	bne.n	800cf56 <_scanf_i+0x8a>
 800cff8:	6822      	ldr	r2, [r4, #0]
 800cffa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800cffe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d002:	d1bf      	bne.n	800cf84 <_scanf_i+0xb8>
 800d004:	2310      	movs	r3, #16
 800d006:	6063      	str	r3, [r4, #4]
 800d008:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d00c:	e7a2      	b.n	800cf54 <_scanf_i+0x88>
 800d00e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d012:	6022      	str	r2, [r4, #0]
 800d014:	780b      	ldrb	r3, [r1, #0]
 800d016:	f805 3b01 	strb.w	r3, [r5], #1
 800d01a:	e7de      	b.n	800cfda <_scanf_i+0x10e>
 800d01c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d020:	4631      	mov	r1, r6
 800d022:	4650      	mov	r0, sl
 800d024:	4798      	blx	r3
 800d026:	2800      	cmp	r0, #0
 800d028:	d0df      	beq.n	800cfea <_scanf_i+0x11e>
 800d02a:	6823      	ldr	r3, [r4, #0]
 800d02c:	05db      	lsls	r3, r3, #23
 800d02e:	d50d      	bpl.n	800d04c <_scanf_i+0x180>
 800d030:	42bd      	cmp	r5, r7
 800d032:	d909      	bls.n	800d048 <_scanf_i+0x17c>
 800d034:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d038:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d03c:	4632      	mov	r2, r6
 800d03e:	4650      	mov	r0, sl
 800d040:	4798      	blx	r3
 800d042:	f105 39ff 	add.w	r9, r5, #4294967295
 800d046:	464d      	mov	r5, r9
 800d048:	42bd      	cmp	r5, r7
 800d04a:	d02d      	beq.n	800d0a8 <_scanf_i+0x1dc>
 800d04c:	6822      	ldr	r2, [r4, #0]
 800d04e:	f012 0210 	ands.w	r2, r2, #16
 800d052:	d113      	bne.n	800d07c <_scanf_i+0x1b0>
 800d054:	702a      	strb	r2, [r5, #0]
 800d056:	6863      	ldr	r3, [r4, #4]
 800d058:	9e01      	ldr	r6, [sp, #4]
 800d05a:	4639      	mov	r1, r7
 800d05c:	4650      	mov	r0, sl
 800d05e:	47b0      	blx	r6
 800d060:	6821      	ldr	r1, [r4, #0]
 800d062:	f8d8 3000 	ldr.w	r3, [r8]
 800d066:	f011 0f20 	tst.w	r1, #32
 800d06a:	d013      	beq.n	800d094 <_scanf_i+0x1c8>
 800d06c:	1d1a      	adds	r2, r3, #4
 800d06e:	f8c8 2000 	str.w	r2, [r8]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	6018      	str	r0, [r3, #0]
 800d076:	68e3      	ldr	r3, [r4, #12]
 800d078:	3301      	adds	r3, #1
 800d07a:	60e3      	str	r3, [r4, #12]
 800d07c:	1bed      	subs	r5, r5, r7
 800d07e:	44ab      	add	fp, r5
 800d080:	6925      	ldr	r5, [r4, #16]
 800d082:	445d      	add	r5, fp
 800d084:	6125      	str	r5, [r4, #16]
 800d086:	2000      	movs	r0, #0
 800d088:	b007      	add	sp, #28
 800d08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d08e:	f04f 0b00 	mov.w	fp, #0
 800d092:	e7ca      	b.n	800d02a <_scanf_i+0x15e>
 800d094:	1d1a      	adds	r2, r3, #4
 800d096:	f8c8 2000 	str.w	r2, [r8]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	f011 0f01 	tst.w	r1, #1
 800d0a0:	bf14      	ite	ne
 800d0a2:	8018      	strhne	r0, [r3, #0]
 800d0a4:	6018      	streq	r0, [r3, #0]
 800d0a6:	e7e6      	b.n	800d076 <_scanf_i+0x1aa>
 800d0a8:	2001      	movs	r0, #1
 800d0aa:	e7ed      	b.n	800d088 <_scanf_i+0x1bc>
 800d0ac:	0800f620 	.word	0x0800f620
 800d0b0:	0800d28d 	.word	0x0800d28d
 800d0b4:	0800a7cd 	.word	0x0800a7cd
 800d0b8:	0800fa8e 	.word	0x0800fa8e

0800d0bc <_read_r>:
 800d0bc:	b538      	push	{r3, r4, r5, lr}
 800d0be:	4d07      	ldr	r5, [pc, #28]	; (800d0dc <_read_r+0x20>)
 800d0c0:	4604      	mov	r4, r0
 800d0c2:	4608      	mov	r0, r1
 800d0c4:	4611      	mov	r1, r2
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	602a      	str	r2, [r5, #0]
 800d0ca:	461a      	mov	r2, r3
 800d0cc:	f002 fa7e 	bl	800f5cc <_read>
 800d0d0:	1c43      	adds	r3, r0, #1
 800d0d2:	d102      	bne.n	800d0da <_read_r+0x1e>
 800d0d4:	682b      	ldr	r3, [r5, #0]
 800d0d6:	b103      	cbz	r3, 800d0da <_read_r+0x1e>
 800d0d8:	6023      	str	r3, [r4, #0]
 800d0da:	bd38      	pop	{r3, r4, r5, pc}
 800d0dc:	200006d4 	.word	0x200006d4

0800d0e0 <nan>:
 800d0e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d0e8 <nan+0x8>
 800d0e4:	4770      	bx	lr
 800d0e6:	bf00      	nop
 800d0e8:	00000000 	.word	0x00000000
 800d0ec:	7ff80000 	.word	0x7ff80000

0800d0f0 <_sbrk_r>:
 800d0f0:	b538      	push	{r3, r4, r5, lr}
 800d0f2:	4d06      	ldr	r5, [pc, #24]	; (800d10c <_sbrk_r+0x1c>)
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	4604      	mov	r4, r0
 800d0f8:	4608      	mov	r0, r1
 800d0fa:	602b      	str	r3, [r5, #0]
 800d0fc:	f7f5 fa96 	bl	800262c <_sbrk>
 800d100:	1c43      	adds	r3, r0, #1
 800d102:	d102      	bne.n	800d10a <_sbrk_r+0x1a>
 800d104:	682b      	ldr	r3, [r5, #0]
 800d106:	b103      	cbz	r3, 800d10a <_sbrk_r+0x1a>
 800d108:	6023      	str	r3, [r4, #0]
 800d10a:	bd38      	pop	{r3, r4, r5, pc}
 800d10c:	200006d4 	.word	0x200006d4

0800d110 <__sccl>:
 800d110:	b570      	push	{r4, r5, r6, lr}
 800d112:	780b      	ldrb	r3, [r1, #0]
 800d114:	4604      	mov	r4, r0
 800d116:	2b5e      	cmp	r3, #94	; 0x5e
 800d118:	bf0b      	itete	eq
 800d11a:	784b      	ldrbeq	r3, [r1, #1]
 800d11c:	1c48      	addne	r0, r1, #1
 800d11e:	1c88      	addeq	r0, r1, #2
 800d120:	2200      	movne	r2, #0
 800d122:	bf08      	it	eq
 800d124:	2201      	moveq	r2, #1
 800d126:	1e61      	subs	r1, r4, #1
 800d128:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800d12c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800d130:	42a9      	cmp	r1, r5
 800d132:	d1fb      	bne.n	800d12c <__sccl+0x1c>
 800d134:	b90b      	cbnz	r3, 800d13a <__sccl+0x2a>
 800d136:	3801      	subs	r0, #1
 800d138:	bd70      	pop	{r4, r5, r6, pc}
 800d13a:	f082 0201 	eor.w	r2, r2, #1
 800d13e:	54e2      	strb	r2, [r4, r3]
 800d140:	4605      	mov	r5, r0
 800d142:	4628      	mov	r0, r5
 800d144:	f810 1b01 	ldrb.w	r1, [r0], #1
 800d148:	292d      	cmp	r1, #45	; 0x2d
 800d14a:	d006      	beq.n	800d15a <__sccl+0x4a>
 800d14c:	295d      	cmp	r1, #93	; 0x5d
 800d14e:	d0f3      	beq.n	800d138 <__sccl+0x28>
 800d150:	b909      	cbnz	r1, 800d156 <__sccl+0x46>
 800d152:	4628      	mov	r0, r5
 800d154:	e7f0      	b.n	800d138 <__sccl+0x28>
 800d156:	460b      	mov	r3, r1
 800d158:	e7f1      	b.n	800d13e <__sccl+0x2e>
 800d15a:	786e      	ldrb	r6, [r5, #1]
 800d15c:	2e5d      	cmp	r6, #93	; 0x5d
 800d15e:	d0fa      	beq.n	800d156 <__sccl+0x46>
 800d160:	42b3      	cmp	r3, r6
 800d162:	dcf8      	bgt.n	800d156 <__sccl+0x46>
 800d164:	3502      	adds	r5, #2
 800d166:	4619      	mov	r1, r3
 800d168:	3101      	adds	r1, #1
 800d16a:	428e      	cmp	r6, r1
 800d16c:	5462      	strb	r2, [r4, r1]
 800d16e:	dcfb      	bgt.n	800d168 <__sccl+0x58>
 800d170:	1af1      	subs	r1, r6, r3
 800d172:	3901      	subs	r1, #1
 800d174:	1c58      	adds	r0, r3, #1
 800d176:	42b3      	cmp	r3, r6
 800d178:	bfa8      	it	ge
 800d17a:	2100      	movge	r1, #0
 800d17c:	1843      	adds	r3, r0, r1
 800d17e:	e7e0      	b.n	800d142 <__sccl+0x32>

0800d180 <strncmp>:
 800d180:	b510      	push	{r4, lr}
 800d182:	b17a      	cbz	r2, 800d1a4 <strncmp+0x24>
 800d184:	4603      	mov	r3, r0
 800d186:	3901      	subs	r1, #1
 800d188:	1884      	adds	r4, r0, r2
 800d18a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d18e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d192:	4290      	cmp	r0, r2
 800d194:	d101      	bne.n	800d19a <strncmp+0x1a>
 800d196:	42a3      	cmp	r3, r4
 800d198:	d101      	bne.n	800d19e <strncmp+0x1e>
 800d19a:	1a80      	subs	r0, r0, r2
 800d19c:	bd10      	pop	{r4, pc}
 800d19e:	2800      	cmp	r0, #0
 800d1a0:	d1f3      	bne.n	800d18a <strncmp+0xa>
 800d1a2:	e7fa      	b.n	800d19a <strncmp+0x1a>
 800d1a4:	4610      	mov	r0, r2
 800d1a6:	e7f9      	b.n	800d19c <strncmp+0x1c>

0800d1a8 <_strtoul_l.constprop.0>:
 800d1a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d1ac:	4f36      	ldr	r7, [pc, #216]	; (800d288 <_strtoul_l.constprop.0+0xe0>)
 800d1ae:	4686      	mov	lr, r0
 800d1b0:	460d      	mov	r5, r1
 800d1b2:	4628      	mov	r0, r5
 800d1b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d1b8:	5de6      	ldrb	r6, [r4, r7]
 800d1ba:	f016 0608 	ands.w	r6, r6, #8
 800d1be:	d1f8      	bne.n	800d1b2 <_strtoul_l.constprop.0+0xa>
 800d1c0:	2c2d      	cmp	r4, #45	; 0x2d
 800d1c2:	d12f      	bne.n	800d224 <_strtoul_l.constprop.0+0x7c>
 800d1c4:	782c      	ldrb	r4, [r5, #0]
 800d1c6:	2601      	movs	r6, #1
 800d1c8:	1c85      	adds	r5, r0, #2
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d057      	beq.n	800d27e <_strtoul_l.constprop.0+0xd6>
 800d1ce:	2b10      	cmp	r3, #16
 800d1d0:	d109      	bne.n	800d1e6 <_strtoul_l.constprop.0+0x3e>
 800d1d2:	2c30      	cmp	r4, #48	; 0x30
 800d1d4:	d107      	bne.n	800d1e6 <_strtoul_l.constprop.0+0x3e>
 800d1d6:	7828      	ldrb	r0, [r5, #0]
 800d1d8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d1dc:	2858      	cmp	r0, #88	; 0x58
 800d1de:	d149      	bne.n	800d274 <_strtoul_l.constprop.0+0xcc>
 800d1e0:	786c      	ldrb	r4, [r5, #1]
 800d1e2:	2310      	movs	r3, #16
 800d1e4:	3502      	adds	r5, #2
 800d1e6:	f04f 38ff 	mov.w	r8, #4294967295
 800d1ea:	2700      	movs	r7, #0
 800d1ec:	fbb8 f8f3 	udiv	r8, r8, r3
 800d1f0:	fb03 f908 	mul.w	r9, r3, r8
 800d1f4:	ea6f 0909 	mvn.w	r9, r9
 800d1f8:	4638      	mov	r0, r7
 800d1fa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d1fe:	f1bc 0f09 	cmp.w	ip, #9
 800d202:	d814      	bhi.n	800d22e <_strtoul_l.constprop.0+0x86>
 800d204:	4664      	mov	r4, ip
 800d206:	42a3      	cmp	r3, r4
 800d208:	dd22      	ble.n	800d250 <_strtoul_l.constprop.0+0xa8>
 800d20a:	2f00      	cmp	r7, #0
 800d20c:	db1d      	blt.n	800d24a <_strtoul_l.constprop.0+0xa2>
 800d20e:	4580      	cmp	r8, r0
 800d210:	d31b      	bcc.n	800d24a <_strtoul_l.constprop.0+0xa2>
 800d212:	d101      	bne.n	800d218 <_strtoul_l.constprop.0+0x70>
 800d214:	45a1      	cmp	r9, r4
 800d216:	db18      	blt.n	800d24a <_strtoul_l.constprop.0+0xa2>
 800d218:	fb00 4003 	mla	r0, r0, r3, r4
 800d21c:	2701      	movs	r7, #1
 800d21e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d222:	e7ea      	b.n	800d1fa <_strtoul_l.constprop.0+0x52>
 800d224:	2c2b      	cmp	r4, #43	; 0x2b
 800d226:	bf04      	itt	eq
 800d228:	782c      	ldrbeq	r4, [r5, #0]
 800d22a:	1c85      	addeq	r5, r0, #2
 800d22c:	e7cd      	b.n	800d1ca <_strtoul_l.constprop.0+0x22>
 800d22e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d232:	f1bc 0f19 	cmp.w	ip, #25
 800d236:	d801      	bhi.n	800d23c <_strtoul_l.constprop.0+0x94>
 800d238:	3c37      	subs	r4, #55	; 0x37
 800d23a:	e7e4      	b.n	800d206 <_strtoul_l.constprop.0+0x5e>
 800d23c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d240:	f1bc 0f19 	cmp.w	ip, #25
 800d244:	d804      	bhi.n	800d250 <_strtoul_l.constprop.0+0xa8>
 800d246:	3c57      	subs	r4, #87	; 0x57
 800d248:	e7dd      	b.n	800d206 <_strtoul_l.constprop.0+0x5e>
 800d24a:	f04f 37ff 	mov.w	r7, #4294967295
 800d24e:	e7e6      	b.n	800d21e <_strtoul_l.constprop.0+0x76>
 800d250:	2f00      	cmp	r7, #0
 800d252:	da07      	bge.n	800d264 <_strtoul_l.constprop.0+0xbc>
 800d254:	2322      	movs	r3, #34	; 0x22
 800d256:	f8ce 3000 	str.w	r3, [lr]
 800d25a:	f04f 30ff 	mov.w	r0, #4294967295
 800d25e:	b932      	cbnz	r2, 800d26e <_strtoul_l.constprop.0+0xc6>
 800d260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d264:	b106      	cbz	r6, 800d268 <_strtoul_l.constprop.0+0xc0>
 800d266:	4240      	negs	r0, r0
 800d268:	2a00      	cmp	r2, #0
 800d26a:	d0f9      	beq.n	800d260 <_strtoul_l.constprop.0+0xb8>
 800d26c:	b107      	cbz	r7, 800d270 <_strtoul_l.constprop.0+0xc8>
 800d26e:	1e69      	subs	r1, r5, #1
 800d270:	6011      	str	r1, [r2, #0]
 800d272:	e7f5      	b.n	800d260 <_strtoul_l.constprop.0+0xb8>
 800d274:	2430      	movs	r4, #48	; 0x30
 800d276:	2b00      	cmp	r3, #0
 800d278:	d1b5      	bne.n	800d1e6 <_strtoul_l.constprop.0+0x3e>
 800d27a:	2308      	movs	r3, #8
 800d27c:	e7b3      	b.n	800d1e6 <_strtoul_l.constprop.0+0x3e>
 800d27e:	2c30      	cmp	r4, #48	; 0x30
 800d280:	d0a9      	beq.n	800d1d6 <_strtoul_l.constprop.0+0x2e>
 800d282:	230a      	movs	r3, #10
 800d284:	e7af      	b.n	800d1e6 <_strtoul_l.constprop.0+0x3e>
 800d286:	bf00      	nop
 800d288:	0800f701 	.word	0x0800f701

0800d28c <_strtoul_r>:
 800d28c:	f7ff bf8c 	b.w	800d1a8 <_strtoul_l.constprop.0>

0800d290 <__submore>:
 800d290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d294:	460c      	mov	r4, r1
 800d296:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d29c:	4299      	cmp	r1, r3
 800d29e:	d11d      	bne.n	800d2dc <__submore+0x4c>
 800d2a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d2a4:	f7ff fa16 	bl	800c6d4 <_malloc_r>
 800d2a8:	b918      	cbnz	r0, 800d2b2 <__submore+0x22>
 800d2aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2b6:	63a3      	str	r3, [r4, #56]	; 0x38
 800d2b8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d2bc:	6360      	str	r0, [r4, #52]	; 0x34
 800d2be:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d2c2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d2c6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d2ca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d2ce:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d2d2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d2d6:	6020      	str	r0, [r4, #0]
 800d2d8:	2000      	movs	r0, #0
 800d2da:	e7e8      	b.n	800d2ae <__submore+0x1e>
 800d2dc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d2de:	0077      	lsls	r7, r6, #1
 800d2e0:	463a      	mov	r2, r7
 800d2e2:	f000 fa2d 	bl	800d740 <_realloc_r>
 800d2e6:	4605      	mov	r5, r0
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	d0de      	beq.n	800d2aa <__submore+0x1a>
 800d2ec:	eb00 0806 	add.w	r8, r0, r6
 800d2f0:	4601      	mov	r1, r0
 800d2f2:	4632      	mov	r2, r6
 800d2f4:	4640      	mov	r0, r8
 800d2f6:	f7fb fc8b 	bl	8008c10 <memcpy>
 800d2fa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d2fe:	f8c4 8000 	str.w	r8, [r4]
 800d302:	e7e9      	b.n	800d2d8 <__submore+0x48>

0800d304 <__ascii_wctomb>:
 800d304:	b149      	cbz	r1, 800d31a <__ascii_wctomb+0x16>
 800d306:	2aff      	cmp	r2, #255	; 0xff
 800d308:	bf85      	ittet	hi
 800d30a:	238a      	movhi	r3, #138	; 0x8a
 800d30c:	6003      	strhi	r3, [r0, #0]
 800d30e:	700a      	strbls	r2, [r1, #0]
 800d310:	f04f 30ff 	movhi.w	r0, #4294967295
 800d314:	bf98      	it	ls
 800d316:	2001      	movls	r0, #1
 800d318:	4770      	bx	lr
 800d31a:	4608      	mov	r0, r1
 800d31c:	4770      	bx	lr
	...

0800d320 <__assert_func>:
 800d320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d322:	4614      	mov	r4, r2
 800d324:	461a      	mov	r2, r3
 800d326:	4b09      	ldr	r3, [pc, #36]	; (800d34c <__assert_func+0x2c>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	4605      	mov	r5, r0
 800d32c:	68d8      	ldr	r0, [r3, #12]
 800d32e:	b14c      	cbz	r4, 800d344 <__assert_func+0x24>
 800d330:	4b07      	ldr	r3, [pc, #28]	; (800d350 <__assert_func+0x30>)
 800d332:	9100      	str	r1, [sp, #0]
 800d334:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d338:	4906      	ldr	r1, [pc, #24]	; (800d354 <__assert_func+0x34>)
 800d33a:	462b      	mov	r3, r5
 800d33c:	f000 f9a6 	bl	800d68c <fiprintf>
 800d340:	f000 fc46 	bl	800dbd0 <abort>
 800d344:	4b04      	ldr	r3, [pc, #16]	; (800d358 <__assert_func+0x38>)
 800d346:	461c      	mov	r4, r3
 800d348:	e7f3      	b.n	800d332 <__assert_func+0x12>
 800d34a:	bf00      	nop
 800d34c:	200000b4 	.word	0x200000b4
 800d350:	0800fa90 	.word	0x0800fa90
 800d354:	0800fa9d 	.word	0x0800fa9d
 800d358:	0800facb 	.word	0x0800facb

0800d35c <__sflush_r>:
 800d35c:	898a      	ldrh	r2, [r1, #12]
 800d35e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d362:	4605      	mov	r5, r0
 800d364:	0710      	lsls	r0, r2, #28
 800d366:	460c      	mov	r4, r1
 800d368:	d458      	bmi.n	800d41c <__sflush_r+0xc0>
 800d36a:	684b      	ldr	r3, [r1, #4]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	dc05      	bgt.n	800d37c <__sflush_r+0x20>
 800d370:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d372:	2b00      	cmp	r3, #0
 800d374:	dc02      	bgt.n	800d37c <__sflush_r+0x20>
 800d376:	2000      	movs	r0, #0
 800d378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d37c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d37e:	2e00      	cmp	r6, #0
 800d380:	d0f9      	beq.n	800d376 <__sflush_r+0x1a>
 800d382:	2300      	movs	r3, #0
 800d384:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d388:	682f      	ldr	r7, [r5, #0]
 800d38a:	602b      	str	r3, [r5, #0]
 800d38c:	d032      	beq.n	800d3f4 <__sflush_r+0x98>
 800d38e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d390:	89a3      	ldrh	r3, [r4, #12]
 800d392:	075a      	lsls	r2, r3, #29
 800d394:	d505      	bpl.n	800d3a2 <__sflush_r+0x46>
 800d396:	6863      	ldr	r3, [r4, #4]
 800d398:	1ac0      	subs	r0, r0, r3
 800d39a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d39c:	b10b      	cbz	r3, 800d3a2 <__sflush_r+0x46>
 800d39e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d3a0:	1ac0      	subs	r0, r0, r3
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	4602      	mov	r2, r0
 800d3a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d3a8:	6a21      	ldr	r1, [r4, #32]
 800d3aa:	4628      	mov	r0, r5
 800d3ac:	47b0      	blx	r6
 800d3ae:	1c43      	adds	r3, r0, #1
 800d3b0:	89a3      	ldrh	r3, [r4, #12]
 800d3b2:	d106      	bne.n	800d3c2 <__sflush_r+0x66>
 800d3b4:	6829      	ldr	r1, [r5, #0]
 800d3b6:	291d      	cmp	r1, #29
 800d3b8:	d82c      	bhi.n	800d414 <__sflush_r+0xb8>
 800d3ba:	4a2a      	ldr	r2, [pc, #168]	; (800d464 <__sflush_r+0x108>)
 800d3bc:	40ca      	lsrs	r2, r1
 800d3be:	07d6      	lsls	r6, r2, #31
 800d3c0:	d528      	bpl.n	800d414 <__sflush_r+0xb8>
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	6062      	str	r2, [r4, #4]
 800d3c6:	04d9      	lsls	r1, r3, #19
 800d3c8:	6922      	ldr	r2, [r4, #16]
 800d3ca:	6022      	str	r2, [r4, #0]
 800d3cc:	d504      	bpl.n	800d3d8 <__sflush_r+0x7c>
 800d3ce:	1c42      	adds	r2, r0, #1
 800d3d0:	d101      	bne.n	800d3d6 <__sflush_r+0x7a>
 800d3d2:	682b      	ldr	r3, [r5, #0]
 800d3d4:	b903      	cbnz	r3, 800d3d8 <__sflush_r+0x7c>
 800d3d6:	6560      	str	r0, [r4, #84]	; 0x54
 800d3d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3da:	602f      	str	r7, [r5, #0]
 800d3dc:	2900      	cmp	r1, #0
 800d3de:	d0ca      	beq.n	800d376 <__sflush_r+0x1a>
 800d3e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d3e4:	4299      	cmp	r1, r3
 800d3e6:	d002      	beq.n	800d3ee <__sflush_r+0x92>
 800d3e8:	4628      	mov	r0, r5
 800d3ea:	f7ff f907 	bl	800c5fc <_free_r>
 800d3ee:	2000      	movs	r0, #0
 800d3f0:	6360      	str	r0, [r4, #52]	; 0x34
 800d3f2:	e7c1      	b.n	800d378 <__sflush_r+0x1c>
 800d3f4:	6a21      	ldr	r1, [r4, #32]
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	4628      	mov	r0, r5
 800d3fa:	47b0      	blx	r6
 800d3fc:	1c41      	adds	r1, r0, #1
 800d3fe:	d1c7      	bne.n	800d390 <__sflush_r+0x34>
 800d400:	682b      	ldr	r3, [r5, #0]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d0c4      	beq.n	800d390 <__sflush_r+0x34>
 800d406:	2b1d      	cmp	r3, #29
 800d408:	d001      	beq.n	800d40e <__sflush_r+0xb2>
 800d40a:	2b16      	cmp	r3, #22
 800d40c:	d101      	bne.n	800d412 <__sflush_r+0xb6>
 800d40e:	602f      	str	r7, [r5, #0]
 800d410:	e7b1      	b.n	800d376 <__sflush_r+0x1a>
 800d412:	89a3      	ldrh	r3, [r4, #12]
 800d414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d418:	81a3      	strh	r3, [r4, #12]
 800d41a:	e7ad      	b.n	800d378 <__sflush_r+0x1c>
 800d41c:	690f      	ldr	r7, [r1, #16]
 800d41e:	2f00      	cmp	r7, #0
 800d420:	d0a9      	beq.n	800d376 <__sflush_r+0x1a>
 800d422:	0793      	lsls	r3, r2, #30
 800d424:	680e      	ldr	r6, [r1, #0]
 800d426:	bf08      	it	eq
 800d428:	694b      	ldreq	r3, [r1, #20]
 800d42a:	600f      	str	r7, [r1, #0]
 800d42c:	bf18      	it	ne
 800d42e:	2300      	movne	r3, #0
 800d430:	eba6 0807 	sub.w	r8, r6, r7
 800d434:	608b      	str	r3, [r1, #8]
 800d436:	f1b8 0f00 	cmp.w	r8, #0
 800d43a:	dd9c      	ble.n	800d376 <__sflush_r+0x1a>
 800d43c:	6a21      	ldr	r1, [r4, #32]
 800d43e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d440:	4643      	mov	r3, r8
 800d442:	463a      	mov	r2, r7
 800d444:	4628      	mov	r0, r5
 800d446:	47b0      	blx	r6
 800d448:	2800      	cmp	r0, #0
 800d44a:	dc06      	bgt.n	800d45a <__sflush_r+0xfe>
 800d44c:	89a3      	ldrh	r3, [r4, #12]
 800d44e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d452:	81a3      	strh	r3, [r4, #12]
 800d454:	f04f 30ff 	mov.w	r0, #4294967295
 800d458:	e78e      	b.n	800d378 <__sflush_r+0x1c>
 800d45a:	4407      	add	r7, r0
 800d45c:	eba8 0800 	sub.w	r8, r8, r0
 800d460:	e7e9      	b.n	800d436 <__sflush_r+0xda>
 800d462:	bf00      	nop
 800d464:	20400001 	.word	0x20400001

0800d468 <_fflush_r>:
 800d468:	b538      	push	{r3, r4, r5, lr}
 800d46a:	690b      	ldr	r3, [r1, #16]
 800d46c:	4605      	mov	r5, r0
 800d46e:	460c      	mov	r4, r1
 800d470:	b913      	cbnz	r3, 800d478 <_fflush_r+0x10>
 800d472:	2500      	movs	r5, #0
 800d474:	4628      	mov	r0, r5
 800d476:	bd38      	pop	{r3, r4, r5, pc}
 800d478:	b118      	cbz	r0, 800d482 <_fflush_r+0x1a>
 800d47a:	6983      	ldr	r3, [r0, #24]
 800d47c:	b90b      	cbnz	r3, 800d482 <_fflush_r+0x1a>
 800d47e:	f000 f887 	bl	800d590 <__sinit>
 800d482:	4b14      	ldr	r3, [pc, #80]	; (800d4d4 <_fflush_r+0x6c>)
 800d484:	429c      	cmp	r4, r3
 800d486:	d11b      	bne.n	800d4c0 <_fflush_r+0x58>
 800d488:	686c      	ldr	r4, [r5, #4]
 800d48a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d0ef      	beq.n	800d472 <_fflush_r+0xa>
 800d492:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d494:	07d0      	lsls	r0, r2, #31
 800d496:	d404      	bmi.n	800d4a2 <_fflush_r+0x3a>
 800d498:	0599      	lsls	r1, r3, #22
 800d49a:	d402      	bmi.n	800d4a2 <_fflush_r+0x3a>
 800d49c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d49e:	f000 f927 	bl	800d6f0 <__retarget_lock_acquire_recursive>
 800d4a2:	4628      	mov	r0, r5
 800d4a4:	4621      	mov	r1, r4
 800d4a6:	f7ff ff59 	bl	800d35c <__sflush_r>
 800d4aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d4ac:	07da      	lsls	r2, r3, #31
 800d4ae:	4605      	mov	r5, r0
 800d4b0:	d4e0      	bmi.n	800d474 <_fflush_r+0xc>
 800d4b2:	89a3      	ldrh	r3, [r4, #12]
 800d4b4:	059b      	lsls	r3, r3, #22
 800d4b6:	d4dd      	bmi.n	800d474 <_fflush_r+0xc>
 800d4b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d4ba:	f000 f91a 	bl	800d6f2 <__retarget_lock_release_recursive>
 800d4be:	e7d9      	b.n	800d474 <_fflush_r+0xc>
 800d4c0:	4b05      	ldr	r3, [pc, #20]	; (800d4d8 <_fflush_r+0x70>)
 800d4c2:	429c      	cmp	r4, r3
 800d4c4:	d101      	bne.n	800d4ca <_fflush_r+0x62>
 800d4c6:	68ac      	ldr	r4, [r5, #8]
 800d4c8:	e7df      	b.n	800d48a <_fflush_r+0x22>
 800d4ca:	4b04      	ldr	r3, [pc, #16]	; (800d4dc <_fflush_r+0x74>)
 800d4cc:	429c      	cmp	r4, r3
 800d4ce:	bf08      	it	eq
 800d4d0:	68ec      	ldreq	r4, [r5, #12]
 800d4d2:	e7da      	b.n	800d48a <_fflush_r+0x22>
 800d4d4:	0800faec 	.word	0x0800faec
 800d4d8:	0800fb0c 	.word	0x0800fb0c
 800d4dc:	0800facc 	.word	0x0800facc

0800d4e0 <std>:
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	b510      	push	{r4, lr}
 800d4e4:	4604      	mov	r4, r0
 800d4e6:	e9c0 3300 	strd	r3, r3, [r0]
 800d4ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d4ee:	6083      	str	r3, [r0, #8]
 800d4f0:	8181      	strh	r1, [r0, #12]
 800d4f2:	6643      	str	r3, [r0, #100]	; 0x64
 800d4f4:	81c2      	strh	r2, [r0, #14]
 800d4f6:	6183      	str	r3, [r0, #24]
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	2208      	movs	r2, #8
 800d4fc:	305c      	adds	r0, #92	; 0x5c
 800d4fe:	f7fb fb95 	bl	8008c2c <memset>
 800d502:	4b05      	ldr	r3, [pc, #20]	; (800d518 <std+0x38>)
 800d504:	6263      	str	r3, [r4, #36]	; 0x24
 800d506:	4b05      	ldr	r3, [pc, #20]	; (800d51c <std+0x3c>)
 800d508:	62a3      	str	r3, [r4, #40]	; 0x28
 800d50a:	4b05      	ldr	r3, [pc, #20]	; (800d520 <std+0x40>)
 800d50c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d50e:	4b05      	ldr	r3, [pc, #20]	; (800d524 <std+0x44>)
 800d510:	6224      	str	r4, [r4, #32]
 800d512:	6323      	str	r3, [r4, #48]	; 0x30
 800d514:	bd10      	pop	{r4, pc}
 800d516:	bf00      	nop
 800d518:	080099d5 	.word	0x080099d5
 800d51c:	080099fb 	.word	0x080099fb
 800d520:	08009a33 	.word	0x08009a33
 800d524:	08009a57 	.word	0x08009a57

0800d528 <_cleanup_r>:
 800d528:	4901      	ldr	r1, [pc, #4]	; (800d530 <_cleanup_r+0x8>)
 800d52a:	f000 b8c1 	b.w	800d6b0 <_fwalk_reent>
 800d52e:	bf00      	nop
 800d530:	0800d469 	.word	0x0800d469

0800d534 <__sfmoreglue>:
 800d534:	b570      	push	{r4, r5, r6, lr}
 800d536:	2268      	movs	r2, #104	; 0x68
 800d538:	1e4d      	subs	r5, r1, #1
 800d53a:	4355      	muls	r5, r2
 800d53c:	460e      	mov	r6, r1
 800d53e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d542:	f7ff f8c7 	bl	800c6d4 <_malloc_r>
 800d546:	4604      	mov	r4, r0
 800d548:	b140      	cbz	r0, 800d55c <__sfmoreglue+0x28>
 800d54a:	2100      	movs	r1, #0
 800d54c:	e9c0 1600 	strd	r1, r6, [r0]
 800d550:	300c      	adds	r0, #12
 800d552:	60a0      	str	r0, [r4, #8]
 800d554:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d558:	f7fb fb68 	bl	8008c2c <memset>
 800d55c:	4620      	mov	r0, r4
 800d55e:	bd70      	pop	{r4, r5, r6, pc}

0800d560 <__sfp_lock_acquire>:
 800d560:	4801      	ldr	r0, [pc, #4]	; (800d568 <__sfp_lock_acquire+0x8>)
 800d562:	f000 b8c5 	b.w	800d6f0 <__retarget_lock_acquire_recursive>
 800d566:	bf00      	nop
 800d568:	200006d9 	.word	0x200006d9

0800d56c <__sfp_lock_release>:
 800d56c:	4801      	ldr	r0, [pc, #4]	; (800d574 <__sfp_lock_release+0x8>)
 800d56e:	f000 b8c0 	b.w	800d6f2 <__retarget_lock_release_recursive>
 800d572:	bf00      	nop
 800d574:	200006d9 	.word	0x200006d9

0800d578 <__sinit_lock_acquire>:
 800d578:	4801      	ldr	r0, [pc, #4]	; (800d580 <__sinit_lock_acquire+0x8>)
 800d57a:	f000 b8b9 	b.w	800d6f0 <__retarget_lock_acquire_recursive>
 800d57e:	bf00      	nop
 800d580:	200006da 	.word	0x200006da

0800d584 <__sinit_lock_release>:
 800d584:	4801      	ldr	r0, [pc, #4]	; (800d58c <__sinit_lock_release+0x8>)
 800d586:	f000 b8b4 	b.w	800d6f2 <__retarget_lock_release_recursive>
 800d58a:	bf00      	nop
 800d58c:	200006da 	.word	0x200006da

0800d590 <__sinit>:
 800d590:	b510      	push	{r4, lr}
 800d592:	4604      	mov	r4, r0
 800d594:	f7ff fff0 	bl	800d578 <__sinit_lock_acquire>
 800d598:	69a3      	ldr	r3, [r4, #24]
 800d59a:	b11b      	cbz	r3, 800d5a4 <__sinit+0x14>
 800d59c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5a0:	f7ff bff0 	b.w	800d584 <__sinit_lock_release>
 800d5a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d5a8:	6523      	str	r3, [r4, #80]	; 0x50
 800d5aa:	4b13      	ldr	r3, [pc, #76]	; (800d5f8 <__sinit+0x68>)
 800d5ac:	4a13      	ldr	r2, [pc, #76]	; (800d5fc <__sinit+0x6c>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	62a2      	str	r2, [r4, #40]	; 0x28
 800d5b2:	42a3      	cmp	r3, r4
 800d5b4:	bf04      	itt	eq
 800d5b6:	2301      	moveq	r3, #1
 800d5b8:	61a3      	streq	r3, [r4, #24]
 800d5ba:	4620      	mov	r0, r4
 800d5bc:	f000 f820 	bl	800d600 <__sfp>
 800d5c0:	6060      	str	r0, [r4, #4]
 800d5c2:	4620      	mov	r0, r4
 800d5c4:	f000 f81c 	bl	800d600 <__sfp>
 800d5c8:	60a0      	str	r0, [r4, #8]
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	f000 f818 	bl	800d600 <__sfp>
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	60e0      	str	r0, [r4, #12]
 800d5d4:	2104      	movs	r1, #4
 800d5d6:	6860      	ldr	r0, [r4, #4]
 800d5d8:	f7ff ff82 	bl	800d4e0 <std>
 800d5dc:	68a0      	ldr	r0, [r4, #8]
 800d5de:	2201      	movs	r2, #1
 800d5e0:	2109      	movs	r1, #9
 800d5e2:	f7ff ff7d 	bl	800d4e0 <std>
 800d5e6:	68e0      	ldr	r0, [r4, #12]
 800d5e8:	2202      	movs	r2, #2
 800d5ea:	2112      	movs	r1, #18
 800d5ec:	f7ff ff78 	bl	800d4e0 <std>
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	61a3      	str	r3, [r4, #24]
 800d5f4:	e7d2      	b.n	800d59c <__sinit+0xc>
 800d5f6:	bf00      	nop
 800d5f8:	0800f674 	.word	0x0800f674
 800d5fc:	0800d529 	.word	0x0800d529

0800d600 <__sfp>:
 800d600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d602:	4607      	mov	r7, r0
 800d604:	f7ff ffac 	bl	800d560 <__sfp_lock_acquire>
 800d608:	4b1e      	ldr	r3, [pc, #120]	; (800d684 <__sfp+0x84>)
 800d60a:	681e      	ldr	r6, [r3, #0]
 800d60c:	69b3      	ldr	r3, [r6, #24]
 800d60e:	b913      	cbnz	r3, 800d616 <__sfp+0x16>
 800d610:	4630      	mov	r0, r6
 800d612:	f7ff ffbd 	bl	800d590 <__sinit>
 800d616:	3648      	adds	r6, #72	; 0x48
 800d618:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d61c:	3b01      	subs	r3, #1
 800d61e:	d503      	bpl.n	800d628 <__sfp+0x28>
 800d620:	6833      	ldr	r3, [r6, #0]
 800d622:	b30b      	cbz	r3, 800d668 <__sfp+0x68>
 800d624:	6836      	ldr	r6, [r6, #0]
 800d626:	e7f7      	b.n	800d618 <__sfp+0x18>
 800d628:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d62c:	b9d5      	cbnz	r5, 800d664 <__sfp+0x64>
 800d62e:	4b16      	ldr	r3, [pc, #88]	; (800d688 <__sfp+0x88>)
 800d630:	60e3      	str	r3, [r4, #12]
 800d632:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d636:	6665      	str	r5, [r4, #100]	; 0x64
 800d638:	f000 f859 	bl	800d6ee <__retarget_lock_init_recursive>
 800d63c:	f7ff ff96 	bl	800d56c <__sfp_lock_release>
 800d640:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d644:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d648:	6025      	str	r5, [r4, #0]
 800d64a:	61a5      	str	r5, [r4, #24]
 800d64c:	2208      	movs	r2, #8
 800d64e:	4629      	mov	r1, r5
 800d650:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d654:	f7fb faea 	bl	8008c2c <memset>
 800d658:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d65c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d660:	4620      	mov	r0, r4
 800d662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d664:	3468      	adds	r4, #104	; 0x68
 800d666:	e7d9      	b.n	800d61c <__sfp+0x1c>
 800d668:	2104      	movs	r1, #4
 800d66a:	4638      	mov	r0, r7
 800d66c:	f7ff ff62 	bl	800d534 <__sfmoreglue>
 800d670:	4604      	mov	r4, r0
 800d672:	6030      	str	r0, [r6, #0]
 800d674:	2800      	cmp	r0, #0
 800d676:	d1d5      	bne.n	800d624 <__sfp+0x24>
 800d678:	f7ff ff78 	bl	800d56c <__sfp_lock_release>
 800d67c:	230c      	movs	r3, #12
 800d67e:	603b      	str	r3, [r7, #0]
 800d680:	e7ee      	b.n	800d660 <__sfp+0x60>
 800d682:	bf00      	nop
 800d684:	0800f674 	.word	0x0800f674
 800d688:	ffff0001 	.word	0xffff0001

0800d68c <fiprintf>:
 800d68c:	b40e      	push	{r1, r2, r3}
 800d68e:	b503      	push	{r0, r1, lr}
 800d690:	4601      	mov	r1, r0
 800d692:	ab03      	add	r3, sp, #12
 800d694:	4805      	ldr	r0, [pc, #20]	; (800d6ac <fiprintf+0x20>)
 800d696:	f853 2b04 	ldr.w	r2, [r3], #4
 800d69a:	6800      	ldr	r0, [r0, #0]
 800d69c:	9301      	str	r3, [sp, #4]
 800d69e:	f000 f8a7 	bl	800d7f0 <_vfiprintf_r>
 800d6a2:	b002      	add	sp, #8
 800d6a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6a8:	b003      	add	sp, #12
 800d6aa:	4770      	bx	lr
 800d6ac:	200000b4 	.word	0x200000b4

0800d6b0 <_fwalk_reent>:
 800d6b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6b4:	4606      	mov	r6, r0
 800d6b6:	4688      	mov	r8, r1
 800d6b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d6bc:	2700      	movs	r7, #0
 800d6be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d6c2:	f1b9 0901 	subs.w	r9, r9, #1
 800d6c6:	d505      	bpl.n	800d6d4 <_fwalk_reent+0x24>
 800d6c8:	6824      	ldr	r4, [r4, #0]
 800d6ca:	2c00      	cmp	r4, #0
 800d6cc:	d1f7      	bne.n	800d6be <_fwalk_reent+0xe>
 800d6ce:	4638      	mov	r0, r7
 800d6d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6d4:	89ab      	ldrh	r3, [r5, #12]
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d907      	bls.n	800d6ea <_fwalk_reent+0x3a>
 800d6da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d6de:	3301      	adds	r3, #1
 800d6e0:	d003      	beq.n	800d6ea <_fwalk_reent+0x3a>
 800d6e2:	4629      	mov	r1, r5
 800d6e4:	4630      	mov	r0, r6
 800d6e6:	47c0      	blx	r8
 800d6e8:	4307      	orrs	r7, r0
 800d6ea:	3568      	adds	r5, #104	; 0x68
 800d6ec:	e7e9      	b.n	800d6c2 <_fwalk_reent+0x12>

0800d6ee <__retarget_lock_init_recursive>:
 800d6ee:	4770      	bx	lr

0800d6f0 <__retarget_lock_acquire_recursive>:
 800d6f0:	4770      	bx	lr

0800d6f2 <__retarget_lock_release_recursive>:
 800d6f2:	4770      	bx	lr

0800d6f4 <memmove>:
 800d6f4:	4288      	cmp	r0, r1
 800d6f6:	b510      	push	{r4, lr}
 800d6f8:	eb01 0402 	add.w	r4, r1, r2
 800d6fc:	d902      	bls.n	800d704 <memmove+0x10>
 800d6fe:	4284      	cmp	r4, r0
 800d700:	4623      	mov	r3, r4
 800d702:	d807      	bhi.n	800d714 <memmove+0x20>
 800d704:	1e43      	subs	r3, r0, #1
 800d706:	42a1      	cmp	r1, r4
 800d708:	d008      	beq.n	800d71c <memmove+0x28>
 800d70a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d70e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d712:	e7f8      	b.n	800d706 <memmove+0x12>
 800d714:	4402      	add	r2, r0
 800d716:	4601      	mov	r1, r0
 800d718:	428a      	cmp	r2, r1
 800d71a:	d100      	bne.n	800d71e <memmove+0x2a>
 800d71c:	bd10      	pop	{r4, pc}
 800d71e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d722:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d726:	e7f7      	b.n	800d718 <memmove+0x24>

0800d728 <__malloc_lock>:
 800d728:	4801      	ldr	r0, [pc, #4]	; (800d730 <__malloc_lock+0x8>)
 800d72a:	f7ff bfe1 	b.w	800d6f0 <__retarget_lock_acquire_recursive>
 800d72e:	bf00      	nop
 800d730:	200006d8 	.word	0x200006d8

0800d734 <__malloc_unlock>:
 800d734:	4801      	ldr	r0, [pc, #4]	; (800d73c <__malloc_unlock+0x8>)
 800d736:	f7ff bfdc 	b.w	800d6f2 <__retarget_lock_release_recursive>
 800d73a:	bf00      	nop
 800d73c:	200006d8 	.word	0x200006d8

0800d740 <_realloc_r>:
 800d740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d744:	4680      	mov	r8, r0
 800d746:	4614      	mov	r4, r2
 800d748:	460e      	mov	r6, r1
 800d74a:	b921      	cbnz	r1, 800d756 <_realloc_r+0x16>
 800d74c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d750:	4611      	mov	r1, r2
 800d752:	f7fe bfbf 	b.w	800c6d4 <_malloc_r>
 800d756:	b92a      	cbnz	r2, 800d764 <_realloc_r+0x24>
 800d758:	f7fe ff50 	bl	800c5fc <_free_r>
 800d75c:	4625      	mov	r5, r4
 800d75e:	4628      	mov	r0, r5
 800d760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d764:	f000 faa0 	bl	800dca8 <_malloc_usable_size_r>
 800d768:	4284      	cmp	r4, r0
 800d76a:	4607      	mov	r7, r0
 800d76c:	d802      	bhi.n	800d774 <_realloc_r+0x34>
 800d76e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d772:	d812      	bhi.n	800d79a <_realloc_r+0x5a>
 800d774:	4621      	mov	r1, r4
 800d776:	4640      	mov	r0, r8
 800d778:	f7fe ffac 	bl	800c6d4 <_malloc_r>
 800d77c:	4605      	mov	r5, r0
 800d77e:	2800      	cmp	r0, #0
 800d780:	d0ed      	beq.n	800d75e <_realloc_r+0x1e>
 800d782:	42bc      	cmp	r4, r7
 800d784:	4622      	mov	r2, r4
 800d786:	4631      	mov	r1, r6
 800d788:	bf28      	it	cs
 800d78a:	463a      	movcs	r2, r7
 800d78c:	f7fb fa40 	bl	8008c10 <memcpy>
 800d790:	4631      	mov	r1, r6
 800d792:	4640      	mov	r0, r8
 800d794:	f7fe ff32 	bl	800c5fc <_free_r>
 800d798:	e7e1      	b.n	800d75e <_realloc_r+0x1e>
 800d79a:	4635      	mov	r5, r6
 800d79c:	e7df      	b.n	800d75e <_realloc_r+0x1e>

0800d79e <__sfputc_r>:
 800d79e:	6893      	ldr	r3, [r2, #8]
 800d7a0:	3b01      	subs	r3, #1
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	b410      	push	{r4}
 800d7a6:	6093      	str	r3, [r2, #8]
 800d7a8:	da08      	bge.n	800d7bc <__sfputc_r+0x1e>
 800d7aa:	6994      	ldr	r4, [r2, #24]
 800d7ac:	42a3      	cmp	r3, r4
 800d7ae:	db01      	blt.n	800d7b4 <__sfputc_r+0x16>
 800d7b0:	290a      	cmp	r1, #10
 800d7b2:	d103      	bne.n	800d7bc <__sfputc_r+0x1e>
 800d7b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7b8:	f000 b94a 	b.w	800da50 <__swbuf_r>
 800d7bc:	6813      	ldr	r3, [r2, #0]
 800d7be:	1c58      	adds	r0, r3, #1
 800d7c0:	6010      	str	r0, [r2, #0]
 800d7c2:	7019      	strb	r1, [r3, #0]
 800d7c4:	4608      	mov	r0, r1
 800d7c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7ca:	4770      	bx	lr

0800d7cc <__sfputs_r>:
 800d7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ce:	4606      	mov	r6, r0
 800d7d0:	460f      	mov	r7, r1
 800d7d2:	4614      	mov	r4, r2
 800d7d4:	18d5      	adds	r5, r2, r3
 800d7d6:	42ac      	cmp	r4, r5
 800d7d8:	d101      	bne.n	800d7de <__sfputs_r+0x12>
 800d7da:	2000      	movs	r0, #0
 800d7dc:	e007      	b.n	800d7ee <__sfputs_r+0x22>
 800d7de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7e2:	463a      	mov	r2, r7
 800d7e4:	4630      	mov	r0, r6
 800d7e6:	f7ff ffda 	bl	800d79e <__sfputc_r>
 800d7ea:	1c43      	adds	r3, r0, #1
 800d7ec:	d1f3      	bne.n	800d7d6 <__sfputs_r+0xa>
 800d7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d7f0 <_vfiprintf_r>:
 800d7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7f4:	460d      	mov	r5, r1
 800d7f6:	b09d      	sub	sp, #116	; 0x74
 800d7f8:	4614      	mov	r4, r2
 800d7fa:	4698      	mov	r8, r3
 800d7fc:	4606      	mov	r6, r0
 800d7fe:	b118      	cbz	r0, 800d808 <_vfiprintf_r+0x18>
 800d800:	6983      	ldr	r3, [r0, #24]
 800d802:	b90b      	cbnz	r3, 800d808 <_vfiprintf_r+0x18>
 800d804:	f7ff fec4 	bl	800d590 <__sinit>
 800d808:	4b89      	ldr	r3, [pc, #548]	; (800da30 <_vfiprintf_r+0x240>)
 800d80a:	429d      	cmp	r5, r3
 800d80c:	d11b      	bne.n	800d846 <_vfiprintf_r+0x56>
 800d80e:	6875      	ldr	r5, [r6, #4]
 800d810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d812:	07d9      	lsls	r1, r3, #31
 800d814:	d405      	bmi.n	800d822 <_vfiprintf_r+0x32>
 800d816:	89ab      	ldrh	r3, [r5, #12]
 800d818:	059a      	lsls	r2, r3, #22
 800d81a:	d402      	bmi.n	800d822 <_vfiprintf_r+0x32>
 800d81c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d81e:	f7ff ff67 	bl	800d6f0 <__retarget_lock_acquire_recursive>
 800d822:	89ab      	ldrh	r3, [r5, #12]
 800d824:	071b      	lsls	r3, r3, #28
 800d826:	d501      	bpl.n	800d82c <_vfiprintf_r+0x3c>
 800d828:	692b      	ldr	r3, [r5, #16]
 800d82a:	b9eb      	cbnz	r3, 800d868 <_vfiprintf_r+0x78>
 800d82c:	4629      	mov	r1, r5
 800d82e:	4630      	mov	r0, r6
 800d830:	f000 f960 	bl	800daf4 <__swsetup_r>
 800d834:	b1c0      	cbz	r0, 800d868 <_vfiprintf_r+0x78>
 800d836:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d838:	07dc      	lsls	r4, r3, #31
 800d83a:	d50e      	bpl.n	800d85a <_vfiprintf_r+0x6a>
 800d83c:	f04f 30ff 	mov.w	r0, #4294967295
 800d840:	b01d      	add	sp, #116	; 0x74
 800d842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d846:	4b7b      	ldr	r3, [pc, #492]	; (800da34 <_vfiprintf_r+0x244>)
 800d848:	429d      	cmp	r5, r3
 800d84a:	d101      	bne.n	800d850 <_vfiprintf_r+0x60>
 800d84c:	68b5      	ldr	r5, [r6, #8]
 800d84e:	e7df      	b.n	800d810 <_vfiprintf_r+0x20>
 800d850:	4b79      	ldr	r3, [pc, #484]	; (800da38 <_vfiprintf_r+0x248>)
 800d852:	429d      	cmp	r5, r3
 800d854:	bf08      	it	eq
 800d856:	68f5      	ldreq	r5, [r6, #12]
 800d858:	e7da      	b.n	800d810 <_vfiprintf_r+0x20>
 800d85a:	89ab      	ldrh	r3, [r5, #12]
 800d85c:	0598      	lsls	r0, r3, #22
 800d85e:	d4ed      	bmi.n	800d83c <_vfiprintf_r+0x4c>
 800d860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d862:	f7ff ff46 	bl	800d6f2 <__retarget_lock_release_recursive>
 800d866:	e7e9      	b.n	800d83c <_vfiprintf_r+0x4c>
 800d868:	2300      	movs	r3, #0
 800d86a:	9309      	str	r3, [sp, #36]	; 0x24
 800d86c:	2320      	movs	r3, #32
 800d86e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d872:	f8cd 800c 	str.w	r8, [sp, #12]
 800d876:	2330      	movs	r3, #48	; 0x30
 800d878:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800da3c <_vfiprintf_r+0x24c>
 800d87c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d880:	f04f 0901 	mov.w	r9, #1
 800d884:	4623      	mov	r3, r4
 800d886:	469a      	mov	sl, r3
 800d888:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d88c:	b10a      	cbz	r2, 800d892 <_vfiprintf_r+0xa2>
 800d88e:	2a25      	cmp	r2, #37	; 0x25
 800d890:	d1f9      	bne.n	800d886 <_vfiprintf_r+0x96>
 800d892:	ebba 0b04 	subs.w	fp, sl, r4
 800d896:	d00b      	beq.n	800d8b0 <_vfiprintf_r+0xc0>
 800d898:	465b      	mov	r3, fp
 800d89a:	4622      	mov	r2, r4
 800d89c:	4629      	mov	r1, r5
 800d89e:	4630      	mov	r0, r6
 800d8a0:	f7ff ff94 	bl	800d7cc <__sfputs_r>
 800d8a4:	3001      	adds	r0, #1
 800d8a6:	f000 80aa 	beq.w	800d9fe <_vfiprintf_r+0x20e>
 800d8aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8ac:	445a      	add	r2, fp
 800d8ae:	9209      	str	r2, [sp, #36]	; 0x24
 800d8b0:	f89a 3000 	ldrb.w	r3, [sl]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	f000 80a2 	beq.w	800d9fe <_vfiprintf_r+0x20e>
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d8c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8c4:	f10a 0a01 	add.w	sl, sl, #1
 800d8c8:	9304      	str	r3, [sp, #16]
 800d8ca:	9307      	str	r3, [sp, #28]
 800d8cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d8d0:	931a      	str	r3, [sp, #104]	; 0x68
 800d8d2:	4654      	mov	r4, sl
 800d8d4:	2205      	movs	r2, #5
 800d8d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8da:	4858      	ldr	r0, [pc, #352]	; (800da3c <_vfiprintf_r+0x24c>)
 800d8dc:	f7f2 fc80 	bl	80001e0 <memchr>
 800d8e0:	9a04      	ldr	r2, [sp, #16]
 800d8e2:	b9d8      	cbnz	r0, 800d91c <_vfiprintf_r+0x12c>
 800d8e4:	06d1      	lsls	r1, r2, #27
 800d8e6:	bf44      	itt	mi
 800d8e8:	2320      	movmi	r3, #32
 800d8ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8ee:	0713      	lsls	r3, r2, #28
 800d8f0:	bf44      	itt	mi
 800d8f2:	232b      	movmi	r3, #43	; 0x2b
 800d8f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8f8:	f89a 3000 	ldrb.w	r3, [sl]
 800d8fc:	2b2a      	cmp	r3, #42	; 0x2a
 800d8fe:	d015      	beq.n	800d92c <_vfiprintf_r+0x13c>
 800d900:	9a07      	ldr	r2, [sp, #28]
 800d902:	4654      	mov	r4, sl
 800d904:	2000      	movs	r0, #0
 800d906:	f04f 0c0a 	mov.w	ip, #10
 800d90a:	4621      	mov	r1, r4
 800d90c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d910:	3b30      	subs	r3, #48	; 0x30
 800d912:	2b09      	cmp	r3, #9
 800d914:	d94e      	bls.n	800d9b4 <_vfiprintf_r+0x1c4>
 800d916:	b1b0      	cbz	r0, 800d946 <_vfiprintf_r+0x156>
 800d918:	9207      	str	r2, [sp, #28]
 800d91a:	e014      	b.n	800d946 <_vfiprintf_r+0x156>
 800d91c:	eba0 0308 	sub.w	r3, r0, r8
 800d920:	fa09 f303 	lsl.w	r3, r9, r3
 800d924:	4313      	orrs	r3, r2
 800d926:	9304      	str	r3, [sp, #16]
 800d928:	46a2      	mov	sl, r4
 800d92a:	e7d2      	b.n	800d8d2 <_vfiprintf_r+0xe2>
 800d92c:	9b03      	ldr	r3, [sp, #12]
 800d92e:	1d19      	adds	r1, r3, #4
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	9103      	str	r1, [sp, #12]
 800d934:	2b00      	cmp	r3, #0
 800d936:	bfbb      	ittet	lt
 800d938:	425b      	neglt	r3, r3
 800d93a:	f042 0202 	orrlt.w	r2, r2, #2
 800d93e:	9307      	strge	r3, [sp, #28]
 800d940:	9307      	strlt	r3, [sp, #28]
 800d942:	bfb8      	it	lt
 800d944:	9204      	strlt	r2, [sp, #16]
 800d946:	7823      	ldrb	r3, [r4, #0]
 800d948:	2b2e      	cmp	r3, #46	; 0x2e
 800d94a:	d10c      	bne.n	800d966 <_vfiprintf_r+0x176>
 800d94c:	7863      	ldrb	r3, [r4, #1]
 800d94e:	2b2a      	cmp	r3, #42	; 0x2a
 800d950:	d135      	bne.n	800d9be <_vfiprintf_r+0x1ce>
 800d952:	9b03      	ldr	r3, [sp, #12]
 800d954:	1d1a      	adds	r2, r3, #4
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	9203      	str	r2, [sp, #12]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	bfb8      	it	lt
 800d95e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d962:	3402      	adds	r4, #2
 800d964:	9305      	str	r3, [sp, #20]
 800d966:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800da4c <_vfiprintf_r+0x25c>
 800d96a:	7821      	ldrb	r1, [r4, #0]
 800d96c:	2203      	movs	r2, #3
 800d96e:	4650      	mov	r0, sl
 800d970:	f7f2 fc36 	bl	80001e0 <memchr>
 800d974:	b140      	cbz	r0, 800d988 <_vfiprintf_r+0x198>
 800d976:	2340      	movs	r3, #64	; 0x40
 800d978:	eba0 000a 	sub.w	r0, r0, sl
 800d97c:	fa03 f000 	lsl.w	r0, r3, r0
 800d980:	9b04      	ldr	r3, [sp, #16]
 800d982:	4303      	orrs	r3, r0
 800d984:	3401      	adds	r4, #1
 800d986:	9304      	str	r3, [sp, #16]
 800d988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d98c:	482c      	ldr	r0, [pc, #176]	; (800da40 <_vfiprintf_r+0x250>)
 800d98e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d992:	2206      	movs	r2, #6
 800d994:	f7f2 fc24 	bl	80001e0 <memchr>
 800d998:	2800      	cmp	r0, #0
 800d99a:	d03f      	beq.n	800da1c <_vfiprintf_r+0x22c>
 800d99c:	4b29      	ldr	r3, [pc, #164]	; (800da44 <_vfiprintf_r+0x254>)
 800d99e:	bb1b      	cbnz	r3, 800d9e8 <_vfiprintf_r+0x1f8>
 800d9a0:	9b03      	ldr	r3, [sp, #12]
 800d9a2:	3307      	adds	r3, #7
 800d9a4:	f023 0307 	bic.w	r3, r3, #7
 800d9a8:	3308      	adds	r3, #8
 800d9aa:	9303      	str	r3, [sp, #12]
 800d9ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9ae:	443b      	add	r3, r7
 800d9b0:	9309      	str	r3, [sp, #36]	; 0x24
 800d9b2:	e767      	b.n	800d884 <_vfiprintf_r+0x94>
 800d9b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9b8:	460c      	mov	r4, r1
 800d9ba:	2001      	movs	r0, #1
 800d9bc:	e7a5      	b.n	800d90a <_vfiprintf_r+0x11a>
 800d9be:	2300      	movs	r3, #0
 800d9c0:	3401      	adds	r4, #1
 800d9c2:	9305      	str	r3, [sp, #20]
 800d9c4:	4619      	mov	r1, r3
 800d9c6:	f04f 0c0a 	mov.w	ip, #10
 800d9ca:	4620      	mov	r0, r4
 800d9cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9d0:	3a30      	subs	r2, #48	; 0x30
 800d9d2:	2a09      	cmp	r2, #9
 800d9d4:	d903      	bls.n	800d9de <_vfiprintf_r+0x1ee>
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d0c5      	beq.n	800d966 <_vfiprintf_r+0x176>
 800d9da:	9105      	str	r1, [sp, #20]
 800d9dc:	e7c3      	b.n	800d966 <_vfiprintf_r+0x176>
 800d9de:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9e2:	4604      	mov	r4, r0
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	e7f0      	b.n	800d9ca <_vfiprintf_r+0x1da>
 800d9e8:	ab03      	add	r3, sp, #12
 800d9ea:	9300      	str	r3, [sp, #0]
 800d9ec:	462a      	mov	r2, r5
 800d9ee:	4b16      	ldr	r3, [pc, #88]	; (800da48 <_vfiprintf_r+0x258>)
 800d9f0:	a904      	add	r1, sp, #16
 800d9f2:	4630      	mov	r0, r6
 800d9f4:	f7fb f9c2 	bl	8008d7c <_printf_float>
 800d9f8:	4607      	mov	r7, r0
 800d9fa:	1c78      	adds	r0, r7, #1
 800d9fc:	d1d6      	bne.n	800d9ac <_vfiprintf_r+0x1bc>
 800d9fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da00:	07d9      	lsls	r1, r3, #31
 800da02:	d405      	bmi.n	800da10 <_vfiprintf_r+0x220>
 800da04:	89ab      	ldrh	r3, [r5, #12]
 800da06:	059a      	lsls	r2, r3, #22
 800da08:	d402      	bmi.n	800da10 <_vfiprintf_r+0x220>
 800da0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da0c:	f7ff fe71 	bl	800d6f2 <__retarget_lock_release_recursive>
 800da10:	89ab      	ldrh	r3, [r5, #12]
 800da12:	065b      	lsls	r3, r3, #25
 800da14:	f53f af12 	bmi.w	800d83c <_vfiprintf_r+0x4c>
 800da18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da1a:	e711      	b.n	800d840 <_vfiprintf_r+0x50>
 800da1c:	ab03      	add	r3, sp, #12
 800da1e:	9300      	str	r3, [sp, #0]
 800da20:	462a      	mov	r2, r5
 800da22:	4b09      	ldr	r3, [pc, #36]	; (800da48 <_vfiprintf_r+0x258>)
 800da24:	a904      	add	r1, sp, #16
 800da26:	4630      	mov	r0, r6
 800da28:	f7fb fc4c 	bl	80092c4 <_printf_i>
 800da2c:	e7e4      	b.n	800d9f8 <_vfiprintf_r+0x208>
 800da2e:	bf00      	nop
 800da30:	0800faec 	.word	0x0800faec
 800da34:	0800fb0c 	.word	0x0800fb0c
 800da38:	0800facc 	.word	0x0800facc
 800da3c:	0800fa64 	.word	0x0800fa64
 800da40:	0800fa6e 	.word	0x0800fa6e
 800da44:	08008d7d 	.word	0x08008d7d
 800da48:	0800d7cd 	.word	0x0800d7cd
 800da4c:	0800fa6a 	.word	0x0800fa6a

0800da50 <__swbuf_r>:
 800da50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da52:	460e      	mov	r6, r1
 800da54:	4614      	mov	r4, r2
 800da56:	4605      	mov	r5, r0
 800da58:	b118      	cbz	r0, 800da62 <__swbuf_r+0x12>
 800da5a:	6983      	ldr	r3, [r0, #24]
 800da5c:	b90b      	cbnz	r3, 800da62 <__swbuf_r+0x12>
 800da5e:	f7ff fd97 	bl	800d590 <__sinit>
 800da62:	4b21      	ldr	r3, [pc, #132]	; (800dae8 <__swbuf_r+0x98>)
 800da64:	429c      	cmp	r4, r3
 800da66:	d12b      	bne.n	800dac0 <__swbuf_r+0x70>
 800da68:	686c      	ldr	r4, [r5, #4]
 800da6a:	69a3      	ldr	r3, [r4, #24]
 800da6c:	60a3      	str	r3, [r4, #8]
 800da6e:	89a3      	ldrh	r3, [r4, #12]
 800da70:	071a      	lsls	r2, r3, #28
 800da72:	d52f      	bpl.n	800dad4 <__swbuf_r+0x84>
 800da74:	6923      	ldr	r3, [r4, #16]
 800da76:	b36b      	cbz	r3, 800dad4 <__swbuf_r+0x84>
 800da78:	6923      	ldr	r3, [r4, #16]
 800da7a:	6820      	ldr	r0, [r4, #0]
 800da7c:	1ac0      	subs	r0, r0, r3
 800da7e:	6963      	ldr	r3, [r4, #20]
 800da80:	b2f6      	uxtb	r6, r6
 800da82:	4283      	cmp	r3, r0
 800da84:	4637      	mov	r7, r6
 800da86:	dc04      	bgt.n	800da92 <__swbuf_r+0x42>
 800da88:	4621      	mov	r1, r4
 800da8a:	4628      	mov	r0, r5
 800da8c:	f7ff fcec 	bl	800d468 <_fflush_r>
 800da90:	bb30      	cbnz	r0, 800dae0 <__swbuf_r+0x90>
 800da92:	68a3      	ldr	r3, [r4, #8]
 800da94:	3b01      	subs	r3, #1
 800da96:	60a3      	str	r3, [r4, #8]
 800da98:	6823      	ldr	r3, [r4, #0]
 800da9a:	1c5a      	adds	r2, r3, #1
 800da9c:	6022      	str	r2, [r4, #0]
 800da9e:	701e      	strb	r6, [r3, #0]
 800daa0:	6963      	ldr	r3, [r4, #20]
 800daa2:	3001      	adds	r0, #1
 800daa4:	4283      	cmp	r3, r0
 800daa6:	d004      	beq.n	800dab2 <__swbuf_r+0x62>
 800daa8:	89a3      	ldrh	r3, [r4, #12]
 800daaa:	07db      	lsls	r3, r3, #31
 800daac:	d506      	bpl.n	800dabc <__swbuf_r+0x6c>
 800daae:	2e0a      	cmp	r6, #10
 800dab0:	d104      	bne.n	800dabc <__swbuf_r+0x6c>
 800dab2:	4621      	mov	r1, r4
 800dab4:	4628      	mov	r0, r5
 800dab6:	f7ff fcd7 	bl	800d468 <_fflush_r>
 800daba:	b988      	cbnz	r0, 800dae0 <__swbuf_r+0x90>
 800dabc:	4638      	mov	r0, r7
 800dabe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dac0:	4b0a      	ldr	r3, [pc, #40]	; (800daec <__swbuf_r+0x9c>)
 800dac2:	429c      	cmp	r4, r3
 800dac4:	d101      	bne.n	800daca <__swbuf_r+0x7a>
 800dac6:	68ac      	ldr	r4, [r5, #8]
 800dac8:	e7cf      	b.n	800da6a <__swbuf_r+0x1a>
 800daca:	4b09      	ldr	r3, [pc, #36]	; (800daf0 <__swbuf_r+0xa0>)
 800dacc:	429c      	cmp	r4, r3
 800dace:	bf08      	it	eq
 800dad0:	68ec      	ldreq	r4, [r5, #12]
 800dad2:	e7ca      	b.n	800da6a <__swbuf_r+0x1a>
 800dad4:	4621      	mov	r1, r4
 800dad6:	4628      	mov	r0, r5
 800dad8:	f000 f80c 	bl	800daf4 <__swsetup_r>
 800dadc:	2800      	cmp	r0, #0
 800dade:	d0cb      	beq.n	800da78 <__swbuf_r+0x28>
 800dae0:	f04f 37ff 	mov.w	r7, #4294967295
 800dae4:	e7ea      	b.n	800dabc <__swbuf_r+0x6c>
 800dae6:	bf00      	nop
 800dae8:	0800faec 	.word	0x0800faec
 800daec:	0800fb0c 	.word	0x0800fb0c
 800daf0:	0800facc 	.word	0x0800facc

0800daf4 <__swsetup_r>:
 800daf4:	4b32      	ldr	r3, [pc, #200]	; (800dbc0 <__swsetup_r+0xcc>)
 800daf6:	b570      	push	{r4, r5, r6, lr}
 800daf8:	681d      	ldr	r5, [r3, #0]
 800dafa:	4606      	mov	r6, r0
 800dafc:	460c      	mov	r4, r1
 800dafe:	b125      	cbz	r5, 800db0a <__swsetup_r+0x16>
 800db00:	69ab      	ldr	r3, [r5, #24]
 800db02:	b913      	cbnz	r3, 800db0a <__swsetup_r+0x16>
 800db04:	4628      	mov	r0, r5
 800db06:	f7ff fd43 	bl	800d590 <__sinit>
 800db0a:	4b2e      	ldr	r3, [pc, #184]	; (800dbc4 <__swsetup_r+0xd0>)
 800db0c:	429c      	cmp	r4, r3
 800db0e:	d10f      	bne.n	800db30 <__swsetup_r+0x3c>
 800db10:	686c      	ldr	r4, [r5, #4]
 800db12:	89a3      	ldrh	r3, [r4, #12]
 800db14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db18:	0719      	lsls	r1, r3, #28
 800db1a:	d42c      	bmi.n	800db76 <__swsetup_r+0x82>
 800db1c:	06dd      	lsls	r5, r3, #27
 800db1e:	d411      	bmi.n	800db44 <__swsetup_r+0x50>
 800db20:	2309      	movs	r3, #9
 800db22:	6033      	str	r3, [r6, #0]
 800db24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800db28:	81a3      	strh	r3, [r4, #12]
 800db2a:	f04f 30ff 	mov.w	r0, #4294967295
 800db2e:	e03e      	b.n	800dbae <__swsetup_r+0xba>
 800db30:	4b25      	ldr	r3, [pc, #148]	; (800dbc8 <__swsetup_r+0xd4>)
 800db32:	429c      	cmp	r4, r3
 800db34:	d101      	bne.n	800db3a <__swsetup_r+0x46>
 800db36:	68ac      	ldr	r4, [r5, #8]
 800db38:	e7eb      	b.n	800db12 <__swsetup_r+0x1e>
 800db3a:	4b24      	ldr	r3, [pc, #144]	; (800dbcc <__swsetup_r+0xd8>)
 800db3c:	429c      	cmp	r4, r3
 800db3e:	bf08      	it	eq
 800db40:	68ec      	ldreq	r4, [r5, #12]
 800db42:	e7e6      	b.n	800db12 <__swsetup_r+0x1e>
 800db44:	0758      	lsls	r0, r3, #29
 800db46:	d512      	bpl.n	800db6e <__swsetup_r+0x7a>
 800db48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db4a:	b141      	cbz	r1, 800db5e <__swsetup_r+0x6a>
 800db4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db50:	4299      	cmp	r1, r3
 800db52:	d002      	beq.n	800db5a <__swsetup_r+0x66>
 800db54:	4630      	mov	r0, r6
 800db56:	f7fe fd51 	bl	800c5fc <_free_r>
 800db5a:	2300      	movs	r3, #0
 800db5c:	6363      	str	r3, [r4, #52]	; 0x34
 800db5e:	89a3      	ldrh	r3, [r4, #12]
 800db60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800db64:	81a3      	strh	r3, [r4, #12]
 800db66:	2300      	movs	r3, #0
 800db68:	6063      	str	r3, [r4, #4]
 800db6a:	6923      	ldr	r3, [r4, #16]
 800db6c:	6023      	str	r3, [r4, #0]
 800db6e:	89a3      	ldrh	r3, [r4, #12]
 800db70:	f043 0308 	orr.w	r3, r3, #8
 800db74:	81a3      	strh	r3, [r4, #12]
 800db76:	6923      	ldr	r3, [r4, #16]
 800db78:	b94b      	cbnz	r3, 800db8e <__swsetup_r+0x9a>
 800db7a:	89a3      	ldrh	r3, [r4, #12]
 800db7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800db80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db84:	d003      	beq.n	800db8e <__swsetup_r+0x9a>
 800db86:	4621      	mov	r1, r4
 800db88:	4630      	mov	r0, r6
 800db8a:	f000 f84d 	bl	800dc28 <__smakebuf_r>
 800db8e:	89a0      	ldrh	r0, [r4, #12]
 800db90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db94:	f010 0301 	ands.w	r3, r0, #1
 800db98:	d00a      	beq.n	800dbb0 <__swsetup_r+0xbc>
 800db9a:	2300      	movs	r3, #0
 800db9c:	60a3      	str	r3, [r4, #8]
 800db9e:	6963      	ldr	r3, [r4, #20]
 800dba0:	425b      	negs	r3, r3
 800dba2:	61a3      	str	r3, [r4, #24]
 800dba4:	6923      	ldr	r3, [r4, #16]
 800dba6:	b943      	cbnz	r3, 800dbba <__swsetup_r+0xc6>
 800dba8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dbac:	d1ba      	bne.n	800db24 <__swsetup_r+0x30>
 800dbae:	bd70      	pop	{r4, r5, r6, pc}
 800dbb0:	0781      	lsls	r1, r0, #30
 800dbb2:	bf58      	it	pl
 800dbb4:	6963      	ldrpl	r3, [r4, #20]
 800dbb6:	60a3      	str	r3, [r4, #8]
 800dbb8:	e7f4      	b.n	800dba4 <__swsetup_r+0xb0>
 800dbba:	2000      	movs	r0, #0
 800dbbc:	e7f7      	b.n	800dbae <__swsetup_r+0xba>
 800dbbe:	bf00      	nop
 800dbc0:	200000b4 	.word	0x200000b4
 800dbc4:	0800faec 	.word	0x0800faec
 800dbc8:	0800fb0c 	.word	0x0800fb0c
 800dbcc:	0800facc 	.word	0x0800facc

0800dbd0 <abort>:
 800dbd0:	b508      	push	{r3, lr}
 800dbd2:	2006      	movs	r0, #6
 800dbd4:	f000 f898 	bl	800dd08 <raise>
 800dbd8:	2001      	movs	r0, #1
 800dbda:	f001 fd07 	bl	800f5ec <_exit>

0800dbde <__swhatbuf_r>:
 800dbde:	b570      	push	{r4, r5, r6, lr}
 800dbe0:	460e      	mov	r6, r1
 800dbe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbe6:	2900      	cmp	r1, #0
 800dbe8:	b096      	sub	sp, #88	; 0x58
 800dbea:	4614      	mov	r4, r2
 800dbec:	461d      	mov	r5, r3
 800dbee:	da08      	bge.n	800dc02 <__swhatbuf_r+0x24>
 800dbf0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	602a      	str	r2, [r5, #0]
 800dbf8:	061a      	lsls	r2, r3, #24
 800dbfa:	d410      	bmi.n	800dc1e <__swhatbuf_r+0x40>
 800dbfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc00:	e00e      	b.n	800dc20 <__swhatbuf_r+0x42>
 800dc02:	466a      	mov	r2, sp
 800dc04:	f000 f89c 	bl	800dd40 <_fstat_r>
 800dc08:	2800      	cmp	r0, #0
 800dc0a:	dbf1      	blt.n	800dbf0 <__swhatbuf_r+0x12>
 800dc0c:	9a01      	ldr	r2, [sp, #4]
 800dc0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dc12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dc16:	425a      	negs	r2, r3
 800dc18:	415a      	adcs	r2, r3
 800dc1a:	602a      	str	r2, [r5, #0]
 800dc1c:	e7ee      	b.n	800dbfc <__swhatbuf_r+0x1e>
 800dc1e:	2340      	movs	r3, #64	; 0x40
 800dc20:	2000      	movs	r0, #0
 800dc22:	6023      	str	r3, [r4, #0]
 800dc24:	b016      	add	sp, #88	; 0x58
 800dc26:	bd70      	pop	{r4, r5, r6, pc}

0800dc28 <__smakebuf_r>:
 800dc28:	898b      	ldrh	r3, [r1, #12]
 800dc2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc2c:	079d      	lsls	r5, r3, #30
 800dc2e:	4606      	mov	r6, r0
 800dc30:	460c      	mov	r4, r1
 800dc32:	d507      	bpl.n	800dc44 <__smakebuf_r+0x1c>
 800dc34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dc38:	6023      	str	r3, [r4, #0]
 800dc3a:	6123      	str	r3, [r4, #16]
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	6163      	str	r3, [r4, #20]
 800dc40:	b002      	add	sp, #8
 800dc42:	bd70      	pop	{r4, r5, r6, pc}
 800dc44:	ab01      	add	r3, sp, #4
 800dc46:	466a      	mov	r2, sp
 800dc48:	f7ff ffc9 	bl	800dbde <__swhatbuf_r>
 800dc4c:	9900      	ldr	r1, [sp, #0]
 800dc4e:	4605      	mov	r5, r0
 800dc50:	4630      	mov	r0, r6
 800dc52:	f7fe fd3f 	bl	800c6d4 <_malloc_r>
 800dc56:	b948      	cbnz	r0, 800dc6c <__smakebuf_r+0x44>
 800dc58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc5c:	059a      	lsls	r2, r3, #22
 800dc5e:	d4ef      	bmi.n	800dc40 <__smakebuf_r+0x18>
 800dc60:	f023 0303 	bic.w	r3, r3, #3
 800dc64:	f043 0302 	orr.w	r3, r3, #2
 800dc68:	81a3      	strh	r3, [r4, #12]
 800dc6a:	e7e3      	b.n	800dc34 <__smakebuf_r+0xc>
 800dc6c:	4b0d      	ldr	r3, [pc, #52]	; (800dca4 <__smakebuf_r+0x7c>)
 800dc6e:	62b3      	str	r3, [r6, #40]	; 0x28
 800dc70:	89a3      	ldrh	r3, [r4, #12]
 800dc72:	6020      	str	r0, [r4, #0]
 800dc74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc78:	81a3      	strh	r3, [r4, #12]
 800dc7a:	9b00      	ldr	r3, [sp, #0]
 800dc7c:	6163      	str	r3, [r4, #20]
 800dc7e:	9b01      	ldr	r3, [sp, #4]
 800dc80:	6120      	str	r0, [r4, #16]
 800dc82:	b15b      	cbz	r3, 800dc9c <__smakebuf_r+0x74>
 800dc84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc88:	4630      	mov	r0, r6
 800dc8a:	f000 f86b 	bl	800dd64 <_isatty_r>
 800dc8e:	b128      	cbz	r0, 800dc9c <__smakebuf_r+0x74>
 800dc90:	89a3      	ldrh	r3, [r4, #12]
 800dc92:	f023 0303 	bic.w	r3, r3, #3
 800dc96:	f043 0301 	orr.w	r3, r3, #1
 800dc9a:	81a3      	strh	r3, [r4, #12]
 800dc9c:	89a0      	ldrh	r0, [r4, #12]
 800dc9e:	4305      	orrs	r5, r0
 800dca0:	81a5      	strh	r5, [r4, #12]
 800dca2:	e7cd      	b.n	800dc40 <__smakebuf_r+0x18>
 800dca4:	0800d529 	.word	0x0800d529

0800dca8 <_malloc_usable_size_r>:
 800dca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcac:	1f18      	subs	r0, r3, #4
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	bfbc      	itt	lt
 800dcb2:	580b      	ldrlt	r3, [r1, r0]
 800dcb4:	18c0      	addlt	r0, r0, r3
 800dcb6:	4770      	bx	lr

0800dcb8 <_raise_r>:
 800dcb8:	291f      	cmp	r1, #31
 800dcba:	b538      	push	{r3, r4, r5, lr}
 800dcbc:	4604      	mov	r4, r0
 800dcbe:	460d      	mov	r5, r1
 800dcc0:	d904      	bls.n	800dccc <_raise_r+0x14>
 800dcc2:	2316      	movs	r3, #22
 800dcc4:	6003      	str	r3, [r0, #0]
 800dcc6:	f04f 30ff 	mov.w	r0, #4294967295
 800dcca:	bd38      	pop	{r3, r4, r5, pc}
 800dccc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dcce:	b112      	cbz	r2, 800dcd6 <_raise_r+0x1e>
 800dcd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dcd4:	b94b      	cbnz	r3, 800dcea <_raise_r+0x32>
 800dcd6:	4620      	mov	r0, r4
 800dcd8:	f000 f830 	bl	800dd3c <_getpid_r>
 800dcdc:	462a      	mov	r2, r5
 800dcde:	4601      	mov	r1, r0
 800dce0:	4620      	mov	r0, r4
 800dce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dce6:	f000 b817 	b.w	800dd18 <_kill_r>
 800dcea:	2b01      	cmp	r3, #1
 800dcec:	d00a      	beq.n	800dd04 <_raise_r+0x4c>
 800dcee:	1c59      	adds	r1, r3, #1
 800dcf0:	d103      	bne.n	800dcfa <_raise_r+0x42>
 800dcf2:	2316      	movs	r3, #22
 800dcf4:	6003      	str	r3, [r0, #0]
 800dcf6:	2001      	movs	r0, #1
 800dcf8:	e7e7      	b.n	800dcca <_raise_r+0x12>
 800dcfa:	2400      	movs	r4, #0
 800dcfc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dd00:	4628      	mov	r0, r5
 800dd02:	4798      	blx	r3
 800dd04:	2000      	movs	r0, #0
 800dd06:	e7e0      	b.n	800dcca <_raise_r+0x12>

0800dd08 <raise>:
 800dd08:	4b02      	ldr	r3, [pc, #8]	; (800dd14 <raise+0xc>)
 800dd0a:	4601      	mov	r1, r0
 800dd0c:	6818      	ldr	r0, [r3, #0]
 800dd0e:	f7ff bfd3 	b.w	800dcb8 <_raise_r>
 800dd12:	bf00      	nop
 800dd14:	200000b4 	.word	0x200000b4

0800dd18 <_kill_r>:
 800dd18:	b538      	push	{r3, r4, r5, lr}
 800dd1a:	4d07      	ldr	r5, [pc, #28]	; (800dd38 <_kill_r+0x20>)
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	4604      	mov	r4, r0
 800dd20:	4608      	mov	r0, r1
 800dd22:	4611      	mov	r1, r2
 800dd24:	602b      	str	r3, [r5, #0]
 800dd26:	f001 fc41 	bl	800f5ac <_kill>
 800dd2a:	1c43      	adds	r3, r0, #1
 800dd2c:	d102      	bne.n	800dd34 <_kill_r+0x1c>
 800dd2e:	682b      	ldr	r3, [r5, #0]
 800dd30:	b103      	cbz	r3, 800dd34 <_kill_r+0x1c>
 800dd32:	6023      	str	r3, [r4, #0]
 800dd34:	bd38      	pop	{r3, r4, r5, pc}
 800dd36:	bf00      	nop
 800dd38:	200006d4 	.word	0x200006d4

0800dd3c <_getpid_r>:
 800dd3c:	f001 bc26 	b.w	800f58c <_getpid>

0800dd40 <_fstat_r>:
 800dd40:	b538      	push	{r3, r4, r5, lr}
 800dd42:	4d07      	ldr	r5, [pc, #28]	; (800dd60 <_fstat_r+0x20>)
 800dd44:	2300      	movs	r3, #0
 800dd46:	4604      	mov	r4, r0
 800dd48:	4608      	mov	r0, r1
 800dd4a:	4611      	mov	r1, r2
 800dd4c:	602b      	str	r3, [r5, #0]
 800dd4e:	f001 fc15 	bl	800f57c <_fstat>
 800dd52:	1c43      	adds	r3, r0, #1
 800dd54:	d102      	bne.n	800dd5c <_fstat_r+0x1c>
 800dd56:	682b      	ldr	r3, [r5, #0]
 800dd58:	b103      	cbz	r3, 800dd5c <_fstat_r+0x1c>
 800dd5a:	6023      	str	r3, [r4, #0]
 800dd5c:	bd38      	pop	{r3, r4, r5, pc}
 800dd5e:	bf00      	nop
 800dd60:	200006d4 	.word	0x200006d4

0800dd64 <_isatty_r>:
 800dd64:	b538      	push	{r3, r4, r5, lr}
 800dd66:	4d06      	ldr	r5, [pc, #24]	; (800dd80 <_isatty_r+0x1c>)
 800dd68:	2300      	movs	r3, #0
 800dd6a:	4604      	mov	r4, r0
 800dd6c:	4608      	mov	r0, r1
 800dd6e:	602b      	str	r3, [r5, #0]
 800dd70:	f001 fc14 	bl	800f59c <_isatty>
 800dd74:	1c43      	adds	r3, r0, #1
 800dd76:	d102      	bne.n	800dd7e <_isatty_r+0x1a>
 800dd78:	682b      	ldr	r3, [r5, #0]
 800dd7a:	b103      	cbz	r3, 800dd7e <_isatty_r+0x1a>
 800dd7c:	6023      	str	r3, [r4, #0]
 800dd7e:	bd38      	pop	{r3, r4, r5, pc}
 800dd80:	200006d4 	.word	0x200006d4
 800dd84:	00000000 	.word	0x00000000

0800dd88 <cos>:
 800dd88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd8a:	ec53 2b10 	vmov	r2, r3, d0
 800dd8e:	4826      	ldr	r0, [pc, #152]	; (800de28 <cos+0xa0>)
 800dd90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dd94:	4281      	cmp	r1, r0
 800dd96:	dc06      	bgt.n	800dda6 <cos+0x1e>
 800dd98:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800de20 <cos+0x98>
 800dd9c:	b005      	add	sp, #20
 800dd9e:	f85d eb04 	ldr.w	lr, [sp], #4
 800dda2:	f000 bc59 	b.w	800e658 <__kernel_cos>
 800dda6:	4821      	ldr	r0, [pc, #132]	; (800de2c <cos+0xa4>)
 800dda8:	4281      	cmp	r1, r0
 800ddaa:	dd09      	ble.n	800ddc0 <cos+0x38>
 800ddac:	ee10 0a10 	vmov	r0, s0
 800ddb0:	4619      	mov	r1, r3
 800ddb2:	f7f2 fa69 	bl	8000288 <__aeabi_dsub>
 800ddb6:	ec41 0b10 	vmov	d0, r0, r1
 800ddba:	b005      	add	sp, #20
 800ddbc:	f85d fb04 	ldr.w	pc, [sp], #4
 800ddc0:	4668      	mov	r0, sp
 800ddc2:	f000 f989 	bl	800e0d8 <__ieee754_rem_pio2>
 800ddc6:	f000 0003 	and.w	r0, r0, #3
 800ddca:	2801      	cmp	r0, #1
 800ddcc:	d00b      	beq.n	800dde6 <cos+0x5e>
 800ddce:	2802      	cmp	r0, #2
 800ddd0:	d016      	beq.n	800de00 <cos+0x78>
 800ddd2:	b9e0      	cbnz	r0, 800de0e <cos+0x86>
 800ddd4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ddd8:	ed9d 0b00 	vldr	d0, [sp]
 800dddc:	f000 fc3c 	bl	800e658 <__kernel_cos>
 800dde0:	ec51 0b10 	vmov	r0, r1, d0
 800dde4:	e7e7      	b.n	800ddb6 <cos+0x2e>
 800dde6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ddea:	ed9d 0b00 	vldr	d0, [sp]
 800ddee:	f001 f84b 	bl	800ee88 <__kernel_sin>
 800ddf2:	ec53 2b10 	vmov	r2, r3, d0
 800ddf6:	ee10 0a10 	vmov	r0, s0
 800ddfa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ddfe:	e7da      	b.n	800ddb6 <cos+0x2e>
 800de00:	ed9d 1b02 	vldr	d1, [sp, #8]
 800de04:	ed9d 0b00 	vldr	d0, [sp]
 800de08:	f000 fc26 	bl	800e658 <__kernel_cos>
 800de0c:	e7f1      	b.n	800ddf2 <cos+0x6a>
 800de0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800de12:	ed9d 0b00 	vldr	d0, [sp]
 800de16:	2001      	movs	r0, #1
 800de18:	f001 f836 	bl	800ee88 <__kernel_sin>
 800de1c:	e7e0      	b.n	800dde0 <cos+0x58>
 800de1e:	bf00      	nop
	...
 800de28:	3fe921fb 	.word	0x3fe921fb
 800de2c:	7fefffff 	.word	0x7fefffff

0800de30 <sin>:
 800de30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de32:	ec53 2b10 	vmov	r2, r3, d0
 800de36:	4828      	ldr	r0, [pc, #160]	; (800ded8 <sin+0xa8>)
 800de38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800de3c:	4281      	cmp	r1, r0
 800de3e:	dc07      	bgt.n	800de50 <sin+0x20>
 800de40:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800ded0 <sin+0xa0>
 800de44:	2000      	movs	r0, #0
 800de46:	b005      	add	sp, #20
 800de48:	f85d eb04 	ldr.w	lr, [sp], #4
 800de4c:	f001 b81c 	b.w	800ee88 <__kernel_sin>
 800de50:	4822      	ldr	r0, [pc, #136]	; (800dedc <sin+0xac>)
 800de52:	4281      	cmp	r1, r0
 800de54:	dd09      	ble.n	800de6a <sin+0x3a>
 800de56:	ee10 0a10 	vmov	r0, s0
 800de5a:	4619      	mov	r1, r3
 800de5c:	f7f2 fa14 	bl	8000288 <__aeabi_dsub>
 800de60:	ec41 0b10 	vmov	d0, r0, r1
 800de64:	b005      	add	sp, #20
 800de66:	f85d fb04 	ldr.w	pc, [sp], #4
 800de6a:	4668      	mov	r0, sp
 800de6c:	f000 f934 	bl	800e0d8 <__ieee754_rem_pio2>
 800de70:	f000 0003 	and.w	r0, r0, #3
 800de74:	2801      	cmp	r0, #1
 800de76:	d00c      	beq.n	800de92 <sin+0x62>
 800de78:	2802      	cmp	r0, #2
 800de7a:	d011      	beq.n	800dea0 <sin+0x70>
 800de7c:	b9f0      	cbnz	r0, 800debc <sin+0x8c>
 800de7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800de82:	ed9d 0b00 	vldr	d0, [sp]
 800de86:	2001      	movs	r0, #1
 800de88:	f000 fffe 	bl	800ee88 <__kernel_sin>
 800de8c:	ec51 0b10 	vmov	r0, r1, d0
 800de90:	e7e6      	b.n	800de60 <sin+0x30>
 800de92:	ed9d 1b02 	vldr	d1, [sp, #8]
 800de96:	ed9d 0b00 	vldr	d0, [sp]
 800de9a:	f000 fbdd 	bl	800e658 <__kernel_cos>
 800de9e:	e7f5      	b.n	800de8c <sin+0x5c>
 800dea0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dea4:	ed9d 0b00 	vldr	d0, [sp]
 800dea8:	2001      	movs	r0, #1
 800deaa:	f000 ffed 	bl	800ee88 <__kernel_sin>
 800deae:	ec53 2b10 	vmov	r2, r3, d0
 800deb2:	ee10 0a10 	vmov	r0, s0
 800deb6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800deba:	e7d1      	b.n	800de60 <sin+0x30>
 800debc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dec0:	ed9d 0b00 	vldr	d0, [sp]
 800dec4:	f000 fbc8 	bl	800e658 <__kernel_cos>
 800dec8:	e7f1      	b.n	800deae <sin+0x7e>
 800deca:	bf00      	nop
 800decc:	f3af 8000 	nop.w
	...
 800ded8:	3fe921fb 	.word	0x3fe921fb
 800dedc:	7fefffff 	.word	0x7fefffff

0800dee0 <atan2>:
 800dee0:	f000 b82e 	b.w	800df40 <__ieee754_atan2>

0800dee4 <sqrt>:
 800dee4:	b538      	push	{r3, r4, r5, lr}
 800dee6:	ed2d 8b02 	vpush	{d8}
 800deea:	ec55 4b10 	vmov	r4, r5, d0
 800deee:	f000 faff 	bl	800e4f0 <__ieee754_sqrt>
 800def2:	4622      	mov	r2, r4
 800def4:	462b      	mov	r3, r5
 800def6:	4620      	mov	r0, r4
 800def8:	4629      	mov	r1, r5
 800defa:	eeb0 8a40 	vmov.f32	s16, s0
 800defe:	eef0 8a60 	vmov.f32	s17, s1
 800df02:	f7f2 fe13 	bl	8000b2c <__aeabi_dcmpun>
 800df06:	b990      	cbnz	r0, 800df2e <sqrt+0x4a>
 800df08:	2200      	movs	r2, #0
 800df0a:	2300      	movs	r3, #0
 800df0c:	4620      	mov	r0, r4
 800df0e:	4629      	mov	r1, r5
 800df10:	f7f2 fde4 	bl	8000adc <__aeabi_dcmplt>
 800df14:	b158      	cbz	r0, 800df2e <sqrt+0x4a>
 800df16:	f7fa fe51 	bl	8008bbc <__errno>
 800df1a:	2321      	movs	r3, #33	; 0x21
 800df1c:	6003      	str	r3, [r0, #0]
 800df1e:	2200      	movs	r2, #0
 800df20:	2300      	movs	r3, #0
 800df22:	4610      	mov	r0, r2
 800df24:	4619      	mov	r1, r3
 800df26:	f7f2 fc91 	bl	800084c <__aeabi_ddiv>
 800df2a:	ec41 0b18 	vmov	d8, r0, r1
 800df2e:	eeb0 0a48 	vmov.f32	s0, s16
 800df32:	eef0 0a68 	vmov.f32	s1, s17
 800df36:	ecbd 8b02 	vpop	{d8}
 800df3a:	bd38      	pop	{r3, r4, r5, pc}
 800df3c:	0000      	movs	r0, r0
	...

0800df40 <__ieee754_atan2>:
 800df40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df44:	ec57 6b11 	vmov	r6, r7, d1
 800df48:	4273      	negs	r3, r6
 800df4a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800e0d0 <__ieee754_atan2+0x190>
 800df4e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800df52:	4333      	orrs	r3, r6
 800df54:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800df58:	4573      	cmp	r3, lr
 800df5a:	ec51 0b10 	vmov	r0, r1, d0
 800df5e:	ee11 8a10 	vmov	r8, s2
 800df62:	d80a      	bhi.n	800df7a <__ieee754_atan2+0x3a>
 800df64:	4244      	negs	r4, r0
 800df66:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800df6a:	4304      	orrs	r4, r0
 800df6c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800df70:	4574      	cmp	r4, lr
 800df72:	ee10 9a10 	vmov	r9, s0
 800df76:	468c      	mov	ip, r1
 800df78:	d907      	bls.n	800df8a <__ieee754_atan2+0x4a>
 800df7a:	4632      	mov	r2, r6
 800df7c:	463b      	mov	r3, r7
 800df7e:	f7f2 f985 	bl	800028c <__adddf3>
 800df82:	ec41 0b10 	vmov	d0, r0, r1
 800df86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df8a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800df8e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800df92:	4334      	orrs	r4, r6
 800df94:	d103      	bne.n	800df9e <__ieee754_atan2+0x5e>
 800df96:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df9a:	f001 b835 	b.w	800f008 <atan>
 800df9e:	17bc      	asrs	r4, r7, #30
 800dfa0:	f004 0402 	and.w	r4, r4, #2
 800dfa4:	ea53 0909 	orrs.w	r9, r3, r9
 800dfa8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800dfac:	d107      	bne.n	800dfbe <__ieee754_atan2+0x7e>
 800dfae:	2c02      	cmp	r4, #2
 800dfb0:	d060      	beq.n	800e074 <__ieee754_atan2+0x134>
 800dfb2:	2c03      	cmp	r4, #3
 800dfb4:	d1e5      	bne.n	800df82 <__ieee754_atan2+0x42>
 800dfb6:	a142      	add	r1, pc, #264	; (adr r1, 800e0c0 <__ieee754_atan2+0x180>)
 800dfb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfbc:	e7e1      	b.n	800df82 <__ieee754_atan2+0x42>
 800dfbe:	ea52 0808 	orrs.w	r8, r2, r8
 800dfc2:	d106      	bne.n	800dfd2 <__ieee754_atan2+0x92>
 800dfc4:	f1bc 0f00 	cmp.w	ip, #0
 800dfc8:	da5f      	bge.n	800e08a <__ieee754_atan2+0x14a>
 800dfca:	a13f      	add	r1, pc, #252	; (adr r1, 800e0c8 <__ieee754_atan2+0x188>)
 800dfcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfd0:	e7d7      	b.n	800df82 <__ieee754_atan2+0x42>
 800dfd2:	4572      	cmp	r2, lr
 800dfd4:	d10f      	bne.n	800dff6 <__ieee754_atan2+0xb6>
 800dfd6:	4293      	cmp	r3, r2
 800dfd8:	f104 34ff 	add.w	r4, r4, #4294967295
 800dfdc:	d107      	bne.n	800dfee <__ieee754_atan2+0xae>
 800dfde:	2c02      	cmp	r4, #2
 800dfe0:	d84c      	bhi.n	800e07c <__ieee754_atan2+0x13c>
 800dfe2:	4b35      	ldr	r3, [pc, #212]	; (800e0b8 <__ieee754_atan2+0x178>)
 800dfe4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800dfe8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800dfec:	e7c9      	b.n	800df82 <__ieee754_atan2+0x42>
 800dfee:	2c02      	cmp	r4, #2
 800dff0:	d848      	bhi.n	800e084 <__ieee754_atan2+0x144>
 800dff2:	4b32      	ldr	r3, [pc, #200]	; (800e0bc <__ieee754_atan2+0x17c>)
 800dff4:	e7f6      	b.n	800dfe4 <__ieee754_atan2+0xa4>
 800dff6:	4573      	cmp	r3, lr
 800dff8:	d0e4      	beq.n	800dfc4 <__ieee754_atan2+0x84>
 800dffa:	1a9b      	subs	r3, r3, r2
 800dffc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e000:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e004:	da1e      	bge.n	800e044 <__ieee754_atan2+0x104>
 800e006:	2f00      	cmp	r7, #0
 800e008:	da01      	bge.n	800e00e <__ieee754_atan2+0xce>
 800e00a:	323c      	adds	r2, #60	; 0x3c
 800e00c:	db1e      	blt.n	800e04c <__ieee754_atan2+0x10c>
 800e00e:	4632      	mov	r2, r6
 800e010:	463b      	mov	r3, r7
 800e012:	f7f2 fc1b 	bl	800084c <__aeabi_ddiv>
 800e016:	ec41 0b10 	vmov	d0, r0, r1
 800e01a:	f001 f995 	bl	800f348 <fabs>
 800e01e:	f000 fff3 	bl	800f008 <atan>
 800e022:	ec51 0b10 	vmov	r0, r1, d0
 800e026:	2c01      	cmp	r4, #1
 800e028:	d013      	beq.n	800e052 <__ieee754_atan2+0x112>
 800e02a:	2c02      	cmp	r4, #2
 800e02c:	d015      	beq.n	800e05a <__ieee754_atan2+0x11a>
 800e02e:	2c00      	cmp	r4, #0
 800e030:	d0a7      	beq.n	800df82 <__ieee754_atan2+0x42>
 800e032:	a319      	add	r3, pc, #100	; (adr r3, 800e098 <__ieee754_atan2+0x158>)
 800e034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e038:	f7f2 f926 	bl	8000288 <__aeabi_dsub>
 800e03c:	a318      	add	r3, pc, #96	; (adr r3, 800e0a0 <__ieee754_atan2+0x160>)
 800e03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e042:	e014      	b.n	800e06e <__ieee754_atan2+0x12e>
 800e044:	a118      	add	r1, pc, #96	; (adr r1, 800e0a8 <__ieee754_atan2+0x168>)
 800e046:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e04a:	e7ec      	b.n	800e026 <__ieee754_atan2+0xe6>
 800e04c:	2000      	movs	r0, #0
 800e04e:	2100      	movs	r1, #0
 800e050:	e7e9      	b.n	800e026 <__ieee754_atan2+0xe6>
 800e052:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e056:	4619      	mov	r1, r3
 800e058:	e793      	b.n	800df82 <__ieee754_atan2+0x42>
 800e05a:	a30f      	add	r3, pc, #60	; (adr r3, 800e098 <__ieee754_atan2+0x158>)
 800e05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e060:	f7f2 f912 	bl	8000288 <__aeabi_dsub>
 800e064:	4602      	mov	r2, r0
 800e066:	460b      	mov	r3, r1
 800e068:	a10d      	add	r1, pc, #52	; (adr r1, 800e0a0 <__ieee754_atan2+0x160>)
 800e06a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e06e:	f7f2 f90b 	bl	8000288 <__aeabi_dsub>
 800e072:	e786      	b.n	800df82 <__ieee754_atan2+0x42>
 800e074:	a10a      	add	r1, pc, #40	; (adr r1, 800e0a0 <__ieee754_atan2+0x160>)
 800e076:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e07a:	e782      	b.n	800df82 <__ieee754_atan2+0x42>
 800e07c:	a10c      	add	r1, pc, #48	; (adr r1, 800e0b0 <__ieee754_atan2+0x170>)
 800e07e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e082:	e77e      	b.n	800df82 <__ieee754_atan2+0x42>
 800e084:	2000      	movs	r0, #0
 800e086:	2100      	movs	r1, #0
 800e088:	e77b      	b.n	800df82 <__ieee754_atan2+0x42>
 800e08a:	a107      	add	r1, pc, #28	; (adr r1, 800e0a8 <__ieee754_atan2+0x168>)
 800e08c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e090:	e777      	b.n	800df82 <__ieee754_atan2+0x42>
 800e092:	bf00      	nop
 800e094:	f3af 8000 	nop.w
 800e098:	33145c07 	.word	0x33145c07
 800e09c:	3ca1a626 	.word	0x3ca1a626
 800e0a0:	54442d18 	.word	0x54442d18
 800e0a4:	400921fb 	.word	0x400921fb
 800e0a8:	54442d18 	.word	0x54442d18
 800e0ac:	3ff921fb 	.word	0x3ff921fb
 800e0b0:	54442d18 	.word	0x54442d18
 800e0b4:	3fe921fb 	.word	0x3fe921fb
 800e0b8:	0800fb30 	.word	0x0800fb30
 800e0bc:	0800fb48 	.word	0x0800fb48
 800e0c0:	54442d18 	.word	0x54442d18
 800e0c4:	c00921fb 	.word	0xc00921fb
 800e0c8:	54442d18 	.word	0x54442d18
 800e0cc:	bff921fb 	.word	0xbff921fb
 800e0d0:	7ff00000 	.word	0x7ff00000
 800e0d4:	00000000 	.word	0x00000000

0800e0d8 <__ieee754_rem_pio2>:
 800e0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0dc:	ed2d 8b02 	vpush	{d8}
 800e0e0:	ec55 4b10 	vmov	r4, r5, d0
 800e0e4:	4bca      	ldr	r3, [pc, #808]	; (800e410 <__ieee754_rem_pio2+0x338>)
 800e0e6:	b08b      	sub	sp, #44	; 0x2c
 800e0e8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e0ec:	4598      	cmp	r8, r3
 800e0ee:	4682      	mov	sl, r0
 800e0f0:	9502      	str	r5, [sp, #8]
 800e0f2:	dc08      	bgt.n	800e106 <__ieee754_rem_pio2+0x2e>
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	ed80 0b00 	vstr	d0, [r0]
 800e0fc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e100:	f04f 0b00 	mov.w	fp, #0
 800e104:	e028      	b.n	800e158 <__ieee754_rem_pio2+0x80>
 800e106:	4bc3      	ldr	r3, [pc, #780]	; (800e414 <__ieee754_rem_pio2+0x33c>)
 800e108:	4598      	cmp	r8, r3
 800e10a:	dc78      	bgt.n	800e1fe <__ieee754_rem_pio2+0x126>
 800e10c:	9b02      	ldr	r3, [sp, #8]
 800e10e:	4ec2      	ldr	r6, [pc, #776]	; (800e418 <__ieee754_rem_pio2+0x340>)
 800e110:	2b00      	cmp	r3, #0
 800e112:	ee10 0a10 	vmov	r0, s0
 800e116:	a3b0      	add	r3, pc, #704	; (adr r3, 800e3d8 <__ieee754_rem_pio2+0x300>)
 800e118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e11c:	4629      	mov	r1, r5
 800e11e:	dd39      	ble.n	800e194 <__ieee754_rem_pio2+0xbc>
 800e120:	f7f2 f8b2 	bl	8000288 <__aeabi_dsub>
 800e124:	45b0      	cmp	r8, r6
 800e126:	4604      	mov	r4, r0
 800e128:	460d      	mov	r5, r1
 800e12a:	d01b      	beq.n	800e164 <__ieee754_rem_pio2+0x8c>
 800e12c:	a3ac      	add	r3, pc, #688	; (adr r3, 800e3e0 <__ieee754_rem_pio2+0x308>)
 800e12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e132:	f7f2 f8a9 	bl	8000288 <__aeabi_dsub>
 800e136:	4602      	mov	r2, r0
 800e138:	460b      	mov	r3, r1
 800e13a:	e9ca 2300 	strd	r2, r3, [sl]
 800e13e:	4620      	mov	r0, r4
 800e140:	4629      	mov	r1, r5
 800e142:	f7f2 f8a1 	bl	8000288 <__aeabi_dsub>
 800e146:	a3a6      	add	r3, pc, #664	; (adr r3, 800e3e0 <__ieee754_rem_pio2+0x308>)
 800e148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e14c:	f7f2 f89c 	bl	8000288 <__aeabi_dsub>
 800e150:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e154:	f04f 0b01 	mov.w	fp, #1
 800e158:	4658      	mov	r0, fp
 800e15a:	b00b      	add	sp, #44	; 0x2c
 800e15c:	ecbd 8b02 	vpop	{d8}
 800e160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e164:	a3a0      	add	r3, pc, #640	; (adr r3, 800e3e8 <__ieee754_rem_pio2+0x310>)
 800e166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e16a:	f7f2 f88d 	bl	8000288 <__aeabi_dsub>
 800e16e:	a3a0      	add	r3, pc, #640	; (adr r3, 800e3f0 <__ieee754_rem_pio2+0x318>)
 800e170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e174:	4604      	mov	r4, r0
 800e176:	460d      	mov	r5, r1
 800e178:	f7f2 f886 	bl	8000288 <__aeabi_dsub>
 800e17c:	4602      	mov	r2, r0
 800e17e:	460b      	mov	r3, r1
 800e180:	e9ca 2300 	strd	r2, r3, [sl]
 800e184:	4620      	mov	r0, r4
 800e186:	4629      	mov	r1, r5
 800e188:	f7f2 f87e 	bl	8000288 <__aeabi_dsub>
 800e18c:	a398      	add	r3, pc, #608	; (adr r3, 800e3f0 <__ieee754_rem_pio2+0x318>)
 800e18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e192:	e7db      	b.n	800e14c <__ieee754_rem_pio2+0x74>
 800e194:	f7f2 f87a 	bl	800028c <__adddf3>
 800e198:	45b0      	cmp	r8, r6
 800e19a:	4604      	mov	r4, r0
 800e19c:	460d      	mov	r5, r1
 800e19e:	d016      	beq.n	800e1ce <__ieee754_rem_pio2+0xf6>
 800e1a0:	a38f      	add	r3, pc, #572	; (adr r3, 800e3e0 <__ieee754_rem_pio2+0x308>)
 800e1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a6:	f7f2 f871 	bl	800028c <__adddf3>
 800e1aa:	4602      	mov	r2, r0
 800e1ac:	460b      	mov	r3, r1
 800e1ae:	e9ca 2300 	strd	r2, r3, [sl]
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	4629      	mov	r1, r5
 800e1b6:	f7f2 f867 	bl	8000288 <__aeabi_dsub>
 800e1ba:	a389      	add	r3, pc, #548	; (adr r3, 800e3e0 <__ieee754_rem_pio2+0x308>)
 800e1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c0:	f7f2 f864 	bl	800028c <__adddf3>
 800e1c4:	f04f 3bff 	mov.w	fp, #4294967295
 800e1c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e1cc:	e7c4      	b.n	800e158 <__ieee754_rem_pio2+0x80>
 800e1ce:	a386      	add	r3, pc, #536	; (adr r3, 800e3e8 <__ieee754_rem_pio2+0x310>)
 800e1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d4:	f7f2 f85a 	bl	800028c <__adddf3>
 800e1d8:	a385      	add	r3, pc, #532	; (adr r3, 800e3f0 <__ieee754_rem_pio2+0x318>)
 800e1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1de:	4604      	mov	r4, r0
 800e1e0:	460d      	mov	r5, r1
 800e1e2:	f7f2 f853 	bl	800028c <__adddf3>
 800e1e6:	4602      	mov	r2, r0
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	e9ca 2300 	strd	r2, r3, [sl]
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	4629      	mov	r1, r5
 800e1f2:	f7f2 f849 	bl	8000288 <__aeabi_dsub>
 800e1f6:	a37e      	add	r3, pc, #504	; (adr r3, 800e3f0 <__ieee754_rem_pio2+0x318>)
 800e1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fc:	e7e0      	b.n	800e1c0 <__ieee754_rem_pio2+0xe8>
 800e1fe:	4b87      	ldr	r3, [pc, #540]	; (800e41c <__ieee754_rem_pio2+0x344>)
 800e200:	4598      	cmp	r8, r3
 800e202:	f300 80d9 	bgt.w	800e3b8 <__ieee754_rem_pio2+0x2e0>
 800e206:	f001 f89f 	bl	800f348 <fabs>
 800e20a:	ec55 4b10 	vmov	r4, r5, d0
 800e20e:	ee10 0a10 	vmov	r0, s0
 800e212:	a379      	add	r3, pc, #484	; (adr r3, 800e3f8 <__ieee754_rem_pio2+0x320>)
 800e214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e218:	4629      	mov	r1, r5
 800e21a:	f7f2 f9ed 	bl	80005f8 <__aeabi_dmul>
 800e21e:	4b80      	ldr	r3, [pc, #512]	; (800e420 <__ieee754_rem_pio2+0x348>)
 800e220:	2200      	movs	r2, #0
 800e222:	f7f2 f833 	bl	800028c <__adddf3>
 800e226:	f7f2 fc97 	bl	8000b58 <__aeabi_d2iz>
 800e22a:	4683      	mov	fp, r0
 800e22c:	f7f2 f97a 	bl	8000524 <__aeabi_i2d>
 800e230:	4602      	mov	r2, r0
 800e232:	460b      	mov	r3, r1
 800e234:	ec43 2b18 	vmov	d8, r2, r3
 800e238:	a367      	add	r3, pc, #412	; (adr r3, 800e3d8 <__ieee754_rem_pio2+0x300>)
 800e23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e23e:	f7f2 f9db 	bl	80005f8 <__aeabi_dmul>
 800e242:	4602      	mov	r2, r0
 800e244:	460b      	mov	r3, r1
 800e246:	4620      	mov	r0, r4
 800e248:	4629      	mov	r1, r5
 800e24a:	f7f2 f81d 	bl	8000288 <__aeabi_dsub>
 800e24e:	a364      	add	r3, pc, #400	; (adr r3, 800e3e0 <__ieee754_rem_pio2+0x308>)
 800e250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e254:	4606      	mov	r6, r0
 800e256:	460f      	mov	r7, r1
 800e258:	ec51 0b18 	vmov	r0, r1, d8
 800e25c:	f7f2 f9cc 	bl	80005f8 <__aeabi_dmul>
 800e260:	f1bb 0f1f 	cmp.w	fp, #31
 800e264:	4604      	mov	r4, r0
 800e266:	460d      	mov	r5, r1
 800e268:	dc0d      	bgt.n	800e286 <__ieee754_rem_pio2+0x1ae>
 800e26a:	4b6e      	ldr	r3, [pc, #440]	; (800e424 <__ieee754_rem_pio2+0x34c>)
 800e26c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e274:	4543      	cmp	r3, r8
 800e276:	d006      	beq.n	800e286 <__ieee754_rem_pio2+0x1ae>
 800e278:	4622      	mov	r2, r4
 800e27a:	462b      	mov	r3, r5
 800e27c:	4630      	mov	r0, r6
 800e27e:	4639      	mov	r1, r7
 800e280:	f7f2 f802 	bl	8000288 <__aeabi_dsub>
 800e284:	e00f      	b.n	800e2a6 <__ieee754_rem_pio2+0x1ce>
 800e286:	462b      	mov	r3, r5
 800e288:	4622      	mov	r2, r4
 800e28a:	4630      	mov	r0, r6
 800e28c:	4639      	mov	r1, r7
 800e28e:	f7f1 fffb 	bl	8000288 <__aeabi_dsub>
 800e292:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e296:	9303      	str	r3, [sp, #12]
 800e298:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e29c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800e2a0:	f1b8 0f10 	cmp.w	r8, #16
 800e2a4:	dc02      	bgt.n	800e2ac <__ieee754_rem_pio2+0x1d4>
 800e2a6:	e9ca 0100 	strd	r0, r1, [sl]
 800e2aa:	e039      	b.n	800e320 <__ieee754_rem_pio2+0x248>
 800e2ac:	a34e      	add	r3, pc, #312	; (adr r3, 800e3e8 <__ieee754_rem_pio2+0x310>)
 800e2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b2:	ec51 0b18 	vmov	r0, r1, d8
 800e2b6:	f7f2 f99f 	bl	80005f8 <__aeabi_dmul>
 800e2ba:	4604      	mov	r4, r0
 800e2bc:	460d      	mov	r5, r1
 800e2be:	4602      	mov	r2, r0
 800e2c0:	460b      	mov	r3, r1
 800e2c2:	4630      	mov	r0, r6
 800e2c4:	4639      	mov	r1, r7
 800e2c6:	f7f1 ffdf 	bl	8000288 <__aeabi_dsub>
 800e2ca:	4602      	mov	r2, r0
 800e2cc:	460b      	mov	r3, r1
 800e2ce:	4680      	mov	r8, r0
 800e2d0:	4689      	mov	r9, r1
 800e2d2:	4630      	mov	r0, r6
 800e2d4:	4639      	mov	r1, r7
 800e2d6:	f7f1 ffd7 	bl	8000288 <__aeabi_dsub>
 800e2da:	4622      	mov	r2, r4
 800e2dc:	462b      	mov	r3, r5
 800e2de:	f7f1 ffd3 	bl	8000288 <__aeabi_dsub>
 800e2e2:	a343      	add	r3, pc, #268	; (adr r3, 800e3f0 <__ieee754_rem_pio2+0x318>)
 800e2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e8:	4604      	mov	r4, r0
 800e2ea:	460d      	mov	r5, r1
 800e2ec:	ec51 0b18 	vmov	r0, r1, d8
 800e2f0:	f7f2 f982 	bl	80005f8 <__aeabi_dmul>
 800e2f4:	4622      	mov	r2, r4
 800e2f6:	462b      	mov	r3, r5
 800e2f8:	f7f1 ffc6 	bl	8000288 <__aeabi_dsub>
 800e2fc:	4602      	mov	r2, r0
 800e2fe:	460b      	mov	r3, r1
 800e300:	4604      	mov	r4, r0
 800e302:	460d      	mov	r5, r1
 800e304:	4640      	mov	r0, r8
 800e306:	4649      	mov	r1, r9
 800e308:	f7f1 ffbe 	bl	8000288 <__aeabi_dsub>
 800e30c:	9a03      	ldr	r2, [sp, #12]
 800e30e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e312:	1ad3      	subs	r3, r2, r3
 800e314:	2b31      	cmp	r3, #49	; 0x31
 800e316:	dc24      	bgt.n	800e362 <__ieee754_rem_pio2+0x28a>
 800e318:	e9ca 0100 	strd	r0, r1, [sl]
 800e31c:	4646      	mov	r6, r8
 800e31e:	464f      	mov	r7, r9
 800e320:	e9da 8900 	ldrd	r8, r9, [sl]
 800e324:	4630      	mov	r0, r6
 800e326:	4642      	mov	r2, r8
 800e328:	464b      	mov	r3, r9
 800e32a:	4639      	mov	r1, r7
 800e32c:	f7f1 ffac 	bl	8000288 <__aeabi_dsub>
 800e330:	462b      	mov	r3, r5
 800e332:	4622      	mov	r2, r4
 800e334:	f7f1 ffa8 	bl	8000288 <__aeabi_dsub>
 800e338:	9b02      	ldr	r3, [sp, #8]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e340:	f6bf af0a 	bge.w	800e158 <__ieee754_rem_pio2+0x80>
 800e344:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e348:	f8ca 3004 	str.w	r3, [sl, #4]
 800e34c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e350:	f8ca 8000 	str.w	r8, [sl]
 800e354:	f8ca 0008 	str.w	r0, [sl, #8]
 800e358:	f8ca 300c 	str.w	r3, [sl, #12]
 800e35c:	f1cb 0b00 	rsb	fp, fp, #0
 800e360:	e6fa      	b.n	800e158 <__ieee754_rem_pio2+0x80>
 800e362:	a327      	add	r3, pc, #156	; (adr r3, 800e400 <__ieee754_rem_pio2+0x328>)
 800e364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e368:	ec51 0b18 	vmov	r0, r1, d8
 800e36c:	f7f2 f944 	bl	80005f8 <__aeabi_dmul>
 800e370:	4604      	mov	r4, r0
 800e372:	460d      	mov	r5, r1
 800e374:	4602      	mov	r2, r0
 800e376:	460b      	mov	r3, r1
 800e378:	4640      	mov	r0, r8
 800e37a:	4649      	mov	r1, r9
 800e37c:	f7f1 ff84 	bl	8000288 <__aeabi_dsub>
 800e380:	4602      	mov	r2, r0
 800e382:	460b      	mov	r3, r1
 800e384:	4606      	mov	r6, r0
 800e386:	460f      	mov	r7, r1
 800e388:	4640      	mov	r0, r8
 800e38a:	4649      	mov	r1, r9
 800e38c:	f7f1 ff7c 	bl	8000288 <__aeabi_dsub>
 800e390:	4622      	mov	r2, r4
 800e392:	462b      	mov	r3, r5
 800e394:	f7f1 ff78 	bl	8000288 <__aeabi_dsub>
 800e398:	a31b      	add	r3, pc, #108	; (adr r3, 800e408 <__ieee754_rem_pio2+0x330>)
 800e39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e39e:	4604      	mov	r4, r0
 800e3a0:	460d      	mov	r5, r1
 800e3a2:	ec51 0b18 	vmov	r0, r1, d8
 800e3a6:	f7f2 f927 	bl	80005f8 <__aeabi_dmul>
 800e3aa:	4622      	mov	r2, r4
 800e3ac:	462b      	mov	r3, r5
 800e3ae:	f7f1 ff6b 	bl	8000288 <__aeabi_dsub>
 800e3b2:	4604      	mov	r4, r0
 800e3b4:	460d      	mov	r5, r1
 800e3b6:	e75f      	b.n	800e278 <__ieee754_rem_pio2+0x1a0>
 800e3b8:	4b1b      	ldr	r3, [pc, #108]	; (800e428 <__ieee754_rem_pio2+0x350>)
 800e3ba:	4598      	cmp	r8, r3
 800e3bc:	dd36      	ble.n	800e42c <__ieee754_rem_pio2+0x354>
 800e3be:	ee10 2a10 	vmov	r2, s0
 800e3c2:	462b      	mov	r3, r5
 800e3c4:	4620      	mov	r0, r4
 800e3c6:	4629      	mov	r1, r5
 800e3c8:	f7f1 ff5e 	bl	8000288 <__aeabi_dsub>
 800e3cc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e3d0:	e9ca 0100 	strd	r0, r1, [sl]
 800e3d4:	e694      	b.n	800e100 <__ieee754_rem_pio2+0x28>
 800e3d6:	bf00      	nop
 800e3d8:	54400000 	.word	0x54400000
 800e3dc:	3ff921fb 	.word	0x3ff921fb
 800e3e0:	1a626331 	.word	0x1a626331
 800e3e4:	3dd0b461 	.word	0x3dd0b461
 800e3e8:	1a600000 	.word	0x1a600000
 800e3ec:	3dd0b461 	.word	0x3dd0b461
 800e3f0:	2e037073 	.word	0x2e037073
 800e3f4:	3ba3198a 	.word	0x3ba3198a
 800e3f8:	6dc9c883 	.word	0x6dc9c883
 800e3fc:	3fe45f30 	.word	0x3fe45f30
 800e400:	2e000000 	.word	0x2e000000
 800e404:	3ba3198a 	.word	0x3ba3198a
 800e408:	252049c1 	.word	0x252049c1
 800e40c:	397b839a 	.word	0x397b839a
 800e410:	3fe921fb 	.word	0x3fe921fb
 800e414:	4002d97b 	.word	0x4002d97b
 800e418:	3ff921fb 	.word	0x3ff921fb
 800e41c:	413921fb 	.word	0x413921fb
 800e420:	3fe00000 	.word	0x3fe00000
 800e424:	0800fb60 	.word	0x0800fb60
 800e428:	7fefffff 	.word	0x7fefffff
 800e42c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800e430:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800e434:	ee10 0a10 	vmov	r0, s0
 800e438:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800e43c:	ee10 6a10 	vmov	r6, s0
 800e440:	460f      	mov	r7, r1
 800e442:	f7f2 fb89 	bl	8000b58 <__aeabi_d2iz>
 800e446:	f7f2 f86d 	bl	8000524 <__aeabi_i2d>
 800e44a:	4602      	mov	r2, r0
 800e44c:	460b      	mov	r3, r1
 800e44e:	4630      	mov	r0, r6
 800e450:	4639      	mov	r1, r7
 800e452:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e456:	f7f1 ff17 	bl	8000288 <__aeabi_dsub>
 800e45a:	4b23      	ldr	r3, [pc, #140]	; (800e4e8 <__ieee754_rem_pio2+0x410>)
 800e45c:	2200      	movs	r2, #0
 800e45e:	f7f2 f8cb 	bl	80005f8 <__aeabi_dmul>
 800e462:	460f      	mov	r7, r1
 800e464:	4606      	mov	r6, r0
 800e466:	f7f2 fb77 	bl	8000b58 <__aeabi_d2iz>
 800e46a:	f7f2 f85b 	bl	8000524 <__aeabi_i2d>
 800e46e:	4602      	mov	r2, r0
 800e470:	460b      	mov	r3, r1
 800e472:	4630      	mov	r0, r6
 800e474:	4639      	mov	r1, r7
 800e476:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e47a:	f7f1 ff05 	bl	8000288 <__aeabi_dsub>
 800e47e:	4b1a      	ldr	r3, [pc, #104]	; (800e4e8 <__ieee754_rem_pio2+0x410>)
 800e480:	2200      	movs	r2, #0
 800e482:	f7f2 f8b9 	bl	80005f8 <__aeabi_dmul>
 800e486:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e48a:	ad04      	add	r5, sp, #16
 800e48c:	f04f 0803 	mov.w	r8, #3
 800e490:	46a9      	mov	r9, r5
 800e492:	2600      	movs	r6, #0
 800e494:	2700      	movs	r7, #0
 800e496:	4632      	mov	r2, r6
 800e498:	463b      	mov	r3, r7
 800e49a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800e49e:	46c3      	mov	fp, r8
 800e4a0:	3d08      	subs	r5, #8
 800e4a2:	f108 38ff 	add.w	r8, r8, #4294967295
 800e4a6:	f7f2 fb0f 	bl	8000ac8 <__aeabi_dcmpeq>
 800e4aa:	2800      	cmp	r0, #0
 800e4ac:	d1f3      	bne.n	800e496 <__ieee754_rem_pio2+0x3be>
 800e4ae:	4b0f      	ldr	r3, [pc, #60]	; (800e4ec <__ieee754_rem_pio2+0x414>)
 800e4b0:	9301      	str	r3, [sp, #4]
 800e4b2:	2302      	movs	r3, #2
 800e4b4:	9300      	str	r3, [sp, #0]
 800e4b6:	4622      	mov	r2, r4
 800e4b8:	465b      	mov	r3, fp
 800e4ba:	4651      	mov	r1, sl
 800e4bc:	4648      	mov	r0, r9
 800e4be:	f000 f993 	bl	800e7e8 <__kernel_rem_pio2>
 800e4c2:	9b02      	ldr	r3, [sp, #8]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	4683      	mov	fp, r0
 800e4c8:	f6bf ae46 	bge.w	800e158 <__ieee754_rem_pio2+0x80>
 800e4cc:	e9da 2100 	ldrd	r2, r1, [sl]
 800e4d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e4d4:	e9ca 2300 	strd	r2, r3, [sl]
 800e4d8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e4dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e4e0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e4e4:	e73a      	b.n	800e35c <__ieee754_rem_pio2+0x284>
 800e4e6:	bf00      	nop
 800e4e8:	41700000 	.word	0x41700000
 800e4ec:	0800fbe0 	.word	0x0800fbe0

0800e4f0 <__ieee754_sqrt>:
 800e4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4f4:	ec55 4b10 	vmov	r4, r5, d0
 800e4f8:	4e55      	ldr	r6, [pc, #340]	; (800e650 <__ieee754_sqrt+0x160>)
 800e4fa:	43ae      	bics	r6, r5
 800e4fc:	ee10 0a10 	vmov	r0, s0
 800e500:	ee10 3a10 	vmov	r3, s0
 800e504:	462a      	mov	r2, r5
 800e506:	4629      	mov	r1, r5
 800e508:	d110      	bne.n	800e52c <__ieee754_sqrt+0x3c>
 800e50a:	ee10 2a10 	vmov	r2, s0
 800e50e:	462b      	mov	r3, r5
 800e510:	f7f2 f872 	bl	80005f8 <__aeabi_dmul>
 800e514:	4602      	mov	r2, r0
 800e516:	460b      	mov	r3, r1
 800e518:	4620      	mov	r0, r4
 800e51a:	4629      	mov	r1, r5
 800e51c:	f7f1 feb6 	bl	800028c <__adddf3>
 800e520:	4604      	mov	r4, r0
 800e522:	460d      	mov	r5, r1
 800e524:	ec45 4b10 	vmov	d0, r4, r5
 800e528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e52c:	2d00      	cmp	r5, #0
 800e52e:	dc10      	bgt.n	800e552 <__ieee754_sqrt+0x62>
 800e530:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e534:	4330      	orrs	r0, r6
 800e536:	d0f5      	beq.n	800e524 <__ieee754_sqrt+0x34>
 800e538:	b15d      	cbz	r5, 800e552 <__ieee754_sqrt+0x62>
 800e53a:	ee10 2a10 	vmov	r2, s0
 800e53e:	462b      	mov	r3, r5
 800e540:	ee10 0a10 	vmov	r0, s0
 800e544:	f7f1 fea0 	bl	8000288 <__aeabi_dsub>
 800e548:	4602      	mov	r2, r0
 800e54a:	460b      	mov	r3, r1
 800e54c:	f7f2 f97e 	bl	800084c <__aeabi_ddiv>
 800e550:	e7e6      	b.n	800e520 <__ieee754_sqrt+0x30>
 800e552:	1512      	asrs	r2, r2, #20
 800e554:	d074      	beq.n	800e640 <__ieee754_sqrt+0x150>
 800e556:	07d4      	lsls	r4, r2, #31
 800e558:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e55c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e560:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e564:	bf5e      	ittt	pl
 800e566:	0fda      	lsrpl	r2, r3, #31
 800e568:	005b      	lslpl	r3, r3, #1
 800e56a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e56e:	2400      	movs	r4, #0
 800e570:	0fda      	lsrs	r2, r3, #31
 800e572:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e576:	107f      	asrs	r7, r7, #1
 800e578:	005b      	lsls	r3, r3, #1
 800e57a:	2516      	movs	r5, #22
 800e57c:	4620      	mov	r0, r4
 800e57e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e582:	1886      	adds	r6, r0, r2
 800e584:	428e      	cmp	r6, r1
 800e586:	bfde      	ittt	le
 800e588:	1b89      	suble	r1, r1, r6
 800e58a:	18b0      	addle	r0, r6, r2
 800e58c:	18a4      	addle	r4, r4, r2
 800e58e:	0049      	lsls	r1, r1, #1
 800e590:	3d01      	subs	r5, #1
 800e592:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e596:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e59a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e59e:	d1f0      	bne.n	800e582 <__ieee754_sqrt+0x92>
 800e5a0:	462a      	mov	r2, r5
 800e5a2:	f04f 0e20 	mov.w	lr, #32
 800e5a6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e5aa:	4281      	cmp	r1, r0
 800e5ac:	eb06 0c05 	add.w	ip, r6, r5
 800e5b0:	dc02      	bgt.n	800e5b8 <__ieee754_sqrt+0xc8>
 800e5b2:	d113      	bne.n	800e5dc <__ieee754_sqrt+0xec>
 800e5b4:	459c      	cmp	ip, r3
 800e5b6:	d811      	bhi.n	800e5dc <__ieee754_sqrt+0xec>
 800e5b8:	f1bc 0f00 	cmp.w	ip, #0
 800e5bc:	eb0c 0506 	add.w	r5, ip, r6
 800e5c0:	da43      	bge.n	800e64a <__ieee754_sqrt+0x15a>
 800e5c2:	2d00      	cmp	r5, #0
 800e5c4:	db41      	blt.n	800e64a <__ieee754_sqrt+0x15a>
 800e5c6:	f100 0801 	add.w	r8, r0, #1
 800e5ca:	1a09      	subs	r1, r1, r0
 800e5cc:	459c      	cmp	ip, r3
 800e5ce:	bf88      	it	hi
 800e5d0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800e5d4:	eba3 030c 	sub.w	r3, r3, ip
 800e5d8:	4432      	add	r2, r6
 800e5da:	4640      	mov	r0, r8
 800e5dc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e5e0:	f1be 0e01 	subs.w	lr, lr, #1
 800e5e4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e5e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e5ec:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e5f0:	d1db      	bne.n	800e5aa <__ieee754_sqrt+0xba>
 800e5f2:	430b      	orrs	r3, r1
 800e5f4:	d006      	beq.n	800e604 <__ieee754_sqrt+0x114>
 800e5f6:	1c50      	adds	r0, r2, #1
 800e5f8:	bf13      	iteet	ne
 800e5fa:	3201      	addne	r2, #1
 800e5fc:	3401      	addeq	r4, #1
 800e5fe:	4672      	moveq	r2, lr
 800e600:	f022 0201 	bicne.w	r2, r2, #1
 800e604:	1063      	asrs	r3, r4, #1
 800e606:	0852      	lsrs	r2, r2, #1
 800e608:	07e1      	lsls	r1, r4, #31
 800e60a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e60e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e612:	bf48      	it	mi
 800e614:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e618:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e61c:	4614      	mov	r4, r2
 800e61e:	e781      	b.n	800e524 <__ieee754_sqrt+0x34>
 800e620:	0ad9      	lsrs	r1, r3, #11
 800e622:	3815      	subs	r0, #21
 800e624:	055b      	lsls	r3, r3, #21
 800e626:	2900      	cmp	r1, #0
 800e628:	d0fa      	beq.n	800e620 <__ieee754_sqrt+0x130>
 800e62a:	02cd      	lsls	r5, r1, #11
 800e62c:	d50a      	bpl.n	800e644 <__ieee754_sqrt+0x154>
 800e62e:	f1c2 0420 	rsb	r4, r2, #32
 800e632:	fa23 f404 	lsr.w	r4, r3, r4
 800e636:	1e55      	subs	r5, r2, #1
 800e638:	4093      	lsls	r3, r2
 800e63a:	4321      	orrs	r1, r4
 800e63c:	1b42      	subs	r2, r0, r5
 800e63e:	e78a      	b.n	800e556 <__ieee754_sqrt+0x66>
 800e640:	4610      	mov	r0, r2
 800e642:	e7f0      	b.n	800e626 <__ieee754_sqrt+0x136>
 800e644:	0049      	lsls	r1, r1, #1
 800e646:	3201      	adds	r2, #1
 800e648:	e7ef      	b.n	800e62a <__ieee754_sqrt+0x13a>
 800e64a:	4680      	mov	r8, r0
 800e64c:	e7bd      	b.n	800e5ca <__ieee754_sqrt+0xda>
 800e64e:	bf00      	nop
 800e650:	7ff00000 	.word	0x7ff00000
 800e654:	00000000 	.word	0x00000000

0800e658 <__kernel_cos>:
 800e658:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e65c:	ec57 6b10 	vmov	r6, r7, d0
 800e660:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e664:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e668:	ed8d 1b00 	vstr	d1, [sp]
 800e66c:	da07      	bge.n	800e67e <__kernel_cos+0x26>
 800e66e:	ee10 0a10 	vmov	r0, s0
 800e672:	4639      	mov	r1, r7
 800e674:	f7f2 fa70 	bl	8000b58 <__aeabi_d2iz>
 800e678:	2800      	cmp	r0, #0
 800e67a:	f000 8088 	beq.w	800e78e <__kernel_cos+0x136>
 800e67e:	4632      	mov	r2, r6
 800e680:	463b      	mov	r3, r7
 800e682:	4630      	mov	r0, r6
 800e684:	4639      	mov	r1, r7
 800e686:	f7f1 ffb7 	bl	80005f8 <__aeabi_dmul>
 800e68a:	4b51      	ldr	r3, [pc, #324]	; (800e7d0 <__kernel_cos+0x178>)
 800e68c:	2200      	movs	r2, #0
 800e68e:	4604      	mov	r4, r0
 800e690:	460d      	mov	r5, r1
 800e692:	f7f1 ffb1 	bl	80005f8 <__aeabi_dmul>
 800e696:	a340      	add	r3, pc, #256	; (adr r3, 800e798 <__kernel_cos+0x140>)
 800e698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e69c:	4682      	mov	sl, r0
 800e69e:	468b      	mov	fp, r1
 800e6a0:	4620      	mov	r0, r4
 800e6a2:	4629      	mov	r1, r5
 800e6a4:	f7f1 ffa8 	bl	80005f8 <__aeabi_dmul>
 800e6a8:	a33d      	add	r3, pc, #244	; (adr r3, 800e7a0 <__kernel_cos+0x148>)
 800e6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ae:	f7f1 fded 	bl	800028c <__adddf3>
 800e6b2:	4622      	mov	r2, r4
 800e6b4:	462b      	mov	r3, r5
 800e6b6:	f7f1 ff9f 	bl	80005f8 <__aeabi_dmul>
 800e6ba:	a33b      	add	r3, pc, #236	; (adr r3, 800e7a8 <__kernel_cos+0x150>)
 800e6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c0:	f7f1 fde2 	bl	8000288 <__aeabi_dsub>
 800e6c4:	4622      	mov	r2, r4
 800e6c6:	462b      	mov	r3, r5
 800e6c8:	f7f1 ff96 	bl	80005f8 <__aeabi_dmul>
 800e6cc:	a338      	add	r3, pc, #224	; (adr r3, 800e7b0 <__kernel_cos+0x158>)
 800e6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d2:	f7f1 fddb 	bl	800028c <__adddf3>
 800e6d6:	4622      	mov	r2, r4
 800e6d8:	462b      	mov	r3, r5
 800e6da:	f7f1 ff8d 	bl	80005f8 <__aeabi_dmul>
 800e6de:	a336      	add	r3, pc, #216	; (adr r3, 800e7b8 <__kernel_cos+0x160>)
 800e6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e4:	f7f1 fdd0 	bl	8000288 <__aeabi_dsub>
 800e6e8:	4622      	mov	r2, r4
 800e6ea:	462b      	mov	r3, r5
 800e6ec:	f7f1 ff84 	bl	80005f8 <__aeabi_dmul>
 800e6f0:	a333      	add	r3, pc, #204	; (adr r3, 800e7c0 <__kernel_cos+0x168>)
 800e6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f6:	f7f1 fdc9 	bl	800028c <__adddf3>
 800e6fa:	4622      	mov	r2, r4
 800e6fc:	462b      	mov	r3, r5
 800e6fe:	f7f1 ff7b 	bl	80005f8 <__aeabi_dmul>
 800e702:	4622      	mov	r2, r4
 800e704:	462b      	mov	r3, r5
 800e706:	f7f1 ff77 	bl	80005f8 <__aeabi_dmul>
 800e70a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e70e:	4604      	mov	r4, r0
 800e710:	460d      	mov	r5, r1
 800e712:	4630      	mov	r0, r6
 800e714:	4639      	mov	r1, r7
 800e716:	f7f1 ff6f 	bl	80005f8 <__aeabi_dmul>
 800e71a:	460b      	mov	r3, r1
 800e71c:	4602      	mov	r2, r0
 800e71e:	4629      	mov	r1, r5
 800e720:	4620      	mov	r0, r4
 800e722:	f7f1 fdb1 	bl	8000288 <__aeabi_dsub>
 800e726:	4b2b      	ldr	r3, [pc, #172]	; (800e7d4 <__kernel_cos+0x17c>)
 800e728:	4598      	cmp	r8, r3
 800e72a:	4606      	mov	r6, r0
 800e72c:	460f      	mov	r7, r1
 800e72e:	dc10      	bgt.n	800e752 <__kernel_cos+0xfa>
 800e730:	4602      	mov	r2, r0
 800e732:	460b      	mov	r3, r1
 800e734:	4650      	mov	r0, sl
 800e736:	4659      	mov	r1, fp
 800e738:	f7f1 fda6 	bl	8000288 <__aeabi_dsub>
 800e73c:	460b      	mov	r3, r1
 800e73e:	4926      	ldr	r1, [pc, #152]	; (800e7d8 <__kernel_cos+0x180>)
 800e740:	4602      	mov	r2, r0
 800e742:	2000      	movs	r0, #0
 800e744:	f7f1 fda0 	bl	8000288 <__aeabi_dsub>
 800e748:	ec41 0b10 	vmov	d0, r0, r1
 800e74c:	b003      	add	sp, #12
 800e74e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e752:	4b22      	ldr	r3, [pc, #136]	; (800e7dc <__kernel_cos+0x184>)
 800e754:	4920      	ldr	r1, [pc, #128]	; (800e7d8 <__kernel_cos+0x180>)
 800e756:	4598      	cmp	r8, r3
 800e758:	bfcc      	ite	gt
 800e75a:	4d21      	ldrgt	r5, [pc, #132]	; (800e7e0 <__kernel_cos+0x188>)
 800e75c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e760:	2400      	movs	r4, #0
 800e762:	4622      	mov	r2, r4
 800e764:	462b      	mov	r3, r5
 800e766:	2000      	movs	r0, #0
 800e768:	f7f1 fd8e 	bl	8000288 <__aeabi_dsub>
 800e76c:	4622      	mov	r2, r4
 800e76e:	4680      	mov	r8, r0
 800e770:	4689      	mov	r9, r1
 800e772:	462b      	mov	r3, r5
 800e774:	4650      	mov	r0, sl
 800e776:	4659      	mov	r1, fp
 800e778:	f7f1 fd86 	bl	8000288 <__aeabi_dsub>
 800e77c:	4632      	mov	r2, r6
 800e77e:	463b      	mov	r3, r7
 800e780:	f7f1 fd82 	bl	8000288 <__aeabi_dsub>
 800e784:	4602      	mov	r2, r0
 800e786:	460b      	mov	r3, r1
 800e788:	4640      	mov	r0, r8
 800e78a:	4649      	mov	r1, r9
 800e78c:	e7da      	b.n	800e744 <__kernel_cos+0xec>
 800e78e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e7c8 <__kernel_cos+0x170>
 800e792:	e7db      	b.n	800e74c <__kernel_cos+0xf4>
 800e794:	f3af 8000 	nop.w
 800e798:	be8838d4 	.word	0xbe8838d4
 800e79c:	bda8fae9 	.word	0xbda8fae9
 800e7a0:	bdb4b1c4 	.word	0xbdb4b1c4
 800e7a4:	3e21ee9e 	.word	0x3e21ee9e
 800e7a8:	809c52ad 	.word	0x809c52ad
 800e7ac:	3e927e4f 	.word	0x3e927e4f
 800e7b0:	19cb1590 	.word	0x19cb1590
 800e7b4:	3efa01a0 	.word	0x3efa01a0
 800e7b8:	16c15177 	.word	0x16c15177
 800e7bc:	3f56c16c 	.word	0x3f56c16c
 800e7c0:	5555554c 	.word	0x5555554c
 800e7c4:	3fa55555 	.word	0x3fa55555
 800e7c8:	00000000 	.word	0x00000000
 800e7cc:	3ff00000 	.word	0x3ff00000
 800e7d0:	3fe00000 	.word	0x3fe00000
 800e7d4:	3fd33332 	.word	0x3fd33332
 800e7d8:	3ff00000 	.word	0x3ff00000
 800e7dc:	3fe90000 	.word	0x3fe90000
 800e7e0:	3fd20000 	.word	0x3fd20000
 800e7e4:	00000000 	.word	0x00000000

0800e7e8 <__kernel_rem_pio2>:
 800e7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ec:	ed2d 8b02 	vpush	{d8}
 800e7f0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800e7f4:	f112 0f14 	cmn.w	r2, #20
 800e7f8:	9308      	str	r3, [sp, #32]
 800e7fa:	9101      	str	r1, [sp, #4]
 800e7fc:	4bc4      	ldr	r3, [pc, #784]	; (800eb10 <__kernel_rem_pio2+0x328>)
 800e7fe:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800e800:	900b      	str	r0, [sp, #44]	; 0x2c
 800e802:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e806:	9302      	str	r3, [sp, #8]
 800e808:	9b08      	ldr	r3, [sp, #32]
 800e80a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e80e:	bfa8      	it	ge
 800e810:	1ed4      	subge	r4, r2, #3
 800e812:	9306      	str	r3, [sp, #24]
 800e814:	bfb2      	itee	lt
 800e816:	2400      	movlt	r4, #0
 800e818:	2318      	movge	r3, #24
 800e81a:	fb94 f4f3 	sdivge	r4, r4, r3
 800e81e:	f06f 0317 	mvn.w	r3, #23
 800e822:	fb04 3303 	mla	r3, r4, r3, r3
 800e826:	eb03 0a02 	add.w	sl, r3, r2
 800e82a:	9b02      	ldr	r3, [sp, #8]
 800e82c:	9a06      	ldr	r2, [sp, #24]
 800e82e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800eb00 <__kernel_rem_pio2+0x318>
 800e832:	eb03 0802 	add.w	r8, r3, r2
 800e836:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e838:	1aa7      	subs	r7, r4, r2
 800e83a:	ae22      	add	r6, sp, #136	; 0x88
 800e83c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e840:	2500      	movs	r5, #0
 800e842:	4545      	cmp	r5, r8
 800e844:	dd13      	ble.n	800e86e <__kernel_rem_pio2+0x86>
 800e846:	9b08      	ldr	r3, [sp, #32]
 800e848:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800eb00 <__kernel_rem_pio2+0x318>
 800e84c:	aa22      	add	r2, sp, #136	; 0x88
 800e84e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e852:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800e856:	f04f 0800 	mov.w	r8, #0
 800e85a:	9b02      	ldr	r3, [sp, #8]
 800e85c:	4598      	cmp	r8, r3
 800e85e:	dc2f      	bgt.n	800e8c0 <__kernel_rem_pio2+0xd8>
 800e860:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e864:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800e868:	462f      	mov	r7, r5
 800e86a:	2600      	movs	r6, #0
 800e86c:	e01b      	b.n	800e8a6 <__kernel_rem_pio2+0xbe>
 800e86e:	42ef      	cmn	r7, r5
 800e870:	d407      	bmi.n	800e882 <__kernel_rem_pio2+0x9a>
 800e872:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e876:	f7f1 fe55 	bl	8000524 <__aeabi_i2d>
 800e87a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e87e:	3501      	adds	r5, #1
 800e880:	e7df      	b.n	800e842 <__kernel_rem_pio2+0x5a>
 800e882:	ec51 0b18 	vmov	r0, r1, d8
 800e886:	e7f8      	b.n	800e87a <__kernel_rem_pio2+0x92>
 800e888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e88c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e890:	f7f1 feb2 	bl	80005f8 <__aeabi_dmul>
 800e894:	4602      	mov	r2, r0
 800e896:	460b      	mov	r3, r1
 800e898:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e89c:	f7f1 fcf6 	bl	800028c <__adddf3>
 800e8a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e8a4:	3601      	adds	r6, #1
 800e8a6:	9b06      	ldr	r3, [sp, #24]
 800e8a8:	429e      	cmp	r6, r3
 800e8aa:	f1a7 0708 	sub.w	r7, r7, #8
 800e8ae:	ddeb      	ble.n	800e888 <__kernel_rem_pio2+0xa0>
 800e8b0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e8b4:	f108 0801 	add.w	r8, r8, #1
 800e8b8:	ecab 7b02 	vstmia	fp!, {d7}
 800e8bc:	3508      	adds	r5, #8
 800e8be:	e7cc      	b.n	800e85a <__kernel_rem_pio2+0x72>
 800e8c0:	9b02      	ldr	r3, [sp, #8]
 800e8c2:	aa0e      	add	r2, sp, #56	; 0x38
 800e8c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e8c8:	930d      	str	r3, [sp, #52]	; 0x34
 800e8ca:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e8cc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e8d0:	9c02      	ldr	r4, [sp, #8]
 800e8d2:	930c      	str	r3, [sp, #48]	; 0x30
 800e8d4:	00e3      	lsls	r3, r4, #3
 800e8d6:	930a      	str	r3, [sp, #40]	; 0x28
 800e8d8:	ab9a      	add	r3, sp, #616	; 0x268
 800e8da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e8de:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e8e2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800e8e6:	ab72      	add	r3, sp, #456	; 0x1c8
 800e8e8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e8ec:	46c3      	mov	fp, r8
 800e8ee:	46a1      	mov	r9, r4
 800e8f0:	f1b9 0f00 	cmp.w	r9, #0
 800e8f4:	f1a5 0508 	sub.w	r5, r5, #8
 800e8f8:	dc77      	bgt.n	800e9ea <__kernel_rem_pio2+0x202>
 800e8fa:	ec47 6b10 	vmov	d0, r6, r7
 800e8fe:	4650      	mov	r0, sl
 800e900:	f000 fdae 	bl	800f460 <scalbn>
 800e904:	ec57 6b10 	vmov	r6, r7, d0
 800e908:	2200      	movs	r2, #0
 800e90a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e90e:	ee10 0a10 	vmov	r0, s0
 800e912:	4639      	mov	r1, r7
 800e914:	f7f1 fe70 	bl	80005f8 <__aeabi_dmul>
 800e918:	ec41 0b10 	vmov	d0, r0, r1
 800e91c:	f000 fd20 	bl	800f360 <floor>
 800e920:	4b7c      	ldr	r3, [pc, #496]	; (800eb14 <__kernel_rem_pio2+0x32c>)
 800e922:	ec51 0b10 	vmov	r0, r1, d0
 800e926:	2200      	movs	r2, #0
 800e928:	f7f1 fe66 	bl	80005f8 <__aeabi_dmul>
 800e92c:	4602      	mov	r2, r0
 800e92e:	460b      	mov	r3, r1
 800e930:	4630      	mov	r0, r6
 800e932:	4639      	mov	r1, r7
 800e934:	f7f1 fca8 	bl	8000288 <__aeabi_dsub>
 800e938:	460f      	mov	r7, r1
 800e93a:	4606      	mov	r6, r0
 800e93c:	f7f2 f90c 	bl	8000b58 <__aeabi_d2iz>
 800e940:	9004      	str	r0, [sp, #16]
 800e942:	f7f1 fdef 	bl	8000524 <__aeabi_i2d>
 800e946:	4602      	mov	r2, r0
 800e948:	460b      	mov	r3, r1
 800e94a:	4630      	mov	r0, r6
 800e94c:	4639      	mov	r1, r7
 800e94e:	f7f1 fc9b 	bl	8000288 <__aeabi_dsub>
 800e952:	f1ba 0f00 	cmp.w	sl, #0
 800e956:	4606      	mov	r6, r0
 800e958:	460f      	mov	r7, r1
 800e95a:	dd6d      	ble.n	800ea38 <__kernel_rem_pio2+0x250>
 800e95c:	1e62      	subs	r2, r4, #1
 800e95e:	ab0e      	add	r3, sp, #56	; 0x38
 800e960:	9d04      	ldr	r5, [sp, #16]
 800e962:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e966:	f1ca 0118 	rsb	r1, sl, #24
 800e96a:	fa40 f301 	asr.w	r3, r0, r1
 800e96e:	441d      	add	r5, r3
 800e970:	408b      	lsls	r3, r1
 800e972:	1ac0      	subs	r0, r0, r3
 800e974:	ab0e      	add	r3, sp, #56	; 0x38
 800e976:	9504      	str	r5, [sp, #16]
 800e978:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e97c:	f1ca 0317 	rsb	r3, sl, #23
 800e980:	fa40 fb03 	asr.w	fp, r0, r3
 800e984:	f1bb 0f00 	cmp.w	fp, #0
 800e988:	dd65      	ble.n	800ea56 <__kernel_rem_pio2+0x26e>
 800e98a:	9b04      	ldr	r3, [sp, #16]
 800e98c:	2200      	movs	r2, #0
 800e98e:	3301      	adds	r3, #1
 800e990:	9304      	str	r3, [sp, #16]
 800e992:	4615      	mov	r5, r2
 800e994:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e998:	4294      	cmp	r4, r2
 800e99a:	f300 809c 	bgt.w	800ead6 <__kernel_rem_pio2+0x2ee>
 800e99e:	f1ba 0f00 	cmp.w	sl, #0
 800e9a2:	dd07      	ble.n	800e9b4 <__kernel_rem_pio2+0x1cc>
 800e9a4:	f1ba 0f01 	cmp.w	sl, #1
 800e9a8:	f000 80c0 	beq.w	800eb2c <__kernel_rem_pio2+0x344>
 800e9ac:	f1ba 0f02 	cmp.w	sl, #2
 800e9b0:	f000 80c6 	beq.w	800eb40 <__kernel_rem_pio2+0x358>
 800e9b4:	f1bb 0f02 	cmp.w	fp, #2
 800e9b8:	d14d      	bne.n	800ea56 <__kernel_rem_pio2+0x26e>
 800e9ba:	4632      	mov	r2, r6
 800e9bc:	463b      	mov	r3, r7
 800e9be:	4956      	ldr	r1, [pc, #344]	; (800eb18 <__kernel_rem_pio2+0x330>)
 800e9c0:	2000      	movs	r0, #0
 800e9c2:	f7f1 fc61 	bl	8000288 <__aeabi_dsub>
 800e9c6:	4606      	mov	r6, r0
 800e9c8:	460f      	mov	r7, r1
 800e9ca:	2d00      	cmp	r5, #0
 800e9cc:	d043      	beq.n	800ea56 <__kernel_rem_pio2+0x26e>
 800e9ce:	4650      	mov	r0, sl
 800e9d0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800eb08 <__kernel_rem_pio2+0x320>
 800e9d4:	f000 fd44 	bl	800f460 <scalbn>
 800e9d8:	4630      	mov	r0, r6
 800e9da:	4639      	mov	r1, r7
 800e9dc:	ec53 2b10 	vmov	r2, r3, d0
 800e9e0:	f7f1 fc52 	bl	8000288 <__aeabi_dsub>
 800e9e4:	4606      	mov	r6, r0
 800e9e6:	460f      	mov	r7, r1
 800e9e8:	e035      	b.n	800ea56 <__kernel_rem_pio2+0x26e>
 800e9ea:	4b4c      	ldr	r3, [pc, #304]	; (800eb1c <__kernel_rem_pio2+0x334>)
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	4630      	mov	r0, r6
 800e9f0:	4639      	mov	r1, r7
 800e9f2:	f7f1 fe01 	bl	80005f8 <__aeabi_dmul>
 800e9f6:	f7f2 f8af 	bl	8000b58 <__aeabi_d2iz>
 800e9fa:	f7f1 fd93 	bl	8000524 <__aeabi_i2d>
 800e9fe:	4602      	mov	r2, r0
 800ea00:	460b      	mov	r3, r1
 800ea02:	ec43 2b18 	vmov	d8, r2, r3
 800ea06:	4b46      	ldr	r3, [pc, #280]	; (800eb20 <__kernel_rem_pio2+0x338>)
 800ea08:	2200      	movs	r2, #0
 800ea0a:	f7f1 fdf5 	bl	80005f8 <__aeabi_dmul>
 800ea0e:	4602      	mov	r2, r0
 800ea10:	460b      	mov	r3, r1
 800ea12:	4630      	mov	r0, r6
 800ea14:	4639      	mov	r1, r7
 800ea16:	f7f1 fc37 	bl	8000288 <__aeabi_dsub>
 800ea1a:	f7f2 f89d 	bl	8000b58 <__aeabi_d2iz>
 800ea1e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ea22:	f84b 0b04 	str.w	r0, [fp], #4
 800ea26:	ec51 0b18 	vmov	r0, r1, d8
 800ea2a:	f7f1 fc2f 	bl	800028c <__adddf3>
 800ea2e:	f109 39ff 	add.w	r9, r9, #4294967295
 800ea32:	4606      	mov	r6, r0
 800ea34:	460f      	mov	r7, r1
 800ea36:	e75b      	b.n	800e8f0 <__kernel_rem_pio2+0x108>
 800ea38:	d106      	bne.n	800ea48 <__kernel_rem_pio2+0x260>
 800ea3a:	1e63      	subs	r3, r4, #1
 800ea3c:	aa0e      	add	r2, sp, #56	; 0x38
 800ea3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ea42:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800ea46:	e79d      	b.n	800e984 <__kernel_rem_pio2+0x19c>
 800ea48:	4b36      	ldr	r3, [pc, #216]	; (800eb24 <__kernel_rem_pio2+0x33c>)
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	f7f2 f85a 	bl	8000b04 <__aeabi_dcmpge>
 800ea50:	2800      	cmp	r0, #0
 800ea52:	d13d      	bne.n	800ead0 <__kernel_rem_pio2+0x2e8>
 800ea54:	4683      	mov	fp, r0
 800ea56:	2200      	movs	r2, #0
 800ea58:	2300      	movs	r3, #0
 800ea5a:	4630      	mov	r0, r6
 800ea5c:	4639      	mov	r1, r7
 800ea5e:	f7f2 f833 	bl	8000ac8 <__aeabi_dcmpeq>
 800ea62:	2800      	cmp	r0, #0
 800ea64:	f000 80c0 	beq.w	800ebe8 <__kernel_rem_pio2+0x400>
 800ea68:	1e65      	subs	r5, r4, #1
 800ea6a:	462b      	mov	r3, r5
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	9902      	ldr	r1, [sp, #8]
 800ea70:	428b      	cmp	r3, r1
 800ea72:	da6c      	bge.n	800eb4e <__kernel_rem_pio2+0x366>
 800ea74:	2a00      	cmp	r2, #0
 800ea76:	f000 8089 	beq.w	800eb8c <__kernel_rem_pio2+0x3a4>
 800ea7a:	ab0e      	add	r3, sp, #56	; 0x38
 800ea7c:	f1aa 0a18 	sub.w	sl, sl, #24
 800ea80:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	f000 80ad 	beq.w	800ebe4 <__kernel_rem_pio2+0x3fc>
 800ea8a:	4650      	mov	r0, sl
 800ea8c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800eb08 <__kernel_rem_pio2+0x320>
 800ea90:	f000 fce6 	bl	800f460 <scalbn>
 800ea94:	ab9a      	add	r3, sp, #616	; 0x268
 800ea96:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ea9a:	ec57 6b10 	vmov	r6, r7, d0
 800ea9e:	00ec      	lsls	r4, r5, #3
 800eaa0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800eaa4:	46aa      	mov	sl, r5
 800eaa6:	f1ba 0f00 	cmp.w	sl, #0
 800eaaa:	f280 80d6 	bge.w	800ec5a <__kernel_rem_pio2+0x472>
 800eaae:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800eb00 <__kernel_rem_pio2+0x318>
 800eab2:	462e      	mov	r6, r5
 800eab4:	2e00      	cmp	r6, #0
 800eab6:	f2c0 8104 	blt.w	800ecc2 <__kernel_rem_pio2+0x4da>
 800eaba:	ab72      	add	r3, sp, #456	; 0x1c8
 800eabc:	ed8d 8b06 	vstr	d8, [sp, #24]
 800eac0:	f8df a064 	ldr.w	sl, [pc, #100]	; 800eb28 <__kernel_rem_pio2+0x340>
 800eac4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800eac8:	f04f 0800 	mov.w	r8, #0
 800eacc:	1baf      	subs	r7, r5, r6
 800eace:	e0ea      	b.n	800eca6 <__kernel_rem_pio2+0x4be>
 800ead0:	f04f 0b02 	mov.w	fp, #2
 800ead4:	e759      	b.n	800e98a <__kernel_rem_pio2+0x1a2>
 800ead6:	f8d8 3000 	ldr.w	r3, [r8]
 800eada:	b955      	cbnz	r5, 800eaf2 <__kernel_rem_pio2+0x30a>
 800eadc:	b123      	cbz	r3, 800eae8 <__kernel_rem_pio2+0x300>
 800eade:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800eae2:	f8c8 3000 	str.w	r3, [r8]
 800eae6:	2301      	movs	r3, #1
 800eae8:	3201      	adds	r2, #1
 800eaea:	f108 0804 	add.w	r8, r8, #4
 800eaee:	461d      	mov	r5, r3
 800eaf0:	e752      	b.n	800e998 <__kernel_rem_pio2+0x1b0>
 800eaf2:	1acb      	subs	r3, r1, r3
 800eaf4:	f8c8 3000 	str.w	r3, [r8]
 800eaf8:	462b      	mov	r3, r5
 800eafa:	e7f5      	b.n	800eae8 <__kernel_rem_pio2+0x300>
 800eafc:	f3af 8000 	nop.w
	...
 800eb0c:	3ff00000 	.word	0x3ff00000
 800eb10:	0800fd28 	.word	0x0800fd28
 800eb14:	40200000 	.word	0x40200000
 800eb18:	3ff00000 	.word	0x3ff00000
 800eb1c:	3e700000 	.word	0x3e700000
 800eb20:	41700000 	.word	0x41700000
 800eb24:	3fe00000 	.word	0x3fe00000
 800eb28:	0800fce8 	.word	0x0800fce8
 800eb2c:	1e62      	subs	r2, r4, #1
 800eb2e:	ab0e      	add	r3, sp, #56	; 0x38
 800eb30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb34:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800eb38:	a90e      	add	r1, sp, #56	; 0x38
 800eb3a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800eb3e:	e739      	b.n	800e9b4 <__kernel_rem_pio2+0x1cc>
 800eb40:	1e62      	subs	r2, r4, #1
 800eb42:	ab0e      	add	r3, sp, #56	; 0x38
 800eb44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb48:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800eb4c:	e7f4      	b.n	800eb38 <__kernel_rem_pio2+0x350>
 800eb4e:	a90e      	add	r1, sp, #56	; 0x38
 800eb50:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800eb54:	3b01      	subs	r3, #1
 800eb56:	430a      	orrs	r2, r1
 800eb58:	e789      	b.n	800ea6e <__kernel_rem_pio2+0x286>
 800eb5a:	3301      	adds	r3, #1
 800eb5c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800eb60:	2900      	cmp	r1, #0
 800eb62:	d0fa      	beq.n	800eb5a <__kernel_rem_pio2+0x372>
 800eb64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb66:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800eb6a:	446a      	add	r2, sp
 800eb6c:	3a98      	subs	r2, #152	; 0x98
 800eb6e:	920a      	str	r2, [sp, #40]	; 0x28
 800eb70:	9a08      	ldr	r2, [sp, #32]
 800eb72:	18e3      	adds	r3, r4, r3
 800eb74:	18a5      	adds	r5, r4, r2
 800eb76:	aa22      	add	r2, sp, #136	; 0x88
 800eb78:	f104 0801 	add.w	r8, r4, #1
 800eb7c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800eb80:	9304      	str	r3, [sp, #16]
 800eb82:	9b04      	ldr	r3, [sp, #16]
 800eb84:	4543      	cmp	r3, r8
 800eb86:	da04      	bge.n	800eb92 <__kernel_rem_pio2+0x3aa>
 800eb88:	461c      	mov	r4, r3
 800eb8a:	e6a3      	b.n	800e8d4 <__kernel_rem_pio2+0xec>
 800eb8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800eb8e:	2301      	movs	r3, #1
 800eb90:	e7e4      	b.n	800eb5c <__kernel_rem_pio2+0x374>
 800eb92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb94:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800eb98:	f7f1 fcc4 	bl	8000524 <__aeabi_i2d>
 800eb9c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800eba0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eba2:	46ab      	mov	fp, r5
 800eba4:	461c      	mov	r4, r3
 800eba6:	f04f 0900 	mov.w	r9, #0
 800ebaa:	2600      	movs	r6, #0
 800ebac:	2700      	movs	r7, #0
 800ebae:	9b06      	ldr	r3, [sp, #24]
 800ebb0:	4599      	cmp	r9, r3
 800ebb2:	dd06      	ble.n	800ebc2 <__kernel_rem_pio2+0x3da>
 800ebb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebb6:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ebba:	f108 0801 	add.w	r8, r8, #1
 800ebbe:	930a      	str	r3, [sp, #40]	; 0x28
 800ebc0:	e7df      	b.n	800eb82 <__kernel_rem_pio2+0x39a>
 800ebc2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ebc6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ebca:	f7f1 fd15 	bl	80005f8 <__aeabi_dmul>
 800ebce:	4602      	mov	r2, r0
 800ebd0:	460b      	mov	r3, r1
 800ebd2:	4630      	mov	r0, r6
 800ebd4:	4639      	mov	r1, r7
 800ebd6:	f7f1 fb59 	bl	800028c <__adddf3>
 800ebda:	f109 0901 	add.w	r9, r9, #1
 800ebde:	4606      	mov	r6, r0
 800ebe0:	460f      	mov	r7, r1
 800ebe2:	e7e4      	b.n	800ebae <__kernel_rem_pio2+0x3c6>
 800ebe4:	3d01      	subs	r5, #1
 800ebe6:	e748      	b.n	800ea7a <__kernel_rem_pio2+0x292>
 800ebe8:	ec47 6b10 	vmov	d0, r6, r7
 800ebec:	f1ca 0000 	rsb	r0, sl, #0
 800ebf0:	f000 fc36 	bl	800f460 <scalbn>
 800ebf4:	ec57 6b10 	vmov	r6, r7, d0
 800ebf8:	4ba0      	ldr	r3, [pc, #640]	; (800ee7c <__kernel_rem_pio2+0x694>)
 800ebfa:	ee10 0a10 	vmov	r0, s0
 800ebfe:	2200      	movs	r2, #0
 800ec00:	4639      	mov	r1, r7
 800ec02:	f7f1 ff7f 	bl	8000b04 <__aeabi_dcmpge>
 800ec06:	b1f8      	cbz	r0, 800ec48 <__kernel_rem_pio2+0x460>
 800ec08:	4b9d      	ldr	r3, [pc, #628]	; (800ee80 <__kernel_rem_pio2+0x698>)
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	4630      	mov	r0, r6
 800ec0e:	4639      	mov	r1, r7
 800ec10:	f7f1 fcf2 	bl	80005f8 <__aeabi_dmul>
 800ec14:	f7f1 ffa0 	bl	8000b58 <__aeabi_d2iz>
 800ec18:	4680      	mov	r8, r0
 800ec1a:	f7f1 fc83 	bl	8000524 <__aeabi_i2d>
 800ec1e:	4b97      	ldr	r3, [pc, #604]	; (800ee7c <__kernel_rem_pio2+0x694>)
 800ec20:	2200      	movs	r2, #0
 800ec22:	f7f1 fce9 	bl	80005f8 <__aeabi_dmul>
 800ec26:	460b      	mov	r3, r1
 800ec28:	4602      	mov	r2, r0
 800ec2a:	4639      	mov	r1, r7
 800ec2c:	4630      	mov	r0, r6
 800ec2e:	f7f1 fb2b 	bl	8000288 <__aeabi_dsub>
 800ec32:	f7f1 ff91 	bl	8000b58 <__aeabi_d2iz>
 800ec36:	1c65      	adds	r5, r4, #1
 800ec38:	ab0e      	add	r3, sp, #56	; 0x38
 800ec3a:	f10a 0a18 	add.w	sl, sl, #24
 800ec3e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ec42:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ec46:	e720      	b.n	800ea8a <__kernel_rem_pio2+0x2a2>
 800ec48:	4630      	mov	r0, r6
 800ec4a:	4639      	mov	r1, r7
 800ec4c:	f7f1 ff84 	bl	8000b58 <__aeabi_d2iz>
 800ec50:	ab0e      	add	r3, sp, #56	; 0x38
 800ec52:	4625      	mov	r5, r4
 800ec54:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ec58:	e717      	b.n	800ea8a <__kernel_rem_pio2+0x2a2>
 800ec5a:	ab0e      	add	r3, sp, #56	; 0x38
 800ec5c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ec60:	f7f1 fc60 	bl	8000524 <__aeabi_i2d>
 800ec64:	4632      	mov	r2, r6
 800ec66:	463b      	mov	r3, r7
 800ec68:	f7f1 fcc6 	bl	80005f8 <__aeabi_dmul>
 800ec6c:	4b84      	ldr	r3, [pc, #528]	; (800ee80 <__kernel_rem_pio2+0x698>)
 800ec6e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800ec72:	2200      	movs	r2, #0
 800ec74:	4630      	mov	r0, r6
 800ec76:	4639      	mov	r1, r7
 800ec78:	f7f1 fcbe 	bl	80005f8 <__aeabi_dmul>
 800ec7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec80:	4606      	mov	r6, r0
 800ec82:	460f      	mov	r7, r1
 800ec84:	e70f      	b.n	800eaa6 <__kernel_rem_pio2+0x2be>
 800ec86:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ec8a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ec8e:	f7f1 fcb3 	bl	80005f8 <__aeabi_dmul>
 800ec92:	4602      	mov	r2, r0
 800ec94:	460b      	mov	r3, r1
 800ec96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec9a:	f7f1 faf7 	bl	800028c <__adddf3>
 800ec9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800eca2:	f108 0801 	add.w	r8, r8, #1
 800eca6:	9b02      	ldr	r3, [sp, #8]
 800eca8:	4598      	cmp	r8, r3
 800ecaa:	dc01      	bgt.n	800ecb0 <__kernel_rem_pio2+0x4c8>
 800ecac:	45b8      	cmp	r8, r7
 800ecae:	ddea      	ble.n	800ec86 <__kernel_rem_pio2+0x49e>
 800ecb0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ecb4:	ab4a      	add	r3, sp, #296	; 0x128
 800ecb6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ecba:	ed87 7b00 	vstr	d7, [r7]
 800ecbe:	3e01      	subs	r6, #1
 800ecc0:	e6f8      	b.n	800eab4 <__kernel_rem_pio2+0x2cc>
 800ecc2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ecc4:	2b02      	cmp	r3, #2
 800ecc6:	dc0b      	bgt.n	800ece0 <__kernel_rem_pio2+0x4f8>
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	dc35      	bgt.n	800ed38 <__kernel_rem_pio2+0x550>
 800eccc:	d059      	beq.n	800ed82 <__kernel_rem_pio2+0x59a>
 800ecce:	9b04      	ldr	r3, [sp, #16]
 800ecd0:	f003 0007 	and.w	r0, r3, #7
 800ecd4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ecd8:	ecbd 8b02 	vpop	{d8}
 800ecdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ece0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ece2:	2b03      	cmp	r3, #3
 800ece4:	d1f3      	bne.n	800ecce <__kernel_rem_pio2+0x4e6>
 800ece6:	ab4a      	add	r3, sp, #296	; 0x128
 800ece8:	4423      	add	r3, r4
 800ecea:	9306      	str	r3, [sp, #24]
 800ecec:	461c      	mov	r4, r3
 800ecee:	469a      	mov	sl, r3
 800ecf0:	9502      	str	r5, [sp, #8]
 800ecf2:	9b02      	ldr	r3, [sp, #8]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	f1aa 0a08 	sub.w	sl, sl, #8
 800ecfa:	dc6b      	bgt.n	800edd4 <__kernel_rem_pio2+0x5ec>
 800ecfc:	46aa      	mov	sl, r5
 800ecfe:	f1ba 0f01 	cmp.w	sl, #1
 800ed02:	f1a4 0408 	sub.w	r4, r4, #8
 800ed06:	f300 8085 	bgt.w	800ee14 <__kernel_rem_pio2+0x62c>
 800ed0a:	9c06      	ldr	r4, [sp, #24]
 800ed0c:	2000      	movs	r0, #0
 800ed0e:	3408      	adds	r4, #8
 800ed10:	2100      	movs	r1, #0
 800ed12:	2d01      	cmp	r5, #1
 800ed14:	f300 809d 	bgt.w	800ee52 <__kernel_rem_pio2+0x66a>
 800ed18:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ed1c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800ed20:	f1bb 0f00 	cmp.w	fp, #0
 800ed24:	f040 809b 	bne.w	800ee5e <__kernel_rem_pio2+0x676>
 800ed28:	9b01      	ldr	r3, [sp, #4]
 800ed2a:	e9c3 5600 	strd	r5, r6, [r3]
 800ed2e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800ed32:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ed36:	e7ca      	b.n	800ecce <__kernel_rem_pio2+0x4e6>
 800ed38:	3408      	adds	r4, #8
 800ed3a:	ab4a      	add	r3, sp, #296	; 0x128
 800ed3c:	441c      	add	r4, r3
 800ed3e:	462e      	mov	r6, r5
 800ed40:	2000      	movs	r0, #0
 800ed42:	2100      	movs	r1, #0
 800ed44:	2e00      	cmp	r6, #0
 800ed46:	da36      	bge.n	800edb6 <__kernel_rem_pio2+0x5ce>
 800ed48:	f1bb 0f00 	cmp.w	fp, #0
 800ed4c:	d039      	beq.n	800edc2 <__kernel_rem_pio2+0x5da>
 800ed4e:	4602      	mov	r2, r0
 800ed50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed54:	9c01      	ldr	r4, [sp, #4]
 800ed56:	e9c4 2300 	strd	r2, r3, [r4]
 800ed5a:	4602      	mov	r2, r0
 800ed5c:	460b      	mov	r3, r1
 800ed5e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800ed62:	f7f1 fa91 	bl	8000288 <__aeabi_dsub>
 800ed66:	ae4c      	add	r6, sp, #304	; 0x130
 800ed68:	2401      	movs	r4, #1
 800ed6a:	42a5      	cmp	r5, r4
 800ed6c:	da2c      	bge.n	800edc8 <__kernel_rem_pio2+0x5e0>
 800ed6e:	f1bb 0f00 	cmp.w	fp, #0
 800ed72:	d002      	beq.n	800ed7a <__kernel_rem_pio2+0x592>
 800ed74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed78:	4619      	mov	r1, r3
 800ed7a:	9b01      	ldr	r3, [sp, #4]
 800ed7c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ed80:	e7a5      	b.n	800ecce <__kernel_rem_pio2+0x4e6>
 800ed82:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800ed86:	eb0d 0403 	add.w	r4, sp, r3
 800ed8a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ed8e:	2000      	movs	r0, #0
 800ed90:	2100      	movs	r1, #0
 800ed92:	2d00      	cmp	r5, #0
 800ed94:	da09      	bge.n	800edaa <__kernel_rem_pio2+0x5c2>
 800ed96:	f1bb 0f00 	cmp.w	fp, #0
 800ed9a:	d002      	beq.n	800eda2 <__kernel_rem_pio2+0x5ba>
 800ed9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eda0:	4619      	mov	r1, r3
 800eda2:	9b01      	ldr	r3, [sp, #4]
 800eda4:	e9c3 0100 	strd	r0, r1, [r3]
 800eda8:	e791      	b.n	800ecce <__kernel_rem_pio2+0x4e6>
 800edaa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800edae:	f7f1 fa6d 	bl	800028c <__adddf3>
 800edb2:	3d01      	subs	r5, #1
 800edb4:	e7ed      	b.n	800ed92 <__kernel_rem_pio2+0x5aa>
 800edb6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800edba:	f7f1 fa67 	bl	800028c <__adddf3>
 800edbe:	3e01      	subs	r6, #1
 800edc0:	e7c0      	b.n	800ed44 <__kernel_rem_pio2+0x55c>
 800edc2:	4602      	mov	r2, r0
 800edc4:	460b      	mov	r3, r1
 800edc6:	e7c5      	b.n	800ed54 <__kernel_rem_pio2+0x56c>
 800edc8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800edcc:	f7f1 fa5e 	bl	800028c <__adddf3>
 800edd0:	3401      	adds	r4, #1
 800edd2:	e7ca      	b.n	800ed6a <__kernel_rem_pio2+0x582>
 800edd4:	e9da 8900 	ldrd	r8, r9, [sl]
 800edd8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800eddc:	9b02      	ldr	r3, [sp, #8]
 800edde:	3b01      	subs	r3, #1
 800ede0:	9302      	str	r3, [sp, #8]
 800ede2:	4632      	mov	r2, r6
 800ede4:	463b      	mov	r3, r7
 800ede6:	4640      	mov	r0, r8
 800ede8:	4649      	mov	r1, r9
 800edea:	f7f1 fa4f 	bl	800028c <__adddf3>
 800edee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800edf2:	4602      	mov	r2, r0
 800edf4:	460b      	mov	r3, r1
 800edf6:	4640      	mov	r0, r8
 800edf8:	4649      	mov	r1, r9
 800edfa:	f7f1 fa45 	bl	8000288 <__aeabi_dsub>
 800edfe:	4632      	mov	r2, r6
 800ee00:	463b      	mov	r3, r7
 800ee02:	f7f1 fa43 	bl	800028c <__adddf3>
 800ee06:	ed9d 7b08 	vldr	d7, [sp, #32]
 800ee0a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ee0e:	ed8a 7b00 	vstr	d7, [sl]
 800ee12:	e76e      	b.n	800ecf2 <__kernel_rem_pio2+0x50a>
 800ee14:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ee18:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ee1c:	4640      	mov	r0, r8
 800ee1e:	4632      	mov	r2, r6
 800ee20:	463b      	mov	r3, r7
 800ee22:	4649      	mov	r1, r9
 800ee24:	f7f1 fa32 	bl	800028c <__adddf3>
 800ee28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee2c:	4602      	mov	r2, r0
 800ee2e:	460b      	mov	r3, r1
 800ee30:	4640      	mov	r0, r8
 800ee32:	4649      	mov	r1, r9
 800ee34:	f7f1 fa28 	bl	8000288 <__aeabi_dsub>
 800ee38:	4632      	mov	r2, r6
 800ee3a:	463b      	mov	r3, r7
 800ee3c:	f7f1 fa26 	bl	800028c <__adddf3>
 800ee40:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ee44:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ee48:	ed84 7b00 	vstr	d7, [r4]
 800ee4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ee50:	e755      	b.n	800ecfe <__kernel_rem_pio2+0x516>
 800ee52:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ee56:	f7f1 fa19 	bl	800028c <__adddf3>
 800ee5a:	3d01      	subs	r5, #1
 800ee5c:	e759      	b.n	800ed12 <__kernel_rem_pio2+0x52a>
 800ee5e:	9b01      	ldr	r3, [sp, #4]
 800ee60:	9a01      	ldr	r2, [sp, #4]
 800ee62:	601d      	str	r5, [r3, #0]
 800ee64:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ee68:	605c      	str	r4, [r3, #4]
 800ee6a:	609f      	str	r7, [r3, #8]
 800ee6c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ee70:	60d3      	str	r3, [r2, #12]
 800ee72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee76:	6110      	str	r0, [r2, #16]
 800ee78:	6153      	str	r3, [r2, #20]
 800ee7a:	e728      	b.n	800ecce <__kernel_rem_pio2+0x4e6>
 800ee7c:	41700000 	.word	0x41700000
 800ee80:	3e700000 	.word	0x3e700000
 800ee84:	00000000 	.word	0x00000000

0800ee88 <__kernel_sin>:
 800ee88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee8c:	ed2d 8b04 	vpush	{d8-d9}
 800ee90:	eeb0 8a41 	vmov.f32	s16, s2
 800ee94:	eef0 8a61 	vmov.f32	s17, s3
 800ee98:	ec55 4b10 	vmov	r4, r5, d0
 800ee9c:	b083      	sub	sp, #12
 800ee9e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800eea2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800eea6:	9001      	str	r0, [sp, #4]
 800eea8:	da06      	bge.n	800eeb8 <__kernel_sin+0x30>
 800eeaa:	ee10 0a10 	vmov	r0, s0
 800eeae:	4629      	mov	r1, r5
 800eeb0:	f7f1 fe52 	bl	8000b58 <__aeabi_d2iz>
 800eeb4:	2800      	cmp	r0, #0
 800eeb6:	d051      	beq.n	800ef5c <__kernel_sin+0xd4>
 800eeb8:	4622      	mov	r2, r4
 800eeba:	462b      	mov	r3, r5
 800eebc:	4620      	mov	r0, r4
 800eebe:	4629      	mov	r1, r5
 800eec0:	f7f1 fb9a 	bl	80005f8 <__aeabi_dmul>
 800eec4:	4682      	mov	sl, r0
 800eec6:	468b      	mov	fp, r1
 800eec8:	4602      	mov	r2, r0
 800eeca:	460b      	mov	r3, r1
 800eecc:	4620      	mov	r0, r4
 800eece:	4629      	mov	r1, r5
 800eed0:	f7f1 fb92 	bl	80005f8 <__aeabi_dmul>
 800eed4:	a341      	add	r3, pc, #260	; (adr r3, 800efdc <__kernel_sin+0x154>)
 800eed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeda:	4680      	mov	r8, r0
 800eedc:	4689      	mov	r9, r1
 800eede:	4650      	mov	r0, sl
 800eee0:	4659      	mov	r1, fp
 800eee2:	f7f1 fb89 	bl	80005f8 <__aeabi_dmul>
 800eee6:	a33f      	add	r3, pc, #252	; (adr r3, 800efe4 <__kernel_sin+0x15c>)
 800eee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeec:	f7f1 f9cc 	bl	8000288 <__aeabi_dsub>
 800eef0:	4652      	mov	r2, sl
 800eef2:	465b      	mov	r3, fp
 800eef4:	f7f1 fb80 	bl	80005f8 <__aeabi_dmul>
 800eef8:	a33c      	add	r3, pc, #240	; (adr r3, 800efec <__kernel_sin+0x164>)
 800eefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eefe:	f7f1 f9c5 	bl	800028c <__adddf3>
 800ef02:	4652      	mov	r2, sl
 800ef04:	465b      	mov	r3, fp
 800ef06:	f7f1 fb77 	bl	80005f8 <__aeabi_dmul>
 800ef0a:	a33a      	add	r3, pc, #232	; (adr r3, 800eff4 <__kernel_sin+0x16c>)
 800ef0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef10:	f7f1 f9ba 	bl	8000288 <__aeabi_dsub>
 800ef14:	4652      	mov	r2, sl
 800ef16:	465b      	mov	r3, fp
 800ef18:	f7f1 fb6e 	bl	80005f8 <__aeabi_dmul>
 800ef1c:	a337      	add	r3, pc, #220	; (adr r3, 800effc <__kernel_sin+0x174>)
 800ef1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef22:	f7f1 f9b3 	bl	800028c <__adddf3>
 800ef26:	9b01      	ldr	r3, [sp, #4]
 800ef28:	4606      	mov	r6, r0
 800ef2a:	460f      	mov	r7, r1
 800ef2c:	b9eb      	cbnz	r3, 800ef6a <__kernel_sin+0xe2>
 800ef2e:	4602      	mov	r2, r0
 800ef30:	460b      	mov	r3, r1
 800ef32:	4650      	mov	r0, sl
 800ef34:	4659      	mov	r1, fp
 800ef36:	f7f1 fb5f 	bl	80005f8 <__aeabi_dmul>
 800ef3a:	a325      	add	r3, pc, #148	; (adr r3, 800efd0 <__kernel_sin+0x148>)
 800ef3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef40:	f7f1 f9a2 	bl	8000288 <__aeabi_dsub>
 800ef44:	4642      	mov	r2, r8
 800ef46:	464b      	mov	r3, r9
 800ef48:	f7f1 fb56 	bl	80005f8 <__aeabi_dmul>
 800ef4c:	4602      	mov	r2, r0
 800ef4e:	460b      	mov	r3, r1
 800ef50:	4620      	mov	r0, r4
 800ef52:	4629      	mov	r1, r5
 800ef54:	f7f1 f99a 	bl	800028c <__adddf3>
 800ef58:	4604      	mov	r4, r0
 800ef5a:	460d      	mov	r5, r1
 800ef5c:	ec45 4b10 	vmov	d0, r4, r5
 800ef60:	b003      	add	sp, #12
 800ef62:	ecbd 8b04 	vpop	{d8-d9}
 800ef66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef6a:	4b1b      	ldr	r3, [pc, #108]	; (800efd8 <__kernel_sin+0x150>)
 800ef6c:	ec51 0b18 	vmov	r0, r1, d8
 800ef70:	2200      	movs	r2, #0
 800ef72:	f7f1 fb41 	bl	80005f8 <__aeabi_dmul>
 800ef76:	4632      	mov	r2, r6
 800ef78:	ec41 0b19 	vmov	d9, r0, r1
 800ef7c:	463b      	mov	r3, r7
 800ef7e:	4640      	mov	r0, r8
 800ef80:	4649      	mov	r1, r9
 800ef82:	f7f1 fb39 	bl	80005f8 <__aeabi_dmul>
 800ef86:	4602      	mov	r2, r0
 800ef88:	460b      	mov	r3, r1
 800ef8a:	ec51 0b19 	vmov	r0, r1, d9
 800ef8e:	f7f1 f97b 	bl	8000288 <__aeabi_dsub>
 800ef92:	4652      	mov	r2, sl
 800ef94:	465b      	mov	r3, fp
 800ef96:	f7f1 fb2f 	bl	80005f8 <__aeabi_dmul>
 800ef9a:	ec53 2b18 	vmov	r2, r3, d8
 800ef9e:	f7f1 f973 	bl	8000288 <__aeabi_dsub>
 800efa2:	a30b      	add	r3, pc, #44	; (adr r3, 800efd0 <__kernel_sin+0x148>)
 800efa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa8:	4606      	mov	r6, r0
 800efaa:	460f      	mov	r7, r1
 800efac:	4640      	mov	r0, r8
 800efae:	4649      	mov	r1, r9
 800efb0:	f7f1 fb22 	bl	80005f8 <__aeabi_dmul>
 800efb4:	4602      	mov	r2, r0
 800efb6:	460b      	mov	r3, r1
 800efb8:	4630      	mov	r0, r6
 800efba:	4639      	mov	r1, r7
 800efbc:	f7f1 f966 	bl	800028c <__adddf3>
 800efc0:	4602      	mov	r2, r0
 800efc2:	460b      	mov	r3, r1
 800efc4:	4620      	mov	r0, r4
 800efc6:	4629      	mov	r1, r5
 800efc8:	f7f1 f95e 	bl	8000288 <__aeabi_dsub>
 800efcc:	e7c4      	b.n	800ef58 <__kernel_sin+0xd0>
 800efce:	bf00      	nop
 800efd0:	55555549 	.word	0x55555549
 800efd4:	3fc55555 	.word	0x3fc55555
 800efd8:	3fe00000 	.word	0x3fe00000
 800efdc:	5acfd57c 	.word	0x5acfd57c
 800efe0:	3de5d93a 	.word	0x3de5d93a
 800efe4:	8a2b9ceb 	.word	0x8a2b9ceb
 800efe8:	3e5ae5e6 	.word	0x3e5ae5e6
 800efec:	57b1fe7d 	.word	0x57b1fe7d
 800eff0:	3ec71de3 	.word	0x3ec71de3
 800eff4:	19c161d5 	.word	0x19c161d5
 800eff8:	3f2a01a0 	.word	0x3f2a01a0
 800effc:	1110f8a6 	.word	0x1110f8a6
 800f000:	3f811111 	.word	0x3f811111
 800f004:	00000000 	.word	0x00000000

0800f008 <atan>:
 800f008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f00c:	ec55 4b10 	vmov	r4, r5, d0
 800f010:	4bc3      	ldr	r3, [pc, #780]	; (800f320 <atan+0x318>)
 800f012:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f016:	429e      	cmp	r6, r3
 800f018:	46ab      	mov	fp, r5
 800f01a:	dd18      	ble.n	800f04e <atan+0x46>
 800f01c:	4bc1      	ldr	r3, [pc, #772]	; (800f324 <atan+0x31c>)
 800f01e:	429e      	cmp	r6, r3
 800f020:	dc01      	bgt.n	800f026 <atan+0x1e>
 800f022:	d109      	bne.n	800f038 <atan+0x30>
 800f024:	b144      	cbz	r4, 800f038 <atan+0x30>
 800f026:	4622      	mov	r2, r4
 800f028:	462b      	mov	r3, r5
 800f02a:	4620      	mov	r0, r4
 800f02c:	4629      	mov	r1, r5
 800f02e:	f7f1 f92d 	bl	800028c <__adddf3>
 800f032:	4604      	mov	r4, r0
 800f034:	460d      	mov	r5, r1
 800f036:	e006      	b.n	800f046 <atan+0x3e>
 800f038:	f1bb 0f00 	cmp.w	fp, #0
 800f03c:	f300 8131 	bgt.w	800f2a2 <atan+0x29a>
 800f040:	a59b      	add	r5, pc, #620	; (adr r5, 800f2b0 <atan+0x2a8>)
 800f042:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f046:	ec45 4b10 	vmov	d0, r4, r5
 800f04a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f04e:	4bb6      	ldr	r3, [pc, #728]	; (800f328 <atan+0x320>)
 800f050:	429e      	cmp	r6, r3
 800f052:	dc14      	bgt.n	800f07e <atan+0x76>
 800f054:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800f058:	429e      	cmp	r6, r3
 800f05a:	dc0d      	bgt.n	800f078 <atan+0x70>
 800f05c:	a396      	add	r3, pc, #600	; (adr r3, 800f2b8 <atan+0x2b0>)
 800f05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f062:	ee10 0a10 	vmov	r0, s0
 800f066:	4629      	mov	r1, r5
 800f068:	f7f1 f910 	bl	800028c <__adddf3>
 800f06c:	4baf      	ldr	r3, [pc, #700]	; (800f32c <atan+0x324>)
 800f06e:	2200      	movs	r2, #0
 800f070:	f7f1 fd52 	bl	8000b18 <__aeabi_dcmpgt>
 800f074:	2800      	cmp	r0, #0
 800f076:	d1e6      	bne.n	800f046 <atan+0x3e>
 800f078:	f04f 3aff 	mov.w	sl, #4294967295
 800f07c:	e02b      	b.n	800f0d6 <atan+0xce>
 800f07e:	f000 f963 	bl	800f348 <fabs>
 800f082:	4bab      	ldr	r3, [pc, #684]	; (800f330 <atan+0x328>)
 800f084:	429e      	cmp	r6, r3
 800f086:	ec55 4b10 	vmov	r4, r5, d0
 800f08a:	f300 80bf 	bgt.w	800f20c <atan+0x204>
 800f08e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800f092:	429e      	cmp	r6, r3
 800f094:	f300 80a0 	bgt.w	800f1d8 <atan+0x1d0>
 800f098:	ee10 2a10 	vmov	r2, s0
 800f09c:	ee10 0a10 	vmov	r0, s0
 800f0a0:	462b      	mov	r3, r5
 800f0a2:	4629      	mov	r1, r5
 800f0a4:	f7f1 f8f2 	bl	800028c <__adddf3>
 800f0a8:	4ba0      	ldr	r3, [pc, #640]	; (800f32c <atan+0x324>)
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	f7f1 f8ec 	bl	8000288 <__aeabi_dsub>
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	4606      	mov	r6, r0
 800f0b4:	460f      	mov	r7, r1
 800f0b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f0ba:	4620      	mov	r0, r4
 800f0bc:	4629      	mov	r1, r5
 800f0be:	f7f1 f8e5 	bl	800028c <__adddf3>
 800f0c2:	4602      	mov	r2, r0
 800f0c4:	460b      	mov	r3, r1
 800f0c6:	4630      	mov	r0, r6
 800f0c8:	4639      	mov	r1, r7
 800f0ca:	f7f1 fbbf 	bl	800084c <__aeabi_ddiv>
 800f0ce:	f04f 0a00 	mov.w	sl, #0
 800f0d2:	4604      	mov	r4, r0
 800f0d4:	460d      	mov	r5, r1
 800f0d6:	4622      	mov	r2, r4
 800f0d8:	462b      	mov	r3, r5
 800f0da:	4620      	mov	r0, r4
 800f0dc:	4629      	mov	r1, r5
 800f0de:	f7f1 fa8b 	bl	80005f8 <__aeabi_dmul>
 800f0e2:	4602      	mov	r2, r0
 800f0e4:	460b      	mov	r3, r1
 800f0e6:	4680      	mov	r8, r0
 800f0e8:	4689      	mov	r9, r1
 800f0ea:	f7f1 fa85 	bl	80005f8 <__aeabi_dmul>
 800f0ee:	a374      	add	r3, pc, #464	; (adr r3, 800f2c0 <atan+0x2b8>)
 800f0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f4:	4606      	mov	r6, r0
 800f0f6:	460f      	mov	r7, r1
 800f0f8:	f7f1 fa7e 	bl	80005f8 <__aeabi_dmul>
 800f0fc:	a372      	add	r3, pc, #456	; (adr r3, 800f2c8 <atan+0x2c0>)
 800f0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f102:	f7f1 f8c3 	bl	800028c <__adddf3>
 800f106:	4632      	mov	r2, r6
 800f108:	463b      	mov	r3, r7
 800f10a:	f7f1 fa75 	bl	80005f8 <__aeabi_dmul>
 800f10e:	a370      	add	r3, pc, #448	; (adr r3, 800f2d0 <atan+0x2c8>)
 800f110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f114:	f7f1 f8ba 	bl	800028c <__adddf3>
 800f118:	4632      	mov	r2, r6
 800f11a:	463b      	mov	r3, r7
 800f11c:	f7f1 fa6c 	bl	80005f8 <__aeabi_dmul>
 800f120:	a36d      	add	r3, pc, #436	; (adr r3, 800f2d8 <atan+0x2d0>)
 800f122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f126:	f7f1 f8b1 	bl	800028c <__adddf3>
 800f12a:	4632      	mov	r2, r6
 800f12c:	463b      	mov	r3, r7
 800f12e:	f7f1 fa63 	bl	80005f8 <__aeabi_dmul>
 800f132:	a36b      	add	r3, pc, #428	; (adr r3, 800f2e0 <atan+0x2d8>)
 800f134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f138:	f7f1 f8a8 	bl	800028c <__adddf3>
 800f13c:	4632      	mov	r2, r6
 800f13e:	463b      	mov	r3, r7
 800f140:	f7f1 fa5a 	bl	80005f8 <__aeabi_dmul>
 800f144:	a368      	add	r3, pc, #416	; (adr r3, 800f2e8 <atan+0x2e0>)
 800f146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f14a:	f7f1 f89f 	bl	800028c <__adddf3>
 800f14e:	4642      	mov	r2, r8
 800f150:	464b      	mov	r3, r9
 800f152:	f7f1 fa51 	bl	80005f8 <__aeabi_dmul>
 800f156:	a366      	add	r3, pc, #408	; (adr r3, 800f2f0 <atan+0x2e8>)
 800f158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f15c:	4680      	mov	r8, r0
 800f15e:	4689      	mov	r9, r1
 800f160:	4630      	mov	r0, r6
 800f162:	4639      	mov	r1, r7
 800f164:	f7f1 fa48 	bl	80005f8 <__aeabi_dmul>
 800f168:	a363      	add	r3, pc, #396	; (adr r3, 800f2f8 <atan+0x2f0>)
 800f16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f16e:	f7f1 f88b 	bl	8000288 <__aeabi_dsub>
 800f172:	4632      	mov	r2, r6
 800f174:	463b      	mov	r3, r7
 800f176:	f7f1 fa3f 	bl	80005f8 <__aeabi_dmul>
 800f17a:	a361      	add	r3, pc, #388	; (adr r3, 800f300 <atan+0x2f8>)
 800f17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f180:	f7f1 f882 	bl	8000288 <__aeabi_dsub>
 800f184:	4632      	mov	r2, r6
 800f186:	463b      	mov	r3, r7
 800f188:	f7f1 fa36 	bl	80005f8 <__aeabi_dmul>
 800f18c:	a35e      	add	r3, pc, #376	; (adr r3, 800f308 <atan+0x300>)
 800f18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f192:	f7f1 f879 	bl	8000288 <__aeabi_dsub>
 800f196:	4632      	mov	r2, r6
 800f198:	463b      	mov	r3, r7
 800f19a:	f7f1 fa2d 	bl	80005f8 <__aeabi_dmul>
 800f19e:	a35c      	add	r3, pc, #368	; (adr r3, 800f310 <atan+0x308>)
 800f1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1a4:	f7f1 f870 	bl	8000288 <__aeabi_dsub>
 800f1a8:	4632      	mov	r2, r6
 800f1aa:	463b      	mov	r3, r7
 800f1ac:	f7f1 fa24 	bl	80005f8 <__aeabi_dmul>
 800f1b0:	4602      	mov	r2, r0
 800f1b2:	460b      	mov	r3, r1
 800f1b4:	4640      	mov	r0, r8
 800f1b6:	4649      	mov	r1, r9
 800f1b8:	f7f1 f868 	bl	800028c <__adddf3>
 800f1bc:	4622      	mov	r2, r4
 800f1be:	462b      	mov	r3, r5
 800f1c0:	f7f1 fa1a 	bl	80005f8 <__aeabi_dmul>
 800f1c4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f1c8:	4602      	mov	r2, r0
 800f1ca:	460b      	mov	r3, r1
 800f1cc:	d14b      	bne.n	800f266 <atan+0x25e>
 800f1ce:	4620      	mov	r0, r4
 800f1d0:	4629      	mov	r1, r5
 800f1d2:	f7f1 f859 	bl	8000288 <__aeabi_dsub>
 800f1d6:	e72c      	b.n	800f032 <atan+0x2a>
 800f1d8:	ee10 0a10 	vmov	r0, s0
 800f1dc:	4b53      	ldr	r3, [pc, #332]	; (800f32c <atan+0x324>)
 800f1de:	2200      	movs	r2, #0
 800f1e0:	4629      	mov	r1, r5
 800f1e2:	f7f1 f851 	bl	8000288 <__aeabi_dsub>
 800f1e6:	4b51      	ldr	r3, [pc, #324]	; (800f32c <atan+0x324>)
 800f1e8:	4606      	mov	r6, r0
 800f1ea:	460f      	mov	r7, r1
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	4620      	mov	r0, r4
 800f1f0:	4629      	mov	r1, r5
 800f1f2:	f7f1 f84b 	bl	800028c <__adddf3>
 800f1f6:	4602      	mov	r2, r0
 800f1f8:	460b      	mov	r3, r1
 800f1fa:	4630      	mov	r0, r6
 800f1fc:	4639      	mov	r1, r7
 800f1fe:	f7f1 fb25 	bl	800084c <__aeabi_ddiv>
 800f202:	f04f 0a01 	mov.w	sl, #1
 800f206:	4604      	mov	r4, r0
 800f208:	460d      	mov	r5, r1
 800f20a:	e764      	b.n	800f0d6 <atan+0xce>
 800f20c:	4b49      	ldr	r3, [pc, #292]	; (800f334 <atan+0x32c>)
 800f20e:	429e      	cmp	r6, r3
 800f210:	da1d      	bge.n	800f24e <atan+0x246>
 800f212:	ee10 0a10 	vmov	r0, s0
 800f216:	4b48      	ldr	r3, [pc, #288]	; (800f338 <atan+0x330>)
 800f218:	2200      	movs	r2, #0
 800f21a:	4629      	mov	r1, r5
 800f21c:	f7f1 f834 	bl	8000288 <__aeabi_dsub>
 800f220:	4b45      	ldr	r3, [pc, #276]	; (800f338 <atan+0x330>)
 800f222:	4606      	mov	r6, r0
 800f224:	460f      	mov	r7, r1
 800f226:	2200      	movs	r2, #0
 800f228:	4620      	mov	r0, r4
 800f22a:	4629      	mov	r1, r5
 800f22c:	f7f1 f9e4 	bl	80005f8 <__aeabi_dmul>
 800f230:	4b3e      	ldr	r3, [pc, #248]	; (800f32c <atan+0x324>)
 800f232:	2200      	movs	r2, #0
 800f234:	f7f1 f82a 	bl	800028c <__adddf3>
 800f238:	4602      	mov	r2, r0
 800f23a:	460b      	mov	r3, r1
 800f23c:	4630      	mov	r0, r6
 800f23e:	4639      	mov	r1, r7
 800f240:	f7f1 fb04 	bl	800084c <__aeabi_ddiv>
 800f244:	f04f 0a02 	mov.w	sl, #2
 800f248:	4604      	mov	r4, r0
 800f24a:	460d      	mov	r5, r1
 800f24c:	e743      	b.n	800f0d6 <atan+0xce>
 800f24e:	462b      	mov	r3, r5
 800f250:	ee10 2a10 	vmov	r2, s0
 800f254:	4939      	ldr	r1, [pc, #228]	; (800f33c <atan+0x334>)
 800f256:	2000      	movs	r0, #0
 800f258:	f7f1 faf8 	bl	800084c <__aeabi_ddiv>
 800f25c:	f04f 0a03 	mov.w	sl, #3
 800f260:	4604      	mov	r4, r0
 800f262:	460d      	mov	r5, r1
 800f264:	e737      	b.n	800f0d6 <atan+0xce>
 800f266:	4b36      	ldr	r3, [pc, #216]	; (800f340 <atan+0x338>)
 800f268:	4e36      	ldr	r6, [pc, #216]	; (800f344 <atan+0x33c>)
 800f26a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f26e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800f272:	e9da 2300 	ldrd	r2, r3, [sl]
 800f276:	f7f1 f807 	bl	8000288 <__aeabi_dsub>
 800f27a:	4622      	mov	r2, r4
 800f27c:	462b      	mov	r3, r5
 800f27e:	f7f1 f803 	bl	8000288 <__aeabi_dsub>
 800f282:	4602      	mov	r2, r0
 800f284:	460b      	mov	r3, r1
 800f286:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f28a:	f7f0 fffd 	bl	8000288 <__aeabi_dsub>
 800f28e:	f1bb 0f00 	cmp.w	fp, #0
 800f292:	4604      	mov	r4, r0
 800f294:	460d      	mov	r5, r1
 800f296:	f6bf aed6 	bge.w	800f046 <atan+0x3e>
 800f29a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f29e:	461d      	mov	r5, r3
 800f2a0:	e6d1      	b.n	800f046 <atan+0x3e>
 800f2a2:	a51d      	add	r5, pc, #116	; (adr r5, 800f318 <atan+0x310>)
 800f2a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f2a8:	e6cd      	b.n	800f046 <atan+0x3e>
 800f2aa:	bf00      	nop
 800f2ac:	f3af 8000 	nop.w
 800f2b0:	54442d18 	.word	0x54442d18
 800f2b4:	bff921fb 	.word	0xbff921fb
 800f2b8:	8800759c 	.word	0x8800759c
 800f2bc:	7e37e43c 	.word	0x7e37e43c
 800f2c0:	e322da11 	.word	0xe322da11
 800f2c4:	3f90ad3a 	.word	0x3f90ad3a
 800f2c8:	24760deb 	.word	0x24760deb
 800f2cc:	3fa97b4b 	.word	0x3fa97b4b
 800f2d0:	a0d03d51 	.word	0xa0d03d51
 800f2d4:	3fb10d66 	.word	0x3fb10d66
 800f2d8:	c54c206e 	.word	0xc54c206e
 800f2dc:	3fb745cd 	.word	0x3fb745cd
 800f2e0:	920083ff 	.word	0x920083ff
 800f2e4:	3fc24924 	.word	0x3fc24924
 800f2e8:	5555550d 	.word	0x5555550d
 800f2ec:	3fd55555 	.word	0x3fd55555
 800f2f0:	2c6a6c2f 	.word	0x2c6a6c2f
 800f2f4:	bfa2b444 	.word	0xbfa2b444
 800f2f8:	52defd9a 	.word	0x52defd9a
 800f2fc:	3fadde2d 	.word	0x3fadde2d
 800f300:	af749a6d 	.word	0xaf749a6d
 800f304:	3fb3b0f2 	.word	0x3fb3b0f2
 800f308:	fe231671 	.word	0xfe231671
 800f30c:	3fbc71c6 	.word	0x3fbc71c6
 800f310:	9998ebc4 	.word	0x9998ebc4
 800f314:	3fc99999 	.word	0x3fc99999
 800f318:	54442d18 	.word	0x54442d18
 800f31c:	3ff921fb 	.word	0x3ff921fb
 800f320:	440fffff 	.word	0x440fffff
 800f324:	7ff00000 	.word	0x7ff00000
 800f328:	3fdbffff 	.word	0x3fdbffff
 800f32c:	3ff00000 	.word	0x3ff00000
 800f330:	3ff2ffff 	.word	0x3ff2ffff
 800f334:	40038000 	.word	0x40038000
 800f338:	3ff80000 	.word	0x3ff80000
 800f33c:	bff00000 	.word	0xbff00000
 800f340:	0800fd58 	.word	0x0800fd58
 800f344:	0800fd38 	.word	0x0800fd38

0800f348 <fabs>:
 800f348:	ec51 0b10 	vmov	r0, r1, d0
 800f34c:	ee10 2a10 	vmov	r2, s0
 800f350:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f354:	ec43 2b10 	vmov	d0, r2, r3
 800f358:	4770      	bx	lr
 800f35a:	0000      	movs	r0, r0
 800f35c:	0000      	movs	r0, r0
	...

0800f360 <floor>:
 800f360:	ec51 0b10 	vmov	r0, r1, d0
 800f364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f368:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f36c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f370:	2e13      	cmp	r6, #19
 800f372:	ee10 5a10 	vmov	r5, s0
 800f376:	ee10 8a10 	vmov	r8, s0
 800f37a:	460c      	mov	r4, r1
 800f37c:	dc32      	bgt.n	800f3e4 <floor+0x84>
 800f37e:	2e00      	cmp	r6, #0
 800f380:	da14      	bge.n	800f3ac <floor+0x4c>
 800f382:	a333      	add	r3, pc, #204	; (adr r3, 800f450 <floor+0xf0>)
 800f384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f388:	f7f0 ff80 	bl	800028c <__adddf3>
 800f38c:	2200      	movs	r2, #0
 800f38e:	2300      	movs	r3, #0
 800f390:	f7f1 fbc2 	bl	8000b18 <__aeabi_dcmpgt>
 800f394:	b138      	cbz	r0, 800f3a6 <floor+0x46>
 800f396:	2c00      	cmp	r4, #0
 800f398:	da57      	bge.n	800f44a <floor+0xea>
 800f39a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f39e:	431d      	orrs	r5, r3
 800f3a0:	d001      	beq.n	800f3a6 <floor+0x46>
 800f3a2:	4c2d      	ldr	r4, [pc, #180]	; (800f458 <floor+0xf8>)
 800f3a4:	2500      	movs	r5, #0
 800f3a6:	4621      	mov	r1, r4
 800f3a8:	4628      	mov	r0, r5
 800f3aa:	e025      	b.n	800f3f8 <floor+0x98>
 800f3ac:	4f2b      	ldr	r7, [pc, #172]	; (800f45c <floor+0xfc>)
 800f3ae:	4137      	asrs	r7, r6
 800f3b0:	ea01 0307 	and.w	r3, r1, r7
 800f3b4:	4303      	orrs	r3, r0
 800f3b6:	d01f      	beq.n	800f3f8 <floor+0x98>
 800f3b8:	a325      	add	r3, pc, #148	; (adr r3, 800f450 <floor+0xf0>)
 800f3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3be:	f7f0 ff65 	bl	800028c <__adddf3>
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	f7f1 fba7 	bl	8000b18 <__aeabi_dcmpgt>
 800f3ca:	2800      	cmp	r0, #0
 800f3cc:	d0eb      	beq.n	800f3a6 <floor+0x46>
 800f3ce:	2c00      	cmp	r4, #0
 800f3d0:	bfbe      	ittt	lt
 800f3d2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f3d6:	fa43 f606 	asrlt.w	r6, r3, r6
 800f3da:	19a4      	addlt	r4, r4, r6
 800f3dc:	ea24 0407 	bic.w	r4, r4, r7
 800f3e0:	2500      	movs	r5, #0
 800f3e2:	e7e0      	b.n	800f3a6 <floor+0x46>
 800f3e4:	2e33      	cmp	r6, #51	; 0x33
 800f3e6:	dd0b      	ble.n	800f400 <floor+0xa0>
 800f3e8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f3ec:	d104      	bne.n	800f3f8 <floor+0x98>
 800f3ee:	ee10 2a10 	vmov	r2, s0
 800f3f2:	460b      	mov	r3, r1
 800f3f4:	f7f0 ff4a 	bl	800028c <__adddf3>
 800f3f8:	ec41 0b10 	vmov	d0, r0, r1
 800f3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f400:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f404:	f04f 33ff 	mov.w	r3, #4294967295
 800f408:	fa23 f707 	lsr.w	r7, r3, r7
 800f40c:	4207      	tst	r7, r0
 800f40e:	d0f3      	beq.n	800f3f8 <floor+0x98>
 800f410:	a30f      	add	r3, pc, #60	; (adr r3, 800f450 <floor+0xf0>)
 800f412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f416:	f7f0 ff39 	bl	800028c <__adddf3>
 800f41a:	2200      	movs	r2, #0
 800f41c:	2300      	movs	r3, #0
 800f41e:	f7f1 fb7b 	bl	8000b18 <__aeabi_dcmpgt>
 800f422:	2800      	cmp	r0, #0
 800f424:	d0bf      	beq.n	800f3a6 <floor+0x46>
 800f426:	2c00      	cmp	r4, #0
 800f428:	da02      	bge.n	800f430 <floor+0xd0>
 800f42a:	2e14      	cmp	r6, #20
 800f42c:	d103      	bne.n	800f436 <floor+0xd6>
 800f42e:	3401      	adds	r4, #1
 800f430:	ea25 0507 	bic.w	r5, r5, r7
 800f434:	e7b7      	b.n	800f3a6 <floor+0x46>
 800f436:	2301      	movs	r3, #1
 800f438:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f43c:	fa03 f606 	lsl.w	r6, r3, r6
 800f440:	4435      	add	r5, r6
 800f442:	4545      	cmp	r5, r8
 800f444:	bf38      	it	cc
 800f446:	18e4      	addcc	r4, r4, r3
 800f448:	e7f2      	b.n	800f430 <floor+0xd0>
 800f44a:	2500      	movs	r5, #0
 800f44c:	462c      	mov	r4, r5
 800f44e:	e7aa      	b.n	800f3a6 <floor+0x46>
 800f450:	8800759c 	.word	0x8800759c
 800f454:	7e37e43c 	.word	0x7e37e43c
 800f458:	bff00000 	.word	0xbff00000
 800f45c:	000fffff 	.word	0x000fffff

0800f460 <scalbn>:
 800f460:	b570      	push	{r4, r5, r6, lr}
 800f462:	ec55 4b10 	vmov	r4, r5, d0
 800f466:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f46a:	4606      	mov	r6, r0
 800f46c:	462b      	mov	r3, r5
 800f46e:	b99a      	cbnz	r2, 800f498 <scalbn+0x38>
 800f470:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f474:	4323      	orrs	r3, r4
 800f476:	d036      	beq.n	800f4e6 <scalbn+0x86>
 800f478:	4b39      	ldr	r3, [pc, #228]	; (800f560 <scalbn+0x100>)
 800f47a:	4629      	mov	r1, r5
 800f47c:	ee10 0a10 	vmov	r0, s0
 800f480:	2200      	movs	r2, #0
 800f482:	f7f1 f8b9 	bl	80005f8 <__aeabi_dmul>
 800f486:	4b37      	ldr	r3, [pc, #220]	; (800f564 <scalbn+0x104>)
 800f488:	429e      	cmp	r6, r3
 800f48a:	4604      	mov	r4, r0
 800f48c:	460d      	mov	r5, r1
 800f48e:	da10      	bge.n	800f4b2 <scalbn+0x52>
 800f490:	a32b      	add	r3, pc, #172	; (adr r3, 800f540 <scalbn+0xe0>)
 800f492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f496:	e03a      	b.n	800f50e <scalbn+0xae>
 800f498:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f49c:	428a      	cmp	r2, r1
 800f49e:	d10c      	bne.n	800f4ba <scalbn+0x5a>
 800f4a0:	ee10 2a10 	vmov	r2, s0
 800f4a4:	4620      	mov	r0, r4
 800f4a6:	4629      	mov	r1, r5
 800f4a8:	f7f0 fef0 	bl	800028c <__adddf3>
 800f4ac:	4604      	mov	r4, r0
 800f4ae:	460d      	mov	r5, r1
 800f4b0:	e019      	b.n	800f4e6 <scalbn+0x86>
 800f4b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f4b6:	460b      	mov	r3, r1
 800f4b8:	3a36      	subs	r2, #54	; 0x36
 800f4ba:	4432      	add	r2, r6
 800f4bc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f4c0:	428a      	cmp	r2, r1
 800f4c2:	dd08      	ble.n	800f4d6 <scalbn+0x76>
 800f4c4:	2d00      	cmp	r5, #0
 800f4c6:	a120      	add	r1, pc, #128	; (adr r1, 800f548 <scalbn+0xe8>)
 800f4c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4cc:	da1c      	bge.n	800f508 <scalbn+0xa8>
 800f4ce:	a120      	add	r1, pc, #128	; (adr r1, 800f550 <scalbn+0xf0>)
 800f4d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4d4:	e018      	b.n	800f508 <scalbn+0xa8>
 800f4d6:	2a00      	cmp	r2, #0
 800f4d8:	dd08      	ble.n	800f4ec <scalbn+0x8c>
 800f4da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f4de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f4e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f4e6:	ec45 4b10 	vmov	d0, r4, r5
 800f4ea:	bd70      	pop	{r4, r5, r6, pc}
 800f4ec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f4f0:	da19      	bge.n	800f526 <scalbn+0xc6>
 800f4f2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f4f6:	429e      	cmp	r6, r3
 800f4f8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f4fc:	dd0a      	ble.n	800f514 <scalbn+0xb4>
 800f4fe:	a112      	add	r1, pc, #72	; (adr r1, 800f548 <scalbn+0xe8>)
 800f500:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d1e2      	bne.n	800f4ce <scalbn+0x6e>
 800f508:	a30f      	add	r3, pc, #60	; (adr r3, 800f548 <scalbn+0xe8>)
 800f50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f50e:	f7f1 f873 	bl	80005f8 <__aeabi_dmul>
 800f512:	e7cb      	b.n	800f4ac <scalbn+0x4c>
 800f514:	a10a      	add	r1, pc, #40	; (adr r1, 800f540 <scalbn+0xe0>)
 800f516:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d0b8      	beq.n	800f490 <scalbn+0x30>
 800f51e:	a10e      	add	r1, pc, #56	; (adr r1, 800f558 <scalbn+0xf8>)
 800f520:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f524:	e7b4      	b.n	800f490 <scalbn+0x30>
 800f526:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f52a:	3236      	adds	r2, #54	; 0x36
 800f52c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f530:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f534:	4620      	mov	r0, r4
 800f536:	4b0c      	ldr	r3, [pc, #48]	; (800f568 <scalbn+0x108>)
 800f538:	2200      	movs	r2, #0
 800f53a:	e7e8      	b.n	800f50e <scalbn+0xae>
 800f53c:	f3af 8000 	nop.w
 800f540:	c2f8f359 	.word	0xc2f8f359
 800f544:	01a56e1f 	.word	0x01a56e1f
 800f548:	8800759c 	.word	0x8800759c
 800f54c:	7e37e43c 	.word	0x7e37e43c
 800f550:	8800759c 	.word	0x8800759c
 800f554:	fe37e43c 	.word	0xfe37e43c
 800f558:	c2f8f359 	.word	0xc2f8f359
 800f55c:	81a56e1f 	.word	0x81a56e1f
 800f560:	43500000 	.word	0x43500000
 800f564:	ffff3cb0 	.word	0xffff3cb0
 800f568:	3c900000 	.word	0x3c900000

0800f56c <_close>:
 800f56c:	4b02      	ldr	r3, [pc, #8]	; (800f578 <_close+0xc>)
 800f56e:	2258      	movs	r2, #88	; 0x58
 800f570:	601a      	str	r2, [r3, #0]
 800f572:	f04f 30ff 	mov.w	r0, #4294967295
 800f576:	4770      	bx	lr
 800f578:	200006d4 	.word	0x200006d4

0800f57c <_fstat>:
 800f57c:	4b02      	ldr	r3, [pc, #8]	; (800f588 <_fstat+0xc>)
 800f57e:	2258      	movs	r2, #88	; 0x58
 800f580:	601a      	str	r2, [r3, #0]
 800f582:	f04f 30ff 	mov.w	r0, #4294967295
 800f586:	4770      	bx	lr
 800f588:	200006d4 	.word	0x200006d4

0800f58c <_getpid>:
 800f58c:	4b02      	ldr	r3, [pc, #8]	; (800f598 <_getpid+0xc>)
 800f58e:	2258      	movs	r2, #88	; 0x58
 800f590:	601a      	str	r2, [r3, #0]
 800f592:	f04f 30ff 	mov.w	r0, #4294967295
 800f596:	4770      	bx	lr
 800f598:	200006d4 	.word	0x200006d4

0800f59c <_isatty>:
 800f59c:	4b02      	ldr	r3, [pc, #8]	; (800f5a8 <_isatty+0xc>)
 800f59e:	2258      	movs	r2, #88	; 0x58
 800f5a0:	601a      	str	r2, [r3, #0]
 800f5a2:	2000      	movs	r0, #0
 800f5a4:	4770      	bx	lr
 800f5a6:	bf00      	nop
 800f5a8:	200006d4 	.word	0x200006d4

0800f5ac <_kill>:
 800f5ac:	4b02      	ldr	r3, [pc, #8]	; (800f5b8 <_kill+0xc>)
 800f5ae:	2258      	movs	r2, #88	; 0x58
 800f5b0:	601a      	str	r2, [r3, #0]
 800f5b2:	f04f 30ff 	mov.w	r0, #4294967295
 800f5b6:	4770      	bx	lr
 800f5b8:	200006d4 	.word	0x200006d4

0800f5bc <_lseek>:
 800f5bc:	4b02      	ldr	r3, [pc, #8]	; (800f5c8 <_lseek+0xc>)
 800f5be:	2258      	movs	r2, #88	; 0x58
 800f5c0:	601a      	str	r2, [r3, #0]
 800f5c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f5c6:	4770      	bx	lr
 800f5c8:	200006d4 	.word	0x200006d4

0800f5cc <_read>:
 800f5cc:	4b02      	ldr	r3, [pc, #8]	; (800f5d8 <_read+0xc>)
 800f5ce:	2258      	movs	r2, #88	; 0x58
 800f5d0:	601a      	str	r2, [r3, #0]
 800f5d2:	f04f 30ff 	mov.w	r0, #4294967295
 800f5d6:	4770      	bx	lr
 800f5d8:	200006d4 	.word	0x200006d4

0800f5dc <_write>:
 800f5dc:	4b02      	ldr	r3, [pc, #8]	; (800f5e8 <_write+0xc>)
 800f5de:	2258      	movs	r2, #88	; 0x58
 800f5e0:	601a      	str	r2, [r3, #0]
 800f5e2:	f04f 30ff 	mov.w	r0, #4294967295
 800f5e6:	4770      	bx	lr
 800f5e8:	200006d4 	.word	0x200006d4

0800f5ec <_exit>:
 800f5ec:	e7fe      	b.n	800f5ec <_exit>
	...

0800f5f0 <_init>:
 800f5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5f2:	bf00      	nop
 800f5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5f6:	bc08      	pop	{r3}
 800f5f8:	469e      	mov	lr, r3
 800f5fa:	4770      	bx	lr

0800f5fc <_fini>:
 800f5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5fe:	bf00      	nop
 800f600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f602:	bc08      	pop	{r3}
 800f604:	469e      	mov	lr, r3
 800f606:	4770      	bx	lr
