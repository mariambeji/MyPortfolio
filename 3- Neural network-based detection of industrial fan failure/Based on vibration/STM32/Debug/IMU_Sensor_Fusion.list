
IMU_Sensor_Fusion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fdac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0009f424  0800ff40  0800ff40  0001ff40  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080af364  080af364  000c0ab4  2**0
                  CONTENTS
  4 .ARM          00000008  080af364  080af364  000bf364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080af36c  080af36c  000c0ab4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080af36c  080af36c  000bf36c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080af370  080af370  000bf370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000ab4  20000000  080af374  000c0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000aa40  20000ab4  080afe28  000c0ab4  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  2000b4f4  080afe28  000cb4f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000c0ab4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b1d2  00000000  00000000  000c0ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000374a  00000000  00000000  000dbcb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  000df400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001480  00000000  00000000  000e09f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a8e1  00000000  00000000  000e1e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b275  00000000  00000000  0010c759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104b9d  00000000  00000000  001279ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cb  00000000  00000000  0022c56b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007474  00000000  00000000  0022c638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000b4  00000000  00000000  00233aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  00233b60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000ab4 	.word	0x20000ab4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ff24 	.word	0x0800ff24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000ab8 	.word	0x20000ab8
 80001cc:	0800ff24 	.word	0x0800ff24

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ffe:	f001 fd1b 	bl	8002a38 <HAL_Init>


	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001002:	f000 f85f 	bl	80010c4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001006:	f000 fa7b 	bl	8001500 <MX_GPIO_Init>
	MX_I2C2_Init();
 800100a:	f000 f8cf 	bl	80011ac <MX_I2C2_Init>
	MX_USART1_UART_Init();
 800100e:	f000 fa47 	bl	80014a0 <MX_USART1_UART_Init>
	MX_TIM6_Init();
 8001012:	f000 fa0f 	bl	8001434 <MX_TIM6_Init>
	MX_TIM2_Init();
 8001016:	f000 f909 	bl	800122c <MX_TIM2_Init>
	MX_TIM3_Init();
 800101a:	f000 f989 	bl	8001330 <MX_TIM3_Init>
	MX_CRC_Init();
 800101e:	f000 f8a3 	bl	8001168 <MX_CRC_Init>
	/* USER CODE BEGIN 2 */
	BSP_ACCELERO_Init();
 8001022:	f001 fa2d 	bl	8002480 <BSP_ACCELERO_Init>
	BSP_GYRO_Init();
 8001026:	f001 fa81 	bl	800252c <BSP_GYRO_Init>
	AI_Init();
 800102a:	f000 fd77 	bl	8001b1c <AI_Init>
	HAL_TIM_Base_Start_IT(&htim6);
 800102e:	481c      	ldr	r0, [pc, #112]	; (80010a0 <main+0xa8>)
 8001030:	f004 fc6e 	bl	8005910 <HAL_TIM_Base_Start_IT>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if(ready==1)
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <main+0xac>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d1fb      	bne.n	8001034 <main+0x3c>
		{
			ready=0;
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <main+0xac>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
			printf("Running inference\r\n");
 8001042:	4819      	ldr	r0, [pc, #100]	; (80010a8 <main+0xb0>)
 8001044:	f00b f81e 	bl	800c084 <puts>
			AI_Run(Input_Data_af, aiOutData);
 8001048:	4918      	ldr	r1, [pc, #96]	; (80010ac <main+0xb4>)
 800104a:	4819      	ldr	r0, [pc, #100]	; (80010b0 <main+0xb8>)
 800104c:	f000 fda2 	bl	8001b94 <AI_Run>

			/* Output results */
			for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8001050:	2300      	movs	r3, #0
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	e00f      	b.n	8001076 <main+0x7e>
				printf("%8.6f ", aiOutData[i]);
 8001056:	4a15      	ldr	r2, [pc, #84]	; (80010ac <main+0xb4>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fa71 	bl	8000548 <__aeabi_f2d>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4812      	ldr	r0, [pc, #72]	; (80010b4 <main+0xbc>)
 800106c:	f00a ff84 	bl	800bf78 <iprintf>
			for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3301      	adds	r3, #1
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b06      	cmp	r3, #6
 800107a:	d9ec      	bls.n	8001056 <main+0x5e>
			}
			uint32_t class = argmax(aiOutData, AI_NETWORK_OUT_1_SIZE);
 800107c:	2107      	movs	r1, #7
 800107e:	480b      	ldr	r0, [pc, #44]	; (80010ac <main+0xb4>)
 8001080:	f000 fdc0 	bl	8001c04 <argmax>
 8001084:	6038      	str	r0, [r7, #0]
			printf("\r\n\r\n");
 8001086:	480c      	ldr	r0, [pc, #48]	; (80010b8 <main+0xc0>)
 8001088:	f00a fffc 	bl	800c084 <puts>
			printf(": %d - %s\r\n", (int) class, activities[class]);
 800108c:	6839      	ldr	r1, [r7, #0]
 800108e:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <main+0xc4>)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001096:	461a      	mov	r2, r3
 8001098:	4809      	ldr	r0, [pc, #36]	; (80010c0 <main+0xc8>)
 800109a:	f00a ff6d 	bl	800bf78 <iprintf>
		if(ready==1)
 800109e:	e7c9      	b.n	8001034 <main+0x3c>
 80010a0:	20000be0 	.word	0x20000be0
 80010a4:	20000cec 	.word	0x20000cec
 80010a8:	0800ff78 	.word	0x0800ff78
 80010ac:	20001474 	.word	0x20001474
 80010b0:	20000cf0 	.word	0x20000cf0
 80010b4:	0800ff8c 	.word	0x0800ff8c
 80010b8:	0800ff94 	.word	0x0800ff94
 80010bc:	20000000 	.word	0x20000000
 80010c0:	0800ff98 	.word	0x0800ff98

080010c4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b096      	sub	sp, #88	; 0x58
 80010c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	2244      	movs	r2, #68	; 0x44
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f009 ffee 	bl	800b0b4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d8:	463b      	mov	r3, r7
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010ea:	f003 f8a7 	bl	800423c <HAL_PWREx_ControlVoltageScaling>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0x34>
	{
		Error_Handler();
 80010f4:	f000 fdcc 	bl	8001c90 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80010f8:	2310      	movs	r3, #16
 80010fa:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010fc:	2301      	movs	r3, #1
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001104:	2360      	movs	r3, #96	; 0x60
 8001106:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001108:	2302      	movs	r3, #2
 800110a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800110c:	2301      	movs	r3, #1
 800110e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001110:	2301      	movs	r3, #1
 8001112:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 8001114:	2328      	movs	r3, #40	; 0x28
 8001116:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001118:	2307      	movs	r3, #7
 800111a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800111c:	2302      	movs	r3, #2
 800111e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001120:	2302      	movs	r3, #2
 8001122:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	4618      	mov	r0, r3
 800112a:	f003 f8dd 	bl	80042e8 <HAL_RCC_OscConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0x74>
	{
		Error_Handler();
 8001134:	f000 fdac 	bl	8001c90 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001138:	230f      	movs	r3, #15
 800113a:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800113c:	2303      	movs	r3, #3
 800113e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800114c:	463b      	mov	r3, r7
 800114e:	2104      	movs	r1, #4
 8001150:	4618      	mov	r0, r3
 8001152:	f003 fca5 	bl	8004aa0 <HAL_RCC_ClockConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 800115c:	f000 fd98 	bl	8001c90 <Error_Handler>
	}
}
 8001160:	bf00      	nop
 8001162:	3758      	adds	r7, #88	; 0x58
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 800116c:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <MX_CRC_Init+0x3c>)
 800116e:	4a0e      	ldr	r2, [pc, #56]	; (80011a8 <MX_CRC_Init+0x40>)
 8001170:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_CRC_Init+0x3c>)
 8001174:	2200      	movs	r2, #0
 8001176:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <MX_CRC_Init+0x3c>)
 800117a:	2200      	movs	r2, #0
 800117c:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_CRC_Init+0x3c>)
 8001180:	2200      	movs	r2, #0
 8001182:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <MX_CRC_Init+0x3c>)
 8001186:	2200      	movs	r2, #0
 8001188:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MX_CRC_Init+0x3c>)
 800118c:	2201      	movs	r2, #1
 800118e:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <MX_CRC_Init+0x3c>)
 8001192:	f001 fdd7 	bl	8002d44 <HAL_CRC_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_CRC_Init+0x38>
	{
		Error_Handler();
 800119c:	f000 fd78 	bl	8001c90 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000ad0 	.word	0x20000ad0
 80011a8:	40023000 	.word	0x40023000

080011ac <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <MX_I2C2_Init+0x74>)
 80011b2:	4a1c      	ldr	r2, [pc, #112]	; (8001224 <MX_I2C2_Init+0x78>)
 80011b4:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x10909CEC;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <MX_I2C2_Init+0x74>)
 80011b8:	4a1b      	ldr	r2, [pc, #108]	; (8001228 <MX_I2C2_Init+0x7c>)
 80011ba:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <MX_I2C2_Init+0x74>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <MX_I2C2_Init+0x74>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c8:	4b15      	ldr	r3, [pc, #84]	; (8001220 <MX_I2C2_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <MX_I2C2_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <MX_I2C2_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_I2C2_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_I2C2_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011e6:	480e      	ldr	r0, [pc, #56]	; (8001220 <MX_I2C2_Init+0x74>)
 80011e8:	f002 f9ef 	bl	80035ca <HAL_I2C_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 80011f2:	f000 fd4d 	bl	8001c90 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011f6:	2100      	movs	r1, #0
 80011f8:	4809      	ldr	r0, [pc, #36]	; (8001220 <MX_I2C2_Init+0x74>)
 80011fa:	f002 ff79 	bl	80040f0 <HAL_I2CEx_ConfigAnalogFilter>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 8001204:	f000 fd44 	bl	8001c90 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001208:	2100      	movs	r1, #0
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_I2C2_Init+0x74>)
 800120c:	f002 ffbb 	bl	8004186 <HAL_I2CEx_ConfigDigitalFilter>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 8001216:	f000 fd3b 	bl	8001c90 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000af4 	.word	0x20000af4
 8001224:	40005800 	.word	0x40005800
 8001228:	10909cec 	.word	0x10909cec

0800122c <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08e      	sub	sp, #56	; 0x38
 8001230:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800124c:	463b      	mov	r3, r7
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
 8001258:	611a      	str	r2, [r3, #16]
 800125a:	615a      	str	r2, [r3, #20]
 800125c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800125e:	4b33      	ldr	r3, [pc, #204]	; (800132c <MX_TIM2_Init+0x100>)
 8001260:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001264:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 10-1;
 8001266:	4b31      	ldr	r3, [pc, #196]	; (800132c <MX_TIM2_Init+0x100>)
 8001268:	2209      	movs	r2, #9
 800126a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126c:	4b2f      	ldr	r3, [pc, #188]	; (800132c <MX_TIM2_Init+0x100>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 8000-1;
 8001272:	4b2e      	ldr	r3, [pc, #184]	; (800132c <MX_TIM2_Init+0x100>)
 8001274:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001278:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127a:	4b2c      	ldr	r3, [pc, #176]	; (800132c <MX_TIM2_Init+0x100>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001280:	4b2a      	ldr	r3, [pc, #168]	; (800132c <MX_TIM2_Init+0x100>)
 8001282:	2280      	movs	r2, #128	; 0x80
 8001284:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001286:	4829      	ldr	r0, [pc, #164]	; (800132c <MX_TIM2_Init+0x100>)
 8001288:	f004 faea 	bl	8005860 <HAL_TIM_Base_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 8001292:	f000 fcfd 	bl	8001c90 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800129c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a0:	4619      	mov	r1, r3
 80012a2:	4822      	ldr	r0, [pc, #136]	; (800132c <MX_TIM2_Init+0x100>)
 80012a4:	f004 fe38 	bl	8005f18 <HAL_TIM_ConfigClockSource>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM2_Init+0x86>
	{
		Error_Handler();
 80012ae:	f000 fcef 	bl	8001c90 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012b2:	481e      	ldr	r0, [pc, #120]	; (800132c <MX_TIM2_Init+0x100>)
 80012b4:	f004 fb9c 	bl	80059f0 <HAL_TIM_PWM_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 80012be:	f000 fce7 	bl	8001c90 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ca:	f107 031c 	add.w	r3, r7, #28
 80012ce:	4619      	mov	r1, r3
 80012d0:	4816      	ldr	r0, [pc, #88]	; (800132c <MX_TIM2_Init+0x100>)
 80012d2:	f005 fb1d 	bl	8006910 <HAL_TIMEx_MasterConfigSynchronization>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 80012dc:	f000 fcd8 	bl	8001c90 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e0:	2360      	movs	r3, #96	; 0x60
 80012e2:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f0:	463b      	mov	r3, r7
 80012f2:	2200      	movs	r2, #0
 80012f4:	4619      	mov	r1, r3
 80012f6:	480d      	ldr	r0, [pc, #52]	; (800132c <MX_TIM2_Init+0x100>)
 80012f8:	f004 fcfa 	bl	8005cf0 <HAL_TIM_PWM_ConfigChannel>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM2_Init+0xda>
	{
		Error_Handler();
 8001302:	f000 fcc5 	bl	8001c90 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001306:	463b      	mov	r3, r7
 8001308:	2208      	movs	r2, #8
 800130a:	4619      	mov	r1, r3
 800130c:	4807      	ldr	r0, [pc, #28]	; (800132c <MX_TIM2_Init+0x100>)
 800130e:	f004 fcef 	bl	8005cf0 <HAL_TIM_PWM_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM2_Init+0xf0>
	{
		Error_Handler();
 8001318:	f000 fcba 	bl	8001c90 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800131c:	4803      	ldr	r0, [pc, #12]	; (800132c <MX_TIM2_Init+0x100>)
 800131e:	f000 fdcf 	bl	8001ec0 <HAL_TIM_MspPostInit>

}
 8001322:	bf00      	nop
 8001324:	3738      	adds	r7, #56	; 0x38
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000b48 	.word	0x20000b48

08001330 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08e      	sub	sp, #56	; 0x38
 8001334:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001336:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001350:	463b      	mov	r3, r7
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]
 800135e:	615a      	str	r2, [r3, #20]
 8001360:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001362:	4b32      	ldr	r3, [pc, #200]	; (800142c <MX_TIM3_Init+0xfc>)
 8001364:	4a32      	ldr	r2, [pc, #200]	; (8001430 <MX_TIM3_Init+0x100>)
 8001366:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001368:	4b30      	ldr	r3, [pc, #192]	; (800142c <MX_TIM3_Init+0xfc>)
 800136a:	2200      	movs	r2, #0
 800136c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136e:	4b2f      	ldr	r3, [pc, #188]	; (800142c <MX_TIM3_Init+0xfc>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001374:	4b2d      	ldr	r3, [pc, #180]	; (800142c <MX_TIM3_Init+0xfc>)
 8001376:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800137a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137c:	4b2b      	ldr	r3, [pc, #172]	; (800142c <MX_TIM3_Init+0xfc>)
 800137e:	2200      	movs	r2, #0
 8001380:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001382:	4b2a      	ldr	r3, [pc, #168]	; (800142c <MX_TIM3_Init+0xfc>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001388:	4828      	ldr	r0, [pc, #160]	; (800142c <MX_TIM3_Init+0xfc>)
 800138a:	f004 fa69 	bl	8005860 <HAL_TIM_Base_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 8001394:	f000 fc7c 	bl	8001c90 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800139e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013a2:	4619      	mov	r1, r3
 80013a4:	4821      	ldr	r0, [pc, #132]	; (800142c <MX_TIM3_Init+0xfc>)
 80013a6:	f004 fdb7 	bl	8005f18 <HAL_TIM_ConfigClockSource>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM3_Init+0x84>
	{
		Error_Handler();
 80013b0:	f000 fc6e 	bl	8001c90 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013b4:	481d      	ldr	r0, [pc, #116]	; (800142c <MX_TIM3_Init+0xfc>)
 80013b6:	f004 fb1b 	bl	80059f0 <HAL_TIM_PWM_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM3_Init+0x94>
	{
		Error_Handler();
 80013c0:	f000 fc66 	bl	8001c90 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4619      	mov	r1, r3
 80013d2:	4816      	ldr	r0, [pc, #88]	; (800142c <MX_TIM3_Init+0xfc>)
 80013d4:	f005 fa9c 	bl	8006910 <HAL_TIMEx_MasterConfigSynchronization>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 80013de:	f000 fc57 	bl	8001c90 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e2:	2360      	movs	r3, #96	; 0x60
 80013e4:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f2:	463b      	mov	r3, r7
 80013f4:	2200      	movs	r2, #0
 80013f6:	4619      	mov	r1, r3
 80013f8:	480c      	ldr	r0, [pc, #48]	; (800142c <MX_TIM3_Init+0xfc>)
 80013fa:	f004 fc79 	bl	8005cf0 <HAL_TIM_PWM_ConfigChannel>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM3_Init+0xd8>
	{
		Error_Handler();
 8001404:	f000 fc44 	bl	8001c90 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001408:	463b      	mov	r3, r7
 800140a:	220c      	movs	r2, #12
 800140c:	4619      	mov	r1, r3
 800140e:	4807      	ldr	r0, [pc, #28]	; (800142c <MX_TIM3_Init+0xfc>)
 8001410:	f004 fc6e 	bl	8005cf0 <HAL_TIM_PWM_ConfigChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM3_Init+0xee>
	{
		Error_Handler();
 800141a:	f000 fc39 	bl	8001c90 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800141e:	4803      	ldr	r0, [pc, #12]	; (800142c <MX_TIM3_Init+0xfc>)
 8001420:	f000 fd4e 	bl	8001ec0 <HAL_TIM_MspPostInit>

}
 8001424:	bf00      	nop
 8001426:	3738      	adds	r7, #56	; 0x38
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000b94 	.word	0x20000b94
 8001430:	40000400 	.word	0x40000400

08001434 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <MX_TIM6_Init+0x64>)
 8001446:	4a15      	ldr	r2, [pc, #84]	; (800149c <MX_TIM6_Init+0x68>)
 8001448:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 10-1;
 800144a:	4b13      	ldr	r3, [pc, #76]	; (8001498 <MX_TIM6_Init+0x64>)
 800144c:	2209      	movs	r2, #9
 800144e:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_TIM6_Init+0x64>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 40000-1;
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <MX_TIM6_Init+0x64>)
 8001458:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800145c:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_TIM6_Init+0x64>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001464:	480c      	ldr	r0, [pc, #48]	; (8001498 <MX_TIM6_Init+0x64>)
 8001466:	f004 f9fb 	bl	8005860 <HAL_TIM_Base_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM6_Init+0x40>
	{
		Error_Handler();
 8001470:	f000 fc0e 	bl	8001c90 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001474:	2300      	movs	r3, #0
 8001476:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	4619      	mov	r1, r3
 8001480:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_TIM6_Init+0x64>)
 8001482:	f005 fa45 	bl	8006910 <HAL_TIMEx_MasterConfigSynchronization>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM6_Init+0x5c>
	{
		Error_Handler();
 800148c:	f000 fc00 	bl	8001c90 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000be0 	.word	0x20000be0
 800149c:	40001000 	.word	0x40001000

080014a0 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80014a4:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <MX_USART1_UART_Init+0x58>)
 80014a6:	4a15      	ldr	r2, [pc, #84]	; (80014fc <MX_USART1_UART_Init+0x5c>)
 80014a8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80014aa:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <MX_USART1_UART_Init+0x58>)
 80014ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014b0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <MX_USART1_UART_Init+0x58>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <MX_USART1_UART_Init+0x58>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <MX_USART1_UART_Init+0x58>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <MX_USART1_UART_Init+0x58>)
 80014c6:	220c      	movs	r2, #12
 80014c8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <MX_USART1_UART_Init+0x58>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d0:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <MX_USART1_UART_Init+0x58>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <MX_USART1_UART_Init+0x58>)
 80014d8:	2200      	movs	r2, #0
 80014da:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <MX_USART1_UART_Init+0x58>)
 80014de:	2200      	movs	r2, #0
 80014e0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_USART1_UART_Init+0x58>)
 80014e4:	f005 faba 	bl	8006a5c <HAL_UART_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 80014ee:	f000 fbcf 	bl	8001c90 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000c2c 	.word	0x20000c2c
 80014fc:	40013800 	.word	0x40013800

08001500 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001516:	4b6d      	ldr	r3, [pc, #436]	; (80016cc <MX_GPIO_Init+0x1cc>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	4a6c      	ldr	r2, [pc, #432]	; (80016cc <MX_GPIO_Init+0x1cc>)
 800151c:	f043 0310 	orr.w	r3, r3, #16
 8001520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001522:	4b6a      	ldr	r3, [pc, #424]	; (80016cc <MX_GPIO_Init+0x1cc>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	f003 0310 	and.w	r3, r3, #16
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800152e:	4b67      	ldr	r3, [pc, #412]	; (80016cc <MX_GPIO_Init+0x1cc>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	4a66      	ldr	r2, [pc, #408]	; (80016cc <MX_GPIO_Init+0x1cc>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153a:	4b64      	ldr	r3, [pc, #400]	; (80016cc <MX_GPIO_Init+0x1cc>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	4b61      	ldr	r3, [pc, #388]	; (80016cc <MX_GPIO_Init+0x1cc>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	4a60      	ldr	r2, [pc, #384]	; (80016cc <MX_GPIO_Init+0x1cc>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001552:	4b5e      	ldr	r3, [pc, #376]	; (80016cc <MX_GPIO_Init+0x1cc>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	4b5b      	ldr	r3, [pc, #364]	; (80016cc <MX_GPIO_Init+0x1cc>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001562:	4a5a      	ldr	r2, [pc, #360]	; (80016cc <MX_GPIO_Init+0x1cc>)
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156a:	4b58      	ldr	r3, [pc, #352]	; (80016cc <MX_GPIO_Init+0x1cc>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001576:	4b55      	ldr	r3, [pc, #340]	; (80016cc <MX_GPIO_Init+0x1cc>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	4a54      	ldr	r2, [pc, #336]	; (80016cc <MX_GPIO_Init+0x1cc>)
 800157c:	f043 0308 	orr.w	r3, r3, #8
 8001580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001582:	4b52      	ldr	r3, [pc, #328]	; (80016cc <MX_GPIO_Init+0x1cc>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001594:	484e      	ldr	r0, [pc, #312]	; (80016d0 <MX_GPIO_Init+0x1d0>)
 8001596:	f001 ffdd 	bl	8003554 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin, GPIO_PIN_RESET);
 800159a:	2200      	movs	r2, #0
 800159c:	f241 0104 	movw	r1, #4100	; 0x1004
 80015a0:	484c      	ldr	r0, [pc, #304]	; (80016d4 <MX_GPIO_Init+0x1d4>)
 80015a2:	f001 ffd7 	bl	8003554 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2181      	movs	r1, #129	; 0x81
 80015aa:	484b      	ldr	r0, [pc, #300]	; (80016d8 <MX_GPIO_Init+0x1d8>)
 80015ac:	f001 ffd2 	bl	8003554 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80015b0:	2201      	movs	r2, #1
 80015b2:	2120      	movs	r1, #32
 80015b4:	4847      	ldr	r0, [pc, #284]	; (80016d4 <MX_GPIO_Init+0x1d4>)
 80015b6:	f001 ffcd 	bl	8003554 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80015ba:	2201      	movs	r2, #1
 80015bc:	2101      	movs	r1, #1
 80015be:	4844      	ldr	r0, [pc, #272]	; (80016d0 <MX_GPIO_Init+0x1d0>)
 80015c0:	f001 ffc8 	bl	8003554 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
	GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80015c4:	f240 1315 	movw	r3, #277	; 0x115
 80015c8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	483c      	ldr	r0, [pc, #240]	; (80016d0 <MX_GPIO_Init+0x1d0>)
 80015de:	f001 fd1b 	bl	8003018 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80015e2:	234a      	movs	r3, #74	; 0x4a
 80015e4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015ea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4619      	mov	r1, r3
 80015f6:	4836      	ldr	r0, [pc, #216]	; (80016d0 <MX_GPIO_Init+0x1d0>)
 80015f8:	f001 fd0e 	bl	8003018 <HAL_GPIO_Init>

	/*Configure GPIO pin : BUTTON_EXTI13_Pin */
	GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80015fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001600:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001602:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001606:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	4832      	ldr	r0, [pc, #200]	; (80016dc <MX_GPIO_Init+0x1dc>)
 8001614:	f001 fd00 	bl	8003018 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC5 LSM3MDL_DRDY_EXTI8_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_5|LSM3MDL_DRDY_EXTI8_Pin;
 8001618:	f44f 7390 	mov.w	r3, #288	; 0x120
 800161c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800161e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001622:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4619      	mov	r1, r3
 800162e:	482b      	ldr	r0, [pc, #172]	; (80016dc <MX_GPIO_Init+0x1dc>)
 8001630:	f001 fcf2 	bl	8003018 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D3_Pin */
	GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001634:	2301      	movs	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001638:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800163c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	4822      	ldr	r0, [pc, #136]	; (80016d4 <MX_GPIO_Init+0x1d4>)
 800164a:	f001 fce5 	bl	8003018 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin SPSGRF_915_SPI3_CSN_Pin */
	GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|SPSGRF_915_SPI3_CSN_Pin;
 800164e:	f241 0324 	movw	r3, #4132	; 0x1024
 8001652:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001654:	2301      	movs	r3, #1
 8001656:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	481b      	ldr	r0, [pc, #108]	; (80016d4 <MX_GPIO_Init+0x1d4>)
 8001668:	f001 fcd6 	bl	8003018 <HAL_GPIO_Init>

	/*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin PMOD_IRQ_EXTI12_Pin */
	GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|PMOD_IRQ_EXTI12_Pin;
 800166c:	f640 4304 	movw	r3, #3076	; 0xc04
 8001670:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001672:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001676:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	4815      	ldr	r0, [pc, #84]	; (80016d8 <MX_GPIO_Init+0x1d8>)
 8001684:	f001 fcc8 	bl	8003018 <HAL_GPIO_Init>

	/*Configure GPIO pins : PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
	GPIO_InitStruct.Pin = PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001688:	2381      	movs	r3, #129	; 0x81
 800168a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	480e      	ldr	r0, [pc, #56]	; (80016d8 <MX_GPIO_Init+0x1d8>)
 80016a0:	f001 fcba 	bl	8003018 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2100      	movs	r1, #0
 80016a8:	2017      	movs	r0, #23
 80016aa:	f001 fb14 	bl	8002cd6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016ae:	2017      	movs	r0, #23
 80016b0:	f001 fb2d 	bl	8002d0e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016b4:	2200      	movs	r2, #0
 80016b6:	2100      	movs	r1, #0
 80016b8:	2028      	movs	r0, #40	; 0x28
 80016ba:	f001 fb0c 	bl	8002cd6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016be:	2028      	movs	r0, #40	; 0x28
 80016c0:	f001 fb25 	bl	8002d0e <HAL_NVIC_EnableIRQ>

}
 80016c4:	bf00      	nop
 80016c6:	3728      	adds	r7, #40	; 0x28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40021000 	.word	0x40021000
 80016d0:	48001000 	.word	0x48001000
 80016d4:	48000400 	.word	0x48000400
 80016d8:	48000c00 	.word	0x48000c00
 80016dc:	48000800 	.word	0x48000800

080016e0 <vNormalizeAngles>:
/* USER CODE BEGIN 4 */

/*############################## Normalize angles ###############################*/

void vNormalizeAngles(float *pData)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]

	float NormAccel = 0.0 ;
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
	float NormGyro = 0.0 ;
 80016ee:	f04f 0300 	mov.w	r3, #0
 80016f2:	613b      	str	r3, [r7, #16]
	float NormMag	= 0.0 ;
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]

	NormMag = sqrt((pData[0]*pData[0])+(pData[1]*pData[1])+(pData[2]*pData[2])) ;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	ed93 7a00 	vldr	s14, [r3]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	edd3 7a00 	vldr	s15, [r3]
 8001706:	ee27 7a27 	vmul.f32	s14, s14, s15
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3304      	adds	r3, #4
 800170e:	edd3 6a00 	vldr	s13, [r3]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3304      	adds	r3, #4
 8001716:	edd3 7a00 	vldr	s15, [r3]
 800171a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800171e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3308      	adds	r3, #8
 8001726:	edd3 6a00 	vldr	s13, [r3]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3308      	adds	r3, #8
 800172e:	edd3 7a00 	vldr	s15, [r3]
 8001732:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001736:	ee77 7a27 	vadd.f32	s15, s14, s15
 800173a:	ee17 0a90 	vmov	r0, s15
 800173e:	f7fe ff03 	bl	8000548 <__aeabi_f2d>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	ec43 2b10 	vmov	d0, r2, r3
 800174a:	f00e f99f 	bl	800fa8c <sqrt>
 800174e:	ec53 2b10 	vmov	r2, r3, d0
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	f7ff fa47 	bl	8000be8 <__aeabi_d2f>
 800175a:	4603      	mov	r3, r0
 800175c:	60fb      	str	r3, [r7, #12]
	NormGyro = sqrt((pData[3]*pData[3])+(pData[4]*pData[4])+(pData[5]*pData[5])) ;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	330c      	adds	r3, #12
 8001762:	ed93 7a00 	vldr	s14, [r3]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	330c      	adds	r3, #12
 800176a:	edd3 7a00 	vldr	s15, [r3]
 800176e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3310      	adds	r3, #16
 8001776:	edd3 6a00 	vldr	s13, [r3]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3310      	adds	r3, #16
 800177e:	edd3 7a00 	vldr	s15, [r3]
 8001782:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001786:	ee37 7a27 	vadd.f32	s14, s14, s15
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3314      	adds	r3, #20
 800178e:	edd3 6a00 	vldr	s13, [r3]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3314      	adds	r3, #20
 8001796:	edd3 7a00 	vldr	s15, [r3]
 800179a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800179e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a2:	ee17 0a90 	vmov	r0, s15
 80017a6:	f7fe fecf 	bl	8000548 <__aeabi_f2d>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	ec43 2b10 	vmov	d0, r2, r3
 80017b2:	f00e f96b 	bl	800fa8c <sqrt>
 80017b6:	ec53 2b10 	vmov	r2, r3, d0
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f7ff fa13 	bl	8000be8 <__aeabi_d2f>
 80017c2:	4603      	mov	r3, r0
 80017c4:	613b      	str	r3, [r7, #16]
	NormAccel= sqrt((pData[6]*pData[6])+(pData[7]*pData[7])+(pData[8]*pData[8])) ;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3318      	adds	r3, #24
 80017ca:	ed93 7a00 	vldr	s14, [r3]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3318      	adds	r3, #24
 80017d2:	edd3 7a00 	vldr	s15, [r3]
 80017d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	331c      	adds	r3, #28
 80017de:	edd3 6a00 	vldr	s13, [r3]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	331c      	adds	r3, #28
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3320      	adds	r3, #32
 80017f6:	edd3 6a00 	vldr	s13, [r3]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3320      	adds	r3, #32
 80017fe:	edd3 7a00 	vldr	s15, [r3]
 8001802:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800180a:	ee17 0a90 	vmov	r0, s15
 800180e:	f7fe fe9b 	bl	8000548 <__aeabi_f2d>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	ec43 2b10 	vmov	d0, r2, r3
 800181a:	f00e f937 	bl	800fa8c <sqrt>
 800181e:	ec53 2b10 	vmov	r2, r3, d0
 8001822:	4610      	mov	r0, r2
 8001824:	4619      	mov	r1, r3
 8001826:	f7ff f9df 	bl	8000be8 <__aeabi_d2f>
 800182a:	4603      	mov	r3, r0
 800182c:	617b      	str	r3, [r7, #20]


	pData[0] = pData[0]/NormMag;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	edd3 6a00 	vldr	s13, [r3]
 8001834:	ed97 7a03 	vldr	s14, [r7, #12]
 8001838:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	edc3 7a00 	vstr	s15, [r3]
	pData[1] = pData[1]/NormMag;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3304      	adds	r3, #4
 8001846:	edd3 6a00 	vldr	s13, [r3]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3304      	adds	r3, #4
 800184e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001856:	edc3 7a00 	vstr	s15, [r3]
	pData[2] = pData[2]/NormMag;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3308      	adds	r3, #8
 800185e:	edd3 6a00 	vldr	s13, [r3]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3308      	adds	r3, #8
 8001866:	ed97 7a03 	vldr	s14, [r7, #12]
 800186a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800186e:	edc3 7a00 	vstr	s15, [r3]

	pData[3] = pData[3]/NormGyro;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	330c      	adds	r3, #12
 8001876:	edd3 6a00 	vldr	s13, [r3]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	330c      	adds	r3, #12
 800187e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001882:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001886:	edc3 7a00 	vstr	s15, [r3]
	pData[4] = pData[4]/NormGyro;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3310      	adds	r3, #16
 800188e:	edd3 6a00 	vldr	s13, [r3]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3310      	adds	r3, #16
 8001896:	ed97 7a04 	vldr	s14, [r7, #16]
 800189a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800189e:	edc3 7a00 	vstr	s15, [r3]
	pData[5] = pData[5]/NormGyro;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3314      	adds	r3, #20
 80018a6:	edd3 6a00 	vldr	s13, [r3]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3314      	adds	r3, #20
 80018ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80018b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018b6:	edc3 7a00 	vstr	s15, [r3]

	pData[6] = pData[6]/NormAccel;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3318      	adds	r3, #24
 80018be:	edd3 6a00 	vldr	s13, [r3]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3318      	adds	r3, #24
 80018c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80018ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ce:	edc3 7a00 	vstr	s15, [r3]
	pData[7] = pData[7]/NormAccel;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	331c      	adds	r3, #28
 80018d6:	edd3 6a00 	vldr	s13, [r3]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	331c      	adds	r3, #28
 80018de:	ed97 7a05 	vldr	s14, [r7, #20]
 80018e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018e6:	edc3 7a00 	vstr	s15, [r3]
	pData[8] = pData[8]/NormAccel;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3320      	adds	r3, #32
 80018ee:	edd3 6a00 	vldr	s13, [r3]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	3320      	adds	r3, #32
 80018f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80018fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018fe:	edc3 7a00 	vstr	s15, [r3]

}
 8001902:	bf00      	nop
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	0000      	movs	r0, r0
 800190c:	0000      	movs	r0, r0
	...

08001910 <HAL_TIM_PeriodElapsedCallback>:


/*############################## Callback function ##############################*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]

	if(htim==&htim6)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a77      	ldr	r2, [pc, #476]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800191c:	4293      	cmp	r3, r2
 800191e:	f040 80e0 	bne.w	8001ae2 <HAL_TIM_PeriodElapsedCallback+0x1d2>
	{
		if(ready==0)
 8001922:	4b76      	ldr	r3, [pc, #472]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f040 80db 	bne.w	8001ae2 <HAL_TIM_PeriodElapsedCallback+0x1d2>
		{
			BSP_GYRO_GetXYZ(&Data_Gyro_f[0]);
 800192c:	4874      	ldr	r0, [pc, #464]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800192e:	f000 fe3f 	bl	80025b0 <BSP_GYRO_GetXYZ>
			BSP_ACCELERO_AccGetXYZ(&Data_Accel_i16[0]);
 8001932:	4874      	ldr	r0, [pc, #464]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001934:	f000 fde2 	bl	80024fc <BSP_ACCELERO_AccGetXYZ>

			Data_f[3] =  Data_Gyro_f[0]/1000.0 ;
 8001938:	4b71      	ldr	r3, [pc, #452]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800193a:	ed93 7a00 	vldr	s14, [r3]
 800193e:	eddf 6a72 	vldr	s13, [pc, #456]	; 8001b08 <HAL_TIM_PeriodElapsedCallback+0x1f8>
 8001942:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001946:	4b71      	ldr	r3, [pc, #452]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001948:	edc3 7a03 	vstr	s15, [r3, #12]
			Data_f[4] =  Data_Gyro_f[1]/1000.0 ;
 800194c:	4b6c      	ldr	r3, [pc, #432]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800194e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001952:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8001b08 <HAL_TIM_PeriodElapsedCallback+0x1f8>
 8001956:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800195a:	4b6c      	ldr	r3, [pc, #432]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800195c:	edc3 7a04 	vstr	s15, [r3, #16]
			Data_f[5] =  Data_Gyro_f[2]/1000.0 ;
 8001960:	4b67      	ldr	r3, [pc, #412]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001962:	ed93 7a02 	vldr	s14, [r3, #8]
 8001966:	eddf 6a68 	vldr	s13, [pc, #416]	; 8001b08 <HAL_TIM_PeriodElapsedCallback+0x1f8>
 800196a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800196e:	4b67      	ldr	r3, [pc, #412]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001970:	edc3 7a05 	vstr	s15, [r3, #20]

			Data_f[6] = ((Data_Accel_i16[0]*9.81)/1000) ;
 8001974:	4b63      	ldr	r3, [pc, #396]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001976:	f9b3 3000 	ldrsh.w	r3, [r3]
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fdd2 	bl	8000524 <__aeabi_i2d>
 8001980:	a35b      	add	r3, pc, #364	; (adr r3, 8001af0 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001986:	f7fe fe37 	bl	80005f8 <__aeabi_dmul>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4610      	mov	r0, r2
 8001990:	4619      	mov	r1, r3
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	4b5e      	ldr	r3, [pc, #376]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001998:	f7fe ff58 	bl	800084c <__aeabi_ddiv>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	f7ff f920 	bl	8000be8 <__aeabi_d2f>
 80019a8:	4603      	mov	r3, r0
 80019aa:	4a58      	ldr	r2, [pc, #352]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80019ac:	6193      	str	r3, [r2, #24]
			Data_f[7] = ((Data_Accel_i16[1]*9.81)/1000) ;
 80019ae:	4b55      	ldr	r3, [pc, #340]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80019b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fdb5 	bl	8000524 <__aeabi_i2d>
 80019ba:	a34d      	add	r3, pc, #308	; (adr r3, 8001af0 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80019bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c0:	f7fe fe1a 	bl	80005f8 <__aeabi_dmul>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	4b4f      	ldr	r3, [pc, #316]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80019d2:	f7fe ff3b 	bl	800084c <__aeabi_ddiv>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	f7ff f903 	bl	8000be8 <__aeabi_d2f>
 80019e2:	4603      	mov	r3, r0
 80019e4:	4a49      	ldr	r2, [pc, #292]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80019e6:	61d3      	str	r3, [r2, #28]
			Data_f[8] =((Data_Accel_i16[2]*9.81)/1000) ;
 80019e8:	4b46      	ldr	r3, [pc, #280]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80019ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fd98 	bl	8000524 <__aeabi_i2d>
 80019f4:	a33e      	add	r3, pc, #248	; (adr r3, 8001af0 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80019f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fa:	f7fe fdfd 	bl	80005f8 <__aeabi_dmul>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	4b41      	ldr	r3, [pc, #260]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001a0c:	f7fe ff1e 	bl	800084c <__aeabi_ddiv>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f7ff f8e6 	bl	8000be8 <__aeabi_d2f>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4a3b      	ldr	r2, [pc, #236]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001a20:	6213      	str	r3, [r2, #32]

			vNormalizeAngles(&Data_f[0]);
 8001a22:	483a      	ldr	r0, [pc, #232]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001a24:	f7ff fe5c 	bl	80016e0 <vNormalizeAngles>

			Input_Data_af[6*rows_u8]=Data_f[6];
 8001a28:	4b3a      	ldr	r3, [pc, #232]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4413      	add	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4618      	mov	r0, r3
 8001a36:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001a38:	699a      	ldr	r2, [r3, #24]
 8001a3a:	4937      	ldr	r1, [pc, #220]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001a3c:	0083      	lsls	r3, r0, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	601a      	str	r2, [r3, #0]
			Input_Data_af[6*rows_u8+1]=Data_f[7];
 8001a42:	4b34      	ldr	r3, [pc, #208]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	4613      	mov	r3, r2
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4413      	add	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	3301      	adds	r3, #1
 8001a50:	4a2e      	ldr	r2, [pc, #184]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001a52:	69d2      	ldr	r2, [r2, #28]
 8001a54:	4930      	ldr	r1, [pc, #192]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	440b      	add	r3, r1
 8001a5a:	601a      	str	r2, [r3, #0]
			Input_Data_af[6*rows_u8+2]=Data_f[8];
 8001a5c:	4b2d      	ldr	r3, [pc, #180]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4613      	mov	r3, r2
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4413      	add	r3, r2
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	3302      	adds	r3, #2
 8001a6a:	4a28      	ldr	r2, [pc, #160]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001a6c:	6a12      	ldr	r2, [r2, #32]
 8001a6e:	492a      	ldr	r1, [pc, #168]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	440b      	add	r3, r1
 8001a74:	601a      	str	r2, [r3, #0]
			Input_Data_af[6*rows_u8+3]=Data_f[3];
 8001a76:	4b27      	ldr	r3, [pc, #156]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	3303      	adds	r3, #3
 8001a84:	4a21      	ldr	r2, [pc, #132]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001a86:	68d2      	ldr	r2, [r2, #12]
 8001a88:	4923      	ldr	r1, [pc, #140]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	601a      	str	r2, [r3, #0]
			Input_Data_af[6*rows_u8+4]=Data_f[4];
 8001a90:	4b20      	ldr	r3, [pc, #128]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4613      	mov	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	4413      	add	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	4a1b      	ldr	r2, [pc, #108]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001aa0:	6912      	ldr	r2, [r2, #16]
 8001aa2:	491d      	ldr	r1, [pc, #116]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	601a      	str	r2, [r3, #0]
			Input_Data_af[6*rows_u8+5]=Data_f[5];
 8001aaa:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	4413      	add	r3, r2
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	3305      	adds	r3, #5
 8001ab8:	4a14      	ldr	r2, [pc, #80]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001aba:	6952      	ldr	r2, [r2, #20]
 8001abc:	4916      	ldr	r1, [pc, #88]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	601a      	str	r2, [r3, #0]
			rows_u8++;
 8001ac4:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	4a12      	ldr	r2, [pc, #72]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001acc:	6013      	str	r3, [r2, #0]
			if(rows_u8==80){
 8001ace:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b50      	cmp	r3, #80	; 0x50
 8001ad4:	d105      	bne.n	8001ae2 <HAL_TIM_PeriodElapsedCallback+0x1d2>
				rows_u8=0;
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
				ready=1;
 8001adc:	4b07      	ldr	r3, [pc, #28]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
			}
		}
	}


}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	f3af 8000 	nop.w
 8001af0:	51eb851f 	.word	0x51eb851f
 8001af4:	40239eb8 	.word	0x40239eb8
 8001af8:	20000be0 	.word	0x20000be0
 8001afc:	20000cec 	.word	0x20000cec
 8001b00:	20000cb8 	.word	0x20000cb8
 8001b04:	20000cb0 	.word	0x20000cb0
 8001b08:	447a0000 	.word	0x447a0000
 8001b0c:	20000cc4 	.word	0x20000cc4
 8001b10:	408f4000 	.word	0x408f4000
 8001b14:	20000ce8 	.word	0x20000ce8
 8001b18:	20000cf0 	.word	0x20000cf0

08001b1c <AI_Init>:


static void AI_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
	ai_error err;

	/* Create a local array with the addresses of the activations buffers */
	const ai_handle act_addr[] = { activations };
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <AI_Init+0x64>)
 8001b24:	603b      	str	r3, [r7, #0]
	/* Create an instance of the model */
	err = ai_network_create_and_init(&network, act_addr, NULL);
 8001b26:	463b      	mov	r3, r7
 8001b28:	2200      	movs	r2, #0
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4815      	ldr	r0, [pc, #84]	; (8001b84 <AI_Init+0x68>)
 8001b2e:	f006 f9b7 	bl	8007ea0 <ai_network_create_and_init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	607b      	str	r3, [r7, #4]
	if (err.type != AI_ERROR_NONE) {
 8001b36:	793b      	ldrb	r3, [r7, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00a      	beq.n	8001b52 <AI_Init+0x36>
		printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 8001b3c:	793b      	ldrb	r3, [r7, #4]
 8001b3e:	4619      	mov	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001b46:	461a      	mov	r2, r3
 8001b48:	480f      	ldr	r0, [pc, #60]	; (8001b88 <AI_Init+0x6c>)
 8001b4a:	f00a fa15 	bl	800bf78 <iprintf>
		Error_Handler();
 8001b4e:	f000 f89f 	bl	8001c90 <Error_Handler>
	}
	ai_input = ai_network_inputs_get(network, NULL);
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <AI_Init+0x68>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2100      	movs	r1, #0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f006 fa15 	bl	8007f88 <ai_network_inputs_get>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <AI_Init+0x70>)
 8001b62:	6013      	str	r3, [r2, #0]
	ai_output = ai_network_outputs_get(network, NULL);
 8001b64:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <AI_Init+0x68>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f006 fa26 	bl	8007fbc <ai_network_outputs_get>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <AI_Init+0x74>)
 8001b74:	6013      	str	r3, [r2, #0]
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20001490 	.word	0x20001490
 8001b84:	20001470 	.word	0x20001470
 8001b88:	0800ffa4 	.word	0x0800ffa4
 8001b8c:	2000b3d0 	.word	0x2000b3d0
 8001b90:	2000b3d4 	.word	0x2000b3d4

08001b94 <AI_Run>:

static void AI_Run(float *pIn, float *pOut)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
	ai_i32 batch;
	ai_error err;

	/* Update IO handlers with the data payload */
	ai_input[0].data = AI_HANDLE_PTR(pIn);
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <AI_Run+0x60>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	605a      	str	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(pOut);
 8001ba6:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <AI_Run+0x64>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	605a      	str	r2, [r3, #4]

	batch = ai_network_run(network, ai_input, ai_output);
 8001bae:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <AI_Run+0x68>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a10      	ldr	r2, [pc, #64]	; (8001bf4 <AI_Run+0x60>)
 8001bb4:	6811      	ldr	r1, [r2, #0]
 8001bb6:	4a10      	ldr	r2, [pc, #64]	; (8001bf8 <AI_Run+0x64>)
 8001bb8:	6812      	ldr	r2, [r2, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f006 fa54 	bl	8008068 <ai_network_run>
 8001bc0:	60f8      	str	r0, [r7, #12]
	if (batch != 1) {
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d011      	beq.n	8001bec <AI_Run+0x58>
		err = ai_network_get_error(network);
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <AI_Run+0x68>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f006 f945 	bl	8007e5c <ai_network_get_error>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	60bb      	str	r3, [r7, #8]
		printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 8001bd6:	7a3b      	ldrb	r3, [r7, #8]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001be0:	461a      	mov	r2, r3
 8001be2:	4807      	ldr	r0, [pc, #28]	; (8001c00 <AI_Run+0x6c>)
 8001be4:	f00a f9c8 	bl	800bf78 <iprintf>
		Error_Handler();
 8001be8:	f000 f852 	bl	8001c90 <Error_Handler>
	}
}
 8001bec:	bf00      	nop
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	2000b3d0 	.word	0x2000b3d0
 8001bf8:	2000b3d4 	.word	0x2000b3d4
 8001bfc:	20001470 	.word	0x20001470
 8001c00:	0800ffd0 	.word	0x0800ffd0

08001c04 <argmax>:

static uint32_t argmax(const float * values, uint32_t len)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
	float max_value = values[0];
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	617b      	str	r3, [r7, #20]
	uint32_t max_index = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 1; i < len; i++) {
 8001c18:	2301      	movs	r3, #1
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	e017      	b.n	8001c4e <argmax+0x4a>
		if (values[i] > max_value) {
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	edd3 7a00 	vldr	s15, [r3]
 8001c2a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c36:	d507      	bpl.n	8001c48 <argmax+0x44>
			max_value = values[i];
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	4413      	add	r3, r2
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	617b      	str	r3, [r7, #20]
			max_index = i;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 1; i < len; i++) {
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d3e3      	bcc.n	8001c1e <argmax+0x1a>
		}
	}
	return max_index;
 8001c56:	693b      	ldr	r3, [r7, #16]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	371c      	adds	r7, #28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <_write>:

int _write(int fd, char * ptr, int len)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	f04f 33ff 	mov.w	r3, #4294967295
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	4804      	ldr	r0, [pc, #16]	; (8001c8c <_write+0x28>)
 8001c7c:	f004 ff3c 	bl	8006af8 <HAL_UART_Transmit>
	return len;
 8001c80:	687b      	ldr	r3, [r7, #4]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000c2c 	.word	0x20000c2c

08001c90 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c94:	b672      	cpsid	i
}
 8001c96:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001c98:	e7fe      	b.n	8001c98 <Error_Handler+0x8>
	...

08001c9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <HAL_MspInit+0x44>)
 8001ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca6:	4a0e      	ldr	r2, [pc, #56]	; (8001ce0 <HAL_MspInit+0x44>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6613      	str	r3, [r2, #96]	; 0x60
 8001cae:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <HAL_MspInit+0x44>)
 8001cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_MspInit+0x44>)
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbe:	4a08      	ldr	r2, [pc, #32]	; (8001ce0 <HAL_MspInit+0x44>)
 8001cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_MspInit+0x44>)
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40021000 	.word	0x40021000

08001ce4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <HAL_CRC_MspInit+0x38>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d10b      	bne.n	8001d0e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <HAL_CRC_MspInit+0x3c>)
 8001cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cfa:	4a09      	ldr	r2, [pc, #36]	; (8001d20 <HAL_CRC_MspInit+0x3c>)
 8001cfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d00:	6493      	str	r3, [r2, #72]	; 0x48
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <HAL_CRC_MspInit+0x3c>)
 8001d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001d0e:	bf00      	nop
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40023000 	.word	0x40023000
 8001d20:	40021000 	.word	0x40021000

08001d24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b0ac      	sub	sp, #176	; 0xb0
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2288      	movs	r2, #136	; 0x88
 8001d42:	2100      	movs	r1, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f009 f9b5 	bl	800b0b4 <memset>
  if(hi2c->Instance==I2C2)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a21      	ldr	r2, [pc, #132]	; (8001dd4 <HAL_I2C_MspInit+0xb0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d13b      	bne.n	8001dcc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	4618      	mov	r0, r3
 8001d62:	f003 f8c1 	bl	8004ee8 <HAL_RCCEx_PeriphCLKConfig>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001d6c:	f7ff ff90 	bl	8001c90 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d70:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <HAL_I2C_MspInit+0xb4>)
 8001d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d74:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <HAL_I2C_MspInit+0xb4>)
 8001d76:	f043 0302 	orr.w	r3, r3, #2
 8001d7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d7c:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <HAL_I2C_MspInit+0xb4>)
 8001d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001d88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d90:	2312      	movs	r3, #18
 8001d92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d96:	2301      	movs	r3, #1
 8001d98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001da2:	2304      	movs	r3, #4
 8001da4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dac:	4619      	mov	r1, r3
 8001dae:	480b      	ldr	r0, [pc, #44]	; (8001ddc <HAL_I2C_MspInit+0xb8>)
 8001db0:	f001 f932 	bl	8003018 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <HAL_I2C_MspInit+0xb4>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db8:	4a07      	ldr	r2, [pc, #28]	; (8001dd8 <HAL_I2C_MspInit+0xb4>)
 8001dba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_I2C_MspInit+0xb4>)
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001dcc:	bf00      	nop
 8001dce:	37b0      	adds	r7, #176	; 0xb0
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40005800 	.word	0x40005800
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	48000400 	.word	0x48000400

08001de0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0b      	ldr	r2, [pc, #44]	; (8001e1c <HAL_I2C_MspDeInit+0x3c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d10f      	bne.n	8001e12 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001df2:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <HAL_I2C_MspDeInit+0x40>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <HAL_I2C_MspDeInit+0x40>)
 8001df8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001dfc:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001dfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e02:	4808      	ldr	r0, [pc, #32]	; (8001e24 <HAL_I2C_MspDeInit+0x44>)
 8001e04:	f001 fab2 	bl	800336c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001e08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e0c:	4805      	ldr	r0, [pc, #20]	; (8001e24 <HAL_I2C_MspDeInit+0x44>)
 8001e0e:	f001 faad 	bl	800336c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40005800 	.word	0x40005800
 8001e20:	40021000 	.word	0x40021000
 8001e24:	48000400 	.word	0x48000400

08001e28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e38:	d10c      	bne.n	8001e54 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e3a:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3e:	4a1d      	ldr	r2, [pc, #116]	; (8001eb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6593      	str	r3, [r2, #88]	; 0x58
 8001e46:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001e52:	e02a      	b.n	8001eaa <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a17      	ldr	r2, [pc, #92]	; (8001eb8 <HAL_TIM_Base_MspInit+0x90>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d10c      	bne.n	8001e78 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e5e:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e62:	4a14      	ldr	r2, [pc, #80]	; (8001eb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001e64:	f043 0302 	orr.w	r3, r3, #2
 8001e68:	6593      	str	r3, [r2, #88]	; 0x58
 8001e6a:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]
}
 8001e76:	e018      	b.n	8001eaa <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0f      	ldr	r2, [pc, #60]	; (8001ebc <HAL_TIM_Base_MspInit+0x94>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d113      	bne.n	8001eaa <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e82:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e86:	4a0b      	ldr	r2, [pc, #44]	; (8001eb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001e88:	f043 0310 	orr.w	r3, r3, #16
 8001e8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e8e:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <HAL_TIM_Base_MspInit+0x8c>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	f003 0310 	and.w	r3, r3, #16
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	2036      	movs	r0, #54	; 0x36
 8001ea0:	f000 ff19 	bl	8002cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ea4:	2036      	movs	r0, #54	; 0x36
 8001ea6:	f000 ff32 	bl	8002d0e <HAL_NVIC_EnableIRQ>
}
 8001eaa:	bf00      	nop
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40000400 	.word	0x40000400
 8001ebc:	40001000 	.word	0x40001000

08001ec0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	; 0x28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee0:	d11e      	bne.n	8001f20 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee2:	4b22      	ldr	r3, [pc, #136]	; (8001f6c <HAL_TIM_MspPostInit+0xac>)
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee6:	4a21      	ldr	r2, [pc, #132]	; (8001f6c <HAL_TIM_MspPostInit+0xac>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eee:	4b1f      	ldr	r3, [pc, #124]	; (8001f6c <HAL_TIM_MspPostInit+0xac>)
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001efa:	f248 0304 	movw	r3, #32772	; 0x8004
 8001efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	4619      	mov	r1, r3
 8001f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f1a:	f001 f87d 	bl	8003018 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f1e:	e020      	b.n	8001f62 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <HAL_TIM_MspPostInit+0xb0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d11b      	bne.n	8001f62 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2a:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <HAL_TIM_MspPostInit+0xac>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	4a0f      	ldr	r2, [pc, #60]	; (8001f6c <HAL_TIM_MspPostInit+0xac>)
 8001f30:	f043 0302 	orr.w	r3, r3, #2
 8001f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f36:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <HAL_TIM_MspPostInit+0xac>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8001f42:	2312      	movs	r3, #18
 8001f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f52:	2302      	movs	r3, #2
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f56:	f107 0314 	add.w	r3, r7, #20
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4805      	ldr	r0, [pc, #20]	; (8001f74 <HAL_TIM_MspPostInit+0xb4>)
 8001f5e:	f001 f85b 	bl	8003018 <HAL_GPIO_Init>
}
 8001f62:	bf00      	nop
 8001f64:	3728      	adds	r7, #40	; 0x28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40000400 	.word	0x40000400
 8001f74:	48000400 	.word	0x48000400

08001f78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b0ac      	sub	sp, #176	; 0xb0
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	2288      	movs	r2, #136	; 0x88
 8001f96:	2100      	movs	r1, #0
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f009 f88b 	bl	800b0b4 <memset>
  if(huart->Instance==USART1)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a25      	ldr	r2, [pc, #148]	; (8002038 <HAL_UART_MspInit+0xc0>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d142      	bne.n	800202e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001fac:	2300      	movs	r3, #0
 8001fae:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f002 ff97 	bl	8004ee8 <HAL_RCCEx_PeriphCLKConfig>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fc0:	f7ff fe66 	bl	8001c90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fc4:	4b1d      	ldr	r3, [pc, #116]	; (800203c <HAL_UART_MspInit+0xc4>)
 8001fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc8:	4a1c      	ldr	r2, [pc, #112]	; (800203c <HAL_UART_MspInit+0xc4>)
 8001fca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fce:	6613      	str	r3, [r2, #96]	; 0x60
 8001fd0:	4b1a      	ldr	r3, [pc, #104]	; (800203c <HAL_UART_MspInit+0xc4>)
 8001fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fdc:	4b17      	ldr	r3, [pc, #92]	; (800203c <HAL_UART_MspInit+0xc4>)
 8001fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe0:	4a16      	ldr	r2, [pc, #88]	; (800203c <HAL_UART_MspInit+0xc4>)
 8001fe2:	f043 0302 	orr.w	r3, r3, #2
 8001fe6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fe8:	4b14      	ldr	r3, [pc, #80]	; (800203c <HAL_UART_MspInit+0xc4>)
 8001fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001ff4:	23c0      	movs	r3, #192	; 0xc0
 8001ff6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002006:	2303      	movs	r3, #3
 8002008:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800200c:	2307      	movs	r3, #7
 800200e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002012:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002016:	4619      	mov	r1, r3
 8002018:	4809      	ldr	r0, [pc, #36]	; (8002040 <HAL_UART_MspInit+0xc8>)
 800201a:	f000 fffd 	bl	8003018 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800201e:	2200      	movs	r2, #0
 8002020:	2100      	movs	r1, #0
 8002022:	2025      	movs	r0, #37	; 0x25
 8002024:	f000 fe57 	bl	8002cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002028:	2025      	movs	r0, #37	; 0x25
 800202a:	f000 fe70 	bl	8002d0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800202e:	bf00      	nop
 8002030:	37b0      	adds	r7, #176	; 0xb0
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40013800 	.word	0x40013800
 800203c:	40021000 	.word	0x40021000
 8002040:	48000400 	.word	0x48000400

08002044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <NMI_Handler+0x4>

0800204a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800204e:	e7fe      	b.n	800204e <HardFault_Handler+0x4>

08002050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <MemManage_Handler+0x4>

08002056 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800205a:	e7fe      	b.n	800205a <BusFault_Handler+0x4>

0800205c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002060:	e7fe      	b.n	8002060 <UsageFault_Handler+0x4>

08002062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002090:	f000 fd26 	bl	8002ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}

08002098 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800209c:	2020      	movs	r0, #32
 800209e:	f001 fa71 	bl	8003584 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80020a2:	2040      	movs	r0, #64	; 0x40
 80020a4:	f001 fa6e 	bl	8003584 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80020a8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020ac:	f001 fa6a 	bl	8003584 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020b8:	4802      	ldr	r0, [pc, #8]	; (80020c4 <USART1_IRQHandler+0x10>)
 80020ba:	f004 fdb1 	bl	8006c20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000c2c 	.word	0x20000c2c

080020c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80020cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80020d0:	f001 fa58 	bl	8003584 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80020d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80020d8:	f001 fa54 	bl	8003584 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80020dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020e0:	f001 fa50 	bl	8003584 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <TIM6_DAC_IRQHandler+0x10>)
 80020ee:	f003 fce0 	bl	8005ab2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000be0 	.word	0x20000be0

080020fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002104:	4a14      	ldr	r2, [pc, #80]	; (8002158 <_sbrk+0x5c>)
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <_sbrk+0x60>)
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002110:	4b13      	ldr	r3, [pc, #76]	; (8002160 <_sbrk+0x64>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d102      	bne.n	800211e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <_sbrk+0x64>)
 800211a:	4a12      	ldr	r2, [pc, #72]	; (8002164 <_sbrk+0x68>)
 800211c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211e:	4b10      	ldr	r3, [pc, #64]	; (8002160 <_sbrk+0x64>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	429a      	cmp	r2, r3
 800212a:	d207      	bcs.n	800213c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800212c:	f008 ff82 	bl	800b034 <__errno>
 8002130:	4603      	mov	r3, r0
 8002132:	220c      	movs	r2, #12
 8002134:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002136:	f04f 33ff 	mov.w	r3, #4294967295
 800213a:	e009      	b.n	8002150 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <_sbrk+0x64>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002142:	4b07      	ldr	r3, [pc, #28]	; (8002160 <_sbrk+0x64>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	4a05      	ldr	r2, [pc, #20]	; (8002160 <_sbrk+0x64>)
 800214c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800214e:	68fb      	ldr	r3, [r7, #12]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20018000 	.word	0x20018000
 800215c:	00000800 	.word	0x00000800
 8002160:	2000b3d8 	.word	0x2000b3d8
 8002164:	2000b4f8 	.word	0x2000b4f8

08002168 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <SystemInit+0x20>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002172:	4a05      	ldr	r2, [pc, #20]	; (8002188 <SystemInit+0x20>)
 8002174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002178:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800218c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002190:	f7ff ffea 	bl	8002168 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002194:	480c      	ldr	r0, [pc, #48]	; (80021c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002196:	490d      	ldr	r1, [pc, #52]	; (80021cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002198:	4a0d      	ldr	r2, [pc, #52]	; (80021d0 <LoopForever+0xe>)
  movs r3, #0
 800219a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800219c:	e002      	b.n	80021a4 <LoopCopyDataInit>

0800219e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800219e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021a2:	3304      	adds	r3, #4

080021a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a8:	d3f9      	bcc.n	800219e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021aa:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021ac:	4c0a      	ldr	r4, [pc, #40]	; (80021d8 <LoopForever+0x16>)
  movs r3, #0
 80021ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b0:	e001      	b.n	80021b6 <LoopFillZerobss>

080021b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b4:	3204      	adds	r2, #4

080021b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b8:	d3fb      	bcc.n	80021b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021ba:	f008 ff41 	bl	800b040 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021be:	f7fe ff1b 	bl	8000ff8 <main>

080021c2 <LoopForever>:

LoopForever:
    b LoopForever
 80021c2:	e7fe      	b.n	80021c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80021c4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80021c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021cc:	20000ab4 	.word	0x20000ab4
  ldr r2, =_sidata
 80021d0:	080af374 	.word	0x080af374
  ldr r2, =_sbss
 80021d4:	20000ab4 	.word	0x20000ab4
  ldr r4, =_ebss
 80021d8:	2000b4f4 	.word	0x2000b4f4

080021dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021dc:	e7fe      	b.n	80021dc <ADC1_2_IRQHandler>
	...

080021e0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08a      	sub	sp, #40	; 0x28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80021e8:	4b27      	ldr	r3, [pc, #156]	; (8002288 <I2Cx_MspInit+0xa8>)
 80021ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ec:	4a26      	ldr	r2, [pc, #152]	; (8002288 <I2Cx_MspInit+0xa8>)
 80021ee:	f043 0302 	orr.w	r3, r3, #2
 80021f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021f4:	4b24      	ldr	r3, [pc, #144]	; (8002288 <I2Cx_MspInit+0xa8>)
 80021f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002200:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002204:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002206:	2312      	movs	r3, #18
 8002208:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800220a:	2301      	movs	r3, #1
 800220c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220e:	2303      	movs	r3, #3
 8002210:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002212:	2304      	movs	r3, #4
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002216:	f107 0314 	add.w	r3, r7, #20
 800221a:	4619      	mov	r1, r3
 800221c:	481b      	ldr	r0, [pc, #108]	; (800228c <I2Cx_MspInit+0xac>)
 800221e:	f000 fefb 	bl	8003018 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002222:	f107 0314 	add.w	r3, r7, #20
 8002226:	4619      	mov	r1, r3
 8002228:	4818      	ldr	r0, [pc, #96]	; (800228c <I2Cx_MspInit+0xac>)
 800222a:	f000 fef5 	bl	8003018 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800222e:	4b16      	ldr	r3, [pc, #88]	; (8002288 <I2Cx_MspInit+0xa8>)
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	4a15      	ldr	r2, [pc, #84]	; (8002288 <I2Cx_MspInit+0xa8>)
 8002234:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002238:	6593      	str	r3, [r2, #88]	; 0x58
 800223a:	4b13      	ldr	r3, [pc, #76]	; (8002288 <I2Cx_MspInit+0xa8>)
 800223c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002246:	4b10      	ldr	r3, [pc, #64]	; (8002288 <I2Cx_MspInit+0xa8>)
 8002248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224a:	4a0f      	ldr	r2, [pc, #60]	; (8002288 <I2Cx_MspInit+0xa8>)
 800224c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002250:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002252:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <I2Cx_MspInit+0xa8>)
 8002254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002256:	4a0c      	ldr	r2, [pc, #48]	; (8002288 <I2Cx_MspInit+0xa8>)
 8002258:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800225c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800225e:	2200      	movs	r2, #0
 8002260:	210f      	movs	r1, #15
 8002262:	2021      	movs	r0, #33	; 0x21
 8002264:	f000 fd37 	bl	8002cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002268:	2021      	movs	r0, #33	; 0x21
 800226a:	f000 fd50 	bl	8002d0e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800226e:	2200      	movs	r2, #0
 8002270:	210f      	movs	r1, #15
 8002272:	2022      	movs	r0, #34	; 0x22
 8002274:	f000 fd2f 	bl	8002cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002278:	2022      	movs	r0, #34	; 0x22
 800227a:	f000 fd48 	bl	8002d0e <HAL_NVIC_EnableIRQ>
}
 800227e:	bf00      	nop
 8002280:	3728      	adds	r7, #40	; 0x28
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000
 800228c:	48000400 	.word	0x48000400

08002290 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <I2Cx_Init+0x54>)
 800229c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a11      	ldr	r2, [pc, #68]	; (80022e8 <I2Cx_Init+0x58>)
 80022a2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff ff89 	bl	80021e0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f001 f97b 	bl	80035ca <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80022d4:	2100      	movs	r1, #0
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f001 ff0a 	bl	80040f0 <HAL_I2CEx_ConfigAnalogFilter>
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40005800 	.word	0x40005800
 80022e8:	00702681 	.word	0x00702681

080022ec <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	; 0x28
 80022f0:	af04      	add	r7, sp, #16
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	4608      	mov	r0, r1
 80022f6:	4611      	mov	r1, r2
 80022f8:	461a      	mov	r2, r3
 80022fa:	4603      	mov	r3, r0
 80022fc:	72fb      	strb	r3, [r7, #11]
 80022fe:	460b      	mov	r3, r1
 8002300:	813b      	strh	r3, [r7, #8]
 8002302:	4613      	mov	r3, r2
 8002304:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800230a:	7afb      	ldrb	r3, [r7, #11]
 800230c:	b299      	uxth	r1, r3
 800230e:	88f8      	ldrh	r0, [r7, #6]
 8002310:	893a      	ldrh	r2, [r7, #8]
 8002312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002316:	9302      	str	r3, [sp, #8]
 8002318:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	6a3b      	ldr	r3, [r7, #32]
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	4603      	mov	r3, r0
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f001 fb24 	bl	8003970 <HAL_I2C_Mem_Read>
 8002328:	4603      	mov	r3, r0
 800232a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800232c:	7dfb      	ldrb	r3, [r7, #23]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d004      	beq.n	800233c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002332:	7afb      	ldrb	r3, [r7, #11]
 8002334:	4619      	mov	r1, r3
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 f832 	bl	80023a0 <I2Cx_Error>
  }
  return status;
 800233c:	7dfb      	ldrb	r3, [r7, #23]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b08a      	sub	sp, #40	; 0x28
 800234a:	af04      	add	r7, sp, #16
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	4608      	mov	r0, r1
 8002350:	4611      	mov	r1, r2
 8002352:	461a      	mov	r2, r3
 8002354:	4603      	mov	r3, r0
 8002356:	72fb      	strb	r3, [r7, #11]
 8002358:	460b      	mov	r3, r1
 800235a:	813b      	strh	r3, [r7, #8]
 800235c:	4613      	mov	r3, r2
 800235e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002364:	7afb      	ldrb	r3, [r7, #11]
 8002366:	b299      	uxth	r1, r3
 8002368:	88f8      	ldrh	r0, [r7, #6]
 800236a:	893a      	ldrh	r2, [r7, #8]
 800236c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002370:	9302      	str	r3, [sp, #8]
 8002372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	4603      	mov	r3, r0
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f001 f9e3 	bl	8003748 <HAL_I2C_Mem_Write>
 8002382:	4603      	mov	r3, r0
 8002384:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002386:	7dfb      	ldrb	r3, [r7, #23]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d004      	beq.n	8002396 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800238c:	7afb      	ldrb	r3, [r7, #11]
 800238e:	4619      	mov	r1, r3
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 f805 	bl	80023a0 <I2Cx_Error>
  }
  return status;
 8002396:	7dfb      	ldrb	r3, [r7, #23]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f001 f99b 	bl	80036e8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff ff6c 	bl	8002290 <I2Cx_Init>
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80023c4:	4802      	ldr	r0, [pc, #8]	; (80023d0 <SENSOR_IO_Init+0x10>)
 80023c6:	f7ff ff63 	bl	8002290 <I2Cx_Init>
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	2000b3dc 	.word	0x2000b3dc

080023d4 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af02      	add	r7, sp, #8
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
 80023de:	460b      	mov	r3, r1
 80023e0:	71bb      	strb	r3, [r7, #6]
 80023e2:	4613      	mov	r3, r2
 80023e4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80023e6:	79bb      	ldrb	r3, [r7, #6]
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	79f9      	ldrb	r1, [r7, #7]
 80023ec:	2301      	movs	r3, #1
 80023ee:	9301      	str	r3, [sp, #4]
 80023f0:	1d7b      	adds	r3, r7, #5
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	2301      	movs	r3, #1
 80023f6:	4803      	ldr	r0, [pc, #12]	; (8002404 <SENSOR_IO_Write+0x30>)
 80023f8:	f7ff ffa5 	bl	8002346 <I2Cx_WriteMultiple>
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	2000b3dc 	.word	0x2000b3dc

08002408 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af02      	add	r7, sp, #8
 800240e:	4603      	mov	r3, r0
 8002410:	460a      	mov	r2, r1
 8002412:	71fb      	strb	r3, [r7, #7]
 8002414:	4613      	mov	r3, r2
 8002416:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800241c:	79bb      	ldrb	r3, [r7, #6]
 800241e:	b29a      	uxth	r2, r3
 8002420:	79f9      	ldrb	r1, [r7, #7]
 8002422:	2301      	movs	r3, #1
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	f107 030f 	add.w	r3, r7, #15
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	2301      	movs	r3, #1
 800242e:	4804      	ldr	r0, [pc, #16]	; (8002440 <SENSOR_IO_Read+0x38>)
 8002430:	f7ff ff5c 	bl	80022ec <I2Cx_ReadMultiple>

  return read_value;
 8002434:	7bfb      	ldrb	r3, [r7, #15]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	2000b3dc 	.word	0x2000b3dc

08002444 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af02      	add	r7, sp, #8
 800244a:	603a      	str	r2, [r7, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	4603      	mov	r3, r0
 8002450:	71fb      	strb	r3, [r7, #7]
 8002452:	460b      	mov	r3, r1
 8002454:	71bb      	strb	r3, [r7, #6]
 8002456:	4613      	mov	r3, r2
 8002458:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800245a:	79bb      	ldrb	r3, [r7, #6]
 800245c:	b29a      	uxth	r2, r3
 800245e:	79f9      	ldrb	r1, [r7, #7]
 8002460:	88bb      	ldrh	r3, [r7, #4]
 8002462:	9301      	str	r3, [sp, #4]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	2301      	movs	r3, #1
 800246a:	4804      	ldr	r0, [pc, #16]	; (800247c <SENSOR_IO_ReadMultiple+0x38>)
 800246c:	f7ff ff3e 	bl	80022ec <I2Cx_ReadMultiple>
 8002470:	4603      	mov	r3, r0
 8002472:	b29b      	uxth	r3, r3
}
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	2000b3dc 	.word	0x2000b3dc

08002480 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800248a:	2300      	movs	r3, #0
 800248c:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800248e:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <BSP_ACCELERO_Init+0x74>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	4798      	blx	r3
 8002494:	4603      	mov	r3, r0
 8002496:	2b6a      	cmp	r3, #106	; 0x6a
 8002498:	d002      	beq.n	80024a0 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	73fb      	strb	r3, [r7, #15]
 800249e:	e024      	b.n	80024ea <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80024a0:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <BSP_ACCELERO_Init+0x78>)
 80024a2:	4a14      	ldr	r2, [pc, #80]	; (80024f4 <BSP_ACCELERO_Init+0x74>)
 80024a4:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_416Hz;
 80024a6:	2360      	movs	r3, #96	; 0x60
 80024a8:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_4G;
 80024ae:	2308      	movs	r3, #8
 80024b0:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80024b2:	2340      	movs	r3, #64	; 0x40
 80024b4:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80024be:	797a      	ldrb	r2, [r7, #5]
 80024c0:	7abb      	ldrb	r3, [r7, #10]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80024c8:	7a3b      	ldrb	r3, [r7, #8]
 80024ca:	f043 0304 	orr.w	r3, r3, #4
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	021b      	lsls	r3, r3, #8
 80024d2:	b21a      	sxth	r2, r3
 80024d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	b21b      	sxth	r3, r3
 80024dc:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <BSP_ACCELERO_Init+0x78>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	89ba      	ldrh	r2, [r7, #12]
 80024e6:	4610      	mov	r0, r2
 80024e8:	4798      	blx	r3
  }  

  return ret;
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000020 	.word	0x20000020
 80024f8:	2000b430 	.word	0x2000b430

080024fc <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8002504:	4b08      	ldr	r3, [pc, #32]	; (8002528 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d009      	beq.n	8002520 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	2b00      	cmp	r3, #0
 8002514:	d004      	beq.n	8002520 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8002516:	4b04      	ldr	r3, [pc, #16]	; (8002528 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	4798      	blx	r3
    }
  }
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	2000b430 	.word	0x2000b430

0800252c <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002536:	2300      	movs	r3, #0
 8002538:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800253a:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <BSP_GYRO_Init+0x7c>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	4798      	blx	r3
 8002540:	4603      	mov	r3, r0
 8002542:	2b6a      	cmp	r3, #106	; 0x6a
 8002544:	d002      	beq.n	800254c <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	73fb      	strb	r3, [r7, #15]
 800254a:	e028      	b.n	800259e <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 800254c:	4b17      	ldr	r3, [pc, #92]	; (80025ac <BSP_GYRO_Init+0x80>)
 800254e:	4a16      	ldr	r2, [pc, #88]	; (80025a8 <BSP_GYRO_Init+0x7c>)
 8002550:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_416Hz;
 8002556:	2360      	movs	r3, #96	; 0x60
 8002558:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 800255e:	2300      	movs	r3, #0
 8002560:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002562:	2340      	movs	r3, #64	; 0x40
 8002564:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 800256a:	230c      	movs	r3, #12
 800256c:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 800256e:	7aba      	ldrb	r2, [r7, #10]
 8002570:	797b      	ldrb	r3, [r7, #5]
 8002572:	4313      	orrs	r3, r2
 8002574:	b2db      	uxtb	r3, r3
 8002576:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002578:	7a3b      	ldrb	r3, [r7, #8]
 800257a:	f043 0304 	orr.w	r3, r3, #4
 800257e:	b2db      	uxtb	r3, r3
 8002580:	021b      	lsls	r3, r3, #8
 8002582:	b21a      	sxth	r2, r3
 8002584:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002588:	4313      	orrs	r3, r2
 800258a:	b21b      	sxth	r3, r3
 800258c:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800258e:	4b07      	ldr	r3, [pc, #28]	; (80025ac <BSP_GYRO_Init+0x80>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	89ba      	ldrh	r2, [r7, #12]
 8002596:	4610      	mov	r0, r2
 8002598:	4798      	blx	r3
    
    ret = GYRO_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800259e:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000054 	.word	0x20000054
 80025ac:	2000b434 	.word	0x2000b434

080025b0 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 80025b8:	4b08      	ldr	r3, [pc, #32]	; (80025dc <BSP_GYRO_GetXYZ+0x2c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d009      	beq.n	80025d4 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <BSP_GYRO_GetXYZ+0x2c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d004      	beq.n	80025d4 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 80025ca:	4b04      	ldr	r3, [pc, #16]	; (80025dc <BSP_GYRO_GetXYZ+0x2c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	4798      	blx	r3
    }
  }
}
 80025d4:	bf00      	nop
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	2000b434 	.word	0x2000b434

080025e0 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80025ea:	2300      	movs	r3, #0
 80025ec:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80025ee:	2110      	movs	r1, #16
 80025f0:	20d4      	movs	r0, #212	; 0xd4
 80025f2:	f7ff ff09 	bl	8002408 <SENSOR_IO_Read>
 80025f6:	4603      	mov	r3, r0
 80025f8:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80025fa:	88fb      	ldrh	r3, [r7, #6]
 80025fc:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80025fe:	7bbb      	ldrb	r3, [r7, #14]
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002606:	7bba      	ldrb	r2, [r7, #14]
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	4313      	orrs	r3, r2
 800260c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800260e:	7bbb      	ldrb	r3, [r7, #14]
 8002610:	461a      	mov	r2, r3
 8002612:	2110      	movs	r1, #16
 8002614:	20d4      	movs	r0, #212	; 0xd4
 8002616:	f7ff fedd 	bl	80023d4 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800261a:	2112      	movs	r1, #18
 800261c:	20d4      	movs	r0, #212	; 0xd4
 800261e:	f7ff fef3 	bl	8002408 <SENSOR_IO_Read>
 8002622:	4603      	mov	r3, r0
 8002624:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	0a1b      	lsrs	r3, r3, #8
 800262a:	b29b      	uxth	r3, r3
 800262c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800262e:	7bbb      	ldrb	r3, [r7, #14]
 8002630:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8002634:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002636:	7bba      	ldrb	r2, [r7, #14]
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	4313      	orrs	r3, r2
 800263c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800263e:	7bbb      	ldrb	r3, [r7, #14]
 8002640:	461a      	mov	r2, r3
 8002642:	2112      	movs	r1, #18
 8002644:	20d4      	movs	r0, #212	; 0xd4
 8002646:	f7ff fec5 	bl	80023d4 <SENSOR_IO_Write>
}
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002658:	2300      	movs	r3, #0
 800265a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800265c:	2110      	movs	r1, #16
 800265e:	20d4      	movs	r0, #212	; 0xd4
 8002660:	f7ff fed2 	bl	8002408 <SENSOR_IO_Read>
 8002664:	4603      	mov	r3, r0
 8002666:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	461a      	mov	r2, r3
 8002674:	2110      	movs	r1, #16
 8002676:	20d4      	movs	r0, #212	; 0xd4
 8002678:	f7ff feac 	bl	80023d4 <SENSOR_IO_Write>
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8002688:	f7ff fe9a 	bl	80023c0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800268c:	210f      	movs	r1, #15
 800268e:	20d4      	movs	r0, #212	; 0xd4
 8002690:	f7ff feba 	bl	8002408 <SENSOR_IO_Read>
 8002694:	4603      	mov	r3, r0
}
 8002696:	4618      	mov	r0, r3
 8002698:	bd80      	pop	{r7, pc}

0800269a <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80026a4:	2300      	movs	r3, #0
 80026a6:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80026a8:	2115      	movs	r1, #21
 80026aa:	20d4      	movs	r0, #212	; 0xd4
 80026ac:	f7ff feac 	bl	8002408 <SENSOR_IO_Read>
 80026b0:	4603      	mov	r3, r0
 80026b2:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	f023 0310 	bic.w	r3, r3, #16
 80026ba:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	f043 0310 	orr.w	r3, r3, #16
 80026c8:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	461a      	mov	r2, r3
 80026ce:	2115      	movs	r1, #21
 80026d0:	20d4      	movs	r0, #212	; 0xd4
 80026d2:	f7ff fe7f 	bl	80023d4 <SENSOR_IO_Write>
}
 80026d6:	bf00      	nop
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80026f6:	2110      	movs	r1, #16
 80026f8:	20d4      	movs	r0, #212	; 0xd4
 80026fa:	f7ff fe85 	bl	8002408 <SENSOR_IO_Read>
 80026fe:	4603      	mov	r3, r0
 8002700:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002702:	f107 0208 	add.w	r2, r7, #8
 8002706:	2306      	movs	r3, #6
 8002708:	2128      	movs	r1, #40	; 0x28
 800270a:	20d4      	movs	r0, #212	; 0xd4
 800270c:	f7ff fe9a 	bl	8002444 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002710:	2300      	movs	r3, #0
 8002712:	77fb      	strb	r3, [r7, #31]
 8002714:	e01c      	b.n	8002750 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002716:	7ffb      	ldrb	r3, [r7, #31]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	3301      	adds	r3, #1
 800271c:	3320      	adds	r3, #32
 800271e:	443b      	add	r3, r7
 8002720:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002724:	b29b      	uxth	r3, r3
 8002726:	021b      	lsls	r3, r3, #8
 8002728:	b29a      	uxth	r2, r3
 800272a:	7ffb      	ldrb	r3, [r7, #31]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	3320      	adds	r3, #32
 8002730:	443b      	add	r3, r7
 8002732:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002736:	b29b      	uxth	r3, r3
 8002738:	4413      	add	r3, r2
 800273a:	b29a      	uxth	r2, r3
 800273c:	7ffb      	ldrb	r3, [r7, #31]
 800273e:	b212      	sxth	r2, r2
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	3320      	adds	r3, #32
 8002744:	443b      	add	r3, r7
 8002746:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800274a:	7ffb      	ldrb	r3, [r7, #31]
 800274c:	3301      	adds	r3, #1
 800274e:	77fb      	strb	r3, [r7, #31]
 8002750:	7ffb      	ldrb	r3, [r7, #31]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d9df      	bls.n	8002716 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002756:	7dfb      	ldrb	r3, [r7, #23]
 8002758:	f003 030c 	and.w	r3, r3, #12
 800275c:	2b0c      	cmp	r3, #12
 800275e:	d829      	bhi.n	80027b4 <LSM6DSL_AccReadXYZ+0xd4>
 8002760:	a201      	add	r2, pc, #4	; (adr r2, 8002768 <LSM6DSL_AccReadXYZ+0x88>)
 8002762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002766:	bf00      	nop
 8002768:	0800279d 	.word	0x0800279d
 800276c:	080027b5 	.word	0x080027b5
 8002770:	080027b5 	.word	0x080027b5
 8002774:	080027b5 	.word	0x080027b5
 8002778:	080027af 	.word	0x080027af
 800277c:	080027b5 	.word	0x080027b5
 8002780:	080027b5 	.word	0x080027b5
 8002784:	080027b5 	.word	0x080027b5
 8002788:	080027a3 	.word	0x080027a3
 800278c:	080027b5 	.word	0x080027b5
 8002790:	080027b5 	.word	0x080027b5
 8002794:	080027b5 	.word	0x080027b5
 8002798:	080027a9 	.word	0x080027a9
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800279c:	4b18      	ldr	r3, [pc, #96]	; (8002800 <LSM6DSL_AccReadXYZ+0x120>)
 800279e:	61bb      	str	r3, [r7, #24]
    break;
 80027a0:	e008      	b.n	80027b4 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80027a2:	4b18      	ldr	r3, [pc, #96]	; (8002804 <LSM6DSL_AccReadXYZ+0x124>)
 80027a4:	61bb      	str	r3, [r7, #24]
    break;
 80027a6:	e005      	b.n	80027b4 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80027a8:	4b17      	ldr	r3, [pc, #92]	; (8002808 <LSM6DSL_AccReadXYZ+0x128>)
 80027aa:	61bb      	str	r3, [r7, #24]
    break;
 80027ac:	e002      	b.n	80027b4 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80027ae:	4b17      	ldr	r3, [pc, #92]	; (800280c <LSM6DSL_AccReadXYZ+0x12c>)
 80027b0:	61bb      	str	r3, [r7, #24]
    break;    
 80027b2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80027b4:	2300      	movs	r3, #0
 80027b6:	77fb      	strb	r3, [r7, #31]
 80027b8:	e01a      	b.n	80027f0 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80027ba:	7ffb      	ldrb	r3, [r7, #31]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	3320      	adds	r3, #32
 80027c0:	443b      	add	r3, r7
 80027c2:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80027c6:	ee07 3a90 	vmov	s15, r3
 80027ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80027d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d6:	7ffb      	ldrb	r3, [r7, #31]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	4413      	add	r3, r2
 80027de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027e2:	ee17 2a90 	vmov	r2, s15
 80027e6:	b212      	sxth	r2, r2
 80027e8:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80027ea:	7ffb      	ldrb	r3, [r7, #31]
 80027ec:	3301      	adds	r3, #1
 80027ee:	77fb      	strb	r3, [r7, #31]
 80027f0:	7ffb      	ldrb	r3, [r7, #31]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d9e1      	bls.n	80027ba <LSM6DSL_AccReadXYZ+0xda>
  }
}
 80027f6:	bf00      	nop
 80027f8:	bf00      	nop
 80027fa:	3720      	adds	r7, #32
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	3d79db23 	.word	0x3d79db23
 8002804:	3df9db23 	.word	0x3df9db23
 8002808:	3e79db23 	.word	0x3e79db23
 800280c:	3ef9db23 	.word	0x3ef9db23

08002810 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800281a:	2300      	movs	r3, #0
 800281c:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800281e:	2111      	movs	r1, #17
 8002820:	20d4      	movs	r0, #212	; 0xd4
 8002822:	f7ff fdf1 	bl	8002408 <SENSOR_IO_Read>
 8002826:	4603      	mov	r3, r0
 8002828:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800282a:	88fb      	ldrh	r3, [r7, #6]
 800282c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800282e:	7bbb      	ldrb	r3, [r7, #14]
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002836:	7bba      	ldrb	r2, [r7, #14]
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	4313      	orrs	r3, r2
 800283c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 800283e:	7bbb      	ldrb	r3, [r7, #14]
 8002840:	461a      	mov	r2, r3
 8002842:	2111      	movs	r1, #17
 8002844:	20d4      	movs	r0, #212	; 0xd4
 8002846:	f7ff fdc5 	bl	80023d4 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800284a:	2112      	movs	r1, #18
 800284c:	20d4      	movs	r0, #212	; 0xd4
 800284e:	f7ff fddb 	bl	8002408 <SENSOR_IO_Read>
 8002852:	4603      	mov	r3, r0
 8002854:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002856:	88fb      	ldrh	r3, [r7, #6]
 8002858:	0a1b      	lsrs	r3, r3, #8
 800285a:	b29b      	uxth	r3, r3
 800285c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800285e:	7bbb      	ldrb	r3, [r7, #14]
 8002860:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8002864:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002866:	7bba      	ldrb	r2, [r7, #14]
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	4313      	orrs	r3, r2
 800286c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800286e:	7bbb      	ldrb	r3, [r7, #14]
 8002870:	461a      	mov	r2, r3
 8002872:	2112      	movs	r1, #18
 8002874:	20d4      	movs	r0, #212	; 0xd4
 8002876:	f7ff fdad 	bl	80023d4 <SENSOR_IO_Write>
}
 800287a:	bf00      	nop
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002888:	2300      	movs	r3, #0
 800288a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800288c:	2111      	movs	r1, #17
 800288e:	20d4      	movs	r0, #212	; 0xd4
 8002890:	f7ff fdba 	bl	8002408 <SENSOR_IO_Read>
 8002894:	4603      	mov	r3, r0
 8002896:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	461a      	mov	r2, r3
 80028a4:	2111      	movs	r1, #17
 80028a6:	20d4      	movs	r0, #212	; 0xd4
 80028a8:	f7ff fd94 	bl	80023d4 <SENSOR_IO_Write>
}
 80028ac:	bf00      	nop
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80028b8:	f7ff fd82 	bl	80023c0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80028bc:	210f      	movs	r1, #15
 80028be:	20d4      	movs	r0, #212	; 0xd4
 80028c0:	f7ff fda2 	bl	8002408 <SENSOR_IO_Read>
 80028c4:	4603      	mov	r3, r0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	bd80      	pop	{r7, pc}

080028ca <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b084      	sub	sp, #16
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	4603      	mov	r3, r0
 80028d2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80028d4:	2300      	movs	r3, #0
 80028d6:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80028d8:	2116      	movs	r1, #22
 80028da:	20d4      	movs	r0, #212	; 0xd4
 80028dc:	f7ff fd94 	bl	8002408 <SENSOR_IO_Read>
 80028e0:	4603      	mov	r3, r0
 80028e2:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028ea:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80028ec:	88fb      	ldrh	r3, [r7, #6]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028f8:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
 80028fc:	461a      	mov	r2, r3
 80028fe:	2116      	movs	r1, #22
 8002900:	20d4      	movs	r0, #212	; 0xd4
 8002902:	f7ff fd67 	bl	80023d4 <SENSOR_IO_Write>
}
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8002918:	2300      	movs	r3, #0
 800291a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002926:	2111      	movs	r1, #17
 8002928:	20d4      	movs	r0, #212	; 0xd4
 800292a:	f7ff fd6d 	bl	8002408 <SENSOR_IO_Read>
 800292e:	4603      	mov	r3, r0
 8002930:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8002932:	f107 0208 	add.w	r2, r7, #8
 8002936:	2306      	movs	r3, #6
 8002938:	2122      	movs	r1, #34	; 0x22
 800293a:	20d4      	movs	r0, #212	; 0xd4
 800293c:	f7ff fd82 	bl	8002444 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002940:	2300      	movs	r3, #0
 8002942:	77fb      	strb	r3, [r7, #31]
 8002944:	e01c      	b.n	8002980 <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002946:	7ffb      	ldrb	r3, [r7, #31]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	3301      	adds	r3, #1
 800294c:	3320      	adds	r3, #32
 800294e:	443b      	add	r3, r7
 8002950:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002954:	b29b      	uxth	r3, r3
 8002956:	021b      	lsls	r3, r3, #8
 8002958:	b29a      	uxth	r2, r3
 800295a:	7ffb      	ldrb	r3, [r7, #31]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	3320      	adds	r3, #32
 8002960:	443b      	add	r3, r7
 8002962:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002966:	b29b      	uxth	r3, r3
 8002968:	4413      	add	r3, r2
 800296a:	b29a      	uxth	r2, r3
 800296c:	7ffb      	ldrb	r3, [r7, #31]
 800296e:	b212      	sxth	r2, r2
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	3320      	adds	r3, #32
 8002974:	443b      	add	r3, r7
 8002976:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800297a:	7ffb      	ldrb	r3, [r7, #31]
 800297c:	3301      	adds	r3, #1
 800297e:	77fb      	strb	r3, [r7, #31]
 8002980:	7ffb      	ldrb	r3, [r7, #31]
 8002982:	2b02      	cmp	r3, #2
 8002984:	d9df      	bls.n	8002946 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8002986:	7dfb      	ldrb	r3, [r7, #23]
 8002988:	f003 030c 	and.w	r3, r3, #12
 800298c:	2b0c      	cmp	r3, #12
 800298e:	d829      	bhi.n	80029e4 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8002990:	a201      	add	r2, pc, #4	; (adr r2, 8002998 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 8002992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002996:	bf00      	nop
 8002998:	080029cd 	.word	0x080029cd
 800299c:	080029e5 	.word	0x080029e5
 80029a0:	080029e5 	.word	0x080029e5
 80029a4:	080029e5 	.word	0x080029e5
 80029a8:	080029d3 	.word	0x080029d3
 80029ac:	080029e5 	.word	0x080029e5
 80029b0:	080029e5 	.word	0x080029e5
 80029b4:	080029e5 	.word	0x080029e5
 80029b8:	080029d9 	.word	0x080029d9
 80029bc:	080029e5 	.word	0x080029e5
 80029c0:	080029e5 	.word	0x080029e5
 80029c4:	080029e5 	.word	0x080029e5
 80029c8:	080029df 	.word	0x080029df
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 80029cc:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 80029ce:	61bb      	str	r3, [r7, #24]
    break;
 80029d0:	e008      	b.n	80029e4 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 80029d2:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 80029d4:	61bb      	str	r3, [r7, #24]
    break;
 80029d6:	e005      	b.n	80029e4 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 80029d8:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 80029da:	61bb      	str	r3, [r7, #24]
    break;
 80029dc:	e002      	b.n	80029e4 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 80029de:	4b15      	ldr	r3, [pc, #84]	; (8002a34 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 80029e0:	61bb      	str	r3, [r7, #24]
    break;    
 80029e2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80029e4:	2300      	movs	r3, #0
 80029e6:	77fb      	strb	r3, [r7, #31]
 80029e8:	e016      	b.n	8002a18 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 80029ea:	7ffb      	ldrb	r3, [r7, #31]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	3320      	adds	r3, #32
 80029f0:	443b      	add	r3, r7
 80029f2:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80029f6:	ee07 3a90 	vmov	s15, r3
 80029fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029fe:	7ffb      	ldrb	r3, [r7, #31]
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	4413      	add	r3, r2
 8002a06:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a0e:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8002a12:	7ffb      	ldrb	r3, [r7, #31]
 8002a14:	3301      	adds	r3, #1
 8002a16:	77fb      	strb	r3, [r7, #31]
 8002a18:	7ffb      	ldrb	r3, [r7, #31]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d9e5      	bls.n	80029ea <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 8002a1e:	bf00      	nop
 8002a20:	bf00      	nop
 8002a22:	3720      	adds	r7, #32
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	410c0000 	.word	0x410c0000
 8002a2c:	418c0000 	.word	0x418c0000
 8002a30:	420c0000 	.word	0x420c0000
 8002a34:	428c0000 	.word	0x428c0000

08002a38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a42:	2003      	movs	r0, #3
 8002a44:	f000 f93c 	bl	8002cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f000 f80d 	bl	8002a68 <HAL_InitTick>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	71fb      	strb	r3, [r7, #7]
 8002a58:	e001      	b.n	8002a5e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a5a:	f7ff f91f 	bl	8001c9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002a74:	4b17      	ldr	r3, [pc, #92]	; (8002ad4 <HAL_InitTick+0x6c>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d023      	beq.n	8002ac4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002a7c:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <HAL_InitTick+0x70>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <HAL_InitTick+0x6c>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	4619      	mov	r1, r3
 8002a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 f949 	bl	8002d2a <HAL_SYSTICK_Config>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10f      	bne.n	8002abe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b0f      	cmp	r3, #15
 8002aa2:	d809      	bhi.n	8002ab8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aac:	f000 f913 	bl	8002cd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ab0:	4a0a      	ldr	r2, [pc, #40]	; (8002adc <HAL_InitTick+0x74>)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	e007      	b.n	8002ac8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
 8002abc:	e004      	b.n	8002ac8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
 8002ac2:	e001      	b.n	8002ac8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	2000008c 	.word	0x2000008c
 8002ad8:	2000001c 	.word	0x2000001c
 8002adc:	20000088 	.word	0x20000088

08002ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_IncTick+0x20>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_IncTick+0x24>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4413      	add	r3, r2
 8002af0:	4a04      	ldr	r2, [pc, #16]	; (8002b04 <HAL_IncTick+0x24>)
 8002af2:	6013      	str	r3, [r2, #0]
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	2000008c 	.word	0x2000008c
 8002b04:	2000b438 	.word	0x2000b438

08002b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b0c:	4b03      	ldr	r3, [pc, #12]	; (8002b1c <HAL_GetTick+0x14>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	2000b438 	.word	0x2000b438

08002b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b30:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <__NVIC_SetPriorityGrouping+0x44>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b52:	4a04      	ldr	r2, [pc, #16]	; (8002b64 <__NVIC_SetPriorityGrouping+0x44>)
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	60d3      	str	r3, [r2, #12]
}
 8002b58:	bf00      	nop
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b6c:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <__NVIC_GetPriorityGrouping+0x18>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	0a1b      	lsrs	r3, r3, #8
 8002b72:	f003 0307 	and.w	r3, r3, #7
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	e000ed00 	.word	0xe000ed00

08002b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	db0b      	blt.n	8002bae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	f003 021f 	and.w	r2, r3, #31
 8002b9c:	4907      	ldr	r1, [pc, #28]	; (8002bbc <__NVIC_EnableIRQ+0x38>)
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8002baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	e000e100 	.word	0xe000e100

08002bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	6039      	str	r1, [r7, #0]
 8002bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	db0a      	blt.n	8002bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	490c      	ldr	r1, [pc, #48]	; (8002c0c <__NVIC_SetPriority+0x4c>)
 8002bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bde:	0112      	lsls	r2, r2, #4
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	440b      	add	r3, r1
 8002be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002be8:	e00a      	b.n	8002c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	4908      	ldr	r1, [pc, #32]	; (8002c10 <__NVIC_SetPriority+0x50>)
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	3b04      	subs	r3, #4
 8002bf8:	0112      	lsls	r2, r2, #4
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	761a      	strb	r2, [r3, #24]
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	e000e100 	.word	0xe000e100
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b089      	sub	sp, #36	; 0x24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f1c3 0307 	rsb	r3, r3, #7
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	bf28      	it	cs
 8002c32:	2304      	movcs	r3, #4
 8002c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	2b06      	cmp	r3, #6
 8002c3c:	d902      	bls.n	8002c44 <NVIC_EncodePriority+0x30>
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	3b03      	subs	r3, #3
 8002c42:	e000      	b.n	8002c46 <NVIC_EncodePriority+0x32>
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c48:	f04f 32ff 	mov.w	r2, #4294967295
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43da      	mvns	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	401a      	ands	r2, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	43d9      	mvns	r1, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c6c:	4313      	orrs	r3, r2
         );
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3724      	adds	r7, #36	; 0x24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
	...

08002c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c8c:	d301      	bcc.n	8002c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e00f      	b.n	8002cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c92:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <SysTick_Config+0x40>)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c9a:	210f      	movs	r1, #15
 8002c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca0:	f7ff ff8e 	bl	8002bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ca4:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <SysTick_Config+0x40>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002caa:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <SysTick_Config+0x40>)
 8002cac:	2207      	movs	r2, #7
 8002cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	e000e010 	.word	0xe000e010

08002cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff ff29 	bl	8002b20 <__NVIC_SetPriorityGrouping>
}
 8002cce:	bf00      	nop
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b086      	sub	sp, #24
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	4603      	mov	r3, r0
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
 8002ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ce8:	f7ff ff3e 	bl	8002b68 <__NVIC_GetPriorityGrouping>
 8002cec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	6978      	ldr	r0, [r7, #20]
 8002cf4:	f7ff ff8e 	bl	8002c14 <NVIC_EncodePriority>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cfe:	4611      	mov	r1, r2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff ff5d 	bl	8002bc0 <__NVIC_SetPriority>
}
 8002d06:	bf00      	nop
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	4603      	mov	r3, r0
 8002d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff ff31 	bl	8002b84 <__NVIC_EnableIRQ>
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff ffa2 	bl	8002c7c <SysTick_Config>
 8002d38:	4603      	mov	r3, r0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e054      	b.n	8002e00 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	7f5b      	ldrb	r3, [r3, #29]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d105      	bne.n	8002d6c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7fe ffbc 	bl	8001ce4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	791b      	ldrb	r3, [r3, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10c      	bne.n	8002d94 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a22      	ldr	r2, [pc, #136]	; (8002e08 <HAL_CRC_Init+0xc4>)
 8002d80:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0218 	bic.w	r2, r2, #24
 8002d90:	609a      	str	r2, [r3, #8]
 8002d92:	e00c      	b.n	8002dae <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6899      	ldr	r1, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f834 	bl	8002e0c <HAL_CRCEx_Polynomial_Set>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e028      	b.n	8002e00 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	795b      	ldrb	r3, [r3, #5]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d105      	bne.n	8002dc2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f04f 32ff 	mov.w	r2, #4294967295
 8002dbe:	611a      	str	r2, [r3, #16]
 8002dc0:	e004      	b.n	8002dcc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6912      	ldr	r2, [r2, #16]
 8002dca:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699a      	ldr	r2, [r3, #24]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	04c11db7 	.word	0x04c11db7

08002e0c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002e1c:	231f      	movs	r3, #31
 8002e1e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002e20:	bf00      	nop
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1e5a      	subs	r2, r3, #1
 8002e26:	613a      	str	r2, [r7, #16]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d009      	beq.n	8002e40 <HAL_CRCEx_Polynomial_Set+0x34>
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	f003 031f 	and.w	r3, r3, #31
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	fa22 f303 	lsr.w	r3, r2, r3
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f0      	beq.n	8002e22 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b18      	cmp	r3, #24
 8002e44:	d846      	bhi.n	8002ed4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002e46:	a201      	add	r2, pc, #4	; (adr r2, 8002e4c <HAL_CRCEx_Polynomial_Set+0x40>)
 8002e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4c:	08002edb 	.word	0x08002edb
 8002e50:	08002ed5 	.word	0x08002ed5
 8002e54:	08002ed5 	.word	0x08002ed5
 8002e58:	08002ed5 	.word	0x08002ed5
 8002e5c:	08002ed5 	.word	0x08002ed5
 8002e60:	08002ed5 	.word	0x08002ed5
 8002e64:	08002ed5 	.word	0x08002ed5
 8002e68:	08002ed5 	.word	0x08002ed5
 8002e6c:	08002ec9 	.word	0x08002ec9
 8002e70:	08002ed5 	.word	0x08002ed5
 8002e74:	08002ed5 	.word	0x08002ed5
 8002e78:	08002ed5 	.word	0x08002ed5
 8002e7c:	08002ed5 	.word	0x08002ed5
 8002e80:	08002ed5 	.word	0x08002ed5
 8002e84:	08002ed5 	.word	0x08002ed5
 8002e88:	08002ed5 	.word	0x08002ed5
 8002e8c:	08002ebd 	.word	0x08002ebd
 8002e90:	08002ed5 	.word	0x08002ed5
 8002e94:	08002ed5 	.word	0x08002ed5
 8002e98:	08002ed5 	.word	0x08002ed5
 8002e9c:	08002ed5 	.word	0x08002ed5
 8002ea0:	08002ed5 	.word	0x08002ed5
 8002ea4:	08002ed5 	.word	0x08002ed5
 8002ea8:	08002ed5 	.word	0x08002ed5
 8002eac:	08002eb1 	.word	0x08002eb1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	2b06      	cmp	r3, #6
 8002eb4:	d913      	bls.n	8002ede <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002eba:	e010      	b.n	8002ede <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	2b07      	cmp	r3, #7
 8002ec0:	d90f      	bls.n	8002ee2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002ec6:	e00c      	b.n	8002ee2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	2b0f      	cmp	r3, #15
 8002ecc:	d90b      	bls.n	8002ee6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002ed2:	e008      	b.n	8002ee6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ed8:	e006      	b.n	8002ee8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002eda:	bf00      	nop
 8002edc:	e004      	b.n	8002ee8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002ede:	bf00      	nop
 8002ee0:	e002      	b.n	8002ee8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002ee2:	bf00      	nop
 8002ee4:	e000      	b.n	8002ee8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002ee6:	bf00      	nop
  }
  if (status == HAL_OK)
 8002ee8:	7dfb      	ldrb	r3, [r7, #23]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10d      	bne.n	8002f0a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f023 0118 	bic.w	r1, r3, #24
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	371c      	adds	r7, #28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d008      	beq.n	8002f42 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2204      	movs	r2, #4
 8002f34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e022      	b.n	8002f88 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 020e 	bic.w	r2, r2, #14
 8002f50:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0201 	bic.w	r2, r2, #1
 8002f60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	f003 021c 	and.w	r2, r3, #28
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	2101      	movs	r1, #1
 8002f70:	fa01 f202 	lsl.w	r2, r1, r2
 8002f74:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d005      	beq.n	8002fb8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2204      	movs	r2, #4
 8002fb0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	73fb      	strb	r3, [r7, #15]
 8002fb6:	e029      	b.n	800300c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 020e 	bic.w	r2, r2, #14
 8002fc6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0201 	bic.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fdc:	f003 021c 	and.w	r2, r3, #28
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8002fea:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	4798      	blx	r3
    }
  }
  return status;
 800300c:	7bfb      	ldrb	r3, [r7, #15]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003018:	b480      	push	{r7}
 800301a:	b087      	sub	sp, #28
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003022:	2300      	movs	r3, #0
 8003024:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003026:	e17f      	b.n	8003328 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	2101      	movs	r1, #1
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	fa01 f303 	lsl.w	r3, r1, r3
 8003034:	4013      	ands	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 8171 	beq.w	8003322 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 0303 	and.w	r3, r3, #3
 8003048:	2b01      	cmp	r3, #1
 800304a:	d005      	beq.n	8003058 <HAL_GPIO_Init+0x40>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 0303 	and.w	r3, r3, #3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d130      	bne.n	80030ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	2203      	movs	r2, #3
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	4013      	ands	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800308e:	2201      	movs	r2, #1
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43db      	mvns	r3, r3
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4013      	ands	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	091b      	lsrs	r3, r3, #4
 80030a4:	f003 0201 	and.w	r2, r3, #1
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d118      	bne.n	80030f8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80030cc:	2201      	movs	r2, #1
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	43db      	mvns	r3, r3
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4013      	ands	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	08db      	lsrs	r3, r3, #3
 80030e2:	f003 0201 	and.w	r2, r3, #1
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	2b03      	cmp	r3, #3
 8003102:	d017      	beq.n	8003134 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	2203      	movs	r2, #3
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4013      	ands	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 0303 	and.w	r3, r3, #3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d123      	bne.n	8003188 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	08da      	lsrs	r2, r3, #3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3208      	adds	r2, #8
 8003148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800314c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	220f      	movs	r2, #15
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4013      	ands	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4313      	orrs	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	08da      	lsrs	r2, r3, #3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3208      	adds	r2, #8
 8003182:	6939      	ldr	r1, [r7, #16]
 8003184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	2203      	movs	r2, #3
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4013      	ands	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 0203 	and.w	r2, r3, #3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 80ac 	beq.w	8003322 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ca:	4b5f      	ldr	r3, [pc, #380]	; (8003348 <HAL_GPIO_Init+0x330>)
 80031cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ce:	4a5e      	ldr	r2, [pc, #376]	; (8003348 <HAL_GPIO_Init+0x330>)
 80031d0:	f043 0301 	orr.w	r3, r3, #1
 80031d4:	6613      	str	r3, [r2, #96]	; 0x60
 80031d6:	4b5c      	ldr	r3, [pc, #368]	; (8003348 <HAL_GPIO_Init+0x330>)
 80031d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	60bb      	str	r3, [r7, #8]
 80031e0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031e2:	4a5a      	ldr	r2, [pc, #360]	; (800334c <HAL_GPIO_Init+0x334>)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	089b      	lsrs	r3, r3, #2
 80031e8:	3302      	adds	r3, #2
 80031ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	220f      	movs	r2, #15
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43db      	mvns	r3, r3
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	4013      	ands	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800320c:	d025      	beq.n	800325a <HAL_GPIO_Init+0x242>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a4f      	ldr	r2, [pc, #316]	; (8003350 <HAL_GPIO_Init+0x338>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d01f      	beq.n	8003256 <HAL_GPIO_Init+0x23e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a4e      	ldr	r2, [pc, #312]	; (8003354 <HAL_GPIO_Init+0x33c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d019      	beq.n	8003252 <HAL_GPIO_Init+0x23a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a4d      	ldr	r2, [pc, #308]	; (8003358 <HAL_GPIO_Init+0x340>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d013      	beq.n	800324e <HAL_GPIO_Init+0x236>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a4c      	ldr	r2, [pc, #304]	; (800335c <HAL_GPIO_Init+0x344>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00d      	beq.n	800324a <HAL_GPIO_Init+0x232>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a4b      	ldr	r2, [pc, #300]	; (8003360 <HAL_GPIO_Init+0x348>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d007      	beq.n	8003246 <HAL_GPIO_Init+0x22e>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a4a      	ldr	r2, [pc, #296]	; (8003364 <HAL_GPIO_Init+0x34c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d101      	bne.n	8003242 <HAL_GPIO_Init+0x22a>
 800323e:	2306      	movs	r3, #6
 8003240:	e00c      	b.n	800325c <HAL_GPIO_Init+0x244>
 8003242:	2307      	movs	r3, #7
 8003244:	e00a      	b.n	800325c <HAL_GPIO_Init+0x244>
 8003246:	2305      	movs	r3, #5
 8003248:	e008      	b.n	800325c <HAL_GPIO_Init+0x244>
 800324a:	2304      	movs	r3, #4
 800324c:	e006      	b.n	800325c <HAL_GPIO_Init+0x244>
 800324e:	2303      	movs	r3, #3
 8003250:	e004      	b.n	800325c <HAL_GPIO_Init+0x244>
 8003252:	2302      	movs	r3, #2
 8003254:	e002      	b.n	800325c <HAL_GPIO_Init+0x244>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <HAL_GPIO_Init+0x244>
 800325a:	2300      	movs	r3, #0
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	f002 0203 	and.w	r2, r2, #3
 8003262:	0092      	lsls	r2, r2, #2
 8003264:	4093      	lsls	r3, r2
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800326c:	4937      	ldr	r1, [pc, #220]	; (800334c <HAL_GPIO_Init+0x334>)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	089b      	lsrs	r3, r3, #2
 8003272:	3302      	adds	r3, #2
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800327a:	4b3b      	ldr	r3, [pc, #236]	; (8003368 <HAL_GPIO_Init+0x350>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	43db      	mvns	r3, r3
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	4013      	ands	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800329e:	4a32      	ldr	r2, [pc, #200]	; (8003368 <HAL_GPIO_Init+0x350>)
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032a4:	4b30      	ldr	r3, [pc, #192]	; (8003368 <HAL_GPIO_Init+0x350>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	43db      	mvns	r3, r3
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	4013      	ands	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d003      	beq.n	80032c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032c8:	4a27      	ldr	r2, [pc, #156]	; (8003368 <HAL_GPIO_Init+0x350>)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80032ce:	4b26      	ldr	r3, [pc, #152]	; (8003368 <HAL_GPIO_Init+0x350>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	43db      	mvns	r3, r3
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	4013      	ands	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032f2:	4a1d      	ldr	r2, [pc, #116]	; (8003368 <HAL_GPIO_Init+0x350>)
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80032f8:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <HAL_GPIO_Init+0x350>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	43db      	mvns	r3, r3
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4013      	ands	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800331c:	4a12      	ldr	r2, [pc, #72]	; (8003368 <HAL_GPIO_Init+0x350>)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	3301      	adds	r3, #1
 8003326:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	fa22 f303 	lsr.w	r3, r2, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	f47f ae78 	bne.w	8003028 <HAL_GPIO_Init+0x10>
  }
}
 8003338:	bf00      	nop
 800333a:	bf00      	nop
 800333c:	371c      	adds	r7, #28
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40021000 	.word	0x40021000
 800334c:	40010000 	.word	0x40010000
 8003350:	48000400 	.word	0x48000400
 8003354:	48000800 	.word	0x48000800
 8003358:	48000c00 	.word	0x48000c00
 800335c:	48001000 	.word	0x48001000
 8003360:	48001400 	.word	0x48001400
 8003364:	48001800 	.word	0x48001800
 8003368:	40010400 	.word	0x40010400

0800336c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800337a:	e0cd      	b.n	8003518 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800337c:	2201      	movs	r2, #1
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	4013      	ands	r3, r2
 8003388:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80c0 	beq.w	8003512 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003392:	4a68      	ldr	r2, [pc, #416]	; (8003534 <HAL_GPIO_DeInit+0x1c8>)
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	089b      	lsrs	r3, r3, #2
 8003398:	3302      	adds	r3, #2
 800339a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800339e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	220f      	movs	r2, #15
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4013      	ands	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033ba:	d025      	beq.n	8003408 <HAL_GPIO_DeInit+0x9c>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a5e      	ldr	r2, [pc, #376]	; (8003538 <HAL_GPIO_DeInit+0x1cc>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d01f      	beq.n	8003404 <HAL_GPIO_DeInit+0x98>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a5d      	ldr	r2, [pc, #372]	; (800353c <HAL_GPIO_DeInit+0x1d0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d019      	beq.n	8003400 <HAL_GPIO_DeInit+0x94>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a5c      	ldr	r2, [pc, #368]	; (8003540 <HAL_GPIO_DeInit+0x1d4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d013      	beq.n	80033fc <HAL_GPIO_DeInit+0x90>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a5b      	ldr	r2, [pc, #364]	; (8003544 <HAL_GPIO_DeInit+0x1d8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00d      	beq.n	80033f8 <HAL_GPIO_DeInit+0x8c>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a5a      	ldr	r2, [pc, #360]	; (8003548 <HAL_GPIO_DeInit+0x1dc>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d007      	beq.n	80033f4 <HAL_GPIO_DeInit+0x88>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a59      	ldr	r2, [pc, #356]	; (800354c <HAL_GPIO_DeInit+0x1e0>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d101      	bne.n	80033f0 <HAL_GPIO_DeInit+0x84>
 80033ec:	2306      	movs	r3, #6
 80033ee:	e00c      	b.n	800340a <HAL_GPIO_DeInit+0x9e>
 80033f0:	2307      	movs	r3, #7
 80033f2:	e00a      	b.n	800340a <HAL_GPIO_DeInit+0x9e>
 80033f4:	2305      	movs	r3, #5
 80033f6:	e008      	b.n	800340a <HAL_GPIO_DeInit+0x9e>
 80033f8:	2304      	movs	r3, #4
 80033fa:	e006      	b.n	800340a <HAL_GPIO_DeInit+0x9e>
 80033fc:	2303      	movs	r3, #3
 80033fe:	e004      	b.n	800340a <HAL_GPIO_DeInit+0x9e>
 8003400:	2302      	movs	r3, #2
 8003402:	e002      	b.n	800340a <HAL_GPIO_DeInit+0x9e>
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <HAL_GPIO_DeInit+0x9e>
 8003408:	2300      	movs	r3, #0
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	f002 0203 	and.w	r2, r2, #3
 8003410:	0092      	lsls	r2, r2, #2
 8003412:	4093      	lsls	r3, r2
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	429a      	cmp	r2, r3
 8003418:	d132      	bne.n	8003480 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800341a:	4b4d      	ldr	r3, [pc, #308]	; (8003550 <HAL_GPIO_DeInit+0x1e4>)
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	43db      	mvns	r3, r3
 8003422:	494b      	ldr	r1, [pc, #300]	; (8003550 <HAL_GPIO_DeInit+0x1e4>)
 8003424:	4013      	ands	r3, r2
 8003426:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003428:	4b49      	ldr	r3, [pc, #292]	; (8003550 <HAL_GPIO_DeInit+0x1e4>)
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	43db      	mvns	r3, r3
 8003430:	4947      	ldr	r1, [pc, #284]	; (8003550 <HAL_GPIO_DeInit+0x1e4>)
 8003432:	4013      	ands	r3, r2
 8003434:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003436:	4b46      	ldr	r3, [pc, #280]	; (8003550 <HAL_GPIO_DeInit+0x1e4>)
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	43db      	mvns	r3, r3
 800343e:	4944      	ldr	r1, [pc, #272]	; (8003550 <HAL_GPIO_DeInit+0x1e4>)
 8003440:	4013      	ands	r3, r2
 8003442:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003444:	4b42      	ldr	r3, [pc, #264]	; (8003550 <HAL_GPIO_DeInit+0x1e4>)
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	43db      	mvns	r3, r3
 800344c:	4940      	ldr	r1, [pc, #256]	; (8003550 <HAL_GPIO_DeInit+0x1e4>)
 800344e:	4013      	ands	r3, r2
 8003450:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	220f      	movs	r2, #15
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003462:	4a34      	ldr	r2, [pc, #208]	; (8003534 <HAL_GPIO_DeInit+0x1c8>)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	089b      	lsrs	r3, r3, #2
 8003468:	3302      	adds	r3, #2
 800346a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	43da      	mvns	r2, r3
 8003472:	4830      	ldr	r0, [pc, #192]	; (8003534 <HAL_GPIO_DeInit+0x1c8>)
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	089b      	lsrs	r3, r3, #2
 8003478:	400a      	ands	r2, r1
 800347a:	3302      	adds	r3, #2
 800347c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	2103      	movs	r1, #3
 800348a:	fa01 f303 	lsl.w	r3, r1, r3
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	08da      	lsrs	r2, r3, #3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3208      	adds	r2, #8
 800349c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	220f      	movs	r2, #15
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43db      	mvns	r3, r3
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	08d2      	lsrs	r2, r2, #3
 80034b4:	4019      	ands	r1, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3208      	adds	r2, #8
 80034ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	2103      	movs	r1, #3
 80034c8:	fa01 f303 	lsl.w	r3, r1, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	401a      	ands	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	2101      	movs	r1, #1
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	fa01 f303 	lsl.w	r3, r1, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	401a      	ands	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	2103      	movs	r1, #3
 80034f2:	fa01 f303 	lsl.w	r3, r1, r3
 80034f6:	43db      	mvns	r3, r3
 80034f8:	401a      	ands	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003502:	2101      	movs	r1, #1
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	fa01 f303 	lsl.w	r3, r1, r3
 800350a:	43db      	mvns	r3, r3
 800350c:	401a      	ands	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	3301      	adds	r3, #1
 8003516:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	f47f af2b 	bne.w	800337c <HAL_GPIO_DeInit+0x10>
  }
}
 8003526:	bf00      	nop
 8003528:	bf00      	nop
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	40010000 	.word	0x40010000
 8003538:	48000400 	.word	0x48000400
 800353c:	48000800 	.word	0x48000800
 8003540:	48000c00 	.word	0x48000c00
 8003544:	48001000 	.word	0x48001000
 8003548:	48001400 	.word	0x48001400
 800354c:	48001800 	.word	0x48001800
 8003550:	40010400 	.word	0x40010400

08003554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	807b      	strh	r3, [r7, #2]
 8003560:	4613      	mov	r3, r2
 8003562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003564:	787b      	ldrb	r3, [r7, #1]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800356a:	887a      	ldrh	r2, [r7, #2]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003570:	e002      	b.n	8003578 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003572:	887a      	ldrh	r2, [r7, #2]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800358e:	4b08      	ldr	r3, [pc, #32]	; (80035b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	88fb      	ldrh	r3, [r7, #6]
 8003594:	4013      	ands	r3, r2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d006      	beq.n	80035a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800359a:	4a05      	ldr	r2, [pc, #20]	; (80035b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 f806 	bl	80035b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80035a8:	bf00      	nop
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40010400 	.word	0x40010400

080035b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e081      	b.n	80036e0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d106      	bne.n	80035f6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7fe fb97 	bl	8001d24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2224      	movs	r2, #36	; 0x24
 80035fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0201 	bic.w	r2, r2, #1
 800360c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800361a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800362a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d107      	bne.n	8003644 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003640:	609a      	str	r2, [r3, #8]
 8003642:	e006      	b.n	8003652 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003650:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d104      	bne.n	8003664 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003662:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003676:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003686:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69d9      	ldr	r1, [r3, #28]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1a      	ldr	r2, [r3, #32]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0201 	orr.w	r2, r2, #1
 80036c0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e021      	b.n	800373e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2224      	movs	r2, #36	; 0x24
 80036fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0201 	bic.w	r2, r2, #1
 8003710:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fe fb64 	bl	8001de0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af02      	add	r7, sp, #8
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	4608      	mov	r0, r1
 8003752:	4611      	mov	r1, r2
 8003754:	461a      	mov	r2, r3
 8003756:	4603      	mov	r3, r0
 8003758:	817b      	strh	r3, [r7, #10]
 800375a:	460b      	mov	r3, r1
 800375c:	813b      	strh	r3, [r7, #8]
 800375e:	4613      	mov	r3, r2
 8003760:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b20      	cmp	r3, #32
 800376c:	f040 80f9 	bne.w	8003962 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <HAL_I2C_Mem_Write+0x34>
 8003776:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003778:	2b00      	cmp	r3, #0
 800377a:	d105      	bne.n	8003788 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003782:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0ed      	b.n	8003964 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_I2C_Mem_Write+0x4e>
 8003792:	2302      	movs	r3, #2
 8003794:	e0e6      	b.n	8003964 <HAL_I2C_Mem_Write+0x21c>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800379e:	f7ff f9b3 	bl	8002b08 <HAL_GetTick>
 80037a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	2319      	movs	r3, #25
 80037aa:	2201      	movs	r2, #1
 80037ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 fac3 	bl	8003d3c <I2C_WaitOnFlagUntilTimeout>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0d1      	b.n	8003964 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2221      	movs	r2, #33	; 0x21
 80037c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2240      	movs	r2, #64	; 0x40
 80037cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a3a      	ldr	r2, [r7, #32]
 80037da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037e8:	88f8      	ldrh	r0, [r7, #6]
 80037ea:	893a      	ldrh	r2, [r7, #8]
 80037ec:	8979      	ldrh	r1, [r7, #10]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	9301      	str	r3, [sp, #4]
 80037f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	4603      	mov	r3, r0
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 f9d3 	bl	8003ba4 <I2C_RequestMemoryWrite>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0a9      	b.n	8003964 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	2bff      	cmp	r3, #255	; 0xff
 8003818:	d90e      	bls.n	8003838 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	22ff      	movs	r2, #255	; 0xff
 800381e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003824:	b2da      	uxtb	r2, r3
 8003826:	8979      	ldrh	r1, [r7, #10]
 8003828:	2300      	movs	r3, #0
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 fc2b 	bl	800408c <I2C_TransferConfig>
 8003836:	e00f      	b.n	8003858 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003846:	b2da      	uxtb	r2, r3
 8003848:	8979      	ldrh	r1, [r7, #10]
 800384a:	2300      	movs	r3, #0
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 fc1a 	bl	800408c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 faad 	bl	8003dbc <I2C_WaitOnTXISFlagUntilTimeout>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e07b      	b.n	8003964 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	781a      	ldrb	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003894:	3b01      	subs	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d034      	beq.n	8003910 <HAL_I2C_Mem_Write+0x1c8>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d130      	bne.n	8003910 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b4:	2200      	movs	r2, #0
 80038b6:	2180      	movs	r1, #128	; 0x80
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 fa3f 	bl	8003d3c <I2C_WaitOnFlagUntilTimeout>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e04d      	b.n	8003964 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2bff      	cmp	r3, #255	; 0xff
 80038d0:	d90e      	bls.n	80038f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	22ff      	movs	r2, #255	; 0xff
 80038d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	8979      	ldrh	r1, [r7, #10]
 80038e0:	2300      	movs	r3, #0
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 fbcf 	bl	800408c <I2C_TransferConfig>
 80038ee:	e00f      	b.n	8003910 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	8979      	ldrh	r1, [r7, #10]
 8003902:	2300      	movs	r3, #0
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 fbbe 	bl	800408c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003914:	b29b      	uxth	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d19e      	bne.n	8003858 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 fa8c 	bl	8003e3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e01a      	b.n	8003964 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2220      	movs	r2, #32
 8003934:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6859      	ldr	r1, [r3, #4]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	4b0a      	ldr	r3, [pc, #40]	; (800396c <HAL_I2C_Mem_Write+0x224>)
 8003942:	400b      	ands	r3, r1
 8003944:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2220      	movs	r2, #32
 800394a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	e000      	b.n	8003964 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003962:	2302      	movs	r3, #2
  }
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	fe00e800 	.word	0xfe00e800

08003970 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af02      	add	r7, sp, #8
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	4608      	mov	r0, r1
 800397a:	4611      	mov	r1, r2
 800397c:	461a      	mov	r2, r3
 800397e:	4603      	mov	r3, r0
 8003980:	817b      	strh	r3, [r7, #10]
 8003982:	460b      	mov	r3, r1
 8003984:	813b      	strh	r3, [r7, #8]
 8003986:	4613      	mov	r3, r2
 8003988:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b20      	cmp	r3, #32
 8003994:	f040 80fd 	bne.w	8003b92 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d002      	beq.n	80039a4 <HAL_I2C_Mem_Read+0x34>
 800399e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d105      	bne.n	80039b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e0f1      	b.n	8003b94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_I2C_Mem_Read+0x4e>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e0ea      	b.n	8003b94 <HAL_I2C_Mem_Read+0x224>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039c6:	f7ff f89f 	bl	8002b08 <HAL_GetTick>
 80039ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	2319      	movs	r3, #25
 80039d2:	2201      	movs	r2, #1
 80039d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 f9af 	bl	8003d3c <I2C_WaitOnFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0d5      	b.n	8003b94 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2222      	movs	r2, #34	; 0x22
 80039ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2240      	movs	r2, #64	; 0x40
 80039f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6a3a      	ldr	r2, [r7, #32]
 8003a02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a10:	88f8      	ldrh	r0, [r7, #6]
 8003a12:	893a      	ldrh	r2, [r7, #8]
 8003a14:	8979      	ldrh	r1, [r7, #10]
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	9301      	str	r3, [sp, #4]
 8003a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	4603      	mov	r3, r0
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 f913 	bl	8003c4c <I2C_RequestMemoryRead>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e0ad      	b.n	8003b94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2bff      	cmp	r3, #255	; 0xff
 8003a40:	d90e      	bls.n	8003a60 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	22ff      	movs	r2, #255	; 0xff
 8003a46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	8979      	ldrh	r1, [r7, #10]
 8003a50:	4b52      	ldr	r3, [pc, #328]	; (8003b9c <HAL_I2C_Mem_Read+0x22c>)
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 fb17 	bl	800408c <I2C_TransferConfig>
 8003a5e:	e00f      	b.n	8003a80 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	8979      	ldrh	r1, [r7, #10]
 8003a72:	4b4a      	ldr	r3, [pc, #296]	; (8003b9c <HAL_I2C_Mem_Read+0x22c>)
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 fb06 	bl	800408c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a86:	2200      	movs	r2, #0
 8003a88:	2104      	movs	r1, #4
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 f956 	bl	8003d3c <I2C_WaitOnFlagUntilTimeout>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e07c      	b.n	8003b94 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d034      	beq.n	8003b40 <HAL_I2C_Mem_Read+0x1d0>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d130      	bne.n	8003b40 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2180      	movs	r1, #128	; 0x80
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 f927 	bl	8003d3c <I2C_WaitOnFlagUntilTimeout>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e04d      	b.n	8003b94 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2bff      	cmp	r3, #255	; 0xff
 8003b00:	d90e      	bls.n	8003b20 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	22ff      	movs	r2, #255	; 0xff
 8003b06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	8979      	ldrh	r1, [r7, #10]
 8003b10:	2300      	movs	r3, #0
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 fab7 	bl	800408c <I2C_TransferConfig>
 8003b1e:	e00f      	b.n	8003b40 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	8979      	ldrh	r1, [r7, #10]
 8003b32:	2300      	movs	r3, #0
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 faa6 	bl	800408c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d19a      	bne.n	8003a80 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f974 	bl	8003e3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e01a      	b.n	8003b94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2220      	movs	r2, #32
 8003b64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6859      	ldr	r1, [r3, #4]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <HAL_I2C_Mem_Read+0x230>)
 8003b72:	400b      	ands	r3, r1
 8003b74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	e000      	b.n	8003b94 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003b92:	2302      	movs	r3, #2
  }
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	80002400 	.word	0x80002400
 8003ba0:	fe00e800 	.word	0xfe00e800

08003ba4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	4608      	mov	r0, r1
 8003bae:	4611      	mov	r1, r2
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	817b      	strh	r3, [r7, #10]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	813b      	strh	r3, [r7, #8]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003bbe:	88fb      	ldrh	r3, [r7, #6]
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	8979      	ldrh	r1, [r7, #10]
 8003bc4:	4b20      	ldr	r3, [pc, #128]	; (8003c48 <I2C_RequestMemoryWrite+0xa4>)
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 fa5d 	bl	800408c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bd2:	69fa      	ldr	r2, [r7, #28]
 8003bd4:	69b9      	ldr	r1, [r7, #24]
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 f8f0 	bl	8003dbc <I2C_WaitOnTXISFlagUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e02c      	b.n	8003c40 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003be6:	88fb      	ldrh	r3, [r7, #6]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d105      	bne.n	8003bf8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bec:	893b      	ldrh	r3, [r7, #8]
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	629a      	str	r2, [r3, #40]	; 0x28
 8003bf6:	e015      	b.n	8003c24 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003bf8:	893b      	ldrh	r3, [r7, #8]
 8003bfa:	0a1b      	lsrs	r3, r3, #8
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c06:	69fa      	ldr	r2, [r7, #28]
 8003c08:	69b9      	ldr	r1, [r7, #24]
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 f8d6 	bl	8003dbc <I2C_WaitOnTXISFlagUntilTimeout>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e012      	b.n	8003c40 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c1a:	893b      	ldrh	r3, [r7, #8]
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2180      	movs	r1, #128	; 0x80
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 f884 	bl	8003d3c <I2C_WaitOnFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	80002000 	.word	0x80002000

08003c4c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af02      	add	r7, sp, #8
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	4608      	mov	r0, r1
 8003c56:	4611      	mov	r1, r2
 8003c58:	461a      	mov	r2, r3
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	817b      	strh	r3, [r7, #10]
 8003c5e:	460b      	mov	r3, r1
 8003c60:	813b      	strh	r3, [r7, #8]
 8003c62:	4613      	mov	r3, r2
 8003c64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003c66:	88fb      	ldrh	r3, [r7, #6]
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	8979      	ldrh	r1, [r7, #10]
 8003c6c:	4b20      	ldr	r3, [pc, #128]	; (8003cf0 <I2C_RequestMemoryRead+0xa4>)
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	2300      	movs	r3, #0
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 fa0a 	bl	800408c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c78:	69fa      	ldr	r2, [r7, #28]
 8003c7a:	69b9      	ldr	r1, [r7, #24]
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 f89d 	bl	8003dbc <I2C_WaitOnTXISFlagUntilTimeout>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e02c      	b.n	8003ce6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c8c:	88fb      	ldrh	r3, [r7, #6]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d105      	bne.n	8003c9e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c92:	893b      	ldrh	r3, [r7, #8]
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c9c:	e015      	b.n	8003cca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c9e:	893b      	ldrh	r3, [r7, #8]
 8003ca0:	0a1b      	lsrs	r3, r3, #8
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cac:	69fa      	ldr	r2, [r7, #28]
 8003cae:	69b9      	ldr	r1, [r7, #24]
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 f883 	bl	8003dbc <I2C_WaitOnTXISFlagUntilTimeout>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e012      	b.n	8003ce6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cc0:	893b      	ldrh	r3, [r7, #8]
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	2140      	movs	r1, #64	; 0x40
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 f831 	bl	8003d3c <I2C_WaitOnFlagUntilTimeout>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e000      	b.n	8003ce6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	80002000 	.word	0x80002000

08003cf4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d103      	bne.n	8003d12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d007      	beq.n	8003d30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0201 	orr.w	r2, r2, #1
 8003d2e:	619a      	str	r2, [r3, #24]
  }
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	603b      	str	r3, [r7, #0]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d4c:	e022      	b.n	8003d94 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d54:	d01e      	beq.n	8003d94 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d56:	f7fe fed7 	bl	8002b08 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d302      	bcc.n	8003d6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d113      	bne.n	8003d94 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d70:	f043 0220 	orr.w	r2, r3, #32
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e00f      	b.n	8003db4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699a      	ldr	r2, [r3, #24]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	bf0c      	ite	eq
 8003da4:	2301      	moveq	r3, #1
 8003da6:	2300      	movne	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	461a      	mov	r2, r3
 8003dac:	79fb      	ldrb	r3, [r7, #7]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d0cd      	beq.n	8003d4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003dc8:	e02c      	b.n	8003e24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	68b9      	ldr	r1, [r7, #8]
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 f870 	bl	8003eb4 <I2C_IsErrorOccurred>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e02a      	b.n	8003e34 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de4:	d01e      	beq.n	8003e24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de6:	f7fe fe8f 	bl	8002b08 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d302      	bcc.n	8003dfc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d113      	bne.n	8003e24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e00:	f043 0220 	orr.w	r2, r3, #32
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e007      	b.n	8003e34 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d1cb      	bne.n	8003dca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e48:	e028      	b.n	8003e9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	68b9      	ldr	r1, [r7, #8]
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 f830 	bl	8003eb4 <I2C_IsErrorOccurred>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e026      	b.n	8003eac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e5e:	f7fe fe53 	bl	8002b08 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d302      	bcc.n	8003e74 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d113      	bne.n	8003e9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e78:	f043 0220 	orr.w	r2, r3, #32
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e007      	b.n	8003eac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	f003 0320 	and.w	r3, r3, #32
 8003ea6:	2b20      	cmp	r3, #32
 8003ea8:	d1cf      	bne.n	8003e4a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b08a      	sub	sp, #40	; 0x28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	f003 0310 	and.w	r3, r3, #16
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d075      	beq.n	8003fcc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2210      	movs	r2, #16
 8003ee6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ee8:	e056      	b.n	8003f98 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef0:	d052      	beq.n	8003f98 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ef2:	f7fe fe09 	bl	8002b08 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d302      	bcc.n	8003f08 <I2C_IsErrorOccurred+0x54>
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d147      	bne.n	8003f98 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f12:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f1a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f2a:	d12e      	bne.n	8003f8a <I2C_IsErrorOccurred+0xd6>
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f32:	d02a      	beq.n	8003f8a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003f34:	7cfb      	ldrb	r3, [r7, #19]
 8003f36:	2b20      	cmp	r3, #32
 8003f38:	d027      	beq.n	8003f8a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f48:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003f4a:	f7fe fddd 	bl	8002b08 <HAL_GetTick>
 8003f4e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f50:	e01b      	b.n	8003f8a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003f52:	f7fe fdd9 	bl	8002b08 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b19      	cmp	r3, #25
 8003f5e:	d914      	bls.n	8003f8a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f64:	f043 0220 	orr.w	r2, r3, #32
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	2b20      	cmp	r3, #32
 8003f96:	d1dc      	bne.n	8003f52 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b20      	cmp	r3, #32
 8003fa4:	d003      	beq.n	8003fae <I2C_IsErrorOccurred+0xfa>
 8003fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d09d      	beq.n	8003eea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003fae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d103      	bne.n	8003fbe <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	f043 0304 	orr.w	r3, r3, #4
 8003fc4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00b      	beq.n	8003ff6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	f043 0301 	orr.w	r3, r3, #1
 8003fe4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00b      	beq.n	8004018 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	f043 0308 	orr.w	r3, r3, #8
 8004006:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004010:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00b      	beq.n	800403a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	f043 0302 	orr.w	r3, r3, #2
 8004028:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004032:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800403a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800403e:	2b00      	cmp	r3, #0
 8004040:	d01c      	beq.n	800407c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f7ff fe56 	bl	8003cf4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6859      	ldr	r1, [r3, #4]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	4b0d      	ldr	r3, [pc, #52]	; (8004088 <I2C_IsErrorOccurred+0x1d4>)
 8004054:	400b      	ands	r3, r1
 8004056:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	431a      	orrs	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2220      	movs	r2, #32
 8004068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800407c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004080:	4618      	mov	r0, r3
 8004082:	3728      	adds	r7, #40	; 0x28
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	fe00e800 	.word	0xfe00e800

0800408c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	607b      	str	r3, [r7, #4]
 8004096:	460b      	mov	r3, r1
 8004098:	817b      	strh	r3, [r7, #10]
 800409a:	4613      	mov	r3, r2
 800409c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800409e:	897b      	ldrh	r3, [r7, #10]
 80040a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040a4:	7a7b      	ldrb	r3, [r7, #9]
 80040a6:	041b      	lsls	r3, r3, #16
 80040a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	0d5b      	lsrs	r3, r3, #21
 80040c6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80040ca:	4b08      	ldr	r3, [pc, #32]	; (80040ec <I2C_TransferConfig+0x60>)
 80040cc:	430b      	orrs	r3, r1
 80040ce:	43db      	mvns	r3, r3
 80040d0:	ea02 0103 	and.w	r1, r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80040de:	bf00      	nop
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	03ff63ff 	.word	0x03ff63ff

080040f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b20      	cmp	r3, #32
 8004104:	d138      	bne.n	8004178 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004110:	2302      	movs	r3, #2
 8004112:	e032      	b.n	800417a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2224      	movs	r2, #36	; 0x24
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0201 	bic.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004142:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6819      	ldr	r1, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0201 	orr.w	r2, r2, #1
 8004162:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004174:	2300      	movs	r3, #0
 8004176:	e000      	b.n	800417a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004178:	2302      	movs	r3, #2
  }
}
 800417a:	4618      	mov	r0, r3
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004186:	b480      	push	{r7}
 8004188:	b085      	sub	sp, #20
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
 800418e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b20      	cmp	r3, #32
 800419a:	d139      	bne.n	8004210 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d101      	bne.n	80041aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041a6:	2302      	movs	r3, #2
 80041a8:	e033      	b.n	8004212 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2224      	movs	r2, #36	; 0x24
 80041b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0201 	bic.w	r2, r2, #1
 80041c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	021b      	lsls	r3, r3, #8
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	e000      	b.n	8004212 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004210:	2302      	movs	r3, #2
  }
}
 8004212:	4618      	mov	r0, r3
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
	...

08004220 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004224:	4b04      	ldr	r3, [pc, #16]	; (8004238 <HAL_PWREx_GetVoltageRange+0x18>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800422c:	4618      	mov	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40007000 	.word	0x40007000

0800423c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800424a:	d130      	bne.n	80042ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800424c:	4b23      	ldr	r3, [pc, #140]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004258:	d038      	beq.n	80042cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800425a:	4b20      	ldr	r3, [pc, #128]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004262:	4a1e      	ldr	r2, [pc, #120]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004264:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004268:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800426a:	4b1d      	ldr	r3, [pc, #116]	; (80042e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2232      	movs	r2, #50	; 0x32
 8004270:	fb02 f303 	mul.w	r3, r2, r3
 8004274:	4a1b      	ldr	r2, [pc, #108]	; (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004276:	fba2 2303 	umull	r2, r3, r2, r3
 800427a:	0c9b      	lsrs	r3, r3, #18
 800427c:	3301      	adds	r3, #1
 800427e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004280:	e002      	b.n	8004288 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	3b01      	subs	r3, #1
 8004286:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004288:	4b14      	ldr	r3, [pc, #80]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004294:	d102      	bne.n	800429c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1f2      	bne.n	8004282 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800429c:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a8:	d110      	bne.n	80042cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e00f      	b.n	80042ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80042ae:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ba:	d007      	beq.n	80042cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042bc:	4b07      	ldr	r3, [pc, #28]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042c4:	4a05      	ldr	r2, [pc, #20]	; (80042dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40007000 	.word	0x40007000
 80042e0:	2000001c 	.word	0x2000001c
 80042e4:	431bde83 	.word	0x431bde83

080042e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e3ca      	b.n	8004a90 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042fa:	4b97      	ldr	r3, [pc, #604]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 030c 	and.w	r3, r3, #12
 8004302:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004304:	4b94      	ldr	r3, [pc, #592]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f003 0303 	and.w	r3, r3, #3
 800430c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0310 	and.w	r3, r3, #16
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 80e4 	beq.w	80044e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d007      	beq.n	8004332 <HAL_RCC_OscConfig+0x4a>
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	2b0c      	cmp	r3, #12
 8004326:	f040 808b 	bne.w	8004440 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2b01      	cmp	r3, #1
 800432e:	f040 8087 	bne.w	8004440 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004332:	4b89      	ldr	r3, [pc, #548]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d005      	beq.n	800434a <HAL_RCC_OscConfig+0x62>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e3a2      	b.n	8004a90 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1a      	ldr	r2, [r3, #32]
 800434e:	4b82      	ldr	r3, [pc, #520]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0308 	and.w	r3, r3, #8
 8004356:	2b00      	cmp	r3, #0
 8004358:	d004      	beq.n	8004364 <HAL_RCC_OscConfig+0x7c>
 800435a:	4b7f      	ldr	r3, [pc, #508]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004362:	e005      	b.n	8004370 <HAL_RCC_OscConfig+0x88>
 8004364:	4b7c      	ldr	r3, [pc, #496]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800436a:	091b      	lsrs	r3, r3, #4
 800436c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004370:	4293      	cmp	r3, r2
 8004372:	d223      	bcs.n	80043bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	4618      	mov	r0, r3
 800437a:	f000 fd55 	bl	8004e28 <RCC_SetFlashLatencyFromMSIRange>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e383      	b.n	8004a90 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004388:	4b73      	ldr	r3, [pc, #460]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a72      	ldr	r2, [pc, #456]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 800438e:	f043 0308 	orr.w	r3, r3, #8
 8004392:	6013      	str	r3, [r2, #0]
 8004394:	4b70      	ldr	r3, [pc, #448]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	496d      	ldr	r1, [pc, #436]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043a6:	4b6c      	ldr	r3, [pc, #432]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	021b      	lsls	r3, r3, #8
 80043b4:	4968      	ldr	r1, [pc, #416]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	604b      	str	r3, [r1, #4]
 80043ba:	e025      	b.n	8004408 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043bc:	4b66      	ldr	r3, [pc, #408]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a65      	ldr	r2, [pc, #404]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 80043c2:	f043 0308 	orr.w	r3, r3, #8
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	4b63      	ldr	r3, [pc, #396]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	4960      	ldr	r1, [pc, #384]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043da:	4b5f      	ldr	r3, [pc, #380]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	021b      	lsls	r3, r3, #8
 80043e8:	495b      	ldr	r1, [pc, #364]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d109      	bne.n	8004408 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 fd15 	bl	8004e28 <RCC_SetFlashLatencyFromMSIRange>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e343      	b.n	8004a90 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004408:	f000 fc4a 	bl	8004ca0 <HAL_RCC_GetSysClockFreq>
 800440c:	4602      	mov	r2, r0
 800440e:	4b52      	ldr	r3, [pc, #328]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	091b      	lsrs	r3, r3, #4
 8004414:	f003 030f 	and.w	r3, r3, #15
 8004418:	4950      	ldr	r1, [pc, #320]	; (800455c <HAL_RCC_OscConfig+0x274>)
 800441a:	5ccb      	ldrb	r3, [r1, r3]
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	fa22 f303 	lsr.w	r3, r2, r3
 8004424:	4a4e      	ldr	r2, [pc, #312]	; (8004560 <HAL_RCC_OscConfig+0x278>)
 8004426:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004428:	4b4e      	ldr	r3, [pc, #312]	; (8004564 <HAL_RCC_OscConfig+0x27c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4618      	mov	r0, r3
 800442e:	f7fe fb1b 	bl	8002a68 <HAL_InitTick>
 8004432:	4603      	mov	r3, r0
 8004434:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004436:	7bfb      	ldrb	r3, [r7, #15]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d052      	beq.n	80044e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800443c:	7bfb      	ldrb	r3, [r7, #15]
 800443e:	e327      	b.n	8004a90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d032      	beq.n	80044ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004448:	4b43      	ldr	r3, [pc, #268]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a42      	ldr	r2, [pc, #264]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 800444e:	f043 0301 	orr.w	r3, r3, #1
 8004452:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004454:	f7fe fb58 	bl	8002b08 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800445c:	f7fe fb54 	bl	8002b08 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e310      	b.n	8004a90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800446e:	4b3a      	ldr	r3, [pc, #232]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0f0      	beq.n	800445c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800447a:	4b37      	ldr	r3, [pc, #220]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a36      	ldr	r2, [pc, #216]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004480:	f043 0308 	orr.w	r3, r3, #8
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	4b34      	ldr	r3, [pc, #208]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	4931      	ldr	r1, [pc, #196]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004494:	4313      	orrs	r3, r2
 8004496:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004498:	4b2f      	ldr	r3, [pc, #188]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	021b      	lsls	r3, r3, #8
 80044a6:	492c      	ldr	r1, [pc, #176]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	604b      	str	r3, [r1, #4]
 80044ac:	e01a      	b.n	80044e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044ae:	4b2a      	ldr	r3, [pc, #168]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a29      	ldr	r2, [pc, #164]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 80044b4:	f023 0301 	bic.w	r3, r3, #1
 80044b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044ba:	f7fe fb25 	bl	8002b08 <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044c2:	f7fe fb21 	bl	8002b08 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e2dd      	b.n	8004a90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044d4:	4b20      	ldr	r3, [pc, #128]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1f0      	bne.n	80044c2 <HAL_RCC_OscConfig+0x1da>
 80044e0:	e000      	b.n	80044e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d074      	beq.n	80045da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	2b08      	cmp	r3, #8
 80044f4:	d005      	beq.n	8004502 <HAL_RCC_OscConfig+0x21a>
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	2b0c      	cmp	r3, #12
 80044fa:	d10e      	bne.n	800451a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	2b03      	cmp	r3, #3
 8004500:	d10b      	bne.n	800451a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004502:	4b15      	ldr	r3, [pc, #84]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d064      	beq.n	80045d8 <HAL_RCC_OscConfig+0x2f0>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d160      	bne.n	80045d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e2ba      	b.n	8004a90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004522:	d106      	bne.n	8004532 <HAL_RCC_OscConfig+0x24a>
 8004524:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a0b      	ldr	r2, [pc, #44]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 800452a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	e026      	b.n	8004580 <HAL_RCC_OscConfig+0x298>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800453a:	d115      	bne.n	8004568 <HAL_RCC_OscConfig+0x280>
 800453c:	4b06      	ldr	r3, [pc, #24]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a05      	ldr	r2, [pc, #20]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 8004542:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004546:	6013      	str	r3, [r2, #0]
 8004548:	4b03      	ldr	r3, [pc, #12]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a02      	ldr	r2, [pc, #8]	; (8004558 <HAL_RCC_OscConfig+0x270>)
 800454e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	e014      	b.n	8004580 <HAL_RCC_OscConfig+0x298>
 8004556:	bf00      	nop
 8004558:	40021000 	.word	0x40021000
 800455c:	08010030 	.word	0x08010030
 8004560:	2000001c 	.word	0x2000001c
 8004564:	20000088 	.word	0x20000088
 8004568:	4ba0      	ldr	r3, [pc, #640]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a9f      	ldr	r2, [pc, #636]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 800456e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004572:	6013      	str	r3, [r2, #0]
 8004574:	4b9d      	ldr	r3, [pc, #628]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a9c      	ldr	r2, [pc, #624]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 800457a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800457e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d013      	beq.n	80045b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004588:	f7fe fabe 	bl	8002b08 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004590:	f7fe faba 	bl	8002b08 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b64      	cmp	r3, #100	; 0x64
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e276      	b.n	8004a90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045a2:	4b92      	ldr	r3, [pc, #584]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0f0      	beq.n	8004590 <HAL_RCC_OscConfig+0x2a8>
 80045ae:	e014      	b.n	80045da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b0:	f7fe faaa 	bl	8002b08 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b8:	f7fe faa6 	bl	8002b08 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b64      	cmp	r3, #100	; 0x64
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e262      	b.n	8004a90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045ca:	4b88      	ldr	r3, [pc, #544]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f0      	bne.n	80045b8 <HAL_RCC_OscConfig+0x2d0>
 80045d6:	e000      	b.n	80045da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d060      	beq.n	80046a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	2b04      	cmp	r3, #4
 80045ea:	d005      	beq.n	80045f8 <HAL_RCC_OscConfig+0x310>
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	2b0c      	cmp	r3, #12
 80045f0:	d119      	bne.n	8004626 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d116      	bne.n	8004626 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045f8:	4b7c      	ldr	r3, [pc, #496]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004600:	2b00      	cmp	r3, #0
 8004602:	d005      	beq.n	8004610 <HAL_RCC_OscConfig+0x328>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e23f      	b.n	8004a90 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004610:	4b76      	ldr	r3, [pc, #472]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	061b      	lsls	r3, r3, #24
 800461e:	4973      	ldr	r1, [pc, #460]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 8004620:	4313      	orrs	r3, r2
 8004622:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004624:	e040      	b.n	80046a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d023      	beq.n	8004676 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800462e:	4b6f      	ldr	r3, [pc, #444]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a6e      	ldr	r2, [pc, #440]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 8004634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463a:	f7fe fa65 	bl	8002b08 <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004640:	e008      	b.n	8004654 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004642:	f7fe fa61 	bl	8002b08 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e21d      	b.n	8004a90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004654:	4b65      	ldr	r3, [pc, #404]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0f0      	beq.n	8004642 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004660:	4b62      	ldr	r3, [pc, #392]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	061b      	lsls	r3, r3, #24
 800466e:	495f      	ldr	r1, [pc, #380]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 8004670:	4313      	orrs	r3, r2
 8004672:	604b      	str	r3, [r1, #4]
 8004674:	e018      	b.n	80046a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004676:	4b5d      	ldr	r3, [pc, #372]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a5c      	ldr	r2, [pc, #368]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 800467c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004682:	f7fe fa41 	bl	8002b08 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800468a:	f7fe fa3d 	bl	8002b08 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e1f9      	b.n	8004a90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800469c:	4b53      	ldr	r3, [pc, #332]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1f0      	bne.n	800468a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d03c      	beq.n	800472e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d01c      	beq.n	80046f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046bc:	4b4b      	ldr	r3, [pc, #300]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80046be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046c2:	4a4a      	ldr	r2, [pc, #296]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80046c4:	f043 0301 	orr.w	r3, r3, #1
 80046c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046cc:	f7fe fa1c 	bl	8002b08 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d4:	f7fe fa18 	bl	8002b08 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e1d4      	b.n	8004a90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046e6:	4b41      	ldr	r3, [pc, #260]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80046e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0ef      	beq.n	80046d4 <HAL_RCC_OscConfig+0x3ec>
 80046f4:	e01b      	b.n	800472e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046f6:	4b3d      	ldr	r3, [pc, #244]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80046f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046fc:	4a3b      	ldr	r2, [pc, #236]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80046fe:	f023 0301 	bic.w	r3, r3, #1
 8004702:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004706:	f7fe f9ff 	bl	8002b08 <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800470e:	f7fe f9fb 	bl	8002b08 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e1b7      	b.n	8004a90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004720:	4b32      	ldr	r3, [pc, #200]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 8004722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1ef      	bne.n	800470e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0304 	and.w	r3, r3, #4
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 80a6 	beq.w	8004888 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800473c:	2300      	movs	r3, #0
 800473e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004740:	4b2a      	ldr	r3, [pc, #168]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 8004742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10d      	bne.n	8004768 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800474c:	4b27      	ldr	r3, [pc, #156]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 800474e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004750:	4a26      	ldr	r2, [pc, #152]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 8004752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004756:	6593      	str	r3, [r2, #88]	; 0x58
 8004758:	4b24      	ldr	r3, [pc, #144]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 800475a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004760:	60bb      	str	r3, [r7, #8]
 8004762:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004764:	2301      	movs	r3, #1
 8004766:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004768:	4b21      	ldr	r3, [pc, #132]	; (80047f0 <HAL_RCC_OscConfig+0x508>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004770:	2b00      	cmp	r3, #0
 8004772:	d118      	bne.n	80047a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004774:	4b1e      	ldr	r3, [pc, #120]	; (80047f0 <HAL_RCC_OscConfig+0x508>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1d      	ldr	r2, [pc, #116]	; (80047f0 <HAL_RCC_OscConfig+0x508>)
 800477a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800477e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004780:	f7fe f9c2 	bl	8002b08 <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004788:	f7fe f9be 	bl	8002b08 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e17a      	b.n	8004a90 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800479a:	4b15      	ldr	r3, [pc, #84]	; (80047f0 <HAL_RCC_OscConfig+0x508>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0f0      	beq.n	8004788 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d108      	bne.n	80047c0 <HAL_RCC_OscConfig+0x4d8>
 80047ae:	4b0f      	ldr	r3, [pc, #60]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80047b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b4:	4a0d      	ldr	r2, [pc, #52]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047be:	e029      	b.n	8004814 <HAL_RCC_OscConfig+0x52c>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2b05      	cmp	r3, #5
 80047c6:	d115      	bne.n	80047f4 <HAL_RCC_OscConfig+0x50c>
 80047c8:	4b08      	ldr	r3, [pc, #32]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80047ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ce:	4a07      	ldr	r2, [pc, #28]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80047d0:	f043 0304 	orr.w	r3, r3, #4
 80047d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047d8:	4b04      	ldr	r3, [pc, #16]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047de:	4a03      	ldr	r2, [pc, #12]	; (80047ec <HAL_RCC_OscConfig+0x504>)
 80047e0:	f043 0301 	orr.w	r3, r3, #1
 80047e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047e8:	e014      	b.n	8004814 <HAL_RCC_OscConfig+0x52c>
 80047ea:	bf00      	nop
 80047ec:	40021000 	.word	0x40021000
 80047f0:	40007000 	.word	0x40007000
 80047f4:	4b9c      	ldr	r3, [pc, #624]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 80047f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fa:	4a9b      	ldr	r2, [pc, #620]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 80047fc:	f023 0301 	bic.w	r3, r3, #1
 8004800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004804:	4b98      	ldr	r3, [pc, #608]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 8004806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480a:	4a97      	ldr	r2, [pc, #604]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 800480c:	f023 0304 	bic.w	r3, r3, #4
 8004810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d016      	beq.n	800484a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481c:	f7fe f974 	bl	8002b08 <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004822:	e00a      	b.n	800483a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004824:	f7fe f970 	bl	8002b08 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004832:	4293      	cmp	r3, r2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e12a      	b.n	8004a90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800483a:	4b8b      	ldr	r3, [pc, #556]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 800483c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0ed      	beq.n	8004824 <HAL_RCC_OscConfig+0x53c>
 8004848:	e015      	b.n	8004876 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484a:	f7fe f95d 	bl	8002b08 <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004850:	e00a      	b.n	8004868 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004852:	f7fe f959 	bl	8002b08 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004860:	4293      	cmp	r3, r2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e113      	b.n	8004a90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004868:	4b7f      	ldr	r3, [pc, #508]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 800486a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1ed      	bne.n	8004852 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004876:	7ffb      	ldrb	r3, [r7, #31]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d105      	bne.n	8004888 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800487c:	4b7a      	ldr	r3, [pc, #488]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 800487e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004880:	4a79      	ldr	r2, [pc, #484]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 8004882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004886:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 80fe 	beq.w	8004a8e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004896:	2b02      	cmp	r3, #2
 8004898:	f040 80d0 	bne.w	8004a3c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800489c:	4b72      	ldr	r3, [pc, #456]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f003 0203 	and.w	r2, r3, #3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d130      	bne.n	8004912 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ba:	3b01      	subs	r3, #1
 80048bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048be:	429a      	cmp	r2, r3
 80048c0:	d127      	bne.n	8004912 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d11f      	bne.n	8004912 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048dc:	2a07      	cmp	r2, #7
 80048de:	bf14      	ite	ne
 80048e0:	2201      	movne	r2, #1
 80048e2:	2200      	moveq	r2, #0
 80048e4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d113      	bne.n	8004912 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f4:	085b      	lsrs	r3, r3, #1
 80048f6:	3b01      	subs	r3, #1
 80048f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d109      	bne.n	8004912 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	085b      	lsrs	r3, r3, #1
 800490a:	3b01      	subs	r3, #1
 800490c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800490e:	429a      	cmp	r2, r3
 8004910:	d06e      	beq.n	80049f0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	2b0c      	cmp	r3, #12
 8004916:	d069      	beq.n	80049ec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004918:	4b53      	ldr	r3, [pc, #332]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d105      	bne.n	8004930 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004924:	4b50      	ldr	r3, [pc, #320]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e0ad      	b.n	8004a90 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004934:	4b4c      	ldr	r3, [pc, #304]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a4b      	ldr	r2, [pc, #300]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 800493a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800493e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004940:	f7fe f8e2 	bl	8002b08 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004948:	f7fe f8de 	bl	8002b08 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e09a      	b.n	8004a90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800495a:	4b43      	ldr	r3, [pc, #268]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f0      	bne.n	8004948 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004966:	4b40      	ldr	r3, [pc, #256]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 8004968:	68da      	ldr	r2, [r3, #12]
 800496a:	4b40      	ldr	r3, [pc, #256]	; (8004a6c <HAL_RCC_OscConfig+0x784>)
 800496c:	4013      	ands	r3, r2
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004976:	3a01      	subs	r2, #1
 8004978:	0112      	lsls	r2, r2, #4
 800497a:	4311      	orrs	r1, r2
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004980:	0212      	lsls	r2, r2, #8
 8004982:	4311      	orrs	r1, r2
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004988:	0852      	lsrs	r2, r2, #1
 800498a:	3a01      	subs	r2, #1
 800498c:	0552      	lsls	r2, r2, #21
 800498e:	4311      	orrs	r1, r2
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004994:	0852      	lsrs	r2, r2, #1
 8004996:	3a01      	subs	r2, #1
 8004998:	0652      	lsls	r2, r2, #25
 800499a:	4311      	orrs	r1, r2
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049a0:	0912      	lsrs	r2, r2, #4
 80049a2:	0452      	lsls	r2, r2, #17
 80049a4:	430a      	orrs	r2, r1
 80049a6:	4930      	ldr	r1, [pc, #192]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80049ac:	4b2e      	ldr	r3, [pc, #184]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a2d      	ldr	r2, [pc, #180]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 80049b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049b8:	4b2b      	ldr	r3, [pc, #172]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	4a2a      	ldr	r2, [pc, #168]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 80049be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049c4:	f7fe f8a0 	bl	8002b08 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049cc:	f7fe f89c 	bl	8002b08 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e058      	b.n	8004a90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049de:	4b22      	ldr	r3, [pc, #136]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f0      	beq.n	80049cc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049ea:	e050      	b.n	8004a8e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e04f      	b.n	8004a90 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049f0:	4b1d      	ldr	r3, [pc, #116]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d148      	bne.n	8004a8e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80049fc:	4b1a      	ldr	r3, [pc, #104]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a19      	ldr	r2, [pc, #100]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 8004a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a08:	4b17      	ldr	r3, [pc, #92]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	4a16      	ldr	r2, [pc, #88]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 8004a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a14:	f7fe f878 	bl	8002b08 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a1c:	f7fe f874 	bl	8002b08 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e030      	b.n	8004a90 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a2e:	4b0e      	ldr	r3, [pc, #56]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0x734>
 8004a3a:	e028      	b.n	8004a8e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	2b0c      	cmp	r3, #12
 8004a40:	d023      	beq.n	8004a8a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a42:	4b09      	ldr	r3, [pc, #36]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a08      	ldr	r2, [pc, #32]	; (8004a68 <HAL_RCC_OscConfig+0x780>)
 8004a48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4e:	f7fe f85b 	bl	8002b08 <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a54:	e00c      	b.n	8004a70 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a56:	f7fe f857 	bl	8002b08 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d905      	bls.n	8004a70 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e013      	b.n	8004a90 <HAL_RCC_OscConfig+0x7a8>
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a70:	4b09      	ldr	r3, [pc, #36]	; (8004a98 <HAL_RCC_OscConfig+0x7b0>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1ec      	bne.n	8004a56 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a7c:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <HAL_RCC_OscConfig+0x7b0>)
 8004a7e:	68da      	ldr	r2, [r3, #12]
 8004a80:	4905      	ldr	r1, [pc, #20]	; (8004a98 <HAL_RCC_OscConfig+0x7b0>)
 8004a82:	4b06      	ldr	r3, [pc, #24]	; (8004a9c <HAL_RCC_OscConfig+0x7b4>)
 8004a84:	4013      	ands	r3, r2
 8004a86:	60cb      	str	r3, [r1, #12]
 8004a88:	e001      	b.n	8004a8e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e000      	b.n	8004a90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3720      	adds	r7, #32
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	feeefffc 	.word	0xfeeefffc

08004aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e0e7      	b.n	8004c84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ab4:	4b75      	ldr	r3, [pc, #468]	; (8004c8c <HAL_RCC_ClockConfig+0x1ec>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d910      	bls.n	8004ae4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac2:	4b72      	ldr	r3, [pc, #456]	; (8004c8c <HAL_RCC_ClockConfig+0x1ec>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f023 0207 	bic.w	r2, r3, #7
 8004aca:	4970      	ldr	r1, [pc, #448]	; (8004c8c <HAL_RCC_ClockConfig+0x1ec>)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad2:	4b6e      	ldr	r3, [pc, #440]	; (8004c8c <HAL_RCC_ClockConfig+0x1ec>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d001      	beq.n	8004ae4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e0cf      	b.n	8004c84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d010      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	4b66      	ldr	r3, [pc, #408]	; (8004c90 <HAL_RCC_ClockConfig+0x1f0>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d908      	bls.n	8004b12 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b00:	4b63      	ldr	r3, [pc, #396]	; (8004c90 <HAL_RCC_ClockConfig+0x1f0>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	4960      	ldr	r1, [pc, #384]	; (8004c90 <HAL_RCC_ClockConfig+0x1f0>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d04c      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2b03      	cmp	r3, #3
 8004b24:	d107      	bne.n	8004b36 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b26:	4b5a      	ldr	r3, [pc, #360]	; (8004c90 <HAL_RCC_ClockConfig+0x1f0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d121      	bne.n	8004b76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e0a6      	b.n	8004c84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d107      	bne.n	8004b4e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b3e:	4b54      	ldr	r3, [pc, #336]	; (8004c90 <HAL_RCC_ClockConfig+0x1f0>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d115      	bne.n	8004b76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e09a      	b.n	8004c84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d107      	bne.n	8004b66 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b56:	4b4e      	ldr	r3, [pc, #312]	; (8004c90 <HAL_RCC_ClockConfig+0x1f0>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d109      	bne.n	8004b76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e08e      	b.n	8004c84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b66:	4b4a      	ldr	r3, [pc, #296]	; (8004c90 <HAL_RCC_ClockConfig+0x1f0>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e086      	b.n	8004c84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b76:	4b46      	ldr	r3, [pc, #280]	; (8004c90 <HAL_RCC_ClockConfig+0x1f0>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f023 0203 	bic.w	r2, r3, #3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	4943      	ldr	r1, [pc, #268]	; (8004c90 <HAL_RCC_ClockConfig+0x1f0>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b88:	f7fd ffbe 	bl	8002b08 <HAL_GetTick>
 8004b8c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b8e:	e00a      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b90:	f7fd ffba 	bl	8002b08 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e06e      	b.n	8004c84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ba6:	4b3a      	ldr	r3, [pc, #232]	; (8004c90 <HAL_RCC_ClockConfig+0x1f0>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 020c 	and.w	r2, r3, #12
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d1eb      	bne.n	8004b90 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d010      	beq.n	8004be6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	4b31      	ldr	r3, [pc, #196]	; (8004c90 <HAL_RCC_ClockConfig+0x1f0>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d208      	bcs.n	8004be6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd4:	4b2e      	ldr	r3, [pc, #184]	; (8004c90 <HAL_RCC_ClockConfig+0x1f0>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	492b      	ldr	r1, [pc, #172]	; (8004c90 <HAL_RCC_ClockConfig+0x1f0>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004be6:	4b29      	ldr	r3, [pc, #164]	; (8004c8c <HAL_RCC_ClockConfig+0x1ec>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d210      	bcs.n	8004c16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf4:	4b25      	ldr	r3, [pc, #148]	; (8004c8c <HAL_RCC_ClockConfig+0x1ec>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f023 0207 	bic.w	r2, r3, #7
 8004bfc:	4923      	ldr	r1, [pc, #140]	; (8004c8c <HAL_RCC_ClockConfig+0x1ec>)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c04:	4b21      	ldr	r3, [pc, #132]	; (8004c8c <HAL_RCC_ClockConfig+0x1ec>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d001      	beq.n	8004c16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e036      	b.n	8004c84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0304 	and.w	r3, r3, #4
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d008      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c22:	4b1b      	ldr	r3, [pc, #108]	; (8004c90 <HAL_RCC_ClockConfig+0x1f0>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	4918      	ldr	r1, [pc, #96]	; (8004c90 <HAL_RCC_ClockConfig+0x1f0>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d009      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c40:	4b13      	ldr	r3, [pc, #76]	; (8004c90 <HAL_RCC_ClockConfig+0x1f0>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	00db      	lsls	r3, r3, #3
 8004c4e:	4910      	ldr	r1, [pc, #64]	; (8004c90 <HAL_RCC_ClockConfig+0x1f0>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c54:	f000 f824 	bl	8004ca0 <HAL_RCC_GetSysClockFreq>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	4b0d      	ldr	r3, [pc, #52]	; (8004c90 <HAL_RCC_ClockConfig+0x1f0>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	091b      	lsrs	r3, r3, #4
 8004c60:	f003 030f 	and.w	r3, r3, #15
 8004c64:	490b      	ldr	r1, [pc, #44]	; (8004c94 <HAL_RCC_ClockConfig+0x1f4>)
 8004c66:	5ccb      	ldrb	r3, [r1, r3]
 8004c68:	f003 031f 	and.w	r3, r3, #31
 8004c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c70:	4a09      	ldr	r2, [pc, #36]	; (8004c98 <HAL_RCC_ClockConfig+0x1f8>)
 8004c72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c74:	4b09      	ldr	r3, [pc, #36]	; (8004c9c <HAL_RCC_ClockConfig+0x1fc>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7fd fef5 	bl	8002a68 <HAL_InitTick>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c82:	7afb      	ldrb	r3, [r7, #11]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	40022000 	.word	0x40022000
 8004c90:	40021000 	.word	0x40021000
 8004c94:	08010030 	.word	0x08010030
 8004c98:	2000001c 	.word	0x2000001c
 8004c9c:	20000088 	.word	0x20000088

08004ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b089      	sub	sp, #36	; 0x24
 8004ca4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	61fb      	str	r3, [r7, #28]
 8004caa:	2300      	movs	r3, #0
 8004cac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cae:	4b3e      	ldr	r3, [pc, #248]	; (8004da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 030c 	and.w	r3, r3, #12
 8004cb6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cb8:	4b3b      	ldr	r3, [pc, #236]	; (8004da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f003 0303 	and.w	r3, r3, #3
 8004cc0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d005      	beq.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x34>
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	2b0c      	cmp	r3, #12
 8004ccc:	d121      	bne.n	8004d12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d11e      	bne.n	8004d12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004cd4:	4b34      	ldr	r3, [pc, #208]	; (8004da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0308 	and.w	r3, r3, #8
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d107      	bne.n	8004cf0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ce0:	4b31      	ldr	r3, [pc, #196]	; (8004da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ce6:	0a1b      	lsrs	r3, r3, #8
 8004ce8:	f003 030f 	and.w	r3, r3, #15
 8004cec:	61fb      	str	r3, [r7, #28]
 8004cee:	e005      	b.n	8004cfc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004cf0:	4b2d      	ldr	r3, [pc, #180]	; (8004da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	091b      	lsrs	r3, r3, #4
 8004cf6:	f003 030f 	and.w	r3, r3, #15
 8004cfa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004cfc:	4a2b      	ldr	r2, [pc, #172]	; (8004dac <HAL_RCC_GetSysClockFreq+0x10c>)
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10d      	bne.n	8004d28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d10:	e00a      	b.n	8004d28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d102      	bne.n	8004d1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d18:	4b25      	ldr	r3, [pc, #148]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d1a:	61bb      	str	r3, [r7, #24]
 8004d1c:	e004      	b.n	8004d28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d101      	bne.n	8004d28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d24:	4b23      	ldr	r3, [pc, #140]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	2b0c      	cmp	r3, #12
 8004d2c:	d134      	bne.n	8004d98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d2e:	4b1e      	ldr	r3, [pc, #120]	; (8004da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f003 0303 	and.w	r3, r3, #3
 8004d36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d003      	beq.n	8004d46 <HAL_RCC_GetSysClockFreq+0xa6>
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	2b03      	cmp	r3, #3
 8004d42:	d003      	beq.n	8004d4c <HAL_RCC_GetSysClockFreq+0xac>
 8004d44:	e005      	b.n	8004d52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d46:	4b1a      	ldr	r3, [pc, #104]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d48:	617b      	str	r3, [r7, #20]
      break;
 8004d4a:	e005      	b.n	8004d58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d4c:	4b19      	ldr	r3, [pc, #100]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d4e:	617b      	str	r3, [r7, #20]
      break;
 8004d50:	e002      	b.n	8004d58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	617b      	str	r3, [r7, #20]
      break;
 8004d56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d58:	4b13      	ldr	r3, [pc, #76]	; (8004da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	091b      	lsrs	r3, r3, #4
 8004d5e:	f003 0307 	and.w	r3, r3, #7
 8004d62:	3301      	adds	r3, #1
 8004d64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d66:	4b10      	ldr	r3, [pc, #64]	; (8004da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	0a1b      	lsrs	r3, r3, #8
 8004d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	fb03 f202 	mul.w	r2, r3, r2
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d7e:	4b0a      	ldr	r3, [pc, #40]	; (8004da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	0e5b      	lsrs	r3, r3, #25
 8004d84:	f003 0303 	and.w	r3, r3, #3
 8004d88:	3301      	adds	r3, #1
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d98:	69bb      	ldr	r3, [r7, #24]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3724      	adds	r7, #36	; 0x24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40021000 	.word	0x40021000
 8004dac:	08010048 	.word	0x08010048
 8004db0:	00f42400 	.word	0x00f42400
 8004db4:	007a1200 	.word	0x007a1200

08004db8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004db8:	b480      	push	{r7}
 8004dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dbc:	4b03      	ldr	r3, [pc, #12]	; (8004dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	2000001c 	.word	0x2000001c

08004dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004dd4:	f7ff fff0 	bl	8004db8 <HAL_RCC_GetHCLKFreq>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	0a1b      	lsrs	r3, r3, #8
 8004de0:	f003 0307 	and.w	r3, r3, #7
 8004de4:	4904      	ldr	r1, [pc, #16]	; (8004df8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004de6:	5ccb      	ldrb	r3, [r1, r3]
 8004de8:	f003 031f 	and.w	r3, r3, #31
 8004dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	40021000 	.word	0x40021000
 8004df8:	08010040 	.word	0x08010040

08004dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e00:	f7ff ffda 	bl	8004db8 <HAL_RCC_GetHCLKFreq>
 8004e04:	4602      	mov	r2, r0
 8004e06:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	0adb      	lsrs	r3, r3, #11
 8004e0c:	f003 0307 	and.w	r3, r3, #7
 8004e10:	4904      	ldr	r1, [pc, #16]	; (8004e24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e12:	5ccb      	ldrb	r3, [r1, r3]
 8004e14:	f003 031f 	and.w	r3, r3, #31
 8004e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	40021000 	.word	0x40021000
 8004e24:	08010040 	.word	0x08010040

08004e28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e30:	2300      	movs	r3, #0
 8004e32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e34:	4b2a      	ldr	r3, [pc, #168]	; (8004ee0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e40:	f7ff f9ee 	bl	8004220 <HAL_PWREx_GetVoltageRange>
 8004e44:	6178      	str	r0, [r7, #20]
 8004e46:	e014      	b.n	8004e72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e48:	4b25      	ldr	r3, [pc, #148]	; (8004ee0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4c:	4a24      	ldr	r2, [pc, #144]	; (8004ee0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e52:	6593      	str	r3, [r2, #88]	; 0x58
 8004e54:	4b22      	ldr	r3, [pc, #136]	; (8004ee0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e60:	f7ff f9de 	bl	8004220 <HAL_PWREx_GetVoltageRange>
 8004e64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e66:	4b1e      	ldr	r3, [pc, #120]	; (8004ee0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6a:	4a1d      	ldr	r2, [pc, #116]	; (8004ee0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e70:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e78:	d10b      	bne.n	8004e92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b80      	cmp	r3, #128	; 0x80
 8004e7e:	d919      	bls.n	8004eb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2ba0      	cmp	r3, #160	; 0xa0
 8004e84:	d902      	bls.n	8004e8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e86:	2302      	movs	r3, #2
 8004e88:	613b      	str	r3, [r7, #16]
 8004e8a:	e013      	b.n	8004eb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	613b      	str	r3, [r7, #16]
 8004e90:	e010      	b.n	8004eb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b80      	cmp	r3, #128	; 0x80
 8004e96:	d902      	bls.n	8004e9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e98:	2303      	movs	r3, #3
 8004e9a:	613b      	str	r3, [r7, #16]
 8004e9c:	e00a      	b.n	8004eb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b80      	cmp	r3, #128	; 0x80
 8004ea2:	d102      	bne.n	8004eaa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	613b      	str	r3, [r7, #16]
 8004ea8:	e004      	b.n	8004eb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b70      	cmp	r3, #112	; 0x70
 8004eae:	d101      	bne.n	8004eb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004eb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ee4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f023 0207 	bic.w	r2, r3, #7
 8004ebc:	4909      	ldr	r1, [pc, #36]	; (8004ee4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ec4:	4b07      	ldr	r3, [pc, #28]	; (8004ee4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d001      	beq.n	8004ed6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3718      	adds	r7, #24
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	40022000 	.word	0x40022000

08004ee8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d041      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f0c:	d02a      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004f0e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f12:	d824      	bhi.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f18:	d008      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f1e:	d81e      	bhi.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00a      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004f24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f28:	d010      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f2a:	e018      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f2c:	4b86      	ldr	r3, [pc, #536]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	4a85      	ldr	r2, [pc, #532]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f36:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f38:	e015      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	2100      	movs	r1, #0
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 fabb 	bl	80054bc <RCCEx_PLLSAI1_Config>
 8004f46:	4603      	mov	r3, r0
 8004f48:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f4a:	e00c      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	3320      	adds	r3, #32
 8004f50:	2100      	movs	r1, #0
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 fba6 	bl	80056a4 <RCCEx_PLLSAI2_Config>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f5c:	e003      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	74fb      	strb	r3, [r7, #19]
      break;
 8004f62:	e000      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004f64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f66:	7cfb      	ldrb	r3, [r7, #19]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10b      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f6c:	4b76      	ldr	r3, [pc, #472]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f7a:	4973      	ldr	r1, [pc, #460]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f82:	e001      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f84:	7cfb      	ldrb	r3, [r7, #19]
 8004f86:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d041      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f98:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f9c:	d02a      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004f9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004fa2:	d824      	bhi.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004fa4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fa8:	d008      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004faa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fae:	d81e      	bhi.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00a      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fb8:	d010      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004fba:	e018      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fbc:	4b62      	ldr	r3, [pc, #392]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	4a61      	ldr	r2, [pc, #388]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fc8:	e015      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	3304      	adds	r3, #4
 8004fce:	2100      	movs	r1, #0
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 fa73 	bl	80054bc <RCCEx_PLLSAI1_Config>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fda:	e00c      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3320      	adds	r3, #32
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 fb5e 	bl	80056a4 <RCCEx_PLLSAI2_Config>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fec:	e003      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	74fb      	strb	r3, [r7, #19]
      break;
 8004ff2:	e000      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004ff4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ff6:	7cfb      	ldrb	r3, [r7, #19]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10b      	bne.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ffc:	4b52      	ldr	r3, [pc, #328]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005002:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800500a:	494f      	ldr	r1, [pc, #316]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005012:	e001      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005014:	7cfb      	ldrb	r3, [r7, #19]
 8005016:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 80a0 	beq.w	8005166 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005026:	2300      	movs	r3, #0
 8005028:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800502a:	4b47      	ldr	r3, [pc, #284]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800502c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800502e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800503a:	2300      	movs	r3, #0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00d      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005040:	4b41      	ldr	r3, [pc, #260]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005044:	4a40      	ldr	r2, [pc, #256]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800504a:	6593      	str	r3, [r2, #88]	; 0x58
 800504c:	4b3e      	ldr	r3, [pc, #248]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800504e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005054:	60bb      	str	r3, [r7, #8]
 8005056:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005058:	2301      	movs	r3, #1
 800505a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800505c:	4b3b      	ldr	r3, [pc, #236]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a3a      	ldr	r2, [pc, #232]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005066:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005068:	f7fd fd4e 	bl	8002b08 <HAL_GetTick>
 800506c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800506e:	e009      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005070:	f7fd fd4a 	bl	8002b08 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d902      	bls.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	74fb      	strb	r3, [r7, #19]
        break;
 8005082:	e005      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005084:	4b31      	ldr	r3, [pc, #196]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0ef      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005090:	7cfb      	ldrb	r3, [r7, #19]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d15c      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005096:	4b2c      	ldr	r3, [pc, #176]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01f      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d019      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050b4:	4b24      	ldr	r3, [pc, #144]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050c0:	4b21      	ldr	r3, [pc, #132]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c6:	4a20      	ldr	r2, [pc, #128]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050d0:	4b1d      	ldr	r3, [pc, #116]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d6:	4a1c      	ldr	r2, [pc, #112]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050e0:	4a19      	ldr	r2, [pc, #100]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d016      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f2:	f7fd fd09 	bl	8002b08 <HAL_GetTick>
 80050f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050f8:	e00b      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050fa:	f7fd fd05 	bl	8002b08 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	f241 3288 	movw	r2, #5000	; 0x1388
 8005108:	4293      	cmp	r3, r2
 800510a:	d902      	bls.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	74fb      	strb	r3, [r7, #19]
            break;
 8005110:	e006      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005112:	4b0d      	ldr	r3, [pc, #52]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0ec      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005120:	7cfb      	ldrb	r3, [r7, #19]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10c      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005126:	4b08      	ldr	r3, [pc, #32]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005136:	4904      	ldr	r1, [pc, #16]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800513e:	e009      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005140:	7cfb      	ldrb	r3, [r7, #19]
 8005142:	74bb      	strb	r3, [r7, #18]
 8005144:	e006      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005146:	bf00      	nop
 8005148:	40021000 	.word	0x40021000
 800514c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005150:	7cfb      	ldrb	r3, [r7, #19]
 8005152:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005154:	7c7b      	ldrb	r3, [r7, #17]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d105      	bne.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800515a:	4b9e      	ldr	r3, [pc, #632]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800515c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515e:	4a9d      	ldr	r2, [pc, #628]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005164:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00a      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005172:	4b98      	ldr	r3, [pc, #608]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005178:	f023 0203 	bic.w	r2, r3, #3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005180:	4994      	ldr	r1, [pc, #592]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005182:	4313      	orrs	r3, r2
 8005184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00a      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005194:	4b8f      	ldr	r3, [pc, #572]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519a:	f023 020c 	bic.w	r2, r3, #12
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a2:	498c      	ldr	r1, [pc, #560]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0304 	and.w	r3, r3, #4
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051b6:	4b87      	ldr	r3, [pc, #540]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	4983      	ldr	r1, [pc, #524]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0308 	and.w	r3, r3, #8
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00a      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051d8:	4b7e      	ldr	r3, [pc, #504]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e6:	497b      	ldr	r1, [pc, #492]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0310 	and.w	r3, r3, #16
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051fa:	4b76      	ldr	r3, [pc, #472]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005200:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005208:	4972      	ldr	r1, [pc, #456]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800520a:	4313      	orrs	r3, r2
 800520c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0320 	and.w	r3, r3, #32
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00a      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800521c:	4b6d      	ldr	r3, [pc, #436]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800521e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005222:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800522a:	496a      	ldr	r1, [pc, #424]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800522c:	4313      	orrs	r3, r2
 800522e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800523e:	4b65      	ldr	r3, [pc, #404]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005244:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800524c:	4961      	ldr	r1, [pc, #388]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800524e:	4313      	orrs	r3, r2
 8005250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00a      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005260:	4b5c      	ldr	r3, [pc, #368]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005266:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800526e:	4959      	ldr	r1, [pc, #356]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005270:	4313      	orrs	r3, r2
 8005272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005282:	4b54      	ldr	r3, [pc, #336]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005288:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005290:	4950      	ldr	r1, [pc, #320]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005292:	4313      	orrs	r3, r2
 8005294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00a      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052a4:	4b4b      	ldr	r3, [pc, #300]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b2:	4948      	ldr	r1, [pc, #288]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052c6:	4b43      	ldr	r3, [pc, #268]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d4:	493f      	ldr	r1, [pc, #252]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d028      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052e8:	4b3a      	ldr	r3, [pc, #232]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052f6:	4937      	ldr	r1, [pc, #220]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005302:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005306:	d106      	bne.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005308:	4b32      	ldr	r3, [pc, #200]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	4a31      	ldr	r2, [pc, #196]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800530e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005312:	60d3      	str	r3, [r2, #12]
 8005314:	e011      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800531a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800531e:	d10c      	bne.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	3304      	adds	r3, #4
 8005324:	2101      	movs	r1, #1
 8005326:	4618      	mov	r0, r3
 8005328:	f000 f8c8 	bl	80054bc <RCCEx_PLLSAI1_Config>
 800532c:	4603      	mov	r3, r0
 800532e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005330:	7cfb      	ldrb	r3, [r7, #19]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d001      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005336:	7cfb      	ldrb	r3, [r7, #19]
 8005338:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d028      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005346:	4b23      	ldr	r3, [pc, #140]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005354:	491f      	ldr	r1, [pc, #124]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005356:	4313      	orrs	r3, r2
 8005358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005360:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005364:	d106      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005366:	4b1b      	ldr	r3, [pc, #108]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	4a1a      	ldr	r2, [pc, #104]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800536c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005370:	60d3      	str	r3, [r2, #12]
 8005372:	e011      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005378:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800537c:	d10c      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	3304      	adds	r3, #4
 8005382:	2101      	movs	r1, #1
 8005384:	4618      	mov	r0, r3
 8005386:	f000 f899 	bl	80054bc <RCCEx_PLLSAI1_Config>
 800538a:	4603      	mov	r3, r0
 800538c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800538e:	7cfb      	ldrb	r3, [r7, #19]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005394:	7cfb      	ldrb	r3, [r7, #19]
 8005396:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d02b      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053a4:	4b0b      	ldr	r3, [pc, #44]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b2:	4908      	ldr	r1, [pc, #32]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053c2:	d109      	bne.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053c4:	4b03      	ldr	r3, [pc, #12]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	4a02      	ldr	r2, [pc, #8]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053ce:	60d3      	str	r3, [r2, #12]
 80053d0:	e014      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80053d2:	bf00      	nop
 80053d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053e0:	d10c      	bne.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3304      	adds	r3, #4
 80053e6:	2101      	movs	r1, #1
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 f867 	bl	80054bc <RCCEx_PLLSAI1_Config>
 80053ee:	4603      	mov	r3, r0
 80053f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053f2:	7cfb      	ldrb	r3, [r7, #19]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80053f8:	7cfb      	ldrb	r3, [r7, #19]
 80053fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d02f      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005408:	4b2b      	ldr	r3, [pc, #172]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800540a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005416:	4928      	ldr	r1, [pc, #160]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005422:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005426:	d10d      	bne.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	3304      	adds	r3, #4
 800542c:	2102      	movs	r1, #2
 800542e:	4618      	mov	r0, r3
 8005430:	f000 f844 	bl	80054bc <RCCEx_PLLSAI1_Config>
 8005434:	4603      	mov	r3, r0
 8005436:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005438:	7cfb      	ldrb	r3, [r7, #19]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d014      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800543e:	7cfb      	ldrb	r3, [r7, #19]
 8005440:	74bb      	strb	r3, [r7, #18]
 8005442:	e011      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800544c:	d10c      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	3320      	adds	r3, #32
 8005452:	2102      	movs	r1, #2
 8005454:	4618      	mov	r0, r3
 8005456:	f000 f925 	bl	80056a4 <RCCEx_PLLSAI2_Config>
 800545a:	4603      	mov	r3, r0
 800545c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800545e:	7cfb      	ldrb	r3, [r7, #19]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005464:	7cfb      	ldrb	r3, [r7, #19]
 8005466:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005474:	4b10      	ldr	r3, [pc, #64]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005482:	490d      	ldr	r1, [pc, #52]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005484:	4313      	orrs	r3, r2
 8005486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00b      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005496:	4b08      	ldr	r3, [pc, #32]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054a6:	4904      	ldr	r1, [pc, #16]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80054ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3718      	adds	r7, #24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	40021000 	.word	0x40021000

080054bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054ca:	4b75      	ldr	r3, [pc, #468]	; (80056a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d018      	beq.n	8005508 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80054d6:	4b72      	ldr	r3, [pc, #456]	; (80056a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f003 0203 	and.w	r2, r3, #3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d10d      	bne.n	8005502 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
       ||
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d009      	beq.n	8005502 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80054ee:	4b6c      	ldr	r3, [pc, #432]	; (80056a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	091b      	lsrs	r3, r3, #4
 80054f4:	f003 0307 	and.w	r3, r3, #7
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
       ||
 80054fe:	429a      	cmp	r2, r3
 8005500:	d047      	beq.n	8005592 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	73fb      	strb	r3, [r7, #15]
 8005506:	e044      	b.n	8005592 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b03      	cmp	r3, #3
 800550e:	d018      	beq.n	8005542 <RCCEx_PLLSAI1_Config+0x86>
 8005510:	2b03      	cmp	r3, #3
 8005512:	d825      	bhi.n	8005560 <RCCEx_PLLSAI1_Config+0xa4>
 8005514:	2b01      	cmp	r3, #1
 8005516:	d002      	beq.n	800551e <RCCEx_PLLSAI1_Config+0x62>
 8005518:	2b02      	cmp	r3, #2
 800551a:	d009      	beq.n	8005530 <RCCEx_PLLSAI1_Config+0x74>
 800551c:	e020      	b.n	8005560 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800551e:	4b60      	ldr	r3, [pc, #384]	; (80056a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d11d      	bne.n	8005566 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800552e:	e01a      	b.n	8005566 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005530:	4b5b      	ldr	r3, [pc, #364]	; (80056a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005538:	2b00      	cmp	r3, #0
 800553a:	d116      	bne.n	800556a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005540:	e013      	b.n	800556a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005542:	4b57      	ldr	r3, [pc, #348]	; (80056a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10f      	bne.n	800556e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800554e:	4b54      	ldr	r3, [pc, #336]	; (80056a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d109      	bne.n	800556e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800555e:	e006      	b.n	800556e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	73fb      	strb	r3, [r7, #15]
      break;
 8005564:	e004      	b.n	8005570 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005566:	bf00      	nop
 8005568:	e002      	b.n	8005570 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800556a:	bf00      	nop
 800556c:	e000      	b.n	8005570 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800556e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005570:	7bfb      	ldrb	r3, [r7, #15]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10d      	bne.n	8005592 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005576:	4b4a      	ldr	r3, [pc, #296]	; (80056a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6819      	ldr	r1, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	3b01      	subs	r3, #1
 8005588:	011b      	lsls	r3, r3, #4
 800558a:	430b      	orrs	r3, r1
 800558c:	4944      	ldr	r1, [pc, #272]	; (80056a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800558e:	4313      	orrs	r3, r2
 8005590:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005592:	7bfb      	ldrb	r3, [r7, #15]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d17d      	bne.n	8005694 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005598:	4b41      	ldr	r3, [pc, #260]	; (80056a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a40      	ldr	r2, [pc, #256]	; (80056a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800559e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055a4:	f7fd fab0 	bl	8002b08 <HAL_GetTick>
 80055a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055aa:	e009      	b.n	80055c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055ac:	f7fd faac 	bl	8002b08 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d902      	bls.n	80055c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	73fb      	strb	r3, [r7, #15]
        break;
 80055be:	e005      	b.n	80055cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055c0:	4b37      	ldr	r3, [pc, #220]	; (80056a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1ef      	bne.n	80055ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d160      	bne.n	8005694 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d111      	bne.n	80055fc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055d8:	4b31      	ldr	r3, [pc, #196]	; (80056a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80055e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6892      	ldr	r2, [r2, #8]
 80055e8:	0211      	lsls	r1, r2, #8
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	68d2      	ldr	r2, [r2, #12]
 80055ee:	0912      	lsrs	r2, r2, #4
 80055f0:	0452      	lsls	r2, r2, #17
 80055f2:	430a      	orrs	r2, r1
 80055f4:	492a      	ldr	r1, [pc, #168]	; (80056a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	610b      	str	r3, [r1, #16]
 80055fa:	e027      	b.n	800564c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d112      	bne.n	8005628 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005602:	4b27      	ldr	r3, [pc, #156]	; (80056a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800560a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	6892      	ldr	r2, [r2, #8]
 8005612:	0211      	lsls	r1, r2, #8
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	6912      	ldr	r2, [r2, #16]
 8005618:	0852      	lsrs	r2, r2, #1
 800561a:	3a01      	subs	r2, #1
 800561c:	0552      	lsls	r2, r2, #21
 800561e:	430a      	orrs	r2, r1
 8005620:	491f      	ldr	r1, [pc, #124]	; (80056a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005622:	4313      	orrs	r3, r2
 8005624:	610b      	str	r3, [r1, #16]
 8005626:	e011      	b.n	800564c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005628:	4b1d      	ldr	r3, [pc, #116]	; (80056a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005630:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6892      	ldr	r2, [r2, #8]
 8005638:	0211      	lsls	r1, r2, #8
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	6952      	ldr	r2, [r2, #20]
 800563e:	0852      	lsrs	r2, r2, #1
 8005640:	3a01      	subs	r2, #1
 8005642:	0652      	lsls	r2, r2, #25
 8005644:	430a      	orrs	r2, r1
 8005646:	4916      	ldr	r1, [pc, #88]	; (80056a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005648:	4313      	orrs	r3, r2
 800564a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800564c:	4b14      	ldr	r3, [pc, #80]	; (80056a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a13      	ldr	r2, [pc, #76]	; (80056a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005652:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005656:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005658:	f7fd fa56 	bl	8002b08 <HAL_GetTick>
 800565c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800565e:	e009      	b.n	8005674 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005660:	f7fd fa52 	bl	8002b08 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	2b02      	cmp	r3, #2
 800566c:	d902      	bls.n	8005674 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	73fb      	strb	r3, [r7, #15]
          break;
 8005672:	e005      	b.n	8005680 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005674:	4b0a      	ldr	r3, [pc, #40]	; (80056a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d0ef      	beq.n	8005660 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005680:	7bfb      	ldrb	r3, [r7, #15]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d106      	bne.n	8005694 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005686:	4b06      	ldr	r3, [pc, #24]	; (80056a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005688:	691a      	ldr	r2, [r3, #16]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	4904      	ldr	r1, [pc, #16]	; (80056a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005690:	4313      	orrs	r3, r2
 8005692:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005694:	7bfb      	ldrb	r3, [r7, #15]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	40021000 	.word	0x40021000

080056a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056b2:	4b6a      	ldr	r3, [pc, #424]	; (800585c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f003 0303 	and.w	r3, r3, #3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d018      	beq.n	80056f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80056be:	4b67      	ldr	r3, [pc, #412]	; (800585c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f003 0203 	and.w	r2, r3, #3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d10d      	bne.n	80056ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
       ||
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d009      	beq.n	80056ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80056d6:	4b61      	ldr	r3, [pc, #388]	; (800585c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	091b      	lsrs	r3, r3, #4
 80056dc:	f003 0307 	and.w	r3, r3, #7
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
       ||
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d047      	beq.n	800577a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	73fb      	strb	r3, [r7, #15]
 80056ee:	e044      	b.n	800577a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	d018      	beq.n	800572a <RCCEx_PLLSAI2_Config+0x86>
 80056f8:	2b03      	cmp	r3, #3
 80056fa:	d825      	bhi.n	8005748 <RCCEx_PLLSAI2_Config+0xa4>
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d002      	beq.n	8005706 <RCCEx_PLLSAI2_Config+0x62>
 8005700:	2b02      	cmp	r3, #2
 8005702:	d009      	beq.n	8005718 <RCCEx_PLLSAI2_Config+0x74>
 8005704:	e020      	b.n	8005748 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005706:	4b55      	ldr	r3, [pc, #340]	; (800585c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d11d      	bne.n	800574e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005716:	e01a      	b.n	800574e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005718:	4b50      	ldr	r3, [pc, #320]	; (800585c <RCCEx_PLLSAI2_Config+0x1b8>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005720:	2b00      	cmp	r3, #0
 8005722:	d116      	bne.n	8005752 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005728:	e013      	b.n	8005752 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800572a:	4b4c      	ldr	r3, [pc, #304]	; (800585c <RCCEx_PLLSAI2_Config+0x1b8>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10f      	bne.n	8005756 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005736:	4b49      	ldr	r3, [pc, #292]	; (800585c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d109      	bne.n	8005756 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005746:	e006      	b.n	8005756 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	73fb      	strb	r3, [r7, #15]
      break;
 800574c:	e004      	b.n	8005758 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800574e:	bf00      	nop
 8005750:	e002      	b.n	8005758 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005752:	bf00      	nop
 8005754:	e000      	b.n	8005758 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005756:	bf00      	nop
    }

    if(status == HAL_OK)
 8005758:	7bfb      	ldrb	r3, [r7, #15]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10d      	bne.n	800577a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800575e:	4b3f      	ldr	r3, [pc, #252]	; (800585c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6819      	ldr	r1, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	3b01      	subs	r3, #1
 8005770:	011b      	lsls	r3, r3, #4
 8005772:	430b      	orrs	r3, r1
 8005774:	4939      	ldr	r1, [pc, #228]	; (800585c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005776:	4313      	orrs	r3, r2
 8005778:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800577a:	7bfb      	ldrb	r3, [r7, #15]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d167      	bne.n	8005850 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005780:	4b36      	ldr	r3, [pc, #216]	; (800585c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a35      	ldr	r2, [pc, #212]	; (800585c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800578a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800578c:	f7fd f9bc 	bl	8002b08 <HAL_GetTick>
 8005790:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005792:	e009      	b.n	80057a8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005794:	f7fd f9b8 	bl	8002b08 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d902      	bls.n	80057a8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	73fb      	strb	r3, [r7, #15]
        break;
 80057a6:	e005      	b.n	80057b4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057a8:	4b2c      	ldr	r3, [pc, #176]	; (800585c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1ef      	bne.n	8005794 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80057b4:	7bfb      	ldrb	r3, [r7, #15]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d14a      	bne.n	8005850 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d111      	bne.n	80057e4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057c0:	4b26      	ldr	r3, [pc, #152]	; (800585c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80057c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6892      	ldr	r2, [r2, #8]
 80057d0:	0211      	lsls	r1, r2, #8
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	68d2      	ldr	r2, [r2, #12]
 80057d6:	0912      	lsrs	r2, r2, #4
 80057d8:	0452      	lsls	r2, r2, #17
 80057da:	430a      	orrs	r2, r1
 80057dc:	491f      	ldr	r1, [pc, #124]	; (800585c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	614b      	str	r3, [r1, #20]
 80057e2:	e011      	b.n	8005808 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057e4:	4b1d      	ldr	r3, [pc, #116]	; (800585c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80057ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	6892      	ldr	r2, [r2, #8]
 80057f4:	0211      	lsls	r1, r2, #8
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6912      	ldr	r2, [r2, #16]
 80057fa:	0852      	lsrs	r2, r2, #1
 80057fc:	3a01      	subs	r2, #1
 80057fe:	0652      	lsls	r2, r2, #25
 8005800:	430a      	orrs	r2, r1
 8005802:	4916      	ldr	r1, [pc, #88]	; (800585c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005804:	4313      	orrs	r3, r2
 8005806:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005808:	4b14      	ldr	r3, [pc, #80]	; (800585c <RCCEx_PLLSAI2_Config+0x1b8>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a13      	ldr	r2, [pc, #76]	; (800585c <RCCEx_PLLSAI2_Config+0x1b8>)
 800580e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005812:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005814:	f7fd f978 	bl	8002b08 <HAL_GetTick>
 8005818:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800581a:	e009      	b.n	8005830 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800581c:	f7fd f974 	bl	8002b08 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d902      	bls.n	8005830 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	73fb      	strb	r3, [r7, #15]
          break;
 800582e:	e005      	b.n	800583c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005830:	4b0a      	ldr	r3, [pc, #40]	; (800585c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d0ef      	beq.n	800581c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800583c:	7bfb      	ldrb	r3, [r7, #15]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d106      	bne.n	8005850 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005842:	4b06      	ldr	r3, [pc, #24]	; (800585c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005844:	695a      	ldr	r2, [r3, #20]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	4904      	ldr	r1, [pc, #16]	; (800585c <RCCEx_PLLSAI2_Config+0x1b8>)
 800584c:	4313      	orrs	r3, r2
 800584e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005850:	7bfb      	ldrb	r3, [r7, #15]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	40021000 	.word	0x40021000

08005860 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e049      	b.n	8005906 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d106      	bne.n	800588c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7fc face 	bl	8001e28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	3304      	adds	r3, #4
 800589c:	4619      	mov	r1, r3
 800589e:	4610      	mov	r0, r2
 80058a0:	f000 fc2c 	bl	80060fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
	...

08005910 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b01      	cmp	r3, #1
 8005922:	d001      	beq.n	8005928 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e04f      	b.n	80059c8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0201 	orr.w	r2, r2, #1
 800593e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a23      	ldr	r2, [pc, #140]	; (80059d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d01d      	beq.n	8005986 <HAL_TIM_Base_Start_IT+0x76>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005952:	d018      	beq.n	8005986 <HAL_TIM_Base_Start_IT+0x76>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a1f      	ldr	r2, [pc, #124]	; (80059d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d013      	beq.n	8005986 <HAL_TIM_Base_Start_IT+0x76>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a1e      	ldr	r2, [pc, #120]	; (80059dc <HAL_TIM_Base_Start_IT+0xcc>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d00e      	beq.n	8005986 <HAL_TIM_Base_Start_IT+0x76>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a1c      	ldr	r2, [pc, #112]	; (80059e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d009      	beq.n	8005986 <HAL_TIM_Base_Start_IT+0x76>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a1b      	ldr	r2, [pc, #108]	; (80059e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d004      	beq.n	8005986 <HAL_TIM_Base_Start_IT+0x76>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a19      	ldr	r2, [pc, #100]	; (80059e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d115      	bne.n	80059b2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	4b17      	ldr	r3, [pc, #92]	; (80059ec <HAL_TIM_Base_Start_IT+0xdc>)
 800598e:	4013      	ands	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2b06      	cmp	r3, #6
 8005996:	d015      	beq.n	80059c4 <HAL_TIM_Base_Start_IT+0xb4>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800599e:	d011      	beq.n	80059c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 0201 	orr.w	r2, r2, #1
 80059ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b0:	e008      	b.n	80059c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f042 0201 	orr.w	r2, r2, #1
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	e000      	b.n	80059c6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3714      	adds	r7, #20
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr
 80059d4:	40012c00 	.word	0x40012c00
 80059d8:	40000400 	.word	0x40000400
 80059dc:	40000800 	.word	0x40000800
 80059e0:	40000c00 	.word	0x40000c00
 80059e4:	40013400 	.word	0x40013400
 80059e8:	40014000 	.word	0x40014000
 80059ec:	00010007 	.word	0x00010007

080059f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e049      	b.n	8005a96 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d106      	bne.n	8005a1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f841 	bl	8005a9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4610      	mov	r0, r2
 8005a30:	f000 fb64 	bl	80060fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b083      	sub	sp, #12
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005aa6:	bf00      	nop
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b082      	sub	sp, #8
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d122      	bne.n	8005b0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d11b      	bne.n	8005b0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f06f 0202 	mvn.w	r2, #2
 8005ade:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	f003 0303 	and.w	r3, r3, #3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fae2 	bl	80060be <HAL_TIM_IC_CaptureCallback>
 8005afa:	e005      	b.n	8005b08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fad4 	bl	80060aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fae5 	bl	80060d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	2b04      	cmp	r3, #4
 8005b1a:	d122      	bne.n	8005b62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f003 0304 	and.w	r3, r3, #4
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d11b      	bne.n	8005b62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f06f 0204 	mvn.w	r2, #4
 8005b32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fab8 	bl	80060be <HAL_TIM_IC_CaptureCallback>
 8005b4e:	e005      	b.n	8005b5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 faaa 	bl	80060aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fabb 	bl	80060d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	f003 0308 	and.w	r3, r3, #8
 8005b6c:	2b08      	cmp	r3, #8
 8005b6e:	d122      	bne.n	8005bb6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f003 0308 	and.w	r3, r3, #8
 8005b7a:	2b08      	cmp	r3, #8
 8005b7c:	d11b      	bne.n	8005bb6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f06f 0208 	mvn.w	r2, #8
 8005b86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2204      	movs	r2, #4
 8005b8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	f003 0303 	and.w	r3, r3, #3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 fa8e 	bl	80060be <HAL_TIM_IC_CaptureCallback>
 8005ba2:	e005      	b.n	8005bb0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 fa80 	bl	80060aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fa91 	bl	80060d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	f003 0310 	and.w	r3, r3, #16
 8005bc0:	2b10      	cmp	r3, #16
 8005bc2:	d122      	bne.n	8005c0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f003 0310 	and.w	r3, r3, #16
 8005bce:	2b10      	cmp	r3, #16
 8005bd0:	d11b      	bne.n	8005c0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f06f 0210 	mvn.w	r2, #16
 8005bda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2208      	movs	r2, #8
 8005be0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fa64 	bl	80060be <HAL_TIM_IC_CaptureCallback>
 8005bf6:	e005      	b.n	8005c04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 fa56 	bl	80060aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fa67 	bl	80060d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d10e      	bne.n	8005c36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d107      	bne.n	8005c36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f06f 0201 	mvn.w	r2, #1
 8005c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f7fb fe6d 	bl	8001910 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c40:	2b80      	cmp	r3, #128	; 0x80
 8005c42:	d10e      	bne.n	8005c62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c4e:	2b80      	cmp	r3, #128	; 0x80
 8005c50:	d107      	bne.n	8005c62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 fee9 	bl	8006a34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c70:	d10e      	bne.n	8005c90 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c7c:	2b80      	cmp	r3, #128	; 0x80
 8005c7e:	d107      	bne.n	8005c90 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fedc 	bl	8006a48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9a:	2b40      	cmp	r3, #64	; 0x40
 8005c9c:	d10e      	bne.n	8005cbc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca8:	2b40      	cmp	r3, #64	; 0x40
 8005caa:	d107      	bne.n	8005cbc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fa15 	bl	80060e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b20      	cmp	r3, #32
 8005cc8:	d10e      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f003 0320 	and.w	r3, r3, #32
 8005cd4:	2b20      	cmp	r3, #32
 8005cd6:	d107      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f06f 0220 	mvn.w	r2, #32
 8005ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fe9c 	bl	8006a20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ce8:	bf00      	nop
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d101      	bne.n	8005d0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	e0ff      	b.n	8005f0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b14      	cmp	r3, #20
 8005d1a:	f200 80f0 	bhi.w	8005efe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005d1e:	a201      	add	r2, pc, #4	; (adr r2, 8005d24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d24:	08005d79 	.word	0x08005d79
 8005d28:	08005eff 	.word	0x08005eff
 8005d2c:	08005eff 	.word	0x08005eff
 8005d30:	08005eff 	.word	0x08005eff
 8005d34:	08005db9 	.word	0x08005db9
 8005d38:	08005eff 	.word	0x08005eff
 8005d3c:	08005eff 	.word	0x08005eff
 8005d40:	08005eff 	.word	0x08005eff
 8005d44:	08005dfb 	.word	0x08005dfb
 8005d48:	08005eff 	.word	0x08005eff
 8005d4c:	08005eff 	.word	0x08005eff
 8005d50:	08005eff 	.word	0x08005eff
 8005d54:	08005e3b 	.word	0x08005e3b
 8005d58:	08005eff 	.word	0x08005eff
 8005d5c:	08005eff 	.word	0x08005eff
 8005d60:	08005eff 	.word	0x08005eff
 8005d64:	08005e7d 	.word	0x08005e7d
 8005d68:	08005eff 	.word	0x08005eff
 8005d6c:	08005eff 	.word	0x08005eff
 8005d70:	08005eff 	.word	0x08005eff
 8005d74:	08005ebd 	.word	0x08005ebd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68b9      	ldr	r1, [r7, #8]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 fa56 	bl	8006230 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699a      	ldr	r2, [r3, #24]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0208 	orr.w	r2, r2, #8
 8005d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	699a      	ldr	r2, [r3, #24]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0204 	bic.w	r2, r2, #4
 8005da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6999      	ldr	r1, [r3, #24]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	691a      	ldr	r2, [r3, #16]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	619a      	str	r2, [r3, #24]
      break;
 8005db6:	e0a5      	b.n	8005f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68b9      	ldr	r1, [r7, #8]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 fac6 	bl	8006350 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	699a      	ldr	r2, [r3, #24]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	699a      	ldr	r2, [r3, #24]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6999      	ldr	r1, [r3, #24]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	021a      	lsls	r2, r3, #8
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	430a      	orrs	r2, r1
 8005df6:	619a      	str	r2, [r3, #24]
      break;
 8005df8:	e084      	b.n	8005f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68b9      	ldr	r1, [r7, #8]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f000 fb2f 	bl	8006464 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	69da      	ldr	r2, [r3, #28]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f042 0208 	orr.w	r2, r2, #8
 8005e14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	69da      	ldr	r2, [r3, #28]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0204 	bic.w	r2, r2, #4
 8005e24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	69d9      	ldr	r1, [r3, #28]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	691a      	ldr	r2, [r3, #16]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	61da      	str	r2, [r3, #28]
      break;
 8005e38:	e064      	b.n	8005f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68b9      	ldr	r1, [r7, #8]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f000 fb97 	bl	8006574 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	69da      	ldr	r2, [r3, #28]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	69da      	ldr	r2, [r3, #28]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69d9      	ldr	r1, [r3, #28]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	021a      	lsls	r2, r3, #8
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	61da      	str	r2, [r3, #28]
      break;
 8005e7a:	e043      	b.n	8005f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68b9      	ldr	r1, [r7, #8]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 fbe0 	bl	8006648 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f042 0208 	orr.w	r2, r2, #8
 8005e96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0204 	bic.w	r2, r2, #4
 8005ea6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	691a      	ldr	r2, [r3, #16]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005eba:	e023      	b.n	8005f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68b9      	ldr	r1, [r7, #8]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 fc24 	bl	8006710 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ed6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ee6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	021a      	lsls	r2, r3, #8
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005efc:	e002      	b.n	8005f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	75fb      	strb	r3, [r7, #23]
      break;
 8005f02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop

08005f18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d101      	bne.n	8005f34 <HAL_TIM_ConfigClockSource+0x1c>
 8005f30:	2302      	movs	r3, #2
 8005f32:	e0b6      	b.n	80060a2 <HAL_TIM_ConfigClockSource+0x18a>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f70:	d03e      	beq.n	8005ff0 <HAL_TIM_ConfigClockSource+0xd8>
 8005f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f76:	f200 8087 	bhi.w	8006088 <HAL_TIM_ConfigClockSource+0x170>
 8005f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f7e:	f000 8086 	beq.w	800608e <HAL_TIM_ConfigClockSource+0x176>
 8005f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f86:	d87f      	bhi.n	8006088 <HAL_TIM_ConfigClockSource+0x170>
 8005f88:	2b70      	cmp	r3, #112	; 0x70
 8005f8a:	d01a      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0xaa>
 8005f8c:	2b70      	cmp	r3, #112	; 0x70
 8005f8e:	d87b      	bhi.n	8006088 <HAL_TIM_ConfigClockSource+0x170>
 8005f90:	2b60      	cmp	r3, #96	; 0x60
 8005f92:	d050      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0x11e>
 8005f94:	2b60      	cmp	r3, #96	; 0x60
 8005f96:	d877      	bhi.n	8006088 <HAL_TIM_ConfigClockSource+0x170>
 8005f98:	2b50      	cmp	r3, #80	; 0x50
 8005f9a:	d03c      	beq.n	8006016 <HAL_TIM_ConfigClockSource+0xfe>
 8005f9c:	2b50      	cmp	r3, #80	; 0x50
 8005f9e:	d873      	bhi.n	8006088 <HAL_TIM_ConfigClockSource+0x170>
 8005fa0:	2b40      	cmp	r3, #64	; 0x40
 8005fa2:	d058      	beq.n	8006056 <HAL_TIM_ConfigClockSource+0x13e>
 8005fa4:	2b40      	cmp	r3, #64	; 0x40
 8005fa6:	d86f      	bhi.n	8006088 <HAL_TIM_ConfigClockSource+0x170>
 8005fa8:	2b30      	cmp	r3, #48	; 0x30
 8005faa:	d064      	beq.n	8006076 <HAL_TIM_ConfigClockSource+0x15e>
 8005fac:	2b30      	cmp	r3, #48	; 0x30
 8005fae:	d86b      	bhi.n	8006088 <HAL_TIM_ConfigClockSource+0x170>
 8005fb0:	2b20      	cmp	r3, #32
 8005fb2:	d060      	beq.n	8006076 <HAL_TIM_ConfigClockSource+0x15e>
 8005fb4:	2b20      	cmp	r3, #32
 8005fb6:	d867      	bhi.n	8006088 <HAL_TIM_ConfigClockSource+0x170>
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d05c      	beq.n	8006076 <HAL_TIM_ConfigClockSource+0x15e>
 8005fbc:	2b10      	cmp	r3, #16
 8005fbe:	d05a      	beq.n	8006076 <HAL_TIM_ConfigClockSource+0x15e>
 8005fc0:	e062      	b.n	8006088 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6818      	ldr	r0, [r3, #0]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	6899      	ldr	r1, [r3, #8]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	f000 fc7d 	bl	80068d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fe4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	609a      	str	r2, [r3, #8]
      break;
 8005fee:	e04f      	b.n	8006090 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6818      	ldr	r0, [r3, #0]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	6899      	ldr	r1, [r3, #8]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f000 fc66 	bl	80068d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006012:	609a      	str	r2, [r3, #8]
      break;
 8006014:	e03c      	b.n	8006090 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6818      	ldr	r0, [r3, #0]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	6859      	ldr	r1, [r3, #4]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	461a      	mov	r2, r3
 8006024:	f000 fbda 	bl	80067dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2150      	movs	r1, #80	; 0x50
 800602e:	4618      	mov	r0, r3
 8006030:	f000 fc33 	bl	800689a <TIM_ITRx_SetConfig>
      break;
 8006034:	e02c      	b.n	8006090 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6818      	ldr	r0, [r3, #0]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	6859      	ldr	r1, [r3, #4]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	461a      	mov	r2, r3
 8006044:	f000 fbf9 	bl	800683a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2160      	movs	r1, #96	; 0x60
 800604e:	4618      	mov	r0, r3
 8006050:	f000 fc23 	bl	800689a <TIM_ITRx_SetConfig>
      break;
 8006054:	e01c      	b.n	8006090 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6818      	ldr	r0, [r3, #0]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	6859      	ldr	r1, [r3, #4]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	461a      	mov	r2, r3
 8006064:	f000 fbba 	bl	80067dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2140      	movs	r1, #64	; 0x40
 800606e:	4618      	mov	r0, r3
 8006070:	f000 fc13 	bl	800689a <TIM_ITRx_SetConfig>
      break;
 8006074:	e00c      	b.n	8006090 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4619      	mov	r1, r3
 8006080:	4610      	mov	r0, r2
 8006082:	f000 fc0a 	bl	800689a <TIM_ITRx_SetConfig>
      break;
 8006086:	e003      	b.n	8006090 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	73fb      	strb	r3, [r7, #15]
      break;
 800608c:	e000      	b.n	8006090 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800608e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b083      	sub	sp, #12
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060b2:	bf00      	nop
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060be:	b480      	push	{r7}
 80060c0:	b083      	sub	sp, #12
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060c6:	bf00      	nop
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b083      	sub	sp, #12
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060da:	bf00      	nop
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b083      	sub	sp, #12
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060ee:	bf00      	nop
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
	...

080060fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a40      	ldr	r2, [pc, #256]	; (8006210 <TIM_Base_SetConfig+0x114>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d013      	beq.n	800613c <TIM_Base_SetConfig+0x40>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800611a:	d00f      	beq.n	800613c <TIM_Base_SetConfig+0x40>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a3d      	ldr	r2, [pc, #244]	; (8006214 <TIM_Base_SetConfig+0x118>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d00b      	beq.n	800613c <TIM_Base_SetConfig+0x40>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a3c      	ldr	r2, [pc, #240]	; (8006218 <TIM_Base_SetConfig+0x11c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d007      	beq.n	800613c <TIM_Base_SetConfig+0x40>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a3b      	ldr	r2, [pc, #236]	; (800621c <TIM_Base_SetConfig+0x120>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d003      	beq.n	800613c <TIM_Base_SetConfig+0x40>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a3a      	ldr	r2, [pc, #232]	; (8006220 <TIM_Base_SetConfig+0x124>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d108      	bne.n	800614e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	4313      	orrs	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a2f      	ldr	r2, [pc, #188]	; (8006210 <TIM_Base_SetConfig+0x114>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d01f      	beq.n	8006196 <TIM_Base_SetConfig+0x9a>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800615c:	d01b      	beq.n	8006196 <TIM_Base_SetConfig+0x9a>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a2c      	ldr	r2, [pc, #176]	; (8006214 <TIM_Base_SetConfig+0x118>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d017      	beq.n	8006196 <TIM_Base_SetConfig+0x9a>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a2b      	ldr	r2, [pc, #172]	; (8006218 <TIM_Base_SetConfig+0x11c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d013      	beq.n	8006196 <TIM_Base_SetConfig+0x9a>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a2a      	ldr	r2, [pc, #168]	; (800621c <TIM_Base_SetConfig+0x120>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d00f      	beq.n	8006196 <TIM_Base_SetConfig+0x9a>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a29      	ldr	r2, [pc, #164]	; (8006220 <TIM_Base_SetConfig+0x124>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d00b      	beq.n	8006196 <TIM_Base_SetConfig+0x9a>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a28      	ldr	r2, [pc, #160]	; (8006224 <TIM_Base_SetConfig+0x128>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d007      	beq.n	8006196 <TIM_Base_SetConfig+0x9a>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a27      	ldr	r2, [pc, #156]	; (8006228 <TIM_Base_SetConfig+0x12c>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d003      	beq.n	8006196 <TIM_Base_SetConfig+0x9a>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a26      	ldr	r2, [pc, #152]	; (800622c <TIM_Base_SetConfig+0x130>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d108      	bne.n	80061a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800619c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	689a      	ldr	r2, [r3, #8]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a10      	ldr	r2, [pc, #64]	; (8006210 <TIM_Base_SetConfig+0x114>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d00f      	beq.n	80061f4 <TIM_Base_SetConfig+0xf8>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a12      	ldr	r2, [pc, #72]	; (8006220 <TIM_Base_SetConfig+0x124>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d00b      	beq.n	80061f4 <TIM_Base_SetConfig+0xf8>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a11      	ldr	r2, [pc, #68]	; (8006224 <TIM_Base_SetConfig+0x128>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d007      	beq.n	80061f4 <TIM_Base_SetConfig+0xf8>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a10      	ldr	r2, [pc, #64]	; (8006228 <TIM_Base_SetConfig+0x12c>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d003      	beq.n	80061f4 <TIM_Base_SetConfig+0xf8>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a0f      	ldr	r2, [pc, #60]	; (800622c <TIM_Base_SetConfig+0x130>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d103      	bne.n	80061fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	691a      	ldr	r2, [r3, #16]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	615a      	str	r2, [r3, #20]
}
 8006202:	bf00      	nop
 8006204:	3714      	adds	r7, #20
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	40012c00 	.word	0x40012c00
 8006214:	40000400 	.word	0x40000400
 8006218:	40000800 	.word	0x40000800
 800621c:	40000c00 	.word	0x40000c00
 8006220:	40013400 	.word	0x40013400
 8006224:	40014000 	.word	0x40014000
 8006228:	40014400 	.word	0x40014400
 800622c:	40014800 	.word	0x40014800

08006230 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	f023 0201 	bic.w	r2, r3, #1
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800625e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 0303 	bic.w	r3, r3, #3
 800626a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	4313      	orrs	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f023 0302 	bic.w	r3, r3, #2
 800627c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	4313      	orrs	r3, r2
 8006286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a2c      	ldr	r2, [pc, #176]	; (800633c <TIM_OC1_SetConfig+0x10c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d00f      	beq.n	80062b0 <TIM_OC1_SetConfig+0x80>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a2b      	ldr	r2, [pc, #172]	; (8006340 <TIM_OC1_SetConfig+0x110>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d00b      	beq.n	80062b0 <TIM_OC1_SetConfig+0x80>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a2a      	ldr	r2, [pc, #168]	; (8006344 <TIM_OC1_SetConfig+0x114>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d007      	beq.n	80062b0 <TIM_OC1_SetConfig+0x80>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a29      	ldr	r2, [pc, #164]	; (8006348 <TIM_OC1_SetConfig+0x118>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d003      	beq.n	80062b0 <TIM_OC1_SetConfig+0x80>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a28      	ldr	r2, [pc, #160]	; (800634c <TIM_OC1_SetConfig+0x11c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d10c      	bne.n	80062ca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f023 0308 	bic.w	r3, r3, #8
 80062b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	4313      	orrs	r3, r2
 80062c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f023 0304 	bic.w	r3, r3, #4
 80062c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a1b      	ldr	r2, [pc, #108]	; (800633c <TIM_OC1_SetConfig+0x10c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d00f      	beq.n	80062f2 <TIM_OC1_SetConfig+0xc2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a1a      	ldr	r2, [pc, #104]	; (8006340 <TIM_OC1_SetConfig+0x110>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d00b      	beq.n	80062f2 <TIM_OC1_SetConfig+0xc2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a19      	ldr	r2, [pc, #100]	; (8006344 <TIM_OC1_SetConfig+0x114>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d007      	beq.n	80062f2 <TIM_OC1_SetConfig+0xc2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a18      	ldr	r2, [pc, #96]	; (8006348 <TIM_OC1_SetConfig+0x118>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d003      	beq.n	80062f2 <TIM_OC1_SetConfig+0xc2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a17      	ldr	r2, [pc, #92]	; (800634c <TIM_OC1_SetConfig+0x11c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d111      	bne.n	8006316 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	4313      	orrs	r3, r2
 800630a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	4313      	orrs	r3, r2
 8006314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	621a      	str	r2, [r3, #32]
}
 8006330:	bf00      	nop
 8006332:	371c      	adds	r7, #28
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	40012c00 	.word	0x40012c00
 8006340:	40013400 	.word	0x40013400
 8006344:	40014000 	.word	0x40014000
 8006348:	40014400 	.word	0x40014400
 800634c:	40014800 	.word	0x40014800

08006350 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006350:	b480      	push	{r7}
 8006352:	b087      	sub	sp, #28
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	f023 0210 	bic.w	r2, r3, #16
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800637e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800638a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	021b      	lsls	r3, r3, #8
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	4313      	orrs	r3, r2
 8006396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f023 0320 	bic.w	r3, r3, #32
 800639e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	011b      	lsls	r3, r3, #4
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a28      	ldr	r2, [pc, #160]	; (8006450 <TIM_OC2_SetConfig+0x100>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d003      	beq.n	80063bc <TIM_OC2_SetConfig+0x6c>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a27      	ldr	r2, [pc, #156]	; (8006454 <TIM_OC2_SetConfig+0x104>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d10d      	bne.n	80063d8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	011b      	lsls	r3, r3, #4
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a1d      	ldr	r2, [pc, #116]	; (8006450 <TIM_OC2_SetConfig+0x100>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d00f      	beq.n	8006400 <TIM_OC2_SetConfig+0xb0>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a1c      	ldr	r2, [pc, #112]	; (8006454 <TIM_OC2_SetConfig+0x104>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d00b      	beq.n	8006400 <TIM_OC2_SetConfig+0xb0>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a1b      	ldr	r2, [pc, #108]	; (8006458 <TIM_OC2_SetConfig+0x108>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d007      	beq.n	8006400 <TIM_OC2_SetConfig+0xb0>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a1a      	ldr	r2, [pc, #104]	; (800645c <TIM_OC2_SetConfig+0x10c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d003      	beq.n	8006400 <TIM_OC2_SetConfig+0xb0>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a19      	ldr	r2, [pc, #100]	; (8006460 <TIM_OC2_SetConfig+0x110>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d113      	bne.n	8006428 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006406:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800640e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	4313      	orrs	r3, r2
 8006426:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	621a      	str	r2, [r3, #32]
}
 8006442:	bf00      	nop
 8006444:	371c      	adds	r7, #28
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	40012c00 	.word	0x40012c00
 8006454:	40013400 	.word	0x40013400
 8006458:	40014000 	.word	0x40014000
 800645c:	40014400 	.word	0x40014400
 8006460:	40014800 	.word	0x40014800

08006464 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006464:	b480      	push	{r7}
 8006466:	b087      	sub	sp, #28
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f023 0303 	bic.w	r3, r3, #3
 800649e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	021b      	lsls	r3, r3, #8
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a27      	ldr	r2, [pc, #156]	; (8006560 <TIM_OC3_SetConfig+0xfc>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d003      	beq.n	80064ce <TIM_OC3_SetConfig+0x6a>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a26      	ldr	r2, [pc, #152]	; (8006564 <TIM_OC3_SetConfig+0x100>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d10d      	bne.n	80064ea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	021b      	lsls	r3, r3, #8
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	4313      	orrs	r3, r2
 80064e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a1c      	ldr	r2, [pc, #112]	; (8006560 <TIM_OC3_SetConfig+0xfc>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d00f      	beq.n	8006512 <TIM_OC3_SetConfig+0xae>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a1b      	ldr	r2, [pc, #108]	; (8006564 <TIM_OC3_SetConfig+0x100>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d00b      	beq.n	8006512 <TIM_OC3_SetConfig+0xae>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a1a      	ldr	r2, [pc, #104]	; (8006568 <TIM_OC3_SetConfig+0x104>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d007      	beq.n	8006512 <TIM_OC3_SetConfig+0xae>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a19      	ldr	r2, [pc, #100]	; (800656c <TIM_OC3_SetConfig+0x108>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d003      	beq.n	8006512 <TIM_OC3_SetConfig+0xae>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a18      	ldr	r2, [pc, #96]	; (8006570 <TIM_OC3_SetConfig+0x10c>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d113      	bne.n	800653a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	011b      	lsls	r3, r3, #4
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	4313      	orrs	r3, r2
 800652c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	011b      	lsls	r3, r3, #4
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	4313      	orrs	r3, r2
 8006538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	621a      	str	r2, [r3, #32]
}
 8006554:	bf00      	nop
 8006556:	371c      	adds	r7, #28
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	40012c00 	.word	0x40012c00
 8006564:	40013400 	.word	0x40013400
 8006568:	40014000 	.word	0x40014000
 800656c:	40014400 	.word	0x40014400
 8006570:	40014800 	.word	0x40014800

08006574 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	021b      	lsls	r3, r3, #8
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	031b      	lsls	r3, r3, #12
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a18      	ldr	r2, [pc, #96]	; (8006634 <TIM_OC4_SetConfig+0xc0>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d00f      	beq.n	80065f8 <TIM_OC4_SetConfig+0x84>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a17      	ldr	r2, [pc, #92]	; (8006638 <TIM_OC4_SetConfig+0xc4>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d00b      	beq.n	80065f8 <TIM_OC4_SetConfig+0x84>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a16      	ldr	r2, [pc, #88]	; (800663c <TIM_OC4_SetConfig+0xc8>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d007      	beq.n	80065f8 <TIM_OC4_SetConfig+0x84>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a15      	ldr	r2, [pc, #84]	; (8006640 <TIM_OC4_SetConfig+0xcc>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d003      	beq.n	80065f8 <TIM_OC4_SetConfig+0x84>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a14      	ldr	r2, [pc, #80]	; (8006644 <TIM_OC4_SetConfig+0xd0>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d109      	bne.n	800660c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	019b      	lsls	r3, r3, #6
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	4313      	orrs	r3, r2
 800660a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	621a      	str	r2, [r3, #32]
}
 8006626:	bf00      	nop
 8006628:	371c      	adds	r7, #28
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	40012c00 	.word	0x40012c00
 8006638:	40013400 	.word	0x40013400
 800663c:	40014000 	.word	0x40014000
 8006640:	40014400 	.word	0x40014400
 8006644:	40014800 	.word	0x40014800

08006648 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006648:	b480      	push	{r7}
 800664a:	b087      	sub	sp, #28
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	4313      	orrs	r3, r2
 8006684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800668c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	041b      	lsls	r3, r3, #16
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	4313      	orrs	r3, r2
 8006698:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a17      	ldr	r2, [pc, #92]	; (80066fc <TIM_OC5_SetConfig+0xb4>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d00f      	beq.n	80066c2 <TIM_OC5_SetConfig+0x7a>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a16      	ldr	r2, [pc, #88]	; (8006700 <TIM_OC5_SetConfig+0xb8>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d00b      	beq.n	80066c2 <TIM_OC5_SetConfig+0x7a>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a15      	ldr	r2, [pc, #84]	; (8006704 <TIM_OC5_SetConfig+0xbc>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d007      	beq.n	80066c2 <TIM_OC5_SetConfig+0x7a>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a14      	ldr	r2, [pc, #80]	; (8006708 <TIM_OC5_SetConfig+0xc0>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d003      	beq.n	80066c2 <TIM_OC5_SetConfig+0x7a>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a13      	ldr	r2, [pc, #76]	; (800670c <TIM_OC5_SetConfig+0xc4>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d109      	bne.n	80066d6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	021b      	lsls	r3, r3, #8
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	621a      	str	r2, [r3, #32]
}
 80066f0:	bf00      	nop
 80066f2:	371c      	adds	r7, #28
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	40012c00 	.word	0x40012c00
 8006700:	40013400 	.word	0x40013400
 8006704:	40014000 	.word	0x40014000
 8006708:	40014400 	.word	0x40014400
 800670c:	40014800 	.word	0x40014800

08006710 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800673e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	021b      	lsls	r3, r3, #8
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	4313      	orrs	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006756:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	051b      	lsls	r3, r3, #20
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	4313      	orrs	r3, r2
 8006762:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a18      	ldr	r2, [pc, #96]	; (80067c8 <TIM_OC6_SetConfig+0xb8>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d00f      	beq.n	800678c <TIM_OC6_SetConfig+0x7c>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a17      	ldr	r2, [pc, #92]	; (80067cc <TIM_OC6_SetConfig+0xbc>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d00b      	beq.n	800678c <TIM_OC6_SetConfig+0x7c>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a16      	ldr	r2, [pc, #88]	; (80067d0 <TIM_OC6_SetConfig+0xc0>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d007      	beq.n	800678c <TIM_OC6_SetConfig+0x7c>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a15      	ldr	r2, [pc, #84]	; (80067d4 <TIM_OC6_SetConfig+0xc4>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d003      	beq.n	800678c <TIM_OC6_SetConfig+0x7c>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a14      	ldr	r2, [pc, #80]	; (80067d8 <TIM_OC6_SetConfig+0xc8>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d109      	bne.n	80067a0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006792:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	029b      	lsls	r3, r3, #10
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	4313      	orrs	r3, r2
 800679e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	621a      	str	r2, [r3, #32]
}
 80067ba:	bf00      	nop
 80067bc:	371c      	adds	r7, #28
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	40012c00 	.word	0x40012c00
 80067cc:	40013400 	.word	0x40013400
 80067d0:	40014000 	.word	0x40014000
 80067d4:	40014400 	.word	0x40014400
 80067d8:	40014800 	.word	0x40014800

080067dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067dc:	b480      	push	{r7}
 80067de:	b087      	sub	sp, #28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	f023 0201 	bic.w	r2, r3, #1
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006806:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	011b      	lsls	r3, r3, #4
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	4313      	orrs	r3, r2
 8006810:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f023 030a 	bic.w	r3, r3, #10
 8006818:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	4313      	orrs	r3, r2
 8006820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	621a      	str	r2, [r3, #32]
}
 800682e:	bf00      	nop
 8006830:	371c      	adds	r7, #28
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800683a:	b480      	push	{r7}
 800683c:	b087      	sub	sp, #28
 800683e:	af00      	add	r7, sp, #0
 8006840:	60f8      	str	r0, [r7, #12]
 8006842:	60b9      	str	r1, [r7, #8]
 8006844:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	f023 0210 	bic.w	r2, r3, #16
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6a1b      	ldr	r3, [r3, #32]
 800685c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006864:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	031b      	lsls	r3, r3, #12
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	4313      	orrs	r3, r2
 800686e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006876:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	011b      	lsls	r3, r3, #4
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	4313      	orrs	r3, r2
 8006880:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	621a      	str	r2, [r3, #32]
}
 800688e:	bf00      	nop
 8006890:	371c      	adds	r7, #28
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800689a:	b480      	push	{r7}
 800689c:	b085      	sub	sp, #20
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	f043 0307 	orr.w	r3, r3, #7
 80068bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	609a      	str	r2, [r3, #8]
}
 80068c4:	bf00      	nop
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b087      	sub	sp, #28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	021a      	lsls	r2, r3, #8
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	431a      	orrs	r2, r3
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	609a      	str	r2, [r3, #8]
}
 8006904:	bf00      	nop
 8006906:	371c      	adds	r7, #28
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006920:	2b01      	cmp	r3, #1
 8006922:	d101      	bne.n	8006928 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006924:	2302      	movs	r3, #2
 8006926:	e068      	b.n	80069fa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2202      	movs	r2, #2
 8006934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a2e      	ldr	r2, [pc, #184]	; (8006a08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d004      	beq.n	800695c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a2d      	ldr	r2, [pc, #180]	; (8006a0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d108      	bne.n	800696e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006962:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	4313      	orrs	r3, r2
 800696c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006974:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	4313      	orrs	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a1e      	ldr	r2, [pc, #120]	; (8006a08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d01d      	beq.n	80069ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800699a:	d018      	beq.n	80069ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a1b      	ldr	r2, [pc, #108]	; (8006a10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d013      	beq.n	80069ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a1a      	ldr	r2, [pc, #104]	; (8006a14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d00e      	beq.n	80069ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a18      	ldr	r2, [pc, #96]	; (8006a18 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d009      	beq.n	80069ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a13      	ldr	r2, [pc, #76]	; (8006a0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d004      	beq.n	80069ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a14      	ldr	r2, [pc, #80]	; (8006a1c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d10c      	bne.n	80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	4313      	orrs	r3, r2
 80069de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	40012c00 	.word	0x40012c00
 8006a0c:	40013400 	.word	0x40013400
 8006a10:	40000400 	.word	0x40000400
 8006a14:	40000800 	.word	0x40000800
 8006a18:	40000c00 	.word	0x40000c00
 8006a1c:	40014000 	.word	0x40014000

08006a20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e040      	b.n	8006af0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d106      	bne.n	8006a84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7fb fa7a 	bl	8001f78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2224      	movs	r2, #36	; 0x24
 8006a88:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f022 0201 	bic.w	r2, r2, #1
 8006a98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 fbc2 	bl	8007224 <UART_SetConfig>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d101      	bne.n	8006aaa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e022      	b.n	8006af0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d002      	beq.n	8006ab8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 fe6e 	bl	8007794 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	685a      	ldr	r2, [r3, #4]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ac6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	689a      	ldr	r2, [r3, #8]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ad6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0201 	orr.w	r2, r2, #1
 8006ae6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fef5 	bl	80078d8 <UART_CheckIdleState>
 8006aee:	4603      	mov	r3, r0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08a      	sub	sp, #40	; 0x28
 8006afc:	af02      	add	r7, sp, #8
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	603b      	str	r3, [r7, #0]
 8006b04:	4613      	mov	r3, r2
 8006b06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b0c:	2b20      	cmp	r3, #32
 8006b0e:	f040 8082 	bne.w	8006c16 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d002      	beq.n	8006b1e <HAL_UART_Transmit+0x26>
 8006b18:	88fb      	ldrh	r3, [r7, #6]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d101      	bne.n	8006b22 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e07a      	b.n	8006c18 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d101      	bne.n	8006b30 <HAL_UART_Transmit+0x38>
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	e073      	b.n	8006c18 <HAL_UART_Transmit+0x120>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2221      	movs	r2, #33	; 0x21
 8006b44:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b46:	f7fb ffdf 	bl	8002b08 <HAL_GetTick>
 8006b4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	88fa      	ldrh	r2, [r7, #6]
 8006b50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	88fa      	ldrh	r2, [r7, #6]
 8006b58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b64:	d108      	bne.n	8006b78 <HAL_UART_Transmit+0x80>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d104      	bne.n	8006b78 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	61bb      	str	r3, [r7, #24]
 8006b76:	e003      	b.n	8006b80 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006b88:	e02d      	b.n	8006be6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	2200      	movs	r2, #0
 8006b92:	2180      	movs	r1, #128	; 0x80
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 fee8 	bl	800796a <UART_WaitOnFlagUntilTimeout>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e039      	b.n	8006c18 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10b      	bne.n	8006bc2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	881a      	ldrh	r2, [r3, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bb6:	b292      	uxth	r2, r2
 8006bb8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	3302      	adds	r3, #2
 8006bbe:	61bb      	str	r3, [r7, #24]
 8006bc0:	e008      	b.n	8006bd4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	781a      	ldrb	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	b292      	uxth	r2, r2
 8006bcc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1cb      	bne.n	8006b8a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	2140      	movs	r1, #64	; 0x40
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f000 feb4 	bl	800796a <UART_WaitOnFlagUntilTimeout>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d001      	beq.n	8006c0c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e005      	b.n	8006c18 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006c12:	2300      	movs	r3, #0
 8006c14:	e000      	b.n	8006c18 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006c16:	2302      	movs	r3, #2
  }
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3720      	adds	r7, #32
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b0ba      	sub	sp, #232	; 0xe8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c46:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006c4a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006c4e:	4013      	ands	r3, r2
 8006c50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006c54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d115      	bne.n	8006c88 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c60:	f003 0320 	and.w	r3, r3, #32
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00f      	beq.n	8006c88 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c6c:	f003 0320 	and.w	r3, r3, #32
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d009      	beq.n	8006c88 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 82a6 	beq.w	80071ca <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	4798      	blx	r3
      }
      return;
 8006c86:	e2a0      	b.n	80071ca <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006c88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 8117 	beq.w	8006ec0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c96:	f003 0301 	and.w	r3, r3, #1
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d106      	bne.n	8006cac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006c9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006ca2:	4b85      	ldr	r3, [pc, #532]	; (8006eb8 <HAL_UART_IRQHandler+0x298>)
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f000 810a 	beq.w	8006ec0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d011      	beq.n	8006cdc <HAL_UART_IRQHandler+0xbc>
 8006cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00b      	beq.n	8006cdc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cd2:	f043 0201 	orr.w	r2, r3, #1
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce0:	f003 0302 	and.w	r3, r3, #2
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d011      	beq.n	8006d0c <HAL_UART_IRQHandler+0xec>
 8006ce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00b      	beq.n	8006d0c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d02:	f043 0204 	orr.w	r2, r3, #4
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d10:	f003 0304 	and.w	r3, r3, #4
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d011      	beq.n	8006d3c <HAL_UART_IRQHandler+0x11c>
 8006d18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d1c:	f003 0301 	and.w	r3, r3, #1
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00b      	beq.n	8006d3c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2204      	movs	r2, #4
 8006d2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d32:	f043 0202 	orr.w	r2, r3, #2
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d40:	f003 0308 	and.w	r3, r3, #8
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d017      	beq.n	8006d78 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d4c:	f003 0320 	and.w	r3, r3, #32
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d105      	bne.n	8006d60 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006d54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d58:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00b      	beq.n	8006d78 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2208      	movs	r2, #8
 8006d66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d6e:	f043 0208 	orr.w	r2, r3, #8
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d012      	beq.n	8006daa <HAL_UART_IRQHandler+0x18a>
 8006d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00c      	beq.n	8006daa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006da0:	f043 0220 	orr.w	r2, r3, #32
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 820c 	beq.w	80071ce <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dba:	f003 0320 	and.w	r3, r3, #32
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00d      	beq.n	8006dde <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dc6:	f003 0320 	and.w	r3, r3, #32
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d007      	beq.n	8006dde <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d003      	beq.n	8006dde <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006de4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df2:	2b40      	cmp	r3, #64	; 0x40
 8006df4:	d005      	beq.n	8006e02 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006df6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dfa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d04f      	beq.n	8006ea2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fe75 	bl	8007af2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e12:	2b40      	cmp	r3, #64	; 0x40
 8006e14:	d141      	bne.n	8006e9a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	3308      	adds	r3, #8
 8006e1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e24:	e853 3f00 	ldrex	r3, [r3]
 8006e28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3308      	adds	r3, #8
 8006e3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e52:	e841 2300 	strex	r3, r2, [r1]
 8006e56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1d9      	bne.n	8006e16 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d013      	beq.n	8006e92 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6e:	4a13      	ldr	r2, [pc, #76]	; (8006ebc <HAL_UART_IRQHandler+0x29c>)
 8006e70:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7fc f88c 	bl	8002f94 <HAL_DMA_Abort_IT>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d017      	beq.n	8006eb2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006e8c:	4610      	mov	r0, r2
 8006e8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e90:	e00f      	b.n	8006eb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f9b0 	bl	80071f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e98:	e00b      	b.n	8006eb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f9ac 	bl	80071f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ea0:	e007      	b.n	8006eb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f9a8 	bl	80071f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006eb0:	e18d      	b.n	80071ce <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb2:	bf00      	nop
    return;
 8006eb4:	e18b      	b.n	80071ce <HAL_UART_IRQHandler+0x5ae>
 8006eb6:	bf00      	nop
 8006eb8:	04000120 	.word	0x04000120
 8006ebc:	08007bb9 	.word	0x08007bb9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	f040 8146 	bne.w	8007156 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ece:	f003 0310 	and.w	r3, r3, #16
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f000 813f 	beq.w	8007156 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006edc:	f003 0310 	and.w	r3, r3, #16
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f000 8138 	beq.w	8007156 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2210      	movs	r2, #16
 8006eec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef8:	2b40      	cmp	r3, #64	; 0x40
 8006efa:	f040 80b4 	bne.w	8007066 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f0a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 815f 	beq.w	80071d2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	f080 8157 	bcs.w	80071d2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0320 	and.w	r3, r3, #32
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f040 8085 	bne.w	800704a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f4c:	e853 3f00 	ldrex	r3, [r3]
 8006f50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	461a      	mov	r2, r3
 8006f66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f6e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f7a:	e841 2300 	strex	r3, r2, [r1]
 8006f7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1da      	bne.n	8006f40 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	3308      	adds	r3, #8
 8006f90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f94:	e853 3f00 	ldrex	r3, [r3]
 8006f98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f9c:	f023 0301 	bic.w	r3, r3, #1
 8006fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	3308      	adds	r3, #8
 8006faa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006fae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006fb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006fb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006fba:	e841 2300 	strex	r3, r2, [r1]
 8006fbe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006fc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1e1      	bne.n	8006f8a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3308      	adds	r3, #8
 8006fcc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fd0:	e853 3f00 	ldrex	r3, [r3]
 8006fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006fd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006fea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006fec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ff0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ff2:	e841 2300 	strex	r3, r2, [r1]
 8006ff6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1e3      	bne.n	8006fc6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2220      	movs	r2, #32
 8007002:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007012:	e853 3f00 	ldrex	r3, [r3]
 8007016:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800701a:	f023 0310 	bic.w	r3, r3, #16
 800701e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	461a      	mov	r2, r3
 8007028:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800702c:	65bb      	str	r3, [r7, #88]	; 0x58
 800702e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007030:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007032:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007034:	e841 2300 	strex	r3, r2, [r1]
 8007038:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800703a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1e4      	bne.n	800700a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007044:	4618      	mov	r0, r3
 8007046:	f7fb ff67 	bl	8002f18 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007056:	b29b      	uxth	r3, r3
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	b29b      	uxth	r3, r3
 800705c:	4619      	mov	r1, r3
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f8d4 	bl	800720c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007064:	e0b5      	b.n	80071d2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007072:	b29b      	uxth	r3, r3
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007080:	b29b      	uxth	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	f000 80a7 	beq.w	80071d6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007088:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 80a2 	beq.w	80071d6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709a:	e853 3f00 	ldrex	r3, [r3]
 800709e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	461a      	mov	r2, r3
 80070b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070b4:	647b      	str	r3, [r7, #68]	; 0x44
 80070b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070bc:	e841 2300 	strex	r3, r2, [r1]
 80070c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1e4      	bne.n	8007092 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3308      	adds	r3, #8
 80070ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d2:	e853 3f00 	ldrex	r3, [r3]
 80070d6:	623b      	str	r3, [r7, #32]
   return(result);
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	f023 0301 	bic.w	r3, r3, #1
 80070de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	3308      	adds	r3, #8
 80070e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80070ec:	633a      	str	r2, [r7, #48]	; 0x30
 80070ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070f4:	e841 2300 	strex	r3, r2, [r1]
 80070f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1e3      	bne.n	80070c8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2220      	movs	r2, #32
 8007104:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	e853 3f00 	ldrex	r3, [r3]
 800711e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f023 0310 	bic.w	r3, r3, #16
 8007126:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	461a      	mov	r2, r3
 8007130:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007134:	61fb      	str	r3, [r7, #28]
 8007136:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007138:	69b9      	ldr	r1, [r7, #24]
 800713a:	69fa      	ldr	r2, [r7, #28]
 800713c:	e841 2300 	strex	r3, r2, [r1]
 8007140:	617b      	str	r3, [r7, #20]
   return(result);
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1e4      	bne.n	8007112 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007148:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800714c:	4619      	mov	r1, r3
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f85c 	bl	800720c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007154:	e03f      	b.n	80071d6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800715a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00e      	beq.n	8007180 <HAL_UART_IRQHandler+0x560>
 8007162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d008      	beq.n	8007180 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007176:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fd5d 	bl	8007c38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800717e:	e02d      	b.n	80071dc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00e      	beq.n	80071aa <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800718c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007194:	2b00      	cmp	r3, #0
 8007196:	d008      	beq.n	80071aa <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800719c:	2b00      	cmp	r3, #0
 800719e:	d01c      	beq.n	80071da <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	4798      	blx	r3
    }
    return;
 80071a8:	e017      	b.n	80071da <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80071aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d012      	beq.n	80071dc <HAL_UART_IRQHandler+0x5bc>
 80071b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00c      	beq.n	80071dc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fd0e 	bl	8007be4 <UART_EndTransmit_IT>
    return;
 80071c8:	e008      	b.n	80071dc <HAL_UART_IRQHandler+0x5bc>
      return;
 80071ca:	bf00      	nop
 80071cc:	e006      	b.n	80071dc <HAL_UART_IRQHandler+0x5bc>
    return;
 80071ce:	bf00      	nop
 80071d0:	e004      	b.n	80071dc <HAL_UART_IRQHandler+0x5bc>
      return;
 80071d2:	bf00      	nop
 80071d4:	e002      	b.n	80071dc <HAL_UART_IRQHandler+0x5bc>
      return;
 80071d6:	bf00      	nop
 80071d8:	e000      	b.n	80071dc <HAL_UART_IRQHandler+0x5bc>
    return;
 80071da:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80071dc:	37e8      	adds	r7, #232	; 0xe8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop

080071e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	460b      	mov	r3, r1
 8007216:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007228:	b08a      	sub	sp, #40	; 0x28
 800722a:	af00      	add	r7, sp, #0
 800722c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800722e:	2300      	movs	r3, #0
 8007230:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	689a      	ldr	r2, [r3, #8]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	431a      	orrs	r2, r3
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	431a      	orrs	r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	69db      	ldr	r3, [r3, #28]
 8007248:	4313      	orrs	r3, r2
 800724a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	4ba4      	ldr	r3, [pc, #656]	; (80074e4 <UART_SetConfig+0x2c0>)
 8007254:	4013      	ands	r3, r2
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	6812      	ldr	r2, [r2, #0]
 800725a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800725c:	430b      	orrs	r3, r1
 800725e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	68da      	ldr	r2, [r3, #12]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	430a      	orrs	r2, r1
 8007274:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a99      	ldr	r2, [pc, #612]	; (80074e8 <UART_SetConfig+0x2c4>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d004      	beq.n	8007290 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800728c:	4313      	orrs	r3, r2
 800728e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072a0:	430a      	orrs	r2, r1
 80072a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a90      	ldr	r2, [pc, #576]	; (80074ec <UART_SetConfig+0x2c8>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d126      	bne.n	80072fc <UART_SetConfig+0xd8>
 80072ae:	4b90      	ldr	r3, [pc, #576]	; (80074f0 <UART_SetConfig+0x2cc>)
 80072b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072b4:	f003 0303 	and.w	r3, r3, #3
 80072b8:	2b03      	cmp	r3, #3
 80072ba:	d81b      	bhi.n	80072f4 <UART_SetConfig+0xd0>
 80072bc:	a201      	add	r2, pc, #4	; (adr r2, 80072c4 <UART_SetConfig+0xa0>)
 80072be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c2:	bf00      	nop
 80072c4:	080072d5 	.word	0x080072d5
 80072c8:	080072e5 	.word	0x080072e5
 80072cc:	080072dd 	.word	0x080072dd
 80072d0:	080072ed 	.word	0x080072ed
 80072d4:	2301      	movs	r3, #1
 80072d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072da:	e116      	b.n	800750a <UART_SetConfig+0x2e6>
 80072dc:	2302      	movs	r3, #2
 80072de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072e2:	e112      	b.n	800750a <UART_SetConfig+0x2e6>
 80072e4:	2304      	movs	r3, #4
 80072e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072ea:	e10e      	b.n	800750a <UART_SetConfig+0x2e6>
 80072ec:	2308      	movs	r3, #8
 80072ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072f2:	e10a      	b.n	800750a <UART_SetConfig+0x2e6>
 80072f4:	2310      	movs	r3, #16
 80072f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072fa:	e106      	b.n	800750a <UART_SetConfig+0x2e6>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a7c      	ldr	r2, [pc, #496]	; (80074f4 <UART_SetConfig+0x2d0>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d138      	bne.n	8007378 <UART_SetConfig+0x154>
 8007306:	4b7a      	ldr	r3, [pc, #488]	; (80074f0 <UART_SetConfig+0x2cc>)
 8007308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800730c:	f003 030c 	and.w	r3, r3, #12
 8007310:	2b0c      	cmp	r3, #12
 8007312:	d82d      	bhi.n	8007370 <UART_SetConfig+0x14c>
 8007314:	a201      	add	r2, pc, #4	; (adr r2, 800731c <UART_SetConfig+0xf8>)
 8007316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731a:	bf00      	nop
 800731c:	08007351 	.word	0x08007351
 8007320:	08007371 	.word	0x08007371
 8007324:	08007371 	.word	0x08007371
 8007328:	08007371 	.word	0x08007371
 800732c:	08007361 	.word	0x08007361
 8007330:	08007371 	.word	0x08007371
 8007334:	08007371 	.word	0x08007371
 8007338:	08007371 	.word	0x08007371
 800733c:	08007359 	.word	0x08007359
 8007340:	08007371 	.word	0x08007371
 8007344:	08007371 	.word	0x08007371
 8007348:	08007371 	.word	0x08007371
 800734c:	08007369 	.word	0x08007369
 8007350:	2300      	movs	r3, #0
 8007352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007356:	e0d8      	b.n	800750a <UART_SetConfig+0x2e6>
 8007358:	2302      	movs	r3, #2
 800735a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800735e:	e0d4      	b.n	800750a <UART_SetConfig+0x2e6>
 8007360:	2304      	movs	r3, #4
 8007362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007366:	e0d0      	b.n	800750a <UART_SetConfig+0x2e6>
 8007368:	2308      	movs	r3, #8
 800736a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800736e:	e0cc      	b.n	800750a <UART_SetConfig+0x2e6>
 8007370:	2310      	movs	r3, #16
 8007372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007376:	e0c8      	b.n	800750a <UART_SetConfig+0x2e6>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a5e      	ldr	r2, [pc, #376]	; (80074f8 <UART_SetConfig+0x2d4>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d125      	bne.n	80073ce <UART_SetConfig+0x1aa>
 8007382:	4b5b      	ldr	r3, [pc, #364]	; (80074f0 <UART_SetConfig+0x2cc>)
 8007384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007388:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800738c:	2b30      	cmp	r3, #48	; 0x30
 800738e:	d016      	beq.n	80073be <UART_SetConfig+0x19a>
 8007390:	2b30      	cmp	r3, #48	; 0x30
 8007392:	d818      	bhi.n	80073c6 <UART_SetConfig+0x1a2>
 8007394:	2b20      	cmp	r3, #32
 8007396:	d00a      	beq.n	80073ae <UART_SetConfig+0x18a>
 8007398:	2b20      	cmp	r3, #32
 800739a:	d814      	bhi.n	80073c6 <UART_SetConfig+0x1a2>
 800739c:	2b00      	cmp	r3, #0
 800739e:	d002      	beq.n	80073a6 <UART_SetConfig+0x182>
 80073a0:	2b10      	cmp	r3, #16
 80073a2:	d008      	beq.n	80073b6 <UART_SetConfig+0x192>
 80073a4:	e00f      	b.n	80073c6 <UART_SetConfig+0x1a2>
 80073a6:	2300      	movs	r3, #0
 80073a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073ac:	e0ad      	b.n	800750a <UART_SetConfig+0x2e6>
 80073ae:	2302      	movs	r3, #2
 80073b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073b4:	e0a9      	b.n	800750a <UART_SetConfig+0x2e6>
 80073b6:	2304      	movs	r3, #4
 80073b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073bc:	e0a5      	b.n	800750a <UART_SetConfig+0x2e6>
 80073be:	2308      	movs	r3, #8
 80073c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073c4:	e0a1      	b.n	800750a <UART_SetConfig+0x2e6>
 80073c6:	2310      	movs	r3, #16
 80073c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073cc:	e09d      	b.n	800750a <UART_SetConfig+0x2e6>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a4a      	ldr	r2, [pc, #296]	; (80074fc <UART_SetConfig+0x2d8>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d125      	bne.n	8007424 <UART_SetConfig+0x200>
 80073d8:	4b45      	ldr	r3, [pc, #276]	; (80074f0 <UART_SetConfig+0x2cc>)
 80073da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80073e2:	2bc0      	cmp	r3, #192	; 0xc0
 80073e4:	d016      	beq.n	8007414 <UART_SetConfig+0x1f0>
 80073e6:	2bc0      	cmp	r3, #192	; 0xc0
 80073e8:	d818      	bhi.n	800741c <UART_SetConfig+0x1f8>
 80073ea:	2b80      	cmp	r3, #128	; 0x80
 80073ec:	d00a      	beq.n	8007404 <UART_SetConfig+0x1e0>
 80073ee:	2b80      	cmp	r3, #128	; 0x80
 80073f0:	d814      	bhi.n	800741c <UART_SetConfig+0x1f8>
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d002      	beq.n	80073fc <UART_SetConfig+0x1d8>
 80073f6:	2b40      	cmp	r3, #64	; 0x40
 80073f8:	d008      	beq.n	800740c <UART_SetConfig+0x1e8>
 80073fa:	e00f      	b.n	800741c <UART_SetConfig+0x1f8>
 80073fc:	2300      	movs	r3, #0
 80073fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007402:	e082      	b.n	800750a <UART_SetConfig+0x2e6>
 8007404:	2302      	movs	r3, #2
 8007406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800740a:	e07e      	b.n	800750a <UART_SetConfig+0x2e6>
 800740c:	2304      	movs	r3, #4
 800740e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007412:	e07a      	b.n	800750a <UART_SetConfig+0x2e6>
 8007414:	2308      	movs	r3, #8
 8007416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800741a:	e076      	b.n	800750a <UART_SetConfig+0x2e6>
 800741c:	2310      	movs	r3, #16
 800741e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007422:	e072      	b.n	800750a <UART_SetConfig+0x2e6>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a35      	ldr	r2, [pc, #212]	; (8007500 <UART_SetConfig+0x2dc>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d12a      	bne.n	8007484 <UART_SetConfig+0x260>
 800742e:	4b30      	ldr	r3, [pc, #192]	; (80074f0 <UART_SetConfig+0x2cc>)
 8007430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800743c:	d01a      	beq.n	8007474 <UART_SetConfig+0x250>
 800743e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007442:	d81b      	bhi.n	800747c <UART_SetConfig+0x258>
 8007444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007448:	d00c      	beq.n	8007464 <UART_SetConfig+0x240>
 800744a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800744e:	d815      	bhi.n	800747c <UART_SetConfig+0x258>
 8007450:	2b00      	cmp	r3, #0
 8007452:	d003      	beq.n	800745c <UART_SetConfig+0x238>
 8007454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007458:	d008      	beq.n	800746c <UART_SetConfig+0x248>
 800745a:	e00f      	b.n	800747c <UART_SetConfig+0x258>
 800745c:	2300      	movs	r3, #0
 800745e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007462:	e052      	b.n	800750a <UART_SetConfig+0x2e6>
 8007464:	2302      	movs	r3, #2
 8007466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800746a:	e04e      	b.n	800750a <UART_SetConfig+0x2e6>
 800746c:	2304      	movs	r3, #4
 800746e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007472:	e04a      	b.n	800750a <UART_SetConfig+0x2e6>
 8007474:	2308      	movs	r3, #8
 8007476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800747a:	e046      	b.n	800750a <UART_SetConfig+0x2e6>
 800747c:	2310      	movs	r3, #16
 800747e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007482:	e042      	b.n	800750a <UART_SetConfig+0x2e6>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a17      	ldr	r2, [pc, #92]	; (80074e8 <UART_SetConfig+0x2c4>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d13a      	bne.n	8007504 <UART_SetConfig+0x2e0>
 800748e:	4b18      	ldr	r3, [pc, #96]	; (80074f0 <UART_SetConfig+0x2cc>)
 8007490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007494:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007498:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800749c:	d01a      	beq.n	80074d4 <UART_SetConfig+0x2b0>
 800749e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074a2:	d81b      	bhi.n	80074dc <UART_SetConfig+0x2b8>
 80074a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074a8:	d00c      	beq.n	80074c4 <UART_SetConfig+0x2a0>
 80074aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074ae:	d815      	bhi.n	80074dc <UART_SetConfig+0x2b8>
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d003      	beq.n	80074bc <UART_SetConfig+0x298>
 80074b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074b8:	d008      	beq.n	80074cc <UART_SetConfig+0x2a8>
 80074ba:	e00f      	b.n	80074dc <UART_SetConfig+0x2b8>
 80074bc:	2300      	movs	r3, #0
 80074be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074c2:	e022      	b.n	800750a <UART_SetConfig+0x2e6>
 80074c4:	2302      	movs	r3, #2
 80074c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074ca:	e01e      	b.n	800750a <UART_SetConfig+0x2e6>
 80074cc:	2304      	movs	r3, #4
 80074ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074d2:	e01a      	b.n	800750a <UART_SetConfig+0x2e6>
 80074d4:	2308      	movs	r3, #8
 80074d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074da:	e016      	b.n	800750a <UART_SetConfig+0x2e6>
 80074dc:	2310      	movs	r3, #16
 80074de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074e2:	e012      	b.n	800750a <UART_SetConfig+0x2e6>
 80074e4:	efff69f3 	.word	0xefff69f3
 80074e8:	40008000 	.word	0x40008000
 80074ec:	40013800 	.word	0x40013800
 80074f0:	40021000 	.word	0x40021000
 80074f4:	40004400 	.word	0x40004400
 80074f8:	40004800 	.word	0x40004800
 80074fc:	40004c00 	.word	0x40004c00
 8007500:	40005000 	.word	0x40005000
 8007504:	2310      	movs	r3, #16
 8007506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a9f      	ldr	r2, [pc, #636]	; (800778c <UART_SetConfig+0x568>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d17a      	bne.n	800760a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007514:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007518:	2b08      	cmp	r3, #8
 800751a:	d824      	bhi.n	8007566 <UART_SetConfig+0x342>
 800751c:	a201      	add	r2, pc, #4	; (adr r2, 8007524 <UART_SetConfig+0x300>)
 800751e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007522:	bf00      	nop
 8007524:	08007549 	.word	0x08007549
 8007528:	08007567 	.word	0x08007567
 800752c:	08007551 	.word	0x08007551
 8007530:	08007567 	.word	0x08007567
 8007534:	08007557 	.word	0x08007557
 8007538:	08007567 	.word	0x08007567
 800753c:	08007567 	.word	0x08007567
 8007540:	08007567 	.word	0x08007567
 8007544:	0800755f 	.word	0x0800755f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007548:	f7fd fc42 	bl	8004dd0 <HAL_RCC_GetPCLK1Freq>
 800754c:	61f8      	str	r0, [r7, #28]
        break;
 800754e:	e010      	b.n	8007572 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007550:	4b8f      	ldr	r3, [pc, #572]	; (8007790 <UART_SetConfig+0x56c>)
 8007552:	61fb      	str	r3, [r7, #28]
        break;
 8007554:	e00d      	b.n	8007572 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007556:	f7fd fba3 	bl	8004ca0 <HAL_RCC_GetSysClockFreq>
 800755a:	61f8      	str	r0, [r7, #28]
        break;
 800755c:	e009      	b.n	8007572 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800755e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007562:	61fb      	str	r3, [r7, #28]
        break;
 8007564:	e005      	b.n	8007572 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007566:	2300      	movs	r3, #0
 8007568:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007570:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 80fb 	beq.w	8007770 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	685a      	ldr	r2, [r3, #4]
 800757e:	4613      	mov	r3, r2
 8007580:	005b      	lsls	r3, r3, #1
 8007582:	4413      	add	r3, r2
 8007584:	69fa      	ldr	r2, [r7, #28]
 8007586:	429a      	cmp	r2, r3
 8007588:	d305      	bcc.n	8007596 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007590:	69fa      	ldr	r2, [r7, #28]
 8007592:	429a      	cmp	r2, r3
 8007594:	d903      	bls.n	800759e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800759c:	e0e8      	b.n	8007770 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	2200      	movs	r2, #0
 80075a2:	461c      	mov	r4, r3
 80075a4:	4615      	mov	r5, r2
 80075a6:	f04f 0200 	mov.w	r2, #0
 80075aa:	f04f 0300 	mov.w	r3, #0
 80075ae:	022b      	lsls	r3, r5, #8
 80075b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80075b4:	0222      	lsls	r2, r4, #8
 80075b6:	68f9      	ldr	r1, [r7, #12]
 80075b8:	6849      	ldr	r1, [r1, #4]
 80075ba:	0849      	lsrs	r1, r1, #1
 80075bc:	2000      	movs	r0, #0
 80075be:	4688      	mov	r8, r1
 80075c0:	4681      	mov	r9, r0
 80075c2:	eb12 0a08 	adds.w	sl, r2, r8
 80075c6:	eb43 0b09 	adc.w	fp, r3, r9
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	603b      	str	r3, [r7, #0]
 80075d2:	607a      	str	r2, [r7, #4]
 80075d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075d8:	4650      	mov	r0, sl
 80075da:	4659      	mov	r1, fp
 80075dc:	f7f9 fb54 	bl	8000c88 <__aeabi_uldivmod>
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	4613      	mov	r3, r2
 80075e6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075ee:	d308      	bcc.n	8007602 <UART_SetConfig+0x3de>
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075f6:	d204      	bcs.n	8007602 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	69ba      	ldr	r2, [r7, #24]
 80075fe:	60da      	str	r2, [r3, #12]
 8007600:	e0b6      	b.n	8007770 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007608:	e0b2      	b.n	8007770 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007612:	d15e      	bne.n	80076d2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007614:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007618:	2b08      	cmp	r3, #8
 800761a:	d828      	bhi.n	800766e <UART_SetConfig+0x44a>
 800761c:	a201      	add	r2, pc, #4	; (adr r2, 8007624 <UART_SetConfig+0x400>)
 800761e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007622:	bf00      	nop
 8007624:	08007649 	.word	0x08007649
 8007628:	08007651 	.word	0x08007651
 800762c:	08007659 	.word	0x08007659
 8007630:	0800766f 	.word	0x0800766f
 8007634:	0800765f 	.word	0x0800765f
 8007638:	0800766f 	.word	0x0800766f
 800763c:	0800766f 	.word	0x0800766f
 8007640:	0800766f 	.word	0x0800766f
 8007644:	08007667 	.word	0x08007667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007648:	f7fd fbc2 	bl	8004dd0 <HAL_RCC_GetPCLK1Freq>
 800764c:	61f8      	str	r0, [r7, #28]
        break;
 800764e:	e014      	b.n	800767a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007650:	f7fd fbd4 	bl	8004dfc <HAL_RCC_GetPCLK2Freq>
 8007654:	61f8      	str	r0, [r7, #28]
        break;
 8007656:	e010      	b.n	800767a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007658:	4b4d      	ldr	r3, [pc, #308]	; (8007790 <UART_SetConfig+0x56c>)
 800765a:	61fb      	str	r3, [r7, #28]
        break;
 800765c:	e00d      	b.n	800767a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800765e:	f7fd fb1f 	bl	8004ca0 <HAL_RCC_GetSysClockFreq>
 8007662:	61f8      	str	r0, [r7, #28]
        break;
 8007664:	e009      	b.n	800767a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800766a:	61fb      	str	r3, [r7, #28]
        break;
 800766c:	e005      	b.n	800767a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800766e:	2300      	movs	r3, #0
 8007670:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007678:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d077      	beq.n	8007770 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	005a      	lsls	r2, r3, #1
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	085b      	lsrs	r3, r3, #1
 800768a:	441a      	add	r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	fbb2 f3f3 	udiv	r3, r2, r3
 8007694:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	2b0f      	cmp	r3, #15
 800769a:	d916      	bls.n	80076ca <UART_SetConfig+0x4a6>
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076a2:	d212      	bcs.n	80076ca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	f023 030f 	bic.w	r3, r3, #15
 80076ac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	085b      	lsrs	r3, r3, #1
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	f003 0307 	and.w	r3, r3, #7
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	8afb      	ldrh	r3, [r7, #22]
 80076bc:	4313      	orrs	r3, r2
 80076be:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	8afa      	ldrh	r2, [r7, #22]
 80076c6:	60da      	str	r2, [r3, #12]
 80076c8:	e052      	b.n	8007770 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80076d0:	e04e      	b.n	8007770 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076d6:	2b08      	cmp	r3, #8
 80076d8:	d827      	bhi.n	800772a <UART_SetConfig+0x506>
 80076da:	a201      	add	r2, pc, #4	; (adr r2, 80076e0 <UART_SetConfig+0x4bc>)
 80076dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e0:	08007705 	.word	0x08007705
 80076e4:	0800770d 	.word	0x0800770d
 80076e8:	08007715 	.word	0x08007715
 80076ec:	0800772b 	.word	0x0800772b
 80076f0:	0800771b 	.word	0x0800771b
 80076f4:	0800772b 	.word	0x0800772b
 80076f8:	0800772b 	.word	0x0800772b
 80076fc:	0800772b 	.word	0x0800772b
 8007700:	08007723 	.word	0x08007723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007704:	f7fd fb64 	bl	8004dd0 <HAL_RCC_GetPCLK1Freq>
 8007708:	61f8      	str	r0, [r7, #28]
        break;
 800770a:	e014      	b.n	8007736 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800770c:	f7fd fb76 	bl	8004dfc <HAL_RCC_GetPCLK2Freq>
 8007710:	61f8      	str	r0, [r7, #28]
        break;
 8007712:	e010      	b.n	8007736 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007714:	4b1e      	ldr	r3, [pc, #120]	; (8007790 <UART_SetConfig+0x56c>)
 8007716:	61fb      	str	r3, [r7, #28]
        break;
 8007718:	e00d      	b.n	8007736 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800771a:	f7fd fac1 	bl	8004ca0 <HAL_RCC_GetSysClockFreq>
 800771e:	61f8      	str	r0, [r7, #28]
        break;
 8007720:	e009      	b.n	8007736 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007726:	61fb      	str	r3, [r7, #28]
        break;
 8007728:	e005      	b.n	8007736 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800772a:	2300      	movs	r3, #0
 800772c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007734:	bf00      	nop
    }

    if (pclk != 0U)
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d019      	beq.n	8007770 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	085a      	lsrs	r2, r3, #1
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	441a      	add	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	fbb2 f3f3 	udiv	r3, r2, r3
 800774e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	2b0f      	cmp	r3, #15
 8007754:	d909      	bls.n	800776a <UART_SetConfig+0x546>
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800775c:	d205      	bcs.n	800776a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	b29a      	uxth	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	60da      	str	r2, [r3, #12]
 8007768:	e002      	b.n	8007770 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800777c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007780:	4618      	mov	r0, r3
 8007782:	3728      	adds	r7, #40	; 0x28
 8007784:	46bd      	mov	sp, r7
 8007786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800778a:	bf00      	nop
 800778c:	40008000 	.word	0x40008000
 8007790:	00f42400 	.word	0x00f42400

08007794 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a0:	f003 0301 	and.w	r3, r3, #1
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00a      	beq.n	80077be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	430a      	orrs	r2, r1
 80077bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c2:	f003 0302 	and.w	r3, r3, #2
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00a      	beq.n	80077e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	430a      	orrs	r2, r1
 80077de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e4:	f003 0304 	and.w	r3, r3, #4
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00a      	beq.n	8007802 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	430a      	orrs	r2, r1
 8007800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007806:	f003 0308 	and.w	r3, r3, #8
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00a      	beq.n	8007824 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	430a      	orrs	r2, r1
 8007822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007828:	f003 0310 	and.w	r3, r3, #16
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00a      	beq.n	8007846 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	430a      	orrs	r2, r1
 8007844:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784a:	f003 0320 	and.w	r3, r3, #32
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00a      	beq.n	8007868 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	430a      	orrs	r2, r1
 8007866:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007870:	2b00      	cmp	r3, #0
 8007872:	d01a      	beq.n	80078aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	430a      	orrs	r2, r1
 8007888:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007892:	d10a      	bne.n	80078aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	430a      	orrs	r2, r1
 80078a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00a      	beq.n	80078cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	430a      	orrs	r2, r1
 80078ca:	605a      	str	r2, [r3, #4]
  }
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b086      	sub	sp, #24
 80078dc:	af02      	add	r7, sp, #8
 80078de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078e8:	f7fb f90e 	bl	8002b08 <HAL_GetTick>
 80078ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0308 	and.w	r3, r3, #8
 80078f8:	2b08      	cmp	r3, #8
 80078fa:	d10e      	bne.n	800791a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f82d 	bl	800796a <UART_WaitOnFlagUntilTimeout>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d001      	beq.n	800791a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	e023      	b.n	8007962 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 0304 	and.w	r3, r3, #4
 8007924:	2b04      	cmp	r3, #4
 8007926:	d10e      	bne.n	8007946 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007928:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f817 	bl	800796a <UART_WaitOnFlagUntilTimeout>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	e00d      	b.n	8007962 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2220      	movs	r2, #32
 800794a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2220      	movs	r2, #32
 8007950:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b09c      	sub	sp, #112	; 0x70
 800796e:	af00      	add	r7, sp, #0
 8007970:	60f8      	str	r0, [r7, #12]
 8007972:	60b9      	str	r1, [r7, #8]
 8007974:	603b      	str	r3, [r7, #0]
 8007976:	4613      	mov	r3, r2
 8007978:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800797a:	e0a5      	b.n	8007ac8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800797c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800797e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007982:	f000 80a1 	beq.w	8007ac8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007986:	f7fb f8bf 	bl	8002b08 <HAL_GetTick>
 800798a:	4602      	mov	r2, r0
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007992:	429a      	cmp	r2, r3
 8007994:	d302      	bcc.n	800799c <UART_WaitOnFlagUntilTimeout+0x32>
 8007996:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007998:	2b00      	cmp	r3, #0
 800799a:	d13e      	bne.n	8007a1a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079a4:	e853 3f00 	ldrex	r3, [r3]
 80079a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80079aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80079b0:	667b      	str	r3, [r7, #100]	; 0x64
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	461a      	mov	r2, r3
 80079b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80079c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80079c2:	e841 2300 	strex	r3, r2, [r1]
 80079c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80079c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1e6      	bne.n	800799c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3308      	adds	r3, #8
 80079d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d8:	e853 3f00 	ldrex	r3, [r3]
 80079dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e0:	f023 0301 	bic.w	r3, r3, #1
 80079e4:	663b      	str	r3, [r7, #96]	; 0x60
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3308      	adds	r3, #8
 80079ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80079ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80079f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079f6:	e841 2300 	strex	r3, r2, [r1]
 80079fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80079fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1e5      	bne.n	80079ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2220      	movs	r2, #32
 8007a06:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e067      	b.n	8007aea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0304 	and.w	r3, r3, #4
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d04f      	beq.n	8007ac8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	69db      	ldr	r3, [r3, #28]
 8007a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a36:	d147      	bne.n	8007ac8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a40:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4a:	e853 3f00 	ldrex	r3, [r3]
 8007a4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a60:	637b      	str	r3, [r7, #52]	; 0x34
 8007a62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a68:	e841 2300 	strex	r3, r2, [r1]
 8007a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1e6      	bne.n	8007a42 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	3308      	adds	r3, #8
 8007a7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	e853 3f00 	ldrex	r3, [r3]
 8007a82:	613b      	str	r3, [r7, #16]
   return(result);
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	f023 0301 	bic.w	r3, r3, #1
 8007a8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	3308      	adds	r3, #8
 8007a92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a94:	623a      	str	r2, [r7, #32]
 8007a96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a98:	69f9      	ldr	r1, [r7, #28]
 8007a9a:	6a3a      	ldr	r2, [r7, #32]
 8007a9c:	e841 2300 	strex	r3, r2, [r1]
 8007aa0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1e5      	bne.n	8007a74 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2220      	movs	r2, #32
 8007aac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2220      	movs	r2, #32
 8007ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e010      	b.n	8007aea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	69da      	ldr	r2, [r3, #28]
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	bf0c      	ite	eq
 8007ad8:	2301      	moveq	r3, #1
 8007ada:	2300      	movne	r3, #0
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	461a      	mov	r2, r3
 8007ae0:	79fb      	ldrb	r3, [r7, #7]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	f43f af4a 	beq.w	800797c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3770      	adds	r7, #112	; 0x70
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007af2:	b480      	push	{r7}
 8007af4:	b095      	sub	sp, #84	; 0x54
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b02:	e853 3f00 	ldrex	r3, [r3]
 8007b06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	461a      	mov	r2, r3
 8007b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b18:	643b      	str	r3, [r7, #64]	; 0x40
 8007b1a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b20:	e841 2300 	strex	r3, r2, [r1]
 8007b24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1e6      	bne.n	8007afa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	3308      	adds	r3, #8
 8007b32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b34:	6a3b      	ldr	r3, [r7, #32]
 8007b36:	e853 3f00 	ldrex	r3, [r3]
 8007b3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	f023 0301 	bic.w	r3, r3, #1
 8007b42:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	3308      	adds	r3, #8
 8007b4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b54:	e841 2300 	strex	r3, r2, [r1]
 8007b58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1e5      	bne.n	8007b2c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d118      	bne.n	8007b9a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	e853 3f00 	ldrex	r3, [r3]
 8007b74:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	f023 0310 	bic.w	r3, r3, #16
 8007b7c:	647b      	str	r3, [r7, #68]	; 0x44
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	461a      	mov	r2, r3
 8007b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b86:	61bb      	str	r3, [r7, #24]
 8007b88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	6979      	ldr	r1, [r7, #20]
 8007b8c:	69ba      	ldr	r2, [r7, #24]
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	613b      	str	r3, [r7, #16]
   return(result);
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e6      	bne.n	8007b68 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2220      	movs	r2, #32
 8007b9e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007bac:	bf00      	nop
 8007bae:	3754      	adds	r7, #84	; 0x54
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f7ff fb0e 	bl	80071f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bdc:	bf00      	nop
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b088      	sub	sp, #32
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	e853 3f00 	ldrex	r3, [r3]
 8007bf8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c00:	61fb      	str	r3, [r7, #28]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	461a      	mov	r2, r3
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	61bb      	str	r3, [r7, #24]
 8007c0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0e:	6979      	ldr	r1, [r7, #20]
 8007c10:	69ba      	ldr	r2, [r7, #24]
 8007c12:	e841 2300 	strex	r3, r2, [r1]
 8007c16:	613b      	str	r3, [r7, #16]
   return(result);
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1e6      	bne.n	8007bec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2220      	movs	r2, #32
 8007c22:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7ff fada 	bl	80071e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c30:	bf00      	nop
 8007c32:	3720      	adds	r7, #32
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8007c56:	2300      	movs	r3, #0
 8007c58:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8007c5a:	f107 030c 	add.w	r3, r7, #12
 8007c5e:	683a      	ldr	r2, [r7, #0]
 8007c60:	2101      	movs	r1, #1
 8007c62:	4618      	mov	r0, r3
 8007c64:	f000 fad8 	bl	8008218 <ai_platform_get_activations_map>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d02b      	beq.n	8007cc6 <network_configure_activations+0x7a>
    /* Updating activations (byte) offsets */
    conv2d_conv2d_output_array.data = AI_PTR(activations_map[0] + 15488);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f503 5372 	add.w	r3, r3, #15488	; 0x3c80
 8007c74:	4a19      	ldr	r2, [pc, #100]	; (8007cdc <network_configure_activations+0x90>)
 8007c76:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_output_array.data_start = AI_PTR(activations_map[0] + 15488);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f503 5372 	add.w	r3, r3, #15488	; 0x3c80
 8007c7e:	4a17      	ldr	r2, [pc, #92]	; (8007cdc <network_configure_activations+0x90>)
 8007c80:	60d3      	str	r3, [r2, #12]
    conv2d_1_conv2d_output_array.data = AI_PTR(activations_map[0] + 0);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	4a16      	ldr	r2, [pc, #88]	; (8007ce0 <network_configure_activations+0x94>)
 8007c86:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	4a15      	ldr	r2, [pc, #84]	; (8007ce0 <network_configure_activations+0x94>)
 8007c8c:	60d3      	str	r3, [r2, #12]
    dense_dense_output_array.data = AI_PTR(activations_map[0] + 39936);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8007c94:	4a13      	ldr	r2, [pc, #76]	; (8007ce4 <network_configure_activations+0x98>)
 8007c96:	6093      	str	r3, [r2, #8]
    dense_dense_output_array.data_start = AI_PTR(activations_map[0] + 39936);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8007c9e:	4a11      	ldr	r2, [pc, #68]	; (8007ce4 <network_configure_activations+0x98>)
 8007ca0:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(activations_map[0] + 0);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	4a10      	ldr	r2, [pc, #64]	; (8007ce8 <network_configure_activations+0x9c>)
 8007ca6:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	4a0f      	ldr	r2, [pc, #60]	; (8007ce8 <network_configure_activations+0x9c>)
 8007cac:	60d3      	str	r3, [r2, #12]
    dense_1_dense_output_array.data = AI_PTR(activations_map[0] + 256);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007cb4:	4a0d      	ldr	r2, [pc, #52]	; (8007cec <network_configure_activations+0xa0>)
 8007cb6:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(activations_map[0] + 256);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007cbe:	4a0b      	ldr	r2, [pc, #44]	; (8007cec <network_configure_activations+0xa0>)
 8007cc0:	60d3      	str	r3, [r2, #12]
    
    return true;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e005      	b.n	8007cd2 <network_configure_activations+0x86>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8007cc6:	2213      	movs	r2, #19
 8007cc8:	2130      	movs	r1, #48	; 0x30
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fb8c 	bl	80083e8 <ai_platform_network_set_error>
  return false;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	200000a0 	.word	0x200000a0
 8007ce0:	200000b0 	.word	0x200000b0
 8007ce4:	200000c0 	.word	0x200000c0
 8007ce8:	200000d0 	.word	0x200000d0
 8007cec:	200000e0 	.word	0x200000e0

08007cf0 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8007cfe:	f107 030c 	add.w	r3, r7, #12
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	2101      	movs	r1, #1
 8007d06:	4618      	mov	r0, r3
 8007d08:	f000 fa36 	bl	8008178 <ai_platform_get_weights_map>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f000 808a 	beq.w	8007e28 <network_configure_weights+0x138>
    /* Updating weights (byte) offsets */
    
    conv2d_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8007d14:	4b49      	ldr	r3, [pc, #292]	; (8007e3c <network_configure_weights+0x14c>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d1c:	4a47      	ldr	r2, [pc, #284]	; (8007e3c <network_configure_weights+0x14c>)
 8007d1e:	6013      	str	r3, [r2, #0]
    conv2d_conv2d_weights_array.data = AI_PTR(weights_map[0] + 0);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	4a46      	ldr	r2, [pc, #280]	; (8007e3c <network_configure_weights+0x14c>)
 8007d24:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	4a44      	ldr	r2, [pc, #272]	; (8007e3c <network_configure_weights+0x14c>)
 8007d2a:	60d3      	str	r3, [r2, #12]
    conv2d_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8007d2c:	4b44      	ldr	r3, [pc, #272]	; (8007e40 <network_configure_weights+0x150>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d34:	4a42      	ldr	r2, [pc, #264]	; (8007e40 <network_configure_weights+0x150>)
 8007d36:	6013      	str	r3, [r2, #0]
    conv2d_conv2d_bias_array.data = AI_PTR(weights_map[0] + 256);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007d3e:	4a40      	ldr	r2, [pc, #256]	; (8007e40 <network_configure_weights+0x150>)
 8007d40:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_bias_array.data_start = AI_PTR(weights_map[0] + 256);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007d48:	4a3d      	ldr	r2, [pc, #244]	; (8007e40 <network_configure_weights+0x150>)
 8007d4a:	60d3      	str	r3, [r2, #12]
    conv2d_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8007d4c:	4b3d      	ldr	r3, [pc, #244]	; (8007e44 <network_configure_weights+0x154>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d54:	4a3b      	ldr	r2, [pc, #236]	; (8007e44 <network_configure_weights+0x154>)
 8007d56:	6013      	str	r3, [r2, #0]
    conv2d_1_conv2d_weights_array.data = AI_PTR(weights_map[0] + 320);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007d5e:	4a39      	ldr	r2, [pc, #228]	; (8007e44 <network_configure_weights+0x154>)
 8007d60:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_weights_array.data_start = AI_PTR(weights_map[0] + 320);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007d68:	4a36      	ldr	r2, [pc, #216]	; (8007e44 <network_configure_weights+0x154>)
 8007d6a:	60d3      	str	r3, [r2, #12]
    conv2d_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8007d6c:	4b36      	ldr	r3, [pc, #216]	; (8007e48 <network_configure_weights+0x158>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d74:	4a34      	ldr	r2, [pc, #208]	; (8007e48 <network_configure_weights+0x158>)
 8007d76:	6013      	str	r3, [r2, #0]
    conv2d_1_conv2d_bias_array.data = AI_PTR(weights_map[0] + 8512);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8007d7e:	4a32      	ldr	r2, [pc, #200]	; (8007e48 <network_configure_weights+0x158>)
 8007d80:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_bias_array.data_start = AI_PTR(weights_map[0] + 8512);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8007d88:	4a2f      	ldr	r2, [pc, #188]	; (8007e48 <network_configure_weights+0x158>)
 8007d8a:	60d3      	str	r3, [r2, #12]
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8007d8c:	4b2f      	ldr	r3, [pc, #188]	; (8007e4c <network_configure_weights+0x15c>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d94:	4a2d      	ldr	r2, [pc, #180]	; (8007e4c <network_configure_weights+0x15c>)
 8007d96:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(weights_map[0] + 9664);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f503 5317 	add.w	r3, r3, #9664	; 0x25c0
 8007d9e:	4a2b      	ldr	r2, [pc, #172]	; (8007e4c <network_configure_weights+0x15c>)
 8007da0:	6093      	str	r3, [r2, #8]
    dense_dense_weights_array.data_start = AI_PTR(weights_map[0] + 8640);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f503 5307 	add.w	r3, r3, #8640	; 0x21c0
 8007da8:	4a28      	ldr	r2, [pc, #160]	; (8007e4c <network_configure_weights+0x15c>)
 8007daa:	60d3      	str	r3, [r2, #12]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8007dac:	4b28      	ldr	r3, [pc, #160]	; (8007e50 <network_configure_weights+0x160>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007db4:	4a26      	ldr	r2, [pc, #152]	; (8007e50 <network_configure_weights+0x160>)
 8007db6:	6013      	str	r3, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(weights_map[0] + 648640);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f503 231e 	add.w	r3, r3, #647168	; 0x9e000
 8007dbe:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8007dc2:	4a23      	ldr	r2, [pc, #140]	; (8007e50 <network_configure_weights+0x160>)
 8007dc4:	6093      	str	r3, [r2, #8]
    dense_dense_bias_array.data_start = AI_PTR(weights_map[0] + 648640);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f503 231e 	add.w	r3, r3, #647168	; 0x9e000
 8007dcc:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8007dd0:	4a1f      	ldr	r2, [pc, #124]	; (8007e50 <network_configure_weights+0x160>)
 8007dd2:	60d3      	str	r3, [r2, #12]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8007dd4:	4b1f      	ldr	r3, [pc, #124]	; (8007e54 <network_configure_weights+0x164>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ddc:	4a1d      	ldr	r2, [pc, #116]	; (8007e54 <network_configure_weights+0x164>)
 8007dde:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(weights_map[0] + 648896);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f503 231e 	add.w	r3, r3, #647168	; 0x9e000
 8007de6:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 8007dea:	4a1a      	ldr	r2, [pc, #104]	; (8007e54 <network_configure_weights+0x164>)
 8007dec:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(weights_map[0] + 648896);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f503 231e 	add.w	r3, r3, #647168	; 0x9e000
 8007df4:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 8007df8:	4a16      	ldr	r2, [pc, #88]	; (8007e54 <network_configure_weights+0x164>)
 8007dfa:	60d3      	str	r3, [r2, #12]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8007dfc:	4b16      	ldr	r3, [pc, #88]	; (8007e58 <network_configure_weights+0x168>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e04:	4a14      	ldr	r2, [pc, #80]	; (8007e58 <network_configure_weights+0x168>)
 8007e06:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(weights_map[0] + 650688);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f503 231e 	add.w	r3, r3, #647168	; 0x9e000
 8007e0e:	f503 635c 	add.w	r3, r3, #3520	; 0xdc0
 8007e12:	4a11      	ldr	r2, [pc, #68]	; (8007e58 <network_configure_weights+0x168>)
 8007e14:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(weights_map[0] + 650688);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f503 231e 	add.w	r3, r3, #647168	; 0x9e000
 8007e1c:	f503 635c 	add.w	r3, r3, #3520	; 0xdc0
 8007e20:	4a0d      	ldr	r2, [pc, #52]	; (8007e58 <network_configure_weights+0x168>)
 8007e22:	60d3      	str	r3, [r2, #12]
    return true;
 8007e24:	2301      	movs	r3, #1
 8007e26:	e005      	b.n	8007e34 <network_configure_weights+0x144>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8007e28:	2212      	movs	r2, #18
 8007e2a:	2130      	movs	r1, #48	; 0x30
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 fadb 	bl	80083e8 <ai_platform_network_set_error>
  return false;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	20000100 	.word	0x20000100
 8007e40:	20000110 	.word	0x20000110
 8007e44:	20000120 	.word	0x20000120
 8007e48:	20000130 	.word	0x20000130
 8007e4c:	20000140 	.word	0x20000140
 8007e50:	20000150 	.word	0x20000150
 8007e54:	20000160 	.word	0x20000160
 8007e58:	20000170 	.word	0x20000170

08007e5c <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fa45 	bl	80082f4 <ai_platform_network_get_error>
 8007e6a:	4603      	mov	r3, r0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af02      	add	r7, sp, #8
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8007e7e:	2300      	movs	r3, #0
 8007e80:	9301      	str	r3, [sp, #4]
 8007e82:	2305      	movs	r3, #5
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	2301      	movs	r3, #1
 8007e88:	4a04      	ldr	r2, [pc, #16]	; (8007e9c <ai_network_create+0x28>)
 8007e8a:	6839      	ldr	r1, [r7, #0]
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 fc9f 	bl	80087d0 <ai_platform_network_create>
 8007e92:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	20000840 	.word	0x20000840

08007ea0 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b096      	sub	sp, #88	; 0x58
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8007eac:	2100      	movs	r1, #0
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f7ff ffe0 	bl	8007e74 <ai_network_create>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8007eb8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <ai_network_create_and_init+0x24>
        return err;
 8007ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ec2:	e05d      	b.n	8007f80 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 8007ec4:	f107 0314 	add.w	r3, r7, #20
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f000 f8dd 	bl	8008088 <ai_network_data_params_get>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	f083 0301 	eor.w	r3, r3, #1
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d008      	beq.n	8007eec <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7ff ffbc 	bl	8007e5c <ai_network_get_error>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8007ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eea:	e049      	b.n	8007f80 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d016      	beq.n	8007f20 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	657b      	str	r3, [r7, #84]	; 0x54
 8007ef6:	e00e      	b.n	8007f16 <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8007ef8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	4413      	add	r3, r2
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	f107 0314 	add.w	r3, r7, #20
 8007f08:	330c      	adds	r3, #12
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f000 f91e 	bl	800814c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8007f10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f12:	3301      	adds	r3, #1
 8007f14:	657b      	str	r3, [r7, #84]	; 0x54
 8007f16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007f18:	461a      	mov	r2, r3
 8007f1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	dbeb      	blt.n	8007ef8 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d016      	beq.n	8007f54 <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8007f26:	2300      	movs	r3, #0
 8007f28:	653b      	str	r3, [r7, #80]	; 0x50
 8007f2a:	e00e      	b.n	8007f4a <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8007f2c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	4413      	add	r3, r2
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	f107 0314 	add.w	r3, r7, #20
 8007f3c:	3304      	adds	r3, #4
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 f904 	bl	800814c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8007f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f46:	3301      	adds	r3, #1
 8007f48:	653b      	str	r3, [r7, #80]	; 0x50
 8007f4a:	8b7b      	ldrh	r3, [r7, #26]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f50:	4293      	cmp	r3, r2
 8007f52:	dbeb      	blt.n	8007f2c <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f107 0214 	add.w	r2, r7, #20
 8007f5c:	4611      	mov	r1, r2
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 f846 	bl	8007ff0 <ai_network_init>
 8007f64:	4603      	mov	r3, r0
 8007f66:	f083 0301 	eor.w	r3, r3, #1
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d006      	beq.n	8007f7e <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7ff ff71 	bl	8007e5c <ai_network_get_error>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8007f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3758      	adds	r7, #88	; 0x58
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d104      	bne.n	8007fa2 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8007f98:	4b06      	ldr	r3, [pc, #24]	; (8007fb4 <ai_network_inputs_get+0x2c>)
 8007f9a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a06      	ldr	r2, [pc, #24]	; (8007fb8 <ai_network_inputs_get+0x30>)
 8007fa0:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 fa25 	bl	80083f4 <ai_platform_inputs_get>
 8007faa:	4603      	mov	r3, r0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	20000840 	.word	0x20000840
 8007fb8:	a1c00100 	.word	0xa1c00100

08007fbc <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d104      	bne.n	8007fd6 <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8007fcc:	4b06      	ldr	r3, [pc, #24]	; (8007fe8 <ai_network_outputs_get+0x2c>)
 8007fce:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a06      	ldr	r2, [pc, #24]	; (8007fec <ai_network_outputs_get+0x30>)
 8007fd4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8007fd6:	6839      	ldr	r1, [r7, #0]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 faff 	bl	80085dc <ai_platform_outputs_get>
 8007fde:	4603      	mov	r3, r0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3708      	adds	r7, #8
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	20000840 	.word	0x20000840
 8007fec:	a1c00100 	.word	0xa1c00100

08007ff0 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8007ffa:	6839      	ldr	r1, [r7, #0]
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fcc7 	bl	8008990 <ai_platform_network_init>
 8008002:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d101      	bne.n	800800e <ai_network_init+0x1e>
 800800a:	2300      	movs	r3, #0
 800800c:	e028      	b.n	8008060 <ai_network_init+0x70>

  ai_bool ok = true;
 800800e:	2301      	movs	r3, #1
 8008010:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8008012:	6839      	ldr	r1, [r7, #0]
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f7ff fe6b 	bl	8007cf0 <network_configure_weights>
 800801a:	4603      	mov	r3, r0
 800801c:	461a      	mov	r2, r3
 800801e:	7afb      	ldrb	r3, [r7, #11]
 8008020:	4013      	ands	r3, r2
 8008022:	2b00      	cmp	r3, #0
 8008024:	bf14      	ite	ne
 8008026:	2301      	movne	r3, #1
 8008028:	2300      	moveq	r3, #0
 800802a:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f7ff fe0c 	bl	8007c4c <network_configure_activations>
 8008034:	4603      	mov	r3, r0
 8008036:	461a      	mov	r2, r3
 8008038:	7afb      	ldrb	r3, [r7, #11]
 800803a:	4013      	ands	r3, r2
 800803c:	2b00      	cmp	r3, #0
 800803e:	bf14      	ite	ne
 8008040:	2301      	movne	r3, #1
 8008042:	2300      	moveq	r3, #0
 8008044:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fdae 	bl	8008ba8 <ai_platform_network_post_init>
 800804c:	4603      	mov	r3, r0
 800804e:	461a      	mov	r2, r3
 8008050:	7afb      	ldrb	r3, [r7, #11]
 8008052:	4013      	ands	r3, r2
 8008054:	2b00      	cmp	r3, #0
 8008056:	bf14      	ite	ne
 8008058:	2301      	movne	r3, #1
 800805a:	2300      	moveq	r3, #0
 800805c:	72fb      	strb	r3, [r7, #11]

  return ok;
 800805e:	7afb      	ldrb	r3, [r7, #11]
}
 8008060:	4618      	mov	r0, r3
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	68b9      	ldr	r1, [r7, #8]
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f000 fe29 	bl	8008cd0 <ai_platform_network_process>
 800807e:	4603      	mov	r3, r0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <ai_network_data_params_get+0x12>
 8008096:	2300      	movs	r3, #0
 8008098:	e016      	b.n	80080c8 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800809a:	4a0d      	ldr	r2, [pc, #52]	; (80080d0 <ai_network_data_params_get+0x48>)
 800809c:	f107 0310 	add.w	r3, r7, #16
 80080a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80080a4:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80080a8:	4a0a      	ldr	r2, [pc, #40]	; (80080d4 <ai_network_data_params_get+0x4c>)
 80080aa:	f107 0308 	add.w	r3, r7, #8
 80080ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80080b2:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80080b6:	f107 0210 	add.w	r2, r7, #16
 80080ba:	f107 0308 	add.w	r3, r7, #8
 80080be:	4619      	mov	r1, r3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f8fb 	bl	80082bc <ai_platform_bind_network_params>
 80080c6:	4603      	mov	r3, r0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3718      	adds	r7, #24
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	0801001c 	.word	0x0801001c
 80080d4:	08010024 	.word	0x08010024

080080d8 <ai_buffer_get_size>:
 80080d8:	b358      	cbz	r0, 8008132 <ai_buffer_get_size+0x5a>
 80080da:	b430      	push	{r4, r5}
 80080dc:	6803      	ldr	r3, [r0, #0]
 80080de:	4d15      	ldr	r5, [pc, #84]	; (8008134 <ai_buffer_get_size+0x5c>)
 80080e0:	6984      	ldr	r4, [r0, #24]
 80080e2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80080e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80080ea:	42ab      	cmp	r3, r5
 80080ec:	6862      	ldr	r2, [r4, #4]
 80080ee:	d01a      	beq.n	8008126 <ai_buffer_get_size+0x4e>
 80080f0:	7d03      	ldrb	r3, [r0, #20]
 80080f2:	6941      	ldr	r1, [r0, #20]
 80080f4:	f1a3 0301 	sub.w	r3, r3, #1
 80080f8:	fab3 f383 	clz	r3, r3
 80080fc:	095b      	lsrs	r3, r3, #5
 80080fe:	f3c1 2117 	ubfx	r1, r1, #8, #24
 8008102:	428b      	cmp	r3, r1
 8008104:	da0b      	bge.n	800811e <ai_buffer_get_size+0x46>
 8008106:	2b01      	cmp	r3, #1
 8008108:	d102      	bne.n	8008110 <ai_buffer_get_size+0x38>
 800810a:	2902      	cmp	r1, #2
 800810c:	d007      	beq.n	800811e <ai_buffer_get_size+0x46>
 800810e:	2302      	movs	r3, #2
 8008110:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8008114:	3301      	adds	r3, #1
 8008116:	428b      	cmp	r3, r1
 8008118:	fb00 f202 	mul.w	r2, r0, r2
 800811c:	d1f3      	bne.n	8008106 <ai_buffer_get_size+0x2e>
 800811e:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8008122:	bc30      	pop	{r4, r5}
 8008124:	4770      	bx	lr
 8008126:	2900      	cmp	r1, #0
 8008128:	d0e2      	beq.n	80080f0 <ai_buffer_get_size+0x18>
 800812a:	321f      	adds	r2, #31
 800812c:	f022 021f 	bic.w	r2, r2, #31
 8008130:	e7de      	b.n	80080f0 <ai_buffer_get_size+0x18>
 8008132:	4770      	bx	lr
 8008134:	000400c0 	.word	0x000400c0

08008138 <ai_buffer_array_sane>:
 8008138:	b138      	cbz	r0, 800814a <ai_buffer_array_sane+0x12>
 800813a:	6843      	ldr	r3, [r0, #4]
 800813c:	b123      	cbz	r3, 8008148 <ai_buffer_array_sane+0x10>
 800813e:	8840      	ldrh	r0, [r0, #2]
 8008140:	3000      	adds	r0, #0
 8008142:	bf18      	it	ne
 8008144:	2001      	movne	r0, #1
 8008146:	4770      	bx	lr
 8008148:	4618      	mov	r0, r3
 800814a:	4770      	bx	lr

0800814c <ai_buffer_array_item_set_address>:
 800814c:	b120      	cbz	r0, 8008158 <ai_buffer_array_item_set_address+0xc>
 800814e:	6843      	ldr	r3, [r0, #4]
 8008150:	b11b      	cbz	r3, 800815a <ai_buffer_array_item_set_address+0xe>
 8008152:	8840      	ldrh	r0, [r0, #2]
 8008154:	b918      	cbnz	r0, 800815e <ai_buffer_array_item_set_address+0x12>
 8008156:	4770      	bx	lr
 8008158:	4770      	bx	lr
 800815a:	4618      	mov	r0, r3
 800815c:	4770      	bx	lr
 800815e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8008162:	eb13 0081 	adds.w	r0, r3, r1, lsl #2
 8008166:	d0f7      	beq.n	8008158 <ai_buffer_array_item_set_address+0xc>
 8008168:	6042      	str	r2, [r0, #4]
 800816a:	2001      	movs	r0, #1
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop

08008170 <_ai_platform_acquire_crc>:
 8008170:	2001      	movs	r0, #1
 8008172:	4770      	bx	lr

08008174 <_ai_platform_release_crc>:
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop

08008178 <ai_platform_get_weights_map>:
 8008178:	b192      	cbz	r2, 80081a0 <ai_platform_get_weights_map+0x28>
 800817a:	b188      	cbz	r0, 80081a0 <ai_platform_get_weights_map+0x28>
 800817c:	b181      	cbz	r1, 80081a0 <ai_platform_get_weights_map+0x28>
 800817e:	b570      	push	{r4, r5, r6, lr}
 8008180:	4b24      	ldr	r3, [pc, #144]	; (8008214 <ai_platform_get_weights_map+0x9c>)
 8008182:	6814      	ldr	r4, [r2, #0]
 8008184:	429c      	cmp	r4, r3
 8008186:	d00d      	beq.n	80081a4 <ai_platform_get_weights_map+0x2c>
 8008188:	6854      	ldr	r4, [r2, #4]
 800818a:	b194      	cbz	r4, 80081b2 <ai_platform_get_weights_map+0x3a>
 800818c:	6825      	ldr	r5, [r4, #0]
 800818e:	429d      	cmp	r5, r3
 8008190:	d027      	beq.n	80081e2 <ai_platform_get_weights_map+0x6a>
 8008192:	6004      	str	r4, [r0, #0]
 8008194:	f1a1 0001 	sub.w	r0, r1, #1
 8008198:	fab0 f080 	clz	r0, r0
 800819c:	0940      	lsrs	r0, r0, #5
 800819e:	bd70      	pop	{r4, r5, r6, pc}
 80081a0:	2000      	movs	r0, #0
 80081a2:	4770      	bx	lr
 80081a4:	4605      	mov	r5, r0
 80081a6:	1d10      	adds	r0, r2, #4
 80081a8:	4616      	mov	r6, r2
 80081aa:	460c      	mov	r4, r1
 80081ac:	f7ff ffc4 	bl	8008138 <ai_buffer_array_sane>
 80081b0:	b908      	cbnz	r0, 80081b6 <ai_platform_get_weights_map+0x3e>
 80081b2:	2000      	movs	r0, #0
 80081b4:	bd70      	pop	{r4, r5, r6, pc}
 80081b6:	88f3      	ldrh	r3, [r6, #6]
 80081b8:	429c      	cmp	r4, r3
 80081ba:	d1fa      	bne.n	80081b2 <ai_platform_get_weights_map+0x3a>
 80081bc:	2100      	movs	r1, #0
 80081be:	1f2b      	subs	r3, r5, #4
 80081c0:	4608      	mov	r0, r1
 80081c2:	68b2      	ldr	r2, [r6, #8]
 80081c4:	440a      	add	r2, r1
 80081c6:	311c      	adds	r1, #28
 80081c8:	6852      	ldr	r2, [r2, #4]
 80081ca:	b12a      	cbz	r2, 80081d8 <ai_platform_get_weights_map+0x60>
 80081cc:	3001      	adds	r0, #1
 80081ce:	4284      	cmp	r4, r0
 80081d0:	f843 2f04 	str.w	r2, [r3, #4]!
 80081d4:	d1f5      	bne.n	80081c2 <ai_platform_get_weights_map+0x4a>
 80081d6:	4620      	mov	r0, r4
 80081d8:	1a20      	subs	r0, r4, r0
 80081da:	fab0 f080 	clz	r0, r0
 80081de:	0940      	lsrs	r0, r0, #5
 80081e0:	bd70      	pop	{r4, r5, r6, pc}
 80081e2:	6863      	ldr	r3, [r4, #4]
 80081e4:	42ab      	cmp	r3, r5
 80081e6:	f104 0404 	add.w	r4, r4, #4
 80081ea:	d0e2      	beq.n	80081b2 <ai_platform_get_weights_map+0x3a>
 80081ec:	3804      	subs	r0, #4
 80081ee:	4626      	mov	r6, r4
 80081f0:	2200      	movs	r2, #0
 80081f2:	e003      	b.n	80081fc <ai_platform_get_weights_map+0x84>
 80081f4:	f856 3f04 	ldr.w	r3, [r6, #4]!
 80081f8:	42ab      	cmp	r3, r5
 80081fa:	d0da      	beq.n	80081b2 <ai_platform_get_weights_map+0x3a>
 80081fc:	3201      	adds	r2, #1
 80081fe:	4291      	cmp	r1, r2
 8008200:	f840 3f04 	str.w	r3, [r0, #4]!
 8008204:	d1f6      	bne.n	80081f4 <ai_platform_get_weights_map+0x7c>
 8008206:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 800820a:	4b02      	ldr	r3, [pc, #8]	; (8008214 <ai_platform_get_weights_map+0x9c>)
 800820c:	429a      	cmp	r2, r3
 800820e:	d1d0      	bne.n	80081b2 <ai_platform_get_weights_map+0x3a>
 8008210:	2001      	movs	r0, #1
 8008212:	bd70      	pop	{r4, r5, r6, pc}
 8008214:	a1facade 	.word	0xa1facade

08008218 <ai_platform_get_activations_map>:
 8008218:	b192      	cbz	r2, 8008240 <ai_platform_get_activations_map+0x28>
 800821a:	b188      	cbz	r0, 8008240 <ai_platform_get_activations_map+0x28>
 800821c:	b181      	cbz	r1, 8008240 <ai_platform_get_activations_map+0x28>
 800821e:	b570      	push	{r4, r5, r6, lr}
 8008220:	4b25      	ldr	r3, [pc, #148]	; (80082b8 <ai_platform_get_activations_map+0xa0>)
 8008222:	6814      	ldr	r4, [r2, #0]
 8008224:	429c      	cmp	r4, r3
 8008226:	d00d      	beq.n	8008244 <ai_platform_get_activations_map+0x2c>
 8008228:	6a14      	ldr	r4, [r2, #32]
 800822a:	b19c      	cbz	r4, 8008254 <ai_platform_get_activations_map+0x3c>
 800822c:	6825      	ldr	r5, [r4, #0]
 800822e:	429d      	cmp	r5, r3
 8008230:	d028      	beq.n	8008284 <ai_platform_get_activations_map+0x6c>
 8008232:	6004      	str	r4, [r0, #0]
 8008234:	f1a1 0001 	sub.w	r0, r1, #1
 8008238:	fab0 f080 	clz	r0, r0
 800823c:	0940      	lsrs	r0, r0, #5
 800823e:	bd70      	pop	{r4, r5, r6, pc}
 8008240:	2000      	movs	r0, #0
 8008242:	4770      	bx	lr
 8008244:	4605      	mov	r5, r0
 8008246:	f102 000c 	add.w	r0, r2, #12
 800824a:	4616      	mov	r6, r2
 800824c:	460c      	mov	r4, r1
 800824e:	f7ff ff73 	bl	8008138 <ai_buffer_array_sane>
 8008252:	b908      	cbnz	r0, 8008258 <ai_platform_get_activations_map+0x40>
 8008254:	2000      	movs	r0, #0
 8008256:	bd70      	pop	{r4, r5, r6, pc}
 8008258:	89f3      	ldrh	r3, [r6, #14]
 800825a:	429c      	cmp	r4, r3
 800825c:	d1fa      	bne.n	8008254 <ai_platform_get_activations_map+0x3c>
 800825e:	2100      	movs	r1, #0
 8008260:	1f2b      	subs	r3, r5, #4
 8008262:	4608      	mov	r0, r1
 8008264:	6932      	ldr	r2, [r6, #16]
 8008266:	440a      	add	r2, r1
 8008268:	311c      	adds	r1, #28
 800826a:	6852      	ldr	r2, [r2, #4]
 800826c:	b12a      	cbz	r2, 800827a <ai_platform_get_activations_map+0x62>
 800826e:	3001      	adds	r0, #1
 8008270:	4284      	cmp	r4, r0
 8008272:	f843 2f04 	str.w	r2, [r3, #4]!
 8008276:	d1f5      	bne.n	8008264 <ai_platform_get_activations_map+0x4c>
 8008278:	4620      	mov	r0, r4
 800827a:	1a20      	subs	r0, r4, r0
 800827c:	fab0 f080 	clz	r0, r0
 8008280:	0940      	lsrs	r0, r0, #5
 8008282:	bd70      	pop	{r4, r5, r6, pc}
 8008284:	6863      	ldr	r3, [r4, #4]
 8008286:	42ab      	cmp	r3, r5
 8008288:	f104 0404 	add.w	r4, r4, #4
 800828c:	d0e2      	beq.n	8008254 <ai_platform_get_activations_map+0x3c>
 800828e:	3804      	subs	r0, #4
 8008290:	4626      	mov	r6, r4
 8008292:	2200      	movs	r2, #0
 8008294:	e003      	b.n	800829e <ai_platform_get_activations_map+0x86>
 8008296:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800829a:	42ab      	cmp	r3, r5
 800829c:	d0da      	beq.n	8008254 <ai_platform_get_activations_map+0x3c>
 800829e:	3201      	adds	r2, #1
 80082a0:	4291      	cmp	r1, r2
 80082a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80082a6:	d1f6      	bne.n	8008296 <ai_platform_get_activations_map+0x7e>
 80082a8:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 80082ac:	4b02      	ldr	r3, [pc, #8]	; (80082b8 <ai_platform_get_activations_map+0xa0>)
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d1d0      	bne.n	8008254 <ai_platform_get_activations_map+0x3c>
 80082b2:	2001      	movs	r0, #1
 80082b4:	bd70      	pop	{r4, r5, r6, pc}
 80082b6:	bf00      	nop
 80082b8:	a1facade 	.word	0xa1facade

080082bc <ai_platform_bind_network_params>:
 80082bc:	4603      	mov	r3, r0
 80082be:	b190      	cbz	r0, 80082e6 <ai_platform_bind_network_params+0x2a>
 80082c0:	b1a1      	cbz	r1, 80082ec <ai_platform_bind_network_params+0x30>
 80082c2:	b18a      	cbz	r2, 80082e8 <ai_platform_bind_network_params+0x2c>
 80082c4:	b410      	push	{r4}
 80082c6:	4604      	mov	r4, r0
 80082c8:	4809      	ldr	r0, [pc, #36]	; (80082f0 <ai_platform_bind_network_params+0x34>)
 80082ca:	f844 0b04 	str.w	r0, [r4], #4
 80082ce:	c903      	ldmia	r1, {r0, r1}
 80082d0:	e884 0003 	stmia.w	r4, {r0, r1}
 80082d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80082d8:	330c      	adds	r3, #12
 80082da:	e883 0003 	stmia.w	r3, {r0, r1}
 80082de:	2001      	movs	r0, #1
 80082e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082e4:	4770      	bx	lr
 80082e6:	4770      	bx	lr
 80082e8:	4610      	mov	r0, r2
 80082ea:	4770      	bx	lr
 80082ec:	4608      	mov	r0, r1
 80082ee:	4770      	bx	lr
 80082f0:	a1facade 	.word	0xa1facade

080082f4 <ai_platform_network_get_error>:
 80082f4:	b510      	push	{r4, lr}
 80082f6:	b120      	cbz	r0, 8008302 <ai_platform_network_get_error+0xe>
 80082f8:	4b32      	ldr	r3, [pc, #200]	; (80083c4 <ai_platform_network_get_error+0xd0>)
 80082fa:	6802      	ldr	r2, [r0, #0]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	4604      	mov	r4, r0
 8008300:	d02e      	beq.n	8008360 <ai_platform_network_get_error+0x6c>
 8008302:	4a31      	ldr	r2, [pc, #196]	; (80083c8 <ai_platform_network_get_error+0xd4>)
 8008304:	6813      	ldr	r3, [r2, #0]
 8008306:	f023 0301 	bic.w	r3, r3, #1
 800830a:	6013      	str	r3, [r2, #0]
 800830c:	f7ff ff30 	bl	8008170 <_ai_platform_acquire_crc>
 8008310:	4b2e      	ldr	r3, [pc, #184]	; (80083cc <ai_platform_network_get_error+0xd8>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800831c:	d00d      	beq.n	800833a <ai_platform_network_get_error+0x46>
 800831e:	4b2c      	ldr	r3, [pc, #176]	; (80083d0 <ai_platform_network_get_error+0xdc>)
 8008320:	2201      	movs	r2, #1
 8008322:	601a      	str	r2, [r3, #0]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	2a00      	cmp	r2, #0
 8008328:	d1fc      	bne.n	8008324 <ai_platform_network_get_error+0x30>
 800832a:	4b2a      	ldr	r3, [pc, #168]	; (80083d4 <ai_platform_network_get_error+0xe0>)
 800832c:	4a2a      	ldr	r2, [pc, #168]	; (80083d8 <ai_platform_network_get_error+0xe4>)
 800832e:	601a      	str	r2, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	4b2a      	ldr	r3, [pc, #168]	; (80083dc <ai_platform_network_get_error+0xe8>)
 8008334:	429a      	cmp	r2, r3
 8008336:	d00d      	beq.n	8008354 <ai_platform_network_get_error+0x60>
 8008338:	e7fe      	b.n	8008338 <ai_platform_network_get_error+0x44>
 800833a:	4b29      	ldr	r3, [pc, #164]	; (80083e0 <ai_platform_network_get_error+0xec>)
 800833c:	2201      	movs	r2, #1
 800833e:	601a      	str	r2, [r3, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	2a00      	cmp	r2, #0
 8008344:	d1fc      	bne.n	8008340 <ai_platform_network_get_error+0x4c>
 8008346:	4b27      	ldr	r3, [pc, #156]	; (80083e4 <ai_platform_network_get_error+0xf0>)
 8008348:	4a23      	ldr	r2, [pc, #140]	; (80083d8 <ai_platform_network_get_error+0xe4>)
 800834a:	601a      	str	r2, [r3, #0]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	4b23      	ldr	r3, [pc, #140]	; (80083dc <ai_platform_network_get_error+0xe8>)
 8008350:	429a      	cmp	r2, r3
 8008352:	d104      	bne.n	800835e <ai_platform_network_get_error+0x6a>
 8008354:	f7ff ff0e 	bl	8008174 <_ai_platform_release_crc>
 8008358:	f241 0010 	movw	r0, #4112	; 0x1010
 800835c:	bd10      	pop	{r4, pc}
 800835e:	e7fe      	b.n	800835e <ai_platform_network_get_error+0x6a>
 8008360:	4a19      	ldr	r2, [pc, #100]	; (80083c8 <ai_platform_network_get_error+0xd4>)
 8008362:	6813      	ldr	r3, [r2, #0]
 8008364:	f023 0301 	bic.w	r3, r3, #1
 8008368:	6013      	str	r3, [r2, #0]
 800836a:	f7ff ff01 	bl	8008170 <_ai_platform_acquire_crc>
 800836e:	4b17      	ldr	r3, [pc, #92]	; (80083cc <ai_platform_network_get_error+0xd8>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800837a:	d00d      	beq.n	8008398 <ai_platform_network_get_error+0xa4>
 800837c:	4b14      	ldr	r3, [pc, #80]	; (80083d0 <ai_platform_network_get_error+0xdc>)
 800837e:	2201      	movs	r2, #1
 8008380:	601a      	str	r2, [r3, #0]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	2a00      	cmp	r2, #0
 8008386:	d1fc      	bne.n	8008382 <ai_platform_network_get_error+0x8e>
 8008388:	4b12      	ldr	r3, [pc, #72]	; (80083d4 <ai_platform_network_get_error+0xe0>)
 800838a:	4a13      	ldr	r2, [pc, #76]	; (80083d8 <ai_platform_network_get_error+0xe4>)
 800838c:	601a      	str	r2, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	4b12      	ldr	r3, [pc, #72]	; (80083dc <ai_platform_network_get_error+0xe8>)
 8008392:	429a      	cmp	r2, r3
 8008394:	d00e      	beq.n	80083b4 <ai_platform_network_get_error+0xc0>
 8008396:	e7fe      	b.n	8008396 <ai_platform_network_get_error+0xa2>
 8008398:	4b11      	ldr	r3, [pc, #68]	; (80083e0 <ai_platform_network_get_error+0xec>)
 800839a:	2201      	movs	r2, #1
 800839c:	601a      	str	r2, [r3, #0]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	2a00      	cmp	r2, #0
 80083a2:	d1fc      	bne.n	800839e <ai_platform_network_get_error+0xaa>
 80083a4:	4b0f      	ldr	r3, [pc, #60]	; (80083e4 <ai_platform_network_get_error+0xf0>)
 80083a6:	4a0c      	ldr	r2, [pc, #48]	; (80083d8 <ai_platform_network_get_error+0xe4>)
 80083a8:	601a      	str	r2, [r3, #0]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	4b0b      	ldr	r3, [pc, #44]	; (80083dc <ai_platform_network_get_error+0xe8>)
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d000      	beq.n	80083b4 <ai_platform_network_get_error+0xc0>
 80083b2:	e7fe      	b.n	80083b2 <ai_platform_network_get_error+0xbe>
 80083b4:	f7ff fede 	bl	8008174 <_ai_platform_release_crc>
 80083b8:	f104 0010 	add.w	r0, r4, #16
 80083bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083c0:	f000 bef4 	b.w	80091ac <core_get_error>
 80083c4:	a1c00100 	.word	0xa1c00100
 80083c8:	e0002000 	.word	0xe0002000
 80083cc:	e0042000 	.word	0xe0042000
 80083d0:	58024c08 	.word	0x58024c08
 80083d4:	58024c00 	.word	0x58024c00
 80083d8:	f407a5c2 	.word	0xf407a5c2
 80083dc:	b5e8b5cd 	.word	0xb5e8b5cd
 80083e0:	40023008 	.word	0x40023008
 80083e4:	40023000 	.word	0x40023000

080083e8 <ai_platform_network_set_error>:
 80083e8:	b110      	cbz	r0, 80083f0 <ai_platform_network_set_error+0x8>
 80083ea:	3010      	adds	r0, #16
 80083ec:	f000 bee4 	b.w	80091b8 <core_set_error>
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop

080083f4 <ai_platform_inputs_get>:
 80083f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f8:	b085      	sub	sp, #20
 80083fa:	2800      	cmp	r0, #0
 80083fc:	f000 80a1 	beq.w	8008542 <ai_platform_inputs_get+0x14e>
 8008400:	4b6d      	ldr	r3, [pc, #436]	; (80085b8 <ai_platform_inputs_get+0x1c4>)
 8008402:	6802      	ldr	r2, [r0, #0]
 8008404:	429a      	cmp	r2, r3
 8008406:	4607      	mov	r7, r0
 8008408:	f040 809b 	bne.w	8008542 <ai_platform_inputs_get+0x14e>
 800840c:	4a6b      	ldr	r2, [pc, #428]	; (80085bc <ai_platform_inputs_get+0x1c8>)
 800840e:	6813      	ldr	r3, [r2, #0]
 8008410:	f023 0301 	bic.w	r3, r3, #1
 8008414:	6013      	str	r3, [r2, #0]
 8008416:	468b      	mov	fp, r1
 8008418:	f7ff feaa 	bl	8008170 <_ai_platform_acquire_crc>
 800841c:	4b68      	ldr	r3, [pc, #416]	; (80085c0 <ai_platform_inputs_get+0x1cc>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008428:	d00d      	beq.n	8008446 <ai_platform_inputs_get+0x52>
 800842a:	4b66      	ldr	r3, [pc, #408]	; (80085c4 <ai_platform_inputs_get+0x1d0>)
 800842c:	2201      	movs	r2, #1
 800842e:	601a      	str	r2, [r3, #0]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	2a00      	cmp	r2, #0
 8008434:	d1fc      	bne.n	8008430 <ai_platform_inputs_get+0x3c>
 8008436:	4b64      	ldr	r3, [pc, #400]	; (80085c8 <ai_platform_inputs_get+0x1d4>)
 8008438:	4a64      	ldr	r2, [pc, #400]	; (80085cc <ai_platform_inputs_get+0x1d8>)
 800843a:	601a      	str	r2, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	4b64      	ldr	r3, [pc, #400]	; (80085d0 <ai_platform_inputs_get+0x1dc>)
 8008440:	429a      	cmp	r2, r3
 8008442:	d00d      	beq.n	8008460 <ai_platform_inputs_get+0x6c>
 8008444:	e7fe      	b.n	8008444 <ai_platform_inputs_get+0x50>
 8008446:	4b63      	ldr	r3, [pc, #396]	; (80085d4 <ai_platform_inputs_get+0x1e0>)
 8008448:	2201      	movs	r2, #1
 800844a:	601a      	str	r2, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	2a00      	cmp	r2, #0
 8008450:	d1fc      	bne.n	800844c <ai_platform_inputs_get+0x58>
 8008452:	4b61      	ldr	r3, [pc, #388]	; (80085d8 <ai_platform_inputs_get+0x1e4>)
 8008454:	4a5d      	ldr	r2, [pc, #372]	; (80085cc <ai_platform_inputs_get+0x1d8>)
 8008456:	601a      	str	r2, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	4b5d      	ldr	r3, [pc, #372]	; (80085d0 <ai_platform_inputs_get+0x1dc>)
 800845c:	429a      	cmp	r2, r3
 800845e:	d16f      	bne.n	8008540 <ai_platform_inputs_get+0x14c>
 8008460:	f7ff fe88 	bl	8008174 <_ai_platform_release_crc>
 8008464:	f1bb 0f00 	cmp.w	fp, #0
 8008468:	d002      	beq.n	8008470 <ai_platform_inputs_get+0x7c>
 800846a:	2300      	movs	r3, #0
 800846c:	f8ab 3000 	strh.w	r3, [fp]
 8008470:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008472:	2b00      	cmp	r3, #0
 8008474:	f000 8081 	beq.w	800857a <ai_platform_inputs_get+0x186>
 8008478:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 800847a:	2e00      	cmp	r6, #0
 800847c:	d07d      	beq.n	800857a <ai_platform_inputs_get+0x186>
 800847e:	8833      	ldrh	r3, [r6, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d07a      	beq.n	800857a <ai_platform_inputs_get+0x186>
 8008484:	6873      	ldr	r3, [r6, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d077      	beq.n	800857a <ai_platform_inputs_get+0x186>
 800848a:	681d      	ldr	r5, [r3, #0]
 800848c:	2d00      	cmp	r5, #0
 800848e:	d074      	beq.n	800857a <ai_platform_inputs_get+0x186>
 8008490:	f04f 0800 	mov.w	r8, #0
 8008494:	f8cd b008 	str.w	fp, [sp, #8]
 8008498:	46c1      	mov	r9, r8
 800849a:	46bb      	mov	fp, r7
 800849c:	68b0      	ldr	r0, [r6, #8]
 800849e:	69aa      	ldr	r2, [r5, #24]
 80084a0:	68ab      	ldr	r3, [r5, #8]
 80084a2:	6844      	ldr	r4, [r0, #4]
 80084a4:	f8d0 a008 	ldr.w	sl, [r0, #8]
 80084a8:	6810      	ldr	r0, [r2, #0]
 80084aa:	68ef      	ldr	r7, [r5, #12]
 80084ac:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80084b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80084b4:	9301      	str	r3, [sp, #4]
 80084b6:	9203      	str	r2, [sp, #12]
 80084b8:	f002 fd32 	bl	800af20 <ai_array_to_buffer_fmt>
 80084bc:	9a03      	ldr	r2, [sp, #12]
 80084be:	4601      	mov	r1, r0
 80084c0:	69a8      	ldr	r0, [r5, #24]
 80084c2:	eb0a 0302 	add.w	r3, sl, r2
 80084c6:	4444      	add	r4, r8
 80084c8:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80084cc:	b16b      	cbz	r3, 80084ea <ai_platform_inputs_get+0xf6>
 80084ce:	2000      	movs	r0, #0
 80084d0:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 80084d4:	6828      	ldr	r0, [r5, #0]
 80084d6:	6058      	str	r0, [r3, #4]
 80084d8:	2800      	cmp	r0, #0
 80084da:	d058      	beq.n	800858e <ai_platform_inputs_get+0x19a>
 80084dc:	8840      	ldrh	r0, [r0, #2]
 80084de:	2800      	cmp	r0, #0
 80084e0:	d055      	beq.n	800858e <ai_platform_inputs_get+0x19a>
 80084e2:	2001      	movs	r0, #1
 80084e4:	f84a 0002 	str.w	r0, [sl, r2]
 80084e8:	69a8      	ldr	r0, [r5, #24]
 80084ea:	6842      	ldr	r2, [r0, #4]
 80084ec:	6122      	str	r2, [r4, #16]
 80084ee:	f04f 0001 	mov.w	r0, #1
 80084f2:	7520      	strb	r0, [r4, #20]
 80084f4:	9a01      	ldr	r2, [sp, #4]
 80084f6:	6960      	ldr	r0, [r4, #20]
 80084f8:	60a3      	str	r3, [r4, #8]
 80084fa:	f362 201f 	bfi	r0, r2, #8, #24
 80084fe:	e9c4 1e00 	strd	r1, lr, [r4]
 8008502:	e9c4 0705 	strd	r0, r7, [r4, #20]
 8008506:	2300      	movs	r3, #0
 8008508:	60e3      	str	r3, [r4, #12]
 800850a:	8830      	ldrh	r0, [r6, #0]
 800850c:	f109 0301 	add.w	r3, r9, #1
 8008510:	4283      	cmp	r3, r0
 8008512:	4699      	mov	r9, r3
 8008514:	b29a      	uxth	r2, r3
 8008516:	d207      	bcs.n	8008528 <ai_platform_inputs_get+0x134>
 8008518:	6870      	ldr	r0, [r6, #4]
 800851a:	b128      	cbz	r0, 8008528 <ai_platform_inputs_get+0x134>
 800851c:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8008520:	f108 081c 	add.w	r8, r8, #28
 8008524:	2d00      	cmp	r5, #0
 8008526:	d1b9      	bne.n	800849c <ai_platform_inputs_get+0xa8>
 8008528:	465f      	mov	r7, fp
 800852a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800852e:	b322      	cbz	r2, 800857a <ai_platform_inputs_get+0x186>
 8008530:	68b3      	ldr	r3, [r6, #8]
 8008532:	6858      	ldr	r0, [r3, #4]
 8008534:	f1bb 0f00 	cmp.w	fp, #0
 8008538:	d026      	beq.n	8008588 <ai_platform_inputs_get+0x194>
 800853a:	f8ab 2000 	strh.w	r2, [fp]
 800853e:	e023      	b.n	8008588 <ai_platform_inputs_get+0x194>
 8008540:	e7fe      	b.n	8008540 <ai_platform_inputs_get+0x14c>
 8008542:	4a1e      	ldr	r2, [pc, #120]	; (80085bc <ai_platform_inputs_get+0x1c8>)
 8008544:	6813      	ldr	r3, [r2, #0]
 8008546:	f023 0301 	bic.w	r3, r3, #1
 800854a:	6013      	str	r3, [r2, #0]
 800854c:	f7ff fe10 	bl	8008170 <_ai_platform_acquire_crc>
 8008550:	4b1b      	ldr	r3, [pc, #108]	; (80085c0 <ai_platform_inputs_get+0x1cc>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800855c:	d01a      	beq.n	8008594 <ai_platform_inputs_get+0x1a0>
 800855e:	4b19      	ldr	r3, [pc, #100]	; (80085c4 <ai_platform_inputs_get+0x1d0>)
 8008560:	2201      	movs	r2, #1
 8008562:	601a      	str	r2, [r3, #0]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	2a00      	cmp	r2, #0
 8008568:	d1fc      	bne.n	8008564 <ai_platform_inputs_get+0x170>
 800856a:	4b17      	ldr	r3, [pc, #92]	; (80085c8 <ai_platform_inputs_get+0x1d4>)
 800856c:	4a17      	ldr	r2, [pc, #92]	; (80085cc <ai_platform_inputs_get+0x1d8>)
 800856e:	601a      	str	r2, [r3, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	4b17      	ldr	r3, [pc, #92]	; (80085d0 <ai_platform_inputs_get+0x1dc>)
 8008574:	429a      	cmp	r2, r3
 8008576:	d01b      	beq.n	80085b0 <ai_platform_inputs_get+0x1bc>
 8008578:	e7fe      	b.n	8008578 <ai_platform_inputs_get+0x184>
 800857a:	f107 0010 	add.w	r0, r7, #16
 800857e:	2218      	movs	r2, #24
 8008580:	2111      	movs	r1, #17
 8008582:	f000 fe19 	bl	80091b8 <core_set_error>
 8008586:	2000      	movs	r0, #0
 8008588:	b005      	add	sp, #20
 800858a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800858e:	69a8      	ldr	r0, [r5, #24]
 8008590:	2300      	movs	r3, #0
 8008592:	e7aa      	b.n	80084ea <ai_platform_inputs_get+0xf6>
 8008594:	4b0f      	ldr	r3, [pc, #60]	; (80085d4 <ai_platform_inputs_get+0x1e0>)
 8008596:	2201      	movs	r2, #1
 8008598:	601a      	str	r2, [r3, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	2a00      	cmp	r2, #0
 800859e:	d1fc      	bne.n	800859a <ai_platform_inputs_get+0x1a6>
 80085a0:	4b0d      	ldr	r3, [pc, #52]	; (80085d8 <ai_platform_inputs_get+0x1e4>)
 80085a2:	4a0a      	ldr	r2, [pc, #40]	; (80085cc <ai_platform_inputs_get+0x1d8>)
 80085a4:	601a      	str	r2, [r3, #0]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	4b09      	ldr	r3, [pc, #36]	; (80085d0 <ai_platform_inputs_get+0x1dc>)
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d000      	beq.n	80085b0 <ai_platform_inputs_get+0x1bc>
 80085ae:	e7fe      	b.n	80085ae <ai_platform_inputs_get+0x1ba>
 80085b0:	f7ff fde0 	bl	8008174 <_ai_platform_release_crc>
 80085b4:	2000      	movs	r0, #0
 80085b6:	e7e7      	b.n	8008588 <ai_platform_inputs_get+0x194>
 80085b8:	a1c00100 	.word	0xa1c00100
 80085bc:	e0002000 	.word	0xe0002000
 80085c0:	e0042000 	.word	0xe0042000
 80085c4:	58024c08 	.word	0x58024c08
 80085c8:	58024c00 	.word	0x58024c00
 80085cc:	f407a5c2 	.word	0xf407a5c2
 80085d0:	b5e8b5cd 	.word	0xb5e8b5cd
 80085d4:	40023008 	.word	0x40023008
 80085d8:	40023000 	.word	0x40023000

080085dc <ai_platform_outputs_get>:
 80085dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e0:	b085      	sub	sp, #20
 80085e2:	2800      	cmp	r0, #0
 80085e4:	f000 80a9 	beq.w	800873a <ai_platform_outputs_get+0x15e>
 80085e8:	4b70      	ldr	r3, [pc, #448]	; (80087ac <ai_platform_outputs_get+0x1d0>)
 80085ea:	6802      	ldr	r2, [r0, #0]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	4607      	mov	r7, r0
 80085f0:	f040 80a3 	bne.w	800873a <ai_platform_outputs_get+0x15e>
 80085f4:	4a6e      	ldr	r2, [pc, #440]	; (80087b0 <ai_platform_outputs_get+0x1d4>)
 80085f6:	6813      	ldr	r3, [r2, #0]
 80085f8:	f023 0301 	bic.w	r3, r3, #1
 80085fc:	6013      	str	r3, [r2, #0]
 80085fe:	468b      	mov	fp, r1
 8008600:	f7ff fdb6 	bl	8008170 <_ai_platform_acquire_crc>
 8008604:	4b6b      	ldr	r3, [pc, #428]	; (80087b4 <ai_platform_outputs_get+0x1d8>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800860c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008610:	d00d      	beq.n	800862e <ai_platform_outputs_get+0x52>
 8008612:	4b69      	ldr	r3, [pc, #420]	; (80087b8 <ai_platform_outputs_get+0x1dc>)
 8008614:	2201      	movs	r2, #1
 8008616:	601a      	str	r2, [r3, #0]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	2a00      	cmp	r2, #0
 800861c:	d1fc      	bne.n	8008618 <ai_platform_outputs_get+0x3c>
 800861e:	4b67      	ldr	r3, [pc, #412]	; (80087bc <ai_platform_outputs_get+0x1e0>)
 8008620:	4a67      	ldr	r2, [pc, #412]	; (80087c0 <ai_platform_outputs_get+0x1e4>)
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	4b67      	ldr	r3, [pc, #412]	; (80087c4 <ai_platform_outputs_get+0x1e8>)
 8008628:	429a      	cmp	r2, r3
 800862a:	d00d      	beq.n	8008648 <ai_platform_outputs_get+0x6c>
 800862c:	e7fe      	b.n	800862c <ai_platform_outputs_get+0x50>
 800862e:	4b66      	ldr	r3, [pc, #408]	; (80087c8 <ai_platform_outputs_get+0x1ec>)
 8008630:	2201      	movs	r2, #1
 8008632:	601a      	str	r2, [r3, #0]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	2a00      	cmp	r2, #0
 8008638:	d1fc      	bne.n	8008634 <ai_platform_outputs_get+0x58>
 800863a:	4b64      	ldr	r3, [pc, #400]	; (80087cc <ai_platform_outputs_get+0x1f0>)
 800863c:	4a60      	ldr	r2, [pc, #384]	; (80087c0 <ai_platform_outputs_get+0x1e4>)
 800863e:	601a      	str	r2, [r3, #0]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	4b60      	ldr	r3, [pc, #384]	; (80087c4 <ai_platform_outputs_get+0x1e8>)
 8008644:	429a      	cmp	r2, r3
 8008646:	d177      	bne.n	8008738 <ai_platform_outputs_get+0x15c>
 8008648:	f7ff fd94 	bl	8008174 <_ai_platform_release_crc>
 800864c:	f1bb 0f00 	cmp.w	fp, #0
 8008650:	d002      	beq.n	8008658 <ai_platform_outputs_get+0x7c>
 8008652:	2300      	movs	r3, #0
 8008654:	f8ab 3000 	strh.w	r3, [fp]
 8008658:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800865a:	2b01      	cmp	r3, #1
 800865c:	f240 809a 	bls.w	8008794 <ai_platform_outputs_get+0x1b8>
 8008660:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8008662:	f116 0f0c 	cmn.w	r6, #12
 8008666:	f000 8095 	beq.w	8008794 <ai_platform_outputs_get+0x1b8>
 800866a:	89b3      	ldrh	r3, [r6, #12]
 800866c:	2b00      	cmp	r3, #0
 800866e:	f000 8091 	beq.w	8008794 <ai_platform_outputs_get+0x1b8>
 8008672:	6933      	ldr	r3, [r6, #16]
 8008674:	2b00      	cmp	r3, #0
 8008676:	f000 808d 	beq.w	8008794 <ai_platform_outputs_get+0x1b8>
 800867a:	681d      	ldr	r5, [r3, #0]
 800867c:	2d00      	cmp	r5, #0
 800867e:	f000 8089 	beq.w	8008794 <ai_platform_outputs_get+0x1b8>
 8008682:	f04f 0800 	mov.w	r8, #0
 8008686:	f8cd b008 	str.w	fp, [sp, #8]
 800868a:	46c1      	mov	r9, r8
 800868c:	46bb      	mov	fp, r7
 800868e:	6970      	ldr	r0, [r6, #20]
 8008690:	69aa      	ldr	r2, [r5, #24]
 8008692:	68ab      	ldr	r3, [r5, #8]
 8008694:	6844      	ldr	r4, [r0, #4]
 8008696:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800869a:	6810      	ldr	r0, [r2, #0]
 800869c:	68ef      	ldr	r7, [r5, #12]
 800869e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80086a2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80086a6:	9301      	str	r3, [sp, #4]
 80086a8:	9203      	str	r2, [sp, #12]
 80086aa:	f002 fc39 	bl	800af20 <ai_array_to_buffer_fmt>
 80086ae:	9a03      	ldr	r2, [sp, #12]
 80086b0:	4601      	mov	r1, r0
 80086b2:	69a8      	ldr	r0, [r5, #24]
 80086b4:	eb0a 0302 	add.w	r3, sl, r2
 80086b8:	4444      	add	r4, r8
 80086ba:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80086be:	b16b      	cbz	r3, 80086dc <ai_platform_outputs_get+0x100>
 80086c0:	2000      	movs	r0, #0
 80086c2:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 80086c6:	6828      	ldr	r0, [r5, #0]
 80086c8:	6058      	str	r0, [r3, #4]
 80086ca:	2800      	cmp	r0, #0
 80086cc:	d051      	beq.n	8008772 <ai_platform_outputs_get+0x196>
 80086ce:	8840      	ldrh	r0, [r0, #2]
 80086d0:	2800      	cmp	r0, #0
 80086d2:	d04e      	beq.n	8008772 <ai_platform_outputs_get+0x196>
 80086d4:	2001      	movs	r0, #1
 80086d6:	f84a 0002 	str.w	r0, [sl, r2]
 80086da:	69a8      	ldr	r0, [r5, #24]
 80086dc:	6842      	ldr	r2, [r0, #4]
 80086de:	6122      	str	r2, [r4, #16]
 80086e0:	f04f 0001 	mov.w	r0, #1
 80086e4:	7520      	strb	r0, [r4, #20]
 80086e6:	9a01      	ldr	r2, [sp, #4]
 80086e8:	6960      	ldr	r0, [r4, #20]
 80086ea:	60a3      	str	r3, [r4, #8]
 80086ec:	f362 201f 	bfi	r0, r2, #8, #24
 80086f0:	e9c4 1e00 	strd	r1, lr, [r4]
 80086f4:	e9c4 0705 	strd	r0, r7, [r4, #20]
 80086f8:	2300      	movs	r3, #0
 80086fa:	60e3      	str	r3, [r4, #12]
 80086fc:	89b0      	ldrh	r0, [r6, #12]
 80086fe:	f109 0301 	add.w	r3, r9, #1
 8008702:	4283      	cmp	r3, r0
 8008704:	4699      	mov	r9, r3
 8008706:	b29a      	uxth	r2, r3
 8008708:	d207      	bcs.n	800871a <ai_platform_outputs_get+0x13e>
 800870a:	6930      	ldr	r0, [r6, #16]
 800870c:	b128      	cbz	r0, 800871a <ai_platform_outputs_get+0x13e>
 800870e:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8008712:	f108 081c 	add.w	r8, r8, #28
 8008716:	2d00      	cmp	r5, #0
 8008718:	d1b9      	bne.n	800868e <ai_platform_outputs_get+0xb2>
 800871a:	465f      	mov	r7, fp
 800871c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008720:	2a00      	cmp	r2, #0
 8008722:	d037      	beq.n	8008794 <ai_platform_outputs_get+0x1b8>
 8008724:	6973      	ldr	r3, [r6, #20]
 8008726:	6858      	ldr	r0, [r3, #4]
 8008728:	f1bb 0f00 	cmp.w	fp, #0
 800872c:	d001      	beq.n	8008732 <ai_platform_outputs_get+0x156>
 800872e:	f8ab 2000 	strh.w	r2, [fp]
 8008732:	b005      	add	sp, #20
 8008734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008738:	e7fe      	b.n	8008738 <ai_platform_outputs_get+0x15c>
 800873a:	4a1d      	ldr	r2, [pc, #116]	; (80087b0 <ai_platform_outputs_get+0x1d4>)
 800873c:	6813      	ldr	r3, [r2, #0]
 800873e:	f023 0301 	bic.w	r3, r3, #1
 8008742:	6013      	str	r3, [r2, #0]
 8008744:	f7ff fd14 	bl	8008170 <_ai_platform_acquire_crc>
 8008748:	4b1a      	ldr	r3, [pc, #104]	; (80087b4 <ai_platform_outputs_get+0x1d8>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008754:	d010      	beq.n	8008778 <ai_platform_outputs_get+0x19c>
 8008756:	4b18      	ldr	r3, [pc, #96]	; (80087b8 <ai_platform_outputs_get+0x1dc>)
 8008758:	2201      	movs	r2, #1
 800875a:	601a      	str	r2, [r3, #0]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	2a00      	cmp	r2, #0
 8008760:	d1fc      	bne.n	800875c <ai_platform_outputs_get+0x180>
 8008762:	4b16      	ldr	r3, [pc, #88]	; (80087bc <ai_platform_outputs_get+0x1e0>)
 8008764:	4a16      	ldr	r2, [pc, #88]	; (80087c0 <ai_platform_outputs_get+0x1e4>)
 8008766:	601a      	str	r2, [r3, #0]
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	4b16      	ldr	r3, [pc, #88]	; (80087c4 <ai_platform_outputs_get+0x1e8>)
 800876c:	429a      	cmp	r2, r3
 800876e:	d019      	beq.n	80087a4 <ai_platform_outputs_get+0x1c8>
 8008770:	e7fe      	b.n	8008770 <ai_platform_outputs_get+0x194>
 8008772:	69a8      	ldr	r0, [r5, #24]
 8008774:	2300      	movs	r3, #0
 8008776:	e7b1      	b.n	80086dc <ai_platform_outputs_get+0x100>
 8008778:	4b13      	ldr	r3, [pc, #76]	; (80087c8 <ai_platform_outputs_get+0x1ec>)
 800877a:	2201      	movs	r2, #1
 800877c:	601a      	str	r2, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	2a00      	cmp	r2, #0
 8008782:	d1fc      	bne.n	800877e <ai_platform_outputs_get+0x1a2>
 8008784:	4b11      	ldr	r3, [pc, #68]	; (80087cc <ai_platform_outputs_get+0x1f0>)
 8008786:	4a0e      	ldr	r2, [pc, #56]	; (80087c0 <ai_platform_outputs_get+0x1e4>)
 8008788:	601a      	str	r2, [r3, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	4b0d      	ldr	r3, [pc, #52]	; (80087c4 <ai_platform_outputs_get+0x1e8>)
 800878e:	429a      	cmp	r2, r3
 8008790:	d008      	beq.n	80087a4 <ai_platform_outputs_get+0x1c8>
 8008792:	e7fe      	b.n	8008792 <ai_platform_outputs_get+0x1b6>
 8008794:	f107 0010 	add.w	r0, r7, #16
 8008798:	2218      	movs	r2, #24
 800879a:	2111      	movs	r1, #17
 800879c:	f000 fd0c 	bl	80091b8 <core_set_error>
 80087a0:	2000      	movs	r0, #0
 80087a2:	e7c6      	b.n	8008732 <ai_platform_outputs_get+0x156>
 80087a4:	f7ff fce6 	bl	8008174 <_ai_platform_release_crc>
 80087a8:	2000      	movs	r0, #0
 80087aa:	e7c2      	b.n	8008732 <ai_platform_outputs_get+0x156>
 80087ac:	a1c00100 	.word	0xa1c00100
 80087b0:	e0002000 	.word	0xe0002000
 80087b4:	e0042000 	.word	0xe0042000
 80087b8:	58024c08 	.word	0x58024c08
 80087bc:	58024c00 	.word	0x58024c00
 80087c0:	f407a5c2 	.word	0xf407a5c2
 80087c4:	b5e8b5cd 	.word	0xb5e8b5cd
 80087c8:	40023008 	.word	0x40023008
 80087cc:	40023000 	.word	0x40023000

080087d0 <ai_platform_network_create>:
 80087d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087d4:	b083      	sub	sp, #12
 80087d6:	4606      	mov	r6, r0
 80087d8:	4615      	mov	r5, r2
 80087da:	461f      	mov	r7, r3
 80087dc:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80087e0:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80087e4:	f7ff fcc4 	bl	8008170 <_ai_platform_acquire_crc>
 80087e8:	b178      	cbz	r0, 800880a <ai_platform_network_create+0x3a>
 80087ea:	4b5f      	ldr	r3, [pc, #380]	; (8008968 <ai_platform_network_create+0x198>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80087f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087f6:	4602      	mov	r2, r0
 80087f8:	d00d      	beq.n	8008816 <ai_platform_network_create+0x46>
 80087fa:	4b5c      	ldr	r3, [pc, #368]	; (800896c <ai_platform_network_create+0x19c>)
 80087fc:	2118      	movs	r1, #24
 80087fe:	6019      	str	r1, [r3, #0]
 8008800:	6819      	ldr	r1, [r3, #0]
 8008802:	2918      	cmp	r1, #24
 8008804:	d01a      	beq.n	800883c <ai_platform_network_create+0x6c>
 8008806:	f7ff fcb5 	bl	8008174 <_ai_platform_release_crc>
 800880a:	f244 1333 	movw	r3, #16691	; 0x4133
 800880e:	4618      	mov	r0, r3
 8008810:	b003      	add	sp, #12
 8008812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008816:	4b56      	ldr	r3, [pc, #344]	; (8008970 <ai_platform_network_create+0x1a0>)
 8008818:	2101      	movs	r1, #1
 800881a:	6019      	str	r1, [r3, #0]
 800881c:	2114      	movs	r1, #20
 800881e:	e001      	b.n	8008824 <ai_platform_network_create+0x54>
 8008820:	3901      	subs	r1, #1
 8008822:	d002      	beq.n	800882a <ai_platform_network_create+0x5a>
 8008824:	6818      	ldr	r0, [r3, #0]
 8008826:	2800      	cmp	r0, #0
 8008828:	d1fa      	bne.n	8008820 <ai_platform_network_create+0x50>
 800882a:	4b51      	ldr	r3, [pc, #324]	; (8008970 <ai_platform_network_create+0x1a0>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	b91b      	cbnz	r3, 8008838 <ai_platform_network_create+0x68>
 8008830:	4b50      	ldr	r3, [pc, #320]	; (8008974 <ai_platform_network_create+0x1a4>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	3301      	adds	r3, #1
 8008836:	d006      	beq.n	8008846 <ai_platform_network_create+0x76>
 8008838:	4610      	mov	r0, r2
 800883a:	e7e4      	b.n	8008806 <ai_platform_network_create+0x36>
 800883c:	2101      	movs	r1, #1
 800883e:	6019      	str	r1, [r3, #0]
 8008840:	6819      	ldr	r1, [r3, #0]
 8008842:	2900      	cmp	r1, #0
 8008844:	d1fc      	bne.n	8008840 <ai_platform_network_create+0x70>
 8008846:	4610      	mov	r0, r2
 8008848:	f7ff fc94 	bl	8008174 <_ai_platform_release_crc>
 800884c:	4a4a      	ldr	r2, [pc, #296]	; (8008978 <ai_platform_network_create+0x1a8>)
 800884e:	6813      	ldr	r3, [r2, #0]
 8008850:	f023 0301 	bic.w	r3, r3, #1
 8008854:	6013      	str	r3, [r2, #0]
 8008856:	f7ff fc8b 	bl	8008170 <_ai_platform_acquire_crc>
 800885a:	4b43      	ldr	r3, [pc, #268]	; (8008968 <ai_platform_network_create+0x198>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008866:	d00d      	beq.n	8008884 <ai_platform_network_create+0xb4>
 8008868:	4b40      	ldr	r3, [pc, #256]	; (800896c <ai_platform_network_create+0x19c>)
 800886a:	2201      	movs	r2, #1
 800886c:	601a      	str	r2, [r3, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	2a00      	cmp	r2, #0
 8008872:	d1fc      	bne.n	800886e <ai_platform_network_create+0x9e>
 8008874:	4b41      	ldr	r3, [pc, #260]	; (800897c <ai_platform_network_create+0x1ac>)
 8008876:	4a42      	ldr	r2, [pc, #264]	; (8008980 <ai_platform_network_create+0x1b0>)
 8008878:	601a      	str	r2, [r3, #0]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	4b41      	ldr	r3, [pc, #260]	; (8008984 <ai_platform_network_create+0x1b4>)
 800887e:	429a      	cmp	r2, r3
 8008880:	d00e      	beq.n	80088a0 <ai_platform_network_create+0xd0>
 8008882:	e7fe      	b.n	8008882 <ai_platform_network_create+0xb2>
 8008884:	4b3a      	ldr	r3, [pc, #232]	; (8008970 <ai_platform_network_create+0x1a0>)
 8008886:	2201      	movs	r2, #1
 8008888:	601a      	str	r2, [r3, #0]
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	2a00      	cmp	r2, #0
 800888e:	d1fc      	bne.n	800888a <ai_platform_network_create+0xba>
 8008890:	4b38      	ldr	r3, [pc, #224]	; (8008974 <ai_platform_network_create+0x1a4>)
 8008892:	4a3b      	ldr	r2, [pc, #236]	; (8008980 <ai_platform_network_create+0x1b0>)
 8008894:	601a      	str	r2, [r3, #0]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	4b3a      	ldr	r3, [pc, #232]	; (8008984 <ai_platform_network_create+0x1b4>)
 800889a:	429a      	cmp	r2, r3
 800889c:	d000      	beq.n	80088a0 <ai_platform_network_create+0xd0>
 800889e:	e7fe      	b.n	800889e <ai_platform_network_create+0xce>
 80088a0:	f7ff fc68 	bl	8008174 <_ai_platform_release_crc>
 80088a4:	b1ae      	cbz	r6, 80088d2 <ai_platform_network_create+0x102>
 80088a6:	4b38      	ldr	r3, [pc, #224]	; (8008988 <ai_platform_network_create+0x1b8>)
 80088a8:	602b      	str	r3, [r5, #0]
 80088aa:	6035      	str	r5, [r6, #0]
 80088ac:	f000 fc7c 	bl	80091a8 <core_init>
 80088b0:	b990      	cbnz	r0, 80088d8 <ai_platform_network_create+0x108>
 80088b2:	2430      	movs	r4, #48	; 0x30
 80088b4:	2300      	movs	r3, #0
 80088b6:	6033      	str	r3, [r6, #0]
 80088b8:	2610      	movs	r6, #16
 80088ba:	464a      	mov	r2, r9
 80088bc:	4641      	mov	r1, r8
 80088be:	4638      	mov	r0, r7
 80088c0:	f002 fb14 	bl	800aeec <ai_version_get>
 80088c4:	2300      	movs	r3, #0
 80088c6:	f364 0307 	bfi	r3, r4, #0, #8
 80088ca:	6468      	str	r0, [r5, #68]	; 0x44
 80088cc:	f366 231f 	bfi	r3, r6, #8, #24
 80088d0:	e79d      	b.n	800880e <ai_platform_network_create+0x3e>
 80088d2:	f241 0310 	movw	r3, #4112	; 0x1010
 80088d6:	e79a      	b.n	800880e <ai_platform_network_create+0x3e>
 80088d8:	4a27      	ldr	r2, [pc, #156]	; (8008978 <ai_platform_network_create+0x1a8>)
 80088da:	6813      	ldr	r3, [r2, #0]
 80088dc:	f023 0301 	bic.w	r3, r3, #1
 80088e0:	6013      	str	r3, [r2, #0]
 80088e2:	f7ff fc45 	bl	8008170 <_ai_platform_acquire_crc>
 80088e6:	4b20      	ldr	r3, [pc, #128]	; (8008968 <ai_platform_network_create+0x198>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80088ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088f2:	d00d      	beq.n	8008910 <ai_platform_network_create+0x140>
 80088f4:	4b1d      	ldr	r3, [pc, #116]	; (800896c <ai_platform_network_create+0x19c>)
 80088f6:	2201      	movs	r2, #1
 80088f8:	601a      	str	r2, [r3, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	2a00      	cmp	r2, #0
 80088fe:	d1fc      	bne.n	80088fa <ai_platform_network_create+0x12a>
 8008900:	4b1e      	ldr	r3, [pc, #120]	; (800897c <ai_platform_network_create+0x1ac>)
 8008902:	4a1f      	ldr	r2, [pc, #124]	; (8008980 <ai_platform_network_create+0x1b0>)
 8008904:	601a      	str	r2, [r3, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	4b1e      	ldr	r3, [pc, #120]	; (8008984 <ai_platform_network_create+0x1b4>)
 800890a:	429a      	cmp	r2, r3
 800890c:	d00e      	beq.n	800892c <ai_platform_network_create+0x15c>
 800890e:	e7fe      	b.n	800890e <ai_platform_network_create+0x13e>
 8008910:	4b17      	ldr	r3, [pc, #92]	; (8008970 <ai_platform_network_create+0x1a0>)
 8008912:	2201      	movs	r2, #1
 8008914:	601a      	str	r2, [r3, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	2a00      	cmp	r2, #0
 800891a:	d1fc      	bne.n	8008916 <ai_platform_network_create+0x146>
 800891c:	4b15      	ldr	r3, [pc, #84]	; (8008974 <ai_platform_network_create+0x1a4>)
 800891e:	4a18      	ldr	r2, [pc, #96]	; (8008980 <ai_platform_network_create+0x1b0>)
 8008920:	601a      	str	r2, [r3, #0]
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	4b17      	ldr	r3, [pc, #92]	; (8008984 <ai_platform_network_create+0x1b4>)
 8008926:	429a      	cmp	r2, r3
 8008928:	d000      	beq.n	800892c <ai_platform_network_create+0x15c>
 800892a:	e7fe      	b.n	800892a <ai_platform_network_create+0x15a>
 800892c:	f7ff fc22 	bl	8008174 <_ai_platform_release_crc>
 8008930:	2200      	movs	r2, #0
 8008932:	4641      	mov	r1, r8
 8008934:	4638      	mov	r0, r7
 8008936:	f002 fad9 	bl	800aeec <ai_version_get>
 800893a:	2200      	movs	r2, #0
 800893c:	4604      	mov	r4, r0
 800893e:	2105      	movs	r1, #5
 8008940:	2001      	movs	r0, #1
 8008942:	f002 fad3 	bl	800aeec <ai_version_get>
 8008946:	4284      	cmp	r4, r0
 8008948:	d001      	beq.n	800894e <ai_platform_network_create+0x17e>
 800894a:	2401      	movs	r4, #1
 800894c:	e7b2      	b.n	80088b4 <ai_platform_network_create+0xe4>
 800894e:	a802      	add	r0, sp, #8
 8008950:	4b0e      	ldr	r3, [pc, #56]	; (800898c <ai_platform_network_create+0x1bc>)
 8008952:	f840 3d04 	str.w	r3, [r0, #-4]!
 8008956:	f002 fa25 	bl	800ada4 <ai_check_custom_types>
 800895a:	b110      	cbz	r0, 8008962 <ai_platform_network_create+0x192>
 800895c:	2600      	movs	r6, #0
 800895e:	4634      	mov	r4, r6
 8008960:	e7ab      	b.n	80088ba <ai_platform_network_create+0xea>
 8008962:	2402      	movs	r4, #2
 8008964:	e7a6      	b.n	80088b4 <ai_platform_network_create+0xe4>
 8008966:	bf00      	nop
 8008968:	e0042000 	.word	0xe0042000
 800896c:	58024c08 	.word	0x58024c08
 8008970:	40023008 	.word	0x40023008
 8008974:	40023000 	.word	0x40023000
 8008978:	e0002000 	.word	0xe0002000
 800897c:	58024c00 	.word	0x58024c00
 8008980:	f407a5c2 	.word	0xf407a5c2
 8008984:	b5e8b5cd 	.word	0xb5e8b5cd
 8008988:	a1c00100 	.word	0xa1c00100
 800898c:	84048403 	.word	0x84048403

08008990 <ai_platform_network_init>:
 8008990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008994:	2800      	cmp	r0, #0
 8008996:	d04b      	beq.n	8008a30 <ai_platform_network_init+0xa0>
 8008998:	4b79      	ldr	r3, [pc, #484]	; (8008b80 <ai_platform_network_init+0x1f0>)
 800899a:	6802      	ldr	r2, [r0, #0]
 800899c:	429a      	cmp	r2, r3
 800899e:	4604      	mov	r4, r0
 80089a0:	d146      	bne.n	8008a30 <ai_platform_network_init+0xa0>
 80089a2:	4a78      	ldr	r2, [pc, #480]	; (8008b84 <ai_platform_network_init+0x1f4>)
 80089a4:	6813      	ldr	r3, [r2, #0]
 80089a6:	f023 0301 	bic.w	r3, r3, #1
 80089aa:	6013      	str	r3, [r2, #0]
 80089ac:	460e      	mov	r6, r1
 80089ae:	f7ff fbdf 	bl	8008170 <_ai_platform_acquire_crc>
 80089b2:	4b75      	ldr	r3, [pc, #468]	; (8008b88 <ai_platform_network_init+0x1f8>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80089ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089be:	d00d      	beq.n	80089dc <ai_platform_network_init+0x4c>
 80089c0:	4b72      	ldr	r3, [pc, #456]	; (8008b8c <ai_platform_network_init+0x1fc>)
 80089c2:	2201      	movs	r2, #1
 80089c4:	601a      	str	r2, [r3, #0]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	2a00      	cmp	r2, #0
 80089ca:	d1fc      	bne.n	80089c6 <ai_platform_network_init+0x36>
 80089cc:	4b70      	ldr	r3, [pc, #448]	; (8008b90 <ai_platform_network_init+0x200>)
 80089ce:	4a71      	ldr	r2, [pc, #452]	; (8008b94 <ai_platform_network_init+0x204>)
 80089d0:	601a      	str	r2, [r3, #0]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	4b70      	ldr	r3, [pc, #448]	; (8008b98 <ai_platform_network_init+0x208>)
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d00d      	beq.n	80089f6 <ai_platform_network_init+0x66>
 80089da:	e7fe      	b.n	80089da <ai_platform_network_init+0x4a>
 80089dc:	4b6f      	ldr	r3, [pc, #444]	; (8008b9c <ai_platform_network_init+0x20c>)
 80089de:	2201      	movs	r2, #1
 80089e0:	601a      	str	r2, [r3, #0]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	2a00      	cmp	r2, #0
 80089e6:	d1fc      	bne.n	80089e2 <ai_platform_network_init+0x52>
 80089e8:	4b6d      	ldr	r3, [pc, #436]	; (8008ba0 <ai_platform_network_init+0x210>)
 80089ea:	4a6a      	ldr	r2, [pc, #424]	; (8008b94 <ai_platform_network_init+0x204>)
 80089ec:	601a      	str	r2, [r3, #0]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	4b69      	ldr	r3, [pc, #420]	; (8008b98 <ai_platform_network_init+0x208>)
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d11b      	bne.n	8008a2e <ai_platform_network_init+0x9e>
 80089f6:	f7ff fbbd 	bl	8008174 <_ai_platform_release_crc>
 80089fa:	2e00      	cmp	r6, #0
 80089fc:	d034      	beq.n	8008a68 <ai_platform_network_init+0xd8>
 80089fe:	4b69      	ldr	r3, [pc, #420]	; (8008ba4 <ai_platform_network_init+0x214>)
 8008a00:	6832      	ldr	r2, [r6, #0]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d149      	bne.n	8008a9a <ai_platform_network_init+0x10a>
 8008a06:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8008a0a:	6930      	ldr	r0, [r6, #16]
 8008a0c:	89b3      	ldrh	r3, [r6, #12]
 8008a0e:	f8b6 c00e 	ldrh.w	ip, [r6, #14]
 8008a12:	62a0      	str	r0, [r4, #40]	; 0x28
 8008a14:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8008a18:	2203      	movs	r2, #3
 8008a1a:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8008a1e:	84a3      	strh	r3, [r4, #36]	; 0x24
 8008a20:	60e2      	str	r2, [r4, #12]
 8008a22:	4620      	mov	r0, r4
 8008a24:	f002 f9e8 	bl	800adf8 <ai_layers_init_all>
 8008a28:	4620      	mov	r0, r4
 8008a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a2e:	e7fe      	b.n	8008a2e <ai_platform_network_init+0x9e>
 8008a30:	4a54      	ldr	r2, [pc, #336]	; (8008b84 <ai_platform_network_init+0x1f4>)
 8008a32:	6813      	ldr	r3, [r2, #0]
 8008a34:	f023 0301 	bic.w	r3, r3, #1
 8008a38:	6013      	str	r3, [r2, #0]
 8008a3a:	f7ff fb99 	bl	8008170 <_ai_platform_acquire_crc>
 8008a3e:	4b52      	ldr	r3, [pc, #328]	; (8008b88 <ai_platform_network_init+0x1f8>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a4a:	d015      	beq.n	8008a78 <ai_platform_network_init+0xe8>
 8008a4c:	4b4f      	ldr	r3, [pc, #316]	; (8008b8c <ai_platform_network_init+0x1fc>)
 8008a4e:	2201      	movs	r2, #1
 8008a50:	601a      	str	r2, [r3, #0]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	2a00      	cmp	r2, #0
 8008a56:	d1fc      	bne.n	8008a52 <ai_platform_network_init+0xc2>
 8008a58:	4b4d      	ldr	r3, [pc, #308]	; (8008b90 <ai_platform_network_init+0x200>)
 8008a5a:	4a4e      	ldr	r2, [pc, #312]	; (8008b94 <ai_platform_network_init+0x204>)
 8008a5c:	601a      	str	r2, [r3, #0]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	4b4d      	ldr	r3, [pc, #308]	; (8008b98 <ai_platform_network_init+0x208>)
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d015      	beq.n	8008a92 <ai_platform_network_init+0x102>
 8008a66:	e7fe      	b.n	8008a66 <ai_platform_network_init+0xd6>
 8008a68:	f104 0010 	add.w	r0, r4, #16
 8008a6c:	2211      	movs	r2, #17
 8008a6e:	2110      	movs	r1, #16
 8008a70:	4634      	mov	r4, r6
 8008a72:	f000 fba1 	bl	80091b8 <core_set_error>
 8008a76:	e7d7      	b.n	8008a28 <ai_platform_network_init+0x98>
 8008a78:	4b48      	ldr	r3, [pc, #288]	; (8008b9c <ai_platform_network_init+0x20c>)
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	601a      	str	r2, [r3, #0]
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	2a00      	cmp	r2, #0
 8008a82:	d1fc      	bne.n	8008a7e <ai_platform_network_init+0xee>
 8008a84:	4b46      	ldr	r3, [pc, #280]	; (8008ba0 <ai_platform_network_init+0x210>)
 8008a86:	4a43      	ldr	r2, [pc, #268]	; (8008b94 <ai_platform_network_init+0x204>)
 8008a88:	601a      	str	r2, [r3, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	4b42      	ldr	r3, [pc, #264]	; (8008b98 <ai_platform_network_init+0x208>)
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d16d      	bne.n	8008b6e <ai_platform_network_init+0x1de>
 8008a92:	f7ff fb6f 	bl	8008174 <_ai_platform_release_crc>
 8008a96:	2400      	movs	r4, #0
 8008a98:	e7c6      	b.n	8008a28 <ai_platform_network_init+0x98>
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	2101      	movs	r1, #1
 8008a9e:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8008aa2:	f7ff fb19 	bl	80080d8 <ai_buffer_get_size>
 8008aa6:	4635      	mov	r5, r6
 8008aa8:	f106 071c 	add.w	r7, r6, #28
 8008aac:	2101      	movs	r1, #1
 8008aae:	4606      	mov	r6, r0
 8008ab0:	4638      	mov	r0, r7
 8008ab2:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8008ab6:	f7ff fb0f 	bl	80080d8 <ai_buffer_get_size>
 8008aba:	2e00      	cmp	r6, #0
 8008abc:	bf0a      	itet	eq
 8008abe:	46b6      	moveq	lr, r6
 8008ac0:	f04f 0e01 	movne.w	lr, #1
 8008ac4:	4635      	moveq	r5, r6
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	d14b      	bne.n	8008b62 <ai_platform_network_init+0x1d2>
 8008aca:	4607      	mov	r7, r0
 8008acc:	4684      	mov	ip, r0
 8008ace:	f1b8 0f00 	cmp.w	r8, #0
 8008ad2:	d023      	beq.n	8008b1c <ai_platform_network_init+0x18c>
 8008ad4:	8be3      	ldrh	r3, [r4, #30]
 8008ad6:	4573      	cmp	r3, lr
 8008ad8:	d207      	bcs.n	8008aea <ai_platform_network_init+0x15a>
 8008ada:	f104 0010 	add.w	r0, r4, #16
 8008ade:	2212      	movs	r2, #18
 8008ae0:	2116      	movs	r1, #22
 8008ae2:	f000 fb69 	bl	80091b8 <core_set_error>
 8008ae6:	2400      	movs	r4, #0
 8008ae8:	e79e      	b.n	8008a28 <ai_platform_network_init+0x98>
 8008aea:	f1be 0f00 	cmp.w	lr, #0
 8008aee:	d006      	beq.n	8008afe <ai_platform_network_init+0x16e>
 8008af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008af2:	6a26      	ldr	r6, [r4, #32]
 8008af4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008af6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008afa:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8008afe:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8008b00:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8008b04:	2600      	movs	r6, #0
 8008b06:	4563      	cmp	r3, ip
 8008b08:	83a6      	strh	r6, [r4, #28]
 8008b0a:	d211      	bcs.n	8008b30 <ai_platform_network_init+0x1a0>
 8008b0c:	f104 0010 	add.w	r0, r4, #16
 8008b10:	2213      	movs	r2, #19
 8008b12:	2116      	movs	r1, #22
 8008b14:	f000 fb50 	bl	80091b8 <core_set_error>
 8008b18:	4634      	mov	r4, r6
 8008b1a:	e785      	b.n	8008a28 <ai_platform_network_init+0x98>
 8008b1c:	2e00      	cmp	r6, #0
 8008b1e:	d0d9      	beq.n	8008ad4 <ai_platform_network_init+0x144>
 8008b20:	f104 0010 	add.w	r0, r4, #16
 8008b24:	2212      	movs	r2, #18
 8008b26:	2110      	movs	r1, #16
 8008b28:	4644      	mov	r4, r8
 8008b2a:	f000 fb45 	bl	80091b8 <core_set_error>
 8008b2e:	e77b      	b.n	8008a28 <ai_platform_network_init+0x98>
 8008b30:	f1bc 0f00 	cmp.w	ip, #0
 8008b34:	d013      	beq.n	8008b5e <ai_platform_network_init+0x1ce>
 8008b36:	f04f 081c 	mov.w	r8, #28
 8008b3a:	fb08 f80c 	mul.w	r8, r8, ip
 8008b3e:	eb07 0e06 	add.w	lr, r7, r6
 8008b42:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008b46:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8008b48:	4435      	add	r5, r6
 8008b4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008b4c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8008b50:	361c      	adds	r6, #28
 8008b52:	4546      	cmp	r6, r8
 8008b54:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8008b58:	d1f1      	bne.n	8008b3e <ai_platform_network_init+0x1ae>
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	e75c      	b.n	8008a18 <ai_platform_network_init+0x88>
 8008b5e:	4663      	mov	r3, ip
 8008b60:	e75a      	b.n	8008a18 <ai_platform_network_init+0x88>
 8008b62:	f1b9 0f00 	cmp.w	r9, #0
 8008b66:	d003      	beq.n	8008b70 <ai_platform_network_init+0x1e0>
 8008b68:	f04f 0c01 	mov.w	ip, #1
 8008b6c:	e7af      	b.n	8008ace <ai_platform_network_init+0x13e>
 8008b6e:	e7fe      	b.n	8008b6e <ai_platform_network_init+0x1de>
 8008b70:	f104 0010 	add.w	r0, r4, #16
 8008b74:	2213      	movs	r2, #19
 8008b76:	2110      	movs	r1, #16
 8008b78:	464c      	mov	r4, r9
 8008b7a:	f000 fb1d 	bl	80091b8 <core_set_error>
 8008b7e:	e753      	b.n	8008a28 <ai_platform_network_init+0x98>
 8008b80:	a1c00100 	.word	0xa1c00100
 8008b84:	e0002000 	.word	0xe0002000
 8008b88:	e0042000 	.word	0xe0042000
 8008b8c:	58024c08 	.word	0x58024c08
 8008b90:	58024c00 	.word	0x58024c00
 8008b94:	f407a5c2 	.word	0xf407a5c2
 8008b98:	b5e8b5cd 	.word	0xb5e8b5cd
 8008b9c:	40023008 	.word	0x40023008
 8008ba0:	40023000 	.word	0x40023000
 8008ba4:	a1facade 	.word	0xa1facade

08008ba8 <ai_platform_network_post_init>:
 8008ba8:	b538      	push	{r3, r4, r5, lr}
 8008baa:	b120      	cbz	r0, 8008bb6 <ai_platform_network_post_init+0xe>
 8008bac:	4b3f      	ldr	r3, [pc, #252]	; (8008cac <ai_platform_network_post_init+0x104>)
 8008bae:	6802      	ldr	r2, [r0, #0]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	4604      	mov	r4, r0
 8008bb4:	d02d      	beq.n	8008c12 <ai_platform_network_post_init+0x6a>
 8008bb6:	4a3e      	ldr	r2, [pc, #248]	; (8008cb0 <ai_platform_network_post_init+0x108>)
 8008bb8:	6813      	ldr	r3, [r2, #0]
 8008bba:	f023 0301 	bic.w	r3, r3, #1
 8008bbe:	6013      	str	r3, [r2, #0]
 8008bc0:	f7ff fad6 	bl	8008170 <_ai_platform_acquire_crc>
 8008bc4:	4b3b      	ldr	r3, [pc, #236]	; (8008cb4 <ai_platform_network_post_init+0x10c>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bd0:	d00d      	beq.n	8008bee <ai_platform_network_post_init+0x46>
 8008bd2:	4b39      	ldr	r3, [pc, #228]	; (8008cb8 <ai_platform_network_post_init+0x110>)
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	601a      	str	r2, [r3, #0]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	2a00      	cmp	r2, #0
 8008bdc:	d1fc      	bne.n	8008bd8 <ai_platform_network_post_init+0x30>
 8008bde:	4b37      	ldr	r3, [pc, #220]	; (8008cbc <ai_platform_network_post_init+0x114>)
 8008be0:	4a37      	ldr	r2, [pc, #220]	; (8008cc0 <ai_platform_network_post_init+0x118>)
 8008be2:	601a      	str	r2, [r3, #0]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	4b37      	ldr	r3, [pc, #220]	; (8008cc4 <ai_platform_network_post_init+0x11c>)
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d00d      	beq.n	8008c08 <ai_platform_network_post_init+0x60>
 8008bec:	e7fe      	b.n	8008bec <ai_platform_network_post_init+0x44>
 8008bee:	4b36      	ldr	r3, [pc, #216]	; (8008cc8 <ai_platform_network_post_init+0x120>)
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	601a      	str	r2, [r3, #0]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	2a00      	cmp	r2, #0
 8008bf8:	d1fc      	bne.n	8008bf4 <ai_platform_network_post_init+0x4c>
 8008bfa:	4b34      	ldr	r3, [pc, #208]	; (8008ccc <ai_platform_network_post_init+0x124>)
 8008bfc:	4a30      	ldr	r2, [pc, #192]	; (8008cc0 <ai_platform_network_post_init+0x118>)
 8008bfe:	601a      	str	r2, [r3, #0]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	4b30      	ldr	r3, [pc, #192]	; (8008cc4 <ai_platform_network_post_init+0x11c>)
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d103      	bne.n	8008c10 <ai_platform_network_post_init+0x68>
 8008c08:	f7ff fab4 	bl	8008174 <_ai_platform_release_crc>
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	bd38      	pop	{r3, r4, r5, pc}
 8008c10:	e7fe      	b.n	8008c10 <ai_platform_network_post_init+0x68>
 8008c12:	4a27      	ldr	r2, [pc, #156]	; (8008cb0 <ai_platform_network_post_init+0x108>)
 8008c14:	6813      	ldr	r3, [r2, #0]
 8008c16:	f023 0301 	bic.w	r3, r3, #1
 8008c1a:	6013      	str	r3, [r2, #0]
 8008c1c:	f7ff faa8 	bl	8008170 <_ai_platform_acquire_crc>
 8008c20:	4b24      	ldr	r3, [pc, #144]	; (8008cb4 <ai_platform_network_post_init+0x10c>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c2c:	d00d      	beq.n	8008c4a <ai_platform_network_post_init+0xa2>
 8008c2e:	4b22      	ldr	r3, [pc, #136]	; (8008cb8 <ai_platform_network_post_init+0x110>)
 8008c30:	2201      	movs	r2, #1
 8008c32:	601a      	str	r2, [r3, #0]
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	2a00      	cmp	r2, #0
 8008c38:	d1fc      	bne.n	8008c34 <ai_platform_network_post_init+0x8c>
 8008c3a:	4b20      	ldr	r3, [pc, #128]	; (8008cbc <ai_platform_network_post_init+0x114>)
 8008c3c:	4a20      	ldr	r2, [pc, #128]	; (8008cc0 <ai_platform_network_post_init+0x118>)
 8008c3e:	601a      	str	r2, [r3, #0]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	4b20      	ldr	r3, [pc, #128]	; (8008cc4 <ai_platform_network_post_init+0x11c>)
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d00e      	beq.n	8008c66 <ai_platform_network_post_init+0xbe>
 8008c48:	e7fe      	b.n	8008c48 <ai_platform_network_post_init+0xa0>
 8008c4a:	4b1f      	ldr	r3, [pc, #124]	; (8008cc8 <ai_platform_network_post_init+0x120>)
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	601a      	str	r2, [r3, #0]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	2a00      	cmp	r2, #0
 8008c54:	d1fc      	bne.n	8008c50 <ai_platform_network_post_init+0xa8>
 8008c56:	4b1d      	ldr	r3, [pc, #116]	; (8008ccc <ai_platform_network_post_init+0x124>)
 8008c58:	4a19      	ldr	r2, [pc, #100]	; (8008cc0 <ai_platform_network_post_init+0x118>)
 8008c5a:	601a      	str	r2, [r3, #0]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	4b19      	ldr	r3, [pc, #100]	; (8008cc4 <ai_platform_network_post_init+0x11c>)
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d000      	beq.n	8008c66 <ai_platform_network_post_init+0xbe>
 8008c64:	e7fe      	b.n	8008c64 <ai_platform_network_post_init+0xbc>
 8008c66:	f7ff fa85 	bl	8008174 <_ai_platform_release_crc>
 8008c6a:	68e3      	ldr	r3, [r4, #12]
 8008c6c:	f013 0502 	ands.w	r5, r3, #2
 8008c70:	d011      	beq.n	8008c96 <ai_platform_network_post_init+0xee>
 8008c72:	4620      	mov	r0, r4
 8008c74:	f002 f8d4 	bl	800ae20 <ai_layers_post_init_all>
 8008c78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008c7a:	b1a3      	cbz	r3, 8008ca6 <ai_platform_network_post_init+0xfe>
 8008c7c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8008c7e:	b195      	cbz	r5, 8008ca6 <ai_platform_network_post_init+0xfe>
 8008c80:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008c82:	4629      	mov	r1, r5
 8008c84:	2000      	movs	r0, #0
 8008c86:	4798      	blx	r3
 8008c88:	692b      	ldr	r3, [r5, #16]
 8008c8a:	42ab      	cmp	r3, r5
 8008c8c:	d00b      	beq.n	8008ca6 <ai_platform_network_post_init+0xfe>
 8008c8e:	461d      	mov	r5, r3
 8008c90:	b14b      	cbz	r3, 8008ca6 <ai_platform_network_post_init+0xfe>
 8008c92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008c94:	e7f4      	b.n	8008c80 <ai_platform_network_post_init+0xd8>
 8008c96:	f104 0010 	add.w	r0, r4, #16
 8008c9a:	2210      	movs	r2, #16
 8008c9c:	2111      	movs	r1, #17
 8008c9e:	f000 fa8b 	bl	80091b8 <core_set_error>
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	bd38      	pop	{r3, r4, r5, pc}
 8008ca6:	2001      	movs	r0, #1
 8008ca8:	bd38      	pop	{r3, r4, r5, pc}
 8008caa:	bf00      	nop
 8008cac:	a1c00100 	.word	0xa1c00100
 8008cb0:	e0002000 	.word	0xe0002000
 8008cb4:	e0042000 	.word	0xe0042000
 8008cb8:	58024c08 	.word	0x58024c08
 8008cbc:	58024c00 	.word	0x58024c00
 8008cc0:	f407a5c2 	.word	0xf407a5c2
 8008cc4:	b5e8b5cd 	.word	0xb5e8b5cd
 8008cc8:	40023008 	.word	0x40023008
 8008ccc:	40023000 	.word	0x40023000

08008cd0 <ai_platform_network_process>:
 8008cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd4:	b085      	sub	sp, #20
 8008cd6:	460d      	mov	r5, r1
 8008cd8:	9202      	str	r2, [sp, #8]
 8008cda:	4604      	mov	r4, r0
 8008cdc:	b120      	cbz	r0, 8008ce8 <ai_platform_network_process+0x18>
 8008cde:	4b73      	ldr	r3, [pc, #460]	; (8008eac <ai_platform_network_process+0x1dc>)
 8008ce0:	6802      	ldr	r2, [r0, #0]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	bf18      	it	ne
 8008ce6:	2400      	movne	r4, #0
 8008ce8:	4a71      	ldr	r2, [pc, #452]	; (8008eb0 <ai_platform_network_process+0x1e0>)
 8008cea:	6813      	ldr	r3, [r2, #0]
 8008cec:	f023 0301 	bic.w	r3, r3, #1
 8008cf0:	6013      	str	r3, [r2, #0]
 8008cf2:	f7ff fa3d 	bl	8008170 <_ai_platform_acquire_crc>
 8008cf6:	4b6f      	ldr	r3, [pc, #444]	; (8008eb4 <ai_platform_network_process+0x1e4>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d02:	d00d      	beq.n	8008d20 <ai_platform_network_process+0x50>
 8008d04:	4b6c      	ldr	r3, [pc, #432]	; (8008eb8 <ai_platform_network_process+0x1e8>)
 8008d06:	2201      	movs	r2, #1
 8008d08:	601a      	str	r2, [r3, #0]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	2a00      	cmp	r2, #0
 8008d0e:	d1fc      	bne.n	8008d0a <ai_platform_network_process+0x3a>
 8008d10:	4b6a      	ldr	r3, [pc, #424]	; (8008ebc <ai_platform_network_process+0x1ec>)
 8008d12:	4a6b      	ldr	r2, [pc, #428]	; (8008ec0 <ai_platform_network_process+0x1f0>)
 8008d14:	601a      	str	r2, [r3, #0]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	4b6a      	ldr	r3, [pc, #424]	; (8008ec4 <ai_platform_network_process+0x1f4>)
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d00e      	beq.n	8008d3c <ai_platform_network_process+0x6c>
 8008d1e:	e7fe      	b.n	8008d1e <ai_platform_network_process+0x4e>
 8008d20:	4b69      	ldr	r3, [pc, #420]	; (8008ec8 <ai_platform_network_process+0x1f8>)
 8008d22:	2201      	movs	r2, #1
 8008d24:	601a      	str	r2, [r3, #0]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	2a00      	cmp	r2, #0
 8008d2a:	d1fc      	bne.n	8008d26 <ai_platform_network_process+0x56>
 8008d2c:	4b67      	ldr	r3, [pc, #412]	; (8008ecc <ai_platform_network_process+0x1fc>)
 8008d2e:	4a64      	ldr	r2, [pc, #400]	; (8008ec0 <ai_platform_network_process+0x1f0>)
 8008d30:	601a      	str	r2, [r3, #0]
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	4b63      	ldr	r3, [pc, #396]	; (8008ec4 <ai_platform_network_process+0x1f4>)
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d000      	beq.n	8008d3c <ai_platform_network_process+0x6c>
 8008d3a:	e7fe      	b.n	8008d3a <ai_platform_network_process+0x6a>
 8008d3c:	f7ff fa1a 	bl	8008174 <_ai_platform_release_crc>
 8008d40:	2c00      	cmp	r4, #0
 8008d42:	f000 8089 	beq.w	8008e58 <ai_platform_network_process+0x188>
 8008d46:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 8008d48:	2f00      	cmp	r7, #0
 8008d4a:	f040 822b 	bne.w	80091a4 <ai_platform_network_process+0x4d4>
 8008d4e:	68e3      	ldr	r3, [r4, #12]
 8008d50:	f003 0303 	and.w	r3, r3, #3
 8008d54:	2600      	movs	r6, #0
 8008d56:	2b03      	cmp	r3, #3
 8008d58:	6166      	str	r6, [r4, #20]
 8008d5a:	f040 821b 	bne.w	8009194 <ai_platform_network_process+0x4c4>
 8008d5e:	2d00      	cmp	r5, #0
 8008d60:	f000 809c 	beq.w	8008e9c <ai_platform_network_process+0x1cc>
 8008d64:	2f00      	cmp	r7, #0
 8008d66:	f000 8099 	beq.w	8008e9c <ai_platform_network_process+0x1cc>
 8008d6a:	883b      	ldrh	r3, [r7, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	f000 8095 	beq.w	8008e9c <ai_platform_network_process+0x1cc>
 8008d72:	69aa      	ldr	r2, [r5, #24]
 8008d74:	9401      	str	r4, [sp, #4]
 8008d76:	f8d2 8000 	ldr.w	r8, [r2]
 8008d7a:	429e      	cmp	r6, r3
 8008d7c:	f080 80a8 	bcs.w	8008ed0 <ai_platform_network_process+0x200>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f000 80a4 	beq.w	8008ed0 <ai_platform_network_process+0x200>
 8008d88:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8008d8c:	2c00      	cmp	r4, #0
 8008d8e:	f000 809f 	beq.w	8008ed0 <ai_platform_network_process+0x200>
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	f8d3 b000 	ldr.w	fp, [r3]
 8008d98:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8008d9c:	eb1b 0a09 	adds.w	sl, fp, r9
 8008da0:	d07b      	beq.n	8008e9a <ai_platform_network_process+0x1ca>
 8008da2:	69a3      	ldr	r3, [r4, #24]
 8008da4:	2101      	movs	r1, #1
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	9303      	str	r3, [sp, #12]
 8008daa:	4628      	mov	r0, r5
 8008dac:	f7ff f994 	bl	80080d8 <ai_buffer_get_size>
 8008db0:	9b03      	ldr	r3, [sp, #12]
 8008db2:	4283      	cmp	r3, r0
 8008db4:	d368      	bcc.n	8008e88 <ai_platform_network_process+0x1b8>
 8008db6:	68e0      	ldr	r0, [r4, #12]
 8008db8:	69a9      	ldr	r1, [r5, #24]
 8008dba:	68c2      	ldr	r2, [r0, #12]
 8008dbc:	68cb      	ldr	r3, [r1, #12]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d162      	bne.n	8008e88 <ai_platform_network_process+0x1b8>
 8008dc2:	6882      	ldr	r2, [r0, #8]
 8008dc4:	688b      	ldr	r3, [r1, #8]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d15e      	bne.n	8008e88 <ai_platform_network_process+0x1b8>
 8008dca:	6842      	ldr	r2, [r0, #4]
 8008dcc:	684b      	ldr	r3, [r1, #4]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d15a      	bne.n	8008e88 <ai_platform_network_process+0x1b8>
 8008dd2:	69a3      	ldr	r3, [r4, #24]
 8008dd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008dd8:	f002 f91c 	bl	800b014 <ai_array_get_data_byte_size>
 8008ddc:	9003      	str	r0, [sp, #12]
 8008dde:	4620      	mov	r0, r4
 8008de0:	f002 f88a 	bl	800aef8 <get_tensor_byte_size>
 8008de4:	9b03      	ldr	r3, [sp, #12]
 8008de6:	4283      	cmp	r3, r0
 8008de8:	d34e      	bcc.n	8008e88 <ai_platform_network_process+0x1b8>
 8008dea:	69a3      	ldr	r3, [r4, #24]
 8008dec:	6818      	ldr	r0, [r3, #0]
 8008dee:	f002 f897 	bl	800af20 <ai_array_to_buffer_fmt>
 8008df2:	682b      	ldr	r3, [r5, #0]
 8008df4:	4043      	eors	r3, r0
 8008df6:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8008dfa:	d13c      	bne.n	8008e76 <ai_platform_network_process+0x1a6>
 8008dfc:	686b      	ldr	r3, [r5, #4]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d04b      	beq.n	8008e9a <ai_platform_network_process+0x1ca>
 8008e02:	69ab      	ldr	r3, [r5, #24]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	b362      	cbz	r2, 8008e62 <ai_platform_network_process+0x192>
 8008e08:	4620      	mov	r0, r4
 8008e0a:	9203      	str	r2, [sp, #12]
 8008e0c:	f002 f874 	bl	800aef8 <get_tensor_byte_size>
 8008e10:	f8ca 0008 	str.w	r0, [sl, #8]
 8008e14:	69ab      	ldr	r3, [r5, #24]
 8008e16:	9a03      	ldr	r2, [sp, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	fb03 f000 	mul.w	r0, r3, r0
 8008e1e:	f8ca 000c 	str.w	r0, [sl, #12]
 8008e22:	6869      	ldr	r1, [r5, #4]
 8008e24:	f8ca 1004 	str.w	r1, [sl, #4]
 8008e28:	686b      	ldr	r3, [r5, #4]
 8008e2a:	4403      	add	r3, r0
 8008e2c:	f84b 3009 	str.w	r3, [fp, r9]
 8008e30:	69a0      	ldr	r0, [r4, #24]
 8008e32:	6803      	ldr	r3, [r0, #0]
 8008e34:	4590      	cmp	r8, r2
 8008e36:	bf38      	it	cc
 8008e38:	4690      	movcc	r8, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	d408      	bmi.n	8008e50 <ai_platform_network_process+0x180>
 8008e3e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8008e42:	1a9b      	subs	r3, r3, r2
 8008e44:	4419      	add	r1, r3
 8008e46:	6081      	str	r1, [r0, #8]
 8008e48:	69a3      	ldr	r3, [r4, #24]
 8008e4a:	f8da 2004 	ldr.w	r2, [sl, #4]
 8008e4e:	60da      	str	r2, [r3, #12]
 8008e50:	883b      	ldrh	r3, [r7, #0]
 8008e52:	3601      	adds	r6, #1
 8008e54:	351c      	adds	r5, #28
 8008e56:	e790      	b.n	8008d7a <ai_platform_network_process+0xaa>
 8008e58:	4623      	mov	r3, r4
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	b005      	add	sp, #20
 8008e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e62:	9c01      	ldr	r4, [sp, #4]
 8008e64:	4692      	mov	sl, r2
 8008e66:	f104 0010 	add.w	r0, r4, #16
 8008e6a:	2221      	movs	r2, #33	; 0x21
 8008e6c:	2112      	movs	r1, #18
 8008e6e:	f000 f9a3 	bl	80091b8 <core_set_error>
 8008e72:	4653      	mov	r3, sl
 8008e74:	e7f1      	b.n	8008e5a <ai_platform_network_process+0x18a>
 8008e76:	9c01      	ldr	r4, [sp, #4]
 8008e78:	2219      	movs	r2, #25
 8008e7a:	f104 0010 	add.w	r0, r4, #16
 8008e7e:	2112      	movs	r1, #18
 8008e80:	f000 f99a 	bl	80091b8 <core_set_error>
 8008e84:	2300      	movs	r3, #0
 8008e86:	e7e8      	b.n	8008e5a <ai_platform_network_process+0x18a>
 8008e88:	9c01      	ldr	r4, [sp, #4]
 8008e8a:	2218      	movs	r2, #24
 8008e8c:	f104 0010 	add.w	r0, r4, #16
 8008e90:	2112      	movs	r1, #18
 8008e92:	f000 f991 	bl	80091b8 <core_set_error>
 8008e96:	2300      	movs	r3, #0
 8008e98:	e7df      	b.n	8008e5a <ai_platform_network_process+0x18a>
 8008e9a:	9c01      	ldr	r4, [sp, #4]
 8008e9c:	f104 0010 	add.w	r0, r4, #16
 8008ea0:	2217      	movs	r2, #23
 8008ea2:	2112      	movs	r1, #18
 8008ea4:	f000 f988 	bl	80091b8 <core_set_error>
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	e7d6      	b.n	8008e5a <ai_platform_network_process+0x18a>
 8008eac:	a1c00100 	.word	0xa1c00100
 8008eb0:	e0002000 	.word	0xe0002000
 8008eb4:	e0042000 	.word	0xe0042000
 8008eb8:	58024c08 	.word	0x58024c08
 8008ebc:	58024c00 	.word	0x58024c00
 8008ec0:	f407a5c2 	.word	0xf407a5c2
 8008ec4:	b5e8b5cd 	.word	0xb5e8b5cd
 8008ec8:	40023008 	.word	0x40023008
 8008ecc:	40023000 	.word	0x40023000
 8008ed0:	9c01      	ldr	r4, [sp, #4]
 8008ed2:	9a02      	ldr	r2, [sp, #8]
 8008ed4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8008ed6:	2a00      	cmp	r2, #0
 8008ed8:	f000 80ab 	beq.w	8009032 <ai_platform_network_process+0x362>
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	f240 809e 	bls.w	800901e <ai_platform_network_process+0x34e>
 8008ee2:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 8008ee6:	f119 0f0c 	cmn.w	r9, #12
 8008eea:	f000 8098 	beq.w	800901e <ai_platform_network_process+0x34e>
 8008eee:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f000 8093 	beq.w	800901e <ai_platform_network_process+0x34e>
 8008ef8:	9d02      	ldr	r5, [sp, #8]
 8008efa:	9401      	str	r4, [sp, #4]
 8008efc:	2700      	movs	r7, #0
 8008efe:	429f      	cmp	r7, r3
 8008f00:	f080 8095 	bcs.w	800902e <ai_platform_network_process+0x35e>
 8008f04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	f000 8090 	beq.w	800902e <ai_platform_network_process+0x35e>
 8008f0e:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8008f12:	2c00      	cmp	r4, #0
 8008f14:	f000 808b 	beq.w	800902e <ai_platform_network_process+0x35e>
 8008f18:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8008f1c:	f8d3 b000 	ldr.w	fp, [r3]
 8008f20:	013e      	lsls	r6, r7, #4
 8008f22:	eb1b 0a06 	adds.w	sl, fp, r6
 8008f26:	f000 812c 	beq.w	8009182 <ai_platform_network_process+0x4b2>
 8008f2a:	69a3      	ldr	r3, [r4, #24]
 8008f2c:	2101      	movs	r1, #1
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	9302      	str	r3, [sp, #8]
 8008f32:	4628      	mov	r0, r5
 8008f34:	f7ff f8d0 	bl	80080d8 <ai_buffer_get_size>
 8008f38:	9b02      	ldr	r3, [sp, #8]
 8008f3a:	4283      	cmp	r3, r0
 8008f3c:	d36e      	bcc.n	800901c <ai_platform_network_process+0x34c>
 8008f3e:	68e0      	ldr	r0, [r4, #12]
 8008f40:	69a9      	ldr	r1, [r5, #24]
 8008f42:	68c2      	ldr	r2, [r0, #12]
 8008f44:	68cb      	ldr	r3, [r1, #12]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d168      	bne.n	800901c <ai_platform_network_process+0x34c>
 8008f4a:	6882      	ldr	r2, [r0, #8]
 8008f4c:	688b      	ldr	r3, [r1, #8]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d164      	bne.n	800901c <ai_platform_network_process+0x34c>
 8008f52:	6842      	ldr	r2, [r0, #4]
 8008f54:	684b      	ldr	r3, [r1, #4]
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d160      	bne.n	800901c <ai_platform_network_process+0x34c>
 8008f5a:	69a3      	ldr	r3, [r4, #24]
 8008f5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008f60:	f002 f858 	bl	800b014 <ai_array_get_data_byte_size>
 8008f64:	9002      	str	r0, [sp, #8]
 8008f66:	4620      	mov	r0, r4
 8008f68:	f001 ffc6 	bl	800aef8 <get_tensor_byte_size>
 8008f6c:	9b02      	ldr	r3, [sp, #8]
 8008f6e:	4283      	cmp	r3, r0
 8008f70:	d354      	bcc.n	800901c <ai_platform_network_process+0x34c>
 8008f72:	69a3      	ldr	r3, [r4, #24]
 8008f74:	6818      	ldr	r0, [r3, #0]
 8008f76:	f001 ffd3 	bl	800af20 <ai_array_to_buffer_fmt>
 8008f7a:	682b      	ldr	r3, [r5, #0]
 8008f7c:	4043      	eors	r3, r0
 8008f7e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8008f82:	d142      	bne.n	800900a <ai_platform_network_process+0x33a>
 8008f84:	686b      	ldr	r3, [r5, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d035      	beq.n	8008ff6 <ai_platform_network_process+0x326>
 8008f8a:	69ab      	ldr	r3, [r5, #24]
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	b342      	cbz	r2, 8008fe2 <ai_platform_network_process+0x312>
 8008f90:	4620      	mov	r0, r4
 8008f92:	9202      	str	r2, [sp, #8]
 8008f94:	f001 ffb0 	bl	800aef8 <get_tensor_byte_size>
 8008f98:	f8ca 0008 	str.w	r0, [sl, #8]
 8008f9c:	69ab      	ldr	r3, [r5, #24]
 8008f9e:	9a02      	ldr	r2, [sp, #8]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	fb03 f000 	mul.w	r0, r3, r0
 8008fa6:	f8ca 000c 	str.w	r0, [sl, #12]
 8008faa:	6869      	ldr	r1, [r5, #4]
 8008fac:	f8ca 1004 	str.w	r1, [sl, #4]
 8008fb0:	686b      	ldr	r3, [r5, #4]
 8008fb2:	4403      	add	r3, r0
 8008fb4:	f84b 3006 	str.w	r3, [fp, r6]
 8008fb8:	69a0      	ldr	r0, [r4, #24]
 8008fba:	6803      	ldr	r3, [r0, #0]
 8008fbc:	4590      	cmp	r8, r2
 8008fbe:	bf38      	it	cc
 8008fc0:	4690      	movcc	r8, r2
 8008fc2:	009e      	lsls	r6, r3, #2
 8008fc4:	d408      	bmi.n	8008fd8 <ai_platform_network_process+0x308>
 8008fc6:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8008fca:	1a9b      	subs	r3, r3, r2
 8008fcc:	4419      	add	r1, r3
 8008fce:	6081      	str	r1, [r0, #8]
 8008fd0:	69a3      	ldr	r3, [r4, #24]
 8008fd2:	f8da 2004 	ldr.w	r2, [sl, #4]
 8008fd6:	60da      	str	r2, [r3, #12]
 8008fd8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008fdc:	3701      	adds	r7, #1
 8008fde:	351c      	adds	r5, #28
 8008fe0:	e78d      	b.n	8008efe <ai_platform_network_process+0x22e>
 8008fe2:	9c01      	ldr	r4, [sp, #4]
 8008fe4:	4692      	mov	sl, r2
 8008fe6:	f104 0010 	add.w	r0, r4, #16
 8008fea:	2221      	movs	r2, #33	; 0x21
 8008fec:	2113      	movs	r1, #19
 8008fee:	f000 f8e3 	bl	80091b8 <core_set_error>
 8008ff2:	4653      	mov	r3, sl
 8008ff4:	e731      	b.n	8008e5a <ai_platform_network_process+0x18a>
 8008ff6:	9c01      	ldr	r4, [sp, #4]
 8008ff8:	469a      	mov	sl, r3
 8008ffa:	f104 0010 	add.w	r0, r4, #16
 8008ffe:	2217      	movs	r2, #23
 8009000:	2113      	movs	r1, #19
 8009002:	f000 f8d9 	bl	80091b8 <core_set_error>
 8009006:	4653      	mov	r3, sl
 8009008:	e727      	b.n	8008e5a <ai_platform_network_process+0x18a>
 800900a:	9c01      	ldr	r4, [sp, #4]
 800900c:	2219      	movs	r2, #25
 800900e:	f104 0010 	add.w	r0, r4, #16
 8009012:	2113      	movs	r1, #19
 8009014:	f000 f8d0 	bl	80091b8 <core_set_error>
 8009018:	2300      	movs	r3, #0
 800901a:	e71e      	b.n	8008e5a <ai_platform_network_process+0x18a>
 800901c:	9c01      	ldr	r4, [sp, #4]
 800901e:	f104 0010 	add.w	r0, r4, #16
 8009022:	2218      	movs	r2, #24
 8009024:	2113      	movs	r1, #19
 8009026:	f000 f8c7 	bl	80091b8 <core_set_error>
 800902a:	2300      	movs	r3, #0
 800902c:	e715      	b.n	8008e5a <ai_platform_network_process+0x18a>
 800902e:	9c01      	ldr	r4, [sp, #4]
 8009030:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8009032:	f8a4 8014 	strh.w	r8, [r4, #20]
 8009036:	2b00      	cmp	r3, #0
 8009038:	f000 80a0 	beq.w	800917c <ai_platform_network_process+0x4ac>
 800903c:	2b01      	cmp	r3, #1
 800903e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8009040:	f240 809a 	bls.w	8009178 <ai_platform_network_process+0x4a8>
 8009044:	f105 070c 	add.w	r7, r5, #12
 8009048:	8ae3      	ldrh	r3, [r4, #22]
 800904a:	8aa2      	ldrh	r2, [r4, #20]
 800904c:	429a      	cmp	r2, r3
 800904e:	f67f af04 	bls.w	8008e5a <ai_platform_network_process+0x18a>
 8009052:	46a3      	mov	fp, r4
 8009054:	2d00      	cmp	r5, #0
 8009056:	d036      	beq.n	80090c6 <ai_platform_network_process+0x3f6>
 8009058:	882b      	ldrh	r3, [r5, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d033      	beq.n	80090c6 <ai_platform_network_process+0x3f6>
 800905e:	686b      	ldr	r3, [r5, #4]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d030      	beq.n	80090c6 <ai_platform_network_process+0x3f6>
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f04f 0800 	mov.w	r8, #0
 800906a:	b9db      	cbnz	r3, 80090a4 <ai_platform_network_process+0x3d4>
 800906c:	e02b      	b.n	80090c6 <ai_platform_network_process+0x3f6>
 800906e:	68d4      	ldr	r4, [r2, #12]
 8009070:	1b00      	subs	r0, r0, r4
 8009072:	4401      	add	r1, r0
 8009074:	6091      	str	r1, [r2, #8]
 8009076:	699b      	ldr	r3, [r3, #24]
 8009078:	6872      	ldr	r2, [r6, #4]
 800907a:	60da      	str	r2, [r3, #12]
 800907c:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8009080:	f85a 2009 	ldr.w	r2, [sl, r9]
 8009084:	440b      	add	r3, r1
 8009086:	4293      	cmp	r3, r2
 8009088:	bf24      	itt	cs
 800908a:	68f3      	ldrcs	r3, [r6, #12]
 800908c:	1ad3      	subcs	r3, r2, r3
 800908e:	6073      	str	r3, [r6, #4]
 8009090:	882b      	ldrh	r3, [r5, #0]
 8009092:	f108 0801 	add.w	r8, r8, #1
 8009096:	4598      	cmp	r8, r3
 8009098:	d215      	bcs.n	80090c6 <ai_platform_network_process+0x3f6>
 800909a:	686b      	ldr	r3, [r5, #4]
 800909c:	b19b      	cbz	r3, 80090c6 <ai_platform_network_process+0x3f6>
 800909e:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80090a2:	b183      	cbz	r3, 80090c6 <ai_platform_network_process+0x3f6>
 80090a4:	68a9      	ldr	r1, [r5, #8]
 80090a6:	699a      	ldr	r2, [r3, #24]
 80090a8:	f8d1 a000 	ldr.w	sl, [r1]
 80090ac:	6814      	ldr	r4, [r2, #0]
 80090ae:	6890      	ldr	r0, [r2, #8]
 80090b0:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80090b4:	eb0a 0609 	add.w	r6, sl, r9
 80090b8:	00a4      	lsls	r4, r4, #2
 80090ba:	6871      	ldr	r1, [r6, #4]
 80090bc:	d5d7      	bpl.n	800906e <ai_platform_network_process+0x39e>
 80090be:	68b2      	ldr	r2, [r6, #8]
 80090c0:	f001 ffea 	bl	800b098 <memcpy>
 80090c4:	e7da      	b.n	800907c <ai_platform_network_process+0x3ac>
 80090c6:	4658      	mov	r0, fp
 80090c8:	f001 fec2 	bl	800ae50 <ai_layers_forward_all>
 80090cc:	2f00      	cmp	r7, #0
 80090ce:	d047      	beq.n	8009160 <ai_platform_network_process+0x490>
 80090d0:	883b      	ldrh	r3, [r7, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d044      	beq.n	8009160 <ai_platform_network_process+0x490>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d041      	beq.n	8009160 <ai_platform_network_process+0x490>
 80090dc:	6818      	ldr	r0, [r3, #0]
 80090de:	2800      	cmp	r0, #0
 80090e0:	d03e      	beq.n	8009160 <ai_platform_network_process+0x490>
 80090e2:	f04f 0800 	mov.w	r8, #0
 80090e6:	e019      	b.n	800911c <ai_platform_network_process+0x44c>
 80090e8:	f85a 2009 	ldr.w	r2, [sl, r9]
 80090ec:	4293      	cmp	r3, r2
 80090ee:	bf24      	itt	cs
 80090f0:	68f3      	ldrcs	r3, [r6, #12]
 80090f2:	1ad3      	subcs	r3, r2, r3
 80090f4:	6073      	str	r3, [r6, #4]
 80090f6:	6981      	ldr	r1, [r0, #24]
 80090f8:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 80090fc:	1b12      	subs	r2, r2, r4
 80090fe:	4413      	add	r3, r2
 8009100:	608b      	str	r3, [r1, #8]
 8009102:	6983      	ldr	r3, [r0, #24]
 8009104:	6872      	ldr	r2, [r6, #4]
 8009106:	60da      	str	r2, [r3, #12]
 8009108:	883b      	ldrh	r3, [r7, #0]
 800910a:	f108 0801 	add.w	r8, r8, #1
 800910e:	4598      	cmp	r8, r3
 8009110:	d226      	bcs.n	8009160 <ai_platform_network_process+0x490>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	b323      	cbz	r3, 8009160 <ai_platform_network_process+0x490>
 8009116:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800911a:	b308      	cbz	r0, 8009160 <ai_platform_network_process+0x490>
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	6981      	ldr	r1, [r0, #24]
 8009120:	f8d3 a000 	ldr.w	sl, [r3]
 8009124:	680c      	ldr	r4, [r1, #0]
 8009126:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800912a:	eb0a 0609 	add.w	r6, sl, r9
 800912e:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8009132:	00a4      	lsls	r4, r4, #2
 8009134:	eb0c 0302 	add.w	r3, ip, r2
 8009138:	d5d6      	bpl.n	80090e8 <ai_platform_network_process+0x418>
 800913a:	6889      	ldr	r1, [r1, #8]
 800913c:	4660      	mov	r0, ip
 800913e:	f001 ffab 	bl	800b098 <memcpy>
 8009142:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8009146:	f85a 2009 	ldr.w	r2, [sl, r9]
 800914a:	440b      	add	r3, r1
 800914c:	4293      	cmp	r3, r2
 800914e:	bf24      	itt	cs
 8009150:	68f3      	ldrcs	r3, [r6, #12]
 8009152:	1ad3      	subcs	r3, r2, r3
 8009154:	6073      	str	r3, [r6, #4]
 8009156:	883b      	ldrh	r3, [r7, #0]
 8009158:	f108 0801 	add.w	r8, r8, #1
 800915c:	4598      	cmp	r8, r3
 800915e:	d3d8      	bcc.n	8009112 <ai_platform_network_process+0x442>
 8009160:	f8bb 3016 	ldrh.w	r3, [fp, #22]
 8009164:	f8bb 2014 	ldrh.w	r2, [fp, #20]
 8009168:	3301      	adds	r3, #1
 800916a:	b29b      	uxth	r3, r3
 800916c:	429a      	cmp	r2, r3
 800916e:	f8ab 3016 	strh.w	r3, [fp, #22]
 8009172:	f63f af6f 	bhi.w	8009054 <ai_platform_network_process+0x384>
 8009176:	e670      	b.n	8008e5a <ai_platform_network_process+0x18a>
 8009178:	2700      	movs	r7, #0
 800917a:	e765      	b.n	8009048 <ai_platform_network_process+0x378>
 800917c:	461d      	mov	r5, r3
 800917e:	461f      	mov	r7, r3
 8009180:	e762      	b.n	8009048 <ai_platform_network_process+0x378>
 8009182:	9c01      	ldr	r4, [sp, #4]
 8009184:	2217      	movs	r2, #23
 8009186:	f104 0010 	add.w	r0, r4, #16
 800918a:	2113      	movs	r1, #19
 800918c:	f000 f814 	bl	80091b8 <core_set_error>
 8009190:	4653      	mov	r3, sl
 8009192:	e662      	b.n	8008e5a <ai_platform_network_process+0x18a>
 8009194:	f104 0010 	add.w	r0, r4, #16
 8009198:	2230      	movs	r2, #48	; 0x30
 800919a:	2111      	movs	r1, #17
 800919c:	f000 f80c 	bl	80091b8 <core_set_error>
 80091a0:	4633      	mov	r3, r6
 80091a2:	e65a      	b.n	8008e5a <ai_platform_network_process+0x18a>
 80091a4:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80091a6:	e5d2      	b.n	8008d4e <ai_platform_network_process+0x7e>

080091a8 <core_init>:
 80091a8:	2001      	movs	r0, #1
 80091aa:	4770      	bx	lr

080091ac <core_get_error>:
 80091ac:	4603      	mov	r3, r0
 80091ae:	2200      	movs	r2, #0
 80091b0:	6800      	ldr	r0, [r0, #0]
 80091b2:	601a      	str	r2, [r3, #0]
 80091b4:	4770      	bx	lr
 80091b6:	bf00      	nop

080091b8 <core_set_error>:
 80091b8:	7803      	ldrb	r3, [r0, #0]
 80091ba:	b933      	cbnz	r3, 80091ca <core_set_error+0x12>
 80091bc:	7001      	strb	r1, [r0, #0]
 80091be:	6803      	ldr	r3, [r0, #0]
 80091c0:	f362 231f 	bfi	r3, r2, #8, #24
 80091c4:	6003      	str	r3, [r0, #0]
 80091c6:	2001      	movs	r0, #1
 80091c8:	4770      	bx	lr
 80091ca:	2000      	movs	r0, #0
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop

080091d0 <func_dummy>:
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop

080091d4 <ai_dict_decompress_f32>:
 80091d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091d8:	9f08      	ldr	r7, [sp, #32]
 80091da:	2b04      	cmp	r3, #4
 80091dc:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80091e0:	d00e      	beq.n	8009200 <ai_dict_decompress_f32+0x2c>
 80091e2:	2b08      	cmp	r3, #8
 80091e4:	d10a      	bne.n	80091fc <ai_dict_decompress_f32+0x28>
 80091e6:	42b8      	cmp	r0, r7
 80091e8:	d208      	bcs.n	80091fc <ai_dict_decompress_f32+0x28>
 80091ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f840 3b04 	str.w	r3, [r0], #4
 80091f8:	4287      	cmp	r7, r0
 80091fa:	d8f6      	bhi.n	80091ea <ai_dict_decompress_f32+0x16>
 80091fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009200:	9b07      	ldr	r3, [sp, #28]
 8009202:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8009206:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 800920a:	f10c 38ff 	add.w	r8, ip, #4294967295
 800920e:	f003 0e01 	and.w	lr, r3, #1
 8009212:	42b8      	cmp	r0, r7
 8009214:	d2f2      	bcs.n	80091fc <ai_dict_decompress_f32+0x28>
 8009216:	f1bc 0f00 	cmp.w	ip, #0
 800921a:	d01a      	beq.n	8009252 <ai_dict_decompress_f32+0x7e>
 800921c:	f100 0508 	add.w	r5, r0, #8
 8009220:	1e4c      	subs	r4, r1, #1
 8009222:	eb01 0608 	add.w	r6, r1, r8
 8009226:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800922a:	091b      	lsrs	r3, r3, #4
 800922c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009230:	42a6      	cmp	r6, r4
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f845 3c08 	str.w	r3, [r5, #-8]
 8009238:	7823      	ldrb	r3, [r4, #0]
 800923a:	f003 030f 	and.w	r3, r3, #15
 800923e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009242:	f105 0508 	add.w	r5, r5, #8
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f845 3c0c 	str.w	r3, [r5, #-12]
 800924c:	d1eb      	bne.n	8009226 <ai_dict_decompress_f32+0x52>
 800924e:	4461      	add	r1, ip
 8009250:	4448      	add	r0, r9
 8009252:	f1be 0f00 	cmp.w	lr, #0
 8009256:	d103      	bne.n	8009260 <ai_dict_decompress_f32+0x8c>
 8009258:	4287      	cmp	r7, r0
 800925a:	d8dc      	bhi.n	8009216 <ai_dict_decompress_f32+0x42>
 800925c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009260:	780b      	ldrb	r3, [r1, #0]
 8009262:	091b      	lsrs	r3, r3, #4
 8009264:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009268:	3101      	adds	r1, #1
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	6003      	str	r3, [r0, #0]
 800926e:	3004      	adds	r0, #4
 8009270:	e7cf      	b.n	8009212 <ai_dict_decompress_f32+0x3e>
 8009272:	bf00      	nop

08009274 <forward_conv2d>:
 8009274:	6983      	ldr	r3, [r0, #24]
 8009276:	881a      	ldrh	r2, [r3, #0]
 8009278:	2a00      	cmp	r2, #0
 800927a:	f000 87c7 	beq.w	800a20c <forward_conv2d+0xf98>
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	6859      	ldr	r1, [r3, #4]
 8009282:	b101      	cbz	r1, 8009286 <forward_conv2d+0x12>
 8009284:	6809      	ldr	r1, [r1, #0]
 8009286:	2a01      	cmp	r2, #1
 8009288:	f240 87bd 	bls.w	800a206 <forward_conv2d+0xf92>
 800928c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009290:	ed2d 8b10 	vpush	{d8-d15}
 8009294:	b0cb      	sub	sp, #300	; 0x12c
 8009296:	691c      	ldr	r4, [r3, #16]
 8009298:	af02      	add	r7, sp, #8
 800929a:	2c00      	cmp	r4, #0
 800929c:	f000 87af 	beq.w	800a1fe <forward_conv2d+0xf8a>
 80092a0:	6824      	ldr	r4, [r4, #0]
 80092a2:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 80092a6:	2a02      	cmp	r2, #2
 80092a8:	f000 87a4 	beq.w	800a1f4 <forward_conv2d+0xf80>
 80092ac:	69dd      	ldr	r5, [r3, #28]
 80092ae:	2d00      	cmp	r5, #0
 80092b0:	f000 8799 	beq.w	800a1e6 <forward_conv2d+0xf72>
 80092b4:	f113 0218 	adds.w	r2, r3, #24
 80092b8:	682c      	ldr	r4, [r5, #0]
 80092ba:	d004      	beq.n	80092c6 <forward_conv2d+0x52>
 80092bc:	8b1b      	ldrh	r3, [r3, #24]
 80092be:	2b01      	cmp	r3, #1
 80092c0:	f240 87a6 	bls.w	800a210 <forward_conv2d+0xf9c>
 80092c4:	686a      	ldr	r2, [r5, #4]
 80092c6:	68ab      	ldr	r3, [r5, #8]
 80092c8:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 80092cc:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80092d0:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80092d4:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80092d8:	68ce      	ldr	r6, [r1, #12]
 80092da:	69a1      	ldr	r1, [r4, #24]
 80092dc:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 80092e0:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80092e4:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80092e8:	f8de 1004 	ldr.w	r1, [lr, #4]
 80092ec:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 80092f0:	f8de 100c 	ldr.w	r1, [lr, #12]
 80092f4:	6479      	str	r1, [r7, #68]	; 0x44
 80092f6:	f8de 1008 	ldr.w	r1, [lr, #8]
 80092fa:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 80092fe:	6871      	ldr	r1, [r6, #4]
 8009300:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8009304:	68f1      	ldr	r1, [r6, #12]
 8009306:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800930a:	68b1      	ldr	r1, [r6, #8]
 800930c:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8009310:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8009314:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8009318:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800931c:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8009320:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8009324:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8009326:	6889      	ldr	r1, [r1, #8]
 8009328:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800932c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800932e:	e9d5 ba00 	ldrd	fp, sl, [r5]
 8009332:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8009336:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8009338:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800933c:	69c1      	ldr	r1, [r0, #28]
 800933e:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8009342:	e9d0 980c 	ldrd	r9, r8, [r0, #48]	; 0x30
 8009346:	2a00      	cmp	r2, #0
 8009348:	f000 8749 	beq.w	800a1de <forward_conv2d+0xf6a>
 800934c:	6992      	ldr	r2, [r2, #24]
 800934e:	6892      	ldr	r2, [r2, #8]
 8009350:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8009354:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009358:	6992      	ldr	r2, [r2, #24]
 800935a:	6892      	ldr	r2, [r2, #8]
 800935c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8009360:	4606      	mov	r6, r0
 8009362:	6a00      	ldr	r0, [r0, #32]
 8009364:	2b00      	cmp	r3, #0
 8009366:	f000 872c 	beq.w	800a1c2 <forward_conv2d+0xf4e>
 800936a:	699a      	ldr	r2, [r3, #24]
 800936c:	2a00      	cmp	r2, #0
 800936e:	f000 8594 	beq.w	8009e9a <forward_conv2d+0xc26>
 8009372:	695b      	ldr	r3, [r3, #20]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800937a:	e9d2 0100 	ldrd	r0, r1, [r2]
 800937e:	6893      	ldr	r3, [r2, #8]
 8009380:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009384:	f001 fe22 	bl	800afcc <ai_array_get_byte_size>
 8009388:	69a3      	ldr	r3, [r4, #24]
 800938a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 800938e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8009398:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800939a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800939e:	f3c3 5441 	ubfx	r4, r3, #21, #2
 80093a2:	f3c3 15c6 	ubfx	r5, r3, #7, #7
 80093a6:	fa1f f088 	uxth.w	r0, r8
 80093aa:	4125      	asrs	r5, r4
 80093ac:	3801      	subs	r0, #1
 80093ae:	1e4c      	subs	r4, r1, #1
 80093b0:	fb04 1100 	mla	r1, r4, r0, r1
 80093b4:	6439      	str	r1, [r7, #64]	; 0x40
 80093b6:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80093ba:	f8df c3a0 	ldr.w	ip, [pc, #928]	; 800975c <forward_conv2d+0x4e8>
 80093be:	fa1f f289 	uxth.w	r2, r9
 80093c2:	3a01      	subs	r2, #1
 80093c4:	1e48      	subs	r0, r1, #1
 80093c6:	fb00 1102 	mla	r1, r0, r2, r1
 80093ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80093ce:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80093d2:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80093d6:	4610      	mov	r0, r2
 80093d8:	2a00      	cmp	r2, #0
 80093da:	bf08      	it	eq
 80093dc:	4660      	moveq	r0, ip
 80093de:	2b04      	cmp	r3, #4
 80093e0:	b2ad      	uxth	r5, r5
 80093e2:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 80093e6:	f000 8533 	beq.w	8009e50 <forward_conv2d+0xbdc>
 80093ea:	2b08      	cmp	r3, #8
 80093ec:	f000 8530 	beq.w	8009e50 <forward_conv2d+0xbdc>
 80093f0:	fa1f f38b 	uxth.w	r3, fp
 80093f4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80093f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80093fc:	425b      	negs	r3, r3
 80093fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009402:	2900      	cmp	r1, #0
 8009404:	f000 8242 	beq.w	800988c <forward_conv2d+0x618>
 8009408:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800940c:	f8d7 50c8 	ldr.w	r5, [r7, #200]	; 0xc8
 8009410:	ed9f 8ad1 	vldr	s16, [pc, #836]	; 8009758 <forward_conv2d+0x4e4>
 8009414:	fb00 f305 	mul.w	r3, r0, r5
 8009418:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
 800941c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 8009420:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8009424:	f8b7 50f0 	ldrh.w	r5, [r7, #240]	; 0xf0
 8009428:	663d      	str	r5, [r7, #96]	; 0x60
 800942a:	fa0f f288 	sxth.w	r2, r8
 800942e:	fb03 f400 	mul.w	r4, r3, r0
 8009432:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8009436:	fa1f f18a 	uxth.w	r1, sl
 800943a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800943e:	67bc      	str	r4, [r7, #120]	; 0x78
 8009440:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8009444:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8009448:	4249      	negs	r1, r1
 800944a:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800944e:	0092      	lsls	r2, r2, #2
 8009450:	0081      	lsls	r1, r0, #2
 8009452:	4605      	mov	r5, r0
 8009454:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8009458:	fb04 f200 	mul.w	r2, r4, r0
 800945c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8009460:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8009464:	fb01 fc00 	mul.w	ip, r1, r0
 8009468:	f8c7 c05c 	str.w	ip, [r7, #92]	; 0x5c
 800946c:	fb01 fc03 	mul.w	ip, r1, r3
 8009470:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009472:	f8c7 c038 	str.w	ip, [r7, #56]	; 0x38
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800947c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009480:	fa0f f689 	sxth.w	r6, r9
 8009484:	469c      	mov	ip, r3
 8009486:	f8c7 60a4 	str.w	r6, [r7, #164]	; 0xa4
 800948a:	4633      	mov	r3, r6
 800948c:	fb0c f606 	mul.w	r6, ip, r6
 8009490:	677e      	str	r6, [r7, #116]	; 0x74
 8009492:	4666      	mov	r6, ip
 8009494:	fb04 f606 	mul.w	r6, r4, r6
 8009498:	4686      	mov	lr, r0
 800949a:	4620      	mov	r0, r4
 800949c:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 80094a0:	62be      	str	r6, [r7, #40]	; 0x28
 80094a2:	fb01 f404 	mul.w	r4, r1, r4
 80094a6:	fb03 f605 	mul.w	r6, r3, r5
 80094aa:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 80094ac:	66bc      	str	r4, [r7, #104]	; 0x68
 80094ae:	460b      	mov	r3, r1
 80094b0:	4604      	mov	r4, r0
 80094b2:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80094b6:	627e      	str	r6, [r7, #36]	; 0x24
 80094b8:	fb05 f404 	mul.w	r4, r5, r4
 80094bc:	617c      	str	r4, [r7, #20]
 80094be:	460c      	mov	r4, r1
 80094c0:	fb04 f403 	mul.w	r4, r4, r3
 80094c4:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80094c8:	65bc      	str	r4, [r7, #88]	; 0x58
 80094ca:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80094ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80094d2:	fb01 f104 	mul.w	r1, r1, r4
 80094d6:	61b9      	str	r1, [r7, #24]
 80094d8:	0091      	lsls	r1, r2, #2
 80094da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80094de:	64b9      	str	r1, [r7, #72]	; 0x48
 80094e0:	fb00 f202 	mul.w	r2, r0, r2
 80094e4:	0081      	lsls	r1, r0, #2
 80094e6:	61f9      	str	r1, [r7, #28]
 80094e8:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 80094ec:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80094f0:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 80094f4:	011a      	lsls	r2, r3, #4
 80094f6:	00db      	lsls	r3, r3, #3
 80094f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80094fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009500:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009504:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 8009508:	2300      	movs	r3, #0
 800950a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800950c:	607a      	str	r2, [r7, #4]
 800950e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009510:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8009514:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009518:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800951a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800951c:	2900      	cmp	r1, #0
 800951e:	441a      	add	r2, r3
 8009520:	bfb4      	ite	lt
 8009522:	2100      	movlt	r1, #0
 8009524:	2300      	movge	r3, #0
 8009526:	4282      	cmp	r2, r0
 8009528:	bf28      	it	cs
 800952a:	4602      	movcs	r2, r0
 800952c:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8009530:	2801      	cmp	r0, #1
 8009532:	f000 8320 	beq.w	8009b76 <forward_conv2d+0x902>
 8009536:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800953a:	4281      	cmp	r1, r0
 800953c:	f000 81c3 	beq.w	80098c6 <forward_conv2d+0x652>
 8009540:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8009544:	2900      	cmp	r1, #0
 8009546:	f000 8182 	beq.w	800984e <forward_conv2d+0x5da>
 800954a:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800954e:	fb93 f1f0 	sdiv	r1, r3, r0
 8009552:	fb00 3111 	mls	r1, r0, r1, r3
 8009556:	1a41      	subs	r1, r0, r1
 8009558:	1ad2      	subs	r2, r2, r3
 800955a:	fb91 f5f0 	sdiv	r5, r1, r0
 800955e:	fb00 1515 	mls	r5, r0, r5, r1
 8009562:	1b52      	subs	r2, r2, r5
 8009564:	4601      	mov	r1, r0
 8009566:	4402      	add	r2, r0
 8009568:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800956c:	f8d7 60c8 	ldr.w	r6, [r7, #200]	; 0xc8
 8009570:	f8c7 b020 	str.w	fp, [r7, #32]
 8009574:	4604      	mov	r4, r0
 8009576:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800957a:	fbb4 f4f0 	udiv	r4, r4, r0
 800957e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009580:	3a01      	subs	r2, #1
 8009582:	fb92 f8f1 	sdiv	r8, r2, r1
 8009586:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800958a:	eba0 0c04 	sub.w	ip, r0, r4
 800958e:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8009592:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8009596:	4614      	mov	r4, r2
 8009598:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800959c:	fbb4 f2f2 	udiv	r2, r4, r2
 80095a0:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 80095a4:	657a      	str	r2, [r7, #84]	; 0x54
 80095a6:	441d      	add	r5, r3
 80095a8:	fb0e f000 	mul.w	r0, lr, r0
 80095ac:	440b      	add	r3, r1
 80095ae:	eba6 0608 	sub.w	r6, r6, r8
 80095b2:	fb04 f505 	mul.w	r5, r4, r5
 80095b6:	3b01      	subs	r3, #1
 80095b8:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 80095bc:	fb93 f3f4 	sdiv	r3, r3, r4
 80095c0:	fb00 f406 	mul.w	r4, r0, r6
 80095c4:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80095c8:	66fd      	str	r5, [r7, #108]	; 0x6c
 80095ca:	0091      	lsls	r1, r2, #2
 80095cc:	fb00 f003 	mul.w	r0, r0, r3
 80095d0:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 80095d4:	6538      	str	r0, [r7, #80]	; 0x50
 80095d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095da:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80095de:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 80095e2:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 80095e6:	1ac3      	subs	r3, r0, r3
 80095e8:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 80095ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80095f0:	008b      	lsls	r3, r1, #2
 80095f2:	637b      	str	r3, [r7, #52]	; 0x34
 80095f4:	00d3      	lsls	r3, r2, #3
 80095f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80095fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009600:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009604:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009608:	2300      	movs	r3, #0
 800960a:	ea4f 098c 	mov.w	r9, ip, lsl #2
 800960e:	673b      	str	r3, [r7, #112]	; 0x70
 8009610:	46c2      	mov	sl, r8
 8009612:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009616:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800961a:	eb03 0c02 	add.w	ip, r3, r2
 800961e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009622:	2b00      	cmp	r3, #0
 8009624:	f2c0 813b 	blt.w	800989e <forward_conv2d+0x62a>
 8009628:	2000      	movs	r0, #0
 800962a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800962c:	f8d7 80a4 	ldr.w	r8, [r7, #164]	; 0xa4
 8009630:	4605      	mov	r5, r0
 8009632:	4606      	mov	r6, r0
 8009634:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800963c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8009640:	4413      	add	r3, r2
 8009642:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009646:	440a      	add	r2, r1
 8009648:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800964c:	428b      	cmp	r3, r1
 800964e:	bf94      	ite	ls
 8009650:	ebc6 0303 	rsbls	r3, r6, r3
 8009654:	ebc6 0301 	rsbhi	r3, r6, r1
 8009658:	4415      	add	r5, r2
 800965a:	1a1b      	subs	r3, r3, r0
 800965c:	00a4      	lsls	r4, r4, #2
 800965e:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8009662:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 8009666:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800966a:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800966c:	4602      	mov	r2, r0
 800966e:	2800      	cmp	r0, #0
 8009670:	bf08      	it	eq
 8009672:	4662      	moveq	r2, ip
 8009674:	f108 31ff 	add.w	r1, r8, #4294967295
 8009678:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800967c:	fb91 f1f0 	sdiv	r1, r1, r0
 8009680:	4429      	add	r1, r5
 8009682:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 8009686:	fb0e 5501 	mla	r5, lr, r1, r5
 800968a:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800968e:	4403      	add	r3, r0
 8009690:	fb01 6104 	mla	r1, r1, r4, r6
 8009694:	3b01      	subs	r3, #1
 8009696:	fb93 f6f0 	sdiv	r6, r3, r0
 800969a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969c:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 80096a0:	fb06 3110 	mls	r1, r6, r0, r3
 80096a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80096a8:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 80096ac:	4562      	cmp	r2, ip
 80096ae:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80096b2:	bf08      	it	eq
 80096b4:	eeb0 6a48 	vmoveq.f32	s12, s16
 80096b8:	1b9b      	subs	r3, r3, r6
 80096ba:	2800      	cmp	r0, #0
 80096bc:	d076      	beq.n	80097ac <forward_conv2d+0x538>
 80096be:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80096c2:	fb0e f803 	mul.w	r8, lr, r3
 80096c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096c8:	fb00 fb01 	mul.w	fp, r0, r1
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d06d      	beq.n	80097ac <forward_conv2d+0x538>
 80096d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096d4:	18d3      	adds	r3, r2, r3
 80096d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80096da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80096de:	1a9b      	subs	r3, r3, r2
 80096e0:	633b      	str	r3, [r7, #48]	; 0x30
 80096e2:	2300      	movs	r3, #0
 80096e4:	667b      	str	r3, [r7, #100]	; 0x64
 80096e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80096ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ec:	4413      	add	r3, r2
 80096ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80096f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f6:	4413      	add	r3, r2
 80096f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80096fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009700:	ecf3 7a01 	vldmia	r3!, {s15}
 8009704:	f1ba 0f00 	cmp.w	sl, #0
 8009708:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800970c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009710:	f340 80c3 	ble.w	800989a <forward_conv2d+0x626>
 8009714:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8009718:	f04f 0c00 	mov.w	ip, #0
 800971c:	2e00      	cmp	r6, #0
 800971e:	dd1f      	ble.n	8009760 <forward_conv2d+0x4ec>
 8009720:	2100      	movs	r1, #0
 8009722:	eb00 040e 	add.w	r4, r0, lr
 8009726:	4284      	cmp	r4, r0
 8009728:	d910      	bls.n	800974c <forward_conv2d+0x4d8>
 800972a:	4603      	mov	r3, r0
 800972c:	462a      	mov	r2, r5
 800972e:	ecb3 7a01 	vldmia	r3!, {s14}
 8009732:	ecf2 6a01 	vldmia	r2!, {s13}
 8009736:	429c      	cmp	r4, r3
 8009738:	eee6 7a87 	vfma.f32	s15, s13, s14
 800973c:	d8f7      	bhi.n	800972e <forward_conv2d+0x4ba>
 800973e:	43c3      	mvns	r3, r0
 8009740:	441c      	add	r4, r3
 8009742:	f024 0403 	bic.w	r4, r4, #3
 8009746:	3404      	adds	r4, #4
 8009748:	4425      	add	r5, r4
 800974a:	4420      	add	r0, r4
 800974c:	3101      	adds	r1, #1
 800974e:	428e      	cmp	r6, r1
 8009750:	4448      	add	r0, r9
 8009752:	d1e6      	bne.n	8009722 <forward_conv2d+0x4ae>
 8009754:	e004      	b.n	8009760 <forward_conv2d+0x4ec>
 8009756:	bf00      	nop
 8009758:	00000000 	.word	0x00000000
 800975c:	080091d1 	.word	0x080091d1
 8009760:	f10c 0c01 	add.w	ip, ip, #1
 8009764:	45e2      	cmp	sl, ip
 8009766:	4458      	add	r0, fp
 8009768:	4445      	add	r5, r8
 800976a:	d1d7      	bne.n	800971c <forward_conv2d+0x4a8>
 800976c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009770:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009774:	441d      	add	r5, r3
 8009776:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800977a:	ece3 7a01 	vstmia	r3!, {s15}
 800977e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009786:	4293      	cmp	r3, r2
 8009788:	d1b8      	bne.n	80096fc <forward_conv2d+0x488>
 800978a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800978e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009792:	4472      	add	r2, lr
 8009794:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009798:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800979a:	1a52      	subs	r2, r2, r1
 800979c:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80097a0:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80097a4:	3301      	adds	r3, #1
 80097a6:	429a      	cmp	r2, r3
 80097a8:	667b      	str	r3, [r7, #100]	; 0x64
 80097aa:	d19c      	bne.n	80096e6 <forward_conv2d+0x472>
 80097ac:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80097b0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80097b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097b6:	4608      	mov	r0, r1
 80097b8:	4410      	add	r0, r2
 80097ba:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80097be:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 80097c2:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80097c6:	4401      	add	r1, r0
 80097c8:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 80097cc:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80097d0:	1a8a      	subs	r2, r1, r2
 80097d2:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 80097d6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80097da:	3301      	adds	r3, #1
 80097dc:	429a      	cmp	r2, r3
 80097de:	673b      	str	r3, [r7, #112]	; 0x70
 80097e0:	f47f af17 	bne.w	8009612 <forward_conv2d+0x39e>
 80097e4:	f8d7 b020 	ldr.w	fp, [r7, #32]
 80097e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80097ec:	b37b      	cbz	r3, 800984e <forward_conv2d+0x5da>
 80097ee:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 80097f2:	f8d7 6088 	ldr.w	r6, [r7, #136]	; 0x88
 80097f6:	f8d7 80dc 	ldr.w	r8, [r7, #220]	; 0xdc
 80097fa:	f8d7 90e8 	ldr.w	r9, [r7, #232]	; 0xe8
 80097fe:	2500      	movs	r5, #0
 8009800:	46a2      	mov	sl, r4
 8009802:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8009806:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 800980a:	f8c2 a008 	str.w	sl, [r2, #8]
 800980e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8009812:	4633      	mov	r3, r6
 8009814:	4641      	mov	r1, r8
 8009816:	4416      	add	r6, r2
 8009818:	4640      	mov	r0, r8
 800981a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800981e:	47a0      	blx	r4
 8009820:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8009824:	4492      	add	sl, r2
 8009826:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800982a:	eba6 0309 	sub.w	r3, r6, r9
 800982e:	4293      	cmp	r3, r2
 8009830:	bfa8      	it	ge
 8009832:	464e      	movge	r6, r9
 8009834:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009838:	3501      	adds	r5, #1
 800983a:	42ab      	cmp	r3, r5
 800983c:	d1e1      	bne.n	8009802 <forward_conv2d+0x58e>
 800983e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009842:	69ba      	ldr	r2, [r7, #24]
 8009844:	f8c7 6088 	str.w	r6, [r7, #136]	; 0x88
 8009848:	4413      	add	r3, r2
 800984a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800984e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009852:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009854:	699b      	ldr	r3, [r3, #24]
 8009856:	68da      	ldr	r2, [r3, #12]
 8009858:	609a      	str	r2, [r3, #8]
 800985a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800985e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009860:	4610      	mov	r0, r2
 8009862:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009866:	4418      	add	r0, r3
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800986e:	697a      	ldr	r2, [r7, #20]
 8009870:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009874:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8009878:	4413      	add	r3, r2
 800987a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800987e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009882:	3101      	adds	r1, #1
 8009884:	428b      	cmp	r3, r1
 8009886:	67f9      	str	r1, [r7, #124]	; 0x7c
 8009888:	f47f ae42 	bne.w	8009510 <forward_conv2d+0x29c>
 800988c:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8009890:	46bd      	mov	sp, r7
 8009892:	ecbd 8b10 	vpop	{d8-d15}
 8009896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800989a:	461a      	mov	r2, r3
 800989c:	e768      	b.n	8009770 <forward_conv2d+0x4fc>
 800989e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80098a2:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80098a6:	fb90 f3f2 	sdiv	r3, r0, r2
 80098aa:	fb02 0313 	mls	r3, r2, r3, r0
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	4605      	mov	r5, r0
 80098b2:	fb93 f0f2 	sdiv	r0, r3, r2
 80098b6:	fb02 3010 	mls	r0, r2, r0, r3
 80098ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098bc:	462e      	mov	r6, r5
 80098be:	18c4      	adds	r4, r0, r3
 80098c0:	eb02 0805 	add.w	r8, r2, r5
 80098c4:	e6b6      	b.n	8009634 <forward_conv2d+0x3c0>
 80098c6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80098c8:	2901      	cmp	r1, #1
 80098ca:	f47f ae39 	bne.w	8009540 <forward_conv2d+0x2cc>
 80098ce:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80098d2:	2900      	cmp	r1, #0
 80098d4:	d0bb      	beq.n	800984e <forward_conv2d+0x5da>
 80098d6:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 80098da:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 80098de:	f8d7 6110 	ldr.w	r6, [r7, #272]	; 0x110
 80098e2:	fbb1 f5f0 	udiv	r5, r1, r0
 80098e6:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80098ea:	f8d7 a004 	ldr.w	sl, [r7, #4]
 80098ee:	633d      	str	r5, [r7, #48]	; 0x30
 80098f0:	1ad2      	subs	r2, r2, r3
 80098f2:	1a8c      	subs	r4, r1, r2
 80098f4:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80098f8:	00b2      	lsls	r2, r6, #2
 80098fa:	fb02 f204 	mul.w	r2, r2, r4
 80098fe:	ebc5 7085 	rsb	r0, r5, r5, lsl #30
 8009902:	ebc5 7145 	rsb	r1, r5, r5, lsl #29
 8009906:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009908:	0082      	lsls	r2, r0, #2
 800990a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800990c:	00ca      	lsls	r2, r1, #3
 800990e:	603a      	str	r2, [r7, #0]
 8009910:	00aa      	lsls	r2, r5, #2
 8009912:	60ba      	str	r2, [r7, #8]
 8009914:	fb03 f206 	mul.w	r2, r3, r6
 8009918:	673a      	str	r2, [r7, #112]	; 0x70
 800991a:	69fa      	ldr	r2, [r7, #28]
 800991c:	fb02 f303 	mul.w	r3, r2, r3
 8009920:	637b      	str	r3, [r7, #52]	; 0x34
 8009922:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009926:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800992a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800992e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009932:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009936:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800993a:	2300      	movs	r3, #0
 800993c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009940:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009944:	2b00      	cmp	r3, #0
 8009946:	f2c0 8110 	blt.w	8009b6a <forward_conv2d+0x8f6>
 800994a:	2100      	movs	r1, #0
 800994c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800994e:	460a      	mov	r2, r1
 8009950:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 8009954:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8009958:	f8d7 5080 	ldr.w	r5, [r7, #128]	; 0x80
 800995c:	4420      	add	r0, r4
 800995e:	4408      	add	r0, r1
 8009960:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8009964:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8009968:	190c      	adds	r4, r1, r4
 800996a:	42ac      	cmp	r4, r5
 800996c:	bf28      	it	cs
 800996e:	462c      	movcs	r4, r5
 8009970:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 8009974:	0080      	lsls	r0, r0, #2
 8009976:	1aa4      	subs	r4, r4, r2
 8009978:	2d00      	cmp	r5, #0
 800997a:	f000 80e7 	beq.w	8009b4c <forward_conv2d+0x8d8>
 800997e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8009982:	f8d7 611c 	ldr.w	r6, [r7, #284]	; 0x11c
 8009986:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800998a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800998e:	42b5      	cmp	r5, r6
 8009990:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8009994:	eba3 0204 	sub.w	r2, r3, r4
 8009998:	eba1 0104 	sub.w	r1, r1, r4
 800999c:	bf08      	it	eq
 800999e:	eef0 3a48 	vmoveq.f32	s7, s16
 80099a2:	462b      	mov	r3, r5
 80099a4:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 80099a6:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 80099aa:	4428      	add	r0, r5
 80099ac:	f8d7 510c 	ldr.w	r5, [r7, #268]	; 0x10c
 80099b0:	fb05 6e00 	mla	lr, r5, r0, r6
 80099b4:	eb0e 000b 	add.w	r0, lr, fp
 80099b8:	4586      	cmp	lr, r0
 80099ba:	6238      	str	r0, [r7, #32]
 80099bc:	f080 80a5 	bcs.w	8009b0a <forward_conv2d+0x896>
 80099c0:	0092      	lsls	r2, r2, #2
 80099c2:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80099c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099c8:	fb0b f101 	mul.w	r1, fp, r1
 80099cc:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80099d0:	f024 0803 	bic.w	r8, r4, #3
 80099d4:	2a00      	cmp	r2, #0
 80099d6:	f000 8098 	beq.w	8009b0a <forward_conv2d+0x896>
 80099da:	f108 32ff 	add.w	r2, r8, #4294967295
 80099de:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80099e0:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80099e4:	0892      	lsrs	r2, r2, #2
 80099e6:	3201      	adds	r2, #1
 80099e8:	4401      	add	r1, r0
 80099ea:	fb02 f00a 	mul.w	r0, r2, sl
 80099ee:	6578      	str	r0, [r7, #84]	; 0x54
 80099f0:	0110      	lsls	r0, r2, #4
 80099f2:	0092      	lsls	r2, r2, #2
 80099f4:	653a      	str	r2, [r7, #80]	; 0x50
 80099f6:	1aca      	subs	r2, r1, r3
 80099f8:	613a      	str	r2, [r7, #16]
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	6678      	str	r0, [r7, #100]	; 0x64
 80099fe:	4413      	add	r3, r2
 8009a00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a04:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a0a:	4413      	add	r3, r2
 8009a0c:	60fb      	str	r3, [r7, #12]
 8009a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	4413      	add	r3, r2
 8009a16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a1c:	ecf3 6a01 	vldmia	r3!, {s13}
 8009a20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009a24:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8009a2e:	dd57      	ble.n	8009ae0 <forward_conv2d+0x86c>
 8009a30:	4676      	mov	r6, lr
 8009a32:	f04f 0c00 	mov.w	ip, #0
 8009a36:	f1b8 0f00 	cmp.w	r8, #0
 8009a3a:	f340 8085 	ble.w	8009b48 <forward_conv2d+0x8d4>
 8009a3e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8009a42:	f109 0310 	add.w	r3, r9, #16
 8009a46:	18b1      	adds	r1, r6, r2
 8009a48:	2000      	movs	r0, #0
 8009a4a:	4632      	mov	r2, r6
 8009a4c:	eb02 050b 	add.w	r5, r2, fp
 8009a50:	ed95 7a00 	vldr	s14, [r5]
 8009a54:	ed53 7a03 	vldr	s15, [r3, #-12]
 8009a58:	ed92 4a00 	vldr	s8, [r2]
 8009a5c:	ed53 4a04 	vldr	s9, [r3, #-16]
 8009a60:	ed91 5a00 	vldr	s10, [r1]
 8009a64:	ed53 5a02 	vldr	s11, [r3, #-8]
 8009a68:	ed13 6a01 	vldr	s12, [r3, #-4]
 8009a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a70:	eb01 050b 	add.w	r5, r1, fp
 8009a74:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009a78:	3004      	adds	r0, #4
 8009a7a:	4540      	cmp	r0, r8
 8009a7c:	ed95 7a00 	vldr	s14, [r5]
 8009a80:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009a84:	4452      	add	r2, sl
 8009a86:	4451      	add	r1, sl
 8009a88:	f103 0310 	add.w	r3, r3, #16
 8009a8c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8009a90:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009a94:	dbda      	blt.n	8009a4c <forward_conv2d+0x7d8>
 8009a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a98:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009a9a:	441e      	add	r6, r3
 8009a9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a9e:	4499      	add	r9, r3
 8009aa0:	42a0      	cmp	r0, r4
 8009aa2:	da11      	bge.n	8009ac8 <forward_conv2d+0x854>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	4633      	mov	r3, r6
 8009aa8:	4649      	mov	r1, r9
 8009aaa:	edd3 7a00 	vldr	s15, [r3]
 8009aae:	ecb1 7a01 	vldmia	r1!, {s14}
 8009ab2:	3201      	adds	r2, #1
 8009ab4:	42a2      	cmp	r2, r4
 8009ab6:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009aba:	445b      	add	r3, fp
 8009abc:	d1f5      	bne.n	8009aaa <forward_conv2d+0x836>
 8009abe:	1a20      	subs	r0, r4, r0
 8009ac0:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 8009ac4:	fb00 660b 	mla	r6, r0, fp, r6
 8009ac8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009acc:	441e      	add	r6, r3
 8009ace:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009ad2:	4499      	add	r9, r3
 8009ad4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009ad8:	f10c 0c01 	add.w	ip, ip, #1
 8009adc:	4563      	cmp	r3, ip
 8009ade:	d1aa      	bne.n	8009a36 <forward_conv2d+0x7c2>
 8009ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae2:	4499      	add	r9, r3
 8009ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ae6:	ece3 6a01 	vstmia	r3!, {s13}
 8009aea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009aec:	e9d7 232b 	ldrd	r2, r3, [r7, #172]	; 0xac
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d191      	bne.n	8009a18 <forward_conv2d+0x7a4>
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	683a      	ldr	r2, [r7, #0]
 8009af8:	1a9b      	subs	r3, r3, r2
 8009afa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009afe:	6a3b      	ldr	r3, [r7, #32]
 8009b00:	f10e 0e04 	add.w	lr, lr, #4
 8009b04:	459e      	cmp	lr, r3
 8009b06:	f4ff af7d 	bcc.w	8009a04 <forward_conv2d+0x790>
 8009b0a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009b0e:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8009b12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b16:	440a      	add	r2, r1
 8009b18:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8009b1c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8009b20:	4608      	mov	r0, r1
 8009b22:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8009b26:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8009b2a:	4410      	add	r0, r2
 8009b2c:	1a8a      	subs	r2, r1, r2
 8009b2e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8009b32:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009b36:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009b42:	f47f aefd 	bne.w	8009940 <forward_conv2d+0x6cc>
 8009b46:	e64f      	b.n	80097e8 <forward_conv2d+0x574>
 8009b48:	2000      	movs	r0, #0
 8009b4a:	e7a9      	b.n	8009aa0 <forward_conv2d+0x82c>
 8009b4c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8009b50:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8009b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b58:	1b19      	subs	r1, r3, r4
 8009b5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009b5e:	eef0 3a48 	vmov.f32	s7, s16
 8009b62:	1b1a      	subs	r2, r3, r4
 8009b64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009b68:	e71c      	b.n	80099a4 <forward_conv2d+0x730>
 8009b6a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8009b6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b70:	460a      	mov	r2, r1
 8009b72:	440b      	add	r3, r1
 8009b74:	e6ec      	b.n	8009950 <forward_conv2d+0x6dc>
 8009b76:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8009b78:	2801      	cmp	r0, #1
 8009b7a:	f47f ace1 	bne.w	8009540 <forward_conv2d+0x2cc>
 8009b7e:	1ad2      	subs	r2, r2, r3
 8009b80:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009b82:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8009b86:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8009b8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009b8c:	fb00 4101 	mla	r1, r0, r1, r4
 8009b90:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8009b94:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8009b98:	f080 8191 	bcs.w	8009ebe <forward_conv2d+0xc4a>
 8009b9c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8009ba0:	2a00      	cmp	r2, #0
 8009ba2:	f43f ae21 	beq.w	80097e8 <forward_conv2d+0x574>
 8009ba6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009ba8:	f8c7 b034 	str.w	fp, [r7, #52]	; 0x34
 8009bac:	fb02 f303 	mul.w	r3, r2, r3
 8009bb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009bb2:	667b      	str	r3, [r7, #100]	; 0x64
 8009bb4:	1a9b      	subs	r3, r3, r2
 8009bb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009bb8:	188b      	adds	r3, r1, r2
 8009bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009bc0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009bd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	f000 8133 	beq.w	8009e4a <forward_conv2d+0xbd6>
 8009be4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009be8:	ed93 6a00 	vldr	s12, [r3]
 8009bec:	3304      	adds	r3, #4
 8009bee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009bf2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	f000 8101 	beq.w	8009dfe <forward_conv2d+0xb8a>
 8009bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c00:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009c04:	eb03 0802 	add.w	r8, r3, r2
 8009c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c18:	673b      	str	r3, [r7, #112]	; 0x70
 8009c1a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009c1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009c22:	f04f 0b00 	mov.w	fp, #0
 8009c26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	f2c0 8104 	blt.w	8009e38 <forward_conv2d+0xbc4>
 8009c30:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8009c34:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009c36:	2300      	movs	r3, #0
 8009c38:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8009c3c:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8009c40:	eb02 0c04 	add.w	ip, r2, r4
 8009c44:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009c48:	4540      	cmp	r0, r8
 8009c4a:	bf94      	ite	ls
 8009c4c:	ebc3 0300 	rsbls	r3, r3, r0
 8009c50:	ebc3 0308 	rsbhi	r3, r3, r8
 8009c54:	eba2 0903 	sub.w	r9, r2, r3
 8009c58:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8009c5c:	1ac4      	subs	r4, r0, r3
 8009c5e:	fb03 f302 	mul.w	r3, r3, r2
 8009c62:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009c66:	2a00      	cmp	r2, #0
 8009c68:	f340 80e3 	ble.w	8009e32 <forward_conv2d+0xbbe>
 8009c6c:	f023 050f 	bic.w	r5, r3, #15
 8009c70:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 8009c74:	1e68      	subs	r0, r5, #1
 8009c76:	0900      	lsrs	r0, r0, #4
 8009c78:	3001      	adds	r0, #1
 8009c7a:	fb06 f204 	mul.w	r2, r6, r4
 8009c7e:	657a      	str	r2, [r7, #84]	; 0x54
 8009c80:	0102      	lsls	r2, r0, #4
 8009c82:	653a      	str	r2, [r7, #80]	; 0x50
 8009c84:	fb06 f909 	mul.w	r9, r6, r9
 8009c88:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8009c8c:	eef0 6a46 	vmov.f32	s13, s12
 8009c90:	f04f 0e00 	mov.w	lr, #0
 8009c94:	4662      	mov	r2, ip
 8009c96:	2d00      	cmp	r5, #0
 8009c98:	f340 80c9 	ble.w	8009e2e <forward_conv2d+0xbba>
 8009c9c:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8009ca0:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8009ca4:	2600      	movs	r6, #0
 8009ca6:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 8009caa:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8009cae:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 8009cb2:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 8009cb6:	ed10 ea0e 	vldr	s28, [r0, #-56]	; 0xffffffc8
 8009cba:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 8009cbe:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 8009cc2:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 8009cc6:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 8009cca:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 8009cce:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 8009cd2:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 8009cd6:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 8009cda:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 8009cde:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 8009ce2:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 8009ce6:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8009cea:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 8009cee:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8009cf2:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8009cf6:	ed10 2a06 	vldr	s4, [r0, #-24]	; 0xffffffe8
 8009cfa:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8009cfe:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 8009d02:	ed50 3a04 	vldr	s7, [r0, #-16]
 8009d06:	ed14 4a04 	vldr	s8, [r4, #-16]
 8009d0a:	ed50 4a03 	vldr	s9, [r0, #-12]
 8009d0e:	ed14 5a03 	vldr	s10, [r4, #-12]
 8009d12:	ed50 5a02 	vldr	s11, [r0, #-8]
 8009d16:	ed14 7a02 	vldr	s14, [r4, #-8]
 8009d1a:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8009d1e:	ed54 fa0e 	vldr	s31, [r4, #-56]	; 0xffffffc8
 8009d22:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8009d26:	3610      	adds	r6, #16
 8009d28:	42ae      	cmp	r6, r5
 8009d2a:	ed14 fa01 	vldr	s30, [r4, #-4]
 8009d2e:	ed50 ea01 	vldr	s29, [r0, #-4]
 8009d32:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8009d36:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8009d3a:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8009d3e:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8009d42:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8009d46:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8009d4a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8009d4e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8009d52:	eee8 7a80 	vfma.f32	s15, s17, s0
 8009d56:	eee0 7a81 	vfma.f32	s15, s1, s2
 8009d5a:	eee1 7a82 	vfma.f32	s15, s3, s4
 8009d5e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8009d62:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009d66:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009d6a:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009d6e:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8009d72:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009d76:	db96      	blt.n	8009ca6 <forward_conv2d+0xa32>
 8009d78:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009d7a:	4451      	add	r1, sl
 8009d7c:	4452      	add	r2, sl
 8009d7e:	4283      	cmp	r3, r0
 8009d80:	dd0f      	ble.n	8009da2 <forward_conv2d+0xb2e>
 8009d82:	4604      	mov	r4, r0
 8009d84:	468c      	mov	ip, r1
 8009d86:	4616      	mov	r6, r2
 8009d88:	ecb6 7a01 	vldmia	r6!, {s14}
 8009d8c:	ecfc 7a01 	vldmia	ip!, {s15}
 8009d90:	3401      	adds	r4, #1
 8009d92:	42a3      	cmp	r3, r4
 8009d94:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009d98:	d1f6      	bne.n	8009d88 <forward_conv2d+0xb14>
 8009d9a:	1a18      	subs	r0, r3, r0
 8009d9c:	0080      	lsls	r0, r0, #2
 8009d9e:	4402      	add	r2, r0
 8009da0:	4401      	add	r1, r0
 8009da2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009da4:	4402      	add	r2, r0
 8009da6:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8009daa:	f10e 0e01 	add.w	lr, lr, #1
 8009dae:	4570      	cmp	r0, lr
 8009db0:	4449      	add	r1, r9
 8009db2:	f47f af70 	bne.w	8009c96 <forward_conv2d+0xa22>
 8009db6:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8009dba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009dbc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8009dc0:	edc3 6a00 	vstr	s13, [r3]
 8009dc4:	4608      	mov	r0, r1
 8009dc6:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8009dca:	440b      	add	r3, r1
 8009dcc:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8009dd0:	673b      	str	r3, [r7, #112]	; 0x70
 8009dd2:	4410      	add	r0, r2
 8009dd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009dd6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8009dda:	4608      	mov	r0, r1
 8009ddc:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8009de0:	4418      	add	r0, r3
 8009de2:	1acb      	subs	r3, r1, r3
 8009de4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009de8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009dec:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 8009df0:	f10b 0b01 	add.w	fp, fp, #1
 8009df4:	455b      	cmp	r3, fp
 8009df6:	eba8 0802 	sub.w	r8, r8, r2
 8009dfa:	f47f af14 	bne.w	8009c26 <forward_conv2d+0x9b2>
 8009dfe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009e02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009e08:	440a      	add	r2, r1
 8009e0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009e0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009e12:	3204      	adds	r2, #4
 8009e14:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8009e18:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009e24:	f47f aed9 	bne.w	8009bda <forward_conv2d+0x966>
 8009e28:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
 8009e2c:	e4dc      	b.n	80097e8 <forward_conv2d+0x574>
 8009e2e:	2000      	movs	r0, #0
 8009e30:	e7a5      	b.n	8009d7e <forward_conv2d+0xb0a>
 8009e32:	eef0 6a46 	vmov.f32	s13, s12
 8009e36:	e7be      	b.n	8009db6 <forward_conv2d+0xb42>
 8009e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e3c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009e40:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8009e44:	eba8 0303 	sub.w	r3, r8, r3
 8009e48:	e6f6      	b.n	8009c38 <forward_conv2d+0x9c4>
 8009e4a:	eeb0 6a48 	vmov.f32	s12, s16
 8009e4e:	e6d0      	b.n	8009bf2 <forward_conv2d+0x97e>
 8009e50:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8009e54:	68ca      	ldr	r2, [r1, #12]
 8009e56:	2a00      	cmp	r2, #0
 8009e58:	f43f aaca 	beq.w	80093f0 <forward_conv2d+0x17c>
 8009e5c:	69b3      	ldr	r3, [r6, #24]
 8009e5e:	8818      	ldrh	r0, [r3, #0]
 8009e60:	2803      	cmp	r0, #3
 8009e62:	f240 819f 	bls.w	800a1a4 <forward_conv2d+0xf30>
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e6a:	b32b      	cbz	r3, 8009eb8 <forward_conv2d+0xc44>
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	b31b      	cbz	r3, 8009eb8 <forward_conv2d+0xc44>
 8009e70:	699b      	ldr	r3, [r3, #24]
 8009e72:	6889      	ldr	r1, [r1, #8]
 8009e74:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 8009e78:	9301      	str	r3, [sp, #4]
 8009e7a:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8009e7e:	9000      	str	r0, [sp, #0]
 8009e80:	462b      	mov	r3, r5
 8009e82:	4620      	mov	r0, r4
 8009e84:	f7ff f9a6 	bl	80091d4 <ai_dict_decompress_f32>
 8009e88:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009e8c:	2c00      	cmp	r4, #0
 8009e8e:	bf18      	it	ne
 8009e90:	4623      	movne	r3, r4
 8009e92:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009e96:	f7ff baab 	b.w	80093f0 <forward_conv2d+0x17c>
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	f000 8185 	beq.w	800a1aa <forward_conv2d+0xf36>
 8009ea0:	6883      	ldr	r3, [r0, #8]
 8009ea2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009eac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009eb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009eb4:	f7ff ba6d 	b.w	8009392 <forward_conv2d+0x11e>
 8009eb8:	2300      	movs	r3, #0
 8009eba:	699b      	ldr	r3, [r3, #24]
 8009ebc:	deff      	udf	#255	; 0xff
 8009ebe:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009ec2:	f8c7 d064 	str.w	sp, [r7, #100]	; 0x64
 8009ec6:	320a      	adds	r2, #10
 8009ec8:	f022 0207 	bic.w	r2, r2, #7
 8009ecc:	ebad 0d02 	sub.w	sp, sp, r2
 8009ed0:	aa02      	add	r2, sp, #8
 8009ed2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009ed6:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8009eda:	2a00      	cmp	r2, #0
 8009edc:	f000 814d 	beq.w	800a17a <forward_conv2d+0xf06>
 8009ee0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009ee2:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 8009ee6:	fb02 f303 	mul.w	r3, r2, r3
 8009eea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009eec:	657b      	str	r3, [r7, #84]	; 0x54
 8009eee:	1a9b      	subs	r3, r3, r2
 8009ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ef2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009ef6:	4413      	add	r3, r2
 8009ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8009efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009efe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f06:	673b      	str	r3, [r7, #112]	; 0x70
 8009f08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009f0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009f10:	2300      	movs	r3, #0
 8009f12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009f16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f18:	b13b      	cbz	r3, 8009f2a <forward_conv2d+0xcb6>
 8009f1a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009f1e:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8009f22:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8009f26:	f001 f8b7 	bl	800b098 <memcpy>
 8009f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f000 8135 	beq.w	800a19e <forward_conv2d+0xf2a>
 8009f34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f36:	ed93 6a00 	vldr	s12, [r3]
 8009f3a:	3304      	adds	r3, #4
 8009f3c:	673b      	str	r3, [r7, #112]	; 0x70
 8009f3e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	f000 8101 	beq.w	800a14a <forward_conv2d+0xed6>
 8009f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f4c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009f50:	eb03 0802 	add.w	r8, r3, r2
 8009f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f64:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009f6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f6e:	f04f 0b00 	mov.w	fp, #0
 8009f72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	f2c0 8108 	blt.w	800a18c <forward_conv2d+0xf18>
 8009f7c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8009f80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f82:	2300      	movs	r3, #0
 8009f84:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8009f88:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8009f8c:	eb02 0c04 	add.w	ip, r2, r4
 8009f90:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009f94:	4540      	cmp	r0, r8
 8009f96:	bf94      	ite	ls
 8009f98:	ebc3 0300 	rsbls	r3, r3, r0
 8009f9c:	ebc3 0308 	rsbhi	r3, r3, r8
 8009fa0:	eba2 0903 	sub.w	r9, r2, r3
 8009fa4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8009fa8:	1ac4      	subs	r4, r0, r3
 8009faa:	fb03 f302 	mul.w	r3, r3, r2
 8009fae:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009fb2:	2a00      	cmp	r2, #0
 8009fb4:	f340 80e7 	ble.w	800a186 <forward_conv2d+0xf12>
 8009fb8:	f023 050f 	bic.w	r5, r3, #15
 8009fbc:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 8009fc0:	1e68      	subs	r0, r5, #1
 8009fc2:	0900      	lsrs	r0, r0, #4
 8009fc4:	3001      	adds	r0, #1
 8009fc6:	fb06 f204 	mul.w	r2, r6, r4
 8009fca:	653a      	str	r2, [r7, #80]	; 0x50
 8009fcc:	0102      	lsls	r2, r0, #4
 8009fce:	633a      	str	r2, [r7, #48]	; 0x30
 8009fd0:	fb06 f909 	mul.w	r9, r6, r9
 8009fd4:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8009fd8:	eef0 6a46 	vmov.f32	s13, s12
 8009fdc:	f04f 0e00 	mov.w	lr, #0
 8009fe0:	4662      	mov	r2, ip
 8009fe2:	2d00      	cmp	r5, #0
 8009fe4:	f340 80cd 	ble.w	800a182 <forward_conv2d+0xf0e>
 8009fe8:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8009fec:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8009ff0:	2600      	movs	r6, #0
 8009ff2:	ed50 fa0f 	vldr	s31, [r0, #-60]	; 0xffffffc4
 8009ff6:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 8009ffa:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 8009ffe:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 800a002:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800a006:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800a00a:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800a00e:	ed54 ca0c 	vldr	s25, [r4, #-48]	; 0xffffffd0
 800a012:	ed10 ca0c 	vldr	s24, [r0, #-48]	; 0xffffffd0
 800a016:	ed54 ba0b 	vldr	s23, [r4, #-44]	; 0xffffffd4
 800a01a:	ed10 ba0b 	vldr	s22, [r0, #-44]	; 0xffffffd4
 800a01e:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 800a022:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 800a026:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 800a02a:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 800a02e:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 800a032:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 800a036:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800a03a:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800a03e:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800a042:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800a046:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 800a04a:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 800a04e:	ed54 3a04 	vldr	s7, [r4, #-16]
 800a052:	ed10 4a04 	vldr	s8, [r0, #-16]
 800a056:	ed50 4a03 	vldr	s9, [r0, #-12]
 800a05a:	ed14 5a03 	vldr	s10, [r4, #-12]
 800a05e:	ed54 5a02 	vldr	s11, [r4, #-8]
 800a062:	ed10 7a02 	vldr	s14, [r0, #-8]
 800a066:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800a06a:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800a06e:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800a072:	3610      	adds	r6, #16
 800a074:	42b5      	cmp	r5, r6
 800a076:	ed14 fa01 	vldr	s30, [r4, #-4]
 800a07a:	ed50 ea01 	vldr	s29, [r0, #-4]
 800a07e:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800a082:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800a086:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800a08a:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800a08e:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800a092:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800a096:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800a09a:	eee9 7a89 	vfma.f32	s15, s19, s18
 800a09e:	eee8 7a80 	vfma.f32	s15, s17, s0
 800a0a2:	eee0 7a81 	vfma.f32	s15, s1, s2
 800a0a6:	eee1 7a82 	vfma.f32	s15, s3, s4
 800a0aa:	eee2 7a83 	vfma.f32	s15, s5, s6
 800a0ae:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a0b2:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a0b6:	eee5 7a87 	vfma.f32	s15, s11, s14
 800a0ba:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800a0be:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a0c2:	dc96      	bgt.n	8009ff2 <forward_conv2d+0xd7e>
 800a0c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0c6:	4451      	add	r1, sl
 800a0c8:	4452      	add	r2, sl
 800a0ca:	4283      	cmp	r3, r0
 800a0cc:	dd0f      	ble.n	800a0ee <forward_conv2d+0xe7a>
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	468c      	mov	ip, r1
 800a0d2:	4616      	mov	r6, r2
 800a0d4:	ecb6 7a01 	vldmia	r6!, {s14}
 800a0d8:	ecfc 7a01 	vldmia	ip!, {s15}
 800a0dc:	3401      	adds	r4, #1
 800a0de:	42a3      	cmp	r3, r4
 800a0e0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a0e4:	d1f6      	bne.n	800a0d4 <forward_conv2d+0xe60>
 800a0e6:	1a18      	subs	r0, r3, r0
 800a0e8:	0080      	lsls	r0, r0, #2
 800a0ea:	4402      	add	r2, r0
 800a0ec:	4401      	add	r1, r0
 800a0ee:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a0f0:	4402      	add	r2, r0
 800a0f2:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800a0f6:	f10e 0e01 	add.w	lr, lr, #1
 800a0fa:	4570      	cmp	r0, lr
 800a0fc:	4449      	add	r1, r9
 800a0fe:	f47f af70 	bne.w	8009fe2 <forward_conv2d+0xd6e>
 800a102:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800a106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a108:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800a10c:	edc3 6a00 	vstr	s13, [r3]
 800a110:	4608      	mov	r0, r1
 800a112:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800a116:	440b      	add	r3, r1
 800a118:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800a11c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a11e:	4410      	add	r0, r2
 800a120:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a122:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800a126:	4608      	mov	r0, r1
 800a128:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800a12c:	4418      	add	r0, r3
 800a12e:	1acb      	subs	r3, r1, r3
 800a130:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a134:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a138:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 800a13c:	f10b 0b01 	add.w	fp, fp, #1
 800a140:	455b      	cmp	r3, fp
 800a142:	eba8 0802 	sub.w	r8, r8, r2
 800a146:	f47f af14 	bne.w	8009f72 <forward_conv2d+0xcfe>
 800a14a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a14e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800a152:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a156:	440a      	add	r2, r1
 800a158:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a15c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a160:	3204      	adds	r2, #4
 800a162:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800a166:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800a16a:	3301      	adds	r3, #1
 800a16c:	429a      	cmp	r2, r3
 800a16e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a172:	f47f aed0 	bne.w	8009f16 <forward_conv2d+0xca2>
 800a176:	f8d7 b02c 	ldr.w	fp, [r7, #44]	; 0x2c
 800a17a:	f8d7 d064 	ldr.w	sp, [r7, #100]	; 0x64
 800a17e:	f7ff bb33 	b.w	80097e8 <forward_conv2d+0x574>
 800a182:	2000      	movs	r0, #0
 800a184:	e7a1      	b.n	800a0ca <forward_conv2d+0xe56>
 800a186:	eef0 6a46 	vmov.f32	s13, s12
 800a18a:	e7ba      	b.n	800a102 <forward_conv2d+0xe8e>
 800a18c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a190:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a194:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800a198:	eba8 0303 	sub.w	r3, r8, r3
 800a19c:	e6f2      	b.n	8009f84 <forward_conv2d+0xd10>
 800a19e:	eeb0 6a48 	vmov.f32	s12, s16
 800a1a2:	e6cc      	b.n	8009f3e <forward_conv2d+0xcca>
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	deff      	udf	#255	; 0xff
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a1b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a1ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a1be:	f7ff b8e8 	b.w	8009392 <forward_conv2d+0x11e>
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	d0f2      	beq.n	800a1ac <forward_conv2d+0xf38>
 800a1c6:	6882      	ldr	r2, [r0, #8]
 800a1c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a1d2:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800a1d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a1da:	f7ff b8da 	b.w	8009392 <forward_conv2d+0x11e>
 800a1de:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800a1e2:	f7ff b8b7 	b.w	8009354 <forward_conv2d+0xe0>
 800a1e6:	3318      	adds	r3, #24
 800a1e8:	d007      	beq.n	800a1fa <forward_conv2d+0xf86>
 800a1ea:	462a      	mov	r2, r5
 800a1ec:	462c      	mov	r4, r5
 800a1ee:	462b      	mov	r3, r5
 800a1f0:	f7ff b86a 	b.w	80092c8 <forward_conv2d+0x54>
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	deff      	udf	#255	; 0xff
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	deff      	udf	#255	; 0xff
 800a1fe:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 800a202:	f7ff b850 	b.w	80092a6 <forward_conv2d+0x32>
 800a206:	2300      	movs	r3, #0
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	deff      	udf	#255	; 0xff
 800a20c:	6853      	ldr	r3, [r2, #4]
 800a20e:	deff      	udf	#255	; 0xff
 800a210:	2200      	movs	r2, #0
 800a212:	f7ff b858 	b.w	80092c6 <forward_conv2d+0x52>
 800a216:	bf00      	nop

0800a218 <forward_dense>:
 800a218:	6983      	ldr	r3, [r0, #24]
 800a21a:	881a      	ldrh	r2, [r3, #0]
 800a21c:	2a00      	cmp	r2, #0
 800a21e:	f000 8193 	beq.w	800a548 <forward_dense+0x330>
 800a222:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a226:	ed2d 8b10 	vpush	{d8-d15}
 800a22a:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800a22e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800a232:	b099      	sub	sp, #100	; 0x64
 800a234:	2b00      	cmp	r3, #0
 800a236:	f000 8194 	beq.w	800a562 <forward_dense+0x34a>
 800a23a:	f8d3 8000 	ldr.w	r8, [r3]
 800a23e:	2a01      	cmp	r2, #1
 800a240:	f240 817f 	bls.w	800a542 <forward_dense+0x32a>
 800a244:	f8dc 4010 	ldr.w	r4, [ip, #16]
 800a248:	b104      	cbz	r4, 800a24c <forward_dense+0x34>
 800a24a:	6824      	ldr	r4, [r4, #0]
 800a24c:	2a02      	cmp	r2, #2
 800a24e:	f000 817d 	beq.w	800a54c <forward_dense+0x334>
 800a252:	f8dc 301c 	ldr.w	r3, [ip, #28]
 800a256:	2b00      	cmp	r3, #0
 800a258:	f040 817b 	bne.w	800a552 <forward_dense+0x33a>
 800a25c:	f11c 0118 	adds.w	r1, ip, #24
 800a260:	930e      	str	r3, [sp, #56]	; 0x38
 800a262:	f000 817c 	beq.w	800a55e <forward_dense+0x346>
 800a266:	f8bc 1018 	ldrh.w	r1, [ip, #24]
 800a26a:	2901      	cmp	r1, #1
 800a26c:	f240 83ab 	bls.w	800a9c6 <forward_dense+0x7ae>
 800a270:	2b00      	cmp	r3, #0
 800a272:	f000 8178 	beq.w	800a566 <forward_dense+0x34e>
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	930f      	str	r3, [sp, #60]	; 0x3c
 800a27a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a27c:	68e7      	ldr	r7, [r4, #12]
 800a27e:	6998      	ldr	r0, [r3, #24]
 800a280:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800a284:	6803      	ldr	r3, [r0, #0]
 800a286:	6849      	ldr	r1, [r1, #4]
 800a288:	9115      	str	r1, [sp, #84]	; 0x54
 800a28a:	e9d7 6501 	ldrd	r6, r5, [r7, #4]
 800a28e:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800a292:	f3c3 5141 	ubfx	r1, r3, #21, #2
 800a296:	fa4e f101 	asr.w	r1, lr, r1
 800a29a:	2a03      	cmp	r2, #3
 800a29c:	68ff      	ldr	r7, [r7, #12]
 800a29e:	9113      	str	r1, [sp, #76]	; 0x4c
 800a2a0:	fb05 f506 	mul.w	r5, r5, r6
 800a2a4:	f000 8373 	beq.w	800a98e <forward_dense+0x776>
 800a2a8:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 800a2ac:	2a00      	cmp	r2, #0
 800a2ae:	f000 8371 	beq.w	800a994 <forward_dense+0x77c>
 800a2b2:	6812      	ldr	r2, [r2, #0]
 800a2b4:	2a00      	cmp	r2, #0
 800a2b6:	f000 836d 	beq.w	800a994 <forward_dense+0x77c>
 800a2ba:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800a2be:	2b04      	cmp	r3, #4
 800a2c0:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800a2c4:	f000 836c 	beq.w	800a9a0 <forward_dense+0x788>
 800a2c8:	2b08      	cmp	r3, #8
 800a2ca:	f000 8369 	beq.w	800a9a0 <forward_dense+0x788>
 800a2ce:	f04f 0a00 	mov.w	sl, #0
 800a2d2:	69a3      	ldr	r3, [r4, #24]
 800a2d4:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800a2d8:	6899      	ldr	r1, [r3, #8]
 800a2da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2dc:	9102      	str	r1, [sp, #8]
 800a2de:	695b      	ldr	r3, [r3, #20]
 800a2e0:	6892      	ldr	r2, [r2, #8]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	9305      	str	r3, [sp, #20]
 800a2e6:	00ad      	lsls	r5, r5, #2
 800a2e8:	fb07 1005 	mla	r0, r7, r5, r1
 800a2ec:	00b4      	lsls	r4, r6, #2
 800a2ee:	4281      	cmp	r1, r0
 800a2f0:	9011      	str	r0, [sp, #68]	; 0x44
 800a2f2:	9410      	str	r4, [sp, #64]	; 0x40
 800a2f4:	eb01 0804 	add.w	r8, r1, r4
 800a2f8:	f080 811e 	bcs.w	800a538 <forward_dense+0x320>
 800a2fc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a2fe:	eddf faa0 	vldr	s31, [pc, #640]	; 800a580 <forward_dense+0x368>
 800a302:	08e8      	lsrs	r0, r5, #3
 800a304:	0141      	lsls	r1, r0, #5
 800a306:	f025 0301 	bic.w	r3, r5, #1
 800a30a:	4606      	mov	r6, r0
 800a30c:	ebc1 0383 	rsb	r3, r1, r3, lsl #2
 800a310:	9001      	str	r0, [sp, #4]
 800a312:	ebc0 60c0 	rsb	r0, r0, r0, lsl #27
 800a316:	00f7      	lsls	r7, r6, #3
 800a318:	9316      	str	r3, [sp, #88]	; 0x58
 800a31a:	0143      	lsls	r3, r0, #5
 800a31c:	00b6      	lsls	r6, r6, #2
 800a31e:	f1a5 0410 	sub.w	r4, r5, #16
 800a322:	9307      	str	r3, [sp, #28]
 800a324:	f107 0308 	add.w	r3, r7, #8
 800a328:	0924      	lsrs	r4, r4, #4
 800a32a:	9304      	str	r3, [sp, #16]
 800a32c:	1d33      	adds	r3, r6, #4
 800a32e:	3401      	adds	r4, #1
 800a330:	930d      	str	r3, [sp, #52]	; 0x34
 800a332:	f005 0301 	and.w	r3, r5, #1
 800a336:	01a4      	lsls	r4, r4, #6
 800a338:	f005 0907 	and.w	r9, r5, #7
 800a33c:	9309      	str	r3, [sp, #36]	; 0x24
 800a33e:	00ab      	lsls	r3, r5, #2
 800a340:	9312      	str	r3, [sp, #72]	; 0x48
 800a342:	9703      	str	r7, [sp, #12]
 800a344:	960c      	str	r6, [sp, #48]	; 0x30
 800a346:	9417      	str	r4, [sp, #92]	; 0x5c
 800a348:	eb02 0b01 	add.w	fp, r2, r1
 800a34c:	4653      	mov	r3, sl
 800a34e:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 800a352:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a354:	9907      	ldr	r1, [sp, #28]
 800a356:	6992      	ldr	r2, [r2, #24]
 800a358:	6894      	ldr	r4, [r2, #8]
 800a35a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a35c:	4459      	add	r1, fp
 800a35e:	9106      	str	r1, [sp, #24]
 800a360:	2a00      	cmp	r2, #0
 800a362:	f000 810f 	beq.w	800a584 <forward_dense+0x36c>
 800a366:	6992      	ldr	r2, [r2, #24]
 800a368:	6896      	ldr	r6, [r2, #8]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	f000 810e 	beq.w	800a58c <forward_dense+0x374>
 800a370:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a372:	2a04      	cmp	r2, #4
 800a374:	f000 821e 	beq.w	800a7b4 <forward_dense+0x59c>
 800a378:	9a02      	ldr	r2, [sp, #8]
 800a37a:	4590      	cmp	r8, r2
 800a37c:	f240 80d3 	bls.w	800a526 <forward_dense+0x30e>
 800a380:	4694      	mov	ip, r2
 800a382:	9a07      	ldr	r2, [sp, #28]
 800a384:	f8dd a014 	ldr.w	sl, [sp, #20]
 800a388:	f102 0e20 	add.w	lr, r2, #32
 800a38c:	46b1      	mov	r9, r6
 800a38e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800a390:	44de      	add	lr, fp
 800a392:	f1b9 0f00 	cmp.w	r9, #0
 800a396:	f000 80e8 	beq.w	800a56a <forward_dense+0x352>
 800a39a:	9a01      	ldr	r2, [sp, #4]
 800a39c:	edd9 2a00 	vldr	s5, [r9]
 800a3a0:	eddf 6a77 	vldr	s13, [pc, #476]	; 800a580 <forward_dense+0x368>
 800a3a4:	f109 0904 	add.w	r9, r9, #4
 800a3a8:	2a00      	cmp	r2, #0
 800a3aa:	f000 80e6 	beq.w	800a57a <forward_dense+0x362>
 800a3ae:	9904      	ldr	r1, [sp, #16]
 800a3b0:	f104 0208 	add.w	r2, r4, #8
 800a3b4:	190f      	adds	r7, r1, r4
 800a3b6:	4671      	mov	r1, lr
 800a3b8:	f812 5c07 	ldrb.w	r5, [r2, #-7]
 800a3bc:	f812 0c08 	ldrb.w	r0, [r2, #-8]
 800a3c0:	ed51 7a07 	vldr	s15, [r1, #-28]	; 0xffffffe4
 800a3c4:	ed11 3a08 	vldr	s6, [r1, #-32]	; 0xffffffe0
 800a3c8:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 800a3cc:	ed11 5a05 	vldr	s10, [r1, #-20]	; 0xffffffec
 800a3d0:	ed51 3a04 	vldr	s7, [r1, #-16]
 800a3d4:	ed51 4a03 	vldr	s9, [r1, #-12]
 800a3d8:	ed51 5a02 	vldr	s11, [r1, #-8]
 800a3dc:	ed11 6a01 	vldr	s12, [r1, #-4]
 800a3e0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a3e4:	ed95 7a00 	vldr	s14, [r5]
 800a3e8:	f812 5c06 	ldrb.w	r5, [r2, #-6]
 800a3ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a3f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3f4:	ed90 7a00 	vldr	s14, [r0]
 800a3f8:	f812 0c05 	ldrb.w	r0, [r2, #-5]
 800a3fc:	eee7 7a03 	vfma.f32	s15, s14, s6
 800a400:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a404:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a408:	ed95 3a00 	vldr	s6, [r5]
 800a40c:	ed90 7a00 	vldr	s14, [r0]
 800a410:	f812 5c04 	ldrb.w	r5, [r2, #-4]
 800a414:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 800a418:	eee3 7a04 	vfma.f32	s15, s6, s8
 800a41c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a420:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a424:	ed95 3a00 	vldr	s6, [r5]
 800a428:	ed90 4a00 	vldr	s8, [r0]
 800a42c:	f812 5c02 	ldrb.w	r5, [r2, #-2]
 800a430:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 800a434:	eee7 7a05 	vfma.f32	s15, s14, s10
 800a438:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a43c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a440:	ed95 5a00 	vldr	s10, [r5]
 800a444:	ed90 7a00 	vldr	s14, [r0]
 800a448:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a44c:	3208      	adds	r2, #8
 800a44e:	4297      	cmp	r7, r2
 800a450:	f101 0120 	add.w	r1, r1, #32
 800a454:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a458:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a45c:	eee7 7a06 	vfma.f32	s15, s14, s12
 800a460:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a464:	d1a8      	bne.n	800a3b8 <forward_dense+0x1a0>
 800a466:	9a03      	ldr	r2, [sp, #12]
 800a468:	18a1      	adds	r1, r4, r2
 800a46a:	465a      	mov	r2, fp
 800a46c:	2e00      	cmp	r6, #0
 800a46e:	d04a      	beq.n	800a506 <forward_dense+0x2ee>
 800a470:	7808      	ldrb	r0, [r1, #0]
 800a472:	ed92 7a00 	vldr	s14, [r2]
 800a476:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a47a:	edd0 7a00 	vldr	s15, [r0]
 800a47e:	2e01      	cmp	r6, #1
 800a480:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a484:	d03f      	beq.n	800a506 <forward_dense+0x2ee>
 800a486:	7848      	ldrb	r0, [r1, #1]
 800a488:	edd2 7a01 	vldr	s15, [r2, #4]
 800a48c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a490:	ed90 7a00 	vldr	s14, [r0]
 800a494:	2e02      	cmp	r6, #2
 800a496:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a49a:	d034      	beq.n	800a506 <forward_dense+0x2ee>
 800a49c:	7888      	ldrb	r0, [r1, #2]
 800a49e:	edd2 7a02 	vldr	s15, [r2, #8]
 800a4a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a4a6:	ed90 7a00 	vldr	s14, [r0]
 800a4aa:	2e03      	cmp	r6, #3
 800a4ac:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a4b0:	d029      	beq.n	800a506 <forward_dense+0x2ee>
 800a4b2:	78c8      	ldrb	r0, [r1, #3]
 800a4b4:	edd2 7a03 	vldr	s15, [r2, #12]
 800a4b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a4bc:	ed90 7a00 	vldr	s14, [r0]
 800a4c0:	2e04      	cmp	r6, #4
 800a4c2:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a4c6:	d01e      	beq.n	800a506 <forward_dense+0x2ee>
 800a4c8:	7908      	ldrb	r0, [r1, #4]
 800a4ca:	edd2 7a04 	vldr	s15, [r2, #16]
 800a4ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a4d2:	ed90 7a00 	vldr	s14, [r0]
 800a4d6:	2e05      	cmp	r6, #5
 800a4d8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a4dc:	d013      	beq.n	800a506 <forward_dense+0x2ee>
 800a4de:	7948      	ldrb	r0, [r1, #5]
 800a4e0:	edd2 7a05 	vldr	s15, [r2, #20]
 800a4e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a4e8:	ed90 7a00 	vldr	s14, [r0]
 800a4ec:	2e06      	cmp	r6, #6
 800a4ee:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a4f2:	d008      	beq.n	800a506 <forward_dense+0x2ee>
 800a4f4:	7989      	ldrb	r1, [r1, #6]
 800a4f6:	edd2 7a06 	vldr	s15, [r2, #24]
 800a4fa:	eb03 0281 	add.w	r2, r3, r1, lsl #2
 800a4fe:	ed92 7a00 	vldr	s14, [r2]
 800a502:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a506:	4454      	add	r4, sl
 800a508:	ee72 6aa6 	vadd.f32	s13, s5, s13
 800a50c:	ecec 6a01 	vstmia	ip!, {s13}
 800a510:	45c4      	cmp	ip, r8
 800a512:	f4ff af3e 	bcc.w	800a392 <forward_dense+0x17a>
 800a516:	9902      	ldr	r1, [sp, #8]
 800a518:	43ca      	mvns	r2, r1
 800a51a:	4442      	add	r2, r8
 800a51c:	f022 0203 	bic.w	r2, r2, #3
 800a520:	3204      	adds	r2, #4
 800a522:	188a      	adds	r2, r1, r2
 800a524:	9202      	str	r2, [sp, #8]
 800a526:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a528:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a52a:	4490      	add	r8, r2
 800a52c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a52e:	4493      	add	fp, r2
 800a530:	9a02      	ldr	r2, [sp, #8]
 800a532:	428a      	cmp	r2, r1
 800a534:	f4ff af0d 	bcc.w	800a352 <forward_dense+0x13a>
 800a538:	b019      	add	sp, #100	; 0x64
 800a53a:	ecbd 8b10 	vpop	{d8-d15}
 800a53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a542:	2300      	movs	r3, #0
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	deff      	udf	#255	; 0xff
 800a548:	6853      	ldr	r3, [r2, #4]
 800a54a:	deff      	udf	#255	; 0xff
 800a54c:	2300      	movs	r3, #0
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	deff      	udf	#255	; 0xff
 800a552:	6819      	ldr	r1, [r3, #0]
 800a554:	910e      	str	r1, [sp, #56]	; 0x38
 800a556:	f11c 0118 	adds.w	r1, ip, #24
 800a55a:	f47f ae84 	bne.w	800a266 <forward_dense+0x4e>
 800a55e:	910f      	str	r1, [sp, #60]	; 0x3c
 800a560:	e68b      	b.n	800a27a <forward_dense+0x62>
 800a562:	4698      	mov	r8, r3
 800a564:	e66b      	b.n	800a23e <forward_dense+0x26>
 800a566:	930f      	str	r3, [sp, #60]	; 0x3c
 800a568:	e687      	b.n	800a27a <forward_dense+0x62>
 800a56a:	9a01      	ldr	r2, [sp, #4]
 800a56c:	eddf 6a04 	vldr	s13, [pc, #16]	; 800a580 <forward_dense+0x368>
 800a570:	eef0 2a6f 	vmov.f32	s5, s31
 800a574:	2a00      	cmp	r2, #0
 800a576:	f47f af1a 	bne.w	800a3ae <forward_dense+0x196>
 800a57a:	9a06      	ldr	r2, [sp, #24]
 800a57c:	4621      	mov	r1, r4
 800a57e:	e775      	b.n	800a46c <forward_dense+0x254>
 800a580:	00000000 	.word	0x00000000
 800a584:	4616      	mov	r6, r2
 800a586:	2b00      	cmp	r3, #0
 800a588:	f47f aef2 	bne.w	800a370 <forward_dense+0x158>
 800a58c:	9a02      	ldr	r2, [sp, #8]
 800a58e:	4590      	cmp	r8, r2
 800a590:	d9c9      	bls.n	800a526 <forward_dense+0x30e>
 800a592:	4615      	mov	r5, r2
 800a594:	9a07      	ldr	r2, [sp, #28]
 800a596:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a598:	9308      	str	r3, [sp, #32]
 800a59a:	f102 0740 	add.w	r7, r2, #64	; 0x40
 800a59e:	9a06      	ldr	r2, [sp, #24]
 800a5a0:	9b05      	ldr	r3, [sp, #20]
 800a5a2:	4610      	mov	r0, r2
 800a5a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a5a6:	445f      	add	r7, fp
 800a5a8:	eb00 0c02 	add.w	ip, r0, r2
 800a5ac:	f001 0e0f 	and.w	lr, r1, #15
 800a5b0:	468a      	mov	sl, r1
 800a5b2:	4691      	mov	r9, r2
 800a5b4:	2e00      	cmp	r6, #0
 800a5b6:	f000 81de 	beq.w	800a976 <forward_dense+0x75e>
 800a5ba:	f1ba 0f0f 	cmp.w	sl, #15
 800a5be:	ed96 fa00 	vldr	s30, [r6]
 800a5c2:	ed5f 6a11 	vldr	s13, [pc, #-68]	; 800a580 <forward_dense+0x368>
 800a5c6:	f106 0604 	add.w	r6, r6, #4
 800a5ca:	f240 81dc 	bls.w	800a986 <forward_dense+0x76e>
 800a5ce:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800a5d2:	463a      	mov	r2, r7
 800a5d4:	4650      	mov	r0, sl
 800a5d6:	ed52 ea0f 	vldr	s29, [r2, #-60]	; 0xffffffc4
 800a5da:	ed51 7a0f 	vldr	s15, [r1, #-60]	; 0xffffffc4
 800a5de:	ed11 ea10 	vldr	s28, [r1, #-64]	; 0xffffffc0
 800a5e2:	ed52 da10 	vldr	s27, [r2, #-64]	; 0xffffffc0
 800a5e6:	ed11 da0e 	vldr	s26, [r1, #-56]	; 0xffffffc8
 800a5ea:	ed51 ca0d 	vldr	s25, [r1, #-52]	; 0xffffffcc
 800a5ee:	ed12 ca0d 	vldr	s24, [r2, #-52]	; 0xffffffcc
 800a5f2:	ed52 ba0c 	vldr	s23, [r2, #-48]	; 0xffffffd0
 800a5f6:	ed11 ba0c 	vldr	s22, [r1, #-48]	; 0xffffffd0
 800a5fa:	ed52 aa0b 	vldr	s21, [r2, #-44]	; 0xffffffd4
 800a5fe:	ed11 aa0b 	vldr	s20, [r1, #-44]	; 0xffffffd4
 800a602:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 800a606:	ed11 9a0a 	vldr	s18, [r1, #-40]	; 0xffffffd8
 800a60a:	ed51 8a09 	vldr	s17, [r1, #-36]	; 0xffffffdc
 800a60e:	ed12 8a09 	vldr	s16, [r2, #-36]	; 0xffffffdc
 800a612:	ed11 0a08 	vldr	s0, [r1, #-32]	; 0xffffffe0
 800a616:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 800a61a:	ed11 1a07 	vldr	s2, [r1, #-28]	; 0xffffffe4
 800a61e:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 800a622:	ed11 2a06 	vldr	s4, [r1, #-24]	; 0xffffffe8
 800a626:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 800a62a:	ed11 3a05 	vldr	s6, [r1, #-20]	; 0xffffffec
 800a62e:	ed52 3a05 	vldr	s7, [r2, #-20]	; 0xffffffec
 800a632:	ed12 4a04 	vldr	s8, [r2, #-16]
 800a636:	ed51 4a04 	vldr	s9, [r1, #-16]
 800a63a:	ed12 5a03 	vldr	s10, [r2, #-12]
 800a63e:	ed51 5a03 	vldr	s11, [r1, #-12]
 800a642:	ed12 6a02 	vldr	s12, [r2, #-8]
 800a646:	ed11 7a02 	vldr	s14, [r1, #-8]
 800a64a:	ee67 7aae 	vmul.f32	s15, s15, s29
 800a64e:	ed52 ea0e 	vldr	s29, [r2, #-56]	; 0xffffffc8
 800a652:	eeee 7a2d 	vfma.f32	s15, s28, s27
 800a656:	3810      	subs	r0, #16
 800a658:	280f      	cmp	r0, #15
 800a65a:	ed11 ea01 	vldr	s28, [r1, #-4]
 800a65e:	ed52 da01 	vldr	s27, [r2, #-4]
 800a662:	eeed 7a2e 	vfma.f32	s15, s26, s29
 800a666:	f101 0140 	add.w	r1, r1, #64	; 0x40
 800a66a:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800a66e:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800a672:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800a676:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800a67a:	eee9 7a89 	vfma.f32	s15, s19, s18
 800a67e:	eee8 7a88 	vfma.f32	s15, s17, s16
 800a682:	eee0 7a20 	vfma.f32	s15, s0, s1
 800a686:	eee1 7a21 	vfma.f32	s15, s2, s3
 800a68a:	eee2 7a22 	vfma.f32	s15, s4, s5
 800a68e:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a692:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a696:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a69a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a69e:	eeee 7a2d 	vfma.f32	s15, s28, s27
 800a6a2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a6a6:	d896      	bhi.n	800a5d6 <forward_dense+0x3be>
 800a6a8:	eb04 0009 	add.w	r0, r4, r9
 800a6ac:	4672      	mov	r2, lr
 800a6ae:	4661      	mov	r1, ip
 800a6b0:	2a00      	cmp	r2, #0
 800a6b2:	d075      	beq.n	800a7a0 <forward_dense+0x588>
 800a6b4:	ed90 7a00 	vldr	s14, [r0]
 800a6b8:	edd1 7a00 	vldr	s15, [r1]
 800a6bc:	2a01      	cmp	r2, #1
 800a6be:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a6c2:	d06d      	beq.n	800a7a0 <forward_dense+0x588>
 800a6c4:	ed90 7a01 	vldr	s14, [r0, #4]
 800a6c8:	edd1 7a01 	vldr	s15, [r1, #4]
 800a6cc:	2a02      	cmp	r2, #2
 800a6ce:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a6d2:	d065      	beq.n	800a7a0 <forward_dense+0x588>
 800a6d4:	ed90 7a02 	vldr	s14, [r0, #8]
 800a6d8:	edd1 7a02 	vldr	s15, [r1, #8]
 800a6dc:	2a03      	cmp	r2, #3
 800a6de:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a6e2:	d05d      	beq.n	800a7a0 <forward_dense+0x588>
 800a6e4:	ed90 7a03 	vldr	s14, [r0, #12]
 800a6e8:	edd1 7a03 	vldr	s15, [r1, #12]
 800a6ec:	2a04      	cmp	r2, #4
 800a6ee:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a6f2:	d055      	beq.n	800a7a0 <forward_dense+0x588>
 800a6f4:	ed90 7a04 	vldr	s14, [r0, #16]
 800a6f8:	edd1 7a04 	vldr	s15, [r1, #16]
 800a6fc:	2a05      	cmp	r2, #5
 800a6fe:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a702:	d04d      	beq.n	800a7a0 <forward_dense+0x588>
 800a704:	ed90 7a05 	vldr	s14, [r0, #20]
 800a708:	edd1 7a05 	vldr	s15, [r1, #20]
 800a70c:	2a06      	cmp	r2, #6
 800a70e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a712:	d045      	beq.n	800a7a0 <forward_dense+0x588>
 800a714:	ed90 7a06 	vldr	s14, [r0, #24]
 800a718:	edd1 7a06 	vldr	s15, [r1, #24]
 800a71c:	2a07      	cmp	r2, #7
 800a71e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a722:	d03d      	beq.n	800a7a0 <forward_dense+0x588>
 800a724:	ed90 7a07 	vldr	s14, [r0, #28]
 800a728:	edd1 7a07 	vldr	s15, [r1, #28]
 800a72c:	2a08      	cmp	r2, #8
 800a72e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a732:	d035      	beq.n	800a7a0 <forward_dense+0x588>
 800a734:	ed90 7a08 	vldr	s14, [r0, #32]
 800a738:	edd1 7a08 	vldr	s15, [r1, #32]
 800a73c:	2a09      	cmp	r2, #9
 800a73e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a742:	d02d      	beq.n	800a7a0 <forward_dense+0x588>
 800a744:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 800a748:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 800a74c:	2a0a      	cmp	r2, #10
 800a74e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a752:	d025      	beq.n	800a7a0 <forward_dense+0x588>
 800a754:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 800a758:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 800a75c:	2a0b      	cmp	r2, #11
 800a75e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a762:	d01d      	beq.n	800a7a0 <forward_dense+0x588>
 800a764:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 800a768:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 800a76c:	2a0c      	cmp	r2, #12
 800a76e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a772:	d015      	beq.n	800a7a0 <forward_dense+0x588>
 800a774:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 800a778:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
 800a77c:	2a0d      	cmp	r2, #13
 800a77e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a782:	d00d      	beq.n	800a7a0 <forward_dense+0x588>
 800a784:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 800a788:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 800a78c:	2a0e      	cmp	r2, #14
 800a78e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a792:	d005      	beq.n	800a7a0 <forward_dense+0x588>
 800a794:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 800a798:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 800a79c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a7a0:	441c      	add	r4, r3
 800a7a2:	ee7f 6a26 	vadd.f32	s13, s30, s13
 800a7a6:	ece5 6a01 	vstmia	r5!, {s13}
 800a7aa:	4545      	cmp	r5, r8
 800a7ac:	f4ff af02 	bcc.w	800a5b4 <forward_dense+0x39c>
 800a7b0:	9b08      	ldr	r3, [sp, #32]
 800a7b2:	e6b0      	b.n	800a516 <forward_dense+0x2fe>
 800a7b4:	9902      	ldr	r1, [sp, #8]
 800a7b6:	4588      	cmp	r8, r1
 800a7b8:	f67f aeb5 	bls.w	800a526 <forward_dense+0x30e>
 800a7bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a7be:	eb02 000b 	add.w	r0, r2, fp
 800a7c2:	9a07      	ldr	r2, [sp, #28]
 800a7c4:	9008      	str	r0, [sp, #32]
 800a7c6:	3220      	adds	r2, #32
 800a7c8:	3007      	adds	r0, #7
 800a7ca:	445a      	add	r2, fp
 800a7cc:	900b      	str	r0, [sp, #44]	; 0x2c
 800a7ce:	920a      	str	r2, [sp, #40]	; 0x28
 800a7d0:	4689      	mov	r9, r1
 800a7d2:	2e00      	cmp	r6, #0
 800a7d4:	f000 80b9 	beq.w	800a94a <forward_dense+0x732>
 800a7d8:	9a01      	ldr	r2, [sp, #4]
 800a7da:	edd6 2a00 	vldr	s5, [r6]
 800a7de:	ed5f 6a98 	vldr	s13, [pc, #-608]	; 800a580 <forward_dense+0x368>
 800a7e2:	3604      	adds	r6, #4
 800a7e4:	2a00      	cmp	r2, #0
 800a7e6:	f000 80b8 	beq.w	800a95a <forward_dense+0x742>
 800a7ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a7ec:	1917      	adds	r7, r2, r4
 800a7ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7f0:	1d21      	adds	r1, r4, #4
 800a7f2:	f811 5c04 	ldrb.w	r5, [r1, #-4]
 800a7f6:	ed52 7a07 	vldr	s15, [r2, #-28]	; 0xffffffe4
 800a7fa:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 800a7fe:	ed12 3a08 	vldr	s6, [r2, #-32]	; 0xffffffe0
 800a802:	ed52 3a06 	vldr	s7, [r2, #-24]	; 0xffffffe8
 800a806:	ed12 4a05 	vldr	s8, [r2, #-20]	; 0xffffffec
 800a80a:	ed52 4a04 	vldr	s9, [r2, #-16]
 800a80e:	ed12 5a03 	vldr	s10, [r2, #-12]
 800a812:	ed52 5a02 	vldr	s11, [r2, #-8]
 800a816:	ed12 6a01 	vldr	s12, [r2, #-4]
 800a81a:	f005 0e0f 	and.w	lr, r5, #15
 800a81e:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800a822:	ed9e 7a00 	vldr	s14, [lr]
 800a826:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 800a82a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800a82e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a832:	ed9c 7a00 	vldr	s14, [ip]
 800a836:	f811 5c02 	ldrb.w	r5, [r1, #-2]
 800a83a:	ea4f 1e10 	mov.w	lr, r0, lsr #4
 800a83e:	eee7 7a03 	vfma.f32	s15, s14, s6
 800a842:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800a846:	f000 0c0f 	and.w	ip, r0, #15
 800a84a:	ed9e 7a00 	vldr	s14, [lr]
 800a84e:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 800a852:	eee7 7a23 	vfma.f32	s15, s14, s7
 800a856:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800a85a:	3104      	adds	r1, #4
 800a85c:	ed9c 7a00 	vldr	s14, [ip]
 800a860:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 800a864:	eee7 7a04 	vfma.f32	s15, s14, s8
 800a868:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800a86c:	f005 050f 	and.w	r5, r5, #15
 800a870:	ed9c 7a00 	vldr	s14, [ip]
 800a874:	eee7 7a24 	vfma.f32	s15, s14, s9
 800a878:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a87c:	428f      	cmp	r7, r1
 800a87e:	ed95 7a00 	vldr	s14, [r5]
 800a882:	ea4f 1510 	mov.w	r5, r0, lsr #4
 800a886:	eee7 7a05 	vfma.f32	s15, s14, s10
 800a88a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a88e:	f000 000f 	and.w	r0, r0, #15
 800a892:	ed95 7a00 	vldr	s14, [r5]
 800a896:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a89a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a89e:	f102 0220 	add.w	r2, r2, #32
 800a8a2:	ed90 7a00 	vldr	s14, [r0]
 800a8a6:	eee7 7a06 	vfma.f32	s15, s14, s12
 800a8aa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a8ae:	d1a0      	bne.n	800a7f2 <forward_dense+0x5da>
 800a8b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8b2:	46de      	mov	lr, fp
 800a8b4:	eb04 0a02 	add.w	sl, r4, r2
 800a8b8:	9a08      	ldr	r2, [sp, #32]
 800a8ba:	4596      	cmp	lr, r2
 800a8bc:	d22c      	bcs.n	800a918 <forward_dense+0x700>
 800a8be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a8c0:	f10e 0108 	add.w	r1, lr, #8
 800a8c4:	eba2 0c01 	sub.w	ip, r2, r1
 800a8c8:	f02c 0207 	bic.w	r2, ip, #7
 800a8cc:	f10e 0710 	add.w	r7, lr, #16
 800a8d0:	4417      	add	r7, r2
 800a8d2:	f10a 35ff 	add.w	r5, sl, #4294967295
 800a8d6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800a8da:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a8de:	ed11 6a02 	vldr	s12, [r1, #-8]
 800a8e2:	f002 000f 	and.w	r0, r2, #15
 800a8e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a8ea:	ed90 7a00 	vldr	s14, [r0]
 800a8ee:	0912      	lsrs	r2, r2, #4
 800a8f0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a8f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8f8:	ed92 7a00 	vldr	s14, [r2]
 800a8fc:	eee7 7a06 	vfma.f32	s15, s14, s12
 800a900:	3108      	adds	r1, #8
 800a902:	428f      	cmp	r7, r1
 800a904:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a908:	d1e5      	bne.n	800a8d6 <forward_dense+0x6be>
 800a90a:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800a90e:	f10c 0c01 	add.w	ip, ip, #1
 800a912:	44e2      	add	sl, ip
 800a914:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
 800a918:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a91a:	b312      	cbz	r2, 800a962 <forward_dense+0x74a>
 800a91c:	f89a 2000 	ldrb.w	r2, [sl]
 800a920:	edde 7a00 	vldr	s15, [lr]
 800a924:	0912      	lsrs	r2, r2, #4
 800a926:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a92a:	ed92 7a00 	vldr	s14, [r2]
 800a92e:	9a05      	ldr	r2, [sp, #20]
 800a930:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a934:	4414      	add	r4, r2
 800a936:	ee76 2aa2 	vadd.f32	s5, s13, s5
 800a93a:	ece9 2a01 	vstmia	r9!, {s5}
 800a93e:	45c8      	cmp	r8, r9
 800a940:	f67f ade9 	bls.w	800a516 <forward_dense+0x2fe>
 800a944:	2e00      	cmp	r6, #0
 800a946:	f47f af47 	bne.w	800a7d8 <forward_dense+0x5c0>
 800a94a:	9a01      	ldr	r2, [sp, #4]
 800a94c:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800a9cc <forward_dense+0x7b4>
 800a950:	eef0 2a6f 	vmov.f32	s5, s31
 800a954:	2a00      	cmp	r2, #0
 800a956:	f47f af48 	bne.w	800a7ea <forward_dense+0x5d2>
 800a95a:	f8dd e018 	ldr.w	lr, [sp, #24]
 800a95e:	46a2      	mov	sl, r4
 800a960:	e7aa      	b.n	800a8b8 <forward_dense+0x6a0>
 800a962:	ee72 6aa6 	vadd.f32	s13, s5, s13
 800a966:	9a05      	ldr	r2, [sp, #20]
 800a968:	ece9 6a01 	vstmia	r9!, {s13}
 800a96c:	45c1      	cmp	r9, r8
 800a96e:	4414      	add	r4, r2
 800a970:	f4ff af2f 	bcc.w	800a7d2 <forward_dense+0x5ba>
 800a974:	e5cf      	b.n	800a516 <forward_dense+0x2fe>
 800a976:	f1ba 0f0f 	cmp.w	sl, #15
 800a97a:	eeb0 fa6f 	vmov.f32	s30, s31
 800a97e:	eddf 6a13 	vldr	s13, [pc, #76]	; 800a9cc <forward_dense+0x7b4>
 800a982:	f63f ae24 	bhi.w	800a5ce <forward_dense+0x3b6>
 800a986:	4652      	mov	r2, sl
 800a988:	4620      	mov	r0, r4
 800a98a:	9906      	ldr	r1, [sp, #24]
 800a98c:	e690      	b.n	800a6b0 <forward_dense+0x498>
 800a98e:	2300      	movs	r3, #0
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	deff      	udf	#255	; 0xff
 800a994:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800a998:	2b04      	cmp	r3, #4
 800a99a:	4691      	mov	r9, r2
 800a99c:	f47f ac94 	bne.w	800a2c8 <forward_dense+0xb0>
 800a9a0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800a9a4:	f1b9 0f00 	cmp.w	r9, #0
 800a9a8:	f43f ac93 	beq.w	800a2d2 <forward_dense+0xba>
 800a9ac:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a9b0:	f000 fb0c 	bl	800afcc <ai_array_get_byte_size>
 800a9b4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	4651      	mov	r1, sl
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f000 fb6b 	bl	800b098 <memcpy>
 800a9c2:	4682      	mov	sl, r0
 800a9c4:	e485      	b.n	800a2d2 <forward_dense+0xba>
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9ca:	e456      	b.n	800a27a <forward_dense+0x62>
 800a9cc:	00000000 	.word	0x00000000

0800a9d0 <nl_func_relu_array_f32>:
 800a9d0:	b410      	push	{r4}
 800a9d2:	698c      	ldr	r4, [r1, #24]
 800a9d4:	6981      	ldr	r1, [r0, #24]
 800a9d6:	68a3      	ldr	r3, [r4, #8]
 800a9d8:	6889      	ldr	r1, [r1, #8]
 800a9da:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800a9de:	3a01      	subs	r2, #1
 800a9e0:	0092      	lsls	r2, r2, #2
 800a9e2:	189b      	adds	r3, r3, r2
 800a9e4:	d216      	bcs.n	800aa14 <nl_func_relu_array_f32+0x44>
 800a9e6:	3204      	adds	r2, #4
 800a9e8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800aa1c <nl_func_relu_array_f32+0x4c>
 800a9ec:	4411      	add	r1, r2
 800a9ee:	3304      	adds	r3, #4
 800a9f0:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a9f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9fc:	bfb8      	it	lt
 800a9fe:	eef0 7a47 	vmovlt.f32	s15, s14
 800aa02:	ed61 7a01 	vstmdb	r1!, {s15}
 800aa06:	68a0      	ldr	r0, [r4, #8]
 800aa08:	f1a3 0208 	sub.w	r2, r3, #8
 800aa0c:	4290      	cmp	r0, r2
 800aa0e:	f1a3 0304 	sub.w	r3, r3, #4
 800aa12:	d9ed      	bls.n	800a9f0 <nl_func_relu_array_f32+0x20>
 800aa14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa18:	4770      	bx	lr
 800aa1a:	bf00      	nop
 800aa1c:	00000000 	.word	0x00000000

0800aa20 <nl_func_sm_array_f32>:
 800aa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa24:	ed2d 8b04 	vpush	{d8-d9}
 800aa28:	b089      	sub	sp, #36	; 0x24
 800aa2a:	698f      	ldr	r7, [r1, #24]
 800aa2c:	6984      	ldr	r4, [r0, #24]
 800aa2e:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 800aa32:	68bd      	ldr	r5, [r7, #8]
 800aa34:	9402      	str	r4, [sp, #8]
 800aa36:	4626      	mov	r6, r4
 800aa38:	4696      	mov	lr, r2
 800aa3a:	eba2 020c 	sub.w	r2, r2, ip
 800aa3e:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800aa42:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	68b6      	ldr	r6, [r6, #8]
 800aa48:	ebae 0e04 	sub.w	lr, lr, r4
 800aa4c:	4295      	cmp	r5, r2
 800aa4e:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 800aa52:	d354      	bcc.n	800aafe <nl_func_sm_array_f32+0xde>
 800aa54:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800aa58:	f1cc 0200 	rsb	r2, ip, #0
 800aa5c:	00a4      	lsls	r4, r4, #2
 800aa5e:	e9cd 1006 	strd	r1, r0, [sp, #24]
 800aa62:	9303      	str	r3, [sp, #12]
 800aa64:	9204      	str	r2, [sp, #16]
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	4262      	negs	r2, r4
 800aa6a:	9205      	str	r2, [sp, #20]
 800aa6c:	9301      	str	r3, [sp, #4]
 800aa6e:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800aa72:	9b02      	ldr	r3, [sp, #8]
 800aa74:	9a07      	ldr	r2, [sp, #28]
 800aa76:	60bd      	str	r5, [r7, #8]
 800aa78:	609e      	str	r6, [r3, #8]
 800aa7a:	9b06      	ldr	r3, [sp, #24]
 800aa7c:	6992      	ldr	r2, [r2, #24]
 800aa7e:	699b      	ldr	r3, [r3, #24]
 800aa80:	6894      	ldr	r4, [r2, #8]
 800aa82:	9a03      	ldr	r2, [sp, #12]
 800aa84:	689b      	ldr	r3, [r3, #8]
 800aa86:	2a01      	cmp	r2, #1
 800aa88:	ed93 8a00 	vldr	s16, [r3]
 800aa8c:	d940      	bls.n	800ab10 <nl_func_sm_array_f32+0xf0>
 800aa8e:	9901      	ldr	r1, [sp, #4]
 800aa90:	1d1a      	adds	r2, r3, #4
 800aa92:	eb03 0b01 	add.w	fp, r3, r1
 800aa96:	ecf2 7a01 	vldmia	r2!, {s15}
 800aa9a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800aa9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaa2:	bfb8      	it	lt
 800aaa4:	eeb0 8a67 	vmovlt.f32	s16, s15
 800aaa8:	4593      	cmp	fp, r2
 800aaaa:	d1f4      	bne.n	800aa96 <nl_func_sm_array_f32+0x76>
 800aaac:	eddf 8a1b 	vldr	s17, [pc, #108]	; 800ab1c <nl_func_sm_array_f32+0xfc>
 800aab0:	469a      	mov	sl, r3
 800aab2:	46a1      	mov	r9, r4
 800aab4:	46a0      	mov	r8, r4
 800aab6:	ecba 0a01 	vldmia	sl!, {s0}
 800aaba:	ee30 0a48 	vsub.f32	s0, s0, s16
 800aabe:	f005 f811 	bl	800fae4 <expf>
 800aac2:	45d3      	cmp	fp, sl
 800aac4:	eca8 0a01 	vstmia	r8!, {s0}
 800aac8:	ee78 8a80 	vadd.f32	s17, s17, s0
 800aacc:	d1f3      	bne.n	800aab6 <nl_func_sm_array_f32+0x96>
 800aace:	eef5 8a40 	vcmp.f32	s17, #0.0
 800aad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aad6:	d00b      	beq.n	800aaf0 <nl_func_sm_array_f32+0xd0>
 800aad8:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800aadc:	9b01      	ldr	r3, [sp, #4]
 800aade:	441c      	add	r4, r3
 800aae0:	edd9 7a00 	vldr	s15, [r9]
 800aae4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aae8:	ece9 7a01 	vstmia	r9!, {s15}
 800aaec:	454c      	cmp	r4, r9
 800aaee:	d1f7      	bne.n	800aae0 <nl_func_sm_array_f32+0xc0>
 800aaf0:	9b04      	ldr	r3, [sp, #16]
 800aaf2:	68fa      	ldr	r2, [r7, #12]
 800aaf4:	441d      	add	r5, r3
 800aaf6:	9b05      	ldr	r3, [sp, #20]
 800aaf8:	42aa      	cmp	r2, r5
 800aafa:	441e      	add	r6, r3
 800aafc:	d9b9      	bls.n	800aa72 <nl_func_sm_array_f32+0x52>
 800aafe:	60ba      	str	r2, [r7, #8]
 800ab00:	9a02      	ldr	r2, [sp, #8]
 800ab02:	68d3      	ldr	r3, [r2, #12]
 800ab04:	6093      	str	r3, [r2, #8]
 800ab06:	b009      	add	sp, #36	; 0x24
 800ab08:	ecbd 8b04 	vpop	{d8-d9}
 800ab0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab10:	2a00      	cmp	r2, #0
 800ab12:	d0ed      	beq.n	800aaf0 <nl_func_sm_array_f32+0xd0>
 800ab14:	9a01      	ldr	r2, [sp, #4]
 800ab16:	eb03 0b02 	add.w	fp, r3, r2
 800ab1a:	e7c7      	b.n	800aaac <nl_func_sm_array_f32+0x8c>
 800ab1c:	00000000 	.word	0x00000000

0800ab20 <nl_func_relu_generic_array_f32>:
 800ab20:	b430      	push	{r4, r5}
 800ab22:	6989      	ldr	r1, [r1, #24]
 800ab24:	6980      	ldr	r0, [r0, #24]
 800ab26:	edd3 6a02 	vldr	s13, [r3, #8]
 800ab2a:	688c      	ldr	r4, [r1, #8]
 800ab2c:	6880      	ldr	r0, [r0, #8]
 800ab2e:	ed93 7a00 	vldr	s14, [r3]
 800ab32:	ed93 6a01 	vldr	s12, [r3, #4]
 800ab36:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800ab3a:	3a01      	subs	r2, #1
 800ab3c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ab40:	0092      	lsls	r2, r2, #2
 800ab42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab46:	4410      	add	r0, r2
 800ab48:	4422      	add	r2, r4
 800ab4a:	d421      	bmi.n	800ab90 <nl_func_relu_generic_array_f32+0x70>
 800ab4c:	4294      	cmp	r4, r2
 800ab4e:	d83d      	bhi.n	800abcc <nl_func_relu_generic_array_f32+0xac>
 800ab50:	1d13      	adds	r3, r2, #4
 800ab52:	1d02      	adds	r2, r0, #4
 800ab54:	e010      	b.n	800ab78 <nl_func_relu_generic_array_f32+0x58>
 800ab56:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab5e:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800ab62:	d501      	bpl.n	800ab68 <nl_func_relu_generic_array_f32+0x48>
 800ab64:	ee65 7a86 	vmul.f32	s15, s11, s12
 800ab68:	ed62 7a01 	vstmdb	r2!, {s15}
 800ab6c:	6888      	ldr	r0, [r1, #8]
 800ab6e:	f1a3 0408 	sub.w	r4, r3, #8
 800ab72:	4284      	cmp	r4, r0
 800ab74:	462b      	mov	r3, r5
 800ab76:	d329      	bcc.n	800abcc <nl_func_relu_generic_array_f32+0xac>
 800ab78:	ed53 7a01 	vldr	s15, [r3, #-4]
 800ab7c:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ab80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab84:	f1a3 0504 	sub.w	r5, r3, #4
 800ab88:	d4e5      	bmi.n	800ab56 <nl_func_relu_generic_array_f32+0x36>
 800ab8a:	eef0 7a66 	vmov.f32	s15, s13
 800ab8e:	e7eb      	b.n	800ab68 <nl_func_relu_generic_array_f32+0x48>
 800ab90:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800ab94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab98:	d01a      	beq.n	800abd0 <nl_func_relu_generic_array_f32+0xb0>
 800ab9a:	4294      	cmp	r4, r2
 800ab9c:	d816      	bhi.n	800abcc <nl_func_relu_generic_array_f32+0xac>
 800ab9e:	1d13      	adds	r3, r2, #4
 800aba0:	1d02      	adds	r2, r0, #4
 800aba2:	ed53 7a01 	vldr	s15, [r3, #-4]
 800aba6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800abaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abae:	f1a3 0408 	sub.w	r4, r3, #8
 800abb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abb6:	f1a3 0004 	sub.w	r0, r3, #4
 800abba:	ee66 6a86 	vmul.f32	s13, s13, s12
 800abbe:	4623      	mov	r3, r4
 800abc0:	d51e      	bpl.n	800ac00 <nl_func_relu_generic_array_f32+0xe0>
 800abc2:	ed62 6a01 	vstmdb	r2!, {s13}
 800abc6:	688b      	ldr	r3, [r1, #8]
 800abc8:	42a3      	cmp	r3, r4
 800abca:	d91e      	bls.n	800ac0a <nl_func_relu_generic_array_f32+0xea>
 800abcc:	bc30      	pop	{r4, r5}
 800abce:	4770      	bx	lr
 800abd0:	4294      	cmp	r4, r2
 800abd2:	d8fb      	bhi.n	800abcc <nl_func_relu_generic_array_f32+0xac>
 800abd4:	1d13      	adds	r3, r2, #4
 800abd6:	2500      	movs	r5, #0
 800abd8:	1d02      	adds	r2, r0, #4
 800abda:	ed53 7a01 	vldr	s15, [r3, #-4]
 800abde:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abe2:	f1a3 0408 	sub.w	r4, r3, #8
 800abe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abea:	f1a3 0004 	sub.w	r0, r3, #4
 800abee:	4623      	mov	r3, r4
 800abf0:	db0d      	blt.n	800ac0e <nl_func_relu_generic_array_f32+0xee>
 800abf2:	ed62 7a01 	vstmdb	r2!, {s15}
 800abf6:	688b      	ldr	r3, [r1, #8]
 800abf8:	42a3      	cmp	r3, r4
 800abfa:	d8e7      	bhi.n	800abcc <nl_func_relu_generic_array_f32+0xac>
 800abfc:	4603      	mov	r3, r0
 800abfe:	e7ec      	b.n	800abda <nl_func_relu_generic_array_f32+0xba>
 800ac00:	ed62 7a01 	vstmdb	r2!, {s15}
 800ac04:	688c      	ldr	r4, [r1, #8]
 800ac06:	429c      	cmp	r4, r3
 800ac08:	d8e0      	bhi.n	800abcc <nl_func_relu_generic_array_f32+0xac>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	e7c9      	b.n	800aba2 <nl_func_relu_generic_array_f32+0x82>
 800ac0e:	f842 5d04 	str.w	r5, [r2, #-4]!
 800ac12:	688c      	ldr	r4, [r1, #8]
 800ac14:	429c      	cmp	r4, r3
 800ac16:	d8d9      	bhi.n	800abcc <nl_func_relu_generic_array_f32+0xac>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	e7de      	b.n	800abda <nl_func_relu_generic_array_f32+0xba>

0800ac1c <forward_relu>:
 800ac1c:	6982      	ldr	r2, [r0, #24]
 800ac1e:	8813      	ldrh	r3, [r2, #0]
 800ac20:	b333      	cbz	r3, 800ac70 <forward_relu+0x54>
 800ac22:	6852      	ldr	r2, [r2, #4]
 800ac24:	6851      	ldr	r1, [r2, #4]
 800ac26:	b101      	cbz	r1, 800ac2a <forward_relu+0xe>
 800ac28:	6809      	ldr	r1, [r1, #0]
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d91d      	bls.n	800ac6a <forward_relu+0x4e>
 800ac2e:	b4f0      	push	{r4, r5, r6, r7}
 800ac30:	6917      	ldr	r7, [r2, #16]
 800ac32:	b107      	cbz	r7, 800ac36 <forward_relu+0x1a>
 800ac34:	683f      	ldr	r7, [r7, #0]
 800ac36:	688c      	ldr	r4, [r1, #8]
 800ac38:	69c3      	ldr	r3, [r0, #28]
 800ac3a:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d044      	beq.n	800accc <forward_relu+0xb0>
 800ac42:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 800ac46:	2d01      	cmp	r5, #1
 800ac48:	d014      	beq.n	800ac74 <forward_relu+0x58>
 800ac4a:	2c00      	cmp	r4, #0
 800ac4c:	d074      	beq.n	800ad38 <forward_relu+0x11c>
 800ac4e:	68ce      	ldr	r6, [r1, #12]
 800ac50:	2201      	movs	r2, #1
 800ac52:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800ac56:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ac5a:	42a6      	cmp	r6, r4
 800ac5c:	fb05 f202 	mul.w	r2, r5, r2
 800ac60:	d1f9      	bne.n	800ac56 <forward_relu+0x3a>
 800ac62:	4638      	mov	r0, r7
 800ac64:	bcf0      	pop	{r4, r5, r6, r7}
 800ac66:	f7ff bf5b 	b.w	800ab20 <nl_func_relu_generic_array_f32>
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	deff      	udf	#255	; 0xff
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	deff      	udf	#255	; 0xff
 800ac74:	69ba      	ldr	r2, [r7, #24]
 800ac76:	6988      	ldr	r0, [r1, #24]
 800ac78:	6896      	ldr	r6, [r2, #8]
 800ac7a:	ed93 7a00 	vldr	s14, [r3]
 800ac7e:	6882      	ldr	r2, [r0, #8]
 800ac80:	b184      	cbz	r4, 800aca4 <forward_relu+0x88>
 800ac82:	68cf      	ldr	r7, [r1, #12]
 800ac84:	462b      	mov	r3, r5
 800ac86:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800ac8a:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800ac8e:	42a7      	cmp	r7, r4
 800ac90:	fb01 f303 	mul.w	r3, r1, r3
 800ac94:	d1f9      	bne.n	800ac8a <forward_relu+0x6e>
 800ac96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ac9a:	3b01      	subs	r3, #1
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	18d2      	adds	r2, r2, r3
 800aca0:	441e      	add	r6, r3
 800aca2:	d23f      	bcs.n	800ad24 <forward_relu+0x108>
 800aca4:	1d13      	adds	r3, r2, #4
 800aca6:	2500      	movs	r5, #0
 800aca8:	1d32      	adds	r2, r6, #4
 800acaa:	ed53 7a01 	vldr	s15, [r3, #-4]
 800acae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800acb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acb6:	f1a3 0104 	sub.w	r1, r3, #4
 800acba:	d835      	bhi.n	800ad28 <forward_relu+0x10c>
 800acbc:	ed62 7a01 	vstmdb	r2!, {s15}
 800acc0:	6884      	ldr	r4, [r0, #8]
 800acc2:	3b08      	subs	r3, #8
 800acc4:	429c      	cmp	r4, r3
 800acc6:	d82d      	bhi.n	800ad24 <forward_relu+0x108>
 800acc8:	460b      	mov	r3, r1
 800acca:	e7ee      	b.n	800acaa <forward_relu+0x8e>
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	698d      	ldr	r5, [r1, #24]
 800acd0:	6898      	ldr	r0, [r3, #8]
 800acd2:	68ab      	ldr	r3, [r5, #8]
 800acd4:	b184      	cbz	r4, 800acf8 <forward_relu+0xdc>
 800acd6:	68ce      	ldr	r6, [r1, #12]
 800acd8:	2201      	movs	r2, #1
 800acda:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800acde:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800ace2:	42a6      	cmp	r6, r4
 800ace4:	fb01 f202 	mul.w	r2, r1, r2
 800ace8:	d1f9      	bne.n	800acde <forward_relu+0xc2>
 800acea:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800acee:	3a01      	subs	r2, #1
 800acf0:	0092      	lsls	r2, r2, #2
 800acf2:	189b      	adds	r3, r3, r2
 800acf4:	4410      	add	r0, r2
 800acf6:	d215      	bcs.n	800ad24 <forward_relu+0x108>
 800acf8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800ad3c <forward_relu+0x120>
 800acfc:	3304      	adds	r3, #4
 800acfe:	1d01      	adds	r1, r0, #4
 800ad00:	ed53 7a01 	vldr	s15, [r3, #-4]
 800ad04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ad08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad0c:	bfb8      	it	lt
 800ad0e:	eef0 7a47 	vmovlt.f32	s15, s14
 800ad12:	ed61 7a01 	vstmdb	r1!, {s15}
 800ad16:	68a8      	ldr	r0, [r5, #8]
 800ad18:	f1a3 0208 	sub.w	r2, r3, #8
 800ad1c:	4290      	cmp	r0, r2
 800ad1e:	f1a3 0304 	sub.w	r3, r3, #4
 800ad22:	d9ed      	bls.n	800ad00 <forward_relu+0xe4>
 800ad24:	bcf0      	pop	{r4, r5, r6, r7}
 800ad26:	4770      	bx	lr
 800ad28:	f842 5d04 	str.w	r5, [r2, #-4]!
 800ad2c:	6884      	ldr	r4, [r0, #8]
 800ad2e:	3b08      	subs	r3, #8
 800ad30:	429c      	cmp	r4, r3
 800ad32:	d8f7      	bhi.n	800ad24 <forward_relu+0x108>
 800ad34:	460b      	mov	r3, r1
 800ad36:	e7b8      	b.n	800acaa <forward_relu+0x8e>
 800ad38:	2201      	movs	r2, #1
 800ad3a:	e792      	b.n	800ac62 <forward_relu+0x46>
 800ad3c:	00000000 	.word	0x00000000

0800ad40 <forward_sm>:
 800ad40:	6982      	ldr	r2, [r0, #24]
 800ad42:	8813      	ldrh	r3, [r2, #0]
 800ad44:	b32b      	cbz	r3, 800ad92 <forward_sm+0x52>
 800ad46:	6852      	ldr	r2, [r2, #4]
 800ad48:	6851      	ldr	r1, [r2, #4]
 800ad4a:	b101      	cbz	r1, 800ad4e <forward_sm+0xe>
 800ad4c:	6809      	ldr	r1, [r1, #0]
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d91c      	bls.n	800ad8c <forward_sm+0x4c>
 800ad52:	6913      	ldr	r3, [r2, #16]
 800ad54:	b1c3      	cbz	r3, 800ad88 <forward_sm+0x48>
 800ad56:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad58:	6818      	ldr	r0, [r3, #0]
 800ad5a:	688c      	ldr	r4, [r1, #8]
 800ad5c:	68c3      	ldr	r3, [r0, #12]
 800ad5e:	68ce      	ldr	r6, [r1, #12]
 800ad60:	685f      	ldr	r7, [r3, #4]
 800ad62:	6873      	ldr	r3, [r6, #4]
 800ad64:	0a24      	lsrs	r4, r4, #8
 800ad66:	b083      	sub	sp, #12
 800ad68:	d015      	beq.n	800ad96 <forward_sm+0x56>
 800ad6a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800ad6e:	2201      	movs	r2, #1
 800ad70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ad74:	42a6      	cmp	r6, r4
 800ad76:	fb05 f202 	mul.w	r2, r5, r2
 800ad7a:	d1f9      	bne.n	800ad70 <forward_sm+0x30>
 800ad7c:	e9cd 3700 	strd	r3, r7, [sp]
 800ad80:	f7ff fe4e 	bl	800aa20 <nl_func_sm_array_f32>
 800ad84:	b003      	add	sp, #12
 800ad86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad88:	68db      	ldr	r3, [r3, #12]
 800ad8a:	deff      	udf	#255	; 0xff
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	deff      	udf	#255	; 0xff
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	deff      	udf	#255	; 0xff
 800ad96:	2201      	movs	r2, #1
 800ad98:	e9cd 3700 	strd	r3, r7, [sp]
 800ad9c:	f7ff fe40 	bl	800aa20 <nl_func_sm_array_f32>
 800ada0:	b003      	add	sp, #12
 800ada2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ada4 <ai_check_custom_types>:
 800ada4:	4b13      	ldr	r3, [pc, #76]	; (800adf4 <ai_check_custom_types+0x50>)
 800ada6:	b082      	sub	sp, #8
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	9301      	str	r3, [sp, #4]
 800adac:	b118      	cbz	r0, 800adb6 <ai_check_custom_types+0x12>
 800adae:	7803      	ldrb	r3, [r0, #0]
 800adb0:	2b03      	cmp	r3, #3
 800adb2:	d002      	beq.n	800adba <ai_check_custom_types+0x16>
 800adb4:	2000      	movs	r0, #0
 800adb6:	b002      	add	sp, #8
 800adb8:	4770      	bx	lr
 800adba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d004      	beq.n	800adcc <ai_check_custom_types+0x28>
 800adc2:	2001      	movs	r0, #1
 800adc4:	f080 0001 	eor.w	r0, r0, #1
 800adc8:	b002      	add	sp, #8
 800adca:	4770      	bx	lr
 800adcc:	7842      	ldrb	r2, [r0, #1]
 800adce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800add2:	429a      	cmp	r2, r3
 800add4:	f100 0001 	add.w	r0, r0, #1
 800add8:	d1f3      	bne.n	800adc2 <ai_check_custom_types+0x1e>
 800adda:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800adde:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d1ed      	bne.n	800adc2 <ai_check_custom_types+0x1e>
 800ade6:	7842      	ldrb	r2, [r0, #1]
 800ade8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800adec:	429a      	cmp	r2, r3
 800adee:	d1e8      	bne.n	800adc2 <ai_check_custom_types+0x1e>
 800adf0:	2000      	movs	r0, #0
 800adf2:	e7e7      	b.n	800adc4 <ai_check_custom_types+0x20>
 800adf4:	0801002c 	.word	0x0801002c

0800adf8 <ai_layers_init_all>:
 800adf8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800adfa:	b17a      	cbz	r2, 800ae1c <ai_layers_init_all+0x24>
 800adfc:	6913      	ldr	r3, [r2, #16]
 800adfe:	60d0      	str	r0, [r2, #12]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	f04f 0201 	mov.w	r2, #1
 800ae06:	d009      	beq.n	800ae1c <ai_layers_init_all+0x24>
 800ae08:	b143      	cbz	r3, 800ae1c <ai_layers_init_all+0x24>
 800ae0a:	6919      	ldr	r1, [r3, #16]
 800ae0c:	60d8      	str	r0, [r3, #12]
 800ae0e:	4299      	cmp	r1, r3
 800ae10:	f102 0201 	add.w	r2, r2, #1
 800ae14:	d002      	beq.n	800ae1c <ai_layers_init_all+0x24>
 800ae16:	460b      	mov	r3, r1
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d1f6      	bne.n	800ae0a <ai_layers_init_all+0x12>
 800ae1c:	4610      	mov	r0, r2
 800ae1e:	4770      	bx	lr

0800ae20 <ai_layers_post_init_all>:
 800ae20:	b538      	push	{r3, r4, r5, lr}
 800ae22:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800ae24:	b18c      	cbz	r4, 800ae4a <ai_layers_post_init_all+0x2a>
 800ae26:	2500      	movs	r5, #0
 800ae28:	6863      	ldr	r3, [r4, #4]
 800ae2a:	f013 0f01 	tst.w	r3, #1
 800ae2e:	4620      	mov	r0, r4
 800ae30:	d003      	beq.n	800ae3a <ai_layers_post_init_all+0x1a>
 800ae32:	6a23      	ldr	r3, [r4, #32]
 800ae34:	b10b      	cbz	r3, 800ae3a <ai_layers_post_init_all+0x1a>
 800ae36:	4798      	blx	r3
 800ae38:	3501      	adds	r5, #1
 800ae3a:	6923      	ldr	r3, [r4, #16]
 800ae3c:	42a3      	cmp	r3, r4
 800ae3e:	d002      	beq.n	800ae46 <ai_layers_post_init_all+0x26>
 800ae40:	461c      	mov	r4, r3
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d1f0      	bne.n	800ae28 <ai_layers_post_init_all+0x8>
 800ae46:	4628      	mov	r0, r5
 800ae48:	bd38      	pop	{r3, r4, r5, pc}
 800ae4a:	4625      	mov	r5, r4
 800ae4c:	e7fb      	b.n	800ae46 <ai_layers_post_init_all+0x26>
 800ae4e:	bf00      	nop

0800ae50 <ai_layers_forward_all>:
 800ae50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae54:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800ae56:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800ae58:	4604      	mov	r4, r0
 800ae5a:	2f00      	cmp	r7, #0
 800ae5c:	d02c      	beq.n	800aeb8 <ai_layers_forward_all+0x68>
 800ae5e:	2d00      	cmp	r5, #0
 800ae60:	d03f      	beq.n	800aee2 <ai_layers_forward_all+0x92>
 800ae62:	6385      	str	r5, [r0, #56]	; 0x38
 800ae64:	4629      	mov	r1, r5
 800ae66:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ae68:	2001      	movs	r0, #1
 800ae6a:	47b8      	blx	r7
 800ae6c:	2600      	movs	r6, #0
 800ae6e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ae70:	46b0      	mov	r8, r6
 800ae72:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ae74:	2002      	movs	r0, #2
 800ae76:	47b8      	blx	r7
 800ae78:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800ae7a:	696b      	ldr	r3, [r5, #20]
 800ae7c:	4628      	mov	r0, r5
 800ae7e:	4798      	blx	r3
 800ae80:	692b      	ldr	r3, [r5, #16]
 800ae82:	429d      	cmp	r5, r3
 800ae84:	f04f 0003 	mov.w	r0, #3
 800ae88:	4619      	mov	r1, r3
 800ae8a:	d009      	beq.n	800aea0 <ai_layers_forward_all+0x50>
 800ae8c:	63a3      	str	r3, [r4, #56]	; 0x38
 800ae8e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ae90:	47b8      	blx	r7
 800ae92:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ae94:	3601      	adds	r6, #1
 800ae96:	2900      	cmp	r1, #0
 800ae98:	d1eb      	bne.n	800ae72 <ai_layers_forward_all+0x22>
 800ae9a:	4630      	mov	r0, r6
 800ae9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aea0:	2100      	movs	r1, #0
 800aea2:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800aea6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800aea8:	47b8      	blx	r7
 800aeaa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800aeac:	3601      	adds	r6, #1
 800aeae:	2900      	cmp	r1, #0
 800aeb0:	d1df      	bne.n	800ae72 <ai_layers_forward_all+0x22>
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeb8:	b19d      	cbz	r5, 800aee2 <ai_layers_forward_all+0x92>
 800aeba:	6385      	str	r5, [r0, #56]	; 0x38
 800aebc:	463e      	mov	r6, r7
 800aebe:	696b      	ldr	r3, [r5, #20]
 800aec0:	4628      	mov	r0, r5
 800aec2:	4798      	blx	r3
 800aec4:	692b      	ldr	r3, [r5, #16]
 800aec6:	42ab      	cmp	r3, r5
 800aec8:	f106 0601 	add.w	r6, r6, #1
 800aecc:	d004      	beq.n	800aed8 <ai_layers_forward_all+0x88>
 800aece:	63a3      	str	r3, [r4, #56]	; 0x38
 800aed0:	461d      	mov	r5, r3
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d1f3      	bne.n	800aebe <ai_layers_forward_all+0x6e>
 800aed6:	e7e0      	b.n	800ae9a <ai_layers_forward_all+0x4a>
 800aed8:	2300      	movs	r3, #0
 800aeda:	63a3      	str	r3, [r4, #56]	; 0x38
 800aedc:	4630      	mov	r0, r6
 800aede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aee2:	462e      	mov	r6, r5
 800aee4:	4630      	mov	r0, r6
 800aee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeea:	bf00      	nop

0800aeec <ai_version_get>:
 800aeec:	0212      	lsls	r2, r2, #8
 800aeee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800aef2:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800aef6:	4770      	bx	lr

0800aef8 <get_tensor_byte_size>:
 800aef8:	6983      	ldr	r3, [r0, #24]
 800aefa:	68c1      	ldr	r1, [r0, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	6940      	ldr	r0, [r0, #20]
 800af00:	4a06      	ldr	r2, [pc, #24]	; (800af1c <get_tensor_byte_size+0x24>)
 800af02:	68c9      	ldr	r1, [r1, #12]
 800af04:	68c0      	ldr	r0, [r0, #12]
 800af06:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800af0a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800af0e:	fb00 f001 	mul.w	r0, r0, r1
 800af12:	4293      	cmp	r3, r2
 800af14:	bf04      	itt	eq
 800af16:	3007      	addeq	r0, #7
 800af18:	08c0      	lsreq	r0, r0, #3
 800af1a:	4770      	bx	lr
 800af1c:	000400c0 	.word	0x000400c0

0800af20 <ai_array_to_buffer_fmt>:
 800af20:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800af24:	2b02      	cmp	r3, #2
 800af26:	d036      	beq.n	800af96 <ai_array_to_buffer_fmt+0x76>
 800af28:	4a21      	ldr	r2, [pc, #132]	; (800afb0 <ai_array_to_buffer_fmt+0x90>)
 800af2a:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800af2e:	4293      	cmp	r3, r2
 800af30:	d00f      	beq.n	800af52 <ai_array_to_buffer_fmt+0x32>
 800af32:	dd12      	ble.n	800af5a <ai_array_to_buffer_fmt+0x3a>
 800af34:	4a1f      	ldr	r2, [pc, #124]	; (800afb4 <ai_array_to_buffer_fmt+0x94>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d00b      	beq.n	800af52 <ai_array_to_buffer_fmt+0x32>
 800af3a:	dd1e      	ble.n	800af7a <ai_array_to_buffer_fmt+0x5a>
 800af3c:	4a1e      	ldr	r2, [pc, #120]	; (800afb8 <ai_array_to_buffer_fmt+0x98>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d007      	beq.n	800af52 <ai_array_to_buffer_fmt+0x32>
 800af42:	dd30      	ble.n	800afa6 <ai_array_to_buffer_fmt+0x86>
 800af44:	4a1d      	ldr	r2, [pc, #116]	; (800afbc <ai_array_to_buffer_fmt+0x9c>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d003      	beq.n	800af52 <ai_array_to_buffer_fmt+0x32>
 800af4a:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 800af4e:	4293      	cmp	r3, r2
 800af50:	d11f      	bne.n	800af92 <ai_array_to_buffer_fmt+0x72>
 800af52:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800af56:	4318      	orrs	r0, r3
 800af58:	4770      	bx	lr
 800af5a:	4a19      	ldr	r2, [pc, #100]	; (800afc0 <ai_array_to_buffer_fmt+0xa0>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d0f8      	beq.n	800af52 <ai_array_to_buffer_fmt+0x32>
 800af60:	dd0b      	ble.n	800af7a <ai_array_to_buffer_fmt+0x5a>
 800af62:	4a18      	ldr	r2, [pc, #96]	; (800afc4 <ai_array_to_buffer_fmt+0xa4>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d0f4      	beq.n	800af52 <ai_array_to_buffer_fmt+0x32>
 800af68:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d0f0      	beq.n	800af52 <ai_array_to_buffer_fmt+0x32>
 800af70:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800af74:	4293      	cmp	r3, r2
 800af76:	d10c      	bne.n	800af92 <ai_array_to_buffer_fmt+0x72>
 800af78:	e7eb      	b.n	800af52 <ai_array_to_buffer_fmt+0x32>
 800af7a:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 800af7e:	4293      	cmp	r3, r2
 800af80:	d0e7      	beq.n	800af52 <ai_array_to_buffer_fmt+0x32>
 800af82:	f502 7260 	add.w	r2, r2, #896	; 0x380
 800af86:	4293      	cmp	r3, r2
 800af88:	d0e3      	beq.n	800af52 <ai_array_to_buffer_fmt+0x32>
 800af8a:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800af8e:	4293      	cmp	r3, r2
 800af90:	d0df      	beq.n	800af52 <ai_array_to_buffer_fmt+0x32>
 800af92:	2340      	movs	r3, #64	; 0x40
 800af94:	e7dd      	b.n	800af52 <ai_array_to_buffer_fmt+0x32>
 800af96:	4b0c      	ldr	r3, [pc, #48]	; (800afc8 <ai_array_to_buffer_fmt+0xa8>)
 800af98:	4003      	ands	r3, r0
 800af9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af9e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800afa2:	4318      	orrs	r0, r3
 800afa4:	4770      	bx	lr
 800afa6:	3a0f      	subs	r2, #15
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d0d2      	beq.n	800af52 <ai_array_to_buffer_fmt+0x32>
 800afac:	e7f1      	b.n	800af92 <ai_array_to_buffer_fmt+0x72>
 800afae:	bf00      	nop
 800afb0:	00060440 	.word	0x00060440
 800afb4:	00840447 	.word	0x00840447
 800afb8:	0084084f 	.word	0x0084084f
 800afbc:	00841040 	.word	0x00841040
 800afc0:	00040447 	.word	0x00040447
 800afc4:	0004084f 	.word	0x0004084f
 800afc8:	00803fff 	.word	0x00803fff

0800afcc <ai_array_get_byte_size>:
 800afcc:	b1c1      	cbz	r1, 800b000 <ai_array_get_byte_size+0x34>
 800afce:	11c3      	asrs	r3, r0, #7
 800afd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afd4:	fb01 f102 	mul.w	r1, r1, r2
 800afd8:	3107      	adds	r1, #7
 800afda:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800afde:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800afe2:	f021 0107 	bic.w	r1, r1, #7
 800afe6:	2804      	cmp	r0, #4
 800afe8:	fa21 f102 	lsr.w	r1, r1, r2
 800afec:	d00a      	beq.n	800b004 <ai_array_get_byte_size+0x38>
 800afee:	2808      	cmp	r0, #8
 800aff0:	d103      	bne.n	800affa <ai_array_get_byte_size+0x2e>
 800aff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aff6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800affa:	3107      	adds	r1, #7
 800affc:	08c8      	lsrs	r0, r1, #3
 800affe:	4770      	bx	lr
 800b000:	4608      	mov	r0, r1
 800b002:	4770      	bx	lr
 800b004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b008:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800b00c:	3107      	adds	r1, #7
 800b00e:	08c8      	lsrs	r0, r1, #3
 800b010:	4770      	bx	lr
 800b012:	bf00      	nop

0800b014 <ai_array_get_data_byte_size>:
 800b014:	b161      	cbz	r1, 800b030 <ai_array_get_data_byte_size+0x1c>
 800b016:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800b01a:	fb01 f103 	mul.w	r1, r1, r3
 800b01e:	3107      	adds	r1, #7
 800b020:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800b024:	f021 0107 	bic.w	r1, r1, #7
 800b028:	40c1      	lsrs	r1, r0
 800b02a:	3107      	adds	r1, #7
 800b02c:	08c8      	lsrs	r0, r1, #3
 800b02e:	4770      	bx	lr
 800b030:	4608      	mov	r0, r1
 800b032:	4770      	bx	lr

0800b034 <__errno>:
 800b034:	4b01      	ldr	r3, [pc, #4]	; (800b03c <__errno+0x8>)
 800b036:	6818      	ldr	r0, [r3, #0]
 800b038:	4770      	bx	lr
 800b03a:	bf00      	nop
 800b03c:	200008e0 	.word	0x200008e0

0800b040 <__libc_init_array>:
 800b040:	b570      	push	{r4, r5, r6, lr}
 800b042:	4d0d      	ldr	r5, [pc, #52]	; (800b078 <__libc_init_array+0x38>)
 800b044:	4c0d      	ldr	r4, [pc, #52]	; (800b07c <__libc_init_array+0x3c>)
 800b046:	1b64      	subs	r4, r4, r5
 800b048:	10a4      	asrs	r4, r4, #2
 800b04a:	2600      	movs	r6, #0
 800b04c:	42a6      	cmp	r6, r4
 800b04e:	d109      	bne.n	800b064 <__libc_init_array+0x24>
 800b050:	4d0b      	ldr	r5, [pc, #44]	; (800b080 <__libc_init_array+0x40>)
 800b052:	4c0c      	ldr	r4, [pc, #48]	; (800b084 <__libc_init_array+0x44>)
 800b054:	f004 ff66 	bl	800ff24 <_init>
 800b058:	1b64      	subs	r4, r4, r5
 800b05a:	10a4      	asrs	r4, r4, #2
 800b05c:	2600      	movs	r6, #0
 800b05e:	42a6      	cmp	r6, r4
 800b060:	d105      	bne.n	800b06e <__libc_init_array+0x2e>
 800b062:	bd70      	pop	{r4, r5, r6, pc}
 800b064:	f855 3b04 	ldr.w	r3, [r5], #4
 800b068:	4798      	blx	r3
 800b06a:	3601      	adds	r6, #1
 800b06c:	e7ee      	b.n	800b04c <__libc_init_array+0xc>
 800b06e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b072:	4798      	blx	r3
 800b074:	3601      	adds	r6, #1
 800b076:	e7f2      	b.n	800b05e <__libc_init_array+0x1e>
 800b078:	080af36c 	.word	0x080af36c
 800b07c:	080af36c 	.word	0x080af36c
 800b080:	080af36c 	.word	0x080af36c
 800b084:	080af370 	.word	0x080af370

0800b088 <malloc>:
 800b088:	4b02      	ldr	r3, [pc, #8]	; (800b094 <malloc+0xc>)
 800b08a:	4601      	mov	r1, r0
 800b08c:	6818      	ldr	r0, [r3, #0]
 800b08e:	f000 b885 	b.w	800b19c <_malloc_r>
 800b092:	bf00      	nop
 800b094:	200008e0 	.word	0x200008e0

0800b098 <memcpy>:
 800b098:	440a      	add	r2, r1
 800b09a:	4291      	cmp	r1, r2
 800b09c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b0a0:	d100      	bne.n	800b0a4 <memcpy+0xc>
 800b0a2:	4770      	bx	lr
 800b0a4:	b510      	push	{r4, lr}
 800b0a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0ae:	4291      	cmp	r1, r2
 800b0b0:	d1f9      	bne.n	800b0a6 <memcpy+0xe>
 800b0b2:	bd10      	pop	{r4, pc}

0800b0b4 <memset>:
 800b0b4:	4402      	add	r2, r0
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d100      	bne.n	800b0be <memset+0xa>
 800b0bc:	4770      	bx	lr
 800b0be:	f803 1b01 	strb.w	r1, [r3], #1
 800b0c2:	e7f9      	b.n	800b0b8 <memset+0x4>

0800b0c4 <_free_r>:
 800b0c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0c6:	2900      	cmp	r1, #0
 800b0c8:	d044      	beq.n	800b154 <_free_r+0x90>
 800b0ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0ce:	9001      	str	r0, [sp, #4]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f1a1 0404 	sub.w	r4, r1, #4
 800b0d6:	bfb8      	it	lt
 800b0d8:	18e4      	addlt	r4, r4, r3
 800b0da:	f003 fb9b 	bl	800e814 <__malloc_lock>
 800b0de:	4a1e      	ldr	r2, [pc, #120]	; (800b158 <_free_r+0x94>)
 800b0e0:	9801      	ldr	r0, [sp, #4]
 800b0e2:	6813      	ldr	r3, [r2, #0]
 800b0e4:	b933      	cbnz	r3, 800b0f4 <_free_r+0x30>
 800b0e6:	6063      	str	r3, [r4, #4]
 800b0e8:	6014      	str	r4, [r2, #0]
 800b0ea:	b003      	add	sp, #12
 800b0ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0f0:	f003 bb96 	b.w	800e820 <__malloc_unlock>
 800b0f4:	42a3      	cmp	r3, r4
 800b0f6:	d908      	bls.n	800b10a <_free_r+0x46>
 800b0f8:	6825      	ldr	r5, [r4, #0]
 800b0fa:	1961      	adds	r1, r4, r5
 800b0fc:	428b      	cmp	r3, r1
 800b0fe:	bf01      	itttt	eq
 800b100:	6819      	ldreq	r1, [r3, #0]
 800b102:	685b      	ldreq	r3, [r3, #4]
 800b104:	1949      	addeq	r1, r1, r5
 800b106:	6021      	streq	r1, [r4, #0]
 800b108:	e7ed      	b.n	800b0e6 <_free_r+0x22>
 800b10a:	461a      	mov	r2, r3
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	b10b      	cbz	r3, 800b114 <_free_r+0x50>
 800b110:	42a3      	cmp	r3, r4
 800b112:	d9fa      	bls.n	800b10a <_free_r+0x46>
 800b114:	6811      	ldr	r1, [r2, #0]
 800b116:	1855      	adds	r5, r2, r1
 800b118:	42a5      	cmp	r5, r4
 800b11a:	d10b      	bne.n	800b134 <_free_r+0x70>
 800b11c:	6824      	ldr	r4, [r4, #0]
 800b11e:	4421      	add	r1, r4
 800b120:	1854      	adds	r4, r2, r1
 800b122:	42a3      	cmp	r3, r4
 800b124:	6011      	str	r1, [r2, #0]
 800b126:	d1e0      	bne.n	800b0ea <_free_r+0x26>
 800b128:	681c      	ldr	r4, [r3, #0]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	6053      	str	r3, [r2, #4]
 800b12e:	4421      	add	r1, r4
 800b130:	6011      	str	r1, [r2, #0]
 800b132:	e7da      	b.n	800b0ea <_free_r+0x26>
 800b134:	d902      	bls.n	800b13c <_free_r+0x78>
 800b136:	230c      	movs	r3, #12
 800b138:	6003      	str	r3, [r0, #0]
 800b13a:	e7d6      	b.n	800b0ea <_free_r+0x26>
 800b13c:	6825      	ldr	r5, [r4, #0]
 800b13e:	1961      	adds	r1, r4, r5
 800b140:	428b      	cmp	r3, r1
 800b142:	bf04      	itt	eq
 800b144:	6819      	ldreq	r1, [r3, #0]
 800b146:	685b      	ldreq	r3, [r3, #4]
 800b148:	6063      	str	r3, [r4, #4]
 800b14a:	bf04      	itt	eq
 800b14c:	1949      	addeq	r1, r1, r5
 800b14e:	6021      	streq	r1, [r4, #0]
 800b150:	6054      	str	r4, [r2, #4]
 800b152:	e7ca      	b.n	800b0ea <_free_r+0x26>
 800b154:	b003      	add	sp, #12
 800b156:	bd30      	pop	{r4, r5, pc}
 800b158:	2000b4e4 	.word	0x2000b4e4

0800b15c <sbrk_aligned>:
 800b15c:	b570      	push	{r4, r5, r6, lr}
 800b15e:	4e0e      	ldr	r6, [pc, #56]	; (800b198 <sbrk_aligned+0x3c>)
 800b160:	460c      	mov	r4, r1
 800b162:	6831      	ldr	r1, [r6, #0]
 800b164:	4605      	mov	r5, r0
 800b166:	b911      	cbnz	r1, 800b16e <sbrk_aligned+0x12>
 800b168:	f000 ff94 	bl	800c094 <_sbrk_r>
 800b16c:	6030      	str	r0, [r6, #0]
 800b16e:	4621      	mov	r1, r4
 800b170:	4628      	mov	r0, r5
 800b172:	f000 ff8f 	bl	800c094 <_sbrk_r>
 800b176:	1c43      	adds	r3, r0, #1
 800b178:	d00a      	beq.n	800b190 <sbrk_aligned+0x34>
 800b17a:	1cc4      	adds	r4, r0, #3
 800b17c:	f024 0403 	bic.w	r4, r4, #3
 800b180:	42a0      	cmp	r0, r4
 800b182:	d007      	beq.n	800b194 <sbrk_aligned+0x38>
 800b184:	1a21      	subs	r1, r4, r0
 800b186:	4628      	mov	r0, r5
 800b188:	f000 ff84 	bl	800c094 <_sbrk_r>
 800b18c:	3001      	adds	r0, #1
 800b18e:	d101      	bne.n	800b194 <sbrk_aligned+0x38>
 800b190:	f04f 34ff 	mov.w	r4, #4294967295
 800b194:	4620      	mov	r0, r4
 800b196:	bd70      	pop	{r4, r5, r6, pc}
 800b198:	2000b4e8 	.word	0x2000b4e8

0800b19c <_malloc_r>:
 800b19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1a0:	1ccd      	adds	r5, r1, #3
 800b1a2:	f025 0503 	bic.w	r5, r5, #3
 800b1a6:	3508      	adds	r5, #8
 800b1a8:	2d0c      	cmp	r5, #12
 800b1aa:	bf38      	it	cc
 800b1ac:	250c      	movcc	r5, #12
 800b1ae:	2d00      	cmp	r5, #0
 800b1b0:	4607      	mov	r7, r0
 800b1b2:	db01      	blt.n	800b1b8 <_malloc_r+0x1c>
 800b1b4:	42a9      	cmp	r1, r5
 800b1b6:	d905      	bls.n	800b1c4 <_malloc_r+0x28>
 800b1b8:	230c      	movs	r3, #12
 800b1ba:	603b      	str	r3, [r7, #0]
 800b1bc:	2600      	movs	r6, #0
 800b1be:	4630      	mov	r0, r6
 800b1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1c4:	4e2e      	ldr	r6, [pc, #184]	; (800b280 <_malloc_r+0xe4>)
 800b1c6:	f003 fb25 	bl	800e814 <__malloc_lock>
 800b1ca:	6833      	ldr	r3, [r6, #0]
 800b1cc:	461c      	mov	r4, r3
 800b1ce:	bb34      	cbnz	r4, 800b21e <_malloc_r+0x82>
 800b1d0:	4629      	mov	r1, r5
 800b1d2:	4638      	mov	r0, r7
 800b1d4:	f7ff ffc2 	bl	800b15c <sbrk_aligned>
 800b1d8:	1c43      	adds	r3, r0, #1
 800b1da:	4604      	mov	r4, r0
 800b1dc:	d14d      	bne.n	800b27a <_malloc_r+0xde>
 800b1de:	6834      	ldr	r4, [r6, #0]
 800b1e0:	4626      	mov	r6, r4
 800b1e2:	2e00      	cmp	r6, #0
 800b1e4:	d140      	bne.n	800b268 <_malloc_r+0xcc>
 800b1e6:	6823      	ldr	r3, [r4, #0]
 800b1e8:	4631      	mov	r1, r6
 800b1ea:	4638      	mov	r0, r7
 800b1ec:	eb04 0803 	add.w	r8, r4, r3
 800b1f0:	f000 ff50 	bl	800c094 <_sbrk_r>
 800b1f4:	4580      	cmp	r8, r0
 800b1f6:	d13a      	bne.n	800b26e <_malloc_r+0xd2>
 800b1f8:	6821      	ldr	r1, [r4, #0]
 800b1fa:	3503      	adds	r5, #3
 800b1fc:	1a6d      	subs	r5, r5, r1
 800b1fe:	f025 0503 	bic.w	r5, r5, #3
 800b202:	3508      	adds	r5, #8
 800b204:	2d0c      	cmp	r5, #12
 800b206:	bf38      	it	cc
 800b208:	250c      	movcc	r5, #12
 800b20a:	4629      	mov	r1, r5
 800b20c:	4638      	mov	r0, r7
 800b20e:	f7ff ffa5 	bl	800b15c <sbrk_aligned>
 800b212:	3001      	adds	r0, #1
 800b214:	d02b      	beq.n	800b26e <_malloc_r+0xd2>
 800b216:	6823      	ldr	r3, [r4, #0]
 800b218:	442b      	add	r3, r5
 800b21a:	6023      	str	r3, [r4, #0]
 800b21c:	e00e      	b.n	800b23c <_malloc_r+0xa0>
 800b21e:	6822      	ldr	r2, [r4, #0]
 800b220:	1b52      	subs	r2, r2, r5
 800b222:	d41e      	bmi.n	800b262 <_malloc_r+0xc6>
 800b224:	2a0b      	cmp	r2, #11
 800b226:	d916      	bls.n	800b256 <_malloc_r+0xba>
 800b228:	1961      	adds	r1, r4, r5
 800b22a:	42a3      	cmp	r3, r4
 800b22c:	6025      	str	r5, [r4, #0]
 800b22e:	bf18      	it	ne
 800b230:	6059      	strne	r1, [r3, #4]
 800b232:	6863      	ldr	r3, [r4, #4]
 800b234:	bf08      	it	eq
 800b236:	6031      	streq	r1, [r6, #0]
 800b238:	5162      	str	r2, [r4, r5]
 800b23a:	604b      	str	r3, [r1, #4]
 800b23c:	4638      	mov	r0, r7
 800b23e:	f104 060b 	add.w	r6, r4, #11
 800b242:	f003 faed 	bl	800e820 <__malloc_unlock>
 800b246:	f026 0607 	bic.w	r6, r6, #7
 800b24a:	1d23      	adds	r3, r4, #4
 800b24c:	1af2      	subs	r2, r6, r3
 800b24e:	d0b6      	beq.n	800b1be <_malloc_r+0x22>
 800b250:	1b9b      	subs	r3, r3, r6
 800b252:	50a3      	str	r3, [r4, r2]
 800b254:	e7b3      	b.n	800b1be <_malloc_r+0x22>
 800b256:	6862      	ldr	r2, [r4, #4]
 800b258:	42a3      	cmp	r3, r4
 800b25a:	bf0c      	ite	eq
 800b25c:	6032      	streq	r2, [r6, #0]
 800b25e:	605a      	strne	r2, [r3, #4]
 800b260:	e7ec      	b.n	800b23c <_malloc_r+0xa0>
 800b262:	4623      	mov	r3, r4
 800b264:	6864      	ldr	r4, [r4, #4]
 800b266:	e7b2      	b.n	800b1ce <_malloc_r+0x32>
 800b268:	4634      	mov	r4, r6
 800b26a:	6876      	ldr	r6, [r6, #4]
 800b26c:	e7b9      	b.n	800b1e2 <_malloc_r+0x46>
 800b26e:	230c      	movs	r3, #12
 800b270:	603b      	str	r3, [r7, #0]
 800b272:	4638      	mov	r0, r7
 800b274:	f003 fad4 	bl	800e820 <__malloc_unlock>
 800b278:	e7a1      	b.n	800b1be <_malloc_r+0x22>
 800b27a:	6025      	str	r5, [r4, #0]
 800b27c:	e7de      	b.n	800b23c <_malloc_r+0xa0>
 800b27e:	bf00      	nop
 800b280:	2000b4e4 	.word	0x2000b4e4

0800b284 <__cvt>:
 800b284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b288:	ec55 4b10 	vmov	r4, r5, d0
 800b28c:	2d00      	cmp	r5, #0
 800b28e:	460e      	mov	r6, r1
 800b290:	4619      	mov	r1, r3
 800b292:	462b      	mov	r3, r5
 800b294:	bfbb      	ittet	lt
 800b296:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b29a:	461d      	movlt	r5, r3
 800b29c:	2300      	movge	r3, #0
 800b29e:	232d      	movlt	r3, #45	; 0x2d
 800b2a0:	700b      	strb	r3, [r1, #0]
 800b2a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b2a8:	4691      	mov	r9, r2
 800b2aa:	f023 0820 	bic.w	r8, r3, #32
 800b2ae:	bfbc      	itt	lt
 800b2b0:	4622      	movlt	r2, r4
 800b2b2:	4614      	movlt	r4, r2
 800b2b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b2b8:	d005      	beq.n	800b2c6 <__cvt+0x42>
 800b2ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b2be:	d100      	bne.n	800b2c2 <__cvt+0x3e>
 800b2c0:	3601      	adds	r6, #1
 800b2c2:	2102      	movs	r1, #2
 800b2c4:	e000      	b.n	800b2c8 <__cvt+0x44>
 800b2c6:	2103      	movs	r1, #3
 800b2c8:	ab03      	add	r3, sp, #12
 800b2ca:	9301      	str	r3, [sp, #4]
 800b2cc:	ab02      	add	r3, sp, #8
 800b2ce:	9300      	str	r3, [sp, #0]
 800b2d0:	ec45 4b10 	vmov	d0, r4, r5
 800b2d4:	4653      	mov	r3, sl
 800b2d6:	4632      	mov	r2, r6
 800b2d8:	f001 ff0a 	bl	800d0f0 <_dtoa_r>
 800b2dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b2e0:	4607      	mov	r7, r0
 800b2e2:	d102      	bne.n	800b2ea <__cvt+0x66>
 800b2e4:	f019 0f01 	tst.w	r9, #1
 800b2e8:	d022      	beq.n	800b330 <__cvt+0xac>
 800b2ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b2ee:	eb07 0906 	add.w	r9, r7, r6
 800b2f2:	d110      	bne.n	800b316 <__cvt+0x92>
 800b2f4:	783b      	ldrb	r3, [r7, #0]
 800b2f6:	2b30      	cmp	r3, #48	; 0x30
 800b2f8:	d10a      	bne.n	800b310 <__cvt+0x8c>
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	4620      	mov	r0, r4
 800b300:	4629      	mov	r1, r5
 800b302:	f7f5 fbe1 	bl	8000ac8 <__aeabi_dcmpeq>
 800b306:	b918      	cbnz	r0, 800b310 <__cvt+0x8c>
 800b308:	f1c6 0601 	rsb	r6, r6, #1
 800b30c:	f8ca 6000 	str.w	r6, [sl]
 800b310:	f8da 3000 	ldr.w	r3, [sl]
 800b314:	4499      	add	r9, r3
 800b316:	2200      	movs	r2, #0
 800b318:	2300      	movs	r3, #0
 800b31a:	4620      	mov	r0, r4
 800b31c:	4629      	mov	r1, r5
 800b31e:	f7f5 fbd3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b322:	b108      	cbz	r0, 800b328 <__cvt+0xa4>
 800b324:	f8cd 900c 	str.w	r9, [sp, #12]
 800b328:	2230      	movs	r2, #48	; 0x30
 800b32a:	9b03      	ldr	r3, [sp, #12]
 800b32c:	454b      	cmp	r3, r9
 800b32e:	d307      	bcc.n	800b340 <__cvt+0xbc>
 800b330:	9b03      	ldr	r3, [sp, #12]
 800b332:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b334:	1bdb      	subs	r3, r3, r7
 800b336:	4638      	mov	r0, r7
 800b338:	6013      	str	r3, [r2, #0]
 800b33a:	b004      	add	sp, #16
 800b33c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b340:	1c59      	adds	r1, r3, #1
 800b342:	9103      	str	r1, [sp, #12]
 800b344:	701a      	strb	r2, [r3, #0]
 800b346:	e7f0      	b.n	800b32a <__cvt+0xa6>

0800b348 <__exponent>:
 800b348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b34a:	4603      	mov	r3, r0
 800b34c:	2900      	cmp	r1, #0
 800b34e:	bfb8      	it	lt
 800b350:	4249      	neglt	r1, r1
 800b352:	f803 2b02 	strb.w	r2, [r3], #2
 800b356:	bfb4      	ite	lt
 800b358:	222d      	movlt	r2, #45	; 0x2d
 800b35a:	222b      	movge	r2, #43	; 0x2b
 800b35c:	2909      	cmp	r1, #9
 800b35e:	7042      	strb	r2, [r0, #1]
 800b360:	dd2a      	ble.n	800b3b8 <__exponent+0x70>
 800b362:	f10d 0407 	add.w	r4, sp, #7
 800b366:	46a4      	mov	ip, r4
 800b368:	270a      	movs	r7, #10
 800b36a:	46a6      	mov	lr, r4
 800b36c:	460a      	mov	r2, r1
 800b36e:	fb91 f6f7 	sdiv	r6, r1, r7
 800b372:	fb07 1516 	mls	r5, r7, r6, r1
 800b376:	3530      	adds	r5, #48	; 0x30
 800b378:	2a63      	cmp	r2, #99	; 0x63
 800b37a:	f104 34ff 	add.w	r4, r4, #4294967295
 800b37e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b382:	4631      	mov	r1, r6
 800b384:	dcf1      	bgt.n	800b36a <__exponent+0x22>
 800b386:	3130      	adds	r1, #48	; 0x30
 800b388:	f1ae 0502 	sub.w	r5, lr, #2
 800b38c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b390:	1c44      	adds	r4, r0, #1
 800b392:	4629      	mov	r1, r5
 800b394:	4561      	cmp	r1, ip
 800b396:	d30a      	bcc.n	800b3ae <__exponent+0x66>
 800b398:	f10d 0209 	add.w	r2, sp, #9
 800b39c:	eba2 020e 	sub.w	r2, r2, lr
 800b3a0:	4565      	cmp	r5, ip
 800b3a2:	bf88      	it	hi
 800b3a4:	2200      	movhi	r2, #0
 800b3a6:	4413      	add	r3, r2
 800b3a8:	1a18      	subs	r0, r3, r0
 800b3aa:	b003      	add	sp, #12
 800b3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b3b6:	e7ed      	b.n	800b394 <__exponent+0x4c>
 800b3b8:	2330      	movs	r3, #48	; 0x30
 800b3ba:	3130      	adds	r1, #48	; 0x30
 800b3bc:	7083      	strb	r3, [r0, #2]
 800b3be:	70c1      	strb	r1, [r0, #3]
 800b3c0:	1d03      	adds	r3, r0, #4
 800b3c2:	e7f1      	b.n	800b3a8 <__exponent+0x60>

0800b3c4 <_printf_float>:
 800b3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c8:	ed2d 8b02 	vpush	{d8}
 800b3cc:	b08d      	sub	sp, #52	; 0x34
 800b3ce:	460c      	mov	r4, r1
 800b3d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b3d4:	4616      	mov	r6, r2
 800b3d6:	461f      	mov	r7, r3
 800b3d8:	4605      	mov	r5, r0
 800b3da:	f003 f99d 	bl	800e718 <_localeconv_r>
 800b3de:	f8d0 a000 	ldr.w	sl, [r0]
 800b3e2:	4650      	mov	r0, sl
 800b3e4:	f7f4 fef4 	bl	80001d0 <strlen>
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	930a      	str	r3, [sp, #40]	; 0x28
 800b3ec:	6823      	ldr	r3, [r4, #0]
 800b3ee:	9305      	str	r3, [sp, #20]
 800b3f0:	f8d8 3000 	ldr.w	r3, [r8]
 800b3f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b3f8:	3307      	adds	r3, #7
 800b3fa:	f023 0307 	bic.w	r3, r3, #7
 800b3fe:	f103 0208 	add.w	r2, r3, #8
 800b402:	f8c8 2000 	str.w	r2, [r8]
 800b406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b40e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b412:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b416:	9307      	str	r3, [sp, #28]
 800b418:	f8cd 8018 	str.w	r8, [sp, #24]
 800b41c:	ee08 0a10 	vmov	s16, r0
 800b420:	4b9f      	ldr	r3, [pc, #636]	; (800b6a0 <_printf_float+0x2dc>)
 800b422:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b426:	f04f 32ff 	mov.w	r2, #4294967295
 800b42a:	f7f5 fb7f 	bl	8000b2c <__aeabi_dcmpun>
 800b42e:	bb88      	cbnz	r0, 800b494 <_printf_float+0xd0>
 800b430:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b434:	4b9a      	ldr	r3, [pc, #616]	; (800b6a0 <_printf_float+0x2dc>)
 800b436:	f04f 32ff 	mov.w	r2, #4294967295
 800b43a:	f7f5 fb59 	bl	8000af0 <__aeabi_dcmple>
 800b43e:	bb48      	cbnz	r0, 800b494 <_printf_float+0xd0>
 800b440:	2200      	movs	r2, #0
 800b442:	2300      	movs	r3, #0
 800b444:	4640      	mov	r0, r8
 800b446:	4649      	mov	r1, r9
 800b448:	f7f5 fb48 	bl	8000adc <__aeabi_dcmplt>
 800b44c:	b110      	cbz	r0, 800b454 <_printf_float+0x90>
 800b44e:	232d      	movs	r3, #45	; 0x2d
 800b450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b454:	4b93      	ldr	r3, [pc, #588]	; (800b6a4 <_printf_float+0x2e0>)
 800b456:	4894      	ldr	r0, [pc, #592]	; (800b6a8 <_printf_float+0x2e4>)
 800b458:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b45c:	bf94      	ite	ls
 800b45e:	4698      	movls	r8, r3
 800b460:	4680      	movhi	r8, r0
 800b462:	2303      	movs	r3, #3
 800b464:	6123      	str	r3, [r4, #16]
 800b466:	9b05      	ldr	r3, [sp, #20]
 800b468:	f023 0204 	bic.w	r2, r3, #4
 800b46c:	6022      	str	r2, [r4, #0]
 800b46e:	f04f 0900 	mov.w	r9, #0
 800b472:	9700      	str	r7, [sp, #0]
 800b474:	4633      	mov	r3, r6
 800b476:	aa0b      	add	r2, sp, #44	; 0x2c
 800b478:	4621      	mov	r1, r4
 800b47a:	4628      	mov	r0, r5
 800b47c:	f000 f9d8 	bl	800b830 <_printf_common>
 800b480:	3001      	adds	r0, #1
 800b482:	f040 8090 	bne.w	800b5a6 <_printf_float+0x1e2>
 800b486:	f04f 30ff 	mov.w	r0, #4294967295
 800b48a:	b00d      	add	sp, #52	; 0x34
 800b48c:	ecbd 8b02 	vpop	{d8}
 800b490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b494:	4642      	mov	r2, r8
 800b496:	464b      	mov	r3, r9
 800b498:	4640      	mov	r0, r8
 800b49a:	4649      	mov	r1, r9
 800b49c:	f7f5 fb46 	bl	8000b2c <__aeabi_dcmpun>
 800b4a0:	b140      	cbz	r0, 800b4b4 <_printf_float+0xf0>
 800b4a2:	464b      	mov	r3, r9
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	bfbc      	itt	lt
 800b4a8:	232d      	movlt	r3, #45	; 0x2d
 800b4aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b4ae:	487f      	ldr	r0, [pc, #508]	; (800b6ac <_printf_float+0x2e8>)
 800b4b0:	4b7f      	ldr	r3, [pc, #508]	; (800b6b0 <_printf_float+0x2ec>)
 800b4b2:	e7d1      	b.n	800b458 <_printf_float+0x94>
 800b4b4:	6863      	ldr	r3, [r4, #4]
 800b4b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b4ba:	9206      	str	r2, [sp, #24]
 800b4bc:	1c5a      	adds	r2, r3, #1
 800b4be:	d13f      	bne.n	800b540 <_printf_float+0x17c>
 800b4c0:	2306      	movs	r3, #6
 800b4c2:	6063      	str	r3, [r4, #4]
 800b4c4:	9b05      	ldr	r3, [sp, #20]
 800b4c6:	6861      	ldr	r1, [r4, #4]
 800b4c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	9303      	str	r3, [sp, #12]
 800b4d0:	ab0a      	add	r3, sp, #40	; 0x28
 800b4d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b4d6:	ab09      	add	r3, sp, #36	; 0x24
 800b4d8:	ec49 8b10 	vmov	d0, r8, r9
 800b4dc:	9300      	str	r3, [sp, #0]
 800b4de:	6022      	str	r2, [r4, #0]
 800b4e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	f7ff fecd 	bl	800b284 <__cvt>
 800b4ea:	9b06      	ldr	r3, [sp, #24]
 800b4ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4ee:	2b47      	cmp	r3, #71	; 0x47
 800b4f0:	4680      	mov	r8, r0
 800b4f2:	d108      	bne.n	800b506 <_printf_float+0x142>
 800b4f4:	1cc8      	adds	r0, r1, #3
 800b4f6:	db02      	blt.n	800b4fe <_printf_float+0x13a>
 800b4f8:	6863      	ldr	r3, [r4, #4]
 800b4fa:	4299      	cmp	r1, r3
 800b4fc:	dd41      	ble.n	800b582 <_printf_float+0x1be>
 800b4fe:	f1ab 0b02 	sub.w	fp, fp, #2
 800b502:	fa5f fb8b 	uxtb.w	fp, fp
 800b506:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b50a:	d820      	bhi.n	800b54e <_printf_float+0x18a>
 800b50c:	3901      	subs	r1, #1
 800b50e:	465a      	mov	r2, fp
 800b510:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b514:	9109      	str	r1, [sp, #36]	; 0x24
 800b516:	f7ff ff17 	bl	800b348 <__exponent>
 800b51a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b51c:	1813      	adds	r3, r2, r0
 800b51e:	2a01      	cmp	r2, #1
 800b520:	4681      	mov	r9, r0
 800b522:	6123      	str	r3, [r4, #16]
 800b524:	dc02      	bgt.n	800b52c <_printf_float+0x168>
 800b526:	6822      	ldr	r2, [r4, #0]
 800b528:	07d2      	lsls	r2, r2, #31
 800b52a:	d501      	bpl.n	800b530 <_printf_float+0x16c>
 800b52c:	3301      	adds	r3, #1
 800b52e:	6123      	str	r3, [r4, #16]
 800b530:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b534:	2b00      	cmp	r3, #0
 800b536:	d09c      	beq.n	800b472 <_printf_float+0xae>
 800b538:	232d      	movs	r3, #45	; 0x2d
 800b53a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b53e:	e798      	b.n	800b472 <_printf_float+0xae>
 800b540:	9a06      	ldr	r2, [sp, #24]
 800b542:	2a47      	cmp	r2, #71	; 0x47
 800b544:	d1be      	bne.n	800b4c4 <_printf_float+0x100>
 800b546:	2b00      	cmp	r3, #0
 800b548:	d1bc      	bne.n	800b4c4 <_printf_float+0x100>
 800b54a:	2301      	movs	r3, #1
 800b54c:	e7b9      	b.n	800b4c2 <_printf_float+0xfe>
 800b54e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b552:	d118      	bne.n	800b586 <_printf_float+0x1c2>
 800b554:	2900      	cmp	r1, #0
 800b556:	6863      	ldr	r3, [r4, #4]
 800b558:	dd0b      	ble.n	800b572 <_printf_float+0x1ae>
 800b55a:	6121      	str	r1, [r4, #16]
 800b55c:	b913      	cbnz	r3, 800b564 <_printf_float+0x1a0>
 800b55e:	6822      	ldr	r2, [r4, #0]
 800b560:	07d0      	lsls	r0, r2, #31
 800b562:	d502      	bpl.n	800b56a <_printf_float+0x1a6>
 800b564:	3301      	adds	r3, #1
 800b566:	440b      	add	r3, r1
 800b568:	6123      	str	r3, [r4, #16]
 800b56a:	65a1      	str	r1, [r4, #88]	; 0x58
 800b56c:	f04f 0900 	mov.w	r9, #0
 800b570:	e7de      	b.n	800b530 <_printf_float+0x16c>
 800b572:	b913      	cbnz	r3, 800b57a <_printf_float+0x1b6>
 800b574:	6822      	ldr	r2, [r4, #0]
 800b576:	07d2      	lsls	r2, r2, #31
 800b578:	d501      	bpl.n	800b57e <_printf_float+0x1ba>
 800b57a:	3302      	adds	r3, #2
 800b57c:	e7f4      	b.n	800b568 <_printf_float+0x1a4>
 800b57e:	2301      	movs	r3, #1
 800b580:	e7f2      	b.n	800b568 <_printf_float+0x1a4>
 800b582:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b588:	4299      	cmp	r1, r3
 800b58a:	db05      	blt.n	800b598 <_printf_float+0x1d4>
 800b58c:	6823      	ldr	r3, [r4, #0]
 800b58e:	6121      	str	r1, [r4, #16]
 800b590:	07d8      	lsls	r0, r3, #31
 800b592:	d5ea      	bpl.n	800b56a <_printf_float+0x1a6>
 800b594:	1c4b      	adds	r3, r1, #1
 800b596:	e7e7      	b.n	800b568 <_printf_float+0x1a4>
 800b598:	2900      	cmp	r1, #0
 800b59a:	bfd4      	ite	le
 800b59c:	f1c1 0202 	rsble	r2, r1, #2
 800b5a0:	2201      	movgt	r2, #1
 800b5a2:	4413      	add	r3, r2
 800b5a4:	e7e0      	b.n	800b568 <_printf_float+0x1a4>
 800b5a6:	6823      	ldr	r3, [r4, #0]
 800b5a8:	055a      	lsls	r2, r3, #21
 800b5aa:	d407      	bmi.n	800b5bc <_printf_float+0x1f8>
 800b5ac:	6923      	ldr	r3, [r4, #16]
 800b5ae:	4642      	mov	r2, r8
 800b5b0:	4631      	mov	r1, r6
 800b5b2:	4628      	mov	r0, r5
 800b5b4:	47b8      	blx	r7
 800b5b6:	3001      	adds	r0, #1
 800b5b8:	d12c      	bne.n	800b614 <_printf_float+0x250>
 800b5ba:	e764      	b.n	800b486 <_printf_float+0xc2>
 800b5bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b5c0:	f240 80e0 	bls.w	800b784 <_printf_float+0x3c0>
 800b5c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	f7f5 fa7c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5d0:	2800      	cmp	r0, #0
 800b5d2:	d034      	beq.n	800b63e <_printf_float+0x27a>
 800b5d4:	4a37      	ldr	r2, [pc, #220]	; (800b6b4 <_printf_float+0x2f0>)
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	4631      	mov	r1, r6
 800b5da:	4628      	mov	r0, r5
 800b5dc:	47b8      	blx	r7
 800b5de:	3001      	adds	r0, #1
 800b5e0:	f43f af51 	beq.w	800b486 <_printf_float+0xc2>
 800b5e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	db02      	blt.n	800b5f2 <_printf_float+0x22e>
 800b5ec:	6823      	ldr	r3, [r4, #0]
 800b5ee:	07d8      	lsls	r0, r3, #31
 800b5f0:	d510      	bpl.n	800b614 <_printf_float+0x250>
 800b5f2:	ee18 3a10 	vmov	r3, s16
 800b5f6:	4652      	mov	r2, sl
 800b5f8:	4631      	mov	r1, r6
 800b5fa:	4628      	mov	r0, r5
 800b5fc:	47b8      	blx	r7
 800b5fe:	3001      	adds	r0, #1
 800b600:	f43f af41 	beq.w	800b486 <_printf_float+0xc2>
 800b604:	f04f 0800 	mov.w	r8, #0
 800b608:	f104 091a 	add.w	r9, r4, #26
 800b60c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b60e:	3b01      	subs	r3, #1
 800b610:	4543      	cmp	r3, r8
 800b612:	dc09      	bgt.n	800b628 <_printf_float+0x264>
 800b614:	6823      	ldr	r3, [r4, #0]
 800b616:	079b      	lsls	r3, r3, #30
 800b618:	f100 8105 	bmi.w	800b826 <_printf_float+0x462>
 800b61c:	68e0      	ldr	r0, [r4, #12]
 800b61e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b620:	4298      	cmp	r0, r3
 800b622:	bfb8      	it	lt
 800b624:	4618      	movlt	r0, r3
 800b626:	e730      	b.n	800b48a <_printf_float+0xc6>
 800b628:	2301      	movs	r3, #1
 800b62a:	464a      	mov	r2, r9
 800b62c:	4631      	mov	r1, r6
 800b62e:	4628      	mov	r0, r5
 800b630:	47b8      	blx	r7
 800b632:	3001      	adds	r0, #1
 800b634:	f43f af27 	beq.w	800b486 <_printf_float+0xc2>
 800b638:	f108 0801 	add.w	r8, r8, #1
 800b63c:	e7e6      	b.n	800b60c <_printf_float+0x248>
 800b63e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b640:	2b00      	cmp	r3, #0
 800b642:	dc39      	bgt.n	800b6b8 <_printf_float+0x2f4>
 800b644:	4a1b      	ldr	r2, [pc, #108]	; (800b6b4 <_printf_float+0x2f0>)
 800b646:	2301      	movs	r3, #1
 800b648:	4631      	mov	r1, r6
 800b64a:	4628      	mov	r0, r5
 800b64c:	47b8      	blx	r7
 800b64e:	3001      	adds	r0, #1
 800b650:	f43f af19 	beq.w	800b486 <_printf_float+0xc2>
 800b654:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b658:	4313      	orrs	r3, r2
 800b65a:	d102      	bne.n	800b662 <_printf_float+0x29e>
 800b65c:	6823      	ldr	r3, [r4, #0]
 800b65e:	07d9      	lsls	r1, r3, #31
 800b660:	d5d8      	bpl.n	800b614 <_printf_float+0x250>
 800b662:	ee18 3a10 	vmov	r3, s16
 800b666:	4652      	mov	r2, sl
 800b668:	4631      	mov	r1, r6
 800b66a:	4628      	mov	r0, r5
 800b66c:	47b8      	blx	r7
 800b66e:	3001      	adds	r0, #1
 800b670:	f43f af09 	beq.w	800b486 <_printf_float+0xc2>
 800b674:	f04f 0900 	mov.w	r9, #0
 800b678:	f104 0a1a 	add.w	sl, r4, #26
 800b67c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b67e:	425b      	negs	r3, r3
 800b680:	454b      	cmp	r3, r9
 800b682:	dc01      	bgt.n	800b688 <_printf_float+0x2c4>
 800b684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b686:	e792      	b.n	800b5ae <_printf_float+0x1ea>
 800b688:	2301      	movs	r3, #1
 800b68a:	4652      	mov	r2, sl
 800b68c:	4631      	mov	r1, r6
 800b68e:	4628      	mov	r0, r5
 800b690:	47b8      	blx	r7
 800b692:	3001      	adds	r0, #1
 800b694:	f43f aef7 	beq.w	800b486 <_printf_float+0xc2>
 800b698:	f109 0901 	add.w	r9, r9, #1
 800b69c:	e7ee      	b.n	800b67c <_printf_float+0x2b8>
 800b69e:	bf00      	nop
 800b6a0:	7fefffff 	.word	0x7fefffff
 800b6a4:	080aeea4 	.word	0x080aeea4
 800b6a8:	080aeea8 	.word	0x080aeea8
 800b6ac:	080aeeb0 	.word	0x080aeeb0
 800b6b0:	080aeeac 	.word	0x080aeeac
 800b6b4:	080aeeb4 	.word	0x080aeeb4
 800b6b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b6ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	bfa8      	it	ge
 800b6c0:	461a      	movge	r2, r3
 800b6c2:	2a00      	cmp	r2, #0
 800b6c4:	4691      	mov	r9, r2
 800b6c6:	dc37      	bgt.n	800b738 <_printf_float+0x374>
 800b6c8:	f04f 0b00 	mov.w	fp, #0
 800b6cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b6d0:	f104 021a 	add.w	r2, r4, #26
 800b6d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b6d6:	9305      	str	r3, [sp, #20]
 800b6d8:	eba3 0309 	sub.w	r3, r3, r9
 800b6dc:	455b      	cmp	r3, fp
 800b6de:	dc33      	bgt.n	800b748 <_printf_float+0x384>
 800b6e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	db3b      	blt.n	800b760 <_printf_float+0x39c>
 800b6e8:	6823      	ldr	r3, [r4, #0]
 800b6ea:	07da      	lsls	r2, r3, #31
 800b6ec:	d438      	bmi.n	800b760 <_printf_float+0x39c>
 800b6ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6f0:	9a05      	ldr	r2, [sp, #20]
 800b6f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6f4:	1a9a      	subs	r2, r3, r2
 800b6f6:	eba3 0901 	sub.w	r9, r3, r1
 800b6fa:	4591      	cmp	r9, r2
 800b6fc:	bfa8      	it	ge
 800b6fe:	4691      	movge	r9, r2
 800b700:	f1b9 0f00 	cmp.w	r9, #0
 800b704:	dc35      	bgt.n	800b772 <_printf_float+0x3ae>
 800b706:	f04f 0800 	mov.w	r8, #0
 800b70a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b70e:	f104 0a1a 	add.w	sl, r4, #26
 800b712:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b716:	1a9b      	subs	r3, r3, r2
 800b718:	eba3 0309 	sub.w	r3, r3, r9
 800b71c:	4543      	cmp	r3, r8
 800b71e:	f77f af79 	ble.w	800b614 <_printf_float+0x250>
 800b722:	2301      	movs	r3, #1
 800b724:	4652      	mov	r2, sl
 800b726:	4631      	mov	r1, r6
 800b728:	4628      	mov	r0, r5
 800b72a:	47b8      	blx	r7
 800b72c:	3001      	adds	r0, #1
 800b72e:	f43f aeaa 	beq.w	800b486 <_printf_float+0xc2>
 800b732:	f108 0801 	add.w	r8, r8, #1
 800b736:	e7ec      	b.n	800b712 <_printf_float+0x34e>
 800b738:	4613      	mov	r3, r2
 800b73a:	4631      	mov	r1, r6
 800b73c:	4642      	mov	r2, r8
 800b73e:	4628      	mov	r0, r5
 800b740:	47b8      	blx	r7
 800b742:	3001      	adds	r0, #1
 800b744:	d1c0      	bne.n	800b6c8 <_printf_float+0x304>
 800b746:	e69e      	b.n	800b486 <_printf_float+0xc2>
 800b748:	2301      	movs	r3, #1
 800b74a:	4631      	mov	r1, r6
 800b74c:	4628      	mov	r0, r5
 800b74e:	9205      	str	r2, [sp, #20]
 800b750:	47b8      	blx	r7
 800b752:	3001      	adds	r0, #1
 800b754:	f43f ae97 	beq.w	800b486 <_printf_float+0xc2>
 800b758:	9a05      	ldr	r2, [sp, #20]
 800b75a:	f10b 0b01 	add.w	fp, fp, #1
 800b75e:	e7b9      	b.n	800b6d4 <_printf_float+0x310>
 800b760:	ee18 3a10 	vmov	r3, s16
 800b764:	4652      	mov	r2, sl
 800b766:	4631      	mov	r1, r6
 800b768:	4628      	mov	r0, r5
 800b76a:	47b8      	blx	r7
 800b76c:	3001      	adds	r0, #1
 800b76e:	d1be      	bne.n	800b6ee <_printf_float+0x32a>
 800b770:	e689      	b.n	800b486 <_printf_float+0xc2>
 800b772:	9a05      	ldr	r2, [sp, #20]
 800b774:	464b      	mov	r3, r9
 800b776:	4442      	add	r2, r8
 800b778:	4631      	mov	r1, r6
 800b77a:	4628      	mov	r0, r5
 800b77c:	47b8      	blx	r7
 800b77e:	3001      	adds	r0, #1
 800b780:	d1c1      	bne.n	800b706 <_printf_float+0x342>
 800b782:	e680      	b.n	800b486 <_printf_float+0xc2>
 800b784:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b786:	2a01      	cmp	r2, #1
 800b788:	dc01      	bgt.n	800b78e <_printf_float+0x3ca>
 800b78a:	07db      	lsls	r3, r3, #31
 800b78c:	d538      	bpl.n	800b800 <_printf_float+0x43c>
 800b78e:	2301      	movs	r3, #1
 800b790:	4642      	mov	r2, r8
 800b792:	4631      	mov	r1, r6
 800b794:	4628      	mov	r0, r5
 800b796:	47b8      	blx	r7
 800b798:	3001      	adds	r0, #1
 800b79a:	f43f ae74 	beq.w	800b486 <_printf_float+0xc2>
 800b79e:	ee18 3a10 	vmov	r3, s16
 800b7a2:	4652      	mov	r2, sl
 800b7a4:	4631      	mov	r1, r6
 800b7a6:	4628      	mov	r0, r5
 800b7a8:	47b8      	blx	r7
 800b7aa:	3001      	adds	r0, #1
 800b7ac:	f43f ae6b 	beq.w	800b486 <_printf_float+0xc2>
 800b7b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	f7f5 f986 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7bc:	b9d8      	cbnz	r0, 800b7f6 <_printf_float+0x432>
 800b7be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7c0:	f108 0201 	add.w	r2, r8, #1
 800b7c4:	3b01      	subs	r3, #1
 800b7c6:	4631      	mov	r1, r6
 800b7c8:	4628      	mov	r0, r5
 800b7ca:	47b8      	blx	r7
 800b7cc:	3001      	adds	r0, #1
 800b7ce:	d10e      	bne.n	800b7ee <_printf_float+0x42a>
 800b7d0:	e659      	b.n	800b486 <_printf_float+0xc2>
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	4652      	mov	r2, sl
 800b7d6:	4631      	mov	r1, r6
 800b7d8:	4628      	mov	r0, r5
 800b7da:	47b8      	blx	r7
 800b7dc:	3001      	adds	r0, #1
 800b7de:	f43f ae52 	beq.w	800b486 <_printf_float+0xc2>
 800b7e2:	f108 0801 	add.w	r8, r8, #1
 800b7e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7e8:	3b01      	subs	r3, #1
 800b7ea:	4543      	cmp	r3, r8
 800b7ec:	dcf1      	bgt.n	800b7d2 <_printf_float+0x40e>
 800b7ee:	464b      	mov	r3, r9
 800b7f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b7f4:	e6dc      	b.n	800b5b0 <_printf_float+0x1ec>
 800b7f6:	f04f 0800 	mov.w	r8, #0
 800b7fa:	f104 0a1a 	add.w	sl, r4, #26
 800b7fe:	e7f2      	b.n	800b7e6 <_printf_float+0x422>
 800b800:	2301      	movs	r3, #1
 800b802:	4642      	mov	r2, r8
 800b804:	e7df      	b.n	800b7c6 <_printf_float+0x402>
 800b806:	2301      	movs	r3, #1
 800b808:	464a      	mov	r2, r9
 800b80a:	4631      	mov	r1, r6
 800b80c:	4628      	mov	r0, r5
 800b80e:	47b8      	blx	r7
 800b810:	3001      	adds	r0, #1
 800b812:	f43f ae38 	beq.w	800b486 <_printf_float+0xc2>
 800b816:	f108 0801 	add.w	r8, r8, #1
 800b81a:	68e3      	ldr	r3, [r4, #12]
 800b81c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b81e:	1a5b      	subs	r3, r3, r1
 800b820:	4543      	cmp	r3, r8
 800b822:	dcf0      	bgt.n	800b806 <_printf_float+0x442>
 800b824:	e6fa      	b.n	800b61c <_printf_float+0x258>
 800b826:	f04f 0800 	mov.w	r8, #0
 800b82a:	f104 0919 	add.w	r9, r4, #25
 800b82e:	e7f4      	b.n	800b81a <_printf_float+0x456>

0800b830 <_printf_common>:
 800b830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b834:	4616      	mov	r6, r2
 800b836:	4699      	mov	r9, r3
 800b838:	688a      	ldr	r2, [r1, #8]
 800b83a:	690b      	ldr	r3, [r1, #16]
 800b83c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b840:	4293      	cmp	r3, r2
 800b842:	bfb8      	it	lt
 800b844:	4613      	movlt	r3, r2
 800b846:	6033      	str	r3, [r6, #0]
 800b848:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b84c:	4607      	mov	r7, r0
 800b84e:	460c      	mov	r4, r1
 800b850:	b10a      	cbz	r2, 800b856 <_printf_common+0x26>
 800b852:	3301      	adds	r3, #1
 800b854:	6033      	str	r3, [r6, #0]
 800b856:	6823      	ldr	r3, [r4, #0]
 800b858:	0699      	lsls	r1, r3, #26
 800b85a:	bf42      	ittt	mi
 800b85c:	6833      	ldrmi	r3, [r6, #0]
 800b85e:	3302      	addmi	r3, #2
 800b860:	6033      	strmi	r3, [r6, #0]
 800b862:	6825      	ldr	r5, [r4, #0]
 800b864:	f015 0506 	ands.w	r5, r5, #6
 800b868:	d106      	bne.n	800b878 <_printf_common+0x48>
 800b86a:	f104 0a19 	add.w	sl, r4, #25
 800b86e:	68e3      	ldr	r3, [r4, #12]
 800b870:	6832      	ldr	r2, [r6, #0]
 800b872:	1a9b      	subs	r3, r3, r2
 800b874:	42ab      	cmp	r3, r5
 800b876:	dc26      	bgt.n	800b8c6 <_printf_common+0x96>
 800b878:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b87c:	1e13      	subs	r3, r2, #0
 800b87e:	6822      	ldr	r2, [r4, #0]
 800b880:	bf18      	it	ne
 800b882:	2301      	movne	r3, #1
 800b884:	0692      	lsls	r2, r2, #26
 800b886:	d42b      	bmi.n	800b8e0 <_printf_common+0xb0>
 800b888:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b88c:	4649      	mov	r1, r9
 800b88e:	4638      	mov	r0, r7
 800b890:	47c0      	blx	r8
 800b892:	3001      	adds	r0, #1
 800b894:	d01e      	beq.n	800b8d4 <_printf_common+0xa4>
 800b896:	6823      	ldr	r3, [r4, #0]
 800b898:	68e5      	ldr	r5, [r4, #12]
 800b89a:	6832      	ldr	r2, [r6, #0]
 800b89c:	f003 0306 	and.w	r3, r3, #6
 800b8a0:	2b04      	cmp	r3, #4
 800b8a2:	bf08      	it	eq
 800b8a4:	1aad      	subeq	r5, r5, r2
 800b8a6:	68a3      	ldr	r3, [r4, #8]
 800b8a8:	6922      	ldr	r2, [r4, #16]
 800b8aa:	bf0c      	ite	eq
 800b8ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8b0:	2500      	movne	r5, #0
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	bfc4      	itt	gt
 800b8b6:	1a9b      	subgt	r3, r3, r2
 800b8b8:	18ed      	addgt	r5, r5, r3
 800b8ba:	2600      	movs	r6, #0
 800b8bc:	341a      	adds	r4, #26
 800b8be:	42b5      	cmp	r5, r6
 800b8c0:	d11a      	bne.n	800b8f8 <_printf_common+0xc8>
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	e008      	b.n	800b8d8 <_printf_common+0xa8>
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	4652      	mov	r2, sl
 800b8ca:	4649      	mov	r1, r9
 800b8cc:	4638      	mov	r0, r7
 800b8ce:	47c0      	blx	r8
 800b8d0:	3001      	adds	r0, #1
 800b8d2:	d103      	bne.n	800b8dc <_printf_common+0xac>
 800b8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8dc:	3501      	adds	r5, #1
 800b8de:	e7c6      	b.n	800b86e <_printf_common+0x3e>
 800b8e0:	18e1      	adds	r1, r4, r3
 800b8e2:	1c5a      	adds	r2, r3, #1
 800b8e4:	2030      	movs	r0, #48	; 0x30
 800b8e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b8ea:	4422      	add	r2, r4
 800b8ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b8f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b8f4:	3302      	adds	r3, #2
 800b8f6:	e7c7      	b.n	800b888 <_printf_common+0x58>
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	4622      	mov	r2, r4
 800b8fc:	4649      	mov	r1, r9
 800b8fe:	4638      	mov	r0, r7
 800b900:	47c0      	blx	r8
 800b902:	3001      	adds	r0, #1
 800b904:	d0e6      	beq.n	800b8d4 <_printf_common+0xa4>
 800b906:	3601      	adds	r6, #1
 800b908:	e7d9      	b.n	800b8be <_printf_common+0x8e>
	...

0800b90c <_printf_i>:
 800b90c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b910:	7e0f      	ldrb	r7, [r1, #24]
 800b912:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b914:	2f78      	cmp	r7, #120	; 0x78
 800b916:	4691      	mov	r9, r2
 800b918:	4680      	mov	r8, r0
 800b91a:	460c      	mov	r4, r1
 800b91c:	469a      	mov	sl, r3
 800b91e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b922:	d807      	bhi.n	800b934 <_printf_i+0x28>
 800b924:	2f62      	cmp	r7, #98	; 0x62
 800b926:	d80a      	bhi.n	800b93e <_printf_i+0x32>
 800b928:	2f00      	cmp	r7, #0
 800b92a:	f000 80d8 	beq.w	800bade <_printf_i+0x1d2>
 800b92e:	2f58      	cmp	r7, #88	; 0x58
 800b930:	f000 80a3 	beq.w	800ba7a <_printf_i+0x16e>
 800b934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b938:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b93c:	e03a      	b.n	800b9b4 <_printf_i+0xa8>
 800b93e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b942:	2b15      	cmp	r3, #21
 800b944:	d8f6      	bhi.n	800b934 <_printf_i+0x28>
 800b946:	a101      	add	r1, pc, #4	; (adr r1, 800b94c <_printf_i+0x40>)
 800b948:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b94c:	0800b9a5 	.word	0x0800b9a5
 800b950:	0800b9b9 	.word	0x0800b9b9
 800b954:	0800b935 	.word	0x0800b935
 800b958:	0800b935 	.word	0x0800b935
 800b95c:	0800b935 	.word	0x0800b935
 800b960:	0800b935 	.word	0x0800b935
 800b964:	0800b9b9 	.word	0x0800b9b9
 800b968:	0800b935 	.word	0x0800b935
 800b96c:	0800b935 	.word	0x0800b935
 800b970:	0800b935 	.word	0x0800b935
 800b974:	0800b935 	.word	0x0800b935
 800b978:	0800bac5 	.word	0x0800bac5
 800b97c:	0800b9e9 	.word	0x0800b9e9
 800b980:	0800baa7 	.word	0x0800baa7
 800b984:	0800b935 	.word	0x0800b935
 800b988:	0800b935 	.word	0x0800b935
 800b98c:	0800bae7 	.word	0x0800bae7
 800b990:	0800b935 	.word	0x0800b935
 800b994:	0800b9e9 	.word	0x0800b9e9
 800b998:	0800b935 	.word	0x0800b935
 800b99c:	0800b935 	.word	0x0800b935
 800b9a0:	0800baaf 	.word	0x0800baaf
 800b9a4:	682b      	ldr	r3, [r5, #0]
 800b9a6:	1d1a      	adds	r2, r3, #4
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	602a      	str	r2, [r5, #0]
 800b9ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	e0a3      	b.n	800bb00 <_printf_i+0x1f4>
 800b9b8:	6820      	ldr	r0, [r4, #0]
 800b9ba:	6829      	ldr	r1, [r5, #0]
 800b9bc:	0606      	lsls	r6, r0, #24
 800b9be:	f101 0304 	add.w	r3, r1, #4
 800b9c2:	d50a      	bpl.n	800b9da <_printf_i+0xce>
 800b9c4:	680e      	ldr	r6, [r1, #0]
 800b9c6:	602b      	str	r3, [r5, #0]
 800b9c8:	2e00      	cmp	r6, #0
 800b9ca:	da03      	bge.n	800b9d4 <_printf_i+0xc8>
 800b9cc:	232d      	movs	r3, #45	; 0x2d
 800b9ce:	4276      	negs	r6, r6
 800b9d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9d4:	485e      	ldr	r0, [pc, #376]	; (800bb50 <_printf_i+0x244>)
 800b9d6:	230a      	movs	r3, #10
 800b9d8:	e019      	b.n	800ba0e <_printf_i+0x102>
 800b9da:	680e      	ldr	r6, [r1, #0]
 800b9dc:	602b      	str	r3, [r5, #0]
 800b9de:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b9e2:	bf18      	it	ne
 800b9e4:	b236      	sxthne	r6, r6
 800b9e6:	e7ef      	b.n	800b9c8 <_printf_i+0xbc>
 800b9e8:	682b      	ldr	r3, [r5, #0]
 800b9ea:	6820      	ldr	r0, [r4, #0]
 800b9ec:	1d19      	adds	r1, r3, #4
 800b9ee:	6029      	str	r1, [r5, #0]
 800b9f0:	0601      	lsls	r1, r0, #24
 800b9f2:	d501      	bpl.n	800b9f8 <_printf_i+0xec>
 800b9f4:	681e      	ldr	r6, [r3, #0]
 800b9f6:	e002      	b.n	800b9fe <_printf_i+0xf2>
 800b9f8:	0646      	lsls	r6, r0, #25
 800b9fa:	d5fb      	bpl.n	800b9f4 <_printf_i+0xe8>
 800b9fc:	881e      	ldrh	r6, [r3, #0]
 800b9fe:	4854      	ldr	r0, [pc, #336]	; (800bb50 <_printf_i+0x244>)
 800ba00:	2f6f      	cmp	r7, #111	; 0x6f
 800ba02:	bf0c      	ite	eq
 800ba04:	2308      	moveq	r3, #8
 800ba06:	230a      	movne	r3, #10
 800ba08:	2100      	movs	r1, #0
 800ba0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba0e:	6865      	ldr	r5, [r4, #4]
 800ba10:	60a5      	str	r5, [r4, #8]
 800ba12:	2d00      	cmp	r5, #0
 800ba14:	bfa2      	ittt	ge
 800ba16:	6821      	ldrge	r1, [r4, #0]
 800ba18:	f021 0104 	bicge.w	r1, r1, #4
 800ba1c:	6021      	strge	r1, [r4, #0]
 800ba1e:	b90e      	cbnz	r6, 800ba24 <_printf_i+0x118>
 800ba20:	2d00      	cmp	r5, #0
 800ba22:	d04d      	beq.n	800bac0 <_printf_i+0x1b4>
 800ba24:	4615      	mov	r5, r2
 800ba26:	fbb6 f1f3 	udiv	r1, r6, r3
 800ba2a:	fb03 6711 	mls	r7, r3, r1, r6
 800ba2e:	5dc7      	ldrb	r7, [r0, r7]
 800ba30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ba34:	4637      	mov	r7, r6
 800ba36:	42bb      	cmp	r3, r7
 800ba38:	460e      	mov	r6, r1
 800ba3a:	d9f4      	bls.n	800ba26 <_printf_i+0x11a>
 800ba3c:	2b08      	cmp	r3, #8
 800ba3e:	d10b      	bne.n	800ba58 <_printf_i+0x14c>
 800ba40:	6823      	ldr	r3, [r4, #0]
 800ba42:	07de      	lsls	r6, r3, #31
 800ba44:	d508      	bpl.n	800ba58 <_printf_i+0x14c>
 800ba46:	6923      	ldr	r3, [r4, #16]
 800ba48:	6861      	ldr	r1, [r4, #4]
 800ba4a:	4299      	cmp	r1, r3
 800ba4c:	bfde      	ittt	le
 800ba4e:	2330      	movle	r3, #48	; 0x30
 800ba50:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ba54:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ba58:	1b52      	subs	r2, r2, r5
 800ba5a:	6122      	str	r2, [r4, #16]
 800ba5c:	f8cd a000 	str.w	sl, [sp]
 800ba60:	464b      	mov	r3, r9
 800ba62:	aa03      	add	r2, sp, #12
 800ba64:	4621      	mov	r1, r4
 800ba66:	4640      	mov	r0, r8
 800ba68:	f7ff fee2 	bl	800b830 <_printf_common>
 800ba6c:	3001      	adds	r0, #1
 800ba6e:	d14c      	bne.n	800bb0a <_printf_i+0x1fe>
 800ba70:	f04f 30ff 	mov.w	r0, #4294967295
 800ba74:	b004      	add	sp, #16
 800ba76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba7a:	4835      	ldr	r0, [pc, #212]	; (800bb50 <_printf_i+0x244>)
 800ba7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ba80:	6829      	ldr	r1, [r5, #0]
 800ba82:	6823      	ldr	r3, [r4, #0]
 800ba84:	f851 6b04 	ldr.w	r6, [r1], #4
 800ba88:	6029      	str	r1, [r5, #0]
 800ba8a:	061d      	lsls	r5, r3, #24
 800ba8c:	d514      	bpl.n	800bab8 <_printf_i+0x1ac>
 800ba8e:	07df      	lsls	r7, r3, #31
 800ba90:	bf44      	itt	mi
 800ba92:	f043 0320 	orrmi.w	r3, r3, #32
 800ba96:	6023      	strmi	r3, [r4, #0]
 800ba98:	b91e      	cbnz	r6, 800baa2 <_printf_i+0x196>
 800ba9a:	6823      	ldr	r3, [r4, #0]
 800ba9c:	f023 0320 	bic.w	r3, r3, #32
 800baa0:	6023      	str	r3, [r4, #0]
 800baa2:	2310      	movs	r3, #16
 800baa4:	e7b0      	b.n	800ba08 <_printf_i+0xfc>
 800baa6:	6823      	ldr	r3, [r4, #0]
 800baa8:	f043 0320 	orr.w	r3, r3, #32
 800baac:	6023      	str	r3, [r4, #0]
 800baae:	2378      	movs	r3, #120	; 0x78
 800bab0:	4828      	ldr	r0, [pc, #160]	; (800bb54 <_printf_i+0x248>)
 800bab2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bab6:	e7e3      	b.n	800ba80 <_printf_i+0x174>
 800bab8:	0659      	lsls	r1, r3, #25
 800baba:	bf48      	it	mi
 800babc:	b2b6      	uxthmi	r6, r6
 800babe:	e7e6      	b.n	800ba8e <_printf_i+0x182>
 800bac0:	4615      	mov	r5, r2
 800bac2:	e7bb      	b.n	800ba3c <_printf_i+0x130>
 800bac4:	682b      	ldr	r3, [r5, #0]
 800bac6:	6826      	ldr	r6, [r4, #0]
 800bac8:	6961      	ldr	r1, [r4, #20]
 800baca:	1d18      	adds	r0, r3, #4
 800bacc:	6028      	str	r0, [r5, #0]
 800bace:	0635      	lsls	r5, r6, #24
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	d501      	bpl.n	800bad8 <_printf_i+0x1cc>
 800bad4:	6019      	str	r1, [r3, #0]
 800bad6:	e002      	b.n	800bade <_printf_i+0x1d2>
 800bad8:	0670      	lsls	r0, r6, #25
 800bada:	d5fb      	bpl.n	800bad4 <_printf_i+0x1c8>
 800badc:	8019      	strh	r1, [r3, #0]
 800bade:	2300      	movs	r3, #0
 800bae0:	6123      	str	r3, [r4, #16]
 800bae2:	4615      	mov	r5, r2
 800bae4:	e7ba      	b.n	800ba5c <_printf_i+0x150>
 800bae6:	682b      	ldr	r3, [r5, #0]
 800bae8:	1d1a      	adds	r2, r3, #4
 800baea:	602a      	str	r2, [r5, #0]
 800baec:	681d      	ldr	r5, [r3, #0]
 800baee:	6862      	ldr	r2, [r4, #4]
 800baf0:	2100      	movs	r1, #0
 800baf2:	4628      	mov	r0, r5
 800baf4:	f7f4 fb74 	bl	80001e0 <memchr>
 800baf8:	b108      	cbz	r0, 800bafe <_printf_i+0x1f2>
 800bafa:	1b40      	subs	r0, r0, r5
 800bafc:	6060      	str	r0, [r4, #4]
 800bafe:	6863      	ldr	r3, [r4, #4]
 800bb00:	6123      	str	r3, [r4, #16]
 800bb02:	2300      	movs	r3, #0
 800bb04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb08:	e7a8      	b.n	800ba5c <_printf_i+0x150>
 800bb0a:	6923      	ldr	r3, [r4, #16]
 800bb0c:	462a      	mov	r2, r5
 800bb0e:	4649      	mov	r1, r9
 800bb10:	4640      	mov	r0, r8
 800bb12:	47d0      	blx	sl
 800bb14:	3001      	adds	r0, #1
 800bb16:	d0ab      	beq.n	800ba70 <_printf_i+0x164>
 800bb18:	6823      	ldr	r3, [r4, #0]
 800bb1a:	079b      	lsls	r3, r3, #30
 800bb1c:	d413      	bmi.n	800bb46 <_printf_i+0x23a>
 800bb1e:	68e0      	ldr	r0, [r4, #12]
 800bb20:	9b03      	ldr	r3, [sp, #12]
 800bb22:	4298      	cmp	r0, r3
 800bb24:	bfb8      	it	lt
 800bb26:	4618      	movlt	r0, r3
 800bb28:	e7a4      	b.n	800ba74 <_printf_i+0x168>
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	4632      	mov	r2, r6
 800bb2e:	4649      	mov	r1, r9
 800bb30:	4640      	mov	r0, r8
 800bb32:	47d0      	blx	sl
 800bb34:	3001      	adds	r0, #1
 800bb36:	d09b      	beq.n	800ba70 <_printf_i+0x164>
 800bb38:	3501      	adds	r5, #1
 800bb3a:	68e3      	ldr	r3, [r4, #12]
 800bb3c:	9903      	ldr	r1, [sp, #12]
 800bb3e:	1a5b      	subs	r3, r3, r1
 800bb40:	42ab      	cmp	r3, r5
 800bb42:	dcf2      	bgt.n	800bb2a <_printf_i+0x21e>
 800bb44:	e7eb      	b.n	800bb1e <_printf_i+0x212>
 800bb46:	2500      	movs	r5, #0
 800bb48:	f104 0619 	add.w	r6, r4, #25
 800bb4c:	e7f5      	b.n	800bb3a <_printf_i+0x22e>
 800bb4e:	bf00      	nop
 800bb50:	080aeeb6 	.word	0x080aeeb6
 800bb54:	080aeec7 	.word	0x080aeec7

0800bb58 <_scanf_float>:
 800bb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb5c:	b087      	sub	sp, #28
 800bb5e:	4617      	mov	r7, r2
 800bb60:	9303      	str	r3, [sp, #12]
 800bb62:	688b      	ldr	r3, [r1, #8]
 800bb64:	1e5a      	subs	r2, r3, #1
 800bb66:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bb6a:	bf83      	ittte	hi
 800bb6c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bb70:	195b      	addhi	r3, r3, r5
 800bb72:	9302      	strhi	r3, [sp, #8]
 800bb74:	2300      	movls	r3, #0
 800bb76:	bf86      	itte	hi
 800bb78:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bb7c:	608b      	strhi	r3, [r1, #8]
 800bb7e:	9302      	strls	r3, [sp, #8]
 800bb80:	680b      	ldr	r3, [r1, #0]
 800bb82:	468b      	mov	fp, r1
 800bb84:	2500      	movs	r5, #0
 800bb86:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800bb8a:	f84b 3b1c 	str.w	r3, [fp], #28
 800bb8e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bb92:	4680      	mov	r8, r0
 800bb94:	460c      	mov	r4, r1
 800bb96:	465e      	mov	r6, fp
 800bb98:	46aa      	mov	sl, r5
 800bb9a:	46a9      	mov	r9, r5
 800bb9c:	9501      	str	r5, [sp, #4]
 800bb9e:	68a2      	ldr	r2, [r4, #8]
 800bba0:	b152      	cbz	r2, 800bbb8 <_scanf_float+0x60>
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	781b      	ldrb	r3, [r3, #0]
 800bba6:	2b4e      	cmp	r3, #78	; 0x4e
 800bba8:	d864      	bhi.n	800bc74 <_scanf_float+0x11c>
 800bbaa:	2b40      	cmp	r3, #64	; 0x40
 800bbac:	d83c      	bhi.n	800bc28 <_scanf_float+0xd0>
 800bbae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800bbb2:	b2c8      	uxtb	r0, r1
 800bbb4:	280e      	cmp	r0, #14
 800bbb6:	d93a      	bls.n	800bc2e <_scanf_float+0xd6>
 800bbb8:	f1b9 0f00 	cmp.w	r9, #0
 800bbbc:	d003      	beq.n	800bbc6 <_scanf_float+0x6e>
 800bbbe:	6823      	ldr	r3, [r4, #0]
 800bbc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bbc4:	6023      	str	r3, [r4, #0]
 800bbc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bbca:	f1ba 0f01 	cmp.w	sl, #1
 800bbce:	f200 8113 	bhi.w	800bdf8 <_scanf_float+0x2a0>
 800bbd2:	455e      	cmp	r6, fp
 800bbd4:	f200 8105 	bhi.w	800bde2 <_scanf_float+0x28a>
 800bbd8:	2501      	movs	r5, #1
 800bbda:	4628      	mov	r0, r5
 800bbdc:	b007      	add	sp, #28
 800bbde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbe2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800bbe6:	2a0d      	cmp	r2, #13
 800bbe8:	d8e6      	bhi.n	800bbb8 <_scanf_float+0x60>
 800bbea:	a101      	add	r1, pc, #4	; (adr r1, 800bbf0 <_scanf_float+0x98>)
 800bbec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bbf0:	0800bd2f 	.word	0x0800bd2f
 800bbf4:	0800bbb9 	.word	0x0800bbb9
 800bbf8:	0800bbb9 	.word	0x0800bbb9
 800bbfc:	0800bbb9 	.word	0x0800bbb9
 800bc00:	0800bd8f 	.word	0x0800bd8f
 800bc04:	0800bd67 	.word	0x0800bd67
 800bc08:	0800bbb9 	.word	0x0800bbb9
 800bc0c:	0800bbb9 	.word	0x0800bbb9
 800bc10:	0800bd3d 	.word	0x0800bd3d
 800bc14:	0800bbb9 	.word	0x0800bbb9
 800bc18:	0800bbb9 	.word	0x0800bbb9
 800bc1c:	0800bbb9 	.word	0x0800bbb9
 800bc20:	0800bbb9 	.word	0x0800bbb9
 800bc24:	0800bcf5 	.word	0x0800bcf5
 800bc28:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800bc2c:	e7db      	b.n	800bbe6 <_scanf_float+0x8e>
 800bc2e:	290e      	cmp	r1, #14
 800bc30:	d8c2      	bhi.n	800bbb8 <_scanf_float+0x60>
 800bc32:	a001      	add	r0, pc, #4	; (adr r0, 800bc38 <_scanf_float+0xe0>)
 800bc34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bc38:	0800bce7 	.word	0x0800bce7
 800bc3c:	0800bbb9 	.word	0x0800bbb9
 800bc40:	0800bce7 	.word	0x0800bce7
 800bc44:	0800bd7b 	.word	0x0800bd7b
 800bc48:	0800bbb9 	.word	0x0800bbb9
 800bc4c:	0800bc95 	.word	0x0800bc95
 800bc50:	0800bcd1 	.word	0x0800bcd1
 800bc54:	0800bcd1 	.word	0x0800bcd1
 800bc58:	0800bcd1 	.word	0x0800bcd1
 800bc5c:	0800bcd1 	.word	0x0800bcd1
 800bc60:	0800bcd1 	.word	0x0800bcd1
 800bc64:	0800bcd1 	.word	0x0800bcd1
 800bc68:	0800bcd1 	.word	0x0800bcd1
 800bc6c:	0800bcd1 	.word	0x0800bcd1
 800bc70:	0800bcd1 	.word	0x0800bcd1
 800bc74:	2b6e      	cmp	r3, #110	; 0x6e
 800bc76:	d809      	bhi.n	800bc8c <_scanf_float+0x134>
 800bc78:	2b60      	cmp	r3, #96	; 0x60
 800bc7a:	d8b2      	bhi.n	800bbe2 <_scanf_float+0x8a>
 800bc7c:	2b54      	cmp	r3, #84	; 0x54
 800bc7e:	d077      	beq.n	800bd70 <_scanf_float+0x218>
 800bc80:	2b59      	cmp	r3, #89	; 0x59
 800bc82:	d199      	bne.n	800bbb8 <_scanf_float+0x60>
 800bc84:	2d07      	cmp	r5, #7
 800bc86:	d197      	bne.n	800bbb8 <_scanf_float+0x60>
 800bc88:	2508      	movs	r5, #8
 800bc8a:	e029      	b.n	800bce0 <_scanf_float+0x188>
 800bc8c:	2b74      	cmp	r3, #116	; 0x74
 800bc8e:	d06f      	beq.n	800bd70 <_scanf_float+0x218>
 800bc90:	2b79      	cmp	r3, #121	; 0x79
 800bc92:	e7f6      	b.n	800bc82 <_scanf_float+0x12a>
 800bc94:	6821      	ldr	r1, [r4, #0]
 800bc96:	05c8      	lsls	r0, r1, #23
 800bc98:	d51a      	bpl.n	800bcd0 <_scanf_float+0x178>
 800bc9a:	9b02      	ldr	r3, [sp, #8]
 800bc9c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bca0:	6021      	str	r1, [r4, #0]
 800bca2:	f109 0901 	add.w	r9, r9, #1
 800bca6:	b11b      	cbz	r3, 800bcb0 <_scanf_float+0x158>
 800bca8:	3b01      	subs	r3, #1
 800bcaa:	3201      	adds	r2, #1
 800bcac:	9302      	str	r3, [sp, #8]
 800bcae:	60a2      	str	r2, [r4, #8]
 800bcb0:	68a3      	ldr	r3, [r4, #8]
 800bcb2:	3b01      	subs	r3, #1
 800bcb4:	60a3      	str	r3, [r4, #8]
 800bcb6:	6923      	ldr	r3, [r4, #16]
 800bcb8:	3301      	adds	r3, #1
 800bcba:	6123      	str	r3, [r4, #16]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	3b01      	subs	r3, #1
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	607b      	str	r3, [r7, #4]
 800bcc4:	f340 8084 	ble.w	800bdd0 <_scanf_float+0x278>
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	3301      	adds	r3, #1
 800bccc:	603b      	str	r3, [r7, #0]
 800bcce:	e766      	b.n	800bb9e <_scanf_float+0x46>
 800bcd0:	eb1a 0f05 	cmn.w	sl, r5
 800bcd4:	f47f af70 	bne.w	800bbb8 <_scanf_float+0x60>
 800bcd8:	6822      	ldr	r2, [r4, #0]
 800bcda:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800bcde:	6022      	str	r2, [r4, #0]
 800bce0:	f806 3b01 	strb.w	r3, [r6], #1
 800bce4:	e7e4      	b.n	800bcb0 <_scanf_float+0x158>
 800bce6:	6822      	ldr	r2, [r4, #0]
 800bce8:	0610      	lsls	r0, r2, #24
 800bcea:	f57f af65 	bpl.w	800bbb8 <_scanf_float+0x60>
 800bcee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bcf2:	e7f4      	b.n	800bcde <_scanf_float+0x186>
 800bcf4:	f1ba 0f00 	cmp.w	sl, #0
 800bcf8:	d10e      	bne.n	800bd18 <_scanf_float+0x1c0>
 800bcfa:	f1b9 0f00 	cmp.w	r9, #0
 800bcfe:	d10e      	bne.n	800bd1e <_scanf_float+0x1c6>
 800bd00:	6822      	ldr	r2, [r4, #0]
 800bd02:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bd06:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bd0a:	d108      	bne.n	800bd1e <_scanf_float+0x1c6>
 800bd0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bd10:	6022      	str	r2, [r4, #0]
 800bd12:	f04f 0a01 	mov.w	sl, #1
 800bd16:	e7e3      	b.n	800bce0 <_scanf_float+0x188>
 800bd18:	f1ba 0f02 	cmp.w	sl, #2
 800bd1c:	d055      	beq.n	800bdca <_scanf_float+0x272>
 800bd1e:	2d01      	cmp	r5, #1
 800bd20:	d002      	beq.n	800bd28 <_scanf_float+0x1d0>
 800bd22:	2d04      	cmp	r5, #4
 800bd24:	f47f af48 	bne.w	800bbb8 <_scanf_float+0x60>
 800bd28:	3501      	adds	r5, #1
 800bd2a:	b2ed      	uxtb	r5, r5
 800bd2c:	e7d8      	b.n	800bce0 <_scanf_float+0x188>
 800bd2e:	f1ba 0f01 	cmp.w	sl, #1
 800bd32:	f47f af41 	bne.w	800bbb8 <_scanf_float+0x60>
 800bd36:	f04f 0a02 	mov.w	sl, #2
 800bd3a:	e7d1      	b.n	800bce0 <_scanf_float+0x188>
 800bd3c:	b97d      	cbnz	r5, 800bd5e <_scanf_float+0x206>
 800bd3e:	f1b9 0f00 	cmp.w	r9, #0
 800bd42:	f47f af3c 	bne.w	800bbbe <_scanf_float+0x66>
 800bd46:	6822      	ldr	r2, [r4, #0]
 800bd48:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bd4c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bd50:	f47f af39 	bne.w	800bbc6 <_scanf_float+0x6e>
 800bd54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bd58:	6022      	str	r2, [r4, #0]
 800bd5a:	2501      	movs	r5, #1
 800bd5c:	e7c0      	b.n	800bce0 <_scanf_float+0x188>
 800bd5e:	2d03      	cmp	r5, #3
 800bd60:	d0e2      	beq.n	800bd28 <_scanf_float+0x1d0>
 800bd62:	2d05      	cmp	r5, #5
 800bd64:	e7de      	b.n	800bd24 <_scanf_float+0x1cc>
 800bd66:	2d02      	cmp	r5, #2
 800bd68:	f47f af26 	bne.w	800bbb8 <_scanf_float+0x60>
 800bd6c:	2503      	movs	r5, #3
 800bd6e:	e7b7      	b.n	800bce0 <_scanf_float+0x188>
 800bd70:	2d06      	cmp	r5, #6
 800bd72:	f47f af21 	bne.w	800bbb8 <_scanf_float+0x60>
 800bd76:	2507      	movs	r5, #7
 800bd78:	e7b2      	b.n	800bce0 <_scanf_float+0x188>
 800bd7a:	6822      	ldr	r2, [r4, #0]
 800bd7c:	0591      	lsls	r1, r2, #22
 800bd7e:	f57f af1b 	bpl.w	800bbb8 <_scanf_float+0x60>
 800bd82:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800bd86:	6022      	str	r2, [r4, #0]
 800bd88:	f8cd 9004 	str.w	r9, [sp, #4]
 800bd8c:	e7a8      	b.n	800bce0 <_scanf_float+0x188>
 800bd8e:	6822      	ldr	r2, [r4, #0]
 800bd90:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800bd94:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bd98:	d006      	beq.n	800bda8 <_scanf_float+0x250>
 800bd9a:	0550      	lsls	r0, r2, #21
 800bd9c:	f57f af0c 	bpl.w	800bbb8 <_scanf_float+0x60>
 800bda0:	f1b9 0f00 	cmp.w	r9, #0
 800bda4:	f43f af0f 	beq.w	800bbc6 <_scanf_float+0x6e>
 800bda8:	0591      	lsls	r1, r2, #22
 800bdaa:	bf58      	it	pl
 800bdac:	9901      	ldrpl	r1, [sp, #4]
 800bdae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bdb2:	bf58      	it	pl
 800bdb4:	eba9 0101 	subpl.w	r1, r9, r1
 800bdb8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800bdbc:	bf58      	it	pl
 800bdbe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bdc2:	6022      	str	r2, [r4, #0]
 800bdc4:	f04f 0900 	mov.w	r9, #0
 800bdc8:	e78a      	b.n	800bce0 <_scanf_float+0x188>
 800bdca:	f04f 0a03 	mov.w	sl, #3
 800bdce:	e787      	b.n	800bce0 <_scanf_float+0x188>
 800bdd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bdd4:	4639      	mov	r1, r7
 800bdd6:	4640      	mov	r0, r8
 800bdd8:	4798      	blx	r3
 800bdda:	2800      	cmp	r0, #0
 800bddc:	f43f aedf 	beq.w	800bb9e <_scanf_float+0x46>
 800bde0:	e6ea      	b.n	800bbb8 <_scanf_float+0x60>
 800bde2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bde6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bdea:	463a      	mov	r2, r7
 800bdec:	4640      	mov	r0, r8
 800bdee:	4798      	blx	r3
 800bdf0:	6923      	ldr	r3, [r4, #16]
 800bdf2:	3b01      	subs	r3, #1
 800bdf4:	6123      	str	r3, [r4, #16]
 800bdf6:	e6ec      	b.n	800bbd2 <_scanf_float+0x7a>
 800bdf8:	1e6b      	subs	r3, r5, #1
 800bdfa:	2b06      	cmp	r3, #6
 800bdfc:	d825      	bhi.n	800be4a <_scanf_float+0x2f2>
 800bdfe:	2d02      	cmp	r5, #2
 800be00:	d836      	bhi.n	800be70 <_scanf_float+0x318>
 800be02:	455e      	cmp	r6, fp
 800be04:	f67f aee8 	bls.w	800bbd8 <_scanf_float+0x80>
 800be08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800be0c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800be10:	463a      	mov	r2, r7
 800be12:	4640      	mov	r0, r8
 800be14:	4798      	blx	r3
 800be16:	6923      	ldr	r3, [r4, #16]
 800be18:	3b01      	subs	r3, #1
 800be1a:	6123      	str	r3, [r4, #16]
 800be1c:	e7f1      	b.n	800be02 <_scanf_float+0x2aa>
 800be1e:	9802      	ldr	r0, [sp, #8]
 800be20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800be24:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800be28:	9002      	str	r0, [sp, #8]
 800be2a:	463a      	mov	r2, r7
 800be2c:	4640      	mov	r0, r8
 800be2e:	4798      	blx	r3
 800be30:	6923      	ldr	r3, [r4, #16]
 800be32:	3b01      	subs	r3, #1
 800be34:	6123      	str	r3, [r4, #16]
 800be36:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be3a:	fa5f fa8a 	uxtb.w	sl, sl
 800be3e:	f1ba 0f02 	cmp.w	sl, #2
 800be42:	d1ec      	bne.n	800be1e <_scanf_float+0x2c6>
 800be44:	3d03      	subs	r5, #3
 800be46:	b2ed      	uxtb	r5, r5
 800be48:	1b76      	subs	r6, r6, r5
 800be4a:	6823      	ldr	r3, [r4, #0]
 800be4c:	05da      	lsls	r2, r3, #23
 800be4e:	d52f      	bpl.n	800beb0 <_scanf_float+0x358>
 800be50:	055b      	lsls	r3, r3, #21
 800be52:	d510      	bpl.n	800be76 <_scanf_float+0x31e>
 800be54:	455e      	cmp	r6, fp
 800be56:	f67f aebf 	bls.w	800bbd8 <_scanf_float+0x80>
 800be5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800be5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800be62:	463a      	mov	r2, r7
 800be64:	4640      	mov	r0, r8
 800be66:	4798      	blx	r3
 800be68:	6923      	ldr	r3, [r4, #16]
 800be6a:	3b01      	subs	r3, #1
 800be6c:	6123      	str	r3, [r4, #16]
 800be6e:	e7f1      	b.n	800be54 <_scanf_float+0x2fc>
 800be70:	46aa      	mov	sl, r5
 800be72:	9602      	str	r6, [sp, #8]
 800be74:	e7df      	b.n	800be36 <_scanf_float+0x2de>
 800be76:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800be7a:	6923      	ldr	r3, [r4, #16]
 800be7c:	2965      	cmp	r1, #101	; 0x65
 800be7e:	f103 33ff 	add.w	r3, r3, #4294967295
 800be82:	f106 35ff 	add.w	r5, r6, #4294967295
 800be86:	6123      	str	r3, [r4, #16]
 800be88:	d00c      	beq.n	800bea4 <_scanf_float+0x34c>
 800be8a:	2945      	cmp	r1, #69	; 0x45
 800be8c:	d00a      	beq.n	800bea4 <_scanf_float+0x34c>
 800be8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800be92:	463a      	mov	r2, r7
 800be94:	4640      	mov	r0, r8
 800be96:	4798      	blx	r3
 800be98:	6923      	ldr	r3, [r4, #16]
 800be9a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800be9e:	3b01      	subs	r3, #1
 800bea0:	1eb5      	subs	r5, r6, #2
 800bea2:	6123      	str	r3, [r4, #16]
 800bea4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bea8:	463a      	mov	r2, r7
 800beaa:	4640      	mov	r0, r8
 800beac:	4798      	blx	r3
 800beae:	462e      	mov	r6, r5
 800beb0:	6825      	ldr	r5, [r4, #0]
 800beb2:	f015 0510 	ands.w	r5, r5, #16
 800beb6:	d159      	bne.n	800bf6c <_scanf_float+0x414>
 800beb8:	7035      	strb	r5, [r6, #0]
 800beba:	6823      	ldr	r3, [r4, #0]
 800bebc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bec4:	d11b      	bne.n	800befe <_scanf_float+0x3a6>
 800bec6:	9b01      	ldr	r3, [sp, #4]
 800bec8:	454b      	cmp	r3, r9
 800beca:	eba3 0209 	sub.w	r2, r3, r9
 800bece:	d123      	bne.n	800bf18 <_scanf_float+0x3c0>
 800bed0:	2200      	movs	r2, #0
 800bed2:	4659      	mov	r1, fp
 800bed4:	4640      	mov	r0, r8
 800bed6:	f000 ff35 	bl	800cd44 <_strtod_r>
 800beda:	6822      	ldr	r2, [r4, #0]
 800bedc:	9b03      	ldr	r3, [sp, #12]
 800bede:	f012 0f02 	tst.w	r2, #2
 800bee2:	ec57 6b10 	vmov	r6, r7, d0
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	d021      	beq.n	800bf2e <_scanf_float+0x3d6>
 800beea:	9903      	ldr	r1, [sp, #12]
 800beec:	1d1a      	adds	r2, r3, #4
 800beee:	600a      	str	r2, [r1, #0]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	e9c3 6700 	strd	r6, r7, [r3]
 800bef6:	68e3      	ldr	r3, [r4, #12]
 800bef8:	3301      	adds	r3, #1
 800befa:	60e3      	str	r3, [r4, #12]
 800befc:	e66d      	b.n	800bbda <_scanf_float+0x82>
 800befe:	9b04      	ldr	r3, [sp, #16]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d0e5      	beq.n	800bed0 <_scanf_float+0x378>
 800bf04:	9905      	ldr	r1, [sp, #20]
 800bf06:	230a      	movs	r3, #10
 800bf08:	462a      	mov	r2, r5
 800bf0a:	3101      	adds	r1, #1
 800bf0c:	4640      	mov	r0, r8
 800bf0e:	f000 ffa1 	bl	800ce54 <_strtol_r>
 800bf12:	9b04      	ldr	r3, [sp, #16]
 800bf14:	9e05      	ldr	r6, [sp, #20]
 800bf16:	1ac2      	subs	r2, r0, r3
 800bf18:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800bf1c:	429e      	cmp	r6, r3
 800bf1e:	bf28      	it	cs
 800bf20:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800bf24:	4912      	ldr	r1, [pc, #72]	; (800bf70 <_scanf_float+0x418>)
 800bf26:	4630      	mov	r0, r6
 800bf28:	f000 f8ca 	bl	800c0c0 <siprintf>
 800bf2c:	e7d0      	b.n	800bed0 <_scanf_float+0x378>
 800bf2e:	9903      	ldr	r1, [sp, #12]
 800bf30:	f012 0f04 	tst.w	r2, #4
 800bf34:	f103 0204 	add.w	r2, r3, #4
 800bf38:	600a      	str	r2, [r1, #0]
 800bf3a:	d1d9      	bne.n	800bef0 <_scanf_float+0x398>
 800bf3c:	f8d3 8000 	ldr.w	r8, [r3]
 800bf40:	ee10 2a10 	vmov	r2, s0
 800bf44:	ee10 0a10 	vmov	r0, s0
 800bf48:	463b      	mov	r3, r7
 800bf4a:	4639      	mov	r1, r7
 800bf4c:	f7f4 fdee 	bl	8000b2c <__aeabi_dcmpun>
 800bf50:	b128      	cbz	r0, 800bf5e <_scanf_float+0x406>
 800bf52:	4808      	ldr	r0, [pc, #32]	; (800bf74 <_scanf_float+0x41c>)
 800bf54:	f000 f8ae 	bl	800c0b4 <nanf>
 800bf58:	ed88 0a00 	vstr	s0, [r8]
 800bf5c:	e7cb      	b.n	800bef6 <_scanf_float+0x39e>
 800bf5e:	4630      	mov	r0, r6
 800bf60:	4639      	mov	r1, r7
 800bf62:	f7f4 fe41 	bl	8000be8 <__aeabi_d2f>
 800bf66:	f8c8 0000 	str.w	r0, [r8]
 800bf6a:	e7c4      	b.n	800bef6 <_scanf_float+0x39e>
 800bf6c:	2500      	movs	r5, #0
 800bf6e:	e634      	b.n	800bbda <_scanf_float+0x82>
 800bf70:	080aeed8 	.word	0x080aeed8
 800bf74:	080af348 	.word	0x080af348

0800bf78 <iprintf>:
 800bf78:	b40f      	push	{r0, r1, r2, r3}
 800bf7a:	4b0a      	ldr	r3, [pc, #40]	; (800bfa4 <iprintf+0x2c>)
 800bf7c:	b513      	push	{r0, r1, r4, lr}
 800bf7e:	681c      	ldr	r4, [r3, #0]
 800bf80:	b124      	cbz	r4, 800bf8c <iprintf+0x14>
 800bf82:	69a3      	ldr	r3, [r4, #24]
 800bf84:	b913      	cbnz	r3, 800bf8c <iprintf+0x14>
 800bf86:	4620      	mov	r0, r4
 800bf88:	f001 ffba 	bl	800df00 <__sinit>
 800bf8c:	ab05      	add	r3, sp, #20
 800bf8e:	9a04      	ldr	r2, [sp, #16]
 800bf90:	68a1      	ldr	r1, [r4, #8]
 800bf92:	9301      	str	r3, [sp, #4]
 800bf94:	4620      	mov	r0, r4
 800bf96:	f003 fad5 	bl	800f544 <_vfiprintf_r>
 800bf9a:	b002      	add	sp, #8
 800bf9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfa0:	b004      	add	sp, #16
 800bfa2:	4770      	bx	lr
 800bfa4:	200008e0 	.word	0x200008e0

0800bfa8 <_puts_r>:
 800bfa8:	b570      	push	{r4, r5, r6, lr}
 800bfaa:	460e      	mov	r6, r1
 800bfac:	4605      	mov	r5, r0
 800bfae:	b118      	cbz	r0, 800bfb8 <_puts_r+0x10>
 800bfb0:	6983      	ldr	r3, [r0, #24]
 800bfb2:	b90b      	cbnz	r3, 800bfb8 <_puts_r+0x10>
 800bfb4:	f001 ffa4 	bl	800df00 <__sinit>
 800bfb8:	69ab      	ldr	r3, [r5, #24]
 800bfba:	68ac      	ldr	r4, [r5, #8]
 800bfbc:	b913      	cbnz	r3, 800bfc4 <_puts_r+0x1c>
 800bfbe:	4628      	mov	r0, r5
 800bfc0:	f001 ff9e 	bl	800df00 <__sinit>
 800bfc4:	4b2c      	ldr	r3, [pc, #176]	; (800c078 <_puts_r+0xd0>)
 800bfc6:	429c      	cmp	r4, r3
 800bfc8:	d120      	bne.n	800c00c <_puts_r+0x64>
 800bfca:	686c      	ldr	r4, [r5, #4]
 800bfcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfce:	07db      	lsls	r3, r3, #31
 800bfd0:	d405      	bmi.n	800bfde <_puts_r+0x36>
 800bfd2:	89a3      	ldrh	r3, [r4, #12]
 800bfd4:	0598      	lsls	r0, r3, #22
 800bfd6:	d402      	bmi.n	800bfde <_puts_r+0x36>
 800bfd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfda:	f002 fba2 	bl	800e722 <__retarget_lock_acquire_recursive>
 800bfde:	89a3      	ldrh	r3, [r4, #12]
 800bfe0:	0719      	lsls	r1, r3, #28
 800bfe2:	d51d      	bpl.n	800c020 <_puts_r+0x78>
 800bfe4:	6923      	ldr	r3, [r4, #16]
 800bfe6:	b1db      	cbz	r3, 800c020 <_puts_r+0x78>
 800bfe8:	3e01      	subs	r6, #1
 800bfea:	68a3      	ldr	r3, [r4, #8]
 800bfec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bff0:	3b01      	subs	r3, #1
 800bff2:	60a3      	str	r3, [r4, #8]
 800bff4:	bb39      	cbnz	r1, 800c046 <_puts_r+0x9e>
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	da38      	bge.n	800c06c <_puts_r+0xc4>
 800bffa:	4622      	mov	r2, r4
 800bffc:	210a      	movs	r1, #10
 800bffe:	4628      	mov	r0, r5
 800c000:	f000 ff2a 	bl	800ce58 <__swbuf_r>
 800c004:	3001      	adds	r0, #1
 800c006:	d011      	beq.n	800c02c <_puts_r+0x84>
 800c008:	250a      	movs	r5, #10
 800c00a:	e011      	b.n	800c030 <_puts_r+0x88>
 800c00c:	4b1b      	ldr	r3, [pc, #108]	; (800c07c <_puts_r+0xd4>)
 800c00e:	429c      	cmp	r4, r3
 800c010:	d101      	bne.n	800c016 <_puts_r+0x6e>
 800c012:	68ac      	ldr	r4, [r5, #8]
 800c014:	e7da      	b.n	800bfcc <_puts_r+0x24>
 800c016:	4b1a      	ldr	r3, [pc, #104]	; (800c080 <_puts_r+0xd8>)
 800c018:	429c      	cmp	r4, r3
 800c01a:	bf08      	it	eq
 800c01c:	68ec      	ldreq	r4, [r5, #12]
 800c01e:	e7d5      	b.n	800bfcc <_puts_r+0x24>
 800c020:	4621      	mov	r1, r4
 800c022:	4628      	mov	r0, r5
 800c024:	f000 ff6a 	bl	800cefc <__swsetup_r>
 800c028:	2800      	cmp	r0, #0
 800c02a:	d0dd      	beq.n	800bfe8 <_puts_r+0x40>
 800c02c:	f04f 35ff 	mov.w	r5, #4294967295
 800c030:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c032:	07da      	lsls	r2, r3, #31
 800c034:	d405      	bmi.n	800c042 <_puts_r+0x9a>
 800c036:	89a3      	ldrh	r3, [r4, #12]
 800c038:	059b      	lsls	r3, r3, #22
 800c03a:	d402      	bmi.n	800c042 <_puts_r+0x9a>
 800c03c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c03e:	f002 fb71 	bl	800e724 <__retarget_lock_release_recursive>
 800c042:	4628      	mov	r0, r5
 800c044:	bd70      	pop	{r4, r5, r6, pc}
 800c046:	2b00      	cmp	r3, #0
 800c048:	da04      	bge.n	800c054 <_puts_r+0xac>
 800c04a:	69a2      	ldr	r2, [r4, #24]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	dc06      	bgt.n	800c05e <_puts_r+0xb6>
 800c050:	290a      	cmp	r1, #10
 800c052:	d004      	beq.n	800c05e <_puts_r+0xb6>
 800c054:	6823      	ldr	r3, [r4, #0]
 800c056:	1c5a      	adds	r2, r3, #1
 800c058:	6022      	str	r2, [r4, #0]
 800c05a:	7019      	strb	r1, [r3, #0]
 800c05c:	e7c5      	b.n	800bfea <_puts_r+0x42>
 800c05e:	4622      	mov	r2, r4
 800c060:	4628      	mov	r0, r5
 800c062:	f000 fef9 	bl	800ce58 <__swbuf_r>
 800c066:	3001      	adds	r0, #1
 800c068:	d1bf      	bne.n	800bfea <_puts_r+0x42>
 800c06a:	e7df      	b.n	800c02c <_puts_r+0x84>
 800c06c:	6823      	ldr	r3, [r4, #0]
 800c06e:	250a      	movs	r5, #10
 800c070:	1c5a      	adds	r2, r3, #1
 800c072:	6022      	str	r2, [r4, #0]
 800c074:	701d      	strb	r5, [r3, #0]
 800c076:	e7db      	b.n	800c030 <_puts_r+0x88>
 800c078:	080af0e4 	.word	0x080af0e4
 800c07c:	080af104 	.word	0x080af104
 800c080:	080af0c4 	.word	0x080af0c4

0800c084 <puts>:
 800c084:	4b02      	ldr	r3, [pc, #8]	; (800c090 <puts+0xc>)
 800c086:	4601      	mov	r1, r0
 800c088:	6818      	ldr	r0, [r3, #0]
 800c08a:	f7ff bf8d 	b.w	800bfa8 <_puts_r>
 800c08e:	bf00      	nop
 800c090:	200008e0 	.word	0x200008e0

0800c094 <_sbrk_r>:
 800c094:	b538      	push	{r3, r4, r5, lr}
 800c096:	4d06      	ldr	r5, [pc, #24]	; (800c0b0 <_sbrk_r+0x1c>)
 800c098:	2300      	movs	r3, #0
 800c09a:	4604      	mov	r4, r0
 800c09c:	4608      	mov	r0, r1
 800c09e:	602b      	str	r3, [r5, #0]
 800c0a0:	f7f6 f82c 	bl	80020fc <_sbrk>
 800c0a4:	1c43      	adds	r3, r0, #1
 800c0a6:	d102      	bne.n	800c0ae <_sbrk_r+0x1a>
 800c0a8:	682b      	ldr	r3, [r5, #0]
 800c0aa:	b103      	cbz	r3, 800c0ae <_sbrk_r+0x1a>
 800c0ac:	6023      	str	r3, [r4, #0]
 800c0ae:	bd38      	pop	{r3, r4, r5, pc}
 800c0b0:	2000b4f0 	.word	0x2000b4f0

0800c0b4 <nanf>:
 800c0b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c0bc <nanf+0x8>
 800c0b8:	4770      	bx	lr
 800c0ba:	bf00      	nop
 800c0bc:	7fc00000 	.word	0x7fc00000

0800c0c0 <siprintf>:
 800c0c0:	b40e      	push	{r1, r2, r3}
 800c0c2:	b500      	push	{lr}
 800c0c4:	b09c      	sub	sp, #112	; 0x70
 800c0c6:	ab1d      	add	r3, sp, #116	; 0x74
 800c0c8:	9002      	str	r0, [sp, #8]
 800c0ca:	9006      	str	r0, [sp, #24]
 800c0cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c0d0:	4809      	ldr	r0, [pc, #36]	; (800c0f8 <siprintf+0x38>)
 800c0d2:	9107      	str	r1, [sp, #28]
 800c0d4:	9104      	str	r1, [sp, #16]
 800c0d6:	4909      	ldr	r1, [pc, #36]	; (800c0fc <siprintf+0x3c>)
 800c0d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0dc:	9105      	str	r1, [sp, #20]
 800c0de:	6800      	ldr	r0, [r0, #0]
 800c0e0:	9301      	str	r3, [sp, #4]
 800c0e2:	a902      	add	r1, sp, #8
 800c0e4:	f003 f904 	bl	800f2f0 <_svfiprintf_r>
 800c0e8:	9b02      	ldr	r3, [sp, #8]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	701a      	strb	r2, [r3, #0]
 800c0ee:	b01c      	add	sp, #112	; 0x70
 800c0f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0f4:	b003      	add	sp, #12
 800c0f6:	4770      	bx	lr
 800c0f8:	200008e0 	.word	0x200008e0
 800c0fc:	ffff0208 	.word	0xffff0208

0800c100 <sulp>:
 800c100:	b570      	push	{r4, r5, r6, lr}
 800c102:	4604      	mov	r4, r0
 800c104:	460d      	mov	r5, r1
 800c106:	ec45 4b10 	vmov	d0, r4, r5
 800c10a:	4616      	mov	r6, r2
 800c10c:	f002 ff00 	bl	800ef10 <__ulp>
 800c110:	ec51 0b10 	vmov	r0, r1, d0
 800c114:	b17e      	cbz	r6, 800c136 <sulp+0x36>
 800c116:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c11a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c11e:	2b00      	cmp	r3, #0
 800c120:	dd09      	ble.n	800c136 <sulp+0x36>
 800c122:	051b      	lsls	r3, r3, #20
 800c124:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c128:	2400      	movs	r4, #0
 800c12a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c12e:	4622      	mov	r2, r4
 800c130:	462b      	mov	r3, r5
 800c132:	f7f4 fa61 	bl	80005f8 <__aeabi_dmul>
 800c136:	bd70      	pop	{r4, r5, r6, pc}

0800c138 <_strtod_l>:
 800c138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c13c:	ed2d 8b02 	vpush	{d8}
 800c140:	b09d      	sub	sp, #116	; 0x74
 800c142:	461f      	mov	r7, r3
 800c144:	2300      	movs	r3, #0
 800c146:	9318      	str	r3, [sp, #96]	; 0x60
 800c148:	4ba2      	ldr	r3, [pc, #648]	; (800c3d4 <_strtod_l+0x29c>)
 800c14a:	9213      	str	r2, [sp, #76]	; 0x4c
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	9305      	str	r3, [sp, #20]
 800c150:	4604      	mov	r4, r0
 800c152:	4618      	mov	r0, r3
 800c154:	4688      	mov	r8, r1
 800c156:	f7f4 f83b 	bl	80001d0 <strlen>
 800c15a:	f04f 0a00 	mov.w	sl, #0
 800c15e:	4605      	mov	r5, r0
 800c160:	f04f 0b00 	mov.w	fp, #0
 800c164:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c168:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c16a:	781a      	ldrb	r2, [r3, #0]
 800c16c:	2a2b      	cmp	r2, #43	; 0x2b
 800c16e:	d04e      	beq.n	800c20e <_strtod_l+0xd6>
 800c170:	d83b      	bhi.n	800c1ea <_strtod_l+0xb2>
 800c172:	2a0d      	cmp	r2, #13
 800c174:	d834      	bhi.n	800c1e0 <_strtod_l+0xa8>
 800c176:	2a08      	cmp	r2, #8
 800c178:	d834      	bhi.n	800c1e4 <_strtod_l+0xac>
 800c17a:	2a00      	cmp	r2, #0
 800c17c:	d03e      	beq.n	800c1fc <_strtod_l+0xc4>
 800c17e:	2300      	movs	r3, #0
 800c180:	930a      	str	r3, [sp, #40]	; 0x28
 800c182:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c184:	7833      	ldrb	r3, [r6, #0]
 800c186:	2b30      	cmp	r3, #48	; 0x30
 800c188:	f040 80b0 	bne.w	800c2ec <_strtod_l+0x1b4>
 800c18c:	7873      	ldrb	r3, [r6, #1]
 800c18e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c192:	2b58      	cmp	r3, #88	; 0x58
 800c194:	d168      	bne.n	800c268 <_strtod_l+0x130>
 800c196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c198:	9301      	str	r3, [sp, #4]
 800c19a:	ab18      	add	r3, sp, #96	; 0x60
 800c19c:	9702      	str	r7, [sp, #8]
 800c19e:	9300      	str	r3, [sp, #0]
 800c1a0:	4a8d      	ldr	r2, [pc, #564]	; (800c3d8 <_strtod_l+0x2a0>)
 800c1a2:	ab19      	add	r3, sp, #100	; 0x64
 800c1a4:	a917      	add	r1, sp, #92	; 0x5c
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	f001 ffae 	bl	800e108 <__gethex>
 800c1ac:	f010 0707 	ands.w	r7, r0, #7
 800c1b0:	4605      	mov	r5, r0
 800c1b2:	d005      	beq.n	800c1c0 <_strtod_l+0x88>
 800c1b4:	2f06      	cmp	r7, #6
 800c1b6:	d12c      	bne.n	800c212 <_strtod_l+0xda>
 800c1b8:	3601      	adds	r6, #1
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	9617      	str	r6, [sp, #92]	; 0x5c
 800c1be:	930a      	str	r3, [sp, #40]	; 0x28
 800c1c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	f040 8590 	bne.w	800cce8 <_strtod_l+0xbb0>
 800c1c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1ca:	b1eb      	cbz	r3, 800c208 <_strtod_l+0xd0>
 800c1cc:	4652      	mov	r2, sl
 800c1ce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c1d2:	ec43 2b10 	vmov	d0, r2, r3
 800c1d6:	b01d      	add	sp, #116	; 0x74
 800c1d8:	ecbd 8b02 	vpop	{d8}
 800c1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1e0:	2a20      	cmp	r2, #32
 800c1e2:	d1cc      	bne.n	800c17e <_strtod_l+0x46>
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	9317      	str	r3, [sp, #92]	; 0x5c
 800c1e8:	e7be      	b.n	800c168 <_strtod_l+0x30>
 800c1ea:	2a2d      	cmp	r2, #45	; 0x2d
 800c1ec:	d1c7      	bne.n	800c17e <_strtod_l+0x46>
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	920a      	str	r2, [sp, #40]	; 0x28
 800c1f2:	1c5a      	adds	r2, r3, #1
 800c1f4:	9217      	str	r2, [sp, #92]	; 0x5c
 800c1f6:	785b      	ldrb	r3, [r3, #1]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d1c2      	bne.n	800c182 <_strtod_l+0x4a>
 800c1fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c1fe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c202:	2b00      	cmp	r3, #0
 800c204:	f040 856e 	bne.w	800cce4 <_strtod_l+0xbac>
 800c208:	4652      	mov	r2, sl
 800c20a:	465b      	mov	r3, fp
 800c20c:	e7e1      	b.n	800c1d2 <_strtod_l+0x9a>
 800c20e:	2200      	movs	r2, #0
 800c210:	e7ee      	b.n	800c1f0 <_strtod_l+0xb8>
 800c212:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c214:	b13a      	cbz	r2, 800c226 <_strtod_l+0xee>
 800c216:	2135      	movs	r1, #53	; 0x35
 800c218:	a81a      	add	r0, sp, #104	; 0x68
 800c21a:	f002 ff84 	bl	800f126 <__copybits>
 800c21e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c220:	4620      	mov	r0, r4
 800c222:	f002 fb43 	bl	800e8ac <_Bfree>
 800c226:	3f01      	subs	r7, #1
 800c228:	2f04      	cmp	r7, #4
 800c22a:	d806      	bhi.n	800c23a <_strtod_l+0x102>
 800c22c:	e8df f007 	tbb	[pc, r7]
 800c230:	1714030a 	.word	0x1714030a
 800c234:	0a          	.byte	0x0a
 800c235:	00          	.byte	0x00
 800c236:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c23a:	0728      	lsls	r0, r5, #28
 800c23c:	d5c0      	bpl.n	800c1c0 <_strtod_l+0x88>
 800c23e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c242:	e7bd      	b.n	800c1c0 <_strtod_l+0x88>
 800c244:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c248:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c24a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c24e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c252:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c256:	e7f0      	b.n	800c23a <_strtod_l+0x102>
 800c258:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c3dc <_strtod_l+0x2a4>
 800c25c:	e7ed      	b.n	800c23a <_strtod_l+0x102>
 800c25e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c262:	f04f 3aff 	mov.w	sl, #4294967295
 800c266:	e7e8      	b.n	800c23a <_strtod_l+0x102>
 800c268:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c26a:	1c5a      	adds	r2, r3, #1
 800c26c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c26e:	785b      	ldrb	r3, [r3, #1]
 800c270:	2b30      	cmp	r3, #48	; 0x30
 800c272:	d0f9      	beq.n	800c268 <_strtod_l+0x130>
 800c274:	2b00      	cmp	r3, #0
 800c276:	d0a3      	beq.n	800c1c0 <_strtod_l+0x88>
 800c278:	2301      	movs	r3, #1
 800c27a:	f04f 0900 	mov.w	r9, #0
 800c27e:	9304      	str	r3, [sp, #16]
 800c280:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c282:	9308      	str	r3, [sp, #32]
 800c284:	f8cd 901c 	str.w	r9, [sp, #28]
 800c288:	464f      	mov	r7, r9
 800c28a:	220a      	movs	r2, #10
 800c28c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c28e:	7806      	ldrb	r6, [r0, #0]
 800c290:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c294:	b2d9      	uxtb	r1, r3
 800c296:	2909      	cmp	r1, #9
 800c298:	d92a      	bls.n	800c2f0 <_strtod_l+0x1b8>
 800c29a:	9905      	ldr	r1, [sp, #20]
 800c29c:	462a      	mov	r2, r5
 800c29e:	f003 face 	bl	800f83e <strncmp>
 800c2a2:	b398      	cbz	r0, 800c30c <_strtod_l+0x1d4>
 800c2a4:	2000      	movs	r0, #0
 800c2a6:	4632      	mov	r2, r6
 800c2a8:	463d      	mov	r5, r7
 800c2aa:	9005      	str	r0, [sp, #20]
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	2a65      	cmp	r2, #101	; 0x65
 800c2b0:	d001      	beq.n	800c2b6 <_strtod_l+0x17e>
 800c2b2:	2a45      	cmp	r2, #69	; 0x45
 800c2b4:	d118      	bne.n	800c2e8 <_strtod_l+0x1b0>
 800c2b6:	b91d      	cbnz	r5, 800c2c0 <_strtod_l+0x188>
 800c2b8:	9a04      	ldr	r2, [sp, #16]
 800c2ba:	4302      	orrs	r2, r0
 800c2bc:	d09e      	beq.n	800c1fc <_strtod_l+0xc4>
 800c2be:	2500      	movs	r5, #0
 800c2c0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c2c4:	f108 0201 	add.w	r2, r8, #1
 800c2c8:	9217      	str	r2, [sp, #92]	; 0x5c
 800c2ca:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c2ce:	2a2b      	cmp	r2, #43	; 0x2b
 800c2d0:	d075      	beq.n	800c3be <_strtod_l+0x286>
 800c2d2:	2a2d      	cmp	r2, #45	; 0x2d
 800c2d4:	d07b      	beq.n	800c3ce <_strtod_l+0x296>
 800c2d6:	f04f 0c00 	mov.w	ip, #0
 800c2da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c2de:	2909      	cmp	r1, #9
 800c2e0:	f240 8082 	bls.w	800c3e8 <_strtod_l+0x2b0>
 800c2e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c2e8:	2600      	movs	r6, #0
 800c2ea:	e09d      	b.n	800c428 <_strtod_l+0x2f0>
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	e7c4      	b.n	800c27a <_strtod_l+0x142>
 800c2f0:	2f08      	cmp	r7, #8
 800c2f2:	bfd8      	it	le
 800c2f4:	9907      	ldrle	r1, [sp, #28]
 800c2f6:	f100 0001 	add.w	r0, r0, #1
 800c2fa:	bfda      	itte	le
 800c2fc:	fb02 3301 	mlale	r3, r2, r1, r3
 800c300:	9307      	strle	r3, [sp, #28]
 800c302:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c306:	3701      	adds	r7, #1
 800c308:	9017      	str	r0, [sp, #92]	; 0x5c
 800c30a:	e7bf      	b.n	800c28c <_strtod_l+0x154>
 800c30c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c30e:	195a      	adds	r2, r3, r5
 800c310:	9217      	str	r2, [sp, #92]	; 0x5c
 800c312:	5d5a      	ldrb	r2, [r3, r5]
 800c314:	2f00      	cmp	r7, #0
 800c316:	d037      	beq.n	800c388 <_strtod_l+0x250>
 800c318:	9005      	str	r0, [sp, #20]
 800c31a:	463d      	mov	r5, r7
 800c31c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c320:	2b09      	cmp	r3, #9
 800c322:	d912      	bls.n	800c34a <_strtod_l+0x212>
 800c324:	2301      	movs	r3, #1
 800c326:	e7c2      	b.n	800c2ae <_strtod_l+0x176>
 800c328:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c32a:	1c5a      	adds	r2, r3, #1
 800c32c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c32e:	785a      	ldrb	r2, [r3, #1]
 800c330:	3001      	adds	r0, #1
 800c332:	2a30      	cmp	r2, #48	; 0x30
 800c334:	d0f8      	beq.n	800c328 <_strtod_l+0x1f0>
 800c336:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c33a:	2b08      	cmp	r3, #8
 800c33c:	f200 84d9 	bhi.w	800ccf2 <_strtod_l+0xbba>
 800c340:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c342:	9005      	str	r0, [sp, #20]
 800c344:	2000      	movs	r0, #0
 800c346:	9308      	str	r3, [sp, #32]
 800c348:	4605      	mov	r5, r0
 800c34a:	3a30      	subs	r2, #48	; 0x30
 800c34c:	f100 0301 	add.w	r3, r0, #1
 800c350:	d014      	beq.n	800c37c <_strtod_l+0x244>
 800c352:	9905      	ldr	r1, [sp, #20]
 800c354:	4419      	add	r1, r3
 800c356:	9105      	str	r1, [sp, #20]
 800c358:	462b      	mov	r3, r5
 800c35a:	eb00 0e05 	add.w	lr, r0, r5
 800c35e:	210a      	movs	r1, #10
 800c360:	4573      	cmp	r3, lr
 800c362:	d113      	bne.n	800c38c <_strtod_l+0x254>
 800c364:	182b      	adds	r3, r5, r0
 800c366:	2b08      	cmp	r3, #8
 800c368:	f105 0501 	add.w	r5, r5, #1
 800c36c:	4405      	add	r5, r0
 800c36e:	dc1c      	bgt.n	800c3aa <_strtod_l+0x272>
 800c370:	9907      	ldr	r1, [sp, #28]
 800c372:	230a      	movs	r3, #10
 800c374:	fb03 2301 	mla	r3, r3, r1, r2
 800c378:	9307      	str	r3, [sp, #28]
 800c37a:	2300      	movs	r3, #0
 800c37c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c37e:	1c51      	adds	r1, r2, #1
 800c380:	9117      	str	r1, [sp, #92]	; 0x5c
 800c382:	7852      	ldrb	r2, [r2, #1]
 800c384:	4618      	mov	r0, r3
 800c386:	e7c9      	b.n	800c31c <_strtod_l+0x1e4>
 800c388:	4638      	mov	r0, r7
 800c38a:	e7d2      	b.n	800c332 <_strtod_l+0x1fa>
 800c38c:	2b08      	cmp	r3, #8
 800c38e:	dc04      	bgt.n	800c39a <_strtod_l+0x262>
 800c390:	9e07      	ldr	r6, [sp, #28]
 800c392:	434e      	muls	r6, r1
 800c394:	9607      	str	r6, [sp, #28]
 800c396:	3301      	adds	r3, #1
 800c398:	e7e2      	b.n	800c360 <_strtod_l+0x228>
 800c39a:	f103 0c01 	add.w	ip, r3, #1
 800c39e:	f1bc 0f10 	cmp.w	ip, #16
 800c3a2:	bfd8      	it	le
 800c3a4:	fb01 f909 	mulle.w	r9, r1, r9
 800c3a8:	e7f5      	b.n	800c396 <_strtod_l+0x25e>
 800c3aa:	2d10      	cmp	r5, #16
 800c3ac:	bfdc      	itt	le
 800c3ae:	230a      	movle	r3, #10
 800c3b0:	fb03 2909 	mlale	r9, r3, r9, r2
 800c3b4:	e7e1      	b.n	800c37a <_strtod_l+0x242>
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	9305      	str	r3, [sp, #20]
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	e77c      	b.n	800c2b8 <_strtod_l+0x180>
 800c3be:	f04f 0c00 	mov.w	ip, #0
 800c3c2:	f108 0202 	add.w	r2, r8, #2
 800c3c6:	9217      	str	r2, [sp, #92]	; 0x5c
 800c3c8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c3cc:	e785      	b.n	800c2da <_strtod_l+0x1a2>
 800c3ce:	f04f 0c01 	mov.w	ip, #1
 800c3d2:	e7f6      	b.n	800c3c2 <_strtod_l+0x28a>
 800c3d4:	080af18c 	.word	0x080af18c
 800c3d8:	080aeee0 	.word	0x080aeee0
 800c3dc:	7ff00000 	.word	0x7ff00000
 800c3e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c3e2:	1c51      	adds	r1, r2, #1
 800c3e4:	9117      	str	r1, [sp, #92]	; 0x5c
 800c3e6:	7852      	ldrb	r2, [r2, #1]
 800c3e8:	2a30      	cmp	r2, #48	; 0x30
 800c3ea:	d0f9      	beq.n	800c3e0 <_strtod_l+0x2a8>
 800c3ec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c3f0:	2908      	cmp	r1, #8
 800c3f2:	f63f af79 	bhi.w	800c2e8 <_strtod_l+0x1b0>
 800c3f6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c3fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c3fc:	9206      	str	r2, [sp, #24]
 800c3fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c400:	1c51      	adds	r1, r2, #1
 800c402:	9117      	str	r1, [sp, #92]	; 0x5c
 800c404:	7852      	ldrb	r2, [r2, #1]
 800c406:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c40a:	2e09      	cmp	r6, #9
 800c40c:	d937      	bls.n	800c47e <_strtod_l+0x346>
 800c40e:	9e06      	ldr	r6, [sp, #24]
 800c410:	1b89      	subs	r1, r1, r6
 800c412:	2908      	cmp	r1, #8
 800c414:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c418:	dc02      	bgt.n	800c420 <_strtod_l+0x2e8>
 800c41a:	4576      	cmp	r6, lr
 800c41c:	bfa8      	it	ge
 800c41e:	4676      	movge	r6, lr
 800c420:	f1bc 0f00 	cmp.w	ip, #0
 800c424:	d000      	beq.n	800c428 <_strtod_l+0x2f0>
 800c426:	4276      	negs	r6, r6
 800c428:	2d00      	cmp	r5, #0
 800c42a:	d14d      	bne.n	800c4c8 <_strtod_l+0x390>
 800c42c:	9904      	ldr	r1, [sp, #16]
 800c42e:	4301      	orrs	r1, r0
 800c430:	f47f aec6 	bne.w	800c1c0 <_strtod_l+0x88>
 800c434:	2b00      	cmp	r3, #0
 800c436:	f47f aee1 	bne.w	800c1fc <_strtod_l+0xc4>
 800c43a:	2a69      	cmp	r2, #105	; 0x69
 800c43c:	d027      	beq.n	800c48e <_strtod_l+0x356>
 800c43e:	dc24      	bgt.n	800c48a <_strtod_l+0x352>
 800c440:	2a49      	cmp	r2, #73	; 0x49
 800c442:	d024      	beq.n	800c48e <_strtod_l+0x356>
 800c444:	2a4e      	cmp	r2, #78	; 0x4e
 800c446:	f47f aed9 	bne.w	800c1fc <_strtod_l+0xc4>
 800c44a:	499f      	ldr	r1, [pc, #636]	; (800c6c8 <_strtod_l+0x590>)
 800c44c:	a817      	add	r0, sp, #92	; 0x5c
 800c44e:	f002 f8b3 	bl	800e5b8 <__match>
 800c452:	2800      	cmp	r0, #0
 800c454:	f43f aed2 	beq.w	800c1fc <_strtod_l+0xc4>
 800c458:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	2b28      	cmp	r3, #40	; 0x28
 800c45e:	d12d      	bne.n	800c4bc <_strtod_l+0x384>
 800c460:	499a      	ldr	r1, [pc, #616]	; (800c6cc <_strtod_l+0x594>)
 800c462:	aa1a      	add	r2, sp, #104	; 0x68
 800c464:	a817      	add	r0, sp, #92	; 0x5c
 800c466:	f002 f8bb 	bl	800e5e0 <__hexnan>
 800c46a:	2805      	cmp	r0, #5
 800c46c:	d126      	bne.n	800c4bc <_strtod_l+0x384>
 800c46e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c470:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c474:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c478:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c47c:	e6a0      	b.n	800c1c0 <_strtod_l+0x88>
 800c47e:	210a      	movs	r1, #10
 800c480:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c484:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c488:	e7b9      	b.n	800c3fe <_strtod_l+0x2c6>
 800c48a:	2a6e      	cmp	r2, #110	; 0x6e
 800c48c:	e7db      	b.n	800c446 <_strtod_l+0x30e>
 800c48e:	4990      	ldr	r1, [pc, #576]	; (800c6d0 <_strtod_l+0x598>)
 800c490:	a817      	add	r0, sp, #92	; 0x5c
 800c492:	f002 f891 	bl	800e5b8 <__match>
 800c496:	2800      	cmp	r0, #0
 800c498:	f43f aeb0 	beq.w	800c1fc <_strtod_l+0xc4>
 800c49c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c49e:	498d      	ldr	r1, [pc, #564]	; (800c6d4 <_strtod_l+0x59c>)
 800c4a0:	3b01      	subs	r3, #1
 800c4a2:	a817      	add	r0, sp, #92	; 0x5c
 800c4a4:	9317      	str	r3, [sp, #92]	; 0x5c
 800c4a6:	f002 f887 	bl	800e5b8 <__match>
 800c4aa:	b910      	cbnz	r0, 800c4b2 <_strtod_l+0x37a>
 800c4ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	9317      	str	r3, [sp, #92]	; 0x5c
 800c4b2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c6e4 <_strtod_l+0x5ac>
 800c4b6:	f04f 0a00 	mov.w	sl, #0
 800c4ba:	e681      	b.n	800c1c0 <_strtod_l+0x88>
 800c4bc:	4886      	ldr	r0, [pc, #536]	; (800c6d8 <_strtod_l+0x5a0>)
 800c4be:	f003 f973 	bl	800f7a8 <nan>
 800c4c2:	ec5b ab10 	vmov	sl, fp, d0
 800c4c6:	e67b      	b.n	800c1c0 <_strtod_l+0x88>
 800c4c8:	9b05      	ldr	r3, [sp, #20]
 800c4ca:	9807      	ldr	r0, [sp, #28]
 800c4cc:	1af3      	subs	r3, r6, r3
 800c4ce:	2f00      	cmp	r7, #0
 800c4d0:	bf08      	it	eq
 800c4d2:	462f      	moveq	r7, r5
 800c4d4:	2d10      	cmp	r5, #16
 800c4d6:	9306      	str	r3, [sp, #24]
 800c4d8:	46a8      	mov	r8, r5
 800c4da:	bfa8      	it	ge
 800c4dc:	f04f 0810 	movge.w	r8, #16
 800c4e0:	f7f4 f810 	bl	8000504 <__aeabi_ui2d>
 800c4e4:	2d09      	cmp	r5, #9
 800c4e6:	4682      	mov	sl, r0
 800c4e8:	468b      	mov	fp, r1
 800c4ea:	dd13      	ble.n	800c514 <_strtod_l+0x3dc>
 800c4ec:	4b7b      	ldr	r3, [pc, #492]	; (800c6dc <_strtod_l+0x5a4>)
 800c4ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c4f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c4f6:	f7f4 f87f 	bl	80005f8 <__aeabi_dmul>
 800c4fa:	4682      	mov	sl, r0
 800c4fc:	4648      	mov	r0, r9
 800c4fe:	468b      	mov	fp, r1
 800c500:	f7f4 f800 	bl	8000504 <__aeabi_ui2d>
 800c504:	4602      	mov	r2, r0
 800c506:	460b      	mov	r3, r1
 800c508:	4650      	mov	r0, sl
 800c50a:	4659      	mov	r1, fp
 800c50c:	f7f3 febe 	bl	800028c <__adddf3>
 800c510:	4682      	mov	sl, r0
 800c512:	468b      	mov	fp, r1
 800c514:	2d0f      	cmp	r5, #15
 800c516:	dc38      	bgt.n	800c58a <_strtod_l+0x452>
 800c518:	9b06      	ldr	r3, [sp, #24]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	f43f ae50 	beq.w	800c1c0 <_strtod_l+0x88>
 800c520:	dd24      	ble.n	800c56c <_strtod_l+0x434>
 800c522:	2b16      	cmp	r3, #22
 800c524:	dc0b      	bgt.n	800c53e <_strtod_l+0x406>
 800c526:	496d      	ldr	r1, [pc, #436]	; (800c6dc <_strtod_l+0x5a4>)
 800c528:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c52c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c530:	4652      	mov	r2, sl
 800c532:	465b      	mov	r3, fp
 800c534:	f7f4 f860 	bl	80005f8 <__aeabi_dmul>
 800c538:	4682      	mov	sl, r0
 800c53a:	468b      	mov	fp, r1
 800c53c:	e640      	b.n	800c1c0 <_strtod_l+0x88>
 800c53e:	9a06      	ldr	r2, [sp, #24]
 800c540:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c544:	4293      	cmp	r3, r2
 800c546:	db20      	blt.n	800c58a <_strtod_l+0x452>
 800c548:	4c64      	ldr	r4, [pc, #400]	; (800c6dc <_strtod_l+0x5a4>)
 800c54a:	f1c5 050f 	rsb	r5, r5, #15
 800c54e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c552:	4652      	mov	r2, sl
 800c554:	465b      	mov	r3, fp
 800c556:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c55a:	f7f4 f84d 	bl	80005f8 <__aeabi_dmul>
 800c55e:	9b06      	ldr	r3, [sp, #24]
 800c560:	1b5d      	subs	r5, r3, r5
 800c562:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c566:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c56a:	e7e3      	b.n	800c534 <_strtod_l+0x3fc>
 800c56c:	9b06      	ldr	r3, [sp, #24]
 800c56e:	3316      	adds	r3, #22
 800c570:	db0b      	blt.n	800c58a <_strtod_l+0x452>
 800c572:	9b05      	ldr	r3, [sp, #20]
 800c574:	1b9e      	subs	r6, r3, r6
 800c576:	4b59      	ldr	r3, [pc, #356]	; (800c6dc <_strtod_l+0x5a4>)
 800c578:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c57c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c580:	4650      	mov	r0, sl
 800c582:	4659      	mov	r1, fp
 800c584:	f7f4 f962 	bl	800084c <__aeabi_ddiv>
 800c588:	e7d6      	b.n	800c538 <_strtod_l+0x400>
 800c58a:	9b06      	ldr	r3, [sp, #24]
 800c58c:	eba5 0808 	sub.w	r8, r5, r8
 800c590:	4498      	add	r8, r3
 800c592:	f1b8 0f00 	cmp.w	r8, #0
 800c596:	dd74      	ble.n	800c682 <_strtod_l+0x54a>
 800c598:	f018 030f 	ands.w	r3, r8, #15
 800c59c:	d00a      	beq.n	800c5b4 <_strtod_l+0x47c>
 800c59e:	494f      	ldr	r1, [pc, #316]	; (800c6dc <_strtod_l+0x5a4>)
 800c5a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c5a4:	4652      	mov	r2, sl
 800c5a6:	465b      	mov	r3, fp
 800c5a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5ac:	f7f4 f824 	bl	80005f8 <__aeabi_dmul>
 800c5b0:	4682      	mov	sl, r0
 800c5b2:	468b      	mov	fp, r1
 800c5b4:	f038 080f 	bics.w	r8, r8, #15
 800c5b8:	d04f      	beq.n	800c65a <_strtod_l+0x522>
 800c5ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c5be:	dd22      	ble.n	800c606 <_strtod_l+0x4ce>
 800c5c0:	2500      	movs	r5, #0
 800c5c2:	462e      	mov	r6, r5
 800c5c4:	9507      	str	r5, [sp, #28]
 800c5c6:	9505      	str	r5, [sp, #20]
 800c5c8:	2322      	movs	r3, #34	; 0x22
 800c5ca:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c6e4 <_strtod_l+0x5ac>
 800c5ce:	6023      	str	r3, [r4, #0]
 800c5d0:	f04f 0a00 	mov.w	sl, #0
 800c5d4:	9b07      	ldr	r3, [sp, #28]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	f43f adf2 	beq.w	800c1c0 <_strtod_l+0x88>
 800c5dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c5de:	4620      	mov	r0, r4
 800c5e0:	f002 f964 	bl	800e8ac <_Bfree>
 800c5e4:	9905      	ldr	r1, [sp, #20]
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	f002 f960 	bl	800e8ac <_Bfree>
 800c5ec:	4631      	mov	r1, r6
 800c5ee:	4620      	mov	r0, r4
 800c5f0:	f002 f95c 	bl	800e8ac <_Bfree>
 800c5f4:	9907      	ldr	r1, [sp, #28]
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	f002 f958 	bl	800e8ac <_Bfree>
 800c5fc:	4629      	mov	r1, r5
 800c5fe:	4620      	mov	r0, r4
 800c600:	f002 f954 	bl	800e8ac <_Bfree>
 800c604:	e5dc      	b.n	800c1c0 <_strtod_l+0x88>
 800c606:	4b36      	ldr	r3, [pc, #216]	; (800c6e0 <_strtod_l+0x5a8>)
 800c608:	9304      	str	r3, [sp, #16]
 800c60a:	2300      	movs	r3, #0
 800c60c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c610:	4650      	mov	r0, sl
 800c612:	4659      	mov	r1, fp
 800c614:	4699      	mov	r9, r3
 800c616:	f1b8 0f01 	cmp.w	r8, #1
 800c61a:	dc21      	bgt.n	800c660 <_strtod_l+0x528>
 800c61c:	b10b      	cbz	r3, 800c622 <_strtod_l+0x4ea>
 800c61e:	4682      	mov	sl, r0
 800c620:	468b      	mov	fp, r1
 800c622:	4b2f      	ldr	r3, [pc, #188]	; (800c6e0 <_strtod_l+0x5a8>)
 800c624:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c628:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c62c:	4652      	mov	r2, sl
 800c62e:	465b      	mov	r3, fp
 800c630:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c634:	f7f3 ffe0 	bl	80005f8 <__aeabi_dmul>
 800c638:	4b2a      	ldr	r3, [pc, #168]	; (800c6e4 <_strtod_l+0x5ac>)
 800c63a:	460a      	mov	r2, r1
 800c63c:	400b      	ands	r3, r1
 800c63e:	492a      	ldr	r1, [pc, #168]	; (800c6e8 <_strtod_l+0x5b0>)
 800c640:	428b      	cmp	r3, r1
 800c642:	4682      	mov	sl, r0
 800c644:	d8bc      	bhi.n	800c5c0 <_strtod_l+0x488>
 800c646:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c64a:	428b      	cmp	r3, r1
 800c64c:	bf86      	itte	hi
 800c64e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c6ec <_strtod_l+0x5b4>
 800c652:	f04f 3aff 	movhi.w	sl, #4294967295
 800c656:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c65a:	2300      	movs	r3, #0
 800c65c:	9304      	str	r3, [sp, #16]
 800c65e:	e084      	b.n	800c76a <_strtod_l+0x632>
 800c660:	f018 0f01 	tst.w	r8, #1
 800c664:	d005      	beq.n	800c672 <_strtod_l+0x53a>
 800c666:	9b04      	ldr	r3, [sp, #16]
 800c668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66c:	f7f3 ffc4 	bl	80005f8 <__aeabi_dmul>
 800c670:	2301      	movs	r3, #1
 800c672:	9a04      	ldr	r2, [sp, #16]
 800c674:	3208      	adds	r2, #8
 800c676:	f109 0901 	add.w	r9, r9, #1
 800c67a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c67e:	9204      	str	r2, [sp, #16]
 800c680:	e7c9      	b.n	800c616 <_strtod_l+0x4de>
 800c682:	d0ea      	beq.n	800c65a <_strtod_l+0x522>
 800c684:	f1c8 0800 	rsb	r8, r8, #0
 800c688:	f018 020f 	ands.w	r2, r8, #15
 800c68c:	d00a      	beq.n	800c6a4 <_strtod_l+0x56c>
 800c68e:	4b13      	ldr	r3, [pc, #76]	; (800c6dc <_strtod_l+0x5a4>)
 800c690:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c694:	4650      	mov	r0, sl
 800c696:	4659      	mov	r1, fp
 800c698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69c:	f7f4 f8d6 	bl	800084c <__aeabi_ddiv>
 800c6a0:	4682      	mov	sl, r0
 800c6a2:	468b      	mov	fp, r1
 800c6a4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c6a8:	d0d7      	beq.n	800c65a <_strtod_l+0x522>
 800c6aa:	f1b8 0f1f 	cmp.w	r8, #31
 800c6ae:	dd1f      	ble.n	800c6f0 <_strtod_l+0x5b8>
 800c6b0:	2500      	movs	r5, #0
 800c6b2:	462e      	mov	r6, r5
 800c6b4:	9507      	str	r5, [sp, #28]
 800c6b6:	9505      	str	r5, [sp, #20]
 800c6b8:	2322      	movs	r3, #34	; 0x22
 800c6ba:	f04f 0a00 	mov.w	sl, #0
 800c6be:	f04f 0b00 	mov.w	fp, #0
 800c6c2:	6023      	str	r3, [r4, #0]
 800c6c4:	e786      	b.n	800c5d4 <_strtod_l+0x49c>
 800c6c6:	bf00      	nop
 800c6c8:	080aeeb1 	.word	0x080aeeb1
 800c6cc:	080aeef4 	.word	0x080aeef4
 800c6d0:	080aeea9 	.word	0x080aeea9
 800c6d4:	080af034 	.word	0x080af034
 800c6d8:	080af348 	.word	0x080af348
 800c6dc:	080af228 	.word	0x080af228
 800c6e0:	080af200 	.word	0x080af200
 800c6e4:	7ff00000 	.word	0x7ff00000
 800c6e8:	7ca00000 	.word	0x7ca00000
 800c6ec:	7fefffff 	.word	0x7fefffff
 800c6f0:	f018 0310 	ands.w	r3, r8, #16
 800c6f4:	bf18      	it	ne
 800c6f6:	236a      	movne	r3, #106	; 0x6a
 800c6f8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800caa8 <_strtod_l+0x970>
 800c6fc:	9304      	str	r3, [sp, #16]
 800c6fe:	4650      	mov	r0, sl
 800c700:	4659      	mov	r1, fp
 800c702:	2300      	movs	r3, #0
 800c704:	f018 0f01 	tst.w	r8, #1
 800c708:	d004      	beq.n	800c714 <_strtod_l+0x5dc>
 800c70a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c70e:	f7f3 ff73 	bl	80005f8 <__aeabi_dmul>
 800c712:	2301      	movs	r3, #1
 800c714:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c718:	f109 0908 	add.w	r9, r9, #8
 800c71c:	d1f2      	bne.n	800c704 <_strtod_l+0x5cc>
 800c71e:	b10b      	cbz	r3, 800c724 <_strtod_l+0x5ec>
 800c720:	4682      	mov	sl, r0
 800c722:	468b      	mov	fp, r1
 800c724:	9b04      	ldr	r3, [sp, #16]
 800c726:	b1c3      	cbz	r3, 800c75a <_strtod_l+0x622>
 800c728:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c72c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c730:	2b00      	cmp	r3, #0
 800c732:	4659      	mov	r1, fp
 800c734:	dd11      	ble.n	800c75a <_strtod_l+0x622>
 800c736:	2b1f      	cmp	r3, #31
 800c738:	f340 8124 	ble.w	800c984 <_strtod_l+0x84c>
 800c73c:	2b34      	cmp	r3, #52	; 0x34
 800c73e:	bfde      	ittt	le
 800c740:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c744:	f04f 33ff 	movle.w	r3, #4294967295
 800c748:	fa03 f202 	lslle.w	r2, r3, r2
 800c74c:	f04f 0a00 	mov.w	sl, #0
 800c750:	bfcc      	ite	gt
 800c752:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c756:	ea02 0b01 	andle.w	fp, r2, r1
 800c75a:	2200      	movs	r2, #0
 800c75c:	2300      	movs	r3, #0
 800c75e:	4650      	mov	r0, sl
 800c760:	4659      	mov	r1, fp
 800c762:	f7f4 f9b1 	bl	8000ac8 <__aeabi_dcmpeq>
 800c766:	2800      	cmp	r0, #0
 800c768:	d1a2      	bne.n	800c6b0 <_strtod_l+0x578>
 800c76a:	9b07      	ldr	r3, [sp, #28]
 800c76c:	9300      	str	r3, [sp, #0]
 800c76e:	9908      	ldr	r1, [sp, #32]
 800c770:	462b      	mov	r3, r5
 800c772:	463a      	mov	r2, r7
 800c774:	4620      	mov	r0, r4
 800c776:	f002 f901 	bl	800e97c <__s2b>
 800c77a:	9007      	str	r0, [sp, #28]
 800c77c:	2800      	cmp	r0, #0
 800c77e:	f43f af1f 	beq.w	800c5c0 <_strtod_l+0x488>
 800c782:	9b05      	ldr	r3, [sp, #20]
 800c784:	1b9e      	subs	r6, r3, r6
 800c786:	9b06      	ldr	r3, [sp, #24]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	bfb4      	ite	lt
 800c78c:	4633      	movlt	r3, r6
 800c78e:	2300      	movge	r3, #0
 800c790:	930c      	str	r3, [sp, #48]	; 0x30
 800c792:	9b06      	ldr	r3, [sp, #24]
 800c794:	2500      	movs	r5, #0
 800c796:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c79a:	9312      	str	r3, [sp, #72]	; 0x48
 800c79c:	462e      	mov	r6, r5
 800c79e:	9b07      	ldr	r3, [sp, #28]
 800c7a0:	4620      	mov	r0, r4
 800c7a2:	6859      	ldr	r1, [r3, #4]
 800c7a4:	f002 f842 	bl	800e82c <_Balloc>
 800c7a8:	9005      	str	r0, [sp, #20]
 800c7aa:	2800      	cmp	r0, #0
 800c7ac:	f43f af0c 	beq.w	800c5c8 <_strtod_l+0x490>
 800c7b0:	9b07      	ldr	r3, [sp, #28]
 800c7b2:	691a      	ldr	r2, [r3, #16]
 800c7b4:	3202      	adds	r2, #2
 800c7b6:	f103 010c 	add.w	r1, r3, #12
 800c7ba:	0092      	lsls	r2, r2, #2
 800c7bc:	300c      	adds	r0, #12
 800c7be:	f7fe fc6b 	bl	800b098 <memcpy>
 800c7c2:	ec4b ab10 	vmov	d0, sl, fp
 800c7c6:	aa1a      	add	r2, sp, #104	; 0x68
 800c7c8:	a919      	add	r1, sp, #100	; 0x64
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	f002 fc1c 	bl	800f008 <__d2b>
 800c7d0:	ec4b ab18 	vmov	d8, sl, fp
 800c7d4:	9018      	str	r0, [sp, #96]	; 0x60
 800c7d6:	2800      	cmp	r0, #0
 800c7d8:	f43f aef6 	beq.w	800c5c8 <_strtod_l+0x490>
 800c7dc:	2101      	movs	r1, #1
 800c7de:	4620      	mov	r0, r4
 800c7e0:	f002 f966 	bl	800eab0 <__i2b>
 800c7e4:	4606      	mov	r6, r0
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	f43f aeee 	beq.w	800c5c8 <_strtod_l+0x490>
 800c7ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c7ee:	9904      	ldr	r1, [sp, #16]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	bfab      	itete	ge
 800c7f4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c7f6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c7f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c7fa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c7fe:	bfac      	ite	ge
 800c800:	eb03 0902 	addge.w	r9, r3, r2
 800c804:	1ad7      	sublt	r7, r2, r3
 800c806:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c808:	eba3 0801 	sub.w	r8, r3, r1
 800c80c:	4490      	add	r8, r2
 800c80e:	4ba1      	ldr	r3, [pc, #644]	; (800ca94 <_strtod_l+0x95c>)
 800c810:	f108 38ff 	add.w	r8, r8, #4294967295
 800c814:	4598      	cmp	r8, r3
 800c816:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c81a:	f280 80c7 	bge.w	800c9ac <_strtod_l+0x874>
 800c81e:	eba3 0308 	sub.w	r3, r3, r8
 800c822:	2b1f      	cmp	r3, #31
 800c824:	eba2 0203 	sub.w	r2, r2, r3
 800c828:	f04f 0101 	mov.w	r1, #1
 800c82c:	f300 80b1 	bgt.w	800c992 <_strtod_l+0x85a>
 800c830:	fa01 f303 	lsl.w	r3, r1, r3
 800c834:	930d      	str	r3, [sp, #52]	; 0x34
 800c836:	2300      	movs	r3, #0
 800c838:	9308      	str	r3, [sp, #32]
 800c83a:	eb09 0802 	add.w	r8, r9, r2
 800c83e:	9b04      	ldr	r3, [sp, #16]
 800c840:	45c1      	cmp	r9, r8
 800c842:	4417      	add	r7, r2
 800c844:	441f      	add	r7, r3
 800c846:	464b      	mov	r3, r9
 800c848:	bfa8      	it	ge
 800c84a:	4643      	movge	r3, r8
 800c84c:	42bb      	cmp	r3, r7
 800c84e:	bfa8      	it	ge
 800c850:	463b      	movge	r3, r7
 800c852:	2b00      	cmp	r3, #0
 800c854:	bfc2      	ittt	gt
 800c856:	eba8 0803 	subgt.w	r8, r8, r3
 800c85a:	1aff      	subgt	r7, r7, r3
 800c85c:	eba9 0903 	subgt.w	r9, r9, r3
 800c860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c862:	2b00      	cmp	r3, #0
 800c864:	dd17      	ble.n	800c896 <_strtod_l+0x75e>
 800c866:	4631      	mov	r1, r6
 800c868:	461a      	mov	r2, r3
 800c86a:	4620      	mov	r0, r4
 800c86c:	f002 f9e0 	bl	800ec30 <__pow5mult>
 800c870:	4606      	mov	r6, r0
 800c872:	2800      	cmp	r0, #0
 800c874:	f43f aea8 	beq.w	800c5c8 <_strtod_l+0x490>
 800c878:	4601      	mov	r1, r0
 800c87a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c87c:	4620      	mov	r0, r4
 800c87e:	f002 f92d 	bl	800eadc <__multiply>
 800c882:	900b      	str	r0, [sp, #44]	; 0x2c
 800c884:	2800      	cmp	r0, #0
 800c886:	f43f ae9f 	beq.w	800c5c8 <_strtod_l+0x490>
 800c88a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c88c:	4620      	mov	r0, r4
 800c88e:	f002 f80d 	bl	800e8ac <_Bfree>
 800c892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c894:	9318      	str	r3, [sp, #96]	; 0x60
 800c896:	f1b8 0f00 	cmp.w	r8, #0
 800c89a:	f300 808c 	bgt.w	800c9b6 <_strtod_l+0x87e>
 800c89e:	9b06      	ldr	r3, [sp, #24]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	dd08      	ble.n	800c8b6 <_strtod_l+0x77e>
 800c8a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c8a6:	9905      	ldr	r1, [sp, #20]
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	f002 f9c1 	bl	800ec30 <__pow5mult>
 800c8ae:	9005      	str	r0, [sp, #20]
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	f43f ae89 	beq.w	800c5c8 <_strtod_l+0x490>
 800c8b6:	2f00      	cmp	r7, #0
 800c8b8:	dd08      	ble.n	800c8cc <_strtod_l+0x794>
 800c8ba:	9905      	ldr	r1, [sp, #20]
 800c8bc:	463a      	mov	r2, r7
 800c8be:	4620      	mov	r0, r4
 800c8c0:	f002 fa10 	bl	800ece4 <__lshift>
 800c8c4:	9005      	str	r0, [sp, #20]
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	f43f ae7e 	beq.w	800c5c8 <_strtod_l+0x490>
 800c8cc:	f1b9 0f00 	cmp.w	r9, #0
 800c8d0:	dd08      	ble.n	800c8e4 <_strtod_l+0x7ac>
 800c8d2:	4631      	mov	r1, r6
 800c8d4:	464a      	mov	r2, r9
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	f002 fa04 	bl	800ece4 <__lshift>
 800c8dc:	4606      	mov	r6, r0
 800c8de:	2800      	cmp	r0, #0
 800c8e0:	f43f ae72 	beq.w	800c5c8 <_strtod_l+0x490>
 800c8e4:	9a05      	ldr	r2, [sp, #20]
 800c8e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	f002 fa87 	bl	800edfc <__mdiff>
 800c8ee:	4605      	mov	r5, r0
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	f43f ae69 	beq.w	800c5c8 <_strtod_l+0x490>
 800c8f6:	68c3      	ldr	r3, [r0, #12]
 800c8f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	60c3      	str	r3, [r0, #12]
 800c8fe:	4631      	mov	r1, r6
 800c900:	f002 fa60 	bl	800edc4 <__mcmp>
 800c904:	2800      	cmp	r0, #0
 800c906:	da60      	bge.n	800c9ca <_strtod_l+0x892>
 800c908:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c90a:	ea53 030a 	orrs.w	r3, r3, sl
 800c90e:	f040 8082 	bne.w	800ca16 <_strtod_l+0x8de>
 800c912:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c916:	2b00      	cmp	r3, #0
 800c918:	d17d      	bne.n	800ca16 <_strtod_l+0x8de>
 800c91a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c91e:	0d1b      	lsrs	r3, r3, #20
 800c920:	051b      	lsls	r3, r3, #20
 800c922:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c926:	d976      	bls.n	800ca16 <_strtod_l+0x8de>
 800c928:	696b      	ldr	r3, [r5, #20]
 800c92a:	b913      	cbnz	r3, 800c932 <_strtod_l+0x7fa>
 800c92c:	692b      	ldr	r3, [r5, #16]
 800c92e:	2b01      	cmp	r3, #1
 800c930:	dd71      	ble.n	800ca16 <_strtod_l+0x8de>
 800c932:	4629      	mov	r1, r5
 800c934:	2201      	movs	r2, #1
 800c936:	4620      	mov	r0, r4
 800c938:	f002 f9d4 	bl	800ece4 <__lshift>
 800c93c:	4631      	mov	r1, r6
 800c93e:	4605      	mov	r5, r0
 800c940:	f002 fa40 	bl	800edc4 <__mcmp>
 800c944:	2800      	cmp	r0, #0
 800c946:	dd66      	ble.n	800ca16 <_strtod_l+0x8de>
 800c948:	9904      	ldr	r1, [sp, #16]
 800c94a:	4a53      	ldr	r2, [pc, #332]	; (800ca98 <_strtod_l+0x960>)
 800c94c:	465b      	mov	r3, fp
 800c94e:	2900      	cmp	r1, #0
 800c950:	f000 8081 	beq.w	800ca56 <_strtod_l+0x91e>
 800c954:	ea02 010b 	and.w	r1, r2, fp
 800c958:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c95c:	dc7b      	bgt.n	800ca56 <_strtod_l+0x91e>
 800c95e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c962:	f77f aea9 	ble.w	800c6b8 <_strtod_l+0x580>
 800c966:	4b4d      	ldr	r3, [pc, #308]	; (800ca9c <_strtod_l+0x964>)
 800c968:	4650      	mov	r0, sl
 800c96a:	4659      	mov	r1, fp
 800c96c:	2200      	movs	r2, #0
 800c96e:	f7f3 fe43 	bl	80005f8 <__aeabi_dmul>
 800c972:	460b      	mov	r3, r1
 800c974:	4303      	orrs	r3, r0
 800c976:	bf08      	it	eq
 800c978:	2322      	moveq	r3, #34	; 0x22
 800c97a:	4682      	mov	sl, r0
 800c97c:	468b      	mov	fp, r1
 800c97e:	bf08      	it	eq
 800c980:	6023      	streq	r3, [r4, #0]
 800c982:	e62b      	b.n	800c5dc <_strtod_l+0x4a4>
 800c984:	f04f 32ff 	mov.w	r2, #4294967295
 800c988:	fa02 f303 	lsl.w	r3, r2, r3
 800c98c:	ea03 0a0a 	and.w	sl, r3, sl
 800c990:	e6e3      	b.n	800c75a <_strtod_l+0x622>
 800c992:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c996:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c99a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c99e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c9a2:	fa01 f308 	lsl.w	r3, r1, r8
 800c9a6:	9308      	str	r3, [sp, #32]
 800c9a8:	910d      	str	r1, [sp, #52]	; 0x34
 800c9aa:	e746      	b.n	800c83a <_strtod_l+0x702>
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	9308      	str	r3, [sp, #32]
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	930d      	str	r3, [sp, #52]	; 0x34
 800c9b4:	e741      	b.n	800c83a <_strtod_l+0x702>
 800c9b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c9b8:	4642      	mov	r2, r8
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	f002 f992 	bl	800ece4 <__lshift>
 800c9c0:	9018      	str	r0, [sp, #96]	; 0x60
 800c9c2:	2800      	cmp	r0, #0
 800c9c4:	f47f af6b 	bne.w	800c89e <_strtod_l+0x766>
 800c9c8:	e5fe      	b.n	800c5c8 <_strtod_l+0x490>
 800c9ca:	465f      	mov	r7, fp
 800c9cc:	d16e      	bne.n	800caac <_strtod_l+0x974>
 800c9ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c9d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c9d4:	b342      	cbz	r2, 800ca28 <_strtod_l+0x8f0>
 800c9d6:	4a32      	ldr	r2, [pc, #200]	; (800caa0 <_strtod_l+0x968>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d128      	bne.n	800ca2e <_strtod_l+0x8f6>
 800c9dc:	9b04      	ldr	r3, [sp, #16]
 800c9de:	4651      	mov	r1, sl
 800c9e0:	b1eb      	cbz	r3, 800ca1e <_strtod_l+0x8e6>
 800c9e2:	4b2d      	ldr	r3, [pc, #180]	; (800ca98 <_strtod_l+0x960>)
 800c9e4:	403b      	ands	r3, r7
 800c9e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c9ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c9ee:	d819      	bhi.n	800ca24 <_strtod_l+0x8ec>
 800c9f0:	0d1b      	lsrs	r3, r3, #20
 800c9f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c9f6:	fa02 f303 	lsl.w	r3, r2, r3
 800c9fa:	4299      	cmp	r1, r3
 800c9fc:	d117      	bne.n	800ca2e <_strtod_l+0x8f6>
 800c9fe:	4b29      	ldr	r3, [pc, #164]	; (800caa4 <_strtod_l+0x96c>)
 800ca00:	429f      	cmp	r7, r3
 800ca02:	d102      	bne.n	800ca0a <_strtod_l+0x8d2>
 800ca04:	3101      	adds	r1, #1
 800ca06:	f43f addf 	beq.w	800c5c8 <_strtod_l+0x490>
 800ca0a:	4b23      	ldr	r3, [pc, #140]	; (800ca98 <_strtod_l+0x960>)
 800ca0c:	403b      	ands	r3, r7
 800ca0e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ca12:	f04f 0a00 	mov.w	sl, #0
 800ca16:	9b04      	ldr	r3, [sp, #16]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d1a4      	bne.n	800c966 <_strtod_l+0x82e>
 800ca1c:	e5de      	b.n	800c5dc <_strtod_l+0x4a4>
 800ca1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ca22:	e7ea      	b.n	800c9fa <_strtod_l+0x8c2>
 800ca24:	4613      	mov	r3, r2
 800ca26:	e7e8      	b.n	800c9fa <_strtod_l+0x8c2>
 800ca28:	ea53 030a 	orrs.w	r3, r3, sl
 800ca2c:	d08c      	beq.n	800c948 <_strtod_l+0x810>
 800ca2e:	9b08      	ldr	r3, [sp, #32]
 800ca30:	b1db      	cbz	r3, 800ca6a <_strtod_l+0x932>
 800ca32:	423b      	tst	r3, r7
 800ca34:	d0ef      	beq.n	800ca16 <_strtod_l+0x8de>
 800ca36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca38:	9a04      	ldr	r2, [sp, #16]
 800ca3a:	4650      	mov	r0, sl
 800ca3c:	4659      	mov	r1, fp
 800ca3e:	b1c3      	cbz	r3, 800ca72 <_strtod_l+0x93a>
 800ca40:	f7ff fb5e 	bl	800c100 <sulp>
 800ca44:	4602      	mov	r2, r0
 800ca46:	460b      	mov	r3, r1
 800ca48:	ec51 0b18 	vmov	r0, r1, d8
 800ca4c:	f7f3 fc1e 	bl	800028c <__adddf3>
 800ca50:	4682      	mov	sl, r0
 800ca52:	468b      	mov	fp, r1
 800ca54:	e7df      	b.n	800ca16 <_strtod_l+0x8de>
 800ca56:	4013      	ands	r3, r2
 800ca58:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ca5c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ca60:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ca64:	f04f 3aff 	mov.w	sl, #4294967295
 800ca68:	e7d5      	b.n	800ca16 <_strtod_l+0x8de>
 800ca6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca6c:	ea13 0f0a 	tst.w	r3, sl
 800ca70:	e7e0      	b.n	800ca34 <_strtod_l+0x8fc>
 800ca72:	f7ff fb45 	bl	800c100 <sulp>
 800ca76:	4602      	mov	r2, r0
 800ca78:	460b      	mov	r3, r1
 800ca7a:	ec51 0b18 	vmov	r0, r1, d8
 800ca7e:	f7f3 fc03 	bl	8000288 <__aeabi_dsub>
 800ca82:	2200      	movs	r2, #0
 800ca84:	2300      	movs	r3, #0
 800ca86:	4682      	mov	sl, r0
 800ca88:	468b      	mov	fp, r1
 800ca8a:	f7f4 f81d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca8e:	2800      	cmp	r0, #0
 800ca90:	d0c1      	beq.n	800ca16 <_strtod_l+0x8de>
 800ca92:	e611      	b.n	800c6b8 <_strtod_l+0x580>
 800ca94:	fffffc02 	.word	0xfffffc02
 800ca98:	7ff00000 	.word	0x7ff00000
 800ca9c:	39500000 	.word	0x39500000
 800caa0:	000fffff 	.word	0x000fffff
 800caa4:	7fefffff 	.word	0x7fefffff
 800caa8:	080aef08 	.word	0x080aef08
 800caac:	4631      	mov	r1, r6
 800caae:	4628      	mov	r0, r5
 800cab0:	f002 fb06 	bl	800f0c0 <__ratio>
 800cab4:	ec59 8b10 	vmov	r8, r9, d0
 800cab8:	ee10 0a10 	vmov	r0, s0
 800cabc:	2200      	movs	r2, #0
 800cabe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cac2:	4649      	mov	r1, r9
 800cac4:	f7f4 f814 	bl	8000af0 <__aeabi_dcmple>
 800cac8:	2800      	cmp	r0, #0
 800caca:	d07a      	beq.n	800cbc2 <_strtod_l+0xa8a>
 800cacc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d04a      	beq.n	800cb68 <_strtod_l+0xa30>
 800cad2:	4b95      	ldr	r3, [pc, #596]	; (800cd28 <_strtod_l+0xbf0>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cada:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800cd28 <_strtod_l+0xbf0>
 800cade:	f04f 0800 	mov.w	r8, #0
 800cae2:	4b92      	ldr	r3, [pc, #584]	; (800cd2c <_strtod_l+0xbf4>)
 800cae4:	403b      	ands	r3, r7
 800cae6:	930d      	str	r3, [sp, #52]	; 0x34
 800cae8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800caea:	4b91      	ldr	r3, [pc, #580]	; (800cd30 <_strtod_l+0xbf8>)
 800caec:	429a      	cmp	r2, r3
 800caee:	f040 80b0 	bne.w	800cc52 <_strtod_l+0xb1a>
 800caf2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800caf6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800cafa:	ec4b ab10 	vmov	d0, sl, fp
 800cafe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cb02:	f002 fa05 	bl	800ef10 <__ulp>
 800cb06:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cb0a:	ec53 2b10 	vmov	r2, r3, d0
 800cb0e:	f7f3 fd73 	bl	80005f8 <__aeabi_dmul>
 800cb12:	4652      	mov	r2, sl
 800cb14:	465b      	mov	r3, fp
 800cb16:	f7f3 fbb9 	bl	800028c <__adddf3>
 800cb1a:	460b      	mov	r3, r1
 800cb1c:	4983      	ldr	r1, [pc, #524]	; (800cd2c <_strtod_l+0xbf4>)
 800cb1e:	4a85      	ldr	r2, [pc, #532]	; (800cd34 <_strtod_l+0xbfc>)
 800cb20:	4019      	ands	r1, r3
 800cb22:	4291      	cmp	r1, r2
 800cb24:	4682      	mov	sl, r0
 800cb26:	d960      	bls.n	800cbea <_strtod_l+0xab2>
 800cb28:	ee18 3a90 	vmov	r3, s17
 800cb2c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d104      	bne.n	800cb3e <_strtod_l+0xa06>
 800cb34:	ee18 3a10 	vmov	r3, s16
 800cb38:	3301      	adds	r3, #1
 800cb3a:	f43f ad45 	beq.w	800c5c8 <_strtod_l+0x490>
 800cb3e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800cd40 <_strtod_l+0xc08>
 800cb42:	f04f 3aff 	mov.w	sl, #4294967295
 800cb46:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cb48:	4620      	mov	r0, r4
 800cb4a:	f001 feaf 	bl	800e8ac <_Bfree>
 800cb4e:	9905      	ldr	r1, [sp, #20]
 800cb50:	4620      	mov	r0, r4
 800cb52:	f001 feab 	bl	800e8ac <_Bfree>
 800cb56:	4631      	mov	r1, r6
 800cb58:	4620      	mov	r0, r4
 800cb5a:	f001 fea7 	bl	800e8ac <_Bfree>
 800cb5e:	4629      	mov	r1, r5
 800cb60:	4620      	mov	r0, r4
 800cb62:	f001 fea3 	bl	800e8ac <_Bfree>
 800cb66:	e61a      	b.n	800c79e <_strtod_l+0x666>
 800cb68:	f1ba 0f00 	cmp.w	sl, #0
 800cb6c:	d11b      	bne.n	800cba6 <_strtod_l+0xa6e>
 800cb6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cb72:	b9f3      	cbnz	r3, 800cbb2 <_strtod_l+0xa7a>
 800cb74:	4b6c      	ldr	r3, [pc, #432]	; (800cd28 <_strtod_l+0xbf0>)
 800cb76:	2200      	movs	r2, #0
 800cb78:	4640      	mov	r0, r8
 800cb7a:	4649      	mov	r1, r9
 800cb7c:	f7f3 ffae 	bl	8000adc <__aeabi_dcmplt>
 800cb80:	b9d0      	cbnz	r0, 800cbb8 <_strtod_l+0xa80>
 800cb82:	4640      	mov	r0, r8
 800cb84:	4649      	mov	r1, r9
 800cb86:	4b6c      	ldr	r3, [pc, #432]	; (800cd38 <_strtod_l+0xc00>)
 800cb88:	2200      	movs	r2, #0
 800cb8a:	f7f3 fd35 	bl	80005f8 <__aeabi_dmul>
 800cb8e:	4680      	mov	r8, r0
 800cb90:	4689      	mov	r9, r1
 800cb92:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cb96:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800cb9a:	9315      	str	r3, [sp, #84]	; 0x54
 800cb9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800cba0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cba4:	e79d      	b.n	800cae2 <_strtod_l+0x9aa>
 800cba6:	f1ba 0f01 	cmp.w	sl, #1
 800cbaa:	d102      	bne.n	800cbb2 <_strtod_l+0xa7a>
 800cbac:	2f00      	cmp	r7, #0
 800cbae:	f43f ad83 	beq.w	800c6b8 <_strtod_l+0x580>
 800cbb2:	4b62      	ldr	r3, [pc, #392]	; (800cd3c <_strtod_l+0xc04>)
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	e78e      	b.n	800cad6 <_strtod_l+0x99e>
 800cbb8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800cd38 <_strtod_l+0xc00>
 800cbbc:	f04f 0800 	mov.w	r8, #0
 800cbc0:	e7e7      	b.n	800cb92 <_strtod_l+0xa5a>
 800cbc2:	4b5d      	ldr	r3, [pc, #372]	; (800cd38 <_strtod_l+0xc00>)
 800cbc4:	4640      	mov	r0, r8
 800cbc6:	4649      	mov	r1, r9
 800cbc8:	2200      	movs	r2, #0
 800cbca:	f7f3 fd15 	bl	80005f8 <__aeabi_dmul>
 800cbce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbd0:	4680      	mov	r8, r0
 800cbd2:	4689      	mov	r9, r1
 800cbd4:	b933      	cbnz	r3, 800cbe4 <_strtod_l+0xaac>
 800cbd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cbda:	900e      	str	r0, [sp, #56]	; 0x38
 800cbdc:	930f      	str	r3, [sp, #60]	; 0x3c
 800cbde:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800cbe2:	e7dd      	b.n	800cba0 <_strtod_l+0xa68>
 800cbe4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800cbe8:	e7f9      	b.n	800cbde <_strtod_l+0xaa6>
 800cbea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800cbee:	9b04      	ldr	r3, [sp, #16]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d1a8      	bne.n	800cb46 <_strtod_l+0xa0e>
 800cbf4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cbf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cbfa:	0d1b      	lsrs	r3, r3, #20
 800cbfc:	051b      	lsls	r3, r3, #20
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d1a1      	bne.n	800cb46 <_strtod_l+0xa0e>
 800cc02:	4640      	mov	r0, r8
 800cc04:	4649      	mov	r1, r9
 800cc06:	f7f4 f857 	bl	8000cb8 <__aeabi_d2lz>
 800cc0a:	f7f3 fcc7 	bl	800059c <__aeabi_l2d>
 800cc0e:	4602      	mov	r2, r0
 800cc10:	460b      	mov	r3, r1
 800cc12:	4640      	mov	r0, r8
 800cc14:	4649      	mov	r1, r9
 800cc16:	f7f3 fb37 	bl	8000288 <__aeabi_dsub>
 800cc1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cc1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc20:	ea43 030a 	orr.w	r3, r3, sl
 800cc24:	4313      	orrs	r3, r2
 800cc26:	4680      	mov	r8, r0
 800cc28:	4689      	mov	r9, r1
 800cc2a:	d055      	beq.n	800ccd8 <_strtod_l+0xba0>
 800cc2c:	a336      	add	r3, pc, #216	; (adr r3, 800cd08 <_strtod_l+0xbd0>)
 800cc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc32:	f7f3 ff53 	bl	8000adc <__aeabi_dcmplt>
 800cc36:	2800      	cmp	r0, #0
 800cc38:	f47f acd0 	bne.w	800c5dc <_strtod_l+0x4a4>
 800cc3c:	a334      	add	r3, pc, #208	; (adr r3, 800cd10 <_strtod_l+0xbd8>)
 800cc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc42:	4640      	mov	r0, r8
 800cc44:	4649      	mov	r1, r9
 800cc46:	f7f3 ff67 	bl	8000b18 <__aeabi_dcmpgt>
 800cc4a:	2800      	cmp	r0, #0
 800cc4c:	f43f af7b 	beq.w	800cb46 <_strtod_l+0xa0e>
 800cc50:	e4c4      	b.n	800c5dc <_strtod_l+0x4a4>
 800cc52:	9b04      	ldr	r3, [sp, #16]
 800cc54:	b333      	cbz	r3, 800cca4 <_strtod_l+0xb6c>
 800cc56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc58:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cc5c:	d822      	bhi.n	800cca4 <_strtod_l+0xb6c>
 800cc5e:	a32e      	add	r3, pc, #184	; (adr r3, 800cd18 <_strtod_l+0xbe0>)
 800cc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc64:	4640      	mov	r0, r8
 800cc66:	4649      	mov	r1, r9
 800cc68:	f7f3 ff42 	bl	8000af0 <__aeabi_dcmple>
 800cc6c:	b1a0      	cbz	r0, 800cc98 <_strtod_l+0xb60>
 800cc6e:	4649      	mov	r1, r9
 800cc70:	4640      	mov	r0, r8
 800cc72:	f7f3 ff99 	bl	8000ba8 <__aeabi_d2uiz>
 800cc76:	2801      	cmp	r0, #1
 800cc78:	bf38      	it	cc
 800cc7a:	2001      	movcc	r0, #1
 800cc7c:	f7f3 fc42 	bl	8000504 <__aeabi_ui2d>
 800cc80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc82:	4680      	mov	r8, r0
 800cc84:	4689      	mov	r9, r1
 800cc86:	bb23      	cbnz	r3, 800ccd2 <_strtod_l+0xb9a>
 800cc88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc8c:	9010      	str	r0, [sp, #64]	; 0x40
 800cc8e:	9311      	str	r3, [sp, #68]	; 0x44
 800cc90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cc94:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cc98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cc9c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800cca0:	1a9b      	subs	r3, r3, r2
 800cca2:	9309      	str	r3, [sp, #36]	; 0x24
 800cca4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cca8:	eeb0 0a48 	vmov.f32	s0, s16
 800ccac:	eef0 0a68 	vmov.f32	s1, s17
 800ccb0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ccb4:	f002 f92c 	bl	800ef10 <__ulp>
 800ccb8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ccbc:	ec53 2b10 	vmov	r2, r3, d0
 800ccc0:	f7f3 fc9a 	bl	80005f8 <__aeabi_dmul>
 800ccc4:	ec53 2b18 	vmov	r2, r3, d8
 800ccc8:	f7f3 fae0 	bl	800028c <__adddf3>
 800cccc:	4682      	mov	sl, r0
 800ccce:	468b      	mov	fp, r1
 800ccd0:	e78d      	b.n	800cbee <_strtod_l+0xab6>
 800ccd2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ccd6:	e7db      	b.n	800cc90 <_strtod_l+0xb58>
 800ccd8:	a311      	add	r3, pc, #68	; (adr r3, 800cd20 <_strtod_l+0xbe8>)
 800ccda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccde:	f7f3 fefd 	bl	8000adc <__aeabi_dcmplt>
 800cce2:	e7b2      	b.n	800cc4a <_strtod_l+0xb12>
 800cce4:	2300      	movs	r3, #0
 800cce6:	930a      	str	r3, [sp, #40]	; 0x28
 800cce8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ccea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ccec:	6013      	str	r3, [r2, #0]
 800ccee:	f7ff ba6b 	b.w	800c1c8 <_strtod_l+0x90>
 800ccf2:	2a65      	cmp	r2, #101	; 0x65
 800ccf4:	f43f ab5f 	beq.w	800c3b6 <_strtod_l+0x27e>
 800ccf8:	2a45      	cmp	r2, #69	; 0x45
 800ccfa:	f43f ab5c 	beq.w	800c3b6 <_strtod_l+0x27e>
 800ccfe:	2301      	movs	r3, #1
 800cd00:	f7ff bb94 	b.w	800c42c <_strtod_l+0x2f4>
 800cd04:	f3af 8000 	nop.w
 800cd08:	94a03595 	.word	0x94a03595
 800cd0c:	3fdfffff 	.word	0x3fdfffff
 800cd10:	35afe535 	.word	0x35afe535
 800cd14:	3fe00000 	.word	0x3fe00000
 800cd18:	ffc00000 	.word	0xffc00000
 800cd1c:	41dfffff 	.word	0x41dfffff
 800cd20:	94a03595 	.word	0x94a03595
 800cd24:	3fcfffff 	.word	0x3fcfffff
 800cd28:	3ff00000 	.word	0x3ff00000
 800cd2c:	7ff00000 	.word	0x7ff00000
 800cd30:	7fe00000 	.word	0x7fe00000
 800cd34:	7c9fffff 	.word	0x7c9fffff
 800cd38:	3fe00000 	.word	0x3fe00000
 800cd3c:	bff00000 	.word	0xbff00000
 800cd40:	7fefffff 	.word	0x7fefffff

0800cd44 <_strtod_r>:
 800cd44:	4b01      	ldr	r3, [pc, #4]	; (800cd4c <_strtod_r+0x8>)
 800cd46:	f7ff b9f7 	b.w	800c138 <_strtod_l>
 800cd4a:	bf00      	nop
 800cd4c:	20000948 	.word	0x20000948

0800cd50 <_strtol_l.constprop.0>:
 800cd50:	2b01      	cmp	r3, #1
 800cd52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd56:	d001      	beq.n	800cd5c <_strtol_l.constprop.0+0xc>
 800cd58:	2b24      	cmp	r3, #36	; 0x24
 800cd5a:	d906      	bls.n	800cd6a <_strtol_l.constprop.0+0x1a>
 800cd5c:	f7fe f96a 	bl	800b034 <__errno>
 800cd60:	2316      	movs	r3, #22
 800cd62:	6003      	str	r3, [r0, #0]
 800cd64:	2000      	movs	r0, #0
 800cd66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd6a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ce50 <_strtol_l.constprop.0+0x100>
 800cd6e:	460d      	mov	r5, r1
 800cd70:	462e      	mov	r6, r5
 800cd72:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd76:	f814 700c 	ldrb.w	r7, [r4, ip]
 800cd7a:	f017 0708 	ands.w	r7, r7, #8
 800cd7e:	d1f7      	bne.n	800cd70 <_strtol_l.constprop.0+0x20>
 800cd80:	2c2d      	cmp	r4, #45	; 0x2d
 800cd82:	d132      	bne.n	800cdea <_strtol_l.constprop.0+0x9a>
 800cd84:	782c      	ldrb	r4, [r5, #0]
 800cd86:	2701      	movs	r7, #1
 800cd88:	1cb5      	adds	r5, r6, #2
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d05b      	beq.n	800ce46 <_strtol_l.constprop.0+0xf6>
 800cd8e:	2b10      	cmp	r3, #16
 800cd90:	d109      	bne.n	800cda6 <_strtol_l.constprop.0+0x56>
 800cd92:	2c30      	cmp	r4, #48	; 0x30
 800cd94:	d107      	bne.n	800cda6 <_strtol_l.constprop.0+0x56>
 800cd96:	782c      	ldrb	r4, [r5, #0]
 800cd98:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cd9c:	2c58      	cmp	r4, #88	; 0x58
 800cd9e:	d14d      	bne.n	800ce3c <_strtol_l.constprop.0+0xec>
 800cda0:	786c      	ldrb	r4, [r5, #1]
 800cda2:	2310      	movs	r3, #16
 800cda4:	3502      	adds	r5, #2
 800cda6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cdaa:	f108 38ff 	add.w	r8, r8, #4294967295
 800cdae:	f04f 0c00 	mov.w	ip, #0
 800cdb2:	fbb8 f9f3 	udiv	r9, r8, r3
 800cdb6:	4666      	mov	r6, ip
 800cdb8:	fb03 8a19 	mls	sl, r3, r9, r8
 800cdbc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800cdc0:	f1be 0f09 	cmp.w	lr, #9
 800cdc4:	d816      	bhi.n	800cdf4 <_strtol_l.constprop.0+0xa4>
 800cdc6:	4674      	mov	r4, lr
 800cdc8:	42a3      	cmp	r3, r4
 800cdca:	dd24      	ble.n	800ce16 <_strtol_l.constprop.0+0xc6>
 800cdcc:	f1bc 0f00 	cmp.w	ip, #0
 800cdd0:	db1e      	blt.n	800ce10 <_strtol_l.constprop.0+0xc0>
 800cdd2:	45b1      	cmp	r9, r6
 800cdd4:	d31c      	bcc.n	800ce10 <_strtol_l.constprop.0+0xc0>
 800cdd6:	d101      	bne.n	800cddc <_strtol_l.constprop.0+0x8c>
 800cdd8:	45a2      	cmp	sl, r4
 800cdda:	db19      	blt.n	800ce10 <_strtol_l.constprop.0+0xc0>
 800cddc:	fb06 4603 	mla	r6, r6, r3, r4
 800cde0:	f04f 0c01 	mov.w	ip, #1
 800cde4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cde8:	e7e8      	b.n	800cdbc <_strtol_l.constprop.0+0x6c>
 800cdea:	2c2b      	cmp	r4, #43	; 0x2b
 800cdec:	bf04      	itt	eq
 800cdee:	782c      	ldrbeq	r4, [r5, #0]
 800cdf0:	1cb5      	addeq	r5, r6, #2
 800cdf2:	e7ca      	b.n	800cd8a <_strtol_l.constprop.0+0x3a>
 800cdf4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cdf8:	f1be 0f19 	cmp.w	lr, #25
 800cdfc:	d801      	bhi.n	800ce02 <_strtol_l.constprop.0+0xb2>
 800cdfe:	3c37      	subs	r4, #55	; 0x37
 800ce00:	e7e2      	b.n	800cdc8 <_strtol_l.constprop.0+0x78>
 800ce02:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ce06:	f1be 0f19 	cmp.w	lr, #25
 800ce0a:	d804      	bhi.n	800ce16 <_strtol_l.constprop.0+0xc6>
 800ce0c:	3c57      	subs	r4, #87	; 0x57
 800ce0e:	e7db      	b.n	800cdc8 <_strtol_l.constprop.0+0x78>
 800ce10:	f04f 3cff 	mov.w	ip, #4294967295
 800ce14:	e7e6      	b.n	800cde4 <_strtol_l.constprop.0+0x94>
 800ce16:	f1bc 0f00 	cmp.w	ip, #0
 800ce1a:	da05      	bge.n	800ce28 <_strtol_l.constprop.0+0xd8>
 800ce1c:	2322      	movs	r3, #34	; 0x22
 800ce1e:	6003      	str	r3, [r0, #0]
 800ce20:	4646      	mov	r6, r8
 800ce22:	b942      	cbnz	r2, 800ce36 <_strtol_l.constprop.0+0xe6>
 800ce24:	4630      	mov	r0, r6
 800ce26:	e79e      	b.n	800cd66 <_strtol_l.constprop.0+0x16>
 800ce28:	b107      	cbz	r7, 800ce2c <_strtol_l.constprop.0+0xdc>
 800ce2a:	4276      	negs	r6, r6
 800ce2c:	2a00      	cmp	r2, #0
 800ce2e:	d0f9      	beq.n	800ce24 <_strtol_l.constprop.0+0xd4>
 800ce30:	f1bc 0f00 	cmp.w	ip, #0
 800ce34:	d000      	beq.n	800ce38 <_strtol_l.constprop.0+0xe8>
 800ce36:	1e69      	subs	r1, r5, #1
 800ce38:	6011      	str	r1, [r2, #0]
 800ce3a:	e7f3      	b.n	800ce24 <_strtol_l.constprop.0+0xd4>
 800ce3c:	2430      	movs	r4, #48	; 0x30
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d1b1      	bne.n	800cda6 <_strtol_l.constprop.0+0x56>
 800ce42:	2308      	movs	r3, #8
 800ce44:	e7af      	b.n	800cda6 <_strtol_l.constprop.0+0x56>
 800ce46:	2c30      	cmp	r4, #48	; 0x30
 800ce48:	d0a5      	beq.n	800cd96 <_strtol_l.constprop.0+0x46>
 800ce4a:	230a      	movs	r3, #10
 800ce4c:	e7ab      	b.n	800cda6 <_strtol_l.constprop.0+0x56>
 800ce4e:	bf00      	nop
 800ce50:	080aef31 	.word	0x080aef31

0800ce54 <_strtol_r>:
 800ce54:	f7ff bf7c 	b.w	800cd50 <_strtol_l.constprop.0>

0800ce58 <__swbuf_r>:
 800ce58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce5a:	460e      	mov	r6, r1
 800ce5c:	4614      	mov	r4, r2
 800ce5e:	4605      	mov	r5, r0
 800ce60:	b118      	cbz	r0, 800ce6a <__swbuf_r+0x12>
 800ce62:	6983      	ldr	r3, [r0, #24]
 800ce64:	b90b      	cbnz	r3, 800ce6a <__swbuf_r+0x12>
 800ce66:	f001 f84b 	bl	800df00 <__sinit>
 800ce6a:	4b21      	ldr	r3, [pc, #132]	; (800cef0 <__swbuf_r+0x98>)
 800ce6c:	429c      	cmp	r4, r3
 800ce6e:	d12b      	bne.n	800cec8 <__swbuf_r+0x70>
 800ce70:	686c      	ldr	r4, [r5, #4]
 800ce72:	69a3      	ldr	r3, [r4, #24]
 800ce74:	60a3      	str	r3, [r4, #8]
 800ce76:	89a3      	ldrh	r3, [r4, #12]
 800ce78:	071a      	lsls	r2, r3, #28
 800ce7a:	d52f      	bpl.n	800cedc <__swbuf_r+0x84>
 800ce7c:	6923      	ldr	r3, [r4, #16]
 800ce7e:	b36b      	cbz	r3, 800cedc <__swbuf_r+0x84>
 800ce80:	6923      	ldr	r3, [r4, #16]
 800ce82:	6820      	ldr	r0, [r4, #0]
 800ce84:	1ac0      	subs	r0, r0, r3
 800ce86:	6963      	ldr	r3, [r4, #20]
 800ce88:	b2f6      	uxtb	r6, r6
 800ce8a:	4283      	cmp	r3, r0
 800ce8c:	4637      	mov	r7, r6
 800ce8e:	dc04      	bgt.n	800ce9a <__swbuf_r+0x42>
 800ce90:	4621      	mov	r1, r4
 800ce92:	4628      	mov	r0, r5
 800ce94:	f000 ffa0 	bl	800ddd8 <_fflush_r>
 800ce98:	bb30      	cbnz	r0, 800cee8 <__swbuf_r+0x90>
 800ce9a:	68a3      	ldr	r3, [r4, #8]
 800ce9c:	3b01      	subs	r3, #1
 800ce9e:	60a3      	str	r3, [r4, #8]
 800cea0:	6823      	ldr	r3, [r4, #0]
 800cea2:	1c5a      	adds	r2, r3, #1
 800cea4:	6022      	str	r2, [r4, #0]
 800cea6:	701e      	strb	r6, [r3, #0]
 800cea8:	6963      	ldr	r3, [r4, #20]
 800ceaa:	3001      	adds	r0, #1
 800ceac:	4283      	cmp	r3, r0
 800ceae:	d004      	beq.n	800ceba <__swbuf_r+0x62>
 800ceb0:	89a3      	ldrh	r3, [r4, #12]
 800ceb2:	07db      	lsls	r3, r3, #31
 800ceb4:	d506      	bpl.n	800cec4 <__swbuf_r+0x6c>
 800ceb6:	2e0a      	cmp	r6, #10
 800ceb8:	d104      	bne.n	800cec4 <__swbuf_r+0x6c>
 800ceba:	4621      	mov	r1, r4
 800cebc:	4628      	mov	r0, r5
 800cebe:	f000 ff8b 	bl	800ddd8 <_fflush_r>
 800cec2:	b988      	cbnz	r0, 800cee8 <__swbuf_r+0x90>
 800cec4:	4638      	mov	r0, r7
 800cec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cec8:	4b0a      	ldr	r3, [pc, #40]	; (800cef4 <__swbuf_r+0x9c>)
 800ceca:	429c      	cmp	r4, r3
 800cecc:	d101      	bne.n	800ced2 <__swbuf_r+0x7a>
 800cece:	68ac      	ldr	r4, [r5, #8]
 800ced0:	e7cf      	b.n	800ce72 <__swbuf_r+0x1a>
 800ced2:	4b09      	ldr	r3, [pc, #36]	; (800cef8 <__swbuf_r+0xa0>)
 800ced4:	429c      	cmp	r4, r3
 800ced6:	bf08      	it	eq
 800ced8:	68ec      	ldreq	r4, [r5, #12]
 800ceda:	e7ca      	b.n	800ce72 <__swbuf_r+0x1a>
 800cedc:	4621      	mov	r1, r4
 800cede:	4628      	mov	r0, r5
 800cee0:	f000 f80c 	bl	800cefc <__swsetup_r>
 800cee4:	2800      	cmp	r0, #0
 800cee6:	d0cb      	beq.n	800ce80 <__swbuf_r+0x28>
 800cee8:	f04f 37ff 	mov.w	r7, #4294967295
 800ceec:	e7ea      	b.n	800cec4 <__swbuf_r+0x6c>
 800ceee:	bf00      	nop
 800cef0:	080af0e4 	.word	0x080af0e4
 800cef4:	080af104 	.word	0x080af104
 800cef8:	080af0c4 	.word	0x080af0c4

0800cefc <__swsetup_r>:
 800cefc:	4b32      	ldr	r3, [pc, #200]	; (800cfc8 <__swsetup_r+0xcc>)
 800cefe:	b570      	push	{r4, r5, r6, lr}
 800cf00:	681d      	ldr	r5, [r3, #0]
 800cf02:	4606      	mov	r6, r0
 800cf04:	460c      	mov	r4, r1
 800cf06:	b125      	cbz	r5, 800cf12 <__swsetup_r+0x16>
 800cf08:	69ab      	ldr	r3, [r5, #24]
 800cf0a:	b913      	cbnz	r3, 800cf12 <__swsetup_r+0x16>
 800cf0c:	4628      	mov	r0, r5
 800cf0e:	f000 fff7 	bl	800df00 <__sinit>
 800cf12:	4b2e      	ldr	r3, [pc, #184]	; (800cfcc <__swsetup_r+0xd0>)
 800cf14:	429c      	cmp	r4, r3
 800cf16:	d10f      	bne.n	800cf38 <__swsetup_r+0x3c>
 800cf18:	686c      	ldr	r4, [r5, #4]
 800cf1a:	89a3      	ldrh	r3, [r4, #12]
 800cf1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf20:	0719      	lsls	r1, r3, #28
 800cf22:	d42c      	bmi.n	800cf7e <__swsetup_r+0x82>
 800cf24:	06dd      	lsls	r5, r3, #27
 800cf26:	d411      	bmi.n	800cf4c <__swsetup_r+0x50>
 800cf28:	2309      	movs	r3, #9
 800cf2a:	6033      	str	r3, [r6, #0]
 800cf2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cf30:	81a3      	strh	r3, [r4, #12]
 800cf32:	f04f 30ff 	mov.w	r0, #4294967295
 800cf36:	e03e      	b.n	800cfb6 <__swsetup_r+0xba>
 800cf38:	4b25      	ldr	r3, [pc, #148]	; (800cfd0 <__swsetup_r+0xd4>)
 800cf3a:	429c      	cmp	r4, r3
 800cf3c:	d101      	bne.n	800cf42 <__swsetup_r+0x46>
 800cf3e:	68ac      	ldr	r4, [r5, #8]
 800cf40:	e7eb      	b.n	800cf1a <__swsetup_r+0x1e>
 800cf42:	4b24      	ldr	r3, [pc, #144]	; (800cfd4 <__swsetup_r+0xd8>)
 800cf44:	429c      	cmp	r4, r3
 800cf46:	bf08      	it	eq
 800cf48:	68ec      	ldreq	r4, [r5, #12]
 800cf4a:	e7e6      	b.n	800cf1a <__swsetup_r+0x1e>
 800cf4c:	0758      	lsls	r0, r3, #29
 800cf4e:	d512      	bpl.n	800cf76 <__swsetup_r+0x7a>
 800cf50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf52:	b141      	cbz	r1, 800cf66 <__swsetup_r+0x6a>
 800cf54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf58:	4299      	cmp	r1, r3
 800cf5a:	d002      	beq.n	800cf62 <__swsetup_r+0x66>
 800cf5c:	4630      	mov	r0, r6
 800cf5e:	f7fe f8b1 	bl	800b0c4 <_free_r>
 800cf62:	2300      	movs	r3, #0
 800cf64:	6363      	str	r3, [r4, #52]	; 0x34
 800cf66:	89a3      	ldrh	r3, [r4, #12]
 800cf68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cf6c:	81a3      	strh	r3, [r4, #12]
 800cf6e:	2300      	movs	r3, #0
 800cf70:	6063      	str	r3, [r4, #4]
 800cf72:	6923      	ldr	r3, [r4, #16]
 800cf74:	6023      	str	r3, [r4, #0]
 800cf76:	89a3      	ldrh	r3, [r4, #12]
 800cf78:	f043 0308 	orr.w	r3, r3, #8
 800cf7c:	81a3      	strh	r3, [r4, #12]
 800cf7e:	6923      	ldr	r3, [r4, #16]
 800cf80:	b94b      	cbnz	r3, 800cf96 <__swsetup_r+0x9a>
 800cf82:	89a3      	ldrh	r3, [r4, #12]
 800cf84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cf88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf8c:	d003      	beq.n	800cf96 <__swsetup_r+0x9a>
 800cf8e:	4621      	mov	r1, r4
 800cf90:	4630      	mov	r0, r6
 800cf92:	f001 fbed 	bl	800e770 <__smakebuf_r>
 800cf96:	89a0      	ldrh	r0, [r4, #12]
 800cf98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf9c:	f010 0301 	ands.w	r3, r0, #1
 800cfa0:	d00a      	beq.n	800cfb8 <__swsetup_r+0xbc>
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	60a3      	str	r3, [r4, #8]
 800cfa6:	6963      	ldr	r3, [r4, #20]
 800cfa8:	425b      	negs	r3, r3
 800cfaa:	61a3      	str	r3, [r4, #24]
 800cfac:	6923      	ldr	r3, [r4, #16]
 800cfae:	b943      	cbnz	r3, 800cfc2 <__swsetup_r+0xc6>
 800cfb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cfb4:	d1ba      	bne.n	800cf2c <__swsetup_r+0x30>
 800cfb6:	bd70      	pop	{r4, r5, r6, pc}
 800cfb8:	0781      	lsls	r1, r0, #30
 800cfba:	bf58      	it	pl
 800cfbc:	6963      	ldrpl	r3, [r4, #20]
 800cfbe:	60a3      	str	r3, [r4, #8]
 800cfc0:	e7f4      	b.n	800cfac <__swsetup_r+0xb0>
 800cfc2:	2000      	movs	r0, #0
 800cfc4:	e7f7      	b.n	800cfb6 <__swsetup_r+0xba>
 800cfc6:	bf00      	nop
 800cfc8:	200008e0 	.word	0x200008e0
 800cfcc:	080af0e4 	.word	0x080af0e4
 800cfd0:	080af104 	.word	0x080af104
 800cfd4:	080af0c4 	.word	0x080af0c4

0800cfd8 <quorem>:
 800cfd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfdc:	6903      	ldr	r3, [r0, #16]
 800cfde:	690c      	ldr	r4, [r1, #16]
 800cfe0:	42a3      	cmp	r3, r4
 800cfe2:	4607      	mov	r7, r0
 800cfe4:	f2c0 8081 	blt.w	800d0ea <quorem+0x112>
 800cfe8:	3c01      	subs	r4, #1
 800cfea:	f101 0814 	add.w	r8, r1, #20
 800cfee:	f100 0514 	add.w	r5, r0, #20
 800cff2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cff6:	9301      	str	r3, [sp, #4]
 800cff8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cffc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d000:	3301      	adds	r3, #1
 800d002:	429a      	cmp	r2, r3
 800d004:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d008:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d00c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d010:	d331      	bcc.n	800d076 <quorem+0x9e>
 800d012:	f04f 0e00 	mov.w	lr, #0
 800d016:	4640      	mov	r0, r8
 800d018:	46ac      	mov	ip, r5
 800d01a:	46f2      	mov	sl, lr
 800d01c:	f850 2b04 	ldr.w	r2, [r0], #4
 800d020:	b293      	uxth	r3, r2
 800d022:	fb06 e303 	mla	r3, r6, r3, lr
 800d026:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d02a:	b29b      	uxth	r3, r3
 800d02c:	ebaa 0303 	sub.w	r3, sl, r3
 800d030:	f8dc a000 	ldr.w	sl, [ip]
 800d034:	0c12      	lsrs	r2, r2, #16
 800d036:	fa13 f38a 	uxtah	r3, r3, sl
 800d03a:	fb06 e202 	mla	r2, r6, r2, lr
 800d03e:	9300      	str	r3, [sp, #0]
 800d040:	9b00      	ldr	r3, [sp, #0]
 800d042:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d046:	b292      	uxth	r2, r2
 800d048:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d04c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d050:	f8bd 3000 	ldrh.w	r3, [sp]
 800d054:	4581      	cmp	r9, r0
 800d056:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d05a:	f84c 3b04 	str.w	r3, [ip], #4
 800d05e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d062:	d2db      	bcs.n	800d01c <quorem+0x44>
 800d064:	f855 300b 	ldr.w	r3, [r5, fp]
 800d068:	b92b      	cbnz	r3, 800d076 <quorem+0x9e>
 800d06a:	9b01      	ldr	r3, [sp, #4]
 800d06c:	3b04      	subs	r3, #4
 800d06e:	429d      	cmp	r5, r3
 800d070:	461a      	mov	r2, r3
 800d072:	d32e      	bcc.n	800d0d2 <quorem+0xfa>
 800d074:	613c      	str	r4, [r7, #16]
 800d076:	4638      	mov	r0, r7
 800d078:	f001 fea4 	bl	800edc4 <__mcmp>
 800d07c:	2800      	cmp	r0, #0
 800d07e:	db24      	blt.n	800d0ca <quorem+0xf2>
 800d080:	3601      	adds	r6, #1
 800d082:	4628      	mov	r0, r5
 800d084:	f04f 0c00 	mov.w	ip, #0
 800d088:	f858 2b04 	ldr.w	r2, [r8], #4
 800d08c:	f8d0 e000 	ldr.w	lr, [r0]
 800d090:	b293      	uxth	r3, r2
 800d092:	ebac 0303 	sub.w	r3, ip, r3
 800d096:	0c12      	lsrs	r2, r2, #16
 800d098:	fa13 f38e 	uxtah	r3, r3, lr
 800d09c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d0a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d0a4:	b29b      	uxth	r3, r3
 800d0a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d0aa:	45c1      	cmp	r9, r8
 800d0ac:	f840 3b04 	str.w	r3, [r0], #4
 800d0b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d0b4:	d2e8      	bcs.n	800d088 <quorem+0xb0>
 800d0b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d0ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d0be:	b922      	cbnz	r2, 800d0ca <quorem+0xf2>
 800d0c0:	3b04      	subs	r3, #4
 800d0c2:	429d      	cmp	r5, r3
 800d0c4:	461a      	mov	r2, r3
 800d0c6:	d30a      	bcc.n	800d0de <quorem+0x106>
 800d0c8:	613c      	str	r4, [r7, #16]
 800d0ca:	4630      	mov	r0, r6
 800d0cc:	b003      	add	sp, #12
 800d0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0d2:	6812      	ldr	r2, [r2, #0]
 800d0d4:	3b04      	subs	r3, #4
 800d0d6:	2a00      	cmp	r2, #0
 800d0d8:	d1cc      	bne.n	800d074 <quorem+0x9c>
 800d0da:	3c01      	subs	r4, #1
 800d0dc:	e7c7      	b.n	800d06e <quorem+0x96>
 800d0de:	6812      	ldr	r2, [r2, #0]
 800d0e0:	3b04      	subs	r3, #4
 800d0e2:	2a00      	cmp	r2, #0
 800d0e4:	d1f0      	bne.n	800d0c8 <quorem+0xf0>
 800d0e6:	3c01      	subs	r4, #1
 800d0e8:	e7eb      	b.n	800d0c2 <quorem+0xea>
 800d0ea:	2000      	movs	r0, #0
 800d0ec:	e7ee      	b.n	800d0cc <quorem+0xf4>
	...

0800d0f0 <_dtoa_r>:
 800d0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0f4:	ed2d 8b04 	vpush	{d8-d9}
 800d0f8:	ec57 6b10 	vmov	r6, r7, d0
 800d0fc:	b093      	sub	sp, #76	; 0x4c
 800d0fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d100:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d104:	9106      	str	r1, [sp, #24]
 800d106:	ee10 aa10 	vmov	sl, s0
 800d10a:	4604      	mov	r4, r0
 800d10c:	9209      	str	r2, [sp, #36]	; 0x24
 800d10e:	930c      	str	r3, [sp, #48]	; 0x30
 800d110:	46bb      	mov	fp, r7
 800d112:	b975      	cbnz	r5, 800d132 <_dtoa_r+0x42>
 800d114:	2010      	movs	r0, #16
 800d116:	f7fd ffb7 	bl	800b088 <malloc>
 800d11a:	4602      	mov	r2, r0
 800d11c:	6260      	str	r0, [r4, #36]	; 0x24
 800d11e:	b920      	cbnz	r0, 800d12a <_dtoa_r+0x3a>
 800d120:	4ba7      	ldr	r3, [pc, #668]	; (800d3c0 <_dtoa_r+0x2d0>)
 800d122:	21ea      	movs	r1, #234	; 0xea
 800d124:	48a7      	ldr	r0, [pc, #668]	; (800d3c4 <_dtoa_r+0x2d4>)
 800d126:	f002 fbbd 	bl	800f8a4 <__assert_func>
 800d12a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d12e:	6005      	str	r5, [r0, #0]
 800d130:	60c5      	str	r5, [r0, #12]
 800d132:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d134:	6819      	ldr	r1, [r3, #0]
 800d136:	b151      	cbz	r1, 800d14e <_dtoa_r+0x5e>
 800d138:	685a      	ldr	r2, [r3, #4]
 800d13a:	604a      	str	r2, [r1, #4]
 800d13c:	2301      	movs	r3, #1
 800d13e:	4093      	lsls	r3, r2
 800d140:	608b      	str	r3, [r1, #8]
 800d142:	4620      	mov	r0, r4
 800d144:	f001 fbb2 	bl	800e8ac <_Bfree>
 800d148:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d14a:	2200      	movs	r2, #0
 800d14c:	601a      	str	r2, [r3, #0]
 800d14e:	1e3b      	subs	r3, r7, #0
 800d150:	bfaa      	itet	ge
 800d152:	2300      	movge	r3, #0
 800d154:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d158:	f8c8 3000 	strge.w	r3, [r8]
 800d15c:	4b9a      	ldr	r3, [pc, #616]	; (800d3c8 <_dtoa_r+0x2d8>)
 800d15e:	bfbc      	itt	lt
 800d160:	2201      	movlt	r2, #1
 800d162:	f8c8 2000 	strlt.w	r2, [r8]
 800d166:	ea33 030b 	bics.w	r3, r3, fp
 800d16a:	d11b      	bne.n	800d1a4 <_dtoa_r+0xb4>
 800d16c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d16e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d172:	6013      	str	r3, [r2, #0]
 800d174:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d178:	4333      	orrs	r3, r6
 800d17a:	f000 8592 	beq.w	800dca2 <_dtoa_r+0xbb2>
 800d17e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d180:	b963      	cbnz	r3, 800d19c <_dtoa_r+0xac>
 800d182:	4b92      	ldr	r3, [pc, #584]	; (800d3cc <_dtoa_r+0x2dc>)
 800d184:	e022      	b.n	800d1cc <_dtoa_r+0xdc>
 800d186:	4b92      	ldr	r3, [pc, #584]	; (800d3d0 <_dtoa_r+0x2e0>)
 800d188:	9301      	str	r3, [sp, #4]
 800d18a:	3308      	adds	r3, #8
 800d18c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d18e:	6013      	str	r3, [r2, #0]
 800d190:	9801      	ldr	r0, [sp, #4]
 800d192:	b013      	add	sp, #76	; 0x4c
 800d194:	ecbd 8b04 	vpop	{d8-d9}
 800d198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d19c:	4b8b      	ldr	r3, [pc, #556]	; (800d3cc <_dtoa_r+0x2dc>)
 800d19e:	9301      	str	r3, [sp, #4]
 800d1a0:	3303      	adds	r3, #3
 800d1a2:	e7f3      	b.n	800d18c <_dtoa_r+0x9c>
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	4650      	mov	r0, sl
 800d1aa:	4659      	mov	r1, fp
 800d1ac:	f7f3 fc8c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1b0:	ec4b ab19 	vmov	d9, sl, fp
 800d1b4:	4680      	mov	r8, r0
 800d1b6:	b158      	cbz	r0, 800d1d0 <_dtoa_r+0xe0>
 800d1b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	6013      	str	r3, [r2, #0]
 800d1be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	f000 856b 	beq.w	800dc9c <_dtoa_r+0xbac>
 800d1c6:	4883      	ldr	r0, [pc, #524]	; (800d3d4 <_dtoa_r+0x2e4>)
 800d1c8:	6018      	str	r0, [r3, #0]
 800d1ca:	1e43      	subs	r3, r0, #1
 800d1cc:	9301      	str	r3, [sp, #4]
 800d1ce:	e7df      	b.n	800d190 <_dtoa_r+0xa0>
 800d1d0:	ec4b ab10 	vmov	d0, sl, fp
 800d1d4:	aa10      	add	r2, sp, #64	; 0x40
 800d1d6:	a911      	add	r1, sp, #68	; 0x44
 800d1d8:	4620      	mov	r0, r4
 800d1da:	f001 ff15 	bl	800f008 <__d2b>
 800d1de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d1e2:	ee08 0a10 	vmov	s16, r0
 800d1e6:	2d00      	cmp	r5, #0
 800d1e8:	f000 8084 	beq.w	800d2f4 <_dtoa_r+0x204>
 800d1ec:	ee19 3a90 	vmov	r3, s19
 800d1f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d1f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d1f8:	4656      	mov	r6, sl
 800d1fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d1fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d202:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d206:	4b74      	ldr	r3, [pc, #464]	; (800d3d8 <_dtoa_r+0x2e8>)
 800d208:	2200      	movs	r2, #0
 800d20a:	4630      	mov	r0, r6
 800d20c:	4639      	mov	r1, r7
 800d20e:	f7f3 f83b 	bl	8000288 <__aeabi_dsub>
 800d212:	a365      	add	r3, pc, #404	; (adr r3, 800d3a8 <_dtoa_r+0x2b8>)
 800d214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d218:	f7f3 f9ee 	bl	80005f8 <__aeabi_dmul>
 800d21c:	a364      	add	r3, pc, #400	; (adr r3, 800d3b0 <_dtoa_r+0x2c0>)
 800d21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d222:	f7f3 f833 	bl	800028c <__adddf3>
 800d226:	4606      	mov	r6, r0
 800d228:	4628      	mov	r0, r5
 800d22a:	460f      	mov	r7, r1
 800d22c:	f7f3 f97a 	bl	8000524 <__aeabi_i2d>
 800d230:	a361      	add	r3, pc, #388	; (adr r3, 800d3b8 <_dtoa_r+0x2c8>)
 800d232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d236:	f7f3 f9df 	bl	80005f8 <__aeabi_dmul>
 800d23a:	4602      	mov	r2, r0
 800d23c:	460b      	mov	r3, r1
 800d23e:	4630      	mov	r0, r6
 800d240:	4639      	mov	r1, r7
 800d242:	f7f3 f823 	bl	800028c <__adddf3>
 800d246:	4606      	mov	r6, r0
 800d248:	460f      	mov	r7, r1
 800d24a:	f7f3 fc85 	bl	8000b58 <__aeabi_d2iz>
 800d24e:	2200      	movs	r2, #0
 800d250:	9000      	str	r0, [sp, #0]
 800d252:	2300      	movs	r3, #0
 800d254:	4630      	mov	r0, r6
 800d256:	4639      	mov	r1, r7
 800d258:	f7f3 fc40 	bl	8000adc <__aeabi_dcmplt>
 800d25c:	b150      	cbz	r0, 800d274 <_dtoa_r+0x184>
 800d25e:	9800      	ldr	r0, [sp, #0]
 800d260:	f7f3 f960 	bl	8000524 <__aeabi_i2d>
 800d264:	4632      	mov	r2, r6
 800d266:	463b      	mov	r3, r7
 800d268:	f7f3 fc2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d26c:	b910      	cbnz	r0, 800d274 <_dtoa_r+0x184>
 800d26e:	9b00      	ldr	r3, [sp, #0]
 800d270:	3b01      	subs	r3, #1
 800d272:	9300      	str	r3, [sp, #0]
 800d274:	9b00      	ldr	r3, [sp, #0]
 800d276:	2b16      	cmp	r3, #22
 800d278:	d85a      	bhi.n	800d330 <_dtoa_r+0x240>
 800d27a:	9a00      	ldr	r2, [sp, #0]
 800d27c:	4b57      	ldr	r3, [pc, #348]	; (800d3dc <_dtoa_r+0x2ec>)
 800d27e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d286:	ec51 0b19 	vmov	r0, r1, d9
 800d28a:	f7f3 fc27 	bl	8000adc <__aeabi_dcmplt>
 800d28e:	2800      	cmp	r0, #0
 800d290:	d050      	beq.n	800d334 <_dtoa_r+0x244>
 800d292:	9b00      	ldr	r3, [sp, #0]
 800d294:	3b01      	subs	r3, #1
 800d296:	9300      	str	r3, [sp, #0]
 800d298:	2300      	movs	r3, #0
 800d29a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d29c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d29e:	1b5d      	subs	r5, r3, r5
 800d2a0:	1e6b      	subs	r3, r5, #1
 800d2a2:	9305      	str	r3, [sp, #20]
 800d2a4:	bf45      	ittet	mi
 800d2a6:	f1c5 0301 	rsbmi	r3, r5, #1
 800d2aa:	9304      	strmi	r3, [sp, #16]
 800d2ac:	2300      	movpl	r3, #0
 800d2ae:	2300      	movmi	r3, #0
 800d2b0:	bf4c      	ite	mi
 800d2b2:	9305      	strmi	r3, [sp, #20]
 800d2b4:	9304      	strpl	r3, [sp, #16]
 800d2b6:	9b00      	ldr	r3, [sp, #0]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	db3d      	blt.n	800d338 <_dtoa_r+0x248>
 800d2bc:	9b05      	ldr	r3, [sp, #20]
 800d2be:	9a00      	ldr	r2, [sp, #0]
 800d2c0:	920a      	str	r2, [sp, #40]	; 0x28
 800d2c2:	4413      	add	r3, r2
 800d2c4:	9305      	str	r3, [sp, #20]
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	9307      	str	r3, [sp, #28]
 800d2ca:	9b06      	ldr	r3, [sp, #24]
 800d2cc:	2b09      	cmp	r3, #9
 800d2ce:	f200 8089 	bhi.w	800d3e4 <_dtoa_r+0x2f4>
 800d2d2:	2b05      	cmp	r3, #5
 800d2d4:	bfc4      	itt	gt
 800d2d6:	3b04      	subgt	r3, #4
 800d2d8:	9306      	strgt	r3, [sp, #24]
 800d2da:	9b06      	ldr	r3, [sp, #24]
 800d2dc:	f1a3 0302 	sub.w	r3, r3, #2
 800d2e0:	bfcc      	ite	gt
 800d2e2:	2500      	movgt	r5, #0
 800d2e4:	2501      	movle	r5, #1
 800d2e6:	2b03      	cmp	r3, #3
 800d2e8:	f200 8087 	bhi.w	800d3fa <_dtoa_r+0x30a>
 800d2ec:	e8df f003 	tbb	[pc, r3]
 800d2f0:	59383a2d 	.word	0x59383a2d
 800d2f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d2f8:	441d      	add	r5, r3
 800d2fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d2fe:	2b20      	cmp	r3, #32
 800d300:	bfc1      	itttt	gt
 800d302:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d306:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d30a:	fa0b f303 	lslgt.w	r3, fp, r3
 800d30e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d312:	bfda      	itte	le
 800d314:	f1c3 0320 	rsble	r3, r3, #32
 800d318:	fa06 f003 	lslle.w	r0, r6, r3
 800d31c:	4318      	orrgt	r0, r3
 800d31e:	f7f3 f8f1 	bl	8000504 <__aeabi_ui2d>
 800d322:	2301      	movs	r3, #1
 800d324:	4606      	mov	r6, r0
 800d326:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d32a:	3d01      	subs	r5, #1
 800d32c:	930e      	str	r3, [sp, #56]	; 0x38
 800d32e:	e76a      	b.n	800d206 <_dtoa_r+0x116>
 800d330:	2301      	movs	r3, #1
 800d332:	e7b2      	b.n	800d29a <_dtoa_r+0x1aa>
 800d334:	900b      	str	r0, [sp, #44]	; 0x2c
 800d336:	e7b1      	b.n	800d29c <_dtoa_r+0x1ac>
 800d338:	9b04      	ldr	r3, [sp, #16]
 800d33a:	9a00      	ldr	r2, [sp, #0]
 800d33c:	1a9b      	subs	r3, r3, r2
 800d33e:	9304      	str	r3, [sp, #16]
 800d340:	4253      	negs	r3, r2
 800d342:	9307      	str	r3, [sp, #28]
 800d344:	2300      	movs	r3, #0
 800d346:	930a      	str	r3, [sp, #40]	; 0x28
 800d348:	e7bf      	b.n	800d2ca <_dtoa_r+0x1da>
 800d34a:	2300      	movs	r3, #0
 800d34c:	9308      	str	r3, [sp, #32]
 800d34e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d350:	2b00      	cmp	r3, #0
 800d352:	dc55      	bgt.n	800d400 <_dtoa_r+0x310>
 800d354:	2301      	movs	r3, #1
 800d356:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d35a:	461a      	mov	r2, r3
 800d35c:	9209      	str	r2, [sp, #36]	; 0x24
 800d35e:	e00c      	b.n	800d37a <_dtoa_r+0x28a>
 800d360:	2301      	movs	r3, #1
 800d362:	e7f3      	b.n	800d34c <_dtoa_r+0x25c>
 800d364:	2300      	movs	r3, #0
 800d366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d368:	9308      	str	r3, [sp, #32]
 800d36a:	9b00      	ldr	r3, [sp, #0]
 800d36c:	4413      	add	r3, r2
 800d36e:	9302      	str	r3, [sp, #8]
 800d370:	3301      	adds	r3, #1
 800d372:	2b01      	cmp	r3, #1
 800d374:	9303      	str	r3, [sp, #12]
 800d376:	bfb8      	it	lt
 800d378:	2301      	movlt	r3, #1
 800d37a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d37c:	2200      	movs	r2, #0
 800d37e:	6042      	str	r2, [r0, #4]
 800d380:	2204      	movs	r2, #4
 800d382:	f102 0614 	add.w	r6, r2, #20
 800d386:	429e      	cmp	r6, r3
 800d388:	6841      	ldr	r1, [r0, #4]
 800d38a:	d93d      	bls.n	800d408 <_dtoa_r+0x318>
 800d38c:	4620      	mov	r0, r4
 800d38e:	f001 fa4d 	bl	800e82c <_Balloc>
 800d392:	9001      	str	r0, [sp, #4]
 800d394:	2800      	cmp	r0, #0
 800d396:	d13b      	bne.n	800d410 <_dtoa_r+0x320>
 800d398:	4b11      	ldr	r3, [pc, #68]	; (800d3e0 <_dtoa_r+0x2f0>)
 800d39a:	4602      	mov	r2, r0
 800d39c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d3a0:	e6c0      	b.n	800d124 <_dtoa_r+0x34>
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	e7df      	b.n	800d366 <_dtoa_r+0x276>
 800d3a6:	bf00      	nop
 800d3a8:	636f4361 	.word	0x636f4361
 800d3ac:	3fd287a7 	.word	0x3fd287a7
 800d3b0:	8b60c8b3 	.word	0x8b60c8b3
 800d3b4:	3fc68a28 	.word	0x3fc68a28
 800d3b8:	509f79fb 	.word	0x509f79fb
 800d3bc:	3fd34413 	.word	0x3fd34413
 800d3c0:	080af03e 	.word	0x080af03e
 800d3c4:	080af055 	.word	0x080af055
 800d3c8:	7ff00000 	.word	0x7ff00000
 800d3cc:	080af03a 	.word	0x080af03a
 800d3d0:	080af031 	.word	0x080af031
 800d3d4:	080aeeb5 	.word	0x080aeeb5
 800d3d8:	3ff80000 	.word	0x3ff80000
 800d3dc:	080af228 	.word	0x080af228
 800d3e0:	080af0b0 	.word	0x080af0b0
 800d3e4:	2501      	movs	r5, #1
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	9306      	str	r3, [sp, #24]
 800d3ea:	9508      	str	r5, [sp, #32]
 800d3ec:	f04f 33ff 	mov.w	r3, #4294967295
 800d3f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	2312      	movs	r3, #18
 800d3f8:	e7b0      	b.n	800d35c <_dtoa_r+0x26c>
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	9308      	str	r3, [sp, #32]
 800d3fe:	e7f5      	b.n	800d3ec <_dtoa_r+0x2fc>
 800d400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d402:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d406:	e7b8      	b.n	800d37a <_dtoa_r+0x28a>
 800d408:	3101      	adds	r1, #1
 800d40a:	6041      	str	r1, [r0, #4]
 800d40c:	0052      	lsls	r2, r2, #1
 800d40e:	e7b8      	b.n	800d382 <_dtoa_r+0x292>
 800d410:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d412:	9a01      	ldr	r2, [sp, #4]
 800d414:	601a      	str	r2, [r3, #0]
 800d416:	9b03      	ldr	r3, [sp, #12]
 800d418:	2b0e      	cmp	r3, #14
 800d41a:	f200 809d 	bhi.w	800d558 <_dtoa_r+0x468>
 800d41e:	2d00      	cmp	r5, #0
 800d420:	f000 809a 	beq.w	800d558 <_dtoa_r+0x468>
 800d424:	9b00      	ldr	r3, [sp, #0]
 800d426:	2b00      	cmp	r3, #0
 800d428:	dd32      	ble.n	800d490 <_dtoa_r+0x3a0>
 800d42a:	4ab7      	ldr	r2, [pc, #732]	; (800d708 <_dtoa_r+0x618>)
 800d42c:	f003 030f 	and.w	r3, r3, #15
 800d430:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d434:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d438:	9b00      	ldr	r3, [sp, #0]
 800d43a:	05d8      	lsls	r0, r3, #23
 800d43c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d440:	d516      	bpl.n	800d470 <_dtoa_r+0x380>
 800d442:	4bb2      	ldr	r3, [pc, #712]	; (800d70c <_dtoa_r+0x61c>)
 800d444:	ec51 0b19 	vmov	r0, r1, d9
 800d448:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d44c:	f7f3 f9fe 	bl	800084c <__aeabi_ddiv>
 800d450:	f007 070f 	and.w	r7, r7, #15
 800d454:	4682      	mov	sl, r0
 800d456:	468b      	mov	fp, r1
 800d458:	2503      	movs	r5, #3
 800d45a:	4eac      	ldr	r6, [pc, #688]	; (800d70c <_dtoa_r+0x61c>)
 800d45c:	b957      	cbnz	r7, 800d474 <_dtoa_r+0x384>
 800d45e:	4642      	mov	r2, r8
 800d460:	464b      	mov	r3, r9
 800d462:	4650      	mov	r0, sl
 800d464:	4659      	mov	r1, fp
 800d466:	f7f3 f9f1 	bl	800084c <__aeabi_ddiv>
 800d46a:	4682      	mov	sl, r0
 800d46c:	468b      	mov	fp, r1
 800d46e:	e028      	b.n	800d4c2 <_dtoa_r+0x3d2>
 800d470:	2502      	movs	r5, #2
 800d472:	e7f2      	b.n	800d45a <_dtoa_r+0x36a>
 800d474:	07f9      	lsls	r1, r7, #31
 800d476:	d508      	bpl.n	800d48a <_dtoa_r+0x39a>
 800d478:	4640      	mov	r0, r8
 800d47a:	4649      	mov	r1, r9
 800d47c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d480:	f7f3 f8ba 	bl	80005f8 <__aeabi_dmul>
 800d484:	3501      	adds	r5, #1
 800d486:	4680      	mov	r8, r0
 800d488:	4689      	mov	r9, r1
 800d48a:	107f      	asrs	r7, r7, #1
 800d48c:	3608      	adds	r6, #8
 800d48e:	e7e5      	b.n	800d45c <_dtoa_r+0x36c>
 800d490:	f000 809b 	beq.w	800d5ca <_dtoa_r+0x4da>
 800d494:	9b00      	ldr	r3, [sp, #0]
 800d496:	4f9d      	ldr	r7, [pc, #628]	; (800d70c <_dtoa_r+0x61c>)
 800d498:	425e      	negs	r6, r3
 800d49a:	4b9b      	ldr	r3, [pc, #620]	; (800d708 <_dtoa_r+0x618>)
 800d49c:	f006 020f 	and.w	r2, r6, #15
 800d4a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a8:	ec51 0b19 	vmov	r0, r1, d9
 800d4ac:	f7f3 f8a4 	bl	80005f8 <__aeabi_dmul>
 800d4b0:	1136      	asrs	r6, r6, #4
 800d4b2:	4682      	mov	sl, r0
 800d4b4:	468b      	mov	fp, r1
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	2502      	movs	r5, #2
 800d4ba:	2e00      	cmp	r6, #0
 800d4bc:	d17a      	bne.n	800d5b4 <_dtoa_r+0x4c4>
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d1d3      	bne.n	800d46a <_dtoa_r+0x37a>
 800d4c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	f000 8082 	beq.w	800d5ce <_dtoa_r+0x4de>
 800d4ca:	4b91      	ldr	r3, [pc, #580]	; (800d710 <_dtoa_r+0x620>)
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	4650      	mov	r0, sl
 800d4d0:	4659      	mov	r1, fp
 800d4d2:	f7f3 fb03 	bl	8000adc <__aeabi_dcmplt>
 800d4d6:	2800      	cmp	r0, #0
 800d4d8:	d079      	beq.n	800d5ce <_dtoa_r+0x4de>
 800d4da:	9b03      	ldr	r3, [sp, #12]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d076      	beq.n	800d5ce <_dtoa_r+0x4de>
 800d4e0:	9b02      	ldr	r3, [sp, #8]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	dd36      	ble.n	800d554 <_dtoa_r+0x464>
 800d4e6:	9b00      	ldr	r3, [sp, #0]
 800d4e8:	4650      	mov	r0, sl
 800d4ea:	4659      	mov	r1, fp
 800d4ec:	1e5f      	subs	r7, r3, #1
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	4b88      	ldr	r3, [pc, #544]	; (800d714 <_dtoa_r+0x624>)
 800d4f2:	f7f3 f881 	bl	80005f8 <__aeabi_dmul>
 800d4f6:	9e02      	ldr	r6, [sp, #8]
 800d4f8:	4682      	mov	sl, r0
 800d4fa:	468b      	mov	fp, r1
 800d4fc:	3501      	adds	r5, #1
 800d4fe:	4628      	mov	r0, r5
 800d500:	f7f3 f810 	bl	8000524 <__aeabi_i2d>
 800d504:	4652      	mov	r2, sl
 800d506:	465b      	mov	r3, fp
 800d508:	f7f3 f876 	bl	80005f8 <__aeabi_dmul>
 800d50c:	4b82      	ldr	r3, [pc, #520]	; (800d718 <_dtoa_r+0x628>)
 800d50e:	2200      	movs	r2, #0
 800d510:	f7f2 febc 	bl	800028c <__adddf3>
 800d514:	46d0      	mov	r8, sl
 800d516:	46d9      	mov	r9, fp
 800d518:	4682      	mov	sl, r0
 800d51a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d51e:	2e00      	cmp	r6, #0
 800d520:	d158      	bne.n	800d5d4 <_dtoa_r+0x4e4>
 800d522:	4b7e      	ldr	r3, [pc, #504]	; (800d71c <_dtoa_r+0x62c>)
 800d524:	2200      	movs	r2, #0
 800d526:	4640      	mov	r0, r8
 800d528:	4649      	mov	r1, r9
 800d52a:	f7f2 fead 	bl	8000288 <__aeabi_dsub>
 800d52e:	4652      	mov	r2, sl
 800d530:	465b      	mov	r3, fp
 800d532:	4680      	mov	r8, r0
 800d534:	4689      	mov	r9, r1
 800d536:	f7f3 faef 	bl	8000b18 <__aeabi_dcmpgt>
 800d53a:	2800      	cmp	r0, #0
 800d53c:	f040 8295 	bne.w	800da6a <_dtoa_r+0x97a>
 800d540:	4652      	mov	r2, sl
 800d542:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d546:	4640      	mov	r0, r8
 800d548:	4649      	mov	r1, r9
 800d54a:	f7f3 fac7 	bl	8000adc <__aeabi_dcmplt>
 800d54e:	2800      	cmp	r0, #0
 800d550:	f040 8289 	bne.w	800da66 <_dtoa_r+0x976>
 800d554:	ec5b ab19 	vmov	sl, fp, d9
 800d558:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	f2c0 8148 	blt.w	800d7f0 <_dtoa_r+0x700>
 800d560:	9a00      	ldr	r2, [sp, #0]
 800d562:	2a0e      	cmp	r2, #14
 800d564:	f300 8144 	bgt.w	800d7f0 <_dtoa_r+0x700>
 800d568:	4b67      	ldr	r3, [pc, #412]	; (800d708 <_dtoa_r+0x618>)
 800d56a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d56e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d574:	2b00      	cmp	r3, #0
 800d576:	f280 80d5 	bge.w	800d724 <_dtoa_r+0x634>
 800d57a:	9b03      	ldr	r3, [sp, #12]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	f300 80d1 	bgt.w	800d724 <_dtoa_r+0x634>
 800d582:	f040 826f 	bne.w	800da64 <_dtoa_r+0x974>
 800d586:	4b65      	ldr	r3, [pc, #404]	; (800d71c <_dtoa_r+0x62c>)
 800d588:	2200      	movs	r2, #0
 800d58a:	4640      	mov	r0, r8
 800d58c:	4649      	mov	r1, r9
 800d58e:	f7f3 f833 	bl	80005f8 <__aeabi_dmul>
 800d592:	4652      	mov	r2, sl
 800d594:	465b      	mov	r3, fp
 800d596:	f7f3 fab5 	bl	8000b04 <__aeabi_dcmpge>
 800d59a:	9e03      	ldr	r6, [sp, #12]
 800d59c:	4637      	mov	r7, r6
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	f040 8245 	bne.w	800da2e <_dtoa_r+0x93e>
 800d5a4:	9d01      	ldr	r5, [sp, #4]
 800d5a6:	2331      	movs	r3, #49	; 0x31
 800d5a8:	f805 3b01 	strb.w	r3, [r5], #1
 800d5ac:	9b00      	ldr	r3, [sp, #0]
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	9300      	str	r3, [sp, #0]
 800d5b2:	e240      	b.n	800da36 <_dtoa_r+0x946>
 800d5b4:	07f2      	lsls	r2, r6, #31
 800d5b6:	d505      	bpl.n	800d5c4 <_dtoa_r+0x4d4>
 800d5b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5bc:	f7f3 f81c 	bl	80005f8 <__aeabi_dmul>
 800d5c0:	3501      	adds	r5, #1
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	1076      	asrs	r6, r6, #1
 800d5c6:	3708      	adds	r7, #8
 800d5c8:	e777      	b.n	800d4ba <_dtoa_r+0x3ca>
 800d5ca:	2502      	movs	r5, #2
 800d5cc:	e779      	b.n	800d4c2 <_dtoa_r+0x3d2>
 800d5ce:	9f00      	ldr	r7, [sp, #0]
 800d5d0:	9e03      	ldr	r6, [sp, #12]
 800d5d2:	e794      	b.n	800d4fe <_dtoa_r+0x40e>
 800d5d4:	9901      	ldr	r1, [sp, #4]
 800d5d6:	4b4c      	ldr	r3, [pc, #304]	; (800d708 <_dtoa_r+0x618>)
 800d5d8:	4431      	add	r1, r6
 800d5da:	910d      	str	r1, [sp, #52]	; 0x34
 800d5dc:	9908      	ldr	r1, [sp, #32]
 800d5de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d5e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d5e6:	2900      	cmp	r1, #0
 800d5e8:	d043      	beq.n	800d672 <_dtoa_r+0x582>
 800d5ea:	494d      	ldr	r1, [pc, #308]	; (800d720 <_dtoa_r+0x630>)
 800d5ec:	2000      	movs	r0, #0
 800d5ee:	f7f3 f92d 	bl	800084c <__aeabi_ddiv>
 800d5f2:	4652      	mov	r2, sl
 800d5f4:	465b      	mov	r3, fp
 800d5f6:	f7f2 fe47 	bl	8000288 <__aeabi_dsub>
 800d5fa:	9d01      	ldr	r5, [sp, #4]
 800d5fc:	4682      	mov	sl, r0
 800d5fe:	468b      	mov	fp, r1
 800d600:	4649      	mov	r1, r9
 800d602:	4640      	mov	r0, r8
 800d604:	f7f3 faa8 	bl	8000b58 <__aeabi_d2iz>
 800d608:	4606      	mov	r6, r0
 800d60a:	f7f2 ff8b 	bl	8000524 <__aeabi_i2d>
 800d60e:	4602      	mov	r2, r0
 800d610:	460b      	mov	r3, r1
 800d612:	4640      	mov	r0, r8
 800d614:	4649      	mov	r1, r9
 800d616:	f7f2 fe37 	bl	8000288 <__aeabi_dsub>
 800d61a:	3630      	adds	r6, #48	; 0x30
 800d61c:	f805 6b01 	strb.w	r6, [r5], #1
 800d620:	4652      	mov	r2, sl
 800d622:	465b      	mov	r3, fp
 800d624:	4680      	mov	r8, r0
 800d626:	4689      	mov	r9, r1
 800d628:	f7f3 fa58 	bl	8000adc <__aeabi_dcmplt>
 800d62c:	2800      	cmp	r0, #0
 800d62e:	d163      	bne.n	800d6f8 <_dtoa_r+0x608>
 800d630:	4642      	mov	r2, r8
 800d632:	464b      	mov	r3, r9
 800d634:	4936      	ldr	r1, [pc, #216]	; (800d710 <_dtoa_r+0x620>)
 800d636:	2000      	movs	r0, #0
 800d638:	f7f2 fe26 	bl	8000288 <__aeabi_dsub>
 800d63c:	4652      	mov	r2, sl
 800d63e:	465b      	mov	r3, fp
 800d640:	f7f3 fa4c 	bl	8000adc <__aeabi_dcmplt>
 800d644:	2800      	cmp	r0, #0
 800d646:	f040 80b5 	bne.w	800d7b4 <_dtoa_r+0x6c4>
 800d64a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d64c:	429d      	cmp	r5, r3
 800d64e:	d081      	beq.n	800d554 <_dtoa_r+0x464>
 800d650:	4b30      	ldr	r3, [pc, #192]	; (800d714 <_dtoa_r+0x624>)
 800d652:	2200      	movs	r2, #0
 800d654:	4650      	mov	r0, sl
 800d656:	4659      	mov	r1, fp
 800d658:	f7f2 ffce 	bl	80005f8 <__aeabi_dmul>
 800d65c:	4b2d      	ldr	r3, [pc, #180]	; (800d714 <_dtoa_r+0x624>)
 800d65e:	4682      	mov	sl, r0
 800d660:	468b      	mov	fp, r1
 800d662:	4640      	mov	r0, r8
 800d664:	4649      	mov	r1, r9
 800d666:	2200      	movs	r2, #0
 800d668:	f7f2 ffc6 	bl	80005f8 <__aeabi_dmul>
 800d66c:	4680      	mov	r8, r0
 800d66e:	4689      	mov	r9, r1
 800d670:	e7c6      	b.n	800d600 <_dtoa_r+0x510>
 800d672:	4650      	mov	r0, sl
 800d674:	4659      	mov	r1, fp
 800d676:	f7f2 ffbf 	bl	80005f8 <__aeabi_dmul>
 800d67a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d67c:	9d01      	ldr	r5, [sp, #4]
 800d67e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d680:	4682      	mov	sl, r0
 800d682:	468b      	mov	fp, r1
 800d684:	4649      	mov	r1, r9
 800d686:	4640      	mov	r0, r8
 800d688:	f7f3 fa66 	bl	8000b58 <__aeabi_d2iz>
 800d68c:	4606      	mov	r6, r0
 800d68e:	f7f2 ff49 	bl	8000524 <__aeabi_i2d>
 800d692:	3630      	adds	r6, #48	; 0x30
 800d694:	4602      	mov	r2, r0
 800d696:	460b      	mov	r3, r1
 800d698:	4640      	mov	r0, r8
 800d69a:	4649      	mov	r1, r9
 800d69c:	f7f2 fdf4 	bl	8000288 <__aeabi_dsub>
 800d6a0:	f805 6b01 	strb.w	r6, [r5], #1
 800d6a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6a6:	429d      	cmp	r5, r3
 800d6a8:	4680      	mov	r8, r0
 800d6aa:	4689      	mov	r9, r1
 800d6ac:	f04f 0200 	mov.w	r2, #0
 800d6b0:	d124      	bne.n	800d6fc <_dtoa_r+0x60c>
 800d6b2:	4b1b      	ldr	r3, [pc, #108]	; (800d720 <_dtoa_r+0x630>)
 800d6b4:	4650      	mov	r0, sl
 800d6b6:	4659      	mov	r1, fp
 800d6b8:	f7f2 fde8 	bl	800028c <__adddf3>
 800d6bc:	4602      	mov	r2, r0
 800d6be:	460b      	mov	r3, r1
 800d6c0:	4640      	mov	r0, r8
 800d6c2:	4649      	mov	r1, r9
 800d6c4:	f7f3 fa28 	bl	8000b18 <__aeabi_dcmpgt>
 800d6c8:	2800      	cmp	r0, #0
 800d6ca:	d173      	bne.n	800d7b4 <_dtoa_r+0x6c4>
 800d6cc:	4652      	mov	r2, sl
 800d6ce:	465b      	mov	r3, fp
 800d6d0:	4913      	ldr	r1, [pc, #76]	; (800d720 <_dtoa_r+0x630>)
 800d6d2:	2000      	movs	r0, #0
 800d6d4:	f7f2 fdd8 	bl	8000288 <__aeabi_dsub>
 800d6d8:	4602      	mov	r2, r0
 800d6da:	460b      	mov	r3, r1
 800d6dc:	4640      	mov	r0, r8
 800d6de:	4649      	mov	r1, r9
 800d6e0:	f7f3 f9fc 	bl	8000adc <__aeabi_dcmplt>
 800d6e4:	2800      	cmp	r0, #0
 800d6e6:	f43f af35 	beq.w	800d554 <_dtoa_r+0x464>
 800d6ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d6ec:	1e6b      	subs	r3, r5, #1
 800d6ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800d6f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d6f4:	2b30      	cmp	r3, #48	; 0x30
 800d6f6:	d0f8      	beq.n	800d6ea <_dtoa_r+0x5fa>
 800d6f8:	9700      	str	r7, [sp, #0]
 800d6fa:	e049      	b.n	800d790 <_dtoa_r+0x6a0>
 800d6fc:	4b05      	ldr	r3, [pc, #20]	; (800d714 <_dtoa_r+0x624>)
 800d6fe:	f7f2 ff7b 	bl	80005f8 <__aeabi_dmul>
 800d702:	4680      	mov	r8, r0
 800d704:	4689      	mov	r9, r1
 800d706:	e7bd      	b.n	800d684 <_dtoa_r+0x594>
 800d708:	080af228 	.word	0x080af228
 800d70c:	080af200 	.word	0x080af200
 800d710:	3ff00000 	.word	0x3ff00000
 800d714:	40240000 	.word	0x40240000
 800d718:	401c0000 	.word	0x401c0000
 800d71c:	40140000 	.word	0x40140000
 800d720:	3fe00000 	.word	0x3fe00000
 800d724:	9d01      	ldr	r5, [sp, #4]
 800d726:	4656      	mov	r6, sl
 800d728:	465f      	mov	r7, fp
 800d72a:	4642      	mov	r2, r8
 800d72c:	464b      	mov	r3, r9
 800d72e:	4630      	mov	r0, r6
 800d730:	4639      	mov	r1, r7
 800d732:	f7f3 f88b 	bl	800084c <__aeabi_ddiv>
 800d736:	f7f3 fa0f 	bl	8000b58 <__aeabi_d2iz>
 800d73a:	4682      	mov	sl, r0
 800d73c:	f7f2 fef2 	bl	8000524 <__aeabi_i2d>
 800d740:	4642      	mov	r2, r8
 800d742:	464b      	mov	r3, r9
 800d744:	f7f2 ff58 	bl	80005f8 <__aeabi_dmul>
 800d748:	4602      	mov	r2, r0
 800d74a:	460b      	mov	r3, r1
 800d74c:	4630      	mov	r0, r6
 800d74e:	4639      	mov	r1, r7
 800d750:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d754:	f7f2 fd98 	bl	8000288 <__aeabi_dsub>
 800d758:	f805 6b01 	strb.w	r6, [r5], #1
 800d75c:	9e01      	ldr	r6, [sp, #4]
 800d75e:	9f03      	ldr	r7, [sp, #12]
 800d760:	1bae      	subs	r6, r5, r6
 800d762:	42b7      	cmp	r7, r6
 800d764:	4602      	mov	r2, r0
 800d766:	460b      	mov	r3, r1
 800d768:	d135      	bne.n	800d7d6 <_dtoa_r+0x6e6>
 800d76a:	f7f2 fd8f 	bl	800028c <__adddf3>
 800d76e:	4642      	mov	r2, r8
 800d770:	464b      	mov	r3, r9
 800d772:	4606      	mov	r6, r0
 800d774:	460f      	mov	r7, r1
 800d776:	f7f3 f9cf 	bl	8000b18 <__aeabi_dcmpgt>
 800d77a:	b9d0      	cbnz	r0, 800d7b2 <_dtoa_r+0x6c2>
 800d77c:	4642      	mov	r2, r8
 800d77e:	464b      	mov	r3, r9
 800d780:	4630      	mov	r0, r6
 800d782:	4639      	mov	r1, r7
 800d784:	f7f3 f9a0 	bl	8000ac8 <__aeabi_dcmpeq>
 800d788:	b110      	cbz	r0, 800d790 <_dtoa_r+0x6a0>
 800d78a:	f01a 0f01 	tst.w	sl, #1
 800d78e:	d110      	bne.n	800d7b2 <_dtoa_r+0x6c2>
 800d790:	4620      	mov	r0, r4
 800d792:	ee18 1a10 	vmov	r1, s16
 800d796:	f001 f889 	bl	800e8ac <_Bfree>
 800d79a:	2300      	movs	r3, #0
 800d79c:	9800      	ldr	r0, [sp, #0]
 800d79e:	702b      	strb	r3, [r5, #0]
 800d7a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d7a2:	3001      	adds	r0, #1
 800d7a4:	6018      	str	r0, [r3, #0]
 800d7a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	f43f acf1 	beq.w	800d190 <_dtoa_r+0xa0>
 800d7ae:	601d      	str	r5, [r3, #0]
 800d7b0:	e4ee      	b.n	800d190 <_dtoa_r+0xa0>
 800d7b2:	9f00      	ldr	r7, [sp, #0]
 800d7b4:	462b      	mov	r3, r5
 800d7b6:	461d      	mov	r5, r3
 800d7b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d7bc:	2a39      	cmp	r2, #57	; 0x39
 800d7be:	d106      	bne.n	800d7ce <_dtoa_r+0x6de>
 800d7c0:	9a01      	ldr	r2, [sp, #4]
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d1f7      	bne.n	800d7b6 <_dtoa_r+0x6c6>
 800d7c6:	9901      	ldr	r1, [sp, #4]
 800d7c8:	2230      	movs	r2, #48	; 0x30
 800d7ca:	3701      	adds	r7, #1
 800d7cc:	700a      	strb	r2, [r1, #0]
 800d7ce:	781a      	ldrb	r2, [r3, #0]
 800d7d0:	3201      	adds	r2, #1
 800d7d2:	701a      	strb	r2, [r3, #0]
 800d7d4:	e790      	b.n	800d6f8 <_dtoa_r+0x608>
 800d7d6:	4ba6      	ldr	r3, [pc, #664]	; (800da70 <_dtoa_r+0x980>)
 800d7d8:	2200      	movs	r2, #0
 800d7da:	f7f2 ff0d 	bl	80005f8 <__aeabi_dmul>
 800d7de:	2200      	movs	r2, #0
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	4606      	mov	r6, r0
 800d7e4:	460f      	mov	r7, r1
 800d7e6:	f7f3 f96f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7ea:	2800      	cmp	r0, #0
 800d7ec:	d09d      	beq.n	800d72a <_dtoa_r+0x63a>
 800d7ee:	e7cf      	b.n	800d790 <_dtoa_r+0x6a0>
 800d7f0:	9a08      	ldr	r2, [sp, #32]
 800d7f2:	2a00      	cmp	r2, #0
 800d7f4:	f000 80d7 	beq.w	800d9a6 <_dtoa_r+0x8b6>
 800d7f8:	9a06      	ldr	r2, [sp, #24]
 800d7fa:	2a01      	cmp	r2, #1
 800d7fc:	f300 80ba 	bgt.w	800d974 <_dtoa_r+0x884>
 800d800:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d802:	2a00      	cmp	r2, #0
 800d804:	f000 80b2 	beq.w	800d96c <_dtoa_r+0x87c>
 800d808:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d80c:	9e07      	ldr	r6, [sp, #28]
 800d80e:	9d04      	ldr	r5, [sp, #16]
 800d810:	9a04      	ldr	r2, [sp, #16]
 800d812:	441a      	add	r2, r3
 800d814:	9204      	str	r2, [sp, #16]
 800d816:	9a05      	ldr	r2, [sp, #20]
 800d818:	2101      	movs	r1, #1
 800d81a:	441a      	add	r2, r3
 800d81c:	4620      	mov	r0, r4
 800d81e:	9205      	str	r2, [sp, #20]
 800d820:	f001 f946 	bl	800eab0 <__i2b>
 800d824:	4607      	mov	r7, r0
 800d826:	2d00      	cmp	r5, #0
 800d828:	dd0c      	ble.n	800d844 <_dtoa_r+0x754>
 800d82a:	9b05      	ldr	r3, [sp, #20]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	dd09      	ble.n	800d844 <_dtoa_r+0x754>
 800d830:	42ab      	cmp	r3, r5
 800d832:	9a04      	ldr	r2, [sp, #16]
 800d834:	bfa8      	it	ge
 800d836:	462b      	movge	r3, r5
 800d838:	1ad2      	subs	r2, r2, r3
 800d83a:	9204      	str	r2, [sp, #16]
 800d83c:	9a05      	ldr	r2, [sp, #20]
 800d83e:	1aed      	subs	r5, r5, r3
 800d840:	1ad3      	subs	r3, r2, r3
 800d842:	9305      	str	r3, [sp, #20]
 800d844:	9b07      	ldr	r3, [sp, #28]
 800d846:	b31b      	cbz	r3, 800d890 <_dtoa_r+0x7a0>
 800d848:	9b08      	ldr	r3, [sp, #32]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	f000 80af 	beq.w	800d9ae <_dtoa_r+0x8be>
 800d850:	2e00      	cmp	r6, #0
 800d852:	dd13      	ble.n	800d87c <_dtoa_r+0x78c>
 800d854:	4639      	mov	r1, r7
 800d856:	4632      	mov	r2, r6
 800d858:	4620      	mov	r0, r4
 800d85a:	f001 f9e9 	bl	800ec30 <__pow5mult>
 800d85e:	ee18 2a10 	vmov	r2, s16
 800d862:	4601      	mov	r1, r0
 800d864:	4607      	mov	r7, r0
 800d866:	4620      	mov	r0, r4
 800d868:	f001 f938 	bl	800eadc <__multiply>
 800d86c:	ee18 1a10 	vmov	r1, s16
 800d870:	4680      	mov	r8, r0
 800d872:	4620      	mov	r0, r4
 800d874:	f001 f81a 	bl	800e8ac <_Bfree>
 800d878:	ee08 8a10 	vmov	s16, r8
 800d87c:	9b07      	ldr	r3, [sp, #28]
 800d87e:	1b9a      	subs	r2, r3, r6
 800d880:	d006      	beq.n	800d890 <_dtoa_r+0x7a0>
 800d882:	ee18 1a10 	vmov	r1, s16
 800d886:	4620      	mov	r0, r4
 800d888:	f001 f9d2 	bl	800ec30 <__pow5mult>
 800d88c:	ee08 0a10 	vmov	s16, r0
 800d890:	2101      	movs	r1, #1
 800d892:	4620      	mov	r0, r4
 800d894:	f001 f90c 	bl	800eab0 <__i2b>
 800d898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	4606      	mov	r6, r0
 800d89e:	f340 8088 	ble.w	800d9b2 <_dtoa_r+0x8c2>
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	4601      	mov	r1, r0
 800d8a6:	4620      	mov	r0, r4
 800d8a8:	f001 f9c2 	bl	800ec30 <__pow5mult>
 800d8ac:	9b06      	ldr	r3, [sp, #24]
 800d8ae:	2b01      	cmp	r3, #1
 800d8b0:	4606      	mov	r6, r0
 800d8b2:	f340 8081 	ble.w	800d9b8 <_dtoa_r+0x8c8>
 800d8b6:	f04f 0800 	mov.w	r8, #0
 800d8ba:	6933      	ldr	r3, [r6, #16]
 800d8bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d8c0:	6918      	ldr	r0, [r3, #16]
 800d8c2:	f001 f8a5 	bl	800ea10 <__hi0bits>
 800d8c6:	f1c0 0020 	rsb	r0, r0, #32
 800d8ca:	9b05      	ldr	r3, [sp, #20]
 800d8cc:	4418      	add	r0, r3
 800d8ce:	f010 001f 	ands.w	r0, r0, #31
 800d8d2:	f000 8092 	beq.w	800d9fa <_dtoa_r+0x90a>
 800d8d6:	f1c0 0320 	rsb	r3, r0, #32
 800d8da:	2b04      	cmp	r3, #4
 800d8dc:	f340 808a 	ble.w	800d9f4 <_dtoa_r+0x904>
 800d8e0:	f1c0 001c 	rsb	r0, r0, #28
 800d8e4:	9b04      	ldr	r3, [sp, #16]
 800d8e6:	4403      	add	r3, r0
 800d8e8:	9304      	str	r3, [sp, #16]
 800d8ea:	9b05      	ldr	r3, [sp, #20]
 800d8ec:	4403      	add	r3, r0
 800d8ee:	4405      	add	r5, r0
 800d8f0:	9305      	str	r3, [sp, #20]
 800d8f2:	9b04      	ldr	r3, [sp, #16]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	dd07      	ble.n	800d908 <_dtoa_r+0x818>
 800d8f8:	ee18 1a10 	vmov	r1, s16
 800d8fc:	461a      	mov	r2, r3
 800d8fe:	4620      	mov	r0, r4
 800d900:	f001 f9f0 	bl	800ece4 <__lshift>
 800d904:	ee08 0a10 	vmov	s16, r0
 800d908:	9b05      	ldr	r3, [sp, #20]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	dd05      	ble.n	800d91a <_dtoa_r+0x82a>
 800d90e:	4631      	mov	r1, r6
 800d910:	461a      	mov	r2, r3
 800d912:	4620      	mov	r0, r4
 800d914:	f001 f9e6 	bl	800ece4 <__lshift>
 800d918:	4606      	mov	r6, r0
 800d91a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d06e      	beq.n	800d9fe <_dtoa_r+0x90e>
 800d920:	ee18 0a10 	vmov	r0, s16
 800d924:	4631      	mov	r1, r6
 800d926:	f001 fa4d 	bl	800edc4 <__mcmp>
 800d92a:	2800      	cmp	r0, #0
 800d92c:	da67      	bge.n	800d9fe <_dtoa_r+0x90e>
 800d92e:	9b00      	ldr	r3, [sp, #0]
 800d930:	3b01      	subs	r3, #1
 800d932:	ee18 1a10 	vmov	r1, s16
 800d936:	9300      	str	r3, [sp, #0]
 800d938:	220a      	movs	r2, #10
 800d93a:	2300      	movs	r3, #0
 800d93c:	4620      	mov	r0, r4
 800d93e:	f000 ffd7 	bl	800e8f0 <__multadd>
 800d942:	9b08      	ldr	r3, [sp, #32]
 800d944:	ee08 0a10 	vmov	s16, r0
 800d948:	2b00      	cmp	r3, #0
 800d94a:	f000 81b1 	beq.w	800dcb0 <_dtoa_r+0xbc0>
 800d94e:	2300      	movs	r3, #0
 800d950:	4639      	mov	r1, r7
 800d952:	220a      	movs	r2, #10
 800d954:	4620      	mov	r0, r4
 800d956:	f000 ffcb 	bl	800e8f0 <__multadd>
 800d95a:	9b02      	ldr	r3, [sp, #8]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	4607      	mov	r7, r0
 800d960:	f300 808e 	bgt.w	800da80 <_dtoa_r+0x990>
 800d964:	9b06      	ldr	r3, [sp, #24]
 800d966:	2b02      	cmp	r3, #2
 800d968:	dc51      	bgt.n	800da0e <_dtoa_r+0x91e>
 800d96a:	e089      	b.n	800da80 <_dtoa_r+0x990>
 800d96c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d96e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d972:	e74b      	b.n	800d80c <_dtoa_r+0x71c>
 800d974:	9b03      	ldr	r3, [sp, #12]
 800d976:	1e5e      	subs	r6, r3, #1
 800d978:	9b07      	ldr	r3, [sp, #28]
 800d97a:	42b3      	cmp	r3, r6
 800d97c:	bfbf      	itttt	lt
 800d97e:	9b07      	ldrlt	r3, [sp, #28]
 800d980:	9607      	strlt	r6, [sp, #28]
 800d982:	1af2      	sublt	r2, r6, r3
 800d984:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d986:	bfb6      	itet	lt
 800d988:	189b      	addlt	r3, r3, r2
 800d98a:	1b9e      	subge	r6, r3, r6
 800d98c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d98e:	9b03      	ldr	r3, [sp, #12]
 800d990:	bfb8      	it	lt
 800d992:	2600      	movlt	r6, #0
 800d994:	2b00      	cmp	r3, #0
 800d996:	bfb7      	itett	lt
 800d998:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d99c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d9a0:	1a9d      	sublt	r5, r3, r2
 800d9a2:	2300      	movlt	r3, #0
 800d9a4:	e734      	b.n	800d810 <_dtoa_r+0x720>
 800d9a6:	9e07      	ldr	r6, [sp, #28]
 800d9a8:	9d04      	ldr	r5, [sp, #16]
 800d9aa:	9f08      	ldr	r7, [sp, #32]
 800d9ac:	e73b      	b.n	800d826 <_dtoa_r+0x736>
 800d9ae:	9a07      	ldr	r2, [sp, #28]
 800d9b0:	e767      	b.n	800d882 <_dtoa_r+0x792>
 800d9b2:	9b06      	ldr	r3, [sp, #24]
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	dc18      	bgt.n	800d9ea <_dtoa_r+0x8fa>
 800d9b8:	f1ba 0f00 	cmp.w	sl, #0
 800d9bc:	d115      	bne.n	800d9ea <_dtoa_r+0x8fa>
 800d9be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d9c2:	b993      	cbnz	r3, 800d9ea <_dtoa_r+0x8fa>
 800d9c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d9c8:	0d1b      	lsrs	r3, r3, #20
 800d9ca:	051b      	lsls	r3, r3, #20
 800d9cc:	b183      	cbz	r3, 800d9f0 <_dtoa_r+0x900>
 800d9ce:	9b04      	ldr	r3, [sp, #16]
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	9304      	str	r3, [sp, #16]
 800d9d4:	9b05      	ldr	r3, [sp, #20]
 800d9d6:	3301      	adds	r3, #1
 800d9d8:	9305      	str	r3, [sp, #20]
 800d9da:	f04f 0801 	mov.w	r8, #1
 800d9de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	f47f af6a 	bne.w	800d8ba <_dtoa_r+0x7ca>
 800d9e6:	2001      	movs	r0, #1
 800d9e8:	e76f      	b.n	800d8ca <_dtoa_r+0x7da>
 800d9ea:	f04f 0800 	mov.w	r8, #0
 800d9ee:	e7f6      	b.n	800d9de <_dtoa_r+0x8ee>
 800d9f0:	4698      	mov	r8, r3
 800d9f2:	e7f4      	b.n	800d9de <_dtoa_r+0x8ee>
 800d9f4:	f43f af7d 	beq.w	800d8f2 <_dtoa_r+0x802>
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	301c      	adds	r0, #28
 800d9fc:	e772      	b.n	800d8e4 <_dtoa_r+0x7f4>
 800d9fe:	9b03      	ldr	r3, [sp, #12]
 800da00:	2b00      	cmp	r3, #0
 800da02:	dc37      	bgt.n	800da74 <_dtoa_r+0x984>
 800da04:	9b06      	ldr	r3, [sp, #24]
 800da06:	2b02      	cmp	r3, #2
 800da08:	dd34      	ble.n	800da74 <_dtoa_r+0x984>
 800da0a:	9b03      	ldr	r3, [sp, #12]
 800da0c:	9302      	str	r3, [sp, #8]
 800da0e:	9b02      	ldr	r3, [sp, #8]
 800da10:	b96b      	cbnz	r3, 800da2e <_dtoa_r+0x93e>
 800da12:	4631      	mov	r1, r6
 800da14:	2205      	movs	r2, #5
 800da16:	4620      	mov	r0, r4
 800da18:	f000 ff6a 	bl	800e8f0 <__multadd>
 800da1c:	4601      	mov	r1, r0
 800da1e:	4606      	mov	r6, r0
 800da20:	ee18 0a10 	vmov	r0, s16
 800da24:	f001 f9ce 	bl	800edc4 <__mcmp>
 800da28:	2800      	cmp	r0, #0
 800da2a:	f73f adbb 	bgt.w	800d5a4 <_dtoa_r+0x4b4>
 800da2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da30:	9d01      	ldr	r5, [sp, #4]
 800da32:	43db      	mvns	r3, r3
 800da34:	9300      	str	r3, [sp, #0]
 800da36:	f04f 0800 	mov.w	r8, #0
 800da3a:	4631      	mov	r1, r6
 800da3c:	4620      	mov	r0, r4
 800da3e:	f000 ff35 	bl	800e8ac <_Bfree>
 800da42:	2f00      	cmp	r7, #0
 800da44:	f43f aea4 	beq.w	800d790 <_dtoa_r+0x6a0>
 800da48:	f1b8 0f00 	cmp.w	r8, #0
 800da4c:	d005      	beq.n	800da5a <_dtoa_r+0x96a>
 800da4e:	45b8      	cmp	r8, r7
 800da50:	d003      	beq.n	800da5a <_dtoa_r+0x96a>
 800da52:	4641      	mov	r1, r8
 800da54:	4620      	mov	r0, r4
 800da56:	f000 ff29 	bl	800e8ac <_Bfree>
 800da5a:	4639      	mov	r1, r7
 800da5c:	4620      	mov	r0, r4
 800da5e:	f000 ff25 	bl	800e8ac <_Bfree>
 800da62:	e695      	b.n	800d790 <_dtoa_r+0x6a0>
 800da64:	2600      	movs	r6, #0
 800da66:	4637      	mov	r7, r6
 800da68:	e7e1      	b.n	800da2e <_dtoa_r+0x93e>
 800da6a:	9700      	str	r7, [sp, #0]
 800da6c:	4637      	mov	r7, r6
 800da6e:	e599      	b.n	800d5a4 <_dtoa_r+0x4b4>
 800da70:	40240000 	.word	0x40240000
 800da74:	9b08      	ldr	r3, [sp, #32]
 800da76:	2b00      	cmp	r3, #0
 800da78:	f000 80ca 	beq.w	800dc10 <_dtoa_r+0xb20>
 800da7c:	9b03      	ldr	r3, [sp, #12]
 800da7e:	9302      	str	r3, [sp, #8]
 800da80:	2d00      	cmp	r5, #0
 800da82:	dd05      	ble.n	800da90 <_dtoa_r+0x9a0>
 800da84:	4639      	mov	r1, r7
 800da86:	462a      	mov	r2, r5
 800da88:	4620      	mov	r0, r4
 800da8a:	f001 f92b 	bl	800ece4 <__lshift>
 800da8e:	4607      	mov	r7, r0
 800da90:	f1b8 0f00 	cmp.w	r8, #0
 800da94:	d05b      	beq.n	800db4e <_dtoa_r+0xa5e>
 800da96:	6879      	ldr	r1, [r7, #4]
 800da98:	4620      	mov	r0, r4
 800da9a:	f000 fec7 	bl	800e82c <_Balloc>
 800da9e:	4605      	mov	r5, r0
 800daa0:	b928      	cbnz	r0, 800daae <_dtoa_r+0x9be>
 800daa2:	4b87      	ldr	r3, [pc, #540]	; (800dcc0 <_dtoa_r+0xbd0>)
 800daa4:	4602      	mov	r2, r0
 800daa6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800daaa:	f7ff bb3b 	b.w	800d124 <_dtoa_r+0x34>
 800daae:	693a      	ldr	r2, [r7, #16]
 800dab0:	3202      	adds	r2, #2
 800dab2:	0092      	lsls	r2, r2, #2
 800dab4:	f107 010c 	add.w	r1, r7, #12
 800dab8:	300c      	adds	r0, #12
 800daba:	f7fd faed 	bl	800b098 <memcpy>
 800dabe:	2201      	movs	r2, #1
 800dac0:	4629      	mov	r1, r5
 800dac2:	4620      	mov	r0, r4
 800dac4:	f001 f90e 	bl	800ece4 <__lshift>
 800dac8:	9b01      	ldr	r3, [sp, #4]
 800daca:	f103 0901 	add.w	r9, r3, #1
 800dace:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800dad2:	4413      	add	r3, r2
 800dad4:	9305      	str	r3, [sp, #20]
 800dad6:	f00a 0301 	and.w	r3, sl, #1
 800dada:	46b8      	mov	r8, r7
 800dadc:	9304      	str	r3, [sp, #16]
 800dade:	4607      	mov	r7, r0
 800dae0:	4631      	mov	r1, r6
 800dae2:	ee18 0a10 	vmov	r0, s16
 800dae6:	f7ff fa77 	bl	800cfd8 <quorem>
 800daea:	4641      	mov	r1, r8
 800daec:	9002      	str	r0, [sp, #8]
 800daee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800daf2:	ee18 0a10 	vmov	r0, s16
 800daf6:	f001 f965 	bl	800edc4 <__mcmp>
 800dafa:	463a      	mov	r2, r7
 800dafc:	9003      	str	r0, [sp, #12]
 800dafe:	4631      	mov	r1, r6
 800db00:	4620      	mov	r0, r4
 800db02:	f001 f97b 	bl	800edfc <__mdiff>
 800db06:	68c2      	ldr	r2, [r0, #12]
 800db08:	f109 3bff 	add.w	fp, r9, #4294967295
 800db0c:	4605      	mov	r5, r0
 800db0e:	bb02      	cbnz	r2, 800db52 <_dtoa_r+0xa62>
 800db10:	4601      	mov	r1, r0
 800db12:	ee18 0a10 	vmov	r0, s16
 800db16:	f001 f955 	bl	800edc4 <__mcmp>
 800db1a:	4602      	mov	r2, r0
 800db1c:	4629      	mov	r1, r5
 800db1e:	4620      	mov	r0, r4
 800db20:	9207      	str	r2, [sp, #28]
 800db22:	f000 fec3 	bl	800e8ac <_Bfree>
 800db26:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800db2a:	ea43 0102 	orr.w	r1, r3, r2
 800db2e:	9b04      	ldr	r3, [sp, #16]
 800db30:	430b      	orrs	r3, r1
 800db32:	464d      	mov	r5, r9
 800db34:	d10f      	bne.n	800db56 <_dtoa_r+0xa66>
 800db36:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800db3a:	d02a      	beq.n	800db92 <_dtoa_r+0xaa2>
 800db3c:	9b03      	ldr	r3, [sp, #12]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	dd02      	ble.n	800db48 <_dtoa_r+0xa58>
 800db42:	9b02      	ldr	r3, [sp, #8]
 800db44:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800db48:	f88b a000 	strb.w	sl, [fp]
 800db4c:	e775      	b.n	800da3a <_dtoa_r+0x94a>
 800db4e:	4638      	mov	r0, r7
 800db50:	e7ba      	b.n	800dac8 <_dtoa_r+0x9d8>
 800db52:	2201      	movs	r2, #1
 800db54:	e7e2      	b.n	800db1c <_dtoa_r+0xa2c>
 800db56:	9b03      	ldr	r3, [sp, #12]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	db04      	blt.n	800db66 <_dtoa_r+0xa76>
 800db5c:	9906      	ldr	r1, [sp, #24]
 800db5e:	430b      	orrs	r3, r1
 800db60:	9904      	ldr	r1, [sp, #16]
 800db62:	430b      	orrs	r3, r1
 800db64:	d122      	bne.n	800dbac <_dtoa_r+0xabc>
 800db66:	2a00      	cmp	r2, #0
 800db68:	ddee      	ble.n	800db48 <_dtoa_r+0xa58>
 800db6a:	ee18 1a10 	vmov	r1, s16
 800db6e:	2201      	movs	r2, #1
 800db70:	4620      	mov	r0, r4
 800db72:	f001 f8b7 	bl	800ece4 <__lshift>
 800db76:	4631      	mov	r1, r6
 800db78:	ee08 0a10 	vmov	s16, r0
 800db7c:	f001 f922 	bl	800edc4 <__mcmp>
 800db80:	2800      	cmp	r0, #0
 800db82:	dc03      	bgt.n	800db8c <_dtoa_r+0xa9c>
 800db84:	d1e0      	bne.n	800db48 <_dtoa_r+0xa58>
 800db86:	f01a 0f01 	tst.w	sl, #1
 800db8a:	d0dd      	beq.n	800db48 <_dtoa_r+0xa58>
 800db8c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800db90:	d1d7      	bne.n	800db42 <_dtoa_r+0xa52>
 800db92:	2339      	movs	r3, #57	; 0x39
 800db94:	f88b 3000 	strb.w	r3, [fp]
 800db98:	462b      	mov	r3, r5
 800db9a:	461d      	mov	r5, r3
 800db9c:	3b01      	subs	r3, #1
 800db9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dba2:	2a39      	cmp	r2, #57	; 0x39
 800dba4:	d071      	beq.n	800dc8a <_dtoa_r+0xb9a>
 800dba6:	3201      	adds	r2, #1
 800dba8:	701a      	strb	r2, [r3, #0]
 800dbaa:	e746      	b.n	800da3a <_dtoa_r+0x94a>
 800dbac:	2a00      	cmp	r2, #0
 800dbae:	dd07      	ble.n	800dbc0 <_dtoa_r+0xad0>
 800dbb0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dbb4:	d0ed      	beq.n	800db92 <_dtoa_r+0xaa2>
 800dbb6:	f10a 0301 	add.w	r3, sl, #1
 800dbba:	f88b 3000 	strb.w	r3, [fp]
 800dbbe:	e73c      	b.n	800da3a <_dtoa_r+0x94a>
 800dbc0:	9b05      	ldr	r3, [sp, #20]
 800dbc2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800dbc6:	4599      	cmp	r9, r3
 800dbc8:	d047      	beq.n	800dc5a <_dtoa_r+0xb6a>
 800dbca:	ee18 1a10 	vmov	r1, s16
 800dbce:	2300      	movs	r3, #0
 800dbd0:	220a      	movs	r2, #10
 800dbd2:	4620      	mov	r0, r4
 800dbd4:	f000 fe8c 	bl	800e8f0 <__multadd>
 800dbd8:	45b8      	cmp	r8, r7
 800dbda:	ee08 0a10 	vmov	s16, r0
 800dbde:	f04f 0300 	mov.w	r3, #0
 800dbe2:	f04f 020a 	mov.w	r2, #10
 800dbe6:	4641      	mov	r1, r8
 800dbe8:	4620      	mov	r0, r4
 800dbea:	d106      	bne.n	800dbfa <_dtoa_r+0xb0a>
 800dbec:	f000 fe80 	bl	800e8f0 <__multadd>
 800dbf0:	4680      	mov	r8, r0
 800dbf2:	4607      	mov	r7, r0
 800dbf4:	f109 0901 	add.w	r9, r9, #1
 800dbf8:	e772      	b.n	800dae0 <_dtoa_r+0x9f0>
 800dbfa:	f000 fe79 	bl	800e8f0 <__multadd>
 800dbfe:	4639      	mov	r1, r7
 800dc00:	4680      	mov	r8, r0
 800dc02:	2300      	movs	r3, #0
 800dc04:	220a      	movs	r2, #10
 800dc06:	4620      	mov	r0, r4
 800dc08:	f000 fe72 	bl	800e8f0 <__multadd>
 800dc0c:	4607      	mov	r7, r0
 800dc0e:	e7f1      	b.n	800dbf4 <_dtoa_r+0xb04>
 800dc10:	9b03      	ldr	r3, [sp, #12]
 800dc12:	9302      	str	r3, [sp, #8]
 800dc14:	9d01      	ldr	r5, [sp, #4]
 800dc16:	ee18 0a10 	vmov	r0, s16
 800dc1a:	4631      	mov	r1, r6
 800dc1c:	f7ff f9dc 	bl	800cfd8 <quorem>
 800dc20:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dc24:	9b01      	ldr	r3, [sp, #4]
 800dc26:	f805 ab01 	strb.w	sl, [r5], #1
 800dc2a:	1aea      	subs	r2, r5, r3
 800dc2c:	9b02      	ldr	r3, [sp, #8]
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	dd09      	ble.n	800dc46 <_dtoa_r+0xb56>
 800dc32:	ee18 1a10 	vmov	r1, s16
 800dc36:	2300      	movs	r3, #0
 800dc38:	220a      	movs	r2, #10
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	f000 fe58 	bl	800e8f0 <__multadd>
 800dc40:	ee08 0a10 	vmov	s16, r0
 800dc44:	e7e7      	b.n	800dc16 <_dtoa_r+0xb26>
 800dc46:	9b02      	ldr	r3, [sp, #8]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	bfc8      	it	gt
 800dc4c:	461d      	movgt	r5, r3
 800dc4e:	9b01      	ldr	r3, [sp, #4]
 800dc50:	bfd8      	it	le
 800dc52:	2501      	movle	r5, #1
 800dc54:	441d      	add	r5, r3
 800dc56:	f04f 0800 	mov.w	r8, #0
 800dc5a:	ee18 1a10 	vmov	r1, s16
 800dc5e:	2201      	movs	r2, #1
 800dc60:	4620      	mov	r0, r4
 800dc62:	f001 f83f 	bl	800ece4 <__lshift>
 800dc66:	4631      	mov	r1, r6
 800dc68:	ee08 0a10 	vmov	s16, r0
 800dc6c:	f001 f8aa 	bl	800edc4 <__mcmp>
 800dc70:	2800      	cmp	r0, #0
 800dc72:	dc91      	bgt.n	800db98 <_dtoa_r+0xaa8>
 800dc74:	d102      	bne.n	800dc7c <_dtoa_r+0xb8c>
 800dc76:	f01a 0f01 	tst.w	sl, #1
 800dc7a:	d18d      	bne.n	800db98 <_dtoa_r+0xaa8>
 800dc7c:	462b      	mov	r3, r5
 800dc7e:	461d      	mov	r5, r3
 800dc80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc84:	2a30      	cmp	r2, #48	; 0x30
 800dc86:	d0fa      	beq.n	800dc7e <_dtoa_r+0xb8e>
 800dc88:	e6d7      	b.n	800da3a <_dtoa_r+0x94a>
 800dc8a:	9a01      	ldr	r2, [sp, #4]
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	d184      	bne.n	800db9a <_dtoa_r+0xaaa>
 800dc90:	9b00      	ldr	r3, [sp, #0]
 800dc92:	3301      	adds	r3, #1
 800dc94:	9300      	str	r3, [sp, #0]
 800dc96:	2331      	movs	r3, #49	; 0x31
 800dc98:	7013      	strb	r3, [r2, #0]
 800dc9a:	e6ce      	b.n	800da3a <_dtoa_r+0x94a>
 800dc9c:	4b09      	ldr	r3, [pc, #36]	; (800dcc4 <_dtoa_r+0xbd4>)
 800dc9e:	f7ff ba95 	b.w	800d1cc <_dtoa_r+0xdc>
 800dca2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	f47f aa6e 	bne.w	800d186 <_dtoa_r+0x96>
 800dcaa:	4b07      	ldr	r3, [pc, #28]	; (800dcc8 <_dtoa_r+0xbd8>)
 800dcac:	f7ff ba8e 	b.w	800d1cc <_dtoa_r+0xdc>
 800dcb0:	9b02      	ldr	r3, [sp, #8]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	dcae      	bgt.n	800dc14 <_dtoa_r+0xb24>
 800dcb6:	9b06      	ldr	r3, [sp, #24]
 800dcb8:	2b02      	cmp	r3, #2
 800dcba:	f73f aea8 	bgt.w	800da0e <_dtoa_r+0x91e>
 800dcbe:	e7a9      	b.n	800dc14 <_dtoa_r+0xb24>
 800dcc0:	080af0b0 	.word	0x080af0b0
 800dcc4:	080aeeb4 	.word	0x080aeeb4
 800dcc8:	080af031 	.word	0x080af031

0800dccc <__sflush_r>:
 800dccc:	898a      	ldrh	r2, [r1, #12]
 800dcce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcd2:	4605      	mov	r5, r0
 800dcd4:	0710      	lsls	r0, r2, #28
 800dcd6:	460c      	mov	r4, r1
 800dcd8:	d458      	bmi.n	800dd8c <__sflush_r+0xc0>
 800dcda:	684b      	ldr	r3, [r1, #4]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	dc05      	bgt.n	800dcec <__sflush_r+0x20>
 800dce0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	dc02      	bgt.n	800dcec <__sflush_r+0x20>
 800dce6:	2000      	movs	r0, #0
 800dce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dcee:	2e00      	cmp	r6, #0
 800dcf0:	d0f9      	beq.n	800dce6 <__sflush_r+0x1a>
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dcf8:	682f      	ldr	r7, [r5, #0]
 800dcfa:	602b      	str	r3, [r5, #0]
 800dcfc:	d032      	beq.n	800dd64 <__sflush_r+0x98>
 800dcfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dd00:	89a3      	ldrh	r3, [r4, #12]
 800dd02:	075a      	lsls	r2, r3, #29
 800dd04:	d505      	bpl.n	800dd12 <__sflush_r+0x46>
 800dd06:	6863      	ldr	r3, [r4, #4]
 800dd08:	1ac0      	subs	r0, r0, r3
 800dd0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dd0c:	b10b      	cbz	r3, 800dd12 <__sflush_r+0x46>
 800dd0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dd10:	1ac0      	subs	r0, r0, r3
 800dd12:	2300      	movs	r3, #0
 800dd14:	4602      	mov	r2, r0
 800dd16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd18:	6a21      	ldr	r1, [r4, #32]
 800dd1a:	4628      	mov	r0, r5
 800dd1c:	47b0      	blx	r6
 800dd1e:	1c43      	adds	r3, r0, #1
 800dd20:	89a3      	ldrh	r3, [r4, #12]
 800dd22:	d106      	bne.n	800dd32 <__sflush_r+0x66>
 800dd24:	6829      	ldr	r1, [r5, #0]
 800dd26:	291d      	cmp	r1, #29
 800dd28:	d82c      	bhi.n	800dd84 <__sflush_r+0xb8>
 800dd2a:	4a2a      	ldr	r2, [pc, #168]	; (800ddd4 <__sflush_r+0x108>)
 800dd2c:	40ca      	lsrs	r2, r1
 800dd2e:	07d6      	lsls	r6, r2, #31
 800dd30:	d528      	bpl.n	800dd84 <__sflush_r+0xb8>
 800dd32:	2200      	movs	r2, #0
 800dd34:	6062      	str	r2, [r4, #4]
 800dd36:	04d9      	lsls	r1, r3, #19
 800dd38:	6922      	ldr	r2, [r4, #16]
 800dd3a:	6022      	str	r2, [r4, #0]
 800dd3c:	d504      	bpl.n	800dd48 <__sflush_r+0x7c>
 800dd3e:	1c42      	adds	r2, r0, #1
 800dd40:	d101      	bne.n	800dd46 <__sflush_r+0x7a>
 800dd42:	682b      	ldr	r3, [r5, #0]
 800dd44:	b903      	cbnz	r3, 800dd48 <__sflush_r+0x7c>
 800dd46:	6560      	str	r0, [r4, #84]	; 0x54
 800dd48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd4a:	602f      	str	r7, [r5, #0]
 800dd4c:	2900      	cmp	r1, #0
 800dd4e:	d0ca      	beq.n	800dce6 <__sflush_r+0x1a>
 800dd50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd54:	4299      	cmp	r1, r3
 800dd56:	d002      	beq.n	800dd5e <__sflush_r+0x92>
 800dd58:	4628      	mov	r0, r5
 800dd5a:	f7fd f9b3 	bl	800b0c4 <_free_r>
 800dd5e:	2000      	movs	r0, #0
 800dd60:	6360      	str	r0, [r4, #52]	; 0x34
 800dd62:	e7c1      	b.n	800dce8 <__sflush_r+0x1c>
 800dd64:	6a21      	ldr	r1, [r4, #32]
 800dd66:	2301      	movs	r3, #1
 800dd68:	4628      	mov	r0, r5
 800dd6a:	47b0      	blx	r6
 800dd6c:	1c41      	adds	r1, r0, #1
 800dd6e:	d1c7      	bne.n	800dd00 <__sflush_r+0x34>
 800dd70:	682b      	ldr	r3, [r5, #0]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d0c4      	beq.n	800dd00 <__sflush_r+0x34>
 800dd76:	2b1d      	cmp	r3, #29
 800dd78:	d001      	beq.n	800dd7e <__sflush_r+0xb2>
 800dd7a:	2b16      	cmp	r3, #22
 800dd7c:	d101      	bne.n	800dd82 <__sflush_r+0xb6>
 800dd7e:	602f      	str	r7, [r5, #0]
 800dd80:	e7b1      	b.n	800dce6 <__sflush_r+0x1a>
 800dd82:	89a3      	ldrh	r3, [r4, #12]
 800dd84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd88:	81a3      	strh	r3, [r4, #12]
 800dd8a:	e7ad      	b.n	800dce8 <__sflush_r+0x1c>
 800dd8c:	690f      	ldr	r7, [r1, #16]
 800dd8e:	2f00      	cmp	r7, #0
 800dd90:	d0a9      	beq.n	800dce6 <__sflush_r+0x1a>
 800dd92:	0793      	lsls	r3, r2, #30
 800dd94:	680e      	ldr	r6, [r1, #0]
 800dd96:	bf08      	it	eq
 800dd98:	694b      	ldreq	r3, [r1, #20]
 800dd9a:	600f      	str	r7, [r1, #0]
 800dd9c:	bf18      	it	ne
 800dd9e:	2300      	movne	r3, #0
 800dda0:	eba6 0807 	sub.w	r8, r6, r7
 800dda4:	608b      	str	r3, [r1, #8]
 800dda6:	f1b8 0f00 	cmp.w	r8, #0
 800ddaa:	dd9c      	ble.n	800dce6 <__sflush_r+0x1a>
 800ddac:	6a21      	ldr	r1, [r4, #32]
 800ddae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ddb0:	4643      	mov	r3, r8
 800ddb2:	463a      	mov	r2, r7
 800ddb4:	4628      	mov	r0, r5
 800ddb6:	47b0      	blx	r6
 800ddb8:	2800      	cmp	r0, #0
 800ddba:	dc06      	bgt.n	800ddca <__sflush_r+0xfe>
 800ddbc:	89a3      	ldrh	r3, [r4, #12]
 800ddbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddc2:	81a3      	strh	r3, [r4, #12]
 800ddc4:	f04f 30ff 	mov.w	r0, #4294967295
 800ddc8:	e78e      	b.n	800dce8 <__sflush_r+0x1c>
 800ddca:	4407      	add	r7, r0
 800ddcc:	eba8 0800 	sub.w	r8, r8, r0
 800ddd0:	e7e9      	b.n	800dda6 <__sflush_r+0xda>
 800ddd2:	bf00      	nop
 800ddd4:	20400001 	.word	0x20400001

0800ddd8 <_fflush_r>:
 800ddd8:	b538      	push	{r3, r4, r5, lr}
 800ddda:	690b      	ldr	r3, [r1, #16]
 800dddc:	4605      	mov	r5, r0
 800ddde:	460c      	mov	r4, r1
 800dde0:	b913      	cbnz	r3, 800dde8 <_fflush_r+0x10>
 800dde2:	2500      	movs	r5, #0
 800dde4:	4628      	mov	r0, r5
 800dde6:	bd38      	pop	{r3, r4, r5, pc}
 800dde8:	b118      	cbz	r0, 800ddf2 <_fflush_r+0x1a>
 800ddea:	6983      	ldr	r3, [r0, #24]
 800ddec:	b90b      	cbnz	r3, 800ddf2 <_fflush_r+0x1a>
 800ddee:	f000 f887 	bl	800df00 <__sinit>
 800ddf2:	4b14      	ldr	r3, [pc, #80]	; (800de44 <_fflush_r+0x6c>)
 800ddf4:	429c      	cmp	r4, r3
 800ddf6:	d11b      	bne.n	800de30 <_fflush_r+0x58>
 800ddf8:	686c      	ldr	r4, [r5, #4]
 800ddfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d0ef      	beq.n	800dde2 <_fflush_r+0xa>
 800de02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800de04:	07d0      	lsls	r0, r2, #31
 800de06:	d404      	bmi.n	800de12 <_fflush_r+0x3a>
 800de08:	0599      	lsls	r1, r3, #22
 800de0a:	d402      	bmi.n	800de12 <_fflush_r+0x3a>
 800de0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de0e:	f000 fc88 	bl	800e722 <__retarget_lock_acquire_recursive>
 800de12:	4628      	mov	r0, r5
 800de14:	4621      	mov	r1, r4
 800de16:	f7ff ff59 	bl	800dccc <__sflush_r>
 800de1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de1c:	07da      	lsls	r2, r3, #31
 800de1e:	4605      	mov	r5, r0
 800de20:	d4e0      	bmi.n	800dde4 <_fflush_r+0xc>
 800de22:	89a3      	ldrh	r3, [r4, #12]
 800de24:	059b      	lsls	r3, r3, #22
 800de26:	d4dd      	bmi.n	800dde4 <_fflush_r+0xc>
 800de28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de2a:	f000 fc7b 	bl	800e724 <__retarget_lock_release_recursive>
 800de2e:	e7d9      	b.n	800dde4 <_fflush_r+0xc>
 800de30:	4b05      	ldr	r3, [pc, #20]	; (800de48 <_fflush_r+0x70>)
 800de32:	429c      	cmp	r4, r3
 800de34:	d101      	bne.n	800de3a <_fflush_r+0x62>
 800de36:	68ac      	ldr	r4, [r5, #8]
 800de38:	e7df      	b.n	800ddfa <_fflush_r+0x22>
 800de3a:	4b04      	ldr	r3, [pc, #16]	; (800de4c <_fflush_r+0x74>)
 800de3c:	429c      	cmp	r4, r3
 800de3e:	bf08      	it	eq
 800de40:	68ec      	ldreq	r4, [r5, #12]
 800de42:	e7da      	b.n	800ddfa <_fflush_r+0x22>
 800de44:	080af0e4 	.word	0x080af0e4
 800de48:	080af104 	.word	0x080af104
 800de4c:	080af0c4 	.word	0x080af0c4

0800de50 <std>:
 800de50:	2300      	movs	r3, #0
 800de52:	b510      	push	{r4, lr}
 800de54:	4604      	mov	r4, r0
 800de56:	e9c0 3300 	strd	r3, r3, [r0]
 800de5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800de5e:	6083      	str	r3, [r0, #8]
 800de60:	8181      	strh	r1, [r0, #12]
 800de62:	6643      	str	r3, [r0, #100]	; 0x64
 800de64:	81c2      	strh	r2, [r0, #14]
 800de66:	6183      	str	r3, [r0, #24]
 800de68:	4619      	mov	r1, r3
 800de6a:	2208      	movs	r2, #8
 800de6c:	305c      	adds	r0, #92	; 0x5c
 800de6e:	f7fd f921 	bl	800b0b4 <memset>
 800de72:	4b05      	ldr	r3, [pc, #20]	; (800de88 <std+0x38>)
 800de74:	6263      	str	r3, [r4, #36]	; 0x24
 800de76:	4b05      	ldr	r3, [pc, #20]	; (800de8c <std+0x3c>)
 800de78:	62a3      	str	r3, [r4, #40]	; 0x28
 800de7a:	4b05      	ldr	r3, [pc, #20]	; (800de90 <std+0x40>)
 800de7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800de7e:	4b05      	ldr	r3, [pc, #20]	; (800de94 <std+0x44>)
 800de80:	6224      	str	r4, [r4, #32]
 800de82:	6323      	str	r3, [r4, #48]	; 0x30
 800de84:	bd10      	pop	{r4, pc}
 800de86:	bf00      	nop
 800de88:	0800f7b9 	.word	0x0800f7b9
 800de8c:	0800f7db 	.word	0x0800f7db
 800de90:	0800f813 	.word	0x0800f813
 800de94:	0800f837 	.word	0x0800f837

0800de98 <_cleanup_r>:
 800de98:	4901      	ldr	r1, [pc, #4]	; (800dea0 <_cleanup_r+0x8>)
 800de9a:	f000 b8af 	b.w	800dffc <_fwalk_reent>
 800de9e:	bf00      	nop
 800dea0:	0800ddd9 	.word	0x0800ddd9

0800dea4 <__sfmoreglue>:
 800dea4:	b570      	push	{r4, r5, r6, lr}
 800dea6:	2268      	movs	r2, #104	; 0x68
 800dea8:	1e4d      	subs	r5, r1, #1
 800deaa:	4355      	muls	r5, r2
 800deac:	460e      	mov	r6, r1
 800deae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800deb2:	f7fd f973 	bl	800b19c <_malloc_r>
 800deb6:	4604      	mov	r4, r0
 800deb8:	b140      	cbz	r0, 800decc <__sfmoreglue+0x28>
 800deba:	2100      	movs	r1, #0
 800debc:	e9c0 1600 	strd	r1, r6, [r0]
 800dec0:	300c      	adds	r0, #12
 800dec2:	60a0      	str	r0, [r4, #8]
 800dec4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dec8:	f7fd f8f4 	bl	800b0b4 <memset>
 800decc:	4620      	mov	r0, r4
 800dece:	bd70      	pop	{r4, r5, r6, pc}

0800ded0 <__sfp_lock_acquire>:
 800ded0:	4801      	ldr	r0, [pc, #4]	; (800ded8 <__sfp_lock_acquire+0x8>)
 800ded2:	f000 bc26 	b.w	800e722 <__retarget_lock_acquire_recursive>
 800ded6:	bf00      	nop
 800ded8:	2000b4ed 	.word	0x2000b4ed

0800dedc <__sfp_lock_release>:
 800dedc:	4801      	ldr	r0, [pc, #4]	; (800dee4 <__sfp_lock_release+0x8>)
 800dede:	f000 bc21 	b.w	800e724 <__retarget_lock_release_recursive>
 800dee2:	bf00      	nop
 800dee4:	2000b4ed 	.word	0x2000b4ed

0800dee8 <__sinit_lock_acquire>:
 800dee8:	4801      	ldr	r0, [pc, #4]	; (800def0 <__sinit_lock_acquire+0x8>)
 800deea:	f000 bc1a 	b.w	800e722 <__retarget_lock_acquire_recursive>
 800deee:	bf00      	nop
 800def0:	2000b4ee 	.word	0x2000b4ee

0800def4 <__sinit_lock_release>:
 800def4:	4801      	ldr	r0, [pc, #4]	; (800defc <__sinit_lock_release+0x8>)
 800def6:	f000 bc15 	b.w	800e724 <__retarget_lock_release_recursive>
 800defa:	bf00      	nop
 800defc:	2000b4ee 	.word	0x2000b4ee

0800df00 <__sinit>:
 800df00:	b510      	push	{r4, lr}
 800df02:	4604      	mov	r4, r0
 800df04:	f7ff fff0 	bl	800dee8 <__sinit_lock_acquire>
 800df08:	69a3      	ldr	r3, [r4, #24]
 800df0a:	b11b      	cbz	r3, 800df14 <__sinit+0x14>
 800df0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df10:	f7ff bff0 	b.w	800def4 <__sinit_lock_release>
 800df14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800df18:	6523      	str	r3, [r4, #80]	; 0x50
 800df1a:	4b13      	ldr	r3, [pc, #76]	; (800df68 <__sinit+0x68>)
 800df1c:	4a13      	ldr	r2, [pc, #76]	; (800df6c <__sinit+0x6c>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	62a2      	str	r2, [r4, #40]	; 0x28
 800df22:	42a3      	cmp	r3, r4
 800df24:	bf04      	itt	eq
 800df26:	2301      	moveq	r3, #1
 800df28:	61a3      	streq	r3, [r4, #24]
 800df2a:	4620      	mov	r0, r4
 800df2c:	f000 f820 	bl	800df70 <__sfp>
 800df30:	6060      	str	r0, [r4, #4]
 800df32:	4620      	mov	r0, r4
 800df34:	f000 f81c 	bl	800df70 <__sfp>
 800df38:	60a0      	str	r0, [r4, #8]
 800df3a:	4620      	mov	r0, r4
 800df3c:	f000 f818 	bl	800df70 <__sfp>
 800df40:	2200      	movs	r2, #0
 800df42:	60e0      	str	r0, [r4, #12]
 800df44:	2104      	movs	r1, #4
 800df46:	6860      	ldr	r0, [r4, #4]
 800df48:	f7ff ff82 	bl	800de50 <std>
 800df4c:	68a0      	ldr	r0, [r4, #8]
 800df4e:	2201      	movs	r2, #1
 800df50:	2109      	movs	r1, #9
 800df52:	f7ff ff7d 	bl	800de50 <std>
 800df56:	68e0      	ldr	r0, [r4, #12]
 800df58:	2202      	movs	r2, #2
 800df5a:	2112      	movs	r1, #18
 800df5c:	f7ff ff78 	bl	800de50 <std>
 800df60:	2301      	movs	r3, #1
 800df62:	61a3      	str	r3, [r4, #24]
 800df64:	e7d2      	b.n	800df0c <__sinit+0xc>
 800df66:	bf00      	nop
 800df68:	080aeea0 	.word	0x080aeea0
 800df6c:	0800de99 	.word	0x0800de99

0800df70 <__sfp>:
 800df70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df72:	4607      	mov	r7, r0
 800df74:	f7ff ffac 	bl	800ded0 <__sfp_lock_acquire>
 800df78:	4b1e      	ldr	r3, [pc, #120]	; (800dff4 <__sfp+0x84>)
 800df7a:	681e      	ldr	r6, [r3, #0]
 800df7c:	69b3      	ldr	r3, [r6, #24]
 800df7e:	b913      	cbnz	r3, 800df86 <__sfp+0x16>
 800df80:	4630      	mov	r0, r6
 800df82:	f7ff ffbd 	bl	800df00 <__sinit>
 800df86:	3648      	adds	r6, #72	; 0x48
 800df88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800df8c:	3b01      	subs	r3, #1
 800df8e:	d503      	bpl.n	800df98 <__sfp+0x28>
 800df90:	6833      	ldr	r3, [r6, #0]
 800df92:	b30b      	cbz	r3, 800dfd8 <__sfp+0x68>
 800df94:	6836      	ldr	r6, [r6, #0]
 800df96:	e7f7      	b.n	800df88 <__sfp+0x18>
 800df98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800df9c:	b9d5      	cbnz	r5, 800dfd4 <__sfp+0x64>
 800df9e:	4b16      	ldr	r3, [pc, #88]	; (800dff8 <__sfp+0x88>)
 800dfa0:	60e3      	str	r3, [r4, #12]
 800dfa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dfa6:	6665      	str	r5, [r4, #100]	; 0x64
 800dfa8:	f000 fbba 	bl	800e720 <__retarget_lock_init_recursive>
 800dfac:	f7ff ff96 	bl	800dedc <__sfp_lock_release>
 800dfb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dfb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dfb8:	6025      	str	r5, [r4, #0]
 800dfba:	61a5      	str	r5, [r4, #24]
 800dfbc:	2208      	movs	r2, #8
 800dfbe:	4629      	mov	r1, r5
 800dfc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dfc4:	f7fd f876 	bl	800b0b4 <memset>
 800dfc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dfcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfd4:	3468      	adds	r4, #104	; 0x68
 800dfd6:	e7d9      	b.n	800df8c <__sfp+0x1c>
 800dfd8:	2104      	movs	r1, #4
 800dfda:	4638      	mov	r0, r7
 800dfdc:	f7ff ff62 	bl	800dea4 <__sfmoreglue>
 800dfe0:	4604      	mov	r4, r0
 800dfe2:	6030      	str	r0, [r6, #0]
 800dfe4:	2800      	cmp	r0, #0
 800dfe6:	d1d5      	bne.n	800df94 <__sfp+0x24>
 800dfe8:	f7ff ff78 	bl	800dedc <__sfp_lock_release>
 800dfec:	230c      	movs	r3, #12
 800dfee:	603b      	str	r3, [r7, #0]
 800dff0:	e7ee      	b.n	800dfd0 <__sfp+0x60>
 800dff2:	bf00      	nop
 800dff4:	080aeea0 	.word	0x080aeea0
 800dff8:	ffff0001 	.word	0xffff0001

0800dffc <_fwalk_reent>:
 800dffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e000:	4606      	mov	r6, r0
 800e002:	4688      	mov	r8, r1
 800e004:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e008:	2700      	movs	r7, #0
 800e00a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e00e:	f1b9 0901 	subs.w	r9, r9, #1
 800e012:	d505      	bpl.n	800e020 <_fwalk_reent+0x24>
 800e014:	6824      	ldr	r4, [r4, #0]
 800e016:	2c00      	cmp	r4, #0
 800e018:	d1f7      	bne.n	800e00a <_fwalk_reent+0xe>
 800e01a:	4638      	mov	r0, r7
 800e01c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e020:	89ab      	ldrh	r3, [r5, #12]
 800e022:	2b01      	cmp	r3, #1
 800e024:	d907      	bls.n	800e036 <_fwalk_reent+0x3a>
 800e026:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e02a:	3301      	adds	r3, #1
 800e02c:	d003      	beq.n	800e036 <_fwalk_reent+0x3a>
 800e02e:	4629      	mov	r1, r5
 800e030:	4630      	mov	r0, r6
 800e032:	47c0      	blx	r8
 800e034:	4307      	orrs	r7, r0
 800e036:	3568      	adds	r5, #104	; 0x68
 800e038:	e7e9      	b.n	800e00e <_fwalk_reent+0x12>

0800e03a <rshift>:
 800e03a:	6903      	ldr	r3, [r0, #16]
 800e03c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e044:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e048:	f100 0414 	add.w	r4, r0, #20
 800e04c:	dd45      	ble.n	800e0da <rshift+0xa0>
 800e04e:	f011 011f 	ands.w	r1, r1, #31
 800e052:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e056:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e05a:	d10c      	bne.n	800e076 <rshift+0x3c>
 800e05c:	f100 0710 	add.w	r7, r0, #16
 800e060:	4629      	mov	r1, r5
 800e062:	42b1      	cmp	r1, r6
 800e064:	d334      	bcc.n	800e0d0 <rshift+0x96>
 800e066:	1a9b      	subs	r3, r3, r2
 800e068:	009b      	lsls	r3, r3, #2
 800e06a:	1eea      	subs	r2, r5, #3
 800e06c:	4296      	cmp	r6, r2
 800e06e:	bf38      	it	cc
 800e070:	2300      	movcc	r3, #0
 800e072:	4423      	add	r3, r4
 800e074:	e015      	b.n	800e0a2 <rshift+0x68>
 800e076:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e07a:	f1c1 0820 	rsb	r8, r1, #32
 800e07e:	40cf      	lsrs	r7, r1
 800e080:	f105 0e04 	add.w	lr, r5, #4
 800e084:	46a1      	mov	r9, r4
 800e086:	4576      	cmp	r6, lr
 800e088:	46f4      	mov	ip, lr
 800e08a:	d815      	bhi.n	800e0b8 <rshift+0x7e>
 800e08c:	1a9a      	subs	r2, r3, r2
 800e08e:	0092      	lsls	r2, r2, #2
 800e090:	3a04      	subs	r2, #4
 800e092:	3501      	adds	r5, #1
 800e094:	42ae      	cmp	r6, r5
 800e096:	bf38      	it	cc
 800e098:	2200      	movcc	r2, #0
 800e09a:	18a3      	adds	r3, r4, r2
 800e09c:	50a7      	str	r7, [r4, r2]
 800e09e:	b107      	cbz	r7, 800e0a2 <rshift+0x68>
 800e0a0:	3304      	adds	r3, #4
 800e0a2:	1b1a      	subs	r2, r3, r4
 800e0a4:	42a3      	cmp	r3, r4
 800e0a6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e0aa:	bf08      	it	eq
 800e0ac:	2300      	moveq	r3, #0
 800e0ae:	6102      	str	r2, [r0, #16]
 800e0b0:	bf08      	it	eq
 800e0b2:	6143      	streq	r3, [r0, #20]
 800e0b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0b8:	f8dc c000 	ldr.w	ip, [ip]
 800e0bc:	fa0c fc08 	lsl.w	ip, ip, r8
 800e0c0:	ea4c 0707 	orr.w	r7, ip, r7
 800e0c4:	f849 7b04 	str.w	r7, [r9], #4
 800e0c8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e0cc:	40cf      	lsrs	r7, r1
 800e0ce:	e7da      	b.n	800e086 <rshift+0x4c>
 800e0d0:	f851 cb04 	ldr.w	ip, [r1], #4
 800e0d4:	f847 cf04 	str.w	ip, [r7, #4]!
 800e0d8:	e7c3      	b.n	800e062 <rshift+0x28>
 800e0da:	4623      	mov	r3, r4
 800e0dc:	e7e1      	b.n	800e0a2 <rshift+0x68>

0800e0de <__hexdig_fun>:
 800e0de:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e0e2:	2b09      	cmp	r3, #9
 800e0e4:	d802      	bhi.n	800e0ec <__hexdig_fun+0xe>
 800e0e6:	3820      	subs	r0, #32
 800e0e8:	b2c0      	uxtb	r0, r0
 800e0ea:	4770      	bx	lr
 800e0ec:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e0f0:	2b05      	cmp	r3, #5
 800e0f2:	d801      	bhi.n	800e0f8 <__hexdig_fun+0x1a>
 800e0f4:	3847      	subs	r0, #71	; 0x47
 800e0f6:	e7f7      	b.n	800e0e8 <__hexdig_fun+0xa>
 800e0f8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e0fc:	2b05      	cmp	r3, #5
 800e0fe:	d801      	bhi.n	800e104 <__hexdig_fun+0x26>
 800e100:	3827      	subs	r0, #39	; 0x27
 800e102:	e7f1      	b.n	800e0e8 <__hexdig_fun+0xa>
 800e104:	2000      	movs	r0, #0
 800e106:	4770      	bx	lr

0800e108 <__gethex>:
 800e108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e10c:	ed2d 8b02 	vpush	{d8}
 800e110:	b089      	sub	sp, #36	; 0x24
 800e112:	ee08 0a10 	vmov	s16, r0
 800e116:	9304      	str	r3, [sp, #16]
 800e118:	4bb4      	ldr	r3, [pc, #720]	; (800e3ec <__gethex+0x2e4>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	9301      	str	r3, [sp, #4]
 800e11e:	4618      	mov	r0, r3
 800e120:	468b      	mov	fp, r1
 800e122:	4690      	mov	r8, r2
 800e124:	f7f2 f854 	bl	80001d0 <strlen>
 800e128:	9b01      	ldr	r3, [sp, #4]
 800e12a:	f8db 2000 	ldr.w	r2, [fp]
 800e12e:	4403      	add	r3, r0
 800e130:	4682      	mov	sl, r0
 800e132:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e136:	9305      	str	r3, [sp, #20]
 800e138:	1c93      	adds	r3, r2, #2
 800e13a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e13e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e142:	32fe      	adds	r2, #254	; 0xfe
 800e144:	18d1      	adds	r1, r2, r3
 800e146:	461f      	mov	r7, r3
 800e148:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e14c:	9100      	str	r1, [sp, #0]
 800e14e:	2830      	cmp	r0, #48	; 0x30
 800e150:	d0f8      	beq.n	800e144 <__gethex+0x3c>
 800e152:	f7ff ffc4 	bl	800e0de <__hexdig_fun>
 800e156:	4604      	mov	r4, r0
 800e158:	2800      	cmp	r0, #0
 800e15a:	d13a      	bne.n	800e1d2 <__gethex+0xca>
 800e15c:	9901      	ldr	r1, [sp, #4]
 800e15e:	4652      	mov	r2, sl
 800e160:	4638      	mov	r0, r7
 800e162:	f001 fb6c 	bl	800f83e <strncmp>
 800e166:	4605      	mov	r5, r0
 800e168:	2800      	cmp	r0, #0
 800e16a:	d168      	bne.n	800e23e <__gethex+0x136>
 800e16c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e170:	eb07 060a 	add.w	r6, r7, sl
 800e174:	f7ff ffb3 	bl	800e0de <__hexdig_fun>
 800e178:	2800      	cmp	r0, #0
 800e17a:	d062      	beq.n	800e242 <__gethex+0x13a>
 800e17c:	4633      	mov	r3, r6
 800e17e:	7818      	ldrb	r0, [r3, #0]
 800e180:	2830      	cmp	r0, #48	; 0x30
 800e182:	461f      	mov	r7, r3
 800e184:	f103 0301 	add.w	r3, r3, #1
 800e188:	d0f9      	beq.n	800e17e <__gethex+0x76>
 800e18a:	f7ff ffa8 	bl	800e0de <__hexdig_fun>
 800e18e:	2301      	movs	r3, #1
 800e190:	fab0 f480 	clz	r4, r0
 800e194:	0964      	lsrs	r4, r4, #5
 800e196:	4635      	mov	r5, r6
 800e198:	9300      	str	r3, [sp, #0]
 800e19a:	463a      	mov	r2, r7
 800e19c:	4616      	mov	r6, r2
 800e19e:	3201      	adds	r2, #1
 800e1a0:	7830      	ldrb	r0, [r6, #0]
 800e1a2:	f7ff ff9c 	bl	800e0de <__hexdig_fun>
 800e1a6:	2800      	cmp	r0, #0
 800e1a8:	d1f8      	bne.n	800e19c <__gethex+0x94>
 800e1aa:	9901      	ldr	r1, [sp, #4]
 800e1ac:	4652      	mov	r2, sl
 800e1ae:	4630      	mov	r0, r6
 800e1b0:	f001 fb45 	bl	800f83e <strncmp>
 800e1b4:	b980      	cbnz	r0, 800e1d8 <__gethex+0xd0>
 800e1b6:	b94d      	cbnz	r5, 800e1cc <__gethex+0xc4>
 800e1b8:	eb06 050a 	add.w	r5, r6, sl
 800e1bc:	462a      	mov	r2, r5
 800e1be:	4616      	mov	r6, r2
 800e1c0:	3201      	adds	r2, #1
 800e1c2:	7830      	ldrb	r0, [r6, #0]
 800e1c4:	f7ff ff8b 	bl	800e0de <__hexdig_fun>
 800e1c8:	2800      	cmp	r0, #0
 800e1ca:	d1f8      	bne.n	800e1be <__gethex+0xb6>
 800e1cc:	1bad      	subs	r5, r5, r6
 800e1ce:	00ad      	lsls	r5, r5, #2
 800e1d0:	e004      	b.n	800e1dc <__gethex+0xd4>
 800e1d2:	2400      	movs	r4, #0
 800e1d4:	4625      	mov	r5, r4
 800e1d6:	e7e0      	b.n	800e19a <__gethex+0x92>
 800e1d8:	2d00      	cmp	r5, #0
 800e1da:	d1f7      	bne.n	800e1cc <__gethex+0xc4>
 800e1dc:	7833      	ldrb	r3, [r6, #0]
 800e1de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e1e2:	2b50      	cmp	r3, #80	; 0x50
 800e1e4:	d13b      	bne.n	800e25e <__gethex+0x156>
 800e1e6:	7873      	ldrb	r3, [r6, #1]
 800e1e8:	2b2b      	cmp	r3, #43	; 0x2b
 800e1ea:	d02c      	beq.n	800e246 <__gethex+0x13e>
 800e1ec:	2b2d      	cmp	r3, #45	; 0x2d
 800e1ee:	d02e      	beq.n	800e24e <__gethex+0x146>
 800e1f0:	1c71      	adds	r1, r6, #1
 800e1f2:	f04f 0900 	mov.w	r9, #0
 800e1f6:	7808      	ldrb	r0, [r1, #0]
 800e1f8:	f7ff ff71 	bl	800e0de <__hexdig_fun>
 800e1fc:	1e43      	subs	r3, r0, #1
 800e1fe:	b2db      	uxtb	r3, r3
 800e200:	2b18      	cmp	r3, #24
 800e202:	d82c      	bhi.n	800e25e <__gethex+0x156>
 800e204:	f1a0 0210 	sub.w	r2, r0, #16
 800e208:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e20c:	f7ff ff67 	bl	800e0de <__hexdig_fun>
 800e210:	1e43      	subs	r3, r0, #1
 800e212:	b2db      	uxtb	r3, r3
 800e214:	2b18      	cmp	r3, #24
 800e216:	d91d      	bls.n	800e254 <__gethex+0x14c>
 800e218:	f1b9 0f00 	cmp.w	r9, #0
 800e21c:	d000      	beq.n	800e220 <__gethex+0x118>
 800e21e:	4252      	negs	r2, r2
 800e220:	4415      	add	r5, r2
 800e222:	f8cb 1000 	str.w	r1, [fp]
 800e226:	b1e4      	cbz	r4, 800e262 <__gethex+0x15a>
 800e228:	9b00      	ldr	r3, [sp, #0]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	bf14      	ite	ne
 800e22e:	2700      	movne	r7, #0
 800e230:	2706      	moveq	r7, #6
 800e232:	4638      	mov	r0, r7
 800e234:	b009      	add	sp, #36	; 0x24
 800e236:	ecbd 8b02 	vpop	{d8}
 800e23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e23e:	463e      	mov	r6, r7
 800e240:	4625      	mov	r5, r4
 800e242:	2401      	movs	r4, #1
 800e244:	e7ca      	b.n	800e1dc <__gethex+0xd4>
 800e246:	f04f 0900 	mov.w	r9, #0
 800e24a:	1cb1      	adds	r1, r6, #2
 800e24c:	e7d3      	b.n	800e1f6 <__gethex+0xee>
 800e24e:	f04f 0901 	mov.w	r9, #1
 800e252:	e7fa      	b.n	800e24a <__gethex+0x142>
 800e254:	230a      	movs	r3, #10
 800e256:	fb03 0202 	mla	r2, r3, r2, r0
 800e25a:	3a10      	subs	r2, #16
 800e25c:	e7d4      	b.n	800e208 <__gethex+0x100>
 800e25e:	4631      	mov	r1, r6
 800e260:	e7df      	b.n	800e222 <__gethex+0x11a>
 800e262:	1bf3      	subs	r3, r6, r7
 800e264:	3b01      	subs	r3, #1
 800e266:	4621      	mov	r1, r4
 800e268:	2b07      	cmp	r3, #7
 800e26a:	dc0b      	bgt.n	800e284 <__gethex+0x17c>
 800e26c:	ee18 0a10 	vmov	r0, s16
 800e270:	f000 fadc 	bl	800e82c <_Balloc>
 800e274:	4604      	mov	r4, r0
 800e276:	b940      	cbnz	r0, 800e28a <__gethex+0x182>
 800e278:	4b5d      	ldr	r3, [pc, #372]	; (800e3f0 <__gethex+0x2e8>)
 800e27a:	4602      	mov	r2, r0
 800e27c:	21de      	movs	r1, #222	; 0xde
 800e27e:	485d      	ldr	r0, [pc, #372]	; (800e3f4 <__gethex+0x2ec>)
 800e280:	f001 fb10 	bl	800f8a4 <__assert_func>
 800e284:	3101      	adds	r1, #1
 800e286:	105b      	asrs	r3, r3, #1
 800e288:	e7ee      	b.n	800e268 <__gethex+0x160>
 800e28a:	f100 0914 	add.w	r9, r0, #20
 800e28e:	f04f 0b00 	mov.w	fp, #0
 800e292:	f1ca 0301 	rsb	r3, sl, #1
 800e296:	f8cd 9008 	str.w	r9, [sp, #8]
 800e29a:	f8cd b000 	str.w	fp, [sp]
 800e29e:	9306      	str	r3, [sp, #24]
 800e2a0:	42b7      	cmp	r7, r6
 800e2a2:	d340      	bcc.n	800e326 <__gethex+0x21e>
 800e2a4:	9802      	ldr	r0, [sp, #8]
 800e2a6:	9b00      	ldr	r3, [sp, #0]
 800e2a8:	f840 3b04 	str.w	r3, [r0], #4
 800e2ac:	eba0 0009 	sub.w	r0, r0, r9
 800e2b0:	1080      	asrs	r0, r0, #2
 800e2b2:	0146      	lsls	r6, r0, #5
 800e2b4:	6120      	str	r0, [r4, #16]
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f000 fbaa 	bl	800ea10 <__hi0bits>
 800e2bc:	1a30      	subs	r0, r6, r0
 800e2be:	f8d8 6000 	ldr.w	r6, [r8]
 800e2c2:	42b0      	cmp	r0, r6
 800e2c4:	dd63      	ble.n	800e38e <__gethex+0x286>
 800e2c6:	1b87      	subs	r7, r0, r6
 800e2c8:	4639      	mov	r1, r7
 800e2ca:	4620      	mov	r0, r4
 800e2cc:	f000 ff4e 	bl	800f16c <__any_on>
 800e2d0:	4682      	mov	sl, r0
 800e2d2:	b1a8      	cbz	r0, 800e300 <__gethex+0x1f8>
 800e2d4:	1e7b      	subs	r3, r7, #1
 800e2d6:	1159      	asrs	r1, r3, #5
 800e2d8:	f003 021f 	and.w	r2, r3, #31
 800e2dc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e2e0:	f04f 0a01 	mov.w	sl, #1
 800e2e4:	fa0a f202 	lsl.w	r2, sl, r2
 800e2e8:	420a      	tst	r2, r1
 800e2ea:	d009      	beq.n	800e300 <__gethex+0x1f8>
 800e2ec:	4553      	cmp	r3, sl
 800e2ee:	dd05      	ble.n	800e2fc <__gethex+0x1f4>
 800e2f0:	1eb9      	subs	r1, r7, #2
 800e2f2:	4620      	mov	r0, r4
 800e2f4:	f000 ff3a 	bl	800f16c <__any_on>
 800e2f8:	2800      	cmp	r0, #0
 800e2fa:	d145      	bne.n	800e388 <__gethex+0x280>
 800e2fc:	f04f 0a02 	mov.w	sl, #2
 800e300:	4639      	mov	r1, r7
 800e302:	4620      	mov	r0, r4
 800e304:	f7ff fe99 	bl	800e03a <rshift>
 800e308:	443d      	add	r5, r7
 800e30a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e30e:	42ab      	cmp	r3, r5
 800e310:	da4c      	bge.n	800e3ac <__gethex+0x2a4>
 800e312:	ee18 0a10 	vmov	r0, s16
 800e316:	4621      	mov	r1, r4
 800e318:	f000 fac8 	bl	800e8ac <_Bfree>
 800e31c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e31e:	2300      	movs	r3, #0
 800e320:	6013      	str	r3, [r2, #0]
 800e322:	27a3      	movs	r7, #163	; 0xa3
 800e324:	e785      	b.n	800e232 <__gethex+0x12a>
 800e326:	1e73      	subs	r3, r6, #1
 800e328:	9a05      	ldr	r2, [sp, #20]
 800e32a:	9303      	str	r3, [sp, #12]
 800e32c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e330:	4293      	cmp	r3, r2
 800e332:	d019      	beq.n	800e368 <__gethex+0x260>
 800e334:	f1bb 0f20 	cmp.w	fp, #32
 800e338:	d107      	bne.n	800e34a <__gethex+0x242>
 800e33a:	9b02      	ldr	r3, [sp, #8]
 800e33c:	9a00      	ldr	r2, [sp, #0]
 800e33e:	f843 2b04 	str.w	r2, [r3], #4
 800e342:	9302      	str	r3, [sp, #8]
 800e344:	2300      	movs	r3, #0
 800e346:	9300      	str	r3, [sp, #0]
 800e348:	469b      	mov	fp, r3
 800e34a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e34e:	f7ff fec6 	bl	800e0de <__hexdig_fun>
 800e352:	9b00      	ldr	r3, [sp, #0]
 800e354:	f000 000f 	and.w	r0, r0, #15
 800e358:	fa00 f00b 	lsl.w	r0, r0, fp
 800e35c:	4303      	orrs	r3, r0
 800e35e:	9300      	str	r3, [sp, #0]
 800e360:	f10b 0b04 	add.w	fp, fp, #4
 800e364:	9b03      	ldr	r3, [sp, #12]
 800e366:	e00d      	b.n	800e384 <__gethex+0x27c>
 800e368:	9b03      	ldr	r3, [sp, #12]
 800e36a:	9a06      	ldr	r2, [sp, #24]
 800e36c:	4413      	add	r3, r2
 800e36e:	42bb      	cmp	r3, r7
 800e370:	d3e0      	bcc.n	800e334 <__gethex+0x22c>
 800e372:	4618      	mov	r0, r3
 800e374:	9901      	ldr	r1, [sp, #4]
 800e376:	9307      	str	r3, [sp, #28]
 800e378:	4652      	mov	r2, sl
 800e37a:	f001 fa60 	bl	800f83e <strncmp>
 800e37e:	9b07      	ldr	r3, [sp, #28]
 800e380:	2800      	cmp	r0, #0
 800e382:	d1d7      	bne.n	800e334 <__gethex+0x22c>
 800e384:	461e      	mov	r6, r3
 800e386:	e78b      	b.n	800e2a0 <__gethex+0x198>
 800e388:	f04f 0a03 	mov.w	sl, #3
 800e38c:	e7b8      	b.n	800e300 <__gethex+0x1f8>
 800e38e:	da0a      	bge.n	800e3a6 <__gethex+0x29e>
 800e390:	1a37      	subs	r7, r6, r0
 800e392:	4621      	mov	r1, r4
 800e394:	ee18 0a10 	vmov	r0, s16
 800e398:	463a      	mov	r2, r7
 800e39a:	f000 fca3 	bl	800ece4 <__lshift>
 800e39e:	1bed      	subs	r5, r5, r7
 800e3a0:	4604      	mov	r4, r0
 800e3a2:	f100 0914 	add.w	r9, r0, #20
 800e3a6:	f04f 0a00 	mov.w	sl, #0
 800e3aa:	e7ae      	b.n	800e30a <__gethex+0x202>
 800e3ac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e3b0:	42a8      	cmp	r0, r5
 800e3b2:	dd72      	ble.n	800e49a <__gethex+0x392>
 800e3b4:	1b45      	subs	r5, r0, r5
 800e3b6:	42ae      	cmp	r6, r5
 800e3b8:	dc36      	bgt.n	800e428 <__gethex+0x320>
 800e3ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e3be:	2b02      	cmp	r3, #2
 800e3c0:	d02a      	beq.n	800e418 <__gethex+0x310>
 800e3c2:	2b03      	cmp	r3, #3
 800e3c4:	d02c      	beq.n	800e420 <__gethex+0x318>
 800e3c6:	2b01      	cmp	r3, #1
 800e3c8:	d11c      	bne.n	800e404 <__gethex+0x2fc>
 800e3ca:	42ae      	cmp	r6, r5
 800e3cc:	d11a      	bne.n	800e404 <__gethex+0x2fc>
 800e3ce:	2e01      	cmp	r6, #1
 800e3d0:	d112      	bne.n	800e3f8 <__gethex+0x2f0>
 800e3d2:	9a04      	ldr	r2, [sp, #16]
 800e3d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e3d8:	6013      	str	r3, [r2, #0]
 800e3da:	2301      	movs	r3, #1
 800e3dc:	6123      	str	r3, [r4, #16]
 800e3de:	f8c9 3000 	str.w	r3, [r9]
 800e3e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e3e4:	2762      	movs	r7, #98	; 0x62
 800e3e6:	601c      	str	r4, [r3, #0]
 800e3e8:	e723      	b.n	800e232 <__gethex+0x12a>
 800e3ea:	bf00      	nop
 800e3ec:	080af18c 	.word	0x080af18c
 800e3f0:	080af0b0 	.word	0x080af0b0
 800e3f4:	080af124 	.word	0x080af124
 800e3f8:	1e71      	subs	r1, r6, #1
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	f000 feb6 	bl	800f16c <__any_on>
 800e400:	2800      	cmp	r0, #0
 800e402:	d1e6      	bne.n	800e3d2 <__gethex+0x2ca>
 800e404:	ee18 0a10 	vmov	r0, s16
 800e408:	4621      	mov	r1, r4
 800e40a:	f000 fa4f 	bl	800e8ac <_Bfree>
 800e40e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e410:	2300      	movs	r3, #0
 800e412:	6013      	str	r3, [r2, #0]
 800e414:	2750      	movs	r7, #80	; 0x50
 800e416:	e70c      	b.n	800e232 <__gethex+0x12a>
 800e418:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d1f2      	bne.n	800e404 <__gethex+0x2fc>
 800e41e:	e7d8      	b.n	800e3d2 <__gethex+0x2ca>
 800e420:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e422:	2b00      	cmp	r3, #0
 800e424:	d1d5      	bne.n	800e3d2 <__gethex+0x2ca>
 800e426:	e7ed      	b.n	800e404 <__gethex+0x2fc>
 800e428:	1e6f      	subs	r7, r5, #1
 800e42a:	f1ba 0f00 	cmp.w	sl, #0
 800e42e:	d131      	bne.n	800e494 <__gethex+0x38c>
 800e430:	b127      	cbz	r7, 800e43c <__gethex+0x334>
 800e432:	4639      	mov	r1, r7
 800e434:	4620      	mov	r0, r4
 800e436:	f000 fe99 	bl	800f16c <__any_on>
 800e43a:	4682      	mov	sl, r0
 800e43c:	117b      	asrs	r3, r7, #5
 800e43e:	2101      	movs	r1, #1
 800e440:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e444:	f007 071f 	and.w	r7, r7, #31
 800e448:	fa01 f707 	lsl.w	r7, r1, r7
 800e44c:	421f      	tst	r7, r3
 800e44e:	4629      	mov	r1, r5
 800e450:	4620      	mov	r0, r4
 800e452:	bf18      	it	ne
 800e454:	f04a 0a02 	orrne.w	sl, sl, #2
 800e458:	1b76      	subs	r6, r6, r5
 800e45a:	f7ff fdee 	bl	800e03a <rshift>
 800e45e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e462:	2702      	movs	r7, #2
 800e464:	f1ba 0f00 	cmp.w	sl, #0
 800e468:	d048      	beq.n	800e4fc <__gethex+0x3f4>
 800e46a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e46e:	2b02      	cmp	r3, #2
 800e470:	d015      	beq.n	800e49e <__gethex+0x396>
 800e472:	2b03      	cmp	r3, #3
 800e474:	d017      	beq.n	800e4a6 <__gethex+0x39e>
 800e476:	2b01      	cmp	r3, #1
 800e478:	d109      	bne.n	800e48e <__gethex+0x386>
 800e47a:	f01a 0f02 	tst.w	sl, #2
 800e47e:	d006      	beq.n	800e48e <__gethex+0x386>
 800e480:	f8d9 0000 	ldr.w	r0, [r9]
 800e484:	ea4a 0a00 	orr.w	sl, sl, r0
 800e488:	f01a 0f01 	tst.w	sl, #1
 800e48c:	d10e      	bne.n	800e4ac <__gethex+0x3a4>
 800e48e:	f047 0710 	orr.w	r7, r7, #16
 800e492:	e033      	b.n	800e4fc <__gethex+0x3f4>
 800e494:	f04f 0a01 	mov.w	sl, #1
 800e498:	e7d0      	b.n	800e43c <__gethex+0x334>
 800e49a:	2701      	movs	r7, #1
 800e49c:	e7e2      	b.n	800e464 <__gethex+0x35c>
 800e49e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4a0:	f1c3 0301 	rsb	r3, r3, #1
 800e4a4:	9315      	str	r3, [sp, #84]	; 0x54
 800e4a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d0f0      	beq.n	800e48e <__gethex+0x386>
 800e4ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e4b0:	f104 0314 	add.w	r3, r4, #20
 800e4b4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e4b8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e4bc:	f04f 0c00 	mov.w	ip, #0
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4c6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e4ca:	d01c      	beq.n	800e506 <__gethex+0x3fe>
 800e4cc:	3201      	adds	r2, #1
 800e4ce:	6002      	str	r2, [r0, #0]
 800e4d0:	2f02      	cmp	r7, #2
 800e4d2:	f104 0314 	add.w	r3, r4, #20
 800e4d6:	d13f      	bne.n	800e558 <__gethex+0x450>
 800e4d8:	f8d8 2000 	ldr.w	r2, [r8]
 800e4dc:	3a01      	subs	r2, #1
 800e4de:	42b2      	cmp	r2, r6
 800e4e0:	d10a      	bne.n	800e4f8 <__gethex+0x3f0>
 800e4e2:	1171      	asrs	r1, r6, #5
 800e4e4:	2201      	movs	r2, #1
 800e4e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e4ea:	f006 061f 	and.w	r6, r6, #31
 800e4ee:	fa02 f606 	lsl.w	r6, r2, r6
 800e4f2:	421e      	tst	r6, r3
 800e4f4:	bf18      	it	ne
 800e4f6:	4617      	movne	r7, r2
 800e4f8:	f047 0720 	orr.w	r7, r7, #32
 800e4fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e4fe:	601c      	str	r4, [r3, #0]
 800e500:	9b04      	ldr	r3, [sp, #16]
 800e502:	601d      	str	r5, [r3, #0]
 800e504:	e695      	b.n	800e232 <__gethex+0x12a>
 800e506:	4299      	cmp	r1, r3
 800e508:	f843 cc04 	str.w	ip, [r3, #-4]
 800e50c:	d8d8      	bhi.n	800e4c0 <__gethex+0x3b8>
 800e50e:	68a3      	ldr	r3, [r4, #8]
 800e510:	459b      	cmp	fp, r3
 800e512:	db19      	blt.n	800e548 <__gethex+0x440>
 800e514:	6861      	ldr	r1, [r4, #4]
 800e516:	ee18 0a10 	vmov	r0, s16
 800e51a:	3101      	adds	r1, #1
 800e51c:	f000 f986 	bl	800e82c <_Balloc>
 800e520:	4681      	mov	r9, r0
 800e522:	b918      	cbnz	r0, 800e52c <__gethex+0x424>
 800e524:	4b1a      	ldr	r3, [pc, #104]	; (800e590 <__gethex+0x488>)
 800e526:	4602      	mov	r2, r0
 800e528:	2184      	movs	r1, #132	; 0x84
 800e52a:	e6a8      	b.n	800e27e <__gethex+0x176>
 800e52c:	6922      	ldr	r2, [r4, #16]
 800e52e:	3202      	adds	r2, #2
 800e530:	f104 010c 	add.w	r1, r4, #12
 800e534:	0092      	lsls	r2, r2, #2
 800e536:	300c      	adds	r0, #12
 800e538:	f7fc fdae 	bl	800b098 <memcpy>
 800e53c:	4621      	mov	r1, r4
 800e53e:	ee18 0a10 	vmov	r0, s16
 800e542:	f000 f9b3 	bl	800e8ac <_Bfree>
 800e546:	464c      	mov	r4, r9
 800e548:	6923      	ldr	r3, [r4, #16]
 800e54a:	1c5a      	adds	r2, r3, #1
 800e54c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e550:	6122      	str	r2, [r4, #16]
 800e552:	2201      	movs	r2, #1
 800e554:	615a      	str	r2, [r3, #20]
 800e556:	e7bb      	b.n	800e4d0 <__gethex+0x3c8>
 800e558:	6922      	ldr	r2, [r4, #16]
 800e55a:	455a      	cmp	r2, fp
 800e55c:	dd0b      	ble.n	800e576 <__gethex+0x46e>
 800e55e:	2101      	movs	r1, #1
 800e560:	4620      	mov	r0, r4
 800e562:	f7ff fd6a 	bl	800e03a <rshift>
 800e566:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e56a:	3501      	adds	r5, #1
 800e56c:	42ab      	cmp	r3, r5
 800e56e:	f6ff aed0 	blt.w	800e312 <__gethex+0x20a>
 800e572:	2701      	movs	r7, #1
 800e574:	e7c0      	b.n	800e4f8 <__gethex+0x3f0>
 800e576:	f016 061f 	ands.w	r6, r6, #31
 800e57a:	d0fa      	beq.n	800e572 <__gethex+0x46a>
 800e57c:	4453      	add	r3, sl
 800e57e:	f1c6 0620 	rsb	r6, r6, #32
 800e582:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e586:	f000 fa43 	bl	800ea10 <__hi0bits>
 800e58a:	42b0      	cmp	r0, r6
 800e58c:	dbe7      	blt.n	800e55e <__gethex+0x456>
 800e58e:	e7f0      	b.n	800e572 <__gethex+0x46a>
 800e590:	080af0b0 	.word	0x080af0b0

0800e594 <L_shift>:
 800e594:	f1c2 0208 	rsb	r2, r2, #8
 800e598:	0092      	lsls	r2, r2, #2
 800e59a:	b570      	push	{r4, r5, r6, lr}
 800e59c:	f1c2 0620 	rsb	r6, r2, #32
 800e5a0:	6843      	ldr	r3, [r0, #4]
 800e5a2:	6804      	ldr	r4, [r0, #0]
 800e5a4:	fa03 f506 	lsl.w	r5, r3, r6
 800e5a8:	432c      	orrs	r4, r5
 800e5aa:	40d3      	lsrs	r3, r2
 800e5ac:	6004      	str	r4, [r0, #0]
 800e5ae:	f840 3f04 	str.w	r3, [r0, #4]!
 800e5b2:	4288      	cmp	r0, r1
 800e5b4:	d3f4      	bcc.n	800e5a0 <L_shift+0xc>
 800e5b6:	bd70      	pop	{r4, r5, r6, pc}

0800e5b8 <__match>:
 800e5b8:	b530      	push	{r4, r5, lr}
 800e5ba:	6803      	ldr	r3, [r0, #0]
 800e5bc:	3301      	adds	r3, #1
 800e5be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5c2:	b914      	cbnz	r4, 800e5ca <__match+0x12>
 800e5c4:	6003      	str	r3, [r0, #0]
 800e5c6:	2001      	movs	r0, #1
 800e5c8:	bd30      	pop	{r4, r5, pc}
 800e5ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e5ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e5d2:	2d19      	cmp	r5, #25
 800e5d4:	bf98      	it	ls
 800e5d6:	3220      	addls	r2, #32
 800e5d8:	42a2      	cmp	r2, r4
 800e5da:	d0f0      	beq.n	800e5be <__match+0x6>
 800e5dc:	2000      	movs	r0, #0
 800e5de:	e7f3      	b.n	800e5c8 <__match+0x10>

0800e5e0 <__hexnan>:
 800e5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5e4:	680b      	ldr	r3, [r1, #0]
 800e5e6:	115e      	asrs	r6, r3, #5
 800e5e8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e5ec:	f013 031f 	ands.w	r3, r3, #31
 800e5f0:	b087      	sub	sp, #28
 800e5f2:	bf18      	it	ne
 800e5f4:	3604      	addne	r6, #4
 800e5f6:	2500      	movs	r5, #0
 800e5f8:	1f37      	subs	r7, r6, #4
 800e5fa:	4690      	mov	r8, r2
 800e5fc:	6802      	ldr	r2, [r0, #0]
 800e5fe:	9301      	str	r3, [sp, #4]
 800e600:	4682      	mov	sl, r0
 800e602:	f846 5c04 	str.w	r5, [r6, #-4]
 800e606:	46b9      	mov	r9, r7
 800e608:	463c      	mov	r4, r7
 800e60a:	9502      	str	r5, [sp, #8]
 800e60c:	46ab      	mov	fp, r5
 800e60e:	7851      	ldrb	r1, [r2, #1]
 800e610:	1c53      	adds	r3, r2, #1
 800e612:	9303      	str	r3, [sp, #12]
 800e614:	b341      	cbz	r1, 800e668 <__hexnan+0x88>
 800e616:	4608      	mov	r0, r1
 800e618:	9205      	str	r2, [sp, #20]
 800e61a:	9104      	str	r1, [sp, #16]
 800e61c:	f7ff fd5f 	bl	800e0de <__hexdig_fun>
 800e620:	2800      	cmp	r0, #0
 800e622:	d14f      	bne.n	800e6c4 <__hexnan+0xe4>
 800e624:	9904      	ldr	r1, [sp, #16]
 800e626:	9a05      	ldr	r2, [sp, #20]
 800e628:	2920      	cmp	r1, #32
 800e62a:	d818      	bhi.n	800e65e <__hexnan+0x7e>
 800e62c:	9b02      	ldr	r3, [sp, #8]
 800e62e:	459b      	cmp	fp, r3
 800e630:	dd13      	ble.n	800e65a <__hexnan+0x7a>
 800e632:	454c      	cmp	r4, r9
 800e634:	d206      	bcs.n	800e644 <__hexnan+0x64>
 800e636:	2d07      	cmp	r5, #7
 800e638:	dc04      	bgt.n	800e644 <__hexnan+0x64>
 800e63a:	462a      	mov	r2, r5
 800e63c:	4649      	mov	r1, r9
 800e63e:	4620      	mov	r0, r4
 800e640:	f7ff ffa8 	bl	800e594 <L_shift>
 800e644:	4544      	cmp	r4, r8
 800e646:	d950      	bls.n	800e6ea <__hexnan+0x10a>
 800e648:	2300      	movs	r3, #0
 800e64a:	f1a4 0904 	sub.w	r9, r4, #4
 800e64e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e652:	f8cd b008 	str.w	fp, [sp, #8]
 800e656:	464c      	mov	r4, r9
 800e658:	461d      	mov	r5, r3
 800e65a:	9a03      	ldr	r2, [sp, #12]
 800e65c:	e7d7      	b.n	800e60e <__hexnan+0x2e>
 800e65e:	2929      	cmp	r1, #41	; 0x29
 800e660:	d156      	bne.n	800e710 <__hexnan+0x130>
 800e662:	3202      	adds	r2, #2
 800e664:	f8ca 2000 	str.w	r2, [sl]
 800e668:	f1bb 0f00 	cmp.w	fp, #0
 800e66c:	d050      	beq.n	800e710 <__hexnan+0x130>
 800e66e:	454c      	cmp	r4, r9
 800e670:	d206      	bcs.n	800e680 <__hexnan+0xa0>
 800e672:	2d07      	cmp	r5, #7
 800e674:	dc04      	bgt.n	800e680 <__hexnan+0xa0>
 800e676:	462a      	mov	r2, r5
 800e678:	4649      	mov	r1, r9
 800e67a:	4620      	mov	r0, r4
 800e67c:	f7ff ff8a 	bl	800e594 <L_shift>
 800e680:	4544      	cmp	r4, r8
 800e682:	d934      	bls.n	800e6ee <__hexnan+0x10e>
 800e684:	f1a8 0204 	sub.w	r2, r8, #4
 800e688:	4623      	mov	r3, r4
 800e68a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e68e:	f842 1f04 	str.w	r1, [r2, #4]!
 800e692:	429f      	cmp	r7, r3
 800e694:	d2f9      	bcs.n	800e68a <__hexnan+0xaa>
 800e696:	1b3b      	subs	r3, r7, r4
 800e698:	f023 0303 	bic.w	r3, r3, #3
 800e69c:	3304      	adds	r3, #4
 800e69e:	3401      	adds	r4, #1
 800e6a0:	3e03      	subs	r6, #3
 800e6a2:	42b4      	cmp	r4, r6
 800e6a4:	bf88      	it	hi
 800e6a6:	2304      	movhi	r3, #4
 800e6a8:	4443      	add	r3, r8
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	f843 2b04 	str.w	r2, [r3], #4
 800e6b0:	429f      	cmp	r7, r3
 800e6b2:	d2fb      	bcs.n	800e6ac <__hexnan+0xcc>
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	b91b      	cbnz	r3, 800e6c0 <__hexnan+0xe0>
 800e6b8:	4547      	cmp	r7, r8
 800e6ba:	d127      	bne.n	800e70c <__hexnan+0x12c>
 800e6bc:	2301      	movs	r3, #1
 800e6be:	603b      	str	r3, [r7, #0]
 800e6c0:	2005      	movs	r0, #5
 800e6c2:	e026      	b.n	800e712 <__hexnan+0x132>
 800e6c4:	3501      	adds	r5, #1
 800e6c6:	2d08      	cmp	r5, #8
 800e6c8:	f10b 0b01 	add.w	fp, fp, #1
 800e6cc:	dd06      	ble.n	800e6dc <__hexnan+0xfc>
 800e6ce:	4544      	cmp	r4, r8
 800e6d0:	d9c3      	bls.n	800e65a <__hexnan+0x7a>
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	f844 3c04 	str.w	r3, [r4, #-4]
 800e6d8:	2501      	movs	r5, #1
 800e6da:	3c04      	subs	r4, #4
 800e6dc:	6822      	ldr	r2, [r4, #0]
 800e6de:	f000 000f 	and.w	r0, r0, #15
 800e6e2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e6e6:	6022      	str	r2, [r4, #0]
 800e6e8:	e7b7      	b.n	800e65a <__hexnan+0x7a>
 800e6ea:	2508      	movs	r5, #8
 800e6ec:	e7b5      	b.n	800e65a <__hexnan+0x7a>
 800e6ee:	9b01      	ldr	r3, [sp, #4]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d0df      	beq.n	800e6b4 <__hexnan+0xd4>
 800e6f4:	f04f 32ff 	mov.w	r2, #4294967295
 800e6f8:	f1c3 0320 	rsb	r3, r3, #32
 800e6fc:	fa22 f303 	lsr.w	r3, r2, r3
 800e700:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e704:	401a      	ands	r2, r3
 800e706:	f846 2c04 	str.w	r2, [r6, #-4]
 800e70a:	e7d3      	b.n	800e6b4 <__hexnan+0xd4>
 800e70c:	3f04      	subs	r7, #4
 800e70e:	e7d1      	b.n	800e6b4 <__hexnan+0xd4>
 800e710:	2004      	movs	r0, #4
 800e712:	b007      	add	sp, #28
 800e714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e718 <_localeconv_r>:
 800e718:	4800      	ldr	r0, [pc, #0]	; (800e71c <_localeconv_r+0x4>)
 800e71a:	4770      	bx	lr
 800e71c:	20000a38 	.word	0x20000a38

0800e720 <__retarget_lock_init_recursive>:
 800e720:	4770      	bx	lr

0800e722 <__retarget_lock_acquire_recursive>:
 800e722:	4770      	bx	lr

0800e724 <__retarget_lock_release_recursive>:
 800e724:	4770      	bx	lr

0800e726 <__swhatbuf_r>:
 800e726:	b570      	push	{r4, r5, r6, lr}
 800e728:	460e      	mov	r6, r1
 800e72a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e72e:	2900      	cmp	r1, #0
 800e730:	b096      	sub	sp, #88	; 0x58
 800e732:	4614      	mov	r4, r2
 800e734:	461d      	mov	r5, r3
 800e736:	da08      	bge.n	800e74a <__swhatbuf_r+0x24>
 800e738:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e73c:	2200      	movs	r2, #0
 800e73e:	602a      	str	r2, [r5, #0]
 800e740:	061a      	lsls	r2, r3, #24
 800e742:	d410      	bmi.n	800e766 <__swhatbuf_r+0x40>
 800e744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e748:	e00e      	b.n	800e768 <__swhatbuf_r+0x42>
 800e74a:	466a      	mov	r2, sp
 800e74c:	f001 f8ea 	bl	800f924 <_fstat_r>
 800e750:	2800      	cmp	r0, #0
 800e752:	dbf1      	blt.n	800e738 <__swhatbuf_r+0x12>
 800e754:	9a01      	ldr	r2, [sp, #4]
 800e756:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e75a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e75e:	425a      	negs	r2, r3
 800e760:	415a      	adcs	r2, r3
 800e762:	602a      	str	r2, [r5, #0]
 800e764:	e7ee      	b.n	800e744 <__swhatbuf_r+0x1e>
 800e766:	2340      	movs	r3, #64	; 0x40
 800e768:	2000      	movs	r0, #0
 800e76a:	6023      	str	r3, [r4, #0]
 800e76c:	b016      	add	sp, #88	; 0x58
 800e76e:	bd70      	pop	{r4, r5, r6, pc}

0800e770 <__smakebuf_r>:
 800e770:	898b      	ldrh	r3, [r1, #12]
 800e772:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e774:	079d      	lsls	r5, r3, #30
 800e776:	4606      	mov	r6, r0
 800e778:	460c      	mov	r4, r1
 800e77a:	d507      	bpl.n	800e78c <__smakebuf_r+0x1c>
 800e77c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e780:	6023      	str	r3, [r4, #0]
 800e782:	6123      	str	r3, [r4, #16]
 800e784:	2301      	movs	r3, #1
 800e786:	6163      	str	r3, [r4, #20]
 800e788:	b002      	add	sp, #8
 800e78a:	bd70      	pop	{r4, r5, r6, pc}
 800e78c:	ab01      	add	r3, sp, #4
 800e78e:	466a      	mov	r2, sp
 800e790:	f7ff ffc9 	bl	800e726 <__swhatbuf_r>
 800e794:	9900      	ldr	r1, [sp, #0]
 800e796:	4605      	mov	r5, r0
 800e798:	4630      	mov	r0, r6
 800e79a:	f7fc fcff 	bl	800b19c <_malloc_r>
 800e79e:	b948      	cbnz	r0, 800e7b4 <__smakebuf_r+0x44>
 800e7a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7a4:	059a      	lsls	r2, r3, #22
 800e7a6:	d4ef      	bmi.n	800e788 <__smakebuf_r+0x18>
 800e7a8:	f023 0303 	bic.w	r3, r3, #3
 800e7ac:	f043 0302 	orr.w	r3, r3, #2
 800e7b0:	81a3      	strh	r3, [r4, #12]
 800e7b2:	e7e3      	b.n	800e77c <__smakebuf_r+0xc>
 800e7b4:	4b0d      	ldr	r3, [pc, #52]	; (800e7ec <__smakebuf_r+0x7c>)
 800e7b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800e7b8:	89a3      	ldrh	r3, [r4, #12]
 800e7ba:	6020      	str	r0, [r4, #0]
 800e7bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7c0:	81a3      	strh	r3, [r4, #12]
 800e7c2:	9b00      	ldr	r3, [sp, #0]
 800e7c4:	6163      	str	r3, [r4, #20]
 800e7c6:	9b01      	ldr	r3, [sp, #4]
 800e7c8:	6120      	str	r0, [r4, #16]
 800e7ca:	b15b      	cbz	r3, 800e7e4 <__smakebuf_r+0x74>
 800e7cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7d0:	4630      	mov	r0, r6
 800e7d2:	f001 f8b9 	bl	800f948 <_isatty_r>
 800e7d6:	b128      	cbz	r0, 800e7e4 <__smakebuf_r+0x74>
 800e7d8:	89a3      	ldrh	r3, [r4, #12]
 800e7da:	f023 0303 	bic.w	r3, r3, #3
 800e7de:	f043 0301 	orr.w	r3, r3, #1
 800e7e2:	81a3      	strh	r3, [r4, #12]
 800e7e4:	89a0      	ldrh	r0, [r4, #12]
 800e7e6:	4305      	orrs	r5, r0
 800e7e8:	81a5      	strh	r5, [r4, #12]
 800e7ea:	e7cd      	b.n	800e788 <__smakebuf_r+0x18>
 800e7ec:	0800de99 	.word	0x0800de99

0800e7f0 <__ascii_mbtowc>:
 800e7f0:	b082      	sub	sp, #8
 800e7f2:	b901      	cbnz	r1, 800e7f6 <__ascii_mbtowc+0x6>
 800e7f4:	a901      	add	r1, sp, #4
 800e7f6:	b142      	cbz	r2, 800e80a <__ascii_mbtowc+0x1a>
 800e7f8:	b14b      	cbz	r3, 800e80e <__ascii_mbtowc+0x1e>
 800e7fa:	7813      	ldrb	r3, [r2, #0]
 800e7fc:	600b      	str	r3, [r1, #0]
 800e7fe:	7812      	ldrb	r2, [r2, #0]
 800e800:	1e10      	subs	r0, r2, #0
 800e802:	bf18      	it	ne
 800e804:	2001      	movne	r0, #1
 800e806:	b002      	add	sp, #8
 800e808:	4770      	bx	lr
 800e80a:	4610      	mov	r0, r2
 800e80c:	e7fb      	b.n	800e806 <__ascii_mbtowc+0x16>
 800e80e:	f06f 0001 	mvn.w	r0, #1
 800e812:	e7f8      	b.n	800e806 <__ascii_mbtowc+0x16>

0800e814 <__malloc_lock>:
 800e814:	4801      	ldr	r0, [pc, #4]	; (800e81c <__malloc_lock+0x8>)
 800e816:	f7ff bf84 	b.w	800e722 <__retarget_lock_acquire_recursive>
 800e81a:	bf00      	nop
 800e81c:	2000b4ec 	.word	0x2000b4ec

0800e820 <__malloc_unlock>:
 800e820:	4801      	ldr	r0, [pc, #4]	; (800e828 <__malloc_unlock+0x8>)
 800e822:	f7ff bf7f 	b.w	800e724 <__retarget_lock_release_recursive>
 800e826:	bf00      	nop
 800e828:	2000b4ec 	.word	0x2000b4ec

0800e82c <_Balloc>:
 800e82c:	b570      	push	{r4, r5, r6, lr}
 800e82e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e830:	4604      	mov	r4, r0
 800e832:	460d      	mov	r5, r1
 800e834:	b976      	cbnz	r6, 800e854 <_Balloc+0x28>
 800e836:	2010      	movs	r0, #16
 800e838:	f7fc fc26 	bl	800b088 <malloc>
 800e83c:	4602      	mov	r2, r0
 800e83e:	6260      	str	r0, [r4, #36]	; 0x24
 800e840:	b920      	cbnz	r0, 800e84c <_Balloc+0x20>
 800e842:	4b18      	ldr	r3, [pc, #96]	; (800e8a4 <_Balloc+0x78>)
 800e844:	4818      	ldr	r0, [pc, #96]	; (800e8a8 <_Balloc+0x7c>)
 800e846:	2166      	movs	r1, #102	; 0x66
 800e848:	f001 f82c 	bl	800f8a4 <__assert_func>
 800e84c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e850:	6006      	str	r6, [r0, #0]
 800e852:	60c6      	str	r6, [r0, #12]
 800e854:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e856:	68f3      	ldr	r3, [r6, #12]
 800e858:	b183      	cbz	r3, 800e87c <_Balloc+0x50>
 800e85a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e85c:	68db      	ldr	r3, [r3, #12]
 800e85e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e862:	b9b8      	cbnz	r0, 800e894 <_Balloc+0x68>
 800e864:	2101      	movs	r1, #1
 800e866:	fa01 f605 	lsl.w	r6, r1, r5
 800e86a:	1d72      	adds	r2, r6, #5
 800e86c:	0092      	lsls	r2, r2, #2
 800e86e:	4620      	mov	r0, r4
 800e870:	f000 fc9d 	bl	800f1ae <_calloc_r>
 800e874:	b160      	cbz	r0, 800e890 <_Balloc+0x64>
 800e876:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e87a:	e00e      	b.n	800e89a <_Balloc+0x6e>
 800e87c:	2221      	movs	r2, #33	; 0x21
 800e87e:	2104      	movs	r1, #4
 800e880:	4620      	mov	r0, r4
 800e882:	f000 fc94 	bl	800f1ae <_calloc_r>
 800e886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e888:	60f0      	str	r0, [r6, #12]
 800e88a:	68db      	ldr	r3, [r3, #12]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d1e4      	bne.n	800e85a <_Balloc+0x2e>
 800e890:	2000      	movs	r0, #0
 800e892:	bd70      	pop	{r4, r5, r6, pc}
 800e894:	6802      	ldr	r2, [r0, #0]
 800e896:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e89a:	2300      	movs	r3, #0
 800e89c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e8a0:	e7f7      	b.n	800e892 <_Balloc+0x66>
 800e8a2:	bf00      	nop
 800e8a4:	080af03e 	.word	0x080af03e
 800e8a8:	080af1a0 	.word	0x080af1a0

0800e8ac <_Bfree>:
 800e8ac:	b570      	push	{r4, r5, r6, lr}
 800e8ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e8b0:	4605      	mov	r5, r0
 800e8b2:	460c      	mov	r4, r1
 800e8b4:	b976      	cbnz	r6, 800e8d4 <_Bfree+0x28>
 800e8b6:	2010      	movs	r0, #16
 800e8b8:	f7fc fbe6 	bl	800b088 <malloc>
 800e8bc:	4602      	mov	r2, r0
 800e8be:	6268      	str	r0, [r5, #36]	; 0x24
 800e8c0:	b920      	cbnz	r0, 800e8cc <_Bfree+0x20>
 800e8c2:	4b09      	ldr	r3, [pc, #36]	; (800e8e8 <_Bfree+0x3c>)
 800e8c4:	4809      	ldr	r0, [pc, #36]	; (800e8ec <_Bfree+0x40>)
 800e8c6:	218a      	movs	r1, #138	; 0x8a
 800e8c8:	f000 ffec 	bl	800f8a4 <__assert_func>
 800e8cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e8d0:	6006      	str	r6, [r0, #0]
 800e8d2:	60c6      	str	r6, [r0, #12]
 800e8d4:	b13c      	cbz	r4, 800e8e6 <_Bfree+0x3a>
 800e8d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e8d8:	6862      	ldr	r2, [r4, #4]
 800e8da:	68db      	ldr	r3, [r3, #12]
 800e8dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e8e0:	6021      	str	r1, [r4, #0]
 800e8e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e8e6:	bd70      	pop	{r4, r5, r6, pc}
 800e8e8:	080af03e 	.word	0x080af03e
 800e8ec:	080af1a0 	.word	0x080af1a0

0800e8f0 <__multadd>:
 800e8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8f4:	690d      	ldr	r5, [r1, #16]
 800e8f6:	4607      	mov	r7, r0
 800e8f8:	460c      	mov	r4, r1
 800e8fa:	461e      	mov	r6, r3
 800e8fc:	f101 0c14 	add.w	ip, r1, #20
 800e900:	2000      	movs	r0, #0
 800e902:	f8dc 3000 	ldr.w	r3, [ip]
 800e906:	b299      	uxth	r1, r3
 800e908:	fb02 6101 	mla	r1, r2, r1, r6
 800e90c:	0c1e      	lsrs	r6, r3, #16
 800e90e:	0c0b      	lsrs	r3, r1, #16
 800e910:	fb02 3306 	mla	r3, r2, r6, r3
 800e914:	b289      	uxth	r1, r1
 800e916:	3001      	adds	r0, #1
 800e918:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e91c:	4285      	cmp	r5, r0
 800e91e:	f84c 1b04 	str.w	r1, [ip], #4
 800e922:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e926:	dcec      	bgt.n	800e902 <__multadd+0x12>
 800e928:	b30e      	cbz	r6, 800e96e <__multadd+0x7e>
 800e92a:	68a3      	ldr	r3, [r4, #8]
 800e92c:	42ab      	cmp	r3, r5
 800e92e:	dc19      	bgt.n	800e964 <__multadd+0x74>
 800e930:	6861      	ldr	r1, [r4, #4]
 800e932:	4638      	mov	r0, r7
 800e934:	3101      	adds	r1, #1
 800e936:	f7ff ff79 	bl	800e82c <_Balloc>
 800e93a:	4680      	mov	r8, r0
 800e93c:	b928      	cbnz	r0, 800e94a <__multadd+0x5a>
 800e93e:	4602      	mov	r2, r0
 800e940:	4b0c      	ldr	r3, [pc, #48]	; (800e974 <__multadd+0x84>)
 800e942:	480d      	ldr	r0, [pc, #52]	; (800e978 <__multadd+0x88>)
 800e944:	21b5      	movs	r1, #181	; 0xb5
 800e946:	f000 ffad 	bl	800f8a4 <__assert_func>
 800e94a:	6922      	ldr	r2, [r4, #16]
 800e94c:	3202      	adds	r2, #2
 800e94e:	f104 010c 	add.w	r1, r4, #12
 800e952:	0092      	lsls	r2, r2, #2
 800e954:	300c      	adds	r0, #12
 800e956:	f7fc fb9f 	bl	800b098 <memcpy>
 800e95a:	4621      	mov	r1, r4
 800e95c:	4638      	mov	r0, r7
 800e95e:	f7ff ffa5 	bl	800e8ac <_Bfree>
 800e962:	4644      	mov	r4, r8
 800e964:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e968:	3501      	adds	r5, #1
 800e96a:	615e      	str	r6, [r3, #20]
 800e96c:	6125      	str	r5, [r4, #16]
 800e96e:	4620      	mov	r0, r4
 800e970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e974:	080af0b0 	.word	0x080af0b0
 800e978:	080af1a0 	.word	0x080af1a0

0800e97c <__s2b>:
 800e97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e980:	460c      	mov	r4, r1
 800e982:	4615      	mov	r5, r2
 800e984:	461f      	mov	r7, r3
 800e986:	2209      	movs	r2, #9
 800e988:	3308      	adds	r3, #8
 800e98a:	4606      	mov	r6, r0
 800e98c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e990:	2100      	movs	r1, #0
 800e992:	2201      	movs	r2, #1
 800e994:	429a      	cmp	r2, r3
 800e996:	db09      	blt.n	800e9ac <__s2b+0x30>
 800e998:	4630      	mov	r0, r6
 800e99a:	f7ff ff47 	bl	800e82c <_Balloc>
 800e99e:	b940      	cbnz	r0, 800e9b2 <__s2b+0x36>
 800e9a0:	4602      	mov	r2, r0
 800e9a2:	4b19      	ldr	r3, [pc, #100]	; (800ea08 <__s2b+0x8c>)
 800e9a4:	4819      	ldr	r0, [pc, #100]	; (800ea0c <__s2b+0x90>)
 800e9a6:	21ce      	movs	r1, #206	; 0xce
 800e9a8:	f000 ff7c 	bl	800f8a4 <__assert_func>
 800e9ac:	0052      	lsls	r2, r2, #1
 800e9ae:	3101      	adds	r1, #1
 800e9b0:	e7f0      	b.n	800e994 <__s2b+0x18>
 800e9b2:	9b08      	ldr	r3, [sp, #32]
 800e9b4:	6143      	str	r3, [r0, #20]
 800e9b6:	2d09      	cmp	r5, #9
 800e9b8:	f04f 0301 	mov.w	r3, #1
 800e9bc:	6103      	str	r3, [r0, #16]
 800e9be:	dd16      	ble.n	800e9ee <__s2b+0x72>
 800e9c0:	f104 0909 	add.w	r9, r4, #9
 800e9c4:	46c8      	mov	r8, r9
 800e9c6:	442c      	add	r4, r5
 800e9c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e9cc:	4601      	mov	r1, r0
 800e9ce:	3b30      	subs	r3, #48	; 0x30
 800e9d0:	220a      	movs	r2, #10
 800e9d2:	4630      	mov	r0, r6
 800e9d4:	f7ff ff8c 	bl	800e8f0 <__multadd>
 800e9d8:	45a0      	cmp	r8, r4
 800e9da:	d1f5      	bne.n	800e9c8 <__s2b+0x4c>
 800e9dc:	f1a5 0408 	sub.w	r4, r5, #8
 800e9e0:	444c      	add	r4, r9
 800e9e2:	1b2d      	subs	r5, r5, r4
 800e9e4:	1963      	adds	r3, r4, r5
 800e9e6:	42bb      	cmp	r3, r7
 800e9e8:	db04      	blt.n	800e9f4 <__s2b+0x78>
 800e9ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9ee:	340a      	adds	r4, #10
 800e9f0:	2509      	movs	r5, #9
 800e9f2:	e7f6      	b.n	800e9e2 <__s2b+0x66>
 800e9f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e9f8:	4601      	mov	r1, r0
 800e9fa:	3b30      	subs	r3, #48	; 0x30
 800e9fc:	220a      	movs	r2, #10
 800e9fe:	4630      	mov	r0, r6
 800ea00:	f7ff ff76 	bl	800e8f0 <__multadd>
 800ea04:	e7ee      	b.n	800e9e4 <__s2b+0x68>
 800ea06:	bf00      	nop
 800ea08:	080af0b0 	.word	0x080af0b0
 800ea0c:	080af1a0 	.word	0x080af1a0

0800ea10 <__hi0bits>:
 800ea10:	0c03      	lsrs	r3, r0, #16
 800ea12:	041b      	lsls	r3, r3, #16
 800ea14:	b9d3      	cbnz	r3, 800ea4c <__hi0bits+0x3c>
 800ea16:	0400      	lsls	r0, r0, #16
 800ea18:	2310      	movs	r3, #16
 800ea1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ea1e:	bf04      	itt	eq
 800ea20:	0200      	lsleq	r0, r0, #8
 800ea22:	3308      	addeq	r3, #8
 800ea24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ea28:	bf04      	itt	eq
 800ea2a:	0100      	lsleq	r0, r0, #4
 800ea2c:	3304      	addeq	r3, #4
 800ea2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ea32:	bf04      	itt	eq
 800ea34:	0080      	lsleq	r0, r0, #2
 800ea36:	3302      	addeq	r3, #2
 800ea38:	2800      	cmp	r0, #0
 800ea3a:	db05      	blt.n	800ea48 <__hi0bits+0x38>
 800ea3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ea40:	f103 0301 	add.w	r3, r3, #1
 800ea44:	bf08      	it	eq
 800ea46:	2320      	moveq	r3, #32
 800ea48:	4618      	mov	r0, r3
 800ea4a:	4770      	bx	lr
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	e7e4      	b.n	800ea1a <__hi0bits+0xa>

0800ea50 <__lo0bits>:
 800ea50:	6803      	ldr	r3, [r0, #0]
 800ea52:	f013 0207 	ands.w	r2, r3, #7
 800ea56:	4601      	mov	r1, r0
 800ea58:	d00b      	beq.n	800ea72 <__lo0bits+0x22>
 800ea5a:	07da      	lsls	r2, r3, #31
 800ea5c:	d423      	bmi.n	800eaa6 <__lo0bits+0x56>
 800ea5e:	0798      	lsls	r0, r3, #30
 800ea60:	bf49      	itett	mi
 800ea62:	085b      	lsrmi	r3, r3, #1
 800ea64:	089b      	lsrpl	r3, r3, #2
 800ea66:	2001      	movmi	r0, #1
 800ea68:	600b      	strmi	r3, [r1, #0]
 800ea6a:	bf5c      	itt	pl
 800ea6c:	600b      	strpl	r3, [r1, #0]
 800ea6e:	2002      	movpl	r0, #2
 800ea70:	4770      	bx	lr
 800ea72:	b298      	uxth	r0, r3
 800ea74:	b9a8      	cbnz	r0, 800eaa2 <__lo0bits+0x52>
 800ea76:	0c1b      	lsrs	r3, r3, #16
 800ea78:	2010      	movs	r0, #16
 800ea7a:	b2da      	uxtb	r2, r3
 800ea7c:	b90a      	cbnz	r2, 800ea82 <__lo0bits+0x32>
 800ea7e:	3008      	adds	r0, #8
 800ea80:	0a1b      	lsrs	r3, r3, #8
 800ea82:	071a      	lsls	r2, r3, #28
 800ea84:	bf04      	itt	eq
 800ea86:	091b      	lsreq	r3, r3, #4
 800ea88:	3004      	addeq	r0, #4
 800ea8a:	079a      	lsls	r2, r3, #30
 800ea8c:	bf04      	itt	eq
 800ea8e:	089b      	lsreq	r3, r3, #2
 800ea90:	3002      	addeq	r0, #2
 800ea92:	07da      	lsls	r2, r3, #31
 800ea94:	d403      	bmi.n	800ea9e <__lo0bits+0x4e>
 800ea96:	085b      	lsrs	r3, r3, #1
 800ea98:	f100 0001 	add.w	r0, r0, #1
 800ea9c:	d005      	beq.n	800eaaa <__lo0bits+0x5a>
 800ea9e:	600b      	str	r3, [r1, #0]
 800eaa0:	4770      	bx	lr
 800eaa2:	4610      	mov	r0, r2
 800eaa4:	e7e9      	b.n	800ea7a <__lo0bits+0x2a>
 800eaa6:	2000      	movs	r0, #0
 800eaa8:	4770      	bx	lr
 800eaaa:	2020      	movs	r0, #32
 800eaac:	4770      	bx	lr
	...

0800eab0 <__i2b>:
 800eab0:	b510      	push	{r4, lr}
 800eab2:	460c      	mov	r4, r1
 800eab4:	2101      	movs	r1, #1
 800eab6:	f7ff feb9 	bl	800e82c <_Balloc>
 800eaba:	4602      	mov	r2, r0
 800eabc:	b928      	cbnz	r0, 800eaca <__i2b+0x1a>
 800eabe:	4b05      	ldr	r3, [pc, #20]	; (800ead4 <__i2b+0x24>)
 800eac0:	4805      	ldr	r0, [pc, #20]	; (800ead8 <__i2b+0x28>)
 800eac2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800eac6:	f000 feed 	bl	800f8a4 <__assert_func>
 800eaca:	2301      	movs	r3, #1
 800eacc:	6144      	str	r4, [r0, #20]
 800eace:	6103      	str	r3, [r0, #16]
 800ead0:	bd10      	pop	{r4, pc}
 800ead2:	bf00      	nop
 800ead4:	080af0b0 	.word	0x080af0b0
 800ead8:	080af1a0 	.word	0x080af1a0

0800eadc <__multiply>:
 800eadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eae0:	4691      	mov	r9, r2
 800eae2:	690a      	ldr	r2, [r1, #16]
 800eae4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eae8:	429a      	cmp	r2, r3
 800eaea:	bfb8      	it	lt
 800eaec:	460b      	movlt	r3, r1
 800eaee:	460c      	mov	r4, r1
 800eaf0:	bfbc      	itt	lt
 800eaf2:	464c      	movlt	r4, r9
 800eaf4:	4699      	movlt	r9, r3
 800eaf6:	6927      	ldr	r7, [r4, #16]
 800eaf8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800eafc:	68a3      	ldr	r3, [r4, #8]
 800eafe:	6861      	ldr	r1, [r4, #4]
 800eb00:	eb07 060a 	add.w	r6, r7, sl
 800eb04:	42b3      	cmp	r3, r6
 800eb06:	b085      	sub	sp, #20
 800eb08:	bfb8      	it	lt
 800eb0a:	3101      	addlt	r1, #1
 800eb0c:	f7ff fe8e 	bl	800e82c <_Balloc>
 800eb10:	b930      	cbnz	r0, 800eb20 <__multiply+0x44>
 800eb12:	4602      	mov	r2, r0
 800eb14:	4b44      	ldr	r3, [pc, #272]	; (800ec28 <__multiply+0x14c>)
 800eb16:	4845      	ldr	r0, [pc, #276]	; (800ec2c <__multiply+0x150>)
 800eb18:	f240 115d 	movw	r1, #349	; 0x15d
 800eb1c:	f000 fec2 	bl	800f8a4 <__assert_func>
 800eb20:	f100 0514 	add.w	r5, r0, #20
 800eb24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800eb28:	462b      	mov	r3, r5
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	4543      	cmp	r3, r8
 800eb2e:	d321      	bcc.n	800eb74 <__multiply+0x98>
 800eb30:	f104 0314 	add.w	r3, r4, #20
 800eb34:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800eb38:	f109 0314 	add.w	r3, r9, #20
 800eb3c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800eb40:	9202      	str	r2, [sp, #8]
 800eb42:	1b3a      	subs	r2, r7, r4
 800eb44:	3a15      	subs	r2, #21
 800eb46:	f022 0203 	bic.w	r2, r2, #3
 800eb4a:	3204      	adds	r2, #4
 800eb4c:	f104 0115 	add.w	r1, r4, #21
 800eb50:	428f      	cmp	r7, r1
 800eb52:	bf38      	it	cc
 800eb54:	2204      	movcc	r2, #4
 800eb56:	9201      	str	r2, [sp, #4]
 800eb58:	9a02      	ldr	r2, [sp, #8]
 800eb5a:	9303      	str	r3, [sp, #12]
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	d80c      	bhi.n	800eb7a <__multiply+0x9e>
 800eb60:	2e00      	cmp	r6, #0
 800eb62:	dd03      	ble.n	800eb6c <__multiply+0x90>
 800eb64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d05a      	beq.n	800ec22 <__multiply+0x146>
 800eb6c:	6106      	str	r6, [r0, #16]
 800eb6e:	b005      	add	sp, #20
 800eb70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb74:	f843 2b04 	str.w	r2, [r3], #4
 800eb78:	e7d8      	b.n	800eb2c <__multiply+0x50>
 800eb7a:	f8b3 a000 	ldrh.w	sl, [r3]
 800eb7e:	f1ba 0f00 	cmp.w	sl, #0
 800eb82:	d024      	beq.n	800ebce <__multiply+0xf2>
 800eb84:	f104 0e14 	add.w	lr, r4, #20
 800eb88:	46a9      	mov	r9, r5
 800eb8a:	f04f 0c00 	mov.w	ip, #0
 800eb8e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800eb92:	f8d9 1000 	ldr.w	r1, [r9]
 800eb96:	fa1f fb82 	uxth.w	fp, r2
 800eb9a:	b289      	uxth	r1, r1
 800eb9c:	fb0a 110b 	mla	r1, sl, fp, r1
 800eba0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800eba4:	f8d9 2000 	ldr.w	r2, [r9]
 800eba8:	4461      	add	r1, ip
 800ebaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ebae:	fb0a c20b 	mla	r2, sl, fp, ip
 800ebb2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ebb6:	b289      	uxth	r1, r1
 800ebb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ebbc:	4577      	cmp	r7, lr
 800ebbe:	f849 1b04 	str.w	r1, [r9], #4
 800ebc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ebc6:	d8e2      	bhi.n	800eb8e <__multiply+0xb2>
 800ebc8:	9a01      	ldr	r2, [sp, #4]
 800ebca:	f845 c002 	str.w	ip, [r5, r2]
 800ebce:	9a03      	ldr	r2, [sp, #12]
 800ebd0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ebd4:	3304      	adds	r3, #4
 800ebd6:	f1b9 0f00 	cmp.w	r9, #0
 800ebda:	d020      	beq.n	800ec1e <__multiply+0x142>
 800ebdc:	6829      	ldr	r1, [r5, #0]
 800ebde:	f104 0c14 	add.w	ip, r4, #20
 800ebe2:	46ae      	mov	lr, r5
 800ebe4:	f04f 0a00 	mov.w	sl, #0
 800ebe8:	f8bc b000 	ldrh.w	fp, [ip]
 800ebec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ebf0:	fb09 220b 	mla	r2, r9, fp, r2
 800ebf4:	4492      	add	sl, r2
 800ebf6:	b289      	uxth	r1, r1
 800ebf8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ebfc:	f84e 1b04 	str.w	r1, [lr], #4
 800ec00:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ec04:	f8be 1000 	ldrh.w	r1, [lr]
 800ec08:	0c12      	lsrs	r2, r2, #16
 800ec0a:	fb09 1102 	mla	r1, r9, r2, r1
 800ec0e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ec12:	4567      	cmp	r7, ip
 800ec14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ec18:	d8e6      	bhi.n	800ebe8 <__multiply+0x10c>
 800ec1a:	9a01      	ldr	r2, [sp, #4]
 800ec1c:	50a9      	str	r1, [r5, r2]
 800ec1e:	3504      	adds	r5, #4
 800ec20:	e79a      	b.n	800eb58 <__multiply+0x7c>
 800ec22:	3e01      	subs	r6, #1
 800ec24:	e79c      	b.n	800eb60 <__multiply+0x84>
 800ec26:	bf00      	nop
 800ec28:	080af0b0 	.word	0x080af0b0
 800ec2c:	080af1a0 	.word	0x080af1a0

0800ec30 <__pow5mult>:
 800ec30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec34:	4615      	mov	r5, r2
 800ec36:	f012 0203 	ands.w	r2, r2, #3
 800ec3a:	4606      	mov	r6, r0
 800ec3c:	460f      	mov	r7, r1
 800ec3e:	d007      	beq.n	800ec50 <__pow5mult+0x20>
 800ec40:	4c25      	ldr	r4, [pc, #148]	; (800ecd8 <__pow5mult+0xa8>)
 800ec42:	3a01      	subs	r2, #1
 800ec44:	2300      	movs	r3, #0
 800ec46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ec4a:	f7ff fe51 	bl	800e8f0 <__multadd>
 800ec4e:	4607      	mov	r7, r0
 800ec50:	10ad      	asrs	r5, r5, #2
 800ec52:	d03d      	beq.n	800ecd0 <__pow5mult+0xa0>
 800ec54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ec56:	b97c      	cbnz	r4, 800ec78 <__pow5mult+0x48>
 800ec58:	2010      	movs	r0, #16
 800ec5a:	f7fc fa15 	bl	800b088 <malloc>
 800ec5e:	4602      	mov	r2, r0
 800ec60:	6270      	str	r0, [r6, #36]	; 0x24
 800ec62:	b928      	cbnz	r0, 800ec70 <__pow5mult+0x40>
 800ec64:	4b1d      	ldr	r3, [pc, #116]	; (800ecdc <__pow5mult+0xac>)
 800ec66:	481e      	ldr	r0, [pc, #120]	; (800ece0 <__pow5mult+0xb0>)
 800ec68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ec6c:	f000 fe1a 	bl	800f8a4 <__assert_func>
 800ec70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ec74:	6004      	str	r4, [r0, #0]
 800ec76:	60c4      	str	r4, [r0, #12]
 800ec78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ec7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ec80:	b94c      	cbnz	r4, 800ec96 <__pow5mult+0x66>
 800ec82:	f240 2171 	movw	r1, #625	; 0x271
 800ec86:	4630      	mov	r0, r6
 800ec88:	f7ff ff12 	bl	800eab0 <__i2b>
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ec92:	4604      	mov	r4, r0
 800ec94:	6003      	str	r3, [r0, #0]
 800ec96:	f04f 0900 	mov.w	r9, #0
 800ec9a:	07eb      	lsls	r3, r5, #31
 800ec9c:	d50a      	bpl.n	800ecb4 <__pow5mult+0x84>
 800ec9e:	4639      	mov	r1, r7
 800eca0:	4622      	mov	r2, r4
 800eca2:	4630      	mov	r0, r6
 800eca4:	f7ff ff1a 	bl	800eadc <__multiply>
 800eca8:	4639      	mov	r1, r7
 800ecaa:	4680      	mov	r8, r0
 800ecac:	4630      	mov	r0, r6
 800ecae:	f7ff fdfd 	bl	800e8ac <_Bfree>
 800ecb2:	4647      	mov	r7, r8
 800ecb4:	106d      	asrs	r5, r5, #1
 800ecb6:	d00b      	beq.n	800ecd0 <__pow5mult+0xa0>
 800ecb8:	6820      	ldr	r0, [r4, #0]
 800ecba:	b938      	cbnz	r0, 800eccc <__pow5mult+0x9c>
 800ecbc:	4622      	mov	r2, r4
 800ecbe:	4621      	mov	r1, r4
 800ecc0:	4630      	mov	r0, r6
 800ecc2:	f7ff ff0b 	bl	800eadc <__multiply>
 800ecc6:	6020      	str	r0, [r4, #0]
 800ecc8:	f8c0 9000 	str.w	r9, [r0]
 800eccc:	4604      	mov	r4, r0
 800ecce:	e7e4      	b.n	800ec9a <__pow5mult+0x6a>
 800ecd0:	4638      	mov	r0, r7
 800ecd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecd6:	bf00      	nop
 800ecd8:	080af2f0 	.word	0x080af2f0
 800ecdc:	080af03e 	.word	0x080af03e
 800ece0:	080af1a0 	.word	0x080af1a0

0800ece4 <__lshift>:
 800ece4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ece8:	460c      	mov	r4, r1
 800ecea:	6849      	ldr	r1, [r1, #4]
 800ecec:	6923      	ldr	r3, [r4, #16]
 800ecee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ecf2:	68a3      	ldr	r3, [r4, #8]
 800ecf4:	4607      	mov	r7, r0
 800ecf6:	4691      	mov	r9, r2
 800ecf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ecfc:	f108 0601 	add.w	r6, r8, #1
 800ed00:	42b3      	cmp	r3, r6
 800ed02:	db0b      	blt.n	800ed1c <__lshift+0x38>
 800ed04:	4638      	mov	r0, r7
 800ed06:	f7ff fd91 	bl	800e82c <_Balloc>
 800ed0a:	4605      	mov	r5, r0
 800ed0c:	b948      	cbnz	r0, 800ed22 <__lshift+0x3e>
 800ed0e:	4602      	mov	r2, r0
 800ed10:	4b2a      	ldr	r3, [pc, #168]	; (800edbc <__lshift+0xd8>)
 800ed12:	482b      	ldr	r0, [pc, #172]	; (800edc0 <__lshift+0xdc>)
 800ed14:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ed18:	f000 fdc4 	bl	800f8a4 <__assert_func>
 800ed1c:	3101      	adds	r1, #1
 800ed1e:	005b      	lsls	r3, r3, #1
 800ed20:	e7ee      	b.n	800ed00 <__lshift+0x1c>
 800ed22:	2300      	movs	r3, #0
 800ed24:	f100 0114 	add.w	r1, r0, #20
 800ed28:	f100 0210 	add.w	r2, r0, #16
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	4553      	cmp	r3, sl
 800ed30:	db37      	blt.n	800eda2 <__lshift+0xbe>
 800ed32:	6920      	ldr	r0, [r4, #16]
 800ed34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ed38:	f104 0314 	add.w	r3, r4, #20
 800ed3c:	f019 091f 	ands.w	r9, r9, #31
 800ed40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ed44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ed48:	d02f      	beq.n	800edaa <__lshift+0xc6>
 800ed4a:	f1c9 0e20 	rsb	lr, r9, #32
 800ed4e:	468a      	mov	sl, r1
 800ed50:	f04f 0c00 	mov.w	ip, #0
 800ed54:	681a      	ldr	r2, [r3, #0]
 800ed56:	fa02 f209 	lsl.w	r2, r2, r9
 800ed5a:	ea42 020c 	orr.w	r2, r2, ip
 800ed5e:	f84a 2b04 	str.w	r2, [sl], #4
 800ed62:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed66:	4298      	cmp	r0, r3
 800ed68:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ed6c:	d8f2      	bhi.n	800ed54 <__lshift+0x70>
 800ed6e:	1b03      	subs	r3, r0, r4
 800ed70:	3b15      	subs	r3, #21
 800ed72:	f023 0303 	bic.w	r3, r3, #3
 800ed76:	3304      	adds	r3, #4
 800ed78:	f104 0215 	add.w	r2, r4, #21
 800ed7c:	4290      	cmp	r0, r2
 800ed7e:	bf38      	it	cc
 800ed80:	2304      	movcc	r3, #4
 800ed82:	f841 c003 	str.w	ip, [r1, r3]
 800ed86:	f1bc 0f00 	cmp.w	ip, #0
 800ed8a:	d001      	beq.n	800ed90 <__lshift+0xac>
 800ed8c:	f108 0602 	add.w	r6, r8, #2
 800ed90:	3e01      	subs	r6, #1
 800ed92:	4638      	mov	r0, r7
 800ed94:	612e      	str	r6, [r5, #16]
 800ed96:	4621      	mov	r1, r4
 800ed98:	f7ff fd88 	bl	800e8ac <_Bfree>
 800ed9c:	4628      	mov	r0, r5
 800ed9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eda2:	f842 0f04 	str.w	r0, [r2, #4]!
 800eda6:	3301      	adds	r3, #1
 800eda8:	e7c1      	b.n	800ed2e <__lshift+0x4a>
 800edaa:	3904      	subs	r1, #4
 800edac:	f853 2b04 	ldr.w	r2, [r3], #4
 800edb0:	f841 2f04 	str.w	r2, [r1, #4]!
 800edb4:	4298      	cmp	r0, r3
 800edb6:	d8f9      	bhi.n	800edac <__lshift+0xc8>
 800edb8:	e7ea      	b.n	800ed90 <__lshift+0xac>
 800edba:	bf00      	nop
 800edbc:	080af0b0 	.word	0x080af0b0
 800edc0:	080af1a0 	.word	0x080af1a0

0800edc4 <__mcmp>:
 800edc4:	b530      	push	{r4, r5, lr}
 800edc6:	6902      	ldr	r2, [r0, #16]
 800edc8:	690c      	ldr	r4, [r1, #16]
 800edca:	1b12      	subs	r2, r2, r4
 800edcc:	d10e      	bne.n	800edec <__mcmp+0x28>
 800edce:	f100 0314 	add.w	r3, r0, #20
 800edd2:	3114      	adds	r1, #20
 800edd4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800edd8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800eddc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ede0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ede4:	42a5      	cmp	r5, r4
 800ede6:	d003      	beq.n	800edf0 <__mcmp+0x2c>
 800ede8:	d305      	bcc.n	800edf6 <__mcmp+0x32>
 800edea:	2201      	movs	r2, #1
 800edec:	4610      	mov	r0, r2
 800edee:	bd30      	pop	{r4, r5, pc}
 800edf0:	4283      	cmp	r3, r0
 800edf2:	d3f3      	bcc.n	800eddc <__mcmp+0x18>
 800edf4:	e7fa      	b.n	800edec <__mcmp+0x28>
 800edf6:	f04f 32ff 	mov.w	r2, #4294967295
 800edfa:	e7f7      	b.n	800edec <__mcmp+0x28>

0800edfc <__mdiff>:
 800edfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee00:	460c      	mov	r4, r1
 800ee02:	4606      	mov	r6, r0
 800ee04:	4611      	mov	r1, r2
 800ee06:	4620      	mov	r0, r4
 800ee08:	4690      	mov	r8, r2
 800ee0a:	f7ff ffdb 	bl	800edc4 <__mcmp>
 800ee0e:	1e05      	subs	r5, r0, #0
 800ee10:	d110      	bne.n	800ee34 <__mdiff+0x38>
 800ee12:	4629      	mov	r1, r5
 800ee14:	4630      	mov	r0, r6
 800ee16:	f7ff fd09 	bl	800e82c <_Balloc>
 800ee1a:	b930      	cbnz	r0, 800ee2a <__mdiff+0x2e>
 800ee1c:	4b3a      	ldr	r3, [pc, #232]	; (800ef08 <__mdiff+0x10c>)
 800ee1e:	4602      	mov	r2, r0
 800ee20:	f240 2132 	movw	r1, #562	; 0x232
 800ee24:	4839      	ldr	r0, [pc, #228]	; (800ef0c <__mdiff+0x110>)
 800ee26:	f000 fd3d 	bl	800f8a4 <__assert_func>
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ee30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee34:	bfa4      	itt	ge
 800ee36:	4643      	movge	r3, r8
 800ee38:	46a0      	movge	r8, r4
 800ee3a:	4630      	mov	r0, r6
 800ee3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ee40:	bfa6      	itte	ge
 800ee42:	461c      	movge	r4, r3
 800ee44:	2500      	movge	r5, #0
 800ee46:	2501      	movlt	r5, #1
 800ee48:	f7ff fcf0 	bl	800e82c <_Balloc>
 800ee4c:	b920      	cbnz	r0, 800ee58 <__mdiff+0x5c>
 800ee4e:	4b2e      	ldr	r3, [pc, #184]	; (800ef08 <__mdiff+0x10c>)
 800ee50:	4602      	mov	r2, r0
 800ee52:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ee56:	e7e5      	b.n	800ee24 <__mdiff+0x28>
 800ee58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ee5c:	6926      	ldr	r6, [r4, #16]
 800ee5e:	60c5      	str	r5, [r0, #12]
 800ee60:	f104 0914 	add.w	r9, r4, #20
 800ee64:	f108 0514 	add.w	r5, r8, #20
 800ee68:	f100 0e14 	add.w	lr, r0, #20
 800ee6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ee70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ee74:	f108 0210 	add.w	r2, r8, #16
 800ee78:	46f2      	mov	sl, lr
 800ee7a:	2100      	movs	r1, #0
 800ee7c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ee80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ee84:	fa1f f883 	uxth.w	r8, r3
 800ee88:	fa11 f18b 	uxtah	r1, r1, fp
 800ee8c:	0c1b      	lsrs	r3, r3, #16
 800ee8e:	eba1 0808 	sub.w	r8, r1, r8
 800ee92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ee96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ee9a:	fa1f f888 	uxth.w	r8, r8
 800ee9e:	1419      	asrs	r1, r3, #16
 800eea0:	454e      	cmp	r6, r9
 800eea2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800eea6:	f84a 3b04 	str.w	r3, [sl], #4
 800eeaa:	d8e7      	bhi.n	800ee7c <__mdiff+0x80>
 800eeac:	1b33      	subs	r3, r6, r4
 800eeae:	3b15      	subs	r3, #21
 800eeb0:	f023 0303 	bic.w	r3, r3, #3
 800eeb4:	3304      	adds	r3, #4
 800eeb6:	3415      	adds	r4, #21
 800eeb8:	42a6      	cmp	r6, r4
 800eeba:	bf38      	it	cc
 800eebc:	2304      	movcc	r3, #4
 800eebe:	441d      	add	r5, r3
 800eec0:	4473      	add	r3, lr
 800eec2:	469e      	mov	lr, r3
 800eec4:	462e      	mov	r6, r5
 800eec6:	4566      	cmp	r6, ip
 800eec8:	d30e      	bcc.n	800eee8 <__mdiff+0xec>
 800eeca:	f10c 0203 	add.w	r2, ip, #3
 800eece:	1b52      	subs	r2, r2, r5
 800eed0:	f022 0203 	bic.w	r2, r2, #3
 800eed4:	3d03      	subs	r5, #3
 800eed6:	45ac      	cmp	ip, r5
 800eed8:	bf38      	it	cc
 800eeda:	2200      	movcc	r2, #0
 800eedc:	441a      	add	r2, r3
 800eede:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800eee2:	b17b      	cbz	r3, 800ef04 <__mdiff+0x108>
 800eee4:	6107      	str	r7, [r0, #16]
 800eee6:	e7a3      	b.n	800ee30 <__mdiff+0x34>
 800eee8:	f856 8b04 	ldr.w	r8, [r6], #4
 800eeec:	fa11 f288 	uxtah	r2, r1, r8
 800eef0:	1414      	asrs	r4, r2, #16
 800eef2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800eef6:	b292      	uxth	r2, r2
 800eef8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800eefc:	f84e 2b04 	str.w	r2, [lr], #4
 800ef00:	1421      	asrs	r1, r4, #16
 800ef02:	e7e0      	b.n	800eec6 <__mdiff+0xca>
 800ef04:	3f01      	subs	r7, #1
 800ef06:	e7ea      	b.n	800eede <__mdiff+0xe2>
 800ef08:	080af0b0 	.word	0x080af0b0
 800ef0c:	080af1a0 	.word	0x080af1a0

0800ef10 <__ulp>:
 800ef10:	b082      	sub	sp, #8
 800ef12:	ed8d 0b00 	vstr	d0, [sp]
 800ef16:	9b01      	ldr	r3, [sp, #4]
 800ef18:	4912      	ldr	r1, [pc, #72]	; (800ef64 <__ulp+0x54>)
 800ef1a:	4019      	ands	r1, r3
 800ef1c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ef20:	2900      	cmp	r1, #0
 800ef22:	dd05      	ble.n	800ef30 <__ulp+0x20>
 800ef24:	2200      	movs	r2, #0
 800ef26:	460b      	mov	r3, r1
 800ef28:	ec43 2b10 	vmov	d0, r2, r3
 800ef2c:	b002      	add	sp, #8
 800ef2e:	4770      	bx	lr
 800ef30:	4249      	negs	r1, r1
 800ef32:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ef36:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ef3a:	f04f 0200 	mov.w	r2, #0
 800ef3e:	f04f 0300 	mov.w	r3, #0
 800ef42:	da04      	bge.n	800ef4e <__ulp+0x3e>
 800ef44:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ef48:	fa41 f300 	asr.w	r3, r1, r0
 800ef4c:	e7ec      	b.n	800ef28 <__ulp+0x18>
 800ef4e:	f1a0 0114 	sub.w	r1, r0, #20
 800ef52:	291e      	cmp	r1, #30
 800ef54:	bfda      	itte	le
 800ef56:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ef5a:	fa20 f101 	lsrle.w	r1, r0, r1
 800ef5e:	2101      	movgt	r1, #1
 800ef60:	460a      	mov	r2, r1
 800ef62:	e7e1      	b.n	800ef28 <__ulp+0x18>
 800ef64:	7ff00000 	.word	0x7ff00000

0800ef68 <__b2d>:
 800ef68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef6a:	6905      	ldr	r5, [r0, #16]
 800ef6c:	f100 0714 	add.w	r7, r0, #20
 800ef70:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ef74:	1f2e      	subs	r6, r5, #4
 800ef76:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ef7a:	4620      	mov	r0, r4
 800ef7c:	f7ff fd48 	bl	800ea10 <__hi0bits>
 800ef80:	f1c0 0320 	rsb	r3, r0, #32
 800ef84:	280a      	cmp	r0, #10
 800ef86:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f004 <__b2d+0x9c>
 800ef8a:	600b      	str	r3, [r1, #0]
 800ef8c:	dc14      	bgt.n	800efb8 <__b2d+0x50>
 800ef8e:	f1c0 0e0b 	rsb	lr, r0, #11
 800ef92:	fa24 f10e 	lsr.w	r1, r4, lr
 800ef96:	42b7      	cmp	r7, r6
 800ef98:	ea41 030c 	orr.w	r3, r1, ip
 800ef9c:	bf34      	ite	cc
 800ef9e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800efa2:	2100      	movcs	r1, #0
 800efa4:	3015      	adds	r0, #21
 800efa6:	fa04 f000 	lsl.w	r0, r4, r0
 800efaa:	fa21 f10e 	lsr.w	r1, r1, lr
 800efae:	ea40 0201 	orr.w	r2, r0, r1
 800efb2:	ec43 2b10 	vmov	d0, r2, r3
 800efb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efb8:	42b7      	cmp	r7, r6
 800efba:	bf3a      	itte	cc
 800efbc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800efc0:	f1a5 0608 	subcc.w	r6, r5, #8
 800efc4:	2100      	movcs	r1, #0
 800efc6:	380b      	subs	r0, #11
 800efc8:	d017      	beq.n	800effa <__b2d+0x92>
 800efca:	f1c0 0c20 	rsb	ip, r0, #32
 800efce:	fa04 f500 	lsl.w	r5, r4, r0
 800efd2:	42be      	cmp	r6, r7
 800efd4:	fa21 f40c 	lsr.w	r4, r1, ip
 800efd8:	ea45 0504 	orr.w	r5, r5, r4
 800efdc:	bf8c      	ite	hi
 800efde:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800efe2:	2400      	movls	r4, #0
 800efe4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800efe8:	fa01 f000 	lsl.w	r0, r1, r0
 800efec:	fa24 f40c 	lsr.w	r4, r4, ip
 800eff0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800eff4:	ea40 0204 	orr.w	r2, r0, r4
 800eff8:	e7db      	b.n	800efb2 <__b2d+0x4a>
 800effa:	ea44 030c 	orr.w	r3, r4, ip
 800effe:	460a      	mov	r2, r1
 800f000:	e7d7      	b.n	800efb2 <__b2d+0x4a>
 800f002:	bf00      	nop
 800f004:	3ff00000 	.word	0x3ff00000

0800f008 <__d2b>:
 800f008:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f00c:	4689      	mov	r9, r1
 800f00e:	2101      	movs	r1, #1
 800f010:	ec57 6b10 	vmov	r6, r7, d0
 800f014:	4690      	mov	r8, r2
 800f016:	f7ff fc09 	bl	800e82c <_Balloc>
 800f01a:	4604      	mov	r4, r0
 800f01c:	b930      	cbnz	r0, 800f02c <__d2b+0x24>
 800f01e:	4602      	mov	r2, r0
 800f020:	4b25      	ldr	r3, [pc, #148]	; (800f0b8 <__d2b+0xb0>)
 800f022:	4826      	ldr	r0, [pc, #152]	; (800f0bc <__d2b+0xb4>)
 800f024:	f240 310a 	movw	r1, #778	; 0x30a
 800f028:	f000 fc3c 	bl	800f8a4 <__assert_func>
 800f02c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f030:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f034:	bb35      	cbnz	r5, 800f084 <__d2b+0x7c>
 800f036:	2e00      	cmp	r6, #0
 800f038:	9301      	str	r3, [sp, #4]
 800f03a:	d028      	beq.n	800f08e <__d2b+0x86>
 800f03c:	4668      	mov	r0, sp
 800f03e:	9600      	str	r6, [sp, #0]
 800f040:	f7ff fd06 	bl	800ea50 <__lo0bits>
 800f044:	9900      	ldr	r1, [sp, #0]
 800f046:	b300      	cbz	r0, 800f08a <__d2b+0x82>
 800f048:	9a01      	ldr	r2, [sp, #4]
 800f04a:	f1c0 0320 	rsb	r3, r0, #32
 800f04e:	fa02 f303 	lsl.w	r3, r2, r3
 800f052:	430b      	orrs	r3, r1
 800f054:	40c2      	lsrs	r2, r0
 800f056:	6163      	str	r3, [r4, #20]
 800f058:	9201      	str	r2, [sp, #4]
 800f05a:	9b01      	ldr	r3, [sp, #4]
 800f05c:	61a3      	str	r3, [r4, #24]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	bf14      	ite	ne
 800f062:	2202      	movne	r2, #2
 800f064:	2201      	moveq	r2, #1
 800f066:	6122      	str	r2, [r4, #16]
 800f068:	b1d5      	cbz	r5, 800f0a0 <__d2b+0x98>
 800f06a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f06e:	4405      	add	r5, r0
 800f070:	f8c9 5000 	str.w	r5, [r9]
 800f074:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f078:	f8c8 0000 	str.w	r0, [r8]
 800f07c:	4620      	mov	r0, r4
 800f07e:	b003      	add	sp, #12
 800f080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f084:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f088:	e7d5      	b.n	800f036 <__d2b+0x2e>
 800f08a:	6161      	str	r1, [r4, #20]
 800f08c:	e7e5      	b.n	800f05a <__d2b+0x52>
 800f08e:	a801      	add	r0, sp, #4
 800f090:	f7ff fcde 	bl	800ea50 <__lo0bits>
 800f094:	9b01      	ldr	r3, [sp, #4]
 800f096:	6163      	str	r3, [r4, #20]
 800f098:	2201      	movs	r2, #1
 800f09a:	6122      	str	r2, [r4, #16]
 800f09c:	3020      	adds	r0, #32
 800f09e:	e7e3      	b.n	800f068 <__d2b+0x60>
 800f0a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f0a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f0a8:	f8c9 0000 	str.w	r0, [r9]
 800f0ac:	6918      	ldr	r0, [r3, #16]
 800f0ae:	f7ff fcaf 	bl	800ea10 <__hi0bits>
 800f0b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f0b6:	e7df      	b.n	800f078 <__d2b+0x70>
 800f0b8:	080af0b0 	.word	0x080af0b0
 800f0bc:	080af1a0 	.word	0x080af1a0

0800f0c0 <__ratio>:
 800f0c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c4:	4688      	mov	r8, r1
 800f0c6:	4669      	mov	r1, sp
 800f0c8:	4681      	mov	r9, r0
 800f0ca:	f7ff ff4d 	bl	800ef68 <__b2d>
 800f0ce:	a901      	add	r1, sp, #4
 800f0d0:	4640      	mov	r0, r8
 800f0d2:	ec55 4b10 	vmov	r4, r5, d0
 800f0d6:	f7ff ff47 	bl	800ef68 <__b2d>
 800f0da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f0de:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f0e2:	eba3 0c02 	sub.w	ip, r3, r2
 800f0e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f0ea:	1a9b      	subs	r3, r3, r2
 800f0ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f0f0:	ec51 0b10 	vmov	r0, r1, d0
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	bfd6      	itet	le
 800f0f8:	460a      	movle	r2, r1
 800f0fa:	462a      	movgt	r2, r5
 800f0fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f100:	468b      	mov	fp, r1
 800f102:	462f      	mov	r7, r5
 800f104:	bfd4      	ite	le
 800f106:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f10a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f10e:	4620      	mov	r0, r4
 800f110:	ee10 2a10 	vmov	r2, s0
 800f114:	465b      	mov	r3, fp
 800f116:	4639      	mov	r1, r7
 800f118:	f7f1 fb98 	bl	800084c <__aeabi_ddiv>
 800f11c:	ec41 0b10 	vmov	d0, r0, r1
 800f120:	b003      	add	sp, #12
 800f122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f126 <__copybits>:
 800f126:	3901      	subs	r1, #1
 800f128:	b570      	push	{r4, r5, r6, lr}
 800f12a:	1149      	asrs	r1, r1, #5
 800f12c:	6914      	ldr	r4, [r2, #16]
 800f12e:	3101      	adds	r1, #1
 800f130:	f102 0314 	add.w	r3, r2, #20
 800f134:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f138:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f13c:	1f05      	subs	r5, r0, #4
 800f13e:	42a3      	cmp	r3, r4
 800f140:	d30c      	bcc.n	800f15c <__copybits+0x36>
 800f142:	1aa3      	subs	r3, r4, r2
 800f144:	3b11      	subs	r3, #17
 800f146:	f023 0303 	bic.w	r3, r3, #3
 800f14a:	3211      	adds	r2, #17
 800f14c:	42a2      	cmp	r2, r4
 800f14e:	bf88      	it	hi
 800f150:	2300      	movhi	r3, #0
 800f152:	4418      	add	r0, r3
 800f154:	2300      	movs	r3, #0
 800f156:	4288      	cmp	r0, r1
 800f158:	d305      	bcc.n	800f166 <__copybits+0x40>
 800f15a:	bd70      	pop	{r4, r5, r6, pc}
 800f15c:	f853 6b04 	ldr.w	r6, [r3], #4
 800f160:	f845 6f04 	str.w	r6, [r5, #4]!
 800f164:	e7eb      	b.n	800f13e <__copybits+0x18>
 800f166:	f840 3b04 	str.w	r3, [r0], #4
 800f16a:	e7f4      	b.n	800f156 <__copybits+0x30>

0800f16c <__any_on>:
 800f16c:	f100 0214 	add.w	r2, r0, #20
 800f170:	6900      	ldr	r0, [r0, #16]
 800f172:	114b      	asrs	r3, r1, #5
 800f174:	4298      	cmp	r0, r3
 800f176:	b510      	push	{r4, lr}
 800f178:	db11      	blt.n	800f19e <__any_on+0x32>
 800f17a:	dd0a      	ble.n	800f192 <__any_on+0x26>
 800f17c:	f011 011f 	ands.w	r1, r1, #31
 800f180:	d007      	beq.n	800f192 <__any_on+0x26>
 800f182:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f186:	fa24 f001 	lsr.w	r0, r4, r1
 800f18a:	fa00 f101 	lsl.w	r1, r0, r1
 800f18e:	428c      	cmp	r4, r1
 800f190:	d10b      	bne.n	800f1aa <__any_on+0x3e>
 800f192:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f196:	4293      	cmp	r3, r2
 800f198:	d803      	bhi.n	800f1a2 <__any_on+0x36>
 800f19a:	2000      	movs	r0, #0
 800f19c:	bd10      	pop	{r4, pc}
 800f19e:	4603      	mov	r3, r0
 800f1a0:	e7f7      	b.n	800f192 <__any_on+0x26>
 800f1a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f1a6:	2900      	cmp	r1, #0
 800f1a8:	d0f5      	beq.n	800f196 <__any_on+0x2a>
 800f1aa:	2001      	movs	r0, #1
 800f1ac:	e7f6      	b.n	800f19c <__any_on+0x30>

0800f1ae <_calloc_r>:
 800f1ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1b0:	fba1 2402 	umull	r2, r4, r1, r2
 800f1b4:	b94c      	cbnz	r4, 800f1ca <_calloc_r+0x1c>
 800f1b6:	4611      	mov	r1, r2
 800f1b8:	9201      	str	r2, [sp, #4]
 800f1ba:	f7fb ffef 	bl	800b19c <_malloc_r>
 800f1be:	9a01      	ldr	r2, [sp, #4]
 800f1c0:	4605      	mov	r5, r0
 800f1c2:	b930      	cbnz	r0, 800f1d2 <_calloc_r+0x24>
 800f1c4:	4628      	mov	r0, r5
 800f1c6:	b003      	add	sp, #12
 800f1c8:	bd30      	pop	{r4, r5, pc}
 800f1ca:	220c      	movs	r2, #12
 800f1cc:	6002      	str	r2, [r0, #0]
 800f1ce:	2500      	movs	r5, #0
 800f1d0:	e7f8      	b.n	800f1c4 <_calloc_r+0x16>
 800f1d2:	4621      	mov	r1, r4
 800f1d4:	f7fb ff6e 	bl	800b0b4 <memset>
 800f1d8:	e7f4      	b.n	800f1c4 <_calloc_r+0x16>

0800f1da <_realloc_r>:
 800f1da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1de:	4680      	mov	r8, r0
 800f1e0:	4614      	mov	r4, r2
 800f1e2:	460e      	mov	r6, r1
 800f1e4:	b921      	cbnz	r1, 800f1f0 <_realloc_r+0x16>
 800f1e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1ea:	4611      	mov	r1, r2
 800f1ec:	f7fb bfd6 	b.w	800b19c <_malloc_r>
 800f1f0:	b92a      	cbnz	r2, 800f1fe <_realloc_r+0x24>
 800f1f2:	f7fb ff67 	bl	800b0c4 <_free_r>
 800f1f6:	4625      	mov	r5, r4
 800f1f8:	4628      	mov	r0, r5
 800f1fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1fe:	f000 fbdf 	bl	800f9c0 <_malloc_usable_size_r>
 800f202:	4284      	cmp	r4, r0
 800f204:	4607      	mov	r7, r0
 800f206:	d802      	bhi.n	800f20e <_realloc_r+0x34>
 800f208:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f20c:	d812      	bhi.n	800f234 <_realloc_r+0x5a>
 800f20e:	4621      	mov	r1, r4
 800f210:	4640      	mov	r0, r8
 800f212:	f7fb ffc3 	bl	800b19c <_malloc_r>
 800f216:	4605      	mov	r5, r0
 800f218:	2800      	cmp	r0, #0
 800f21a:	d0ed      	beq.n	800f1f8 <_realloc_r+0x1e>
 800f21c:	42bc      	cmp	r4, r7
 800f21e:	4622      	mov	r2, r4
 800f220:	4631      	mov	r1, r6
 800f222:	bf28      	it	cs
 800f224:	463a      	movcs	r2, r7
 800f226:	f7fb ff37 	bl	800b098 <memcpy>
 800f22a:	4631      	mov	r1, r6
 800f22c:	4640      	mov	r0, r8
 800f22e:	f7fb ff49 	bl	800b0c4 <_free_r>
 800f232:	e7e1      	b.n	800f1f8 <_realloc_r+0x1e>
 800f234:	4635      	mov	r5, r6
 800f236:	e7df      	b.n	800f1f8 <_realloc_r+0x1e>

0800f238 <__ssputs_r>:
 800f238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f23c:	688e      	ldr	r6, [r1, #8]
 800f23e:	429e      	cmp	r6, r3
 800f240:	4682      	mov	sl, r0
 800f242:	460c      	mov	r4, r1
 800f244:	4690      	mov	r8, r2
 800f246:	461f      	mov	r7, r3
 800f248:	d838      	bhi.n	800f2bc <__ssputs_r+0x84>
 800f24a:	898a      	ldrh	r2, [r1, #12]
 800f24c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f250:	d032      	beq.n	800f2b8 <__ssputs_r+0x80>
 800f252:	6825      	ldr	r5, [r4, #0]
 800f254:	6909      	ldr	r1, [r1, #16]
 800f256:	eba5 0901 	sub.w	r9, r5, r1
 800f25a:	6965      	ldr	r5, [r4, #20]
 800f25c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f260:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f264:	3301      	adds	r3, #1
 800f266:	444b      	add	r3, r9
 800f268:	106d      	asrs	r5, r5, #1
 800f26a:	429d      	cmp	r5, r3
 800f26c:	bf38      	it	cc
 800f26e:	461d      	movcc	r5, r3
 800f270:	0553      	lsls	r3, r2, #21
 800f272:	d531      	bpl.n	800f2d8 <__ssputs_r+0xa0>
 800f274:	4629      	mov	r1, r5
 800f276:	f7fb ff91 	bl	800b19c <_malloc_r>
 800f27a:	4606      	mov	r6, r0
 800f27c:	b950      	cbnz	r0, 800f294 <__ssputs_r+0x5c>
 800f27e:	230c      	movs	r3, #12
 800f280:	f8ca 3000 	str.w	r3, [sl]
 800f284:	89a3      	ldrh	r3, [r4, #12]
 800f286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f28a:	81a3      	strh	r3, [r4, #12]
 800f28c:	f04f 30ff 	mov.w	r0, #4294967295
 800f290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f294:	6921      	ldr	r1, [r4, #16]
 800f296:	464a      	mov	r2, r9
 800f298:	f7fb fefe 	bl	800b098 <memcpy>
 800f29c:	89a3      	ldrh	r3, [r4, #12]
 800f29e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f2a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2a6:	81a3      	strh	r3, [r4, #12]
 800f2a8:	6126      	str	r6, [r4, #16]
 800f2aa:	6165      	str	r5, [r4, #20]
 800f2ac:	444e      	add	r6, r9
 800f2ae:	eba5 0509 	sub.w	r5, r5, r9
 800f2b2:	6026      	str	r6, [r4, #0]
 800f2b4:	60a5      	str	r5, [r4, #8]
 800f2b6:	463e      	mov	r6, r7
 800f2b8:	42be      	cmp	r6, r7
 800f2ba:	d900      	bls.n	800f2be <__ssputs_r+0x86>
 800f2bc:	463e      	mov	r6, r7
 800f2be:	6820      	ldr	r0, [r4, #0]
 800f2c0:	4632      	mov	r2, r6
 800f2c2:	4641      	mov	r1, r8
 800f2c4:	f000 fb62 	bl	800f98c <memmove>
 800f2c8:	68a3      	ldr	r3, [r4, #8]
 800f2ca:	1b9b      	subs	r3, r3, r6
 800f2cc:	60a3      	str	r3, [r4, #8]
 800f2ce:	6823      	ldr	r3, [r4, #0]
 800f2d0:	4433      	add	r3, r6
 800f2d2:	6023      	str	r3, [r4, #0]
 800f2d4:	2000      	movs	r0, #0
 800f2d6:	e7db      	b.n	800f290 <__ssputs_r+0x58>
 800f2d8:	462a      	mov	r2, r5
 800f2da:	f7ff ff7e 	bl	800f1da <_realloc_r>
 800f2de:	4606      	mov	r6, r0
 800f2e0:	2800      	cmp	r0, #0
 800f2e2:	d1e1      	bne.n	800f2a8 <__ssputs_r+0x70>
 800f2e4:	6921      	ldr	r1, [r4, #16]
 800f2e6:	4650      	mov	r0, sl
 800f2e8:	f7fb feec 	bl	800b0c4 <_free_r>
 800f2ec:	e7c7      	b.n	800f27e <__ssputs_r+0x46>
	...

0800f2f0 <_svfiprintf_r>:
 800f2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2f4:	4698      	mov	r8, r3
 800f2f6:	898b      	ldrh	r3, [r1, #12]
 800f2f8:	061b      	lsls	r3, r3, #24
 800f2fa:	b09d      	sub	sp, #116	; 0x74
 800f2fc:	4607      	mov	r7, r0
 800f2fe:	460d      	mov	r5, r1
 800f300:	4614      	mov	r4, r2
 800f302:	d50e      	bpl.n	800f322 <_svfiprintf_r+0x32>
 800f304:	690b      	ldr	r3, [r1, #16]
 800f306:	b963      	cbnz	r3, 800f322 <_svfiprintf_r+0x32>
 800f308:	2140      	movs	r1, #64	; 0x40
 800f30a:	f7fb ff47 	bl	800b19c <_malloc_r>
 800f30e:	6028      	str	r0, [r5, #0]
 800f310:	6128      	str	r0, [r5, #16]
 800f312:	b920      	cbnz	r0, 800f31e <_svfiprintf_r+0x2e>
 800f314:	230c      	movs	r3, #12
 800f316:	603b      	str	r3, [r7, #0]
 800f318:	f04f 30ff 	mov.w	r0, #4294967295
 800f31c:	e0d1      	b.n	800f4c2 <_svfiprintf_r+0x1d2>
 800f31e:	2340      	movs	r3, #64	; 0x40
 800f320:	616b      	str	r3, [r5, #20]
 800f322:	2300      	movs	r3, #0
 800f324:	9309      	str	r3, [sp, #36]	; 0x24
 800f326:	2320      	movs	r3, #32
 800f328:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f32c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f330:	2330      	movs	r3, #48	; 0x30
 800f332:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f4dc <_svfiprintf_r+0x1ec>
 800f336:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f33a:	f04f 0901 	mov.w	r9, #1
 800f33e:	4623      	mov	r3, r4
 800f340:	469a      	mov	sl, r3
 800f342:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f346:	b10a      	cbz	r2, 800f34c <_svfiprintf_r+0x5c>
 800f348:	2a25      	cmp	r2, #37	; 0x25
 800f34a:	d1f9      	bne.n	800f340 <_svfiprintf_r+0x50>
 800f34c:	ebba 0b04 	subs.w	fp, sl, r4
 800f350:	d00b      	beq.n	800f36a <_svfiprintf_r+0x7a>
 800f352:	465b      	mov	r3, fp
 800f354:	4622      	mov	r2, r4
 800f356:	4629      	mov	r1, r5
 800f358:	4638      	mov	r0, r7
 800f35a:	f7ff ff6d 	bl	800f238 <__ssputs_r>
 800f35e:	3001      	adds	r0, #1
 800f360:	f000 80aa 	beq.w	800f4b8 <_svfiprintf_r+0x1c8>
 800f364:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f366:	445a      	add	r2, fp
 800f368:	9209      	str	r2, [sp, #36]	; 0x24
 800f36a:	f89a 3000 	ldrb.w	r3, [sl]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	f000 80a2 	beq.w	800f4b8 <_svfiprintf_r+0x1c8>
 800f374:	2300      	movs	r3, #0
 800f376:	f04f 32ff 	mov.w	r2, #4294967295
 800f37a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f37e:	f10a 0a01 	add.w	sl, sl, #1
 800f382:	9304      	str	r3, [sp, #16]
 800f384:	9307      	str	r3, [sp, #28]
 800f386:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f38a:	931a      	str	r3, [sp, #104]	; 0x68
 800f38c:	4654      	mov	r4, sl
 800f38e:	2205      	movs	r2, #5
 800f390:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f394:	4851      	ldr	r0, [pc, #324]	; (800f4dc <_svfiprintf_r+0x1ec>)
 800f396:	f7f0 ff23 	bl	80001e0 <memchr>
 800f39a:	9a04      	ldr	r2, [sp, #16]
 800f39c:	b9d8      	cbnz	r0, 800f3d6 <_svfiprintf_r+0xe6>
 800f39e:	06d0      	lsls	r0, r2, #27
 800f3a0:	bf44      	itt	mi
 800f3a2:	2320      	movmi	r3, #32
 800f3a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f3a8:	0711      	lsls	r1, r2, #28
 800f3aa:	bf44      	itt	mi
 800f3ac:	232b      	movmi	r3, #43	; 0x2b
 800f3ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f3b2:	f89a 3000 	ldrb.w	r3, [sl]
 800f3b6:	2b2a      	cmp	r3, #42	; 0x2a
 800f3b8:	d015      	beq.n	800f3e6 <_svfiprintf_r+0xf6>
 800f3ba:	9a07      	ldr	r2, [sp, #28]
 800f3bc:	4654      	mov	r4, sl
 800f3be:	2000      	movs	r0, #0
 800f3c0:	f04f 0c0a 	mov.w	ip, #10
 800f3c4:	4621      	mov	r1, r4
 800f3c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f3ca:	3b30      	subs	r3, #48	; 0x30
 800f3cc:	2b09      	cmp	r3, #9
 800f3ce:	d94e      	bls.n	800f46e <_svfiprintf_r+0x17e>
 800f3d0:	b1b0      	cbz	r0, 800f400 <_svfiprintf_r+0x110>
 800f3d2:	9207      	str	r2, [sp, #28]
 800f3d4:	e014      	b.n	800f400 <_svfiprintf_r+0x110>
 800f3d6:	eba0 0308 	sub.w	r3, r0, r8
 800f3da:	fa09 f303 	lsl.w	r3, r9, r3
 800f3de:	4313      	orrs	r3, r2
 800f3e0:	9304      	str	r3, [sp, #16]
 800f3e2:	46a2      	mov	sl, r4
 800f3e4:	e7d2      	b.n	800f38c <_svfiprintf_r+0x9c>
 800f3e6:	9b03      	ldr	r3, [sp, #12]
 800f3e8:	1d19      	adds	r1, r3, #4
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	9103      	str	r1, [sp, #12]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	bfbb      	ittet	lt
 800f3f2:	425b      	neglt	r3, r3
 800f3f4:	f042 0202 	orrlt.w	r2, r2, #2
 800f3f8:	9307      	strge	r3, [sp, #28]
 800f3fa:	9307      	strlt	r3, [sp, #28]
 800f3fc:	bfb8      	it	lt
 800f3fe:	9204      	strlt	r2, [sp, #16]
 800f400:	7823      	ldrb	r3, [r4, #0]
 800f402:	2b2e      	cmp	r3, #46	; 0x2e
 800f404:	d10c      	bne.n	800f420 <_svfiprintf_r+0x130>
 800f406:	7863      	ldrb	r3, [r4, #1]
 800f408:	2b2a      	cmp	r3, #42	; 0x2a
 800f40a:	d135      	bne.n	800f478 <_svfiprintf_r+0x188>
 800f40c:	9b03      	ldr	r3, [sp, #12]
 800f40e:	1d1a      	adds	r2, r3, #4
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	9203      	str	r2, [sp, #12]
 800f414:	2b00      	cmp	r3, #0
 800f416:	bfb8      	it	lt
 800f418:	f04f 33ff 	movlt.w	r3, #4294967295
 800f41c:	3402      	adds	r4, #2
 800f41e:	9305      	str	r3, [sp, #20]
 800f420:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f4ec <_svfiprintf_r+0x1fc>
 800f424:	7821      	ldrb	r1, [r4, #0]
 800f426:	2203      	movs	r2, #3
 800f428:	4650      	mov	r0, sl
 800f42a:	f7f0 fed9 	bl	80001e0 <memchr>
 800f42e:	b140      	cbz	r0, 800f442 <_svfiprintf_r+0x152>
 800f430:	2340      	movs	r3, #64	; 0x40
 800f432:	eba0 000a 	sub.w	r0, r0, sl
 800f436:	fa03 f000 	lsl.w	r0, r3, r0
 800f43a:	9b04      	ldr	r3, [sp, #16]
 800f43c:	4303      	orrs	r3, r0
 800f43e:	3401      	adds	r4, #1
 800f440:	9304      	str	r3, [sp, #16]
 800f442:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f446:	4826      	ldr	r0, [pc, #152]	; (800f4e0 <_svfiprintf_r+0x1f0>)
 800f448:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f44c:	2206      	movs	r2, #6
 800f44e:	f7f0 fec7 	bl	80001e0 <memchr>
 800f452:	2800      	cmp	r0, #0
 800f454:	d038      	beq.n	800f4c8 <_svfiprintf_r+0x1d8>
 800f456:	4b23      	ldr	r3, [pc, #140]	; (800f4e4 <_svfiprintf_r+0x1f4>)
 800f458:	bb1b      	cbnz	r3, 800f4a2 <_svfiprintf_r+0x1b2>
 800f45a:	9b03      	ldr	r3, [sp, #12]
 800f45c:	3307      	adds	r3, #7
 800f45e:	f023 0307 	bic.w	r3, r3, #7
 800f462:	3308      	adds	r3, #8
 800f464:	9303      	str	r3, [sp, #12]
 800f466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f468:	4433      	add	r3, r6
 800f46a:	9309      	str	r3, [sp, #36]	; 0x24
 800f46c:	e767      	b.n	800f33e <_svfiprintf_r+0x4e>
 800f46e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f472:	460c      	mov	r4, r1
 800f474:	2001      	movs	r0, #1
 800f476:	e7a5      	b.n	800f3c4 <_svfiprintf_r+0xd4>
 800f478:	2300      	movs	r3, #0
 800f47a:	3401      	adds	r4, #1
 800f47c:	9305      	str	r3, [sp, #20]
 800f47e:	4619      	mov	r1, r3
 800f480:	f04f 0c0a 	mov.w	ip, #10
 800f484:	4620      	mov	r0, r4
 800f486:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f48a:	3a30      	subs	r2, #48	; 0x30
 800f48c:	2a09      	cmp	r2, #9
 800f48e:	d903      	bls.n	800f498 <_svfiprintf_r+0x1a8>
 800f490:	2b00      	cmp	r3, #0
 800f492:	d0c5      	beq.n	800f420 <_svfiprintf_r+0x130>
 800f494:	9105      	str	r1, [sp, #20]
 800f496:	e7c3      	b.n	800f420 <_svfiprintf_r+0x130>
 800f498:	fb0c 2101 	mla	r1, ip, r1, r2
 800f49c:	4604      	mov	r4, r0
 800f49e:	2301      	movs	r3, #1
 800f4a0:	e7f0      	b.n	800f484 <_svfiprintf_r+0x194>
 800f4a2:	ab03      	add	r3, sp, #12
 800f4a4:	9300      	str	r3, [sp, #0]
 800f4a6:	462a      	mov	r2, r5
 800f4a8:	4b0f      	ldr	r3, [pc, #60]	; (800f4e8 <_svfiprintf_r+0x1f8>)
 800f4aa:	a904      	add	r1, sp, #16
 800f4ac:	4638      	mov	r0, r7
 800f4ae:	f7fb ff89 	bl	800b3c4 <_printf_float>
 800f4b2:	1c42      	adds	r2, r0, #1
 800f4b4:	4606      	mov	r6, r0
 800f4b6:	d1d6      	bne.n	800f466 <_svfiprintf_r+0x176>
 800f4b8:	89ab      	ldrh	r3, [r5, #12]
 800f4ba:	065b      	lsls	r3, r3, #25
 800f4bc:	f53f af2c 	bmi.w	800f318 <_svfiprintf_r+0x28>
 800f4c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f4c2:	b01d      	add	sp, #116	; 0x74
 800f4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4c8:	ab03      	add	r3, sp, #12
 800f4ca:	9300      	str	r3, [sp, #0]
 800f4cc:	462a      	mov	r2, r5
 800f4ce:	4b06      	ldr	r3, [pc, #24]	; (800f4e8 <_svfiprintf_r+0x1f8>)
 800f4d0:	a904      	add	r1, sp, #16
 800f4d2:	4638      	mov	r0, r7
 800f4d4:	f7fc fa1a 	bl	800b90c <_printf_i>
 800f4d8:	e7eb      	b.n	800f4b2 <_svfiprintf_r+0x1c2>
 800f4da:	bf00      	nop
 800f4dc:	080af2fc 	.word	0x080af2fc
 800f4e0:	080af306 	.word	0x080af306
 800f4e4:	0800b3c5 	.word	0x0800b3c5
 800f4e8:	0800f239 	.word	0x0800f239
 800f4ec:	080af302 	.word	0x080af302

0800f4f0 <__sfputc_r>:
 800f4f0:	6893      	ldr	r3, [r2, #8]
 800f4f2:	3b01      	subs	r3, #1
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	b410      	push	{r4}
 800f4f8:	6093      	str	r3, [r2, #8]
 800f4fa:	da08      	bge.n	800f50e <__sfputc_r+0x1e>
 800f4fc:	6994      	ldr	r4, [r2, #24]
 800f4fe:	42a3      	cmp	r3, r4
 800f500:	db01      	blt.n	800f506 <__sfputc_r+0x16>
 800f502:	290a      	cmp	r1, #10
 800f504:	d103      	bne.n	800f50e <__sfputc_r+0x1e>
 800f506:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f50a:	f7fd bca5 	b.w	800ce58 <__swbuf_r>
 800f50e:	6813      	ldr	r3, [r2, #0]
 800f510:	1c58      	adds	r0, r3, #1
 800f512:	6010      	str	r0, [r2, #0]
 800f514:	7019      	strb	r1, [r3, #0]
 800f516:	4608      	mov	r0, r1
 800f518:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f51c:	4770      	bx	lr

0800f51e <__sfputs_r>:
 800f51e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f520:	4606      	mov	r6, r0
 800f522:	460f      	mov	r7, r1
 800f524:	4614      	mov	r4, r2
 800f526:	18d5      	adds	r5, r2, r3
 800f528:	42ac      	cmp	r4, r5
 800f52a:	d101      	bne.n	800f530 <__sfputs_r+0x12>
 800f52c:	2000      	movs	r0, #0
 800f52e:	e007      	b.n	800f540 <__sfputs_r+0x22>
 800f530:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f534:	463a      	mov	r2, r7
 800f536:	4630      	mov	r0, r6
 800f538:	f7ff ffda 	bl	800f4f0 <__sfputc_r>
 800f53c:	1c43      	adds	r3, r0, #1
 800f53e:	d1f3      	bne.n	800f528 <__sfputs_r+0xa>
 800f540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f544 <_vfiprintf_r>:
 800f544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f548:	460d      	mov	r5, r1
 800f54a:	b09d      	sub	sp, #116	; 0x74
 800f54c:	4614      	mov	r4, r2
 800f54e:	4698      	mov	r8, r3
 800f550:	4606      	mov	r6, r0
 800f552:	b118      	cbz	r0, 800f55c <_vfiprintf_r+0x18>
 800f554:	6983      	ldr	r3, [r0, #24]
 800f556:	b90b      	cbnz	r3, 800f55c <_vfiprintf_r+0x18>
 800f558:	f7fe fcd2 	bl	800df00 <__sinit>
 800f55c:	4b89      	ldr	r3, [pc, #548]	; (800f784 <_vfiprintf_r+0x240>)
 800f55e:	429d      	cmp	r5, r3
 800f560:	d11b      	bne.n	800f59a <_vfiprintf_r+0x56>
 800f562:	6875      	ldr	r5, [r6, #4]
 800f564:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f566:	07d9      	lsls	r1, r3, #31
 800f568:	d405      	bmi.n	800f576 <_vfiprintf_r+0x32>
 800f56a:	89ab      	ldrh	r3, [r5, #12]
 800f56c:	059a      	lsls	r2, r3, #22
 800f56e:	d402      	bmi.n	800f576 <_vfiprintf_r+0x32>
 800f570:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f572:	f7ff f8d6 	bl	800e722 <__retarget_lock_acquire_recursive>
 800f576:	89ab      	ldrh	r3, [r5, #12]
 800f578:	071b      	lsls	r3, r3, #28
 800f57a:	d501      	bpl.n	800f580 <_vfiprintf_r+0x3c>
 800f57c:	692b      	ldr	r3, [r5, #16]
 800f57e:	b9eb      	cbnz	r3, 800f5bc <_vfiprintf_r+0x78>
 800f580:	4629      	mov	r1, r5
 800f582:	4630      	mov	r0, r6
 800f584:	f7fd fcba 	bl	800cefc <__swsetup_r>
 800f588:	b1c0      	cbz	r0, 800f5bc <_vfiprintf_r+0x78>
 800f58a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f58c:	07dc      	lsls	r4, r3, #31
 800f58e:	d50e      	bpl.n	800f5ae <_vfiprintf_r+0x6a>
 800f590:	f04f 30ff 	mov.w	r0, #4294967295
 800f594:	b01d      	add	sp, #116	; 0x74
 800f596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f59a:	4b7b      	ldr	r3, [pc, #492]	; (800f788 <_vfiprintf_r+0x244>)
 800f59c:	429d      	cmp	r5, r3
 800f59e:	d101      	bne.n	800f5a4 <_vfiprintf_r+0x60>
 800f5a0:	68b5      	ldr	r5, [r6, #8]
 800f5a2:	e7df      	b.n	800f564 <_vfiprintf_r+0x20>
 800f5a4:	4b79      	ldr	r3, [pc, #484]	; (800f78c <_vfiprintf_r+0x248>)
 800f5a6:	429d      	cmp	r5, r3
 800f5a8:	bf08      	it	eq
 800f5aa:	68f5      	ldreq	r5, [r6, #12]
 800f5ac:	e7da      	b.n	800f564 <_vfiprintf_r+0x20>
 800f5ae:	89ab      	ldrh	r3, [r5, #12]
 800f5b0:	0598      	lsls	r0, r3, #22
 800f5b2:	d4ed      	bmi.n	800f590 <_vfiprintf_r+0x4c>
 800f5b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f5b6:	f7ff f8b5 	bl	800e724 <__retarget_lock_release_recursive>
 800f5ba:	e7e9      	b.n	800f590 <_vfiprintf_r+0x4c>
 800f5bc:	2300      	movs	r3, #0
 800f5be:	9309      	str	r3, [sp, #36]	; 0x24
 800f5c0:	2320      	movs	r3, #32
 800f5c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f5c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f5ca:	2330      	movs	r3, #48	; 0x30
 800f5cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f790 <_vfiprintf_r+0x24c>
 800f5d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f5d4:	f04f 0901 	mov.w	r9, #1
 800f5d8:	4623      	mov	r3, r4
 800f5da:	469a      	mov	sl, r3
 800f5dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5e0:	b10a      	cbz	r2, 800f5e6 <_vfiprintf_r+0xa2>
 800f5e2:	2a25      	cmp	r2, #37	; 0x25
 800f5e4:	d1f9      	bne.n	800f5da <_vfiprintf_r+0x96>
 800f5e6:	ebba 0b04 	subs.w	fp, sl, r4
 800f5ea:	d00b      	beq.n	800f604 <_vfiprintf_r+0xc0>
 800f5ec:	465b      	mov	r3, fp
 800f5ee:	4622      	mov	r2, r4
 800f5f0:	4629      	mov	r1, r5
 800f5f2:	4630      	mov	r0, r6
 800f5f4:	f7ff ff93 	bl	800f51e <__sfputs_r>
 800f5f8:	3001      	adds	r0, #1
 800f5fa:	f000 80aa 	beq.w	800f752 <_vfiprintf_r+0x20e>
 800f5fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f600:	445a      	add	r2, fp
 800f602:	9209      	str	r2, [sp, #36]	; 0x24
 800f604:	f89a 3000 	ldrb.w	r3, [sl]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	f000 80a2 	beq.w	800f752 <_vfiprintf_r+0x20e>
 800f60e:	2300      	movs	r3, #0
 800f610:	f04f 32ff 	mov.w	r2, #4294967295
 800f614:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f618:	f10a 0a01 	add.w	sl, sl, #1
 800f61c:	9304      	str	r3, [sp, #16]
 800f61e:	9307      	str	r3, [sp, #28]
 800f620:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f624:	931a      	str	r3, [sp, #104]	; 0x68
 800f626:	4654      	mov	r4, sl
 800f628:	2205      	movs	r2, #5
 800f62a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f62e:	4858      	ldr	r0, [pc, #352]	; (800f790 <_vfiprintf_r+0x24c>)
 800f630:	f7f0 fdd6 	bl	80001e0 <memchr>
 800f634:	9a04      	ldr	r2, [sp, #16]
 800f636:	b9d8      	cbnz	r0, 800f670 <_vfiprintf_r+0x12c>
 800f638:	06d1      	lsls	r1, r2, #27
 800f63a:	bf44      	itt	mi
 800f63c:	2320      	movmi	r3, #32
 800f63e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f642:	0713      	lsls	r3, r2, #28
 800f644:	bf44      	itt	mi
 800f646:	232b      	movmi	r3, #43	; 0x2b
 800f648:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f64c:	f89a 3000 	ldrb.w	r3, [sl]
 800f650:	2b2a      	cmp	r3, #42	; 0x2a
 800f652:	d015      	beq.n	800f680 <_vfiprintf_r+0x13c>
 800f654:	9a07      	ldr	r2, [sp, #28]
 800f656:	4654      	mov	r4, sl
 800f658:	2000      	movs	r0, #0
 800f65a:	f04f 0c0a 	mov.w	ip, #10
 800f65e:	4621      	mov	r1, r4
 800f660:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f664:	3b30      	subs	r3, #48	; 0x30
 800f666:	2b09      	cmp	r3, #9
 800f668:	d94e      	bls.n	800f708 <_vfiprintf_r+0x1c4>
 800f66a:	b1b0      	cbz	r0, 800f69a <_vfiprintf_r+0x156>
 800f66c:	9207      	str	r2, [sp, #28]
 800f66e:	e014      	b.n	800f69a <_vfiprintf_r+0x156>
 800f670:	eba0 0308 	sub.w	r3, r0, r8
 800f674:	fa09 f303 	lsl.w	r3, r9, r3
 800f678:	4313      	orrs	r3, r2
 800f67a:	9304      	str	r3, [sp, #16]
 800f67c:	46a2      	mov	sl, r4
 800f67e:	e7d2      	b.n	800f626 <_vfiprintf_r+0xe2>
 800f680:	9b03      	ldr	r3, [sp, #12]
 800f682:	1d19      	adds	r1, r3, #4
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	9103      	str	r1, [sp, #12]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	bfbb      	ittet	lt
 800f68c:	425b      	neglt	r3, r3
 800f68e:	f042 0202 	orrlt.w	r2, r2, #2
 800f692:	9307      	strge	r3, [sp, #28]
 800f694:	9307      	strlt	r3, [sp, #28]
 800f696:	bfb8      	it	lt
 800f698:	9204      	strlt	r2, [sp, #16]
 800f69a:	7823      	ldrb	r3, [r4, #0]
 800f69c:	2b2e      	cmp	r3, #46	; 0x2e
 800f69e:	d10c      	bne.n	800f6ba <_vfiprintf_r+0x176>
 800f6a0:	7863      	ldrb	r3, [r4, #1]
 800f6a2:	2b2a      	cmp	r3, #42	; 0x2a
 800f6a4:	d135      	bne.n	800f712 <_vfiprintf_r+0x1ce>
 800f6a6:	9b03      	ldr	r3, [sp, #12]
 800f6a8:	1d1a      	adds	r2, r3, #4
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	9203      	str	r2, [sp, #12]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	bfb8      	it	lt
 800f6b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800f6b6:	3402      	adds	r4, #2
 800f6b8:	9305      	str	r3, [sp, #20]
 800f6ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f7a0 <_vfiprintf_r+0x25c>
 800f6be:	7821      	ldrb	r1, [r4, #0]
 800f6c0:	2203      	movs	r2, #3
 800f6c2:	4650      	mov	r0, sl
 800f6c4:	f7f0 fd8c 	bl	80001e0 <memchr>
 800f6c8:	b140      	cbz	r0, 800f6dc <_vfiprintf_r+0x198>
 800f6ca:	2340      	movs	r3, #64	; 0x40
 800f6cc:	eba0 000a 	sub.w	r0, r0, sl
 800f6d0:	fa03 f000 	lsl.w	r0, r3, r0
 800f6d4:	9b04      	ldr	r3, [sp, #16]
 800f6d6:	4303      	orrs	r3, r0
 800f6d8:	3401      	adds	r4, #1
 800f6da:	9304      	str	r3, [sp, #16]
 800f6dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6e0:	482c      	ldr	r0, [pc, #176]	; (800f794 <_vfiprintf_r+0x250>)
 800f6e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f6e6:	2206      	movs	r2, #6
 800f6e8:	f7f0 fd7a 	bl	80001e0 <memchr>
 800f6ec:	2800      	cmp	r0, #0
 800f6ee:	d03f      	beq.n	800f770 <_vfiprintf_r+0x22c>
 800f6f0:	4b29      	ldr	r3, [pc, #164]	; (800f798 <_vfiprintf_r+0x254>)
 800f6f2:	bb1b      	cbnz	r3, 800f73c <_vfiprintf_r+0x1f8>
 800f6f4:	9b03      	ldr	r3, [sp, #12]
 800f6f6:	3307      	adds	r3, #7
 800f6f8:	f023 0307 	bic.w	r3, r3, #7
 800f6fc:	3308      	adds	r3, #8
 800f6fe:	9303      	str	r3, [sp, #12]
 800f700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f702:	443b      	add	r3, r7
 800f704:	9309      	str	r3, [sp, #36]	; 0x24
 800f706:	e767      	b.n	800f5d8 <_vfiprintf_r+0x94>
 800f708:	fb0c 3202 	mla	r2, ip, r2, r3
 800f70c:	460c      	mov	r4, r1
 800f70e:	2001      	movs	r0, #1
 800f710:	e7a5      	b.n	800f65e <_vfiprintf_r+0x11a>
 800f712:	2300      	movs	r3, #0
 800f714:	3401      	adds	r4, #1
 800f716:	9305      	str	r3, [sp, #20]
 800f718:	4619      	mov	r1, r3
 800f71a:	f04f 0c0a 	mov.w	ip, #10
 800f71e:	4620      	mov	r0, r4
 800f720:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f724:	3a30      	subs	r2, #48	; 0x30
 800f726:	2a09      	cmp	r2, #9
 800f728:	d903      	bls.n	800f732 <_vfiprintf_r+0x1ee>
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d0c5      	beq.n	800f6ba <_vfiprintf_r+0x176>
 800f72e:	9105      	str	r1, [sp, #20]
 800f730:	e7c3      	b.n	800f6ba <_vfiprintf_r+0x176>
 800f732:	fb0c 2101 	mla	r1, ip, r1, r2
 800f736:	4604      	mov	r4, r0
 800f738:	2301      	movs	r3, #1
 800f73a:	e7f0      	b.n	800f71e <_vfiprintf_r+0x1da>
 800f73c:	ab03      	add	r3, sp, #12
 800f73e:	9300      	str	r3, [sp, #0]
 800f740:	462a      	mov	r2, r5
 800f742:	4b16      	ldr	r3, [pc, #88]	; (800f79c <_vfiprintf_r+0x258>)
 800f744:	a904      	add	r1, sp, #16
 800f746:	4630      	mov	r0, r6
 800f748:	f7fb fe3c 	bl	800b3c4 <_printf_float>
 800f74c:	4607      	mov	r7, r0
 800f74e:	1c78      	adds	r0, r7, #1
 800f750:	d1d6      	bne.n	800f700 <_vfiprintf_r+0x1bc>
 800f752:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f754:	07d9      	lsls	r1, r3, #31
 800f756:	d405      	bmi.n	800f764 <_vfiprintf_r+0x220>
 800f758:	89ab      	ldrh	r3, [r5, #12]
 800f75a:	059a      	lsls	r2, r3, #22
 800f75c:	d402      	bmi.n	800f764 <_vfiprintf_r+0x220>
 800f75e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f760:	f7fe ffe0 	bl	800e724 <__retarget_lock_release_recursive>
 800f764:	89ab      	ldrh	r3, [r5, #12]
 800f766:	065b      	lsls	r3, r3, #25
 800f768:	f53f af12 	bmi.w	800f590 <_vfiprintf_r+0x4c>
 800f76c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f76e:	e711      	b.n	800f594 <_vfiprintf_r+0x50>
 800f770:	ab03      	add	r3, sp, #12
 800f772:	9300      	str	r3, [sp, #0]
 800f774:	462a      	mov	r2, r5
 800f776:	4b09      	ldr	r3, [pc, #36]	; (800f79c <_vfiprintf_r+0x258>)
 800f778:	a904      	add	r1, sp, #16
 800f77a:	4630      	mov	r0, r6
 800f77c:	f7fc f8c6 	bl	800b90c <_printf_i>
 800f780:	e7e4      	b.n	800f74c <_vfiprintf_r+0x208>
 800f782:	bf00      	nop
 800f784:	080af0e4 	.word	0x080af0e4
 800f788:	080af104 	.word	0x080af104
 800f78c:	080af0c4 	.word	0x080af0c4
 800f790:	080af2fc 	.word	0x080af2fc
 800f794:	080af306 	.word	0x080af306
 800f798:	0800b3c5 	.word	0x0800b3c5
 800f79c:	0800f51f 	.word	0x0800f51f
 800f7a0:	080af302 	.word	0x080af302
 800f7a4:	00000000 	.word	0x00000000

0800f7a8 <nan>:
 800f7a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f7b0 <nan+0x8>
 800f7ac:	4770      	bx	lr
 800f7ae:	bf00      	nop
 800f7b0:	00000000 	.word	0x00000000
 800f7b4:	7ff80000 	.word	0x7ff80000

0800f7b8 <__sread>:
 800f7b8:	b510      	push	{r4, lr}
 800f7ba:	460c      	mov	r4, r1
 800f7bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7c0:	f000 f906 	bl	800f9d0 <_read_r>
 800f7c4:	2800      	cmp	r0, #0
 800f7c6:	bfab      	itete	ge
 800f7c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f7ca:	89a3      	ldrhlt	r3, [r4, #12]
 800f7cc:	181b      	addge	r3, r3, r0
 800f7ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f7d2:	bfac      	ite	ge
 800f7d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f7d6:	81a3      	strhlt	r3, [r4, #12]
 800f7d8:	bd10      	pop	{r4, pc}

0800f7da <__swrite>:
 800f7da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7de:	461f      	mov	r7, r3
 800f7e0:	898b      	ldrh	r3, [r1, #12]
 800f7e2:	05db      	lsls	r3, r3, #23
 800f7e4:	4605      	mov	r5, r0
 800f7e6:	460c      	mov	r4, r1
 800f7e8:	4616      	mov	r6, r2
 800f7ea:	d505      	bpl.n	800f7f8 <__swrite+0x1e>
 800f7ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7f0:	2302      	movs	r3, #2
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	f000 f8b8 	bl	800f968 <_lseek_r>
 800f7f8:	89a3      	ldrh	r3, [r4, #12]
 800f7fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f802:	81a3      	strh	r3, [r4, #12]
 800f804:	4632      	mov	r2, r6
 800f806:	463b      	mov	r3, r7
 800f808:	4628      	mov	r0, r5
 800f80a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f80e:	f000 b837 	b.w	800f880 <_write_r>

0800f812 <__sseek>:
 800f812:	b510      	push	{r4, lr}
 800f814:	460c      	mov	r4, r1
 800f816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f81a:	f000 f8a5 	bl	800f968 <_lseek_r>
 800f81e:	1c43      	adds	r3, r0, #1
 800f820:	89a3      	ldrh	r3, [r4, #12]
 800f822:	bf15      	itete	ne
 800f824:	6560      	strne	r0, [r4, #84]	; 0x54
 800f826:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f82a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f82e:	81a3      	strheq	r3, [r4, #12]
 800f830:	bf18      	it	ne
 800f832:	81a3      	strhne	r3, [r4, #12]
 800f834:	bd10      	pop	{r4, pc}

0800f836 <__sclose>:
 800f836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f83a:	f000 b851 	b.w	800f8e0 <_close_r>

0800f83e <strncmp>:
 800f83e:	b510      	push	{r4, lr}
 800f840:	b17a      	cbz	r2, 800f862 <strncmp+0x24>
 800f842:	4603      	mov	r3, r0
 800f844:	3901      	subs	r1, #1
 800f846:	1884      	adds	r4, r0, r2
 800f848:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f84c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f850:	4290      	cmp	r0, r2
 800f852:	d101      	bne.n	800f858 <strncmp+0x1a>
 800f854:	42a3      	cmp	r3, r4
 800f856:	d101      	bne.n	800f85c <strncmp+0x1e>
 800f858:	1a80      	subs	r0, r0, r2
 800f85a:	bd10      	pop	{r4, pc}
 800f85c:	2800      	cmp	r0, #0
 800f85e:	d1f3      	bne.n	800f848 <strncmp+0xa>
 800f860:	e7fa      	b.n	800f858 <strncmp+0x1a>
 800f862:	4610      	mov	r0, r2
 800f864:	e7f9      	b.n	800f85a <strncmp+0x1c>

0800f866 <__ascii_wctomb>:
 800f866:	b149      	cbz	r1, 800f87c <__ascii_wctomb+0x16>
 800f868:	2aff      	cmp	r2, #255	; 0xff
 800f86a:	bf85      	ittet	hi
 800f86c:	238a      	movhi	r3, #138	; 0x8a
 800f86e:	6003      	strhi	r3, [r0, #0]
 800f870:	700a      	strbls	r2, [r1, #0]
 800f872:	f04f 30ff 	movhi.w	r0, #4294967295
 800f876:	bf98      	it	ls
 800f878:	2001      	movls	r0, #1
 800f87a:	4770      	bx	lr
 800f87c:	4608      	mov	r0, r1
 800f87e:	4770      	bx	lr

0800f880 <_write_r>:
 800f880:	b538      	push	{r3, r4, r5, lr}
 800f882:	4d07      	ldr	r5, [pc, #28]	; (800f8a0 <_write_r+0x20>)
 800f884:	4604      	mov	r4, r0
 800f886:	4608      	mov	r0, r1
 800f888:	4611      	mov	r1, r2
 800f88a:	2200      	movs	r2, #0
 800f88c:	602a      	str	r2, [r5, #0]
 800f88e:	461a      	mov	r2, r3
 800f890:	f7f2 f9e8 	bl	8001c64 <_write>
 800f894:	1c43      	adds	r3, r0, #1
 800f896:	d102      	bne.n	800f89e <_write_r+0x1e>
 800f898:	682b      	ldr	r3, [r5, #0]
 800f89a:	b103      	cbz	r3, 800f89e <_write_r+0x1e>
 800f89c:	6023      	str	r3, [r4, #0]
 800f89e:	bd38      	pop	{r3, r4, r5, pc}
 800f8a0:	2000b4f0 	.word	0x2000b4f0

0800f8a4 <__assert_func>:
 800f8a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f8a6:	4614      	mov	r4, r2
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	4b09      	ldr	r3, [pc, #36]	; (800f8d0 <__assert_func+0x2c>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	4605      	mov	r5, r0
 800f8b0:	68d8      	ldr	r0, [r3, #12]
 800f8b2:	b14c      	cbz	r4, 800f8c8 <__assert_func+0x24>
 800f8b4:	4b07      	ldr	r3, [pc, #28]	; (800f8d4 <__assert_func+0x30>)
 800f8b6:	9100      	str	r1, [sp, #0]
 800f8b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f8bc:	4906      	ldr	r1, [pc, #24]	; (800f8d8 <__assert_func+0x34>)
 800f8be:	462b      	mov	r3, r5
 800f8c0:	f000 f81e 	bl	800f900 <fiprintf>
 800f8c4:	f000 f896 	bl	800f9f4 <abort>
 800f8c8:	4b04      	ldr	r3, [pc, #16]	; (800f8dc <__assert_func+0x38>)
 800f8ca:	461c      	mov	r4, r3
 800f8cc:	e7f3      	b.n	800f8b6 <__assert_func+0x12>
 800f8ce:	bf00      	nop
 800f8d0:	200008e0 	.word	0x200008e0
 800f8d4:	080af30d 	.word	0x080af30d
 800f8d8:	080af31a 	.word	0x080af31a
 800f8dc:	080af348 	.word	0x080af348

0800f8e0 <_close_r>:
 800f8e0:	b538      	push	{r3, r4, r5, lr}
 800f8e2:	4d06      	ldr	r5, [pc, #24]	; (800f8fc <_close_r+0x1c>)
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	4604      	mov	r4, r0
 800f8e8:	4608      	mov	r0, r1
 800f8ea:	602b      	str	r3, [r5, #0]
 800f8ec:	f000 fae0 	bl	800feb0 <_close>
 800f8f0:	1c43      	adds	r3, r0, #1
 800f8f2:	d102      	bne.n	800f8fa <_close_r+0x1a>
 800f8f4:	682b      	ldr	r3, [r5, #0]
 800f8f6:	b103      	cbz	r3, 800f8fa <_close_r+0x1a>
 800f8f8:	6023      	str	r3, [r4, #0]
 800f8fa:	bd38      	pop	{r3, r4, r5, pc}
 800f8fc:	2000b4f0 	.word	0x2000b4f0

0800f900 <fiprintf>:
 800f900:	b40e      	push	{r1, r2, r3}
 800f902:	b503      	push	{r0, r1, lr}
 800f904:	4601      	mov	r1, r0
 800f906:	ab03      	add	r3, sp, #12
 800f908:	4805      	ldr	r0, [pc, #20]	; (800f920 <fiprintf+0x20>)
 800f90a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f90e:	6800      	ldr	r0, [r0, #0]
 800f910:	9301      	str	r3, [sp, #4]
 800f912:	f7ff fe17 	bl	800f544 <_vfiprintf_r>
 800f916:	b002      	add	sp, #8
 800f918:	f85d eb04 	ldr.w	lr, [sp], #4
 800f91c:	b003      	add	sp, #12
 800f91e:	4770      	bx	lr
 800f920:	200008e0 	.word	0x200008e0

0800f924 <_fstat_r>:
 800f924:	b538      	push	{r3, r4, r5, lr}
 800f926:	4d07      	ldr	r5, [pc, #28]	; (800f944 <_fstat_r+0x20>)
 800f928:	2300      	movs	r3, #0
 800f92a:	4604      	mov	r4, r0
 800f92c:	4608      	mov	r0, r1
 800f92e:	4611      	mov	r1, r2
 800f930:	602b      	str	r3, [r5, #0]
 800f932:	f000 fac5 	bl	800fec0 <_fstat>
 800f936:	1c43      	adds	r3, r0, #1
 800f938:	d102      	bne.n	800f940 <_fstat_r+0x1c>
 800f93a:	682b      	ldr	r3, [r5, #0]
 800f93c:	b103      	cbz	r3, 800f940 <_fstat_r+0x1c>
 800f93e:	6023      	str	r3, [r4, #0]
 800f940:	bd38      	pop	{r3, r4, r5, pc}
 800f942:	bf00      	nop
 800f944:	2000b4f0 	.word	0x2000b4f0

0800f948 <_isatty_r>:
 800f948:	b538      	push	{r3, r4, r5, lr}
 800f94a:	4d06      	ldr	r5, [pc, #24]	; (800f964 <_isatty_r+0x1c>)
 800f94c:	2300      	movs	r3, #0
 800f94e:	4604      	mov	r4, r0
 800f950:	4608      	mov	r0, r1
 800f952:	602b      	str	r3, [r5, #0]
 800f954:	f000 fac4 	bl	800fee0 <_isatty>
 800f958:	1c43      	adds	r3, r0, #1
 800f95a:	d102      	bne.n	800f962 <_isatty_r+0x1a>
 800f95c:	682b      	ldr	r3, [r5, #0]
 800f95e:	b103      	cbz	r3, 800f962 <_isatty_r+0x1a>
 800f960:	6023      	str	r3, [r4, #0]
 800f962:	bd38      	pop	{r3, r4, r5, pc}
 800f964:	2000b4f0 	.word	0x2000b4f0

0800f968 <_lseek_r>:
 800f968:	b538      	push	{r3, r4, r5, lr}
 800f96a:	4d07      	ldr	r5, [pc, #28]	; (800f988 <_lseek_r+0x20>)
 800f96c:	4604      	mov	r4, r0
 800f96e:	4608      	mov	r0, r1
 800f970:	4611      	mov	r1, r2
 800f972:	2200      	movs	r2, #0
 800f974:	602a      	str	r2, [r5, #0]
 800f976:	461a      	mov	r2, r3
 800f978:	f000 fac2 	bl	800ff00 <_lseek>
 800f97c:	1c43      	adds	r3, r0, #1
 800f97e:	d102      	bne.n	800f986 <_lseek_r+0x1e>
 800f980:	682b      	ldr	r3, [r5, #0]
 800f982:	b103      	cbz	r3, 800f986 <_lseek_r+0x1e>
 800f984:	6023      	str	r3, [r4, #0]
 800f986:	bd38      	pop	{r3, r4, r5, pc}
 800f988:	2000b4f0 	.word	0x2000b4f0

0800f98c <memmove>:
 800f98c:	4288      	cmp	r0, r1
 800f98e:	b510      	push	{r4, lr}
 800f990:	eb01 0402 	add.w	r4, r1, r2
 800f994:	d902      	bls.n	800f99c <memmove+0x10>
 800f996:	4284      	cmp	r4, r0
 800f998:	4623      	mov	r3, r4
 800f99a:	d807      	bhi.n	800f9ac <memmove+0x20>
 800f99c:	1e43      	subs	r3, r0, #1
 800f99e:	42a1      	cmp	r1, r4
 800f9a0:	d008      	beq.n	800f9b4 <memmove+0x28>
 800f9a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f9a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f9aa:	e7f8      	b.n	800f99e <memmove+0x12>
 800f9ac:	4402      	add	r2, r0
 800f9ae:	4601      	mov	r1, r0
 800f9b0:	428a      	cmp	r2, r1
 800f9b2:	d100      	bne.n	800f9b6 <memmove+0x2a>
 800f9b4:	bd10      	pop	{r4, pc}
 800f9b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f9ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f9be:	e7f7      	b.n	800f9b0 <memmove+0x24>

0800f9c0 <_malloc_usable_size_r>:
 800f9c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9c4:	1f18      	subs	r0, r3, #4
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	bfbc      	itt	lt
 800f9ca:	580b      	ldrlt	r3, [r1, r0]
 800f9cc:	18c0      	addlt	r0, r0, r3
 800f9ce:	4770      	bx	lr

0800f9d0 <_read_r>:
 800f9d0:	b538      	push	{r3, r4, r5, lr}
 800f9d2:	4d07      	ldr	r5, [pc, #28]	; (800f9f0 <_read_r+0x20>)
 800f9d4:	4604      	mov	r4, r0
 800f9d6:	4608      	mov	r0, r1
 800f9d8:	4611      	mov	r1, r2
 800f9da:	2200      	movs	r2, #0
 800f9dc:	602a      	str	r2, [r5, #0]
 800f9de:	461a      	mov	r2, r3
 800f9e0:	f000 fa96 	bl	800ff10 <_read>
 800f9e4:	1c43      	adds	r3, r0, #1
 800f9e6:	d102      	bne.n	800f9ee <_read_r+0x1e>
 800f9e8:	682b      	ldr	r3, [r5, #0]
 800f9ea:	b103      	cbz	r3, 800f9ee <_read_r+0x1e>
 800f9ec:	6023      	str	r3, [r4, #0]
 800f9ee:	bd38      	pop	{r3, r4, r5, pc}
 800f9f0:	2000b4f0 	.word	0x2000b4f0

0800f9f4 <abort>:
 800f9f4:	b508      	push	{r3, lr}
 800f9f6:	2006      	movs	r0, #6
 800f9f8:	f000 f82c 	bl	800fa54 <raise>
 800f9fc:	2001      	movs	r0, #1
 800f9fe:	f000 fa8f 	bl	800ff20 <_exit>

0800fa02 <_raise_r>:
 800fa02:	291f      	cmp	r1, #31
 800fa04:	b538      	push	{r3, r4, r5, lr}
 800fa06:	4604      	mov	r4, r0
 800fa08:	460d      	mov	r5, r1
 800fa0a:	d904      	bls.n	800fa16 <_raise_r+0x14>
 800fa0c:	2316      	movs	r3, #22
 800fa0e:	6003      	str	r3, [r0, #0]
 800fa10:	f04f 30ff 	mov.w	r0, #4294967295
 800fa14:	bd38      	pop	{r3, r4, r5, pc}
 800fa16:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fa18:	b112      	cbz	r2, 800fa20 <_raise_r+0x1e>
 800fa1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa1e:	b94b      	cbnz	r3, 800fa34 <_raise_r+0x32>
 800fa20:	4620      	mov	r0, r4
 800fa22:	f000 f831 	bl	800fa88 <_getpid_r>
 800fa26:	462a      	mov	r2, r5
 800fa28:	4601      	mov	r1, r0
 800fa2a:	4620      	mov	r0, r4
 800fa2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa30:	f000 b818 	b.w	800fa64 <_kill_r>
 800fa34:	2b01      	cmp	r3, #1
 800fa36:	d00a      	beq.n	800fa4e <_raise_r+0x4c>
 800fa38:	1c59      	adds	r1, r3, #1
 800fa3a:	d103      	bne.n	800fa44 <_raise_r+0x42>
 800fa3c:	2316      	movs	r3, #22
 800fa3e:	6003      	str	r3, [r0, #0]
 800fa40:	2001      	movs	r0, #1
 800fa42:	e7e7      	b.n	800fa14 <_raise_r+0x12>
 800fa44:	2400      	movs	r4, #0
 800fa46:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fa4a:	4628      	mov	r0, r5
 800fa4c:	4798      	blx	r3
 800fa4e:	2000      	movs	r0, #0
 800fa50:	e7e0      	b.n	800fa14 <_raise_r+0x12>
	...

0800fa54 <raise>:
 800fa54:	4b02      	ldr	r3, [pc, #8]	; (800fa60 <raise+0xc>)
 800fa56:	4601      	mov	r1, r0
 800fa58:	6818      	ldr	r0, [r3, #0]
 800fa5a:	f7ff bfd2 	b.w	800fa02 <_raise_r>
 800fa5e:	bf00      	nop
 800fa60:	200008e0 	.word	0x200008e0

0800fa64 <_kill_r>:
 800fa64:	b538      	push	{r3, r4, r5, lr}
 800fa66:	4d07      	ldr	r5, [pc, #28]	; (800fa84 <_kill_r+0x20>)
 800fa68:	2300      	movs	r3, #0
 800fa6a:	4604      	mov	r4, r0
 800fa6c:	4608      	mov	r0, r1
 800fa6e:	4611      	mov	r1, r2
 800fa70:	602b      	str	r3, [r5, #0]
 800fa72:	f000 fa3d 	bl	800fef0 <_kill>
 800fa76:	1c43      	adds	r3, r0, #1
 800fa78:	d102      	bne.n	800fa80 <_kill_r+0x1c>
 800fa7a:	682b      	ldr	r3, [r5, #0]
 800fa7c:	b103      	cbz	r3, 800fa80 <_kill_r+0x1c>
 800fa7e:	6023      	str	r3, [r4, #0]
 800fa80:	bd38      	pop	{r3, r4, r5, pc}
 800fa82:	bf00      	nop
 800fa84:	2000b4f0 	.word	0x2000b4f0

0800fa88 <_getpid_r>:
 800fa88:	f000 ba22 	b.w	800fed0 <_getpid>

0800fa8c <sqrt>:
 800fa8c:	b538      	push	{r3, r4, r5, lr}
 800fa8e:	ed2d 8b02 	vpush	{d8}
 800fa92:	ec55 4b10 	vmov	r4, r5, d0
 800fa96:	f000 f85b 	bl	800fb50 <__ieee754_sqrt>
 800fa9a:	4622      	mov	r2, r4
 800fa9c:	462b      	mov	r3, r5
 800fa9e:	4620      	mov	r0, r4
 800faa0:	4629      	mov	r1, r5
 800faa2:	eeb0 8a40 	vmov.f32	s16, s0
 800faa6:	eef0 8a60 	vmov.f32	s17, s1
 800faaa:	f7f1 f83f 	bl	8000b2c <__aeabi_dcmpun>
 800faae:	b990      	cbnz	r0, 800fad6 <sqrt+0x4a>
 800fab0:	2200      	movs	r2, #0
 800fab2:	2300      	movs	r3, #0
 800fab4:	4620      	mov	r0, r4
 800fab6:	4629      	mov	r1, r5
 800fab8:	f7f1 f810 	bl	8000adc <__aeabi_dcmplt>
 800fabc:	b158      	cbz	r0, 800fad6 <sqrt+0x4a>
 800fabe:	f7fb fab9 	bl	800b034 <__errno>
 800fac2:	2321      	movs	r3, #33	; 0x21
 800fac4:	6003      	str	r3, [r0, #0]
 800fac6:	2200      	movs	r2, #0
 800fac8:	2300      	movs	r3, #0
 800faca:	4610      	mov	r0, r2
 800facc:	4619      	mov	r1, r3
 800face:	f7f0 febd 	bl	800084c <__aeabi_ddiv>
 800fad2:	ec41 0b18 	vmov	d8, r0, r1
 800fad6:	eeb0 0a48 	vmov.f32	s0, s16
 800fada:	eef0 0a68 	vmov.f32	s1, s17
 800fade:	ecbd 8b02 	vpop	{d8}
 800fae2:	bd38      	pop	{r3, r4, r5, pc}

0800fae4 <expf>:
 800fae4:	b508      	push	{r3, lr}
 800fae6:	ed2d 8b02 	vpush	{d8}
 800faea:	eef0 8a40 	vmov.f32	s17, s0
 800faee:	f000 f8e1 	bl	800fcb4 <__ieee754_expf>
 800faf2:	eeb0 8a40 	vmov.f32	s16, s0
 800faf6:	eeb0 0a68 	vmov.f32	s0, s17
 800fafa:	f000 f9cb 	bl	800fe94 <finitef>
 800fafe:	b160      	cbz	r0, 800fb1a <expf+0x36>
 800fb00:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800fb40 <expf+0x5c>
 800fb04:	eef4 8ae7 	vcmpe.f32	s17, s15
 800fb08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb0c:	dd0a      	ble.n	800fb24 <expf+0x40>
 800fb0e:	f7fb fa91 	bl	800b034 <__errno>
 800fb12:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800fb44 <expf+0x60>
 800fb16:	2322      	movs	r3, #34	; 0x22
 800fb18:	6003      	str	r3, [r0, #0]
 800fb1a:	eeb0 0a48 	vmov.f32	s0, s16
 800fb1e:	ecbd 8b02 	vpop	{d8}
 800fb22:	bd08      	pop	{r3, pc}
 800fb24:	eddf 7a08 	vldr	s15, [pc, #32]	; 800fb48 <expf+0x64>
 800fb28:	eef4 8ae7 	vcmpe.f32	s17, s15
 800fb2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb30:	d5f3      	bpl.n	800fb1a <expf+0x36>
 800fb32:	f7fb fa7f 	bl	800b034 <__errno>
 800fb36:	2322      	movs	r3, #34	; 0x22
 800fb38:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800fb4c <expf+0x68>
 800fb3c:	6003      	str	r3, [r0, #0]
 800fb3e:	e7ec      	b.n	800fb1a <expf+0x36>
 800fb40:	42b17180 	.word	0x42b17180
 800fb44:	7f800000 	.word	0x7f800000
 800fb48:	c2cff1b5 	.word	0xc2cff1b5
 800fb4c:	00000000 	.word	0x00000000

0800fb50 <__ieee754_sqrt>:
 800fb50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb54:	ec55 4b10 	vmov	r4, r5, d0
 800fb58:	4e55      	ldr	r6, [pc, #340]	; (800fcb0 <__ieee754_sqrt+0x160>)
 800fb5a:	43ae      	bics	r6, r5
 800fb5c:	ee10 0a10 	vmov	r0, s0
 800fb60:	ee10 3a10 	vmov	r3, s0
 800fb64:	462a      	mov	r2, r5
 800fb66:	4629      	mov	r1, r5
 800fb68:	d110      	bne.n	800fb8c <__ieee754_sqrt+0x3c>
 800fb6a:	ee10 2a10 	vmov	r2, s0
 800fb6e:	462b      	mov	r3, r5
 800fb70:	f7f0 fd42 	bl	80005f8 <__aeabi_dmul>
 800fb74:	4602      	mov	r2, r0
 800fb76:	460b      	mov	r3, r1
 800fb78:	4620      	mov	r0, r4
 800fb7a:	4629      	mov	r1, r5
 800fb7c:	f7f0 fb86 	bl	800028c <__adddf3>
 800fb80:	4604      	mov	r4, r0
 800fb82:	460d      	mov	r5, r1
 800fb84:	ec45 4b10 	vmov	d0, r4, r5
 800fb88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb8c:	2d00      	cmp	r5, #0
 800fb8e:	dc10      	bgt.n	800fbb2 <__ieee754_sqrt+0x62>
 800fb90:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fb94:	4330      	orrs	r0, r6
 800fb96:	d0f5      	beq.n	800fb84 <__ieee754_sqrt+0x34>
 800fb98:	b15d      	cbz	r5, 800fbb2 <__ieee754_sqrt+0x62>
 800fb9a:	ee10 2a10 	vmov	r2, s0
 800fb9e:	462b      	mov	r3, r5
 800fba0:	ee10 0a10 	vmov	r0, s0
 800fba4:	f7f0 fb70 	bl	8000288 <__aeabi_dsub>
 800fba8:	4602      	mov	r2, r0
 800fbaa:	460b      	mov	r3, r1
 800fbac:	f7f0 fe4e 	bl	800084c <__aeabi_ddiv>
 800fbb0:	e7e6      	b.n	800fb80 <__ieee754_sqrt+0x30>
 800fbb2:	1512      	asrs	r2, r2, #20
 800fbb4:	d074      	beq.n	800fca0 <__ieee754_sqrt+0x150>
 800fbb6:	07d4      	lsls	r4, r2, #31
 800fbb8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fbbc:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800fbc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800fbc4:	bf5e      	ittt	pl
 800fbc6:	0fda      	lsrpl	r2, r3, #31
 800fbc8:	005b      	lslpl	r3, r3, #1
 800fbca:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800fbce:	2400      	movs	r4, #0
 800fbd0:	0fda      	lsrs	r2, r3, #31
 800fbd2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800fbd6:	107f      	asrs	r7, r7, #1
 800fbd8:	005b      	lsls	r3, r3, #1
 800fbda:	2516      	movs	r5, #22
 800fbdc:	4620      	mov	r0, r4
 800fbde:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800fbe2:	1886      	adds	r6, r0, r2
 800fbe4:	428e      	cmp	r6, r1
 800fbe6:	bfde      	ittt	le
 800fbe8:	1b89      	suble	r1, r1, r6
 800fbea:	18b0      	addle	r0, r6, r2
 800fbec:	18a4      	addle	r4, r4, r2
 800fbee:	0049      	lsls	r1, r1, #1
 800fbf0:	3d01      	subs	r5, #1
 800fbf2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800fbf6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800fbfa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fbfe:	d1f0      	bne.n	800fbe2 <__ieee754_sqrt+0x92>
 800fc00:	462a      	mov	r2, r5
 800fc02:	f04f 0e20 	mov.w	lr, #32
 800fc06:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800fc0a:	4281      	cmp	r1, r0
 800fc0c:	eb06 0c05 	add.w	ip, r6, r5
 800fc10:	dc02      	bgt.n	800fc18 <__ieee754_sqrt+0xc8>
 800fc12:	d113      	bne.n	800fc3c <__ieee754_sqrt+0xec>
 800fc14:	459c      	cmp	ip, r3
 800fc16:	d811      	bhi.n	800fc3c <__ieee754_sqrt+0xec>
 800fc18:	f1bc 0f00 	cmp.w	ip, #0
 800fc1c:	eb0c 0506 	add.w	r5, ip, r6
 800fc20:	da43      	bge.n	800fcaa <__ieee754_sqrt+0x15a>
 800fc22:	2d00      	cmp	r5, #0
 800fc24:	db41      	blt.n	800fcaa <__ieee754_sqrt+0x15a>
 800fc26:	f100 0801 	add.w	r8, r0, #1
 800fc2a:	1a09      	subs	r1, r1, r0
 800fc2c:	459c      	cmp	ip, r3
 800fc2e:	bf88      	it	hi
 800fc30:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800fc34:	eba3 030c 	sub.w	r3, r3, ip
 800fc38:	4432      	add	r2, r6
 800fc3a:	4640      	mov	r0, r8
 800fc3c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800fc40:	f1be 0e01 	subs.w	lr, lr, #1
 800fc44:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800fc48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fc4c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800fc50:	d1db      	bne.n	800fc0a <__ieee754_sqrt+0xba>
 800fc52:	430b      	orrs	r3, r1
 800fc54:	d006      	beq.n	800fc64 <__ieee754_sqrt+0x114>
 800fc56:	1c50      	adds	r0, r2, #1
 800fc58:	bf13      	iteet	ne
 800fc5a:	3201      	addne	r2, #1
 800fc5c:	3401      	addeq	r4, #1
 800fc5e:	4672      	moveq	r2, lr
 800fc60:	f022 0201 	bicne.w	r2, r2, #1
 800fc64:	1063      	asrs	r3, r4, #1
 800fc66:	0852      	lsrs	r2, r2, #1
 800fc68:	07e1      	lsls	r1, r4, #31
 800fc6a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800fc6e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800fc72:	bf48      	it	mi
 800fc74:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800fc78:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800fc7c:	4614      	mov	r4, r2
 800fc7e:	e781      	b.n	800fb84 <__ieee754_sqrt+0x34>
 800fc80:	0ad9      	lsrs	r1, r3, #11
 800fc82:	3815      	subs	r0, #21
 800fc84:	055b      	lsls	r3, r3, #21
 800fc86:	2900      	cmp	r1, #0
 800fc88:	d0fa      	beq.n	800fc80 <__ieee754_sqrt+0x130>
 800fc8a:	02cd      	lsls	r5, r1, #11
 800fc8c:	d50a      	bpl.n	800fca4 <__ieee754_sqrt+0x154>
 800fc8e:	f1c2 0420 	rsb	r4, r2, #32
 800fc92:	fa23 f404 	lsr.w	r4, r3, r4
 800fc96:	1e55      	subs	r5, r2, #1
 800fc98:	4093      	lsls	r3, r2
 800fc9a:	4321      	orrs	r1, r4
 800fc9c:	1b42      	subs	r2, r0, r5
 800fc9e:	e78a      	b.n	800fbb6 <__ieee754_sqrt+0x66>
 800fca0:	4610      	mov	r0, r2
 800fca2:	e7f0      	b.n	800fc86 <__ieee754_sqrt+0x136>
 800fca4:	0049      	lsls	r1, r1, #1
 800fca6:	3201      	adds	r2, #1
 800fca8:	e7ef      	b.n	800fc8a <__ieee754_sqrt+0x13a>
 800fcaa:	4680      	mov	r8, r0
 800fcac:	e7bd      	b.n	800fc2a <__ieee754_sqrt+0xda>
 800fcae:	bf00      	nop
 800fcb0:	7ff00000 	.word	0x7ff00000

0800fcb4 <__ieee754_expf>:
 800fcb4:	ee10 2a10 	vmov	r2, s0
 800fcb8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800fcbc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800fcc0:	d902      	bls.n	800fcc8 <__ieee754_expf+0x14>
 800fcc2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fcc6:	4770      	bx	lr
 800fcc8:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800fccc:	d106      	bne.n	800fcdc <__ieee754_expf+0x28>
 800fcce:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800fe08 <__ieee754_expf+0x154>
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	bf18      	it	ne
 800fcd6:	eeb0 0a67 	vmovne.f32	s0, s15
 800fcda:	4770      	bx	lr
 800fcdc:	484b      	ldr	r0, [pc, #300]	; (800fe0c <__ieee754_expf+0x158>)
 800fcde:	4282      	cmp	r2, r0
 800fce0:	dd02      	ble.n	800fce8 <__ieee754_expf+0x34>
 800fce2:	2000      	movs	r0, #0
 800fce4:	f000 b8d0 	b.w	800fe88 <__math_oflowf>
 800fce8:	2a00      	cmp	r2, #0
 800fcea:	da05      	bge.n	800fcf8 <__ieee754_expf+0x44>
 800fcec:	4a48      	ldr	r2, [pc, #288]	; (800fe10 <__ieee754_expf+0x15c>)
 800fcee:	4291      	cmp	r1, r2
 800fcf0:	d902      	bls.n	800fcf8 <__ieee754_expf+0x44>
 800fcf2:	2000      	movs	r0, #0
 800fcf4:	f000 b8c2 	b.w	800fe7c <__math_uflowf>
 800fcf8:	4a46      	ldr	r2, [pc, #280]	; (800fe14 <__ieee754_expf+0x160>)
 800fcfa:	4291      	cmp	r1, r2
 800fcfc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800fd00:	d952      	bls.n	800fda8 <__ieee754_expf+0xf4>
 800fd02:	4a45      	ldr	r2, [pc, #276]	; (800fe18 <__ieee754_expf+0x164>)
 800fd04:	4291      	cmp	r1, r2
 800fd06:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800fd0a:	d834      	bhi.n	800fd76 <__ieee754_expf+0xc2>
 800fd0c:	4943      	ldr	r1, [pc, #268]	; (800fe1c <__ieee754_expf+0x168>)
 800fd0e:	4411      	add	r1, r2
 800fd10:	ed91 7a00 	vldr	s14, [r1]
 800fd14:	4942      	ldr	r1, [pc, #264]	; (800fe20 <__ieee754_expf+0x16c>)
 800fd16:	440a      	add	r2, r1
 800fd18:	edd2 7a00 	vldr	s15, [r2]
 800fd1c:	ee30 7a47 	vsub.f32	s14, s0, s14
 800fd20:	f1c3 0201 	rsb	r2, r3, #1
 800fd24:	1ad2      	subs	r2, r2, r3
 800fd26:	ee37 0a67 	vsub.f32	s0, s14, s15
 800fd2a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800fd2e:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800fe24 <__ieee754_expf+0x170>
 800fd32:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800fe28 <__ieee754_expf+0x174>
 800fd36:	eee6 6a05 	vfma.f32	s13, s12, s10
 800fd3a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800fe2c <__ieee754_expf+0x178>
 800fd3e:	eea6 5a86 	vfma.f32	s10, s13, s12
 800fd42:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800fe30 <__ieee754_expf+0x17c>
 800fd46:	eee5 6a06 	vfma.f32	s13, s10, s12
 800fd4a:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800fe34 <__ieee754_expf+0x180>
 800fd4e:	eea6 5a86 	vfma.f32	s10, s13, s12
 800fd52:	eef0 6a40 	vmov.f32	s13, s0
 800fd56:	eee5 6a46 	vfms.f32	s13, s10, s12
 800fd5a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800fd5e:	ee20 5a26 	vmul.f32	s10, s0, s13
 800fd62:	bb92      	cbnz	r2, 800fdca <__ieee754_expf+0x116>
 800fd64:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800fd68:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800fd6c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800fd70:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800fd74:	4770      	bx	lr
 800fd76:	4b30      	ldr	r3, [pc, #192]	; (800fe38 <__ieee754_expf+0x184>)
 800fd78:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800fe3c <__ieee754_expf+0x188>
 800fd7c:	eddf 6a30 	vldr	s13, [pc, #192]	; 800fe40 <__ieee754_expf+0x18c>
 800fd80:	4413      	add	r3, r2
 800fd82:	edd3 7a00 	vldr	s15, [r3]
 800fd86:	eee0 7a07 	vfma.f32	s15, s0, s14
 800fd8a:	eeb0 7a40 	vmov.f32	s14, s0
 800fd8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd92:	ee17 2a90 	vmov	r2, s15
 800fd96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd9a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800fd9e:	eddf 6a29 	vldr	s13, [pc, #164]	; 800fe44 <__ieee754_expf+0x190>
 800fda2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fda6:	e7be      	b.n	800fd26 <__ieee754_expf+0x72>
 800fda8:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 800fdac:	d20b      	bcs.n	800fdc6 <__ieee754_expf+0x112>
 800fdae:	eddf 6a26 	vldr	s13, [pc, #152]	; 800fe48 <__ieee754_expf+0x194>
 800fdb2:	ee70 6a26 	vadd.f32	s13, s0, s13
 800fdb6:	eef4 6ae5 	vcmpe.f32	s13, s11
 800fdba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdbe:	dd02      	ble.n	800fdc6 <__ieee754_expf+0x112>
 800fdc0:	ee30 0a25 	vadd.f32	s0, s0, s11
 800fdc4:	4770      	bx	lr
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	e7af      	b.n	800fd2a <__ieee754_expf+0x76>
 800fdca:	ee76 6a66 	vsub.f32	s13, s12, s13
 800fdce:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800fdd2:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800fdd6:	bfb8      	it	lt
 800fdd8:	3264      	addlt	r2, #100	; 0x64
 800fdda:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800fdde:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800fde2:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800fde6:	ee17 3a90 	vmov	r3, s15
 800fdea:	bfab      	itete	ge
 800fdec:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800fdf0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800fdf4:	ee00 3a10 	vmovge	s0, r3
 800fdf8:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800fe4c <__ieee754_expf+0x198>
 800fdfc:	bfbc      	itt	lt
 800fdfe:	ee00 3a10 	vmovlt	s0, r3
 800fe02:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800fe06:	4770      	bx	lr
 800fe08:	00000000 	.word	0x00000000
 800fe0c:	42b17217 	.word	0x42b17217
 800fe10:	42cff1b5 	.word	0x42cff1b5
 800fe14:	3eb17218 	.word	0x3eb17218
 800fe18:	3f851591 	.word	0x3f851591
 800fe1c:	080af354 	.word	0x080af354
 800fe20:	080af35c 	.word	0x080af35c
 800fe24:	3331bb4c 	.word	0x3331bb4c
 800fe28:	b5ddea0e 	.word	0xb5ddea0e
 800fe2c:	388ab355 	.word	0x388ab355
 800fe30:	bb360b61 	.word	0xbb360b61
 800fe34:	3e2aaaab 	.word	0x3e2aaaab
 800fe38:	080af34c 	.word	0x080af34c
 800fe3c:	3fb8aa3b 	.word	0x3fb8aa3b
 800fe40:	3f317180 	.word	0x3f317180
 800fe44:	3717f7d1 	.word	0x3717f7d1
 800fe48:	7149f2ca 	.word	0x7149f2ca
 800fe4c:	0d800000 	.word	0x0d800000

0800fe50 <with_errnof>:
 800fe50:	b513      	push	{r0, r1, r4, lr}
 800fe52:	4604      	mov	r4, r0
 800fe54:	ed8d 0a01 	vstr	s0, [sp, #4]
 800fe58:	f7fb f8ec 	bl	800b034 <__errno>
 800fe5c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800fe60:	6004      	str	r4, [r0, #0]
 800fe62:	b002      	add	sp, #8
 800fe64:	bd10      	pop	{r4, pc}

0800fe66 <xflowf>:
 800fe66:	b130      	cbz	r0, 800fe76 <xflowf+0x10>
 800fe68:	eef1 7a40 	vneg.f32	s15, s0
 800fe6c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fe70:	2022      	movs	r0, #34	; 0x22
 800fe72:	f7ff bfed 	b.w	800fe50 <with_errnof>
 800fe76:	eef0 7a40 	vmov.f32	s15, s0
 800fe7a:	e7f7      	b.n	800fe6c <xflowf+0x6>

0800fe7c <__math_uflowf>:
 800fe7c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fe84 <__math_uflowf+0x8>
 800fe80:	f7ff bff1 	b.w	800fe66 <xflowf>
 800fe84:	10000000 	.word	0x10000000

0800fe88 <__math_oflowf>:
 800fe88:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fe90 <__math_oflowf+0x8>
 800fe8c:	f7ff bfeb 	b.w	800fe66 <xflowf>
 800fe90:	70000000 	.word	0x70000000

0800fe94 <finitef>:
 800fe94:	b082      	sub	sp, #8
 800fe96:	ed8d 0a01 	vstr	s0, [sp, #4]
 800fe9a:	9801      	ldr	r0, [sp, #4]
 800fe9c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800fea0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800fea4:	bfac      	ite	ge
 800fea6:	2000      	movge	r0, #0
 800fea8:	2001      	movlt	r0, #1
 800feaa:	b002      	add	sp, #8
 800feac:	4770      	bx	lr
	...

0800feb0 <_close>:
 800feb0:	4b02      	ldr	r3, [pc, #8]	; (800febc <_close+0xc>)
 800feb2:	2258      	movs	r2, #88	; 0x58
 800feb4:	601a      	str	r2, [r3, #0]
 800feb6:	f04f 30ff 	mov.w	r0, #4294967295
 800feba:	4770      	bx	lr
 800febc:	2000b4f0 	.word	0x2000b4f0

0800fec0 <_fstat>:
 800fec0:	4b02      	ldr	r3, [pc, #8]	; (800fecc <_fstat+0xc>)
 800fec2:	2258      	movs	r2, #88	; 0x58
 800fec4:	601a      	str	r2, [r3, #0]
 800fec6:	f04f 30ff 	mov.w	r0, #4294967295
 800feca:	4770      	bx	lr
 800fecc:	2000b4f0 	.word	0x2000b4f0

0800fed0 <_getpid>:
 800fed0:	4b02      	ldr	r3, [pc, #8]	; (800fedc <_getpid+0xc>)
 800fed2:	2258      	movs	r2, #88	; 0x58
 800fed4:	601a      	str	r2, [r3, #0]
 800fed6:	f04f 30ff 	mov.w	r0, #4294967295
 800feda:	4770      	bx	lr
 800fedc:	2000b4f0 	.word	0x2000b4f0

0800fee0 <_isatty>:
 800fee0:	4b02      	ldr	r3, [pc, #8]	; (800feec <_isatty+0xc>)
 800fee2:	2258      	movs	r2, #88	; 0x58
 800fee4:	601a      	str	r2, [r3, #0]
 800fee6:	2000      	movs	r0, #0
 800fee8:	4770      	bx	lr
 800feea:	bf00      	nop
 800feec:	2000b4f0 	.word	0x2000b4f0

0800fef0 <_kill>:
 800fef0:	4b02      	ldr	r3, [pc, #8]	; (800fefc <_kill+0xc>)
 800fef2:	2258      	movs	r2, #88	; 0x58
 800fef4:	601a      	str	r2, [r3, #0]
 800fef6:	f04f 30ff 	mov.w	r0, #4294967295
 800fefa:	4770      	bx	lr
 800fefc:	2000b4f0 	.word	0x2000b4f0

0800ff00 <_lseek>:
 800ff00:	4b02      	ldr	r3, [pc, #8]	; (800ff0c <_lseek+0xc>)
 800ff02:	2258      	movs	r2, #88	; 0x58
 800ff04:	601a      	str	r2, [r3, #0]
 800ff06:	f04f 30ff 	mov.w	r0, #4294967295
 800ff0a:	4770      	bx	lr
 800ff0c:	2000b4f0 	.word	0x2000b4f0

0800ff10 <_read>:
 800ff10:	4b02      	ldr	r3, [pc, #8]	; (800ff1c <_read+0xc>)
 800ff12:	2258      	movs	r2, #88	; 0x58
 800ff14:	601a      	str	r2, [r3, #0]
 800ff16:	f04f 30ff 	mov.w	r0, #4294967295
 800ff1a:	4770      	bx	lr
 800ff1c:	2000b4f0 	.word	0x2000b4f0

0800ff20 <_exit>:
 800ff20:	e7fe      	b.n	800ff20 <_exit>
	...

0800ff24 <_init>:
 800ff24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff26:	bf00      	nop
 800ff28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff2a:	bc08      	pop	{r3}
 800ff2c:	469e      	mov	lr, r3
 800ff2e:	4770      	bx	lr

0800ff30 <_fini>:
 800ff30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff32:	bf00      	nop
 800ff34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff36:	bc08      	pop	{r3}
 800ff38:	469e      	mov	lr, r3
 800ff3a:	4770      	bx	lr
